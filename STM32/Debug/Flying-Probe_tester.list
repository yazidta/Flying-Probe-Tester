
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184a0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d98  08018670  08018670  00019670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019408  08019408  0001b244  2**0
                  CONTENTS
  4 .ARM          00000008  08019408  08019408  0001a408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019410  08019410  0001b244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019410  08019410  0001a410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019414  08019414  0001a414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08019418  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014bb0  20000248  0801965c  0001b248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20014df8  0801965c  0001bdf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032883  00000000  00000000  0001b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f85  00000000  00000000  0004daf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002660  00000000  00000000  00054a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001dee  00000000  00000000  000570e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe45  00000000  00000000  00058ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003a8d6  00000000  00000000  00088d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062de  00000000  00000000  000c35e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c98c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b394  00000000  00000000  001c990c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d4ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018658 	.word	0x08018658

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	08018658 	.word	0x08018658

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fc59 	bl	800a874 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fc2:	bf00      	nop
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3f9      	bcc.n	8000fc4 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f009 fcbf 	bl	800a954 <HAL_TIM_Base_Stop>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ff0:	78bb      	ldrb	r3, [r7, #2]
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <__lcd_i2c_write+0xac>)
 8001006:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <__lcd_i2c_write+0xac>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <__lcd_i2c_write+0xac>)
 800100e:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	b2da      	uxtb	r2, r3
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	4313      	orrs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <__lcd_i2c_write+0xac>)
 8001026:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b2da      	uxtb	r2, r3
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 030c 	orr.w	r3, r3, #12
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <__lcd_i2c_write+0xac>)
 800103c:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <__lcd_i2c_write+0xac>)
 8001040:	78da      	ldrb	r2, [r3, #3]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <__lcd_i2c_write+0xac>)
 8001044:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2da      	uxtb	r2, r3
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4313      	orrs	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__lcd_i2c_write+0xac>)
 800105a:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b299      	uxth	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2306      	movs	r3, #6
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <__lcd_i2c_write+0xac>)
 8001072:	f006 ff9d 	bl	8007fb0 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2132      	movs	r1, #50	@ 0x32
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff93 	bl	8000fa8 <__lcd_delay_us>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000264 	.word	0x20000264

08001090 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff9c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff8c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff61 	bl	8000fa8 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010fc:	2103      	movs	r1, #3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffc6 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff4b 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffbb 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff40 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001128:	2102      	movs	r1, #2
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800113e:	2128      	movs	r1, #40	@ 0x28
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffa5 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001146:	210c      	movs	r1, #12
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffa1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800114e:	2101      	movs	r1, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff9d 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff22 	bl	8000fa8 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001164:	2106      	movs	r1, #6
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff92 	bl	8001090 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff90 	bl	80010b0 <__lcd_i2c_write_data>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e00a      	b.n	80011be <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff7c 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfc      	ldrb	r4, [r7, #15]
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff f825 	bl	8000210 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d3ed      	bcc.n	80011a8 <LCD_I2C_printStr+0x10>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
	...

080011d8 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	4613      	mov	r3, r2
 80011e6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <LCD_I2C_Cursor+0x30>)
 80011ec:	5cd2      	ldrb	r2, [r2, r3]
 80011ee:	78bb      	ldrb	r3, [r7, #2]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b80      	subs	r3, #128	@ 0x80
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff48 	bl	8001090 <__lcd_i2c_write_command>
  #endif
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08018bec 	.word	0x08018bec

0800120c <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d90a      	bls.n	8001238 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	3b02      	subs	r3, #2
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffd1 	bl	80011d8 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001236:	e005      	b.n	8001244 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001238:	78ba      	ldrb	r2, [r7, #2]
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffca 	bl	80011d8 <LCD_I2C_Cursor>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff1a 	bl	8001090 <__lcd_i2c_write_command>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <LCD_I2C_ClearAllLines>:
void LCD_I2C_ClearAllLines(LCD_I2C_HandleTypeDef * hlcd){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e00d      	b.n	800128e <LCD_I2C_ClearAllLines+0x2a>
        LCD_I2C_SetCursor(hlcd, i, 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc6 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <LCD_I2C_ClearAllLines+0x3c>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff88 	bl	8001198 <LCD_I2C_printStr>
    for (int i = 0; i < 4; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b03      	cmp	r3, #3
 8001292:	ddee      	ble.n	8001272 <LCD_I2C_ClearAllLines+0xe>
   }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	0801867c 	.word	0x0801867c

080012a4 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	460b      	mov	r3, r1
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3340      	adds	r3, #64	@ 0x40
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fee6 	bl	8001090 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e00a      	b.n	80012e0 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff feeb 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	3301      	adds	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d9f1      	bls.n	80012ca <LCD_I2C_DefineChar+0x26>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012fe:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8001300:	69b8      	ldr	r0, [r7, #24]
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001314:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffbf 	bl	80012a4 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
 800132a:	e025      	b.n	8001378 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3303      	adds	r3, #3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff68 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff1b 	bl	800117a <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe2b 	bl	8000fa8 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	3303      	adds	r3, #3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff55 	bl	800120c <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fe9f 	bl	80010b0 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3301      	adds	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7ffa      	ldrb	r2, [r7, #31]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3d5      	bcc.n	800132c <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	08018694 	.word	0x08018694
 8001390:	080186a0 	.word	0x080186a0

08001394 <LCD_I2C_menuTemplate>:
uint8_t LCD_I2C_menuTemplate(LCD_I2C_HandleTypeDef* hlcd,
                             ENC_Handle_TypeDef* henc,
                             const char* displayItems[],
                             uint8_t numItems,
                             bool backOption)
{
 8001394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001398:	b091      	sub	sp, #68	@ 0x44
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	466b      	mov	r3, sp
 80013a6:	461e      	mov	r6, r3
    LCD_I2C_ClearAllLines(hlcd);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff5b 	bl	8001264 <LCD_I2C_ClearAllLines>

    // Determine total options based on whether a back option is added
    uint8_t totalOptions = backOption ? numItems + 1 : numItems;
 80013ae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <LCD_I2C_menuTemplate+0x2a>
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	e000      	b.n	80013c0 <LCD_I2C_menuTemplate+0x2c>
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Create a local array to hold the menu items
    const char* menuItems[totalOptions];
 80013c4:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ce:	b2cb      	uxtb	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	4691      	mov	r9, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013e2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013e6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80013ea:	b2cb      	uxtb	r3, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	016b      	lsls	r3, r5, #5
 80013fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001400:	0162      	lsls	r2, r4, #5
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3307      	adds	r3, #7
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	ebad 0d03 	sub.w	sp, sp, r3
 8001410:	466b      	mov	r3, sp
 8001412:	3303      	adds	r3, #3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30

    // Populate the menu items array, inserting "Back" at index 0 if needed.
    if (backOption) {
 800141a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01e      	beq.n	8001460 <LCD_I2C_menuTemplate+0xcc>
        menuItems[0] = "Back";
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <LCD_I2C_menuTemplate+0x20c>)
 8001426:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800142e:	e010      	b.n	8001452 <LCD_I2C_menuTemplate+0xbe>
            menuItems[i+1] = displayItems[i];
 8001430:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800143e:	3201      	adds	r2, #1
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001448:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001452:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001456:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800145a:	429a      	cmp	r2, r3
 800145c:	d3e8      	bcc.n	8001430 <LCD_I2C_menuTemplate+0x9c>
 800145e:	e019      	b.n	8001494 <LCD_I2C_menuTemplate+0x100>
        }
    } else {
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001466:	e00f      	b.n	8001488 <LCD_I2C_menuTemplate+0xf4>
            menuItems[i] = displayItems[i];
 8001468:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 800147e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001482:	3301      	adds	r3, #1
 8001484:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001488:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800148c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e9      	bcc.n	8001468 <LCD_I2C_menuTemplate+0xd4>
        }
    }

    uint8_t selectedOption = 0;       // Current selected menu item
 8001494:	2300      	movs	r3, #0
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t previousOption = 255;     // Set to an invalid option to force the first update
 800149a:	23ff      	movs	r3, #255	@ 0xff
 800149c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
//        AddBackOption(menuItems, totalOptions);
//    }

    while (1) {
        // Get the current encoder step count (assuming ENC_GetCounter returns a signed value if needed)
        uint32_t encoderStep = ENC_GetCounter(henc);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f002 f889 	bl	80035b8 <ENC_GetCounter>
 80014a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Normalize encoder steps to the range of [0, totalOptions-1]
        selectedOption = encoderStep % totalOptions;
 80014a8:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // (Since selectedOption is unsigned, the check for negative values is unnecessary.)

        // Update the display only if the selection has changed
        if (selectedOption != previousOption) {
 80014bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014c0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d042      	beq.n	800154e <LCD_I2C_menuTemplate+0x1ba>
            previousOption = selectedOption;
 80014c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            // Clear the display lines
            LCD_I2C_ClearAllLines(hlcd);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fec7 	bl	8001264 <LCD_I2C_ClearAllLines>

            // Update menu display with the current menu items
            for (uint8_t i = 0; i < totalOptions; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80014dc:	e031      	b.n	8001542 <LCD_I2C_menuTemplate+0x1ae>
                LCD_I2C_SetCursor(hlcd, i, 0);
 80014de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe90 	bl	800120c <LCD_I2C_SetCursor>

                char formattedLine[21];
                if (i == selectedOption) {
 80014ec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <LCD_I2C_menuTemplate+0x17c>
                    // Highlight the selected item
                    snprintf(formattedLine, sizeof(formattedLine), ">%-19s", menuItems[i]);
 80014f8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	f107 0010 	add.w	r0, r7, #16
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <LCD_I2C_menuTemplate+0x210>)
 8001508:	2115      	movs	r1, #21
 800150a:	f014 fee3 	bl	80162d4 <sniprintf>
 800150e:	e00a      	b.n	8001526 <LCD_I2C_menuTemplate+0x192>
                } else {
                    snprintf(formattedLine, sizeof(formattedLine), " %-19s", menuItems[i]);
 8001510:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	f107 0010 	add.w	r0, r7, #16
 800151e:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <LCD_I2C_menuTemplate+0x214>)
 8001520:	2115      	movs	r1, #21
 8001522:	f014 fed7 	bl	80162d4 <sniprintf>
                }
                LCD_I2C_printStr(hlcd, formattedLine);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fe33 	bl	8001198 <LCD_I2C_printStr>
                osDelay(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f011 f80b 	bl	801254e <osDelay>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8001538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800153c:	3301      	adds	r3, #1
 800153e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001542:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001546:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800154a:	429a      	cmp	r2, r3
 800154c:	d3c7      	bcc.n	80014de <LCD_I2C_menuTemplate+0x14a>
            }
        }

        // Check for the selection button press
        bool buttonInput = read_buttons();
 800154e:	f000 f82f 	bl	80015b0 <read_buttons>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (buttonInput == 0) {
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d013      	beq.n	800158e <LCD_I2C_menuTemplate+0x1fa>
            osDelay(200); // Debounce delay
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f010 fff1 	bl	801254e <osDelay>
            if (selectedOption == 0 && backOption) {
 800156c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
 8001574:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
                currentState = MENU_STATE_PREPARE_MACHINE;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <LCD_I2C_menuTemplate+0x218>)
 800157e:	2206      	movs	r2, #6
 8001580:	701a      	strb	r2, [r3, #0]

                return ;
 8001582:	46b5      	mov	sp, r6
 8001584:	e007      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            } else {
                return selectedOption;
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158a:	46b5      	mov	sp, r6
 800158c:	e003      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            }
        }

        // Delay for smoother updates
        osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f010 ffdd 	bl	801254e <osDelay>
    while (1) {
 8001594:	e784      	b.n	80014a0 <LCD_I2C_menuTemplate+0x10c>
    }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3744      	adds	r7, #68	@ 0x44
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	08018714 	.word	0x08018714
 80015a4:	0801871c 	.word	0x0801871c
 80015a8:	08018724 	.word	0x08018724
 80015ac:	20008a54 	.word	0x20008a54

080015b0 <read_buttons>:
//}



bool read_buttons(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin) == GPIO_PIN_SET) return 1; // Down
 80015b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <read_buttons+0x20>)
 80015ba:	f006 fc13 	bl	8007de4 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <read_buttons+0x18>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <read_buttons+0x1a>
    else return 0;
 80015c8:	2300      	movs	r3, #0

}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <MountSDCard>:


FRESULT MountSDCard(FATFS* FatFs) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return f_mount(FatFs, "", 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <MountSDCard+0x1c>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f00f fd9b 	bl	801111c <f_mount>
 80015e6:	4603      	mov	r3, r0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0801872c 	.word	0x0801872c

080015f4 <OpenRootDir>:

FRESULT OpenRootDir(DIR* dir) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    return f_opendir(dir, "/");
 80015fc:	4904      	ldr	r1, [pc, #16]	@ (8001610 <OpenRootDir+0x1c>)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f010 fc75 	bl	8011eee <f_opendir>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08018730 	.word	0x08018730

08001614 <ReadFiles>:

uint8_t ReadFiles(DIR* dir, char fileList[][20 + 1], uint8_t maxFiles) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b0cc      	sub	sp, #304	@ 0x130
 8001618:	af00      	add	r7, sp, #0
 800161a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001628:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001632:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8001636:	701a      	strb	r2, [r3, #0]
    FILINFO fno;
    uint8_t count = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    FRESULT fres;

    while (count < maxFiles) {
 800163e:	e039      	b.n	80016b4 <ReadFiles+0xa0>
        fres = f_readdir(dir, &fno);
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800164c:	4611      	mov	r1, r2
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f010 fd3d 	bl	80120ce <f_readdir>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 800165a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800165e:	2b00      	cmp	r3, #0
 8001660:	d131      	bne.n	80016c6 <ReadFiles+0xb2>
 8001662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800166a:	7d9b      	ldrb	r3, [r3, #22]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02a      	beq.n	80016c6 <ReadFiles+0xb2>
        if (!(fno.fattrib & AM_DIR)) {
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <ReadFiles+0xa0>
            snprintf(fileList[count], 20 + 1, "%-20s", fno.fname);
 8001682:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00da      	lsls	r2, r3, #3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001694:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	18d0      	adds	r0, r2, r3
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	3316      	adds	r3, #22
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <ReadFiles+0xc0>)
 80016a4:	2115      	movs	r1, #21
 80016a6:	f014 fe15 	bl	80162d4 <sniprintf>
            count++;
 80016aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    while (count < maxFiles) {
 80016b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80016bc:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3bc      	bcc.n	8001640 <ReadFiles+0x2c>
        }
    }

    return count;
 80016c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08018734 	.word	0x08018734

080016d8 <DisplayMenu>:

void AddBackOption(char menuItems[][20 + 1], uint8_t index) {
    snprintf(menuItems[index], 20 + 1, "%-20s", "Back");
}

void DisplayMenu(LCD_I2C_HandleTypeDef* hlcd, char fileList[][20 + 1], uint8_t fileCount, uint8_t selectedIndex) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71bb      	strb	r3, [r7, #6]
    // Clear the LCD
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	e00f      	b.n	8001716 <DisplayMenu+0x3e>
        LCD_I2C_SetCursor(hlcd, i, 0);
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fd84 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001704:	493d      	ldr	r1, [pc, #244]	@ (80017fc <DisplayMenu+0x124>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd46 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 800170c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001710:	3301      	adds	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800171a:	2b03      	cmp	r3, #3
 800171c:	d9eb      	bls.n	80016f6 <DisplayMenu+0x1e>
    }

    // Determine the window of files to display
    uint8_t startIdx = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (selectedIndex >= LCD_ROWS) {
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d903      	bls.n	8001732 <DisplayMenu+0x5a>
        startIdx = selectedIndex - (LCD_ROWS - 1);
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b03      	subs	r3, #3
 800172e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001738:	e057      	b.n	80017ea <DisplayMenu+0x112>
        uint8_t displayIdx = startIdx + i;
 800173a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800173e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001742:	4413      	add	r3, r2
 8001744:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        if (displayIdx >= fileCount) {
 8001748:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d30b      	bcc.n	800176a <DisplayMenu+0x92>
            // Clear remaining lines if any
            LCD_I2C_SetCursor(hlcd, i, 0);
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd56 	bl	800120c <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    ");
 8001760:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DisplayMenu+0x124>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd18 	bl	8001198 <LCD_I2C_printStr>
 8001768:	e03a      	b.n	80017e0 <DisplayMenu+0x108>
            continue;
        }

        // Prepare the formatted line with cursor
        char formattedLine[20 + 1] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	741a      	strb	r2, [r3, #16]
        if (displayIdx == selectedIndex) {
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	d10f      	bne.n	80017a8 <DisplayMenu+0xd0>
            snprintf(formattedLine, sizeof(formattedLine), "> %-19s", fileList[displayIdx]);
 8001788:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00da      	lsls	r2, r3, #3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	f107 0014 	add.w	r0, r7, #20
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <DisplayMenu+0x128>)
 80017a0:	2115      	movs	r1, #21
 80017a2:	f014 fd97 	bl	80162d4 <sniprintf>
 80017a6:	e00e      	b.n	80017c6 <DisplayMenu+0xee>
        } else {
            snprintf(formattedLine, sizeof(formattedLine), "  %-19s", fileList[displayIdx]);
 80017a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	f107 0014 	add.w	r0, r7, #20
 80017be:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <DisplayMenu+0x12c>)
 80017c0:	2115      	movs	r1, #21
 80017c2:	f014 fd87 	bl	80162d4 <sniprintf>
        }

        // Write to the LCD
        LCD_I2C_SetCursor(hlcd, i, 0);
 80017c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff fd1c 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, formattedLine);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fcdc 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80017e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80017ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9a3      	bls.n	800173a <DisplayMenu+0x62>
    }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	@ 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	0801867c 	.word	0x0801867c
 8001800:	0801873c 	.word	0x0801873c
 8001804:	08018744 	.word	0x08018744

08001808 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	f2ad 4d64 	subw	sp, sp, #1124	@ 0x464
 800180e:	af00      	add	r7, sp, #0
 8001810:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001814:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800181e:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 8001822:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    char fileList[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    char fileListBackoption[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    uint8_t fileCount = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453

    fres = MountSDCard(&FatFs);
 800182a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fed0 	bl	80015d4 <MountSDCard>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 3452 	strb.w	r3, [r7, #1106]	@ 0x452
    if (fres != FR_OK) {
 800183a:	f897 3452 	ldrb.w	r3, [r7, #1106]	@ 0x452
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01f      	beq.n	8001882 <LCD_I2C_DisplaySDMenu+0x7a>
    	LCD_I2C_ClearAllLines(hlcd);
 8001842:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001846:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f7ff fd0a 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001850:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001854:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f7ff fcd5 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8001862:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001866:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 800186a:	49aa      	ldr	r1, [pc, #680]	@ (8001b14 <LCD_I2C_DisplaySDMenu+0x30c>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff fc93 	bl	8001198 <LCD_I2C_printStr>

        HAL_Delay(2000);
 8001872:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001876:	f005 fbf9 	bl	800706c <HAL_Delay>
        currentState = MENU_STATE_MAIN;
 800187a:	4ba7      	ldr	r3, [pc, #668]	@ (8001b18 <LCD_I2C_DisplaySDMenu+0x310>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

        return;
 8001880:	e1c3      	b.n	8001c0a <LCD_I2C_DisplaySDMenu+0x402>
    }
    else{
    fres = OpenRootDir(&dir);
 8001882:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff feb4 	bl	80015f4 <OpenRootDir>
 800188c:	4603      	mov	r3, r0
 800188e:	f887 3452 	strb.w	r3, [r7, #1106]	@ 0x452
    if (fres != FR_OK) {
 8001892:	f897 3452 	ldrb.w	r3, [r7, #1106]	@ 0x452
 8001896:	2b00      	cmp	r3, #0
 8001898:	d021      	beq.n	80018de <LCD_I2C_DisplaySDMenu+0xd6>
    	LCD_I2C_ClearAllLines(hlcd);
 800189a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800189e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	f7ff fcde 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 80018a8:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80018ac:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018b0:	2200      	movs	r2, #0
 80018b2:	2100      	movs	r1, #0
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	f7ff fca9 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 80018ba:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80018be:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80018c2:	4996      	ldr	r1, [pc, #600]	@ (8001b1c <LCD_I2C_DisplaySDMenu+0x314>)
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	f7ff fc67 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 80018ca:	2200      	movs	r2, #0
 80018cc:	4994      	ldr	r1, [pc, #592]	@ (8001b20 <LCD_I2C_DisplaySDMenu+0x318>)
 80018ce:	2000      	movs	r0, #0
 80018d0:	f00f fc24 	bl	801111c <f_mount>
        HAL_Delay(2000);
 80018d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018d8:	f005 fbc8 	bl	800706c <HAL_Delay>
        return;
 80018dc:	e195      	b.n	8001c0a <LCD_I2C_DisplaySDMenu+0x402>
    }

    fileCount = ReadFiles(&dir, fileList, MAX_FILES);
 80018de:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 80018e2:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 80018e6:	220a      	movs	r2, #10
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe93 	bl	8001614 <ReadFiles>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453
    f_closedir(&dir);
 80018f4:	f507 73ee 	add.w	r3, r7, #476	@ 0x1dc
 80018f8:	4618      	mov	r0, r3
 80018fa:	f010 fbbd 	bl	8012078 <f_closedir>
    f_mount(NULL, "", 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	4987      	ldr	r1, [pc, #540]	@ (8001b20 <LCD_I2C_DisplaySDMenu+0x318>)
 8001902:	2000      	movs	r0, #0
 8001904:	f00f fc0a 	bl	801111c <f_mount>

    // Add "Back" option

    strncpy(fileListBackoption[0], "Back", 20);
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2214      	movs	r2, #20
 800190e:	4985      	ldr	r1, [pc, #532]	@ (8001b24 <LCD_I2C_DisplaySDMenu+0x31c>)
 8001910:	4618      	mov	r0, r3
 8001912:	f014 fda8 	bl	8016466 <strncpy>
    for (uint8_t i = 0; i < fileCount; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
 800191c:	e02d      	b.n	800197a <LCD_I2C_DisplaySDMenu+0x172>
    	strncpy(fileListBackoption[i + 1], fileList[i], 20);
 800191e:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	4613      	mov	r3, r2
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	4413      	add	r3, r2
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	1ad2      	subs	r2, r2, r3
 8001932:	1888      	adds	r0, r1, r2
 8001934:	f897 245f 	ldrb.w	r2, [r7, #1119]	@ 0x45f
 8001938:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	00da      	lsls	r2, r3, #3
 8001944:	1ad2      	subs	r2, r2, r3
 8001946:	188b      	adds	r3, r1, r2
 8001948:	2214      	movs	r2, #20
 800194a:	4619      	mov	r1, r3
 800194c:	f014 fd8b 	bl	8016466 <strncpy>
    	fileListBackoption[i + 1][20] = '\0'; // Explicitly null-terminate
 8001950:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800195a:	f2a3 4154 	subw	r1, r3, #1108	@ 0x454
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	00da      	lsls	r2, r3, #3
 8001966:	1ad2      	subs	r2, r2, r3
 8001968:	188b      	adds	r3, r1, r2
 800196a:	3314      	adds	r3, #20
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < fileCount; i++) {
 8001970:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8001974:	3301      	adds	r3, #1
 8001976:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
 800197a:	f897 245f 	ldrb.w	r2, [r7, #1119]	@ 0x45f
 800197e:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 8001982:	429a      	cmp	r2, r3
 8001984:	d3cb      	bcc.n	800191e <LCD_I2C_DisplaySDMenu+0x116>
        }
    fileCount++;
 8001986:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 800198a:	3301      	adds	r3, #1
 800198c:	f887 3453 	strb.w	r3, [r7, #1107]	@ 0x453
   // AddBackOption(fileList, 0);

    if (fileCount == 1) { // Only "Back" is available
 8001990:	f897 3453 	ldrb.w	r3, [r7, #1107]	@ 0x453
 8001994:	2b01      	cmp	r3, #1
 8001996:	d115      	bne.n	80019c4 <LCD_I2C_DisplaySDMenu+0x1bc>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001998:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800199c:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	6818      	ldr	r0, [r3, #0]
 80019a6:	f7ff fc31 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 80019aa:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80019ae:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 80019b2:	495d      	ldr	r1, [pc, #372]	@ (8001b28 <LCD_I2C_DisplaySDMenu+0x320>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	f7ff fbef 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 80019ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019be:	f005 fb55 	bl	800706c <HAL_Delay>
        return;
 80019c2:	e122      	b.n	8001c0a <LCD_I2C_DisplaySDMenu+0x402>
    }

    uint8_t selectedIndex = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f887 3451 	strb.w	r3, [r7, #1105]	@ 0x451
    uint8_t previousIndex = 255;
 80019ca:	23ff      	movs	r3, #255	@ 0xff
 80019cc:	f887 345e 	strb.w	r3, [r7, #1118]	@ 0x45e

    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 80019d0:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80019d4:	f5a3 638c 	sub.w	r3, r3, #1120	@ 0x460
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	f001 fded 	bl	80035b8 <ENC_GetCounter>
 80019de:	f8c7 044c 	str.w	r0, [r7, #1100]	@ 0x44c
        selectedIndex = encoderStep % fileCount;
 80019e2:	f897 2453 	ldrb.w	r2, [r7, #1107]	@ 0x453
 80019e6:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 80019ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80019ee:	fb01 f202 	mul.w	r2, r1, r2
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	f887 3451 	strb.w	r3, [r7, #1105]	@ 0x451

        if (selectedIndex != previousIndex) {
 80019f8:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 80019fc:	f897 345e 	ldrb.w	r3, [r7, #1118]	@ 0x45e
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d010      	beq.n	8001a26 <LCD_I2C_DisplaySDMenu+0x21e>
            previousIndex = selectedIndex;
 8001a04:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a08:	f887 345e 	strb.w	r3, [r7, #1118]	@ 0x45e
            DisplayMenu(hlcd, fileListBackoption, fileCount, selectedIndex);
 8001a0c:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a10:	f897 2453 	ldrb.w	r2, [r7, #1107]	@ 0x453
 8001a14:	f107 010c 	add.w	r1, r7, #12
 8001a18:	f507 608c 	add.w	r0, r7, #1120	@ 0x460
 8001a1c:	f2a0 405c 	subw	r0, r0, #1116	@ 0x45c
 8001a20:	6800      	ldr	r0, [r0, #0]
 8001a22:	f7ff fe59 	bl	80016d8 <DisplayMenu>
        }

        // Handle button press for selection
        if (read_buttons() == 0) {
 8001a26:	f7ff fdc3 	bl	80015b0 <read_buttons>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f083 0301 	eor.w	r3, r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80e5 	beq.w	8001c02 <LCD_I2C_DisplaySDMenu+0x3fa>
            HAL_Delay(200); // Debounce
 8001a38:	20c8      	movs	r0, #200	@ 0xc8
 8001a3a:	f005 fb17 	bl	800706c <HAL_Delay>
            // Clear the LCD
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f887 345d 	strb.w	r3, [r7, #1117]	@ 0x45d
 8001a44:	e016      	b.n	8001a74 <LCD_I2C_DisplaySDMenu+0x26c>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001a46:	f897 145d 	ldrb.w	r1, [r7, #1117]	@ 0x45d
 8001a4a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a4e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a52:	2200      	movs	r2, #0
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f7ff fbd9 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001a5a:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a5e:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a62:	4932      	ldr	r1, [pc, #200]	@ (8001b2c <LCD_I2C_DisplaySDMenu+0x324>)
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f7ff fb97 	bl	8001198 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a6a:	f897 345d 	ldrb.w	r3, [r7, #1117]	@ 0x45d
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f887 345d 	strb.w	r3, [r7, #1117]	@ 0x45d
 8001a74:	f897 345d 	ldrb.w	r3, [r7, #1117]	@ 0x45d
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d9e4      	bls.n	8001a46 <LCD_I2C_DisplaySDMenu+0x23e>
            }

            if (selectedIndex == 0 ) {
 8001a7c:	f897 3451 	ldrb.w	r3, [r7, #1105]	@ 0x451
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <LCD_I2C_DisplaySDMenu+0x284>
                currentState = MENU_STATE_MAIN;
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <LCD_I2C_DisplaySDMenu+0x310>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]

                // "Back" selected
                return; // Exit the menu to go back to the previous menu
 8001a8a:	e0be      	b.n	8001c0a <LCD_I2C_DisplaySDMenu+0x402>
            } else {
                // "Loading..." selected
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8001a8c:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001a90:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	f7ff fbb7 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Loading...");
 8001a9e:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001aa2:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001aa6:	4922      	ldr	r1, [pc, #136]	@ (8001b30 <LCD_I2C_DisplaySDMenu+0x328>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f7ff fb75 	bl	8001198 <LCD_I2C_printStr>
                char* start = fileListBackoption[selectedIndex];
 8001aae:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001ab2:	f107 010c 	add.w	r1, r7, #12
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	00da      	lsls	r2, r3, #3
 8001abe:	1ad2      	subs	r2, r2, r3
 8001ac0:	188b      	adds	r3, r1, r2
 8001ac2:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001ac6:	e004      	b.n	8001ad2 <LCD_I2C_DisplaySDMenu+0x2ca>
                    start++; // Skip leading spaces/tabs/newlines
 8001ac8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001ad2:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d0f5      	beq.n	8001ac8 <LCD_I2C_DisplaySDMenu+0x2c0>
 8001adc:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b09      	cmp	r3, #9
 8001ae4:	d0f0      	beq.n	8001ac8 <LCD_I2C_DisplaySDMenu+0x2c0>
 8001ae6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b0a      	cmp	r3, #10
 8001aee:	d0eb      	beq.n	8001ac8 <LCD_I2C_DisplaySDMenu+0x2c0>
 8001af0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b0d      	cmp	r3, #13
 8001af8:	d0e6      	beq.n	8001ac8 <LCD_I2C_DisplaySDMenu+0x2c0>
                }

                char* end = start + strlen(start) - 1;
 8001afa:	f8d7 0458 	ldr.w	r0, [r7, #1112]	@ 0x458
 8001afe:	f7fe fb87 	bl	8000210 <strlen>
 8001b02:	4603      	mov	r3, r0
 8001b04:	3b01      	subs	r3, #1
 8001b06:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8001b0a:	4413      	add	r3, r2
 8001b0c:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b10:	e019      	b.n	8001b46 <LCD_I2C_DisplaySDMenu+0x33e>
 8001b12:	bf00      	nop
 8001b14:	0801874c 	.word	0x0801874c
 8001b18:	20008a54 	.word	0x20008a54
 8001b1c:	0801875c 	.word	0x0801875c
 8001b20:	0801872c 	.word	0x0801872c
 8001b24:	08018714 	.word	0x08018714
 8001b28:	0801876c 	.word	0x0801876c
 8001b2c:	0801867c 	.word	0x0801867c
 8001b30:	0801877c 	.word	0x0801877c
                    *end = '\0'; // Remove trailing spaces/tabs/newlines
 8001b34:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
                    end--;
 8001b3c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b40:	3b01      	subs	r3, #1
 8001b42:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b46:	f8d7 2454 	ldr.w	r2, [r7, #1108]	@ 0x454
 8001b4a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d313      	bcc.n	8001b7a <LCD_I2C_DisplaySDMenu+0x372>
 8001b52:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d0eb      	beq.n	8001b34 <LCD_I2C_DisplaySDMenu+0x32c>
 8001b5c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	d0e6      	beq.n	8001b34 <LCD_I2C_DisplaySDMenu+0x32c>
 8001b66:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b0a      	cmp	r3, #10
 8001b6e:	d0e1      	beq.n	8001b34 <LCD_I2C_DisplaySDMenu+0x32c>
 8001b70:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b0d      	cmp	r3, #13
 8001b78:	d0dc      	beq.n	8001b34 <LCD_I2C_DisplaySDMenu+0x32c>
                }

                // Move the trimmed string into the original buffer
                if (start != fileListBackoption[selectedIndex]) {
 8001b7a:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001b7e:	f107 010c 	add.w	r1, r7, #12
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	00da      	lsls	r2, r3, #3
 8001b8a:	1ad2      	subs	r2, r2, r3
 8001b8c:	188b      	adds	r3, r1, r2
 8001b8e:	f8d7 2458 	ldr.w	r2, [r7, #1112]	@ 0x458
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d015      	beq.n	8001bc2 <LCD_I2C_DisplaySDMenu+0x3ba>
                    memmove(fileListBackoption[selectedIndex], start, strlen(start) + 1);
 8001b96:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00da      	lsls	r2, r3, #3
 8001ba6:	1ad2      	subs	r2, r2, r3
 8001ba8:	188c      	adds	r4, r1, r2
 8001baa:	f8d7 0458 	ldr.w	r0, [r7, #1112]	@ 0x458
 8001bae:	f7fe fb2f 	bl	8000210 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	f8d7 1458 	ldr.w	r1, [r7, #1112]	@ 0x458
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f014 fc00 	bl	80163c2 <memmove>
                }
                process_file(hlcd, fileListBackoption[selectedIndex]);
 8001bc2:	f897 2451 	ldrb.w	r2, [r7, #1105]	@ 0x451
 8001bc6:	f107 010c 	add.w	r1, r7, #12
 8001bca:	4613      	mov	r3, r2
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	4413      	add	r3, r2
 8001bd0:	00da      	lsls	r2, r3, #3
 8001bd2:	1ad2      	subs	r2, r2, r3
 8001bd4:	440a      	add	r2, r1
 8001bd6:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001bda:	f2a3 435c 	subw	r3, r3, #1116	@ 0x45c
 8001bde:	4611      	mov	r1, r2
 8001be0:	6818      	ldr	r0, [r3, #0]
 8001be2:	f000 f81d 	bl	8001c20 <process_file>
                size_t numLines = sizeof(lines);
 8001be6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8001bea:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
                ProcessGcode(&axes, &lines, numLines);
 8001bee:	f8d7 2448 	ldr.w	r2, [r7, #1096]	@ 0x448
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <LCD_I2C_DisplaySDMenu+0x40c>)
 8001bf4:	4808      	ldr	r0, [pc, #32]	@ (8001c18 <LCD_I2C_DisplaySDMenu+0x410>)
 8001bf6:	f002 f9fd 	bl	8003ff4 <ProcessGcode>

           	    currentState = MENU_STATE_CALIBRATION;
 8001bfa:	4b08      	ldr	r3, [pc, #32]	@ (8001c1c <LCD_I2C_DisplaySDMenu+0x414>)
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	701a      	strb	r2, [r3, #0]

                // Add your file processing logic here
                return;
 8001c00:	e003      	b.n	8001c0a <LCD_I2C_DisplaySDMenu+0x402>
            }
        }

        HAL_Delay(100);
 8001c02:	2064      	movs	r0, #100	@ 0x64
 8001c04:	f005 fa32 	bl	800706c <HAL_Delay>
    while (1) {
 8001c08:	e6e2      	b.n	80019d0 <LCD_I2C_DisplaySDMenu+0x1c8>
    }
    }
}
 8001c0a:	f207 4764 	addw	r7, r7, #1124	@ 0x464
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000026c 	.word	0x2000026c
 8001c18:	2000c208 	.word	0x2000c208
 8001c1c:	20008a54 	.word	0x20008a54

08001c20 <process_file>:
void process_file(LCD_I2C_HandleTypeDef* hlcd, const char *filename) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c2c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c30:	6018      	str	r0, [r3, #0]
 8001c32:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c36:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c3a:	6019      	str	r1, [r3, #0]
    FATFS FatFs;

    FRESULT fres;
    uint8_t numLines = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f

    // Mount the SD card
    fres = f_mount(&FatFs, "", 1);
 8001c42:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001c46:	2201      	movs	r2, #1
 8001c48:	495c      	ldr	r1, [pc, #368]	@ (8001dbc <process_file+0x19c>)
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f00f fa66 	bl	801111c <f_mount>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c56:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d018      	beq.n	8001c90 <process_file+0x70>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c5e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c62:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c66:	6818      	ldr	r0, [r3, #0]
 8001c68:	f7ff fafc 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c6c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c70:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f7ff fac7 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001c7e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c82:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c86:	494e      	ldr	r1, [pc, #312]	@ (8001dc0 <process_file+0x1a0>)
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	f7ff fa85 	bl	8001198 <LCD_I2C_printStr>
       // HAL_Delay(2000);
        return;
 8001c8e:	e090      	b.n	8001db2 <process_file+0x192>
    }
    else{
    // Open the file for reading
    FIL file;
    fres = f_open(&file, filename, FA_READ);
 8001c90:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c94:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c98:	f107 000c 	add.w	r0, r7, #12
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	6819      	ldr	r1, [r3, #0]
 8001ca0:	f00f faa0 	bl	80111e4 <f_open>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001caa:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d067      	beq.n	8001d82 <process_file+0x162>
    	LCD_I2C_ClearAllLines(hlcd);
 8001cb2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cb6:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	f7ff fad2 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001cc0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cc4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	f7ff fa9d 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open file failed");
 8001cd2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001cd6:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001cda:	493a      	ldr	r1, [pc, #232]	@ (8001dc4 <process_file+0x1a4>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f7ff fa5b 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4935      	ldr	r1, [pc, #212]	@ (8001dbc <process_file+0x19c>)
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f00f fa18 	bl	801111c <f_mount>
 8001cec:	e061      	b.n	8001db2 <process_file+0x192>
    }

    // Read the file line by line and store in the array
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
        // Remove trailing newline characters (both '\n' and '\r' if present)
        size_t len = strlen(lines[numLines]);
 8001cee:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001cf2:	019b      	lsls	r3, r3, #6
 8001cf4:	4a34      	ldr	r2, [pc, #208]	@ (8001dc8 <process_file+0x1a8>)
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fa89 	bl	8000210 <strlen>
 8001cfe:	f8c7 0478 	str.w	r0, [r7, #1144]	@ 0x478
        if (len > 0 && lines[numLines][len - 1] == '\n') {
 8001d02:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d01b      	beq.n	8001d42 <process_file+0x122>
 8001d0a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d0e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d12:	3b01      	subs	r3, #1
 8001d14:	492c      	ldr	r1, [pc, #176]	@ (8001dc8 <process_file+0x1a8>)
 8001d16:	0192      	lsls	r2, r2, #6
 8001d18:	440a      	add	r2, r1
 8001d1a:	4413      	add	r3, r2
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d10f      	bne.n	8001d42 <process_file+0x122>
            lines[numLines][len - 1] = '\0';
 8001d22:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d26:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	4926      	ldr	r1, [pc, #152]	@ (8001dc8 <process_file+0x1a8>)
 8001d2e:	0192      	lsls	r2, r2, #6
 8001d30:	440a      	add	r2, r1
 8001d32:	4413      	add	r3, r2
 8001d34:	2200      	movs	r2, #0
 8001d36:	701a      	strb	r2, [r3, #0]
            len--;
 8001d38:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
        }
        if (len > 0 && lines[numLines][len - 1] == '\r') {
 8001d42:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d016      	beq.n	8001d78 <process_file+0x158>
 8001d4a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d4e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d52:	3b01      	subs	r3, #1
 8001d54:	491c      	ldr	r1, [pc, #112]	@ (8001dc8 <process_file+0x1a8>)
 8001d56:	0192      	lsls	r2, r2, #6
 8001d58:	440a      	add	r2, r1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b0d      	cmp	r3, #13
 8001d60:	d10a      	bne.n	8001d78 <process_file+0x158>
            lines[numLines][len - 1]= '\0';
 8001d62:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d66:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	4916      	ldr	r1, [pc, #88]	@ (8001dc8 <process_file+0x1a8>)
 8001d6e:	0192      	lsls	r2, r2, #6
 8001d70:	440a      	add	r2, r1
 8001d72:	4413      	add	r3, r2
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
        }
        numLines++;
 8001d78:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
 8001d82:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d86:	019b      	lsls	r3, r3, #6
 8001d88:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc8 <process_file+0x1a8>)
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f107 020c 	add.w	r2, r7, #12
 8001d90:	2140      	movs	r1, #64	@ 0x40
 8001d92:	4618      	mov	r0, r3
 8001d94:	f010 fa16 	bl	80121c4 <f_gets>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1a7      	bne.n	8001cee <process_file+0xce>
    }
    f_close(&file);
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	4618      	mov	r0, r3
 8001da4:	f010 f874 	bl	8011e90 <f_close>
    f_mount(NULL, "", 1);
 8001da8:	2201      	movs	r2, #1
 8001daa:	4904      	ldr	r1, [pc, #16]	@ (8001dbc <process_file+0x19c>)
 8001dac:	2000      	movs	r0, #0
 8001dae:	f00f f9b5 	bl	801111c <f_mount>
    }
}
 8001db2:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	0801872c 	.word	0x0801872c
 8001dc0:	08018788 	.word	0x08018788
 8001dc4:	08018798 	.word	0x08018798
 8001dc8:	2000026c 	.word	0x2000026c

08001dcc <generate_report>:

void generate_report(LCD_I2C_HandleTypeDef* hlcd)
{
 8001dcc:	b590      	push	{r4, r7, lr}
 8001dce:	f2ad 4dcc 	subw	sp, sp, #1228	@ 0x4cc
 8001dd2:	af02      	add	r7, sp, #8
 8001dd4:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001dd8:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001ddc:	6018      	str	r0, [r3, #0]
    // Mount the SD card

	FATFS FatFs;
	FRESULT fres;
	DIR dir;
    fres = MountSDCard(&FatFs);
 8001dde:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fbf6 	bl	80015d4 <MountSDCard>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
    if (fres != FR_OK) {
 8001dee:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d01b      	beq.n	8001e2e <generate_report+0x62>
    	LCD_I2C_ClearAllLines(hlcd);
 8001df6:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001dfa:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f7ff fa30 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001e04:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e08:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2100      	movs	r1, #0
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	f7ff f9fb 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001e16:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e1a:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e1e:	496e      	ldr	r1, [pc, #440]	@ (8001fd8 <generate_report+0x20c>)
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f7ff f9b9 	bl	8001198 <LCD_I2C_printStr>
        currentState = MENU_STATE_MAIN;
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <generate_report+0x210>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
        return;
 8001e2c:	e0cf      	b.n	8001fce <generate_report+0x202>
    }
    else{
    const char *reportFilename = "test13.txt";
 8001e2e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fe0 <generate_report+0x214>)
 8001e30:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
	FIL file;

    // Open (or create) the report file for writing
    fres = f_open(&file, reportFilename, FA_WRITE | FA_CREATE_ALWAYS);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	220a      	movs	r2, #10
 8001e3a:	f8d7 14b4 	ldr.w	r1, [r7, #1204]	@ 0x4b4
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00f f9d0 	bl	80111e4 <f_open>
 8001e44:	4603      	mov	r3, r0
 8001e46:	f887 34bb 	strb.w	r3, [r7, #1211]	@ 0x4bb
    if (fres != FR_OK) {
 8001e4a:	f897 34bb 	ldrb.w	r3, [r7, #1211]	@ 0x4bb
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01d      	beq.n	8001e8e <generate_report+0xc2>
    	LCD_I2C_ClearAllLines(hlcd);
 8001e52:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e56:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e5a:	6818      	ldr	r0, [r3, #0]
 8001e5c:	f7ff fa02 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001e60:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e64:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	6818      	ldr	r0, [r3, #0]
 8001e6e:	f7ff f9cd 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Report file open failed");
 8001e72:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001e76:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001e7a:	495a      	ldr	r1, [pc, #360]	@ (8001fe4 <generate_report+0x218>)
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	f7ff f98b 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001e82:	2201      	movs	r2, #1
 8001e84:	4958      	ldr	r1, [pc, #352]	@ (8001fe8 <generate_report+0x21c>)
 8001e86:	2000      	movs	r0, #0
 8001e88:	f00f f948 	bl	801111c <f_mount>
 8001e8c:	e09f      	b.n	8001fce <generate_report+0x202>
        return;
    }
    UINT bw;
    // Write the header line
    const char *header = "  Net           Test Points           Test result\r\n";
 8001e8e:	4b57      	ldr	r3, [pc, #348]	@ (8001fec <generate_report+0x220>)
 8001e90:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
    f_write(&file, header, strlen(header), &bw);
 8001e94:	f8d7 04b0 	ldr.w	r0, [r7, #1200]	@ 0x4b0
 8001e98:	f7fe f9ba 	bl	8000210 <strlen>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001ea2:	f107 000c 	add.w	r0, r7, #12
 8001ea6:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8001eaa:	f00f fdc4 	bl	8011a36 <f_write>
            for(int i =0 ; i < commandsGcode;i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001eb4:	e07a      	b.n	8001fac <generate_report+0x1e0>
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001eb6:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff0 <generate_report+0x224>)
 8001ec4:	1898      	adds	r0, r3, r2
                         (int)coordinates[i].x, (int)coordinates[i].y);
 8001ec6:	4a4b      	ldr	r2, [pc, #300]	@ (8001ff4 <generate_report+0x228>)
 8001ec8:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4413      	add	r3, r2
 8001ed0:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001ed4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                         (int)coordinates[i].x, (int)coordinates[i].y);
 8001ed8:	4a46      	ldr	r2, [pc, #280]	@ (8001ff4 <generate_report+0x228>)
 8001eda:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3304      	adds	r3, #4
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d",
 8001ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eec:	ee17 3a90 	vmov	r3, s15
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	ee17 3a10 	vmov	r3, s14
 8001ef6:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <generate_report+0x22c>)
 8001ef8:	210a      	movs	r1, #10
 8001efa:	f014 f9eb 	bl	80162d4 <sniprintf>


            		const char *result = coordinates[i].testResult ? "PASS" : "FAIL";
 8001efe:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff4 <generate_report+0x228>)
 8001f00:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f04:	015b      	lsls	r3, r3, #5
 8001f06:	4413      	add	r3, r2
 8001f08:	3308      	adds	r3, #8
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <generate_report+0x148>
 8001f10:	4b3a      	ldr	r3, [pc, #232]	@ (8001ffc <generate_report+0x230>)
 8001f12:	e000      	b.n	8001f16 <generate_report+0x14a>
 8001f14:	4b3a      	ldr	r3, [pc, #232]	@ (8002000 <generate_report+0x234>)
 8001f16:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
            		        snprintf(resultStr[i], sizeof(resultStr[i]), "%-4s", result);
 8001f1a:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	4a37      	ldr	r2, [pc, #220]	@ (8002004 <generate_report+0x238>)
 8001f26:	1898      	adds	r0, r3, r2
 8001f28:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 8001f2c:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <generate_report+0x23c>)
 8001f2e:	2105      	movs	r1, #5
 8001f30:	f014 f9d0 	bl	80162d4 <sniprintf>



            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f34:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f38:	2236      	movs	r2, #54	@ 0x36
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	4a33      	ldr	r2, [pc, #204]	@ (800200c <generate_report+0x240>)
 8001f40:	1898      	adds	r0, r3, r2
            			 "%-15s %-30s %-5s\n",
            			 coordinates[i].netName, testPointsStr[i], resultStr);
 8001f42:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	3308      	adds	r3, #8
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff4 <generate_report+0x228>)
 8001f4c:	4413      	add	r3, r2
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4a24      	ldr	r2, [pc, #144]	@ (8001ff0 <generate_report+0x224>)
 8001f5e:	4413      	add	r3, r2
            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f60:	4a28      	ldr	r2, [pc, #160]	@ (8002004 <generate_report+0x238>)
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	460b      	mov	r3, r1
 8001f68:	4a29      	ldr	r2, [pc, #164]	@ (8002010 <generate_report+0x244>)
 8001f6a:	2136      	movs	r1, #54	@ 0x36
 8001f6c:	f014 f9b2 	bl	80162d4 <sniprintf>
                f_write(&file, reportLine[i], strlen(reportLine[i]), &bw);
 8001f70:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f74:	2236      	movs	r2, #54	@ 0x36
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	4a24      	ldr	r2, [pc, #144]	@ (800200c <generate_report+0x240>)
 8001f7c:	189c      	adds	r4, r3, r2
 8001f7e:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001f82:	2236      	movs	r2, #54	@ 0x36
 8001f84:	fb02 f303 	mul.w	r3, r2, r3
 8001f88:	4a20      	ldr	r2, [pc, #128]	@ (800200c <generate_report+0x240>)
 8001f8a:	4413      	add	r3, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f93f 	bl	8000210 <strlen>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001f98:	f107 000c 	add.w	r0, r7, #12
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f00f fd4a 	bl	8011a36 <f_write>
            for(int i =0 ; i < commandsGcode;i++){
 8001fa2:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8001fac:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	@ 0x4bc
 8001fb0:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <generate_report+0x248>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	f4ff af7e 	bcc.w	8001eb6 <generate_report+0xea>


            }
    //f_write(&file, reportLine, strlen(reportLine), &bw);
    f_close(&file);
 8001fba:	f107 030c 	add.w	r3, r7, #12
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00f ff66 	bl	8011e90 <f_close>
    f_mount(NULL, "", 1);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4908      	ldr	r1, [pc, #32]	@ (8001fe8 <generate_report+0x21c>)
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f00f f8a7 	bl	801111c <f_mount>
}
}
 8001fce:	f207 47c4 	addw	r7, r7, #1220	@ 0x4c4
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	08018788 	.word	0x08018788
 8001fdc:	20008a54 	.word	0x20008a54
 8001fe0:	080187ac 	.word	0x080187ac
 8001fe4:	080187b8 	.word	0x080187b8
 8001fe8:	0801872c 	.word	0x0801872c
 8001fec:	080187d0 	.word	0x080187d0
 8001ff0:	200087dc 	.word	0x200087dc
 8001ff4:	20008a74 	.word	0x20008a74
 8001ff8:	08018804 	.word	0x08018804
 8001ffc:	08018810 	.word	0x08018810
 8002000:	08018818 	.word	0x08018818
 8002004:	2000896c 	.word	0x2000896c
 8002008:	08018820 	.word	0x08018820
 800200c:	20007f6c 	.word	0x20007f6c
 8002010:	08018828 	.word	0x08018828
 8002014:	2000aff4 	.word	0x2000aff4

08002018 <HAL_TIM_PWM_PulseFinishedCallback>:

////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e089      	b.n	800213a <HAL_TIM_PWM_PulseFinishedCallback+0x122>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4949      	ldr	r1, [pc, #292]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	20b0      	movs	r0, #176	@ 0xb0
 8002030:	fb00 f303 	mul.w	r3, r0, r3
 8002034:	440b      	add	r3, r1
 8002036:	3310      	adds	r3, #16
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d179      	bne.n	8002134 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
		  motors[i].stepsTaken++;
 8002040:	4a43      	ldr	r2, [pc, #268]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	21b0      	movs	r1, #176	@ 0xb0
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3370      	adds	r3, #112	@ 0x70
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	493f      	ldr	r1, [pc, #252]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	20b0      	movs	r0, #176	@ 0xb0
 8002058:	fb00 f303 	mul.w	r3, r0, r3
 800205c:	440b      	add	r3, r1
 800205e:	3370      	adds	r3, #112	@ 0x70
 8002060:	601a      	str	r2, [r3, #0]
		  //TMC2209_CountDistance(&motors[i]);
		  if(motors[i].direction == GPIO_PIN_SET){
 8002062:	4a3b      	ldr	r2, [pc, #236]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	21b0      	movs	r1, #176	@ 0xb0
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	337c      	adds	r3, #124	@ 0x7c
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d111      	bne.n	800209a <HAL_TIM_PWM_PulseFinishedCallback+0x82>
		  		  motors[i].StepsFront++;
 8002076:	4a36      	ldr	r2, [pc, #216]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	21b0      	movs	r1, #176	@ 0xb0
 800207c:	fb01 f303 	mul.w	r3, r1, r3
 8002080:	4413      	add	r3, r2
 8002082:	339c      	adds	r3, #156	@ 0x9c
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	4931      	ldr	r1, [pc, #196]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	20b0      	movs	r0, #176	@ 0xb0
 800208e:	fb00 f303 	mul.w	r3, r0, r3
 8002092:	440b      	add	r3, r1
 8002094:	339c      	adds	r3, #156	@ 0x9c
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e01a      	b.n	80020d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>

		  }

		  else if(motors[i].direction == GPIO_PIN_RESET){
 800209a:	4a2d      	ldr	r2, [pc, #180]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	21b0      	movs	r1, #176	@ 0xb0
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	4413      	add	r3, r2
 80020a6:	337c      	adds	r3, #124	@ 0x7c
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d110      	bne.n	80020d0 <HAL_TIM_PWM_PulseFinishedCallback+0xb8>
			  	  motors[i].StepsBack++;
 80020ae:	4a28      	ldr	r2, [pc, #160]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	21b0      	movs	r1, #176	@ 0xb0
 80020b4:	fb01 f303 	mul.w	r3, r1, r3
 80020b8:	4413      	add	r3, r2
 80020ba:	33a0      	adds	r3, #160	@ 0xa0
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4923      	ldr	r1, [pc, #140]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	20b0      	movs	r0, #176	@ 0xb0
 80020c6:	fb00 f303 	mul.w	r3, r0, r3
 80020ca:	440b      	add	r3, r1
 80020cc:	33a0      	adds	r3, #160	@ 0xa0
 80020ce:	601a      	str	r2, [r3, #0]

		  }
          if (motors[i].stepsTaken % motors[i].stepsPerRevolution == 0){ // Count Full steps
 80020d0:	4a1f      	ldr	r2, [pc, #124]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	21b0      	movs	r1, #176	@ 0xb0
 80020d6:	fb01 f303 	mul.w	r3, r1, r3
 80020da:	4413      	add	r3, r2
 80020dc:	3370      	adds	r3, #112	@ 0x70
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	491b      	ldr	r1, [pc, #108]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	20b0      	movs	r0, #176	@ 0xb0
 80020e8:	fb00 f303 	mul.w	r3, r0, r3
 80020ec:	440b      	add	r3, r1
 80020ee:	3364      	adds	r3, #100	@ 0x64
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80020f6:	fb01 f303 	mul.w	r3, r1, r3
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d119      	bne.n	8002134 <HAL_TIM_PWM_PulseFinishedCallback+0x11c>
              motors[i].driver.checkSG_RESULT = 1;
 8002100:	4a13      	ldr	r2, [pc, #76]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	21b0      	movs	r1, #176	@ 0xb0
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	4413      	add	r3, r2
 800210c:	3330      	adds	r3, #48	@ 0x30
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
              motors[i].fullSteps++;
 8002112:	4a0f      	ldr	r2, [pc, #60]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	21b0      	movs	r1, #176	@ 0xb0
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	4413      	add	r3, r2
 800211e:	3374      	adds	r3, #116	@ 0x74
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	490a      	ldr	r1, [pc, #40]	@ (8002150 <HAL_TIM_PWM_PulseFinishedCallback+0x138>)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	20b0      	movs	r0, #176	@ 0xb0
 800212a:	fb00 f303 	mul.w	r3, r0, r3
 800212e:	440b      	add	r3, r1
 8002130:	3374      	adds	r3, #116	@ 0x74
 8002132:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3301      	adds	r3, #1
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2b03      	cmp	r3, #3
 800213e:	f77f af72 	ble.w	8002026 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
          }
      }

    }
  }
 8002142:	bf00      	nop
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	2000bf48 	.word	0x2000bf48

08002154 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	4619      	mov	r1, r3
 800216e:	f005 fe51 	bl	8007e14 <HAL_GPIO_WritePin>
    motor->direction = state;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	4619      	mov	r1, r3
 800219a:	f005 fe3b 	bl	8007e14 <HAL_GPIO_WritePin>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b086      	sub	sp, #24
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	617b      	str	r3, [r7, #20]
//		StepFrequency = StepFrequency / 3;
//		motor->driver.htim->Init.Prescaler = prescaler / 3; // Update prescaler
//		HAL_TIM_Base_Init(motor->driver.htim);
//		HAL_TIM_PWM_Init(motor->driver.htim);
//	};
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 80021b8:	f007 f8e4 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <TMC2209_SetSpeed+0x54>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	0852      	lsrs	r2, r2, #1
 80021f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80021f8:	e031      	b.n	800225e <TMC2209_SetSpeed+0xb8>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d106      	bne.n	8002210 <TMC2209_SetSpeed+0x6a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	085b      	lsrs	r3, r3, #1
 800220c:	6393      	str	r3, [r2, #56]	@ 0x38
 800220e:	e026      	b.n	800225e <TMC2209_SetSpeed+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d106      	bne.n	8002226 <TMC2209_SetSpeed+0x80>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002224:	e01b      	b.n	800225e <TMC2209_SetSpeed+0xb8>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	2b0c      	cmp	r3, #12
 800222c:	d106      	bne.n	800223c <TMC2209_SetSpeed+0x96>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	085b      	lsrs	r3, r3, #1
 8002238:	6413      	str	r3, [r2, #64]	@ 0x40
 800223a:	e010      	b.n	800225e <TMC2209_SetSpeed+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	2b10      	cmp	r3, #16
 8002242:	d106      	bne.n	8002252 <TMC2209_SetSpeed+0xac>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002250:	e005      	b.n	800225e <TMC2209_SetSpeed+0xb8>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    motor->driver.stepFrequency = StepFrequency;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	619a      	str	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8002280:	2101      	movs	r1, #1
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff7c 	bl	8002180 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f008 fe9c 	bl	800afc8 <HAL_TIM_PWM_Stop_IT>
}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 80022ac:	2100      	movs	r1, #0
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff66 	bl	8002180 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f008 fd3e 	bl	800ad38 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <TMC2209_CountSteps>:


static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	if(totalSteps == 0){
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d011      	beq.n	8002300 <TMC2209_CountSteps+0x34>
		return;
	}
	motor->nextTotalSteps = totalSteps;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	679a      	str	r2, [r3, #120]	@ 0x78
	motor->stepsTaken = 0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	671a      	str	r2, [r3, #112]	@ 0x70

	while (motor->stepsTaken <= motor->nextTotalSteps) {// Wait until we reach required steps and increment position on every step
 80022e8:	bf00      	nop
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d9f8      	bls.n	80022ea <TMC2209_CountSteps+0x1e>
    // vTaskDelay(10);
	}
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY

	motor->nextTotalSteps = 0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	679a      	str	r2, [r3, #120]	@ 0x78
 80022fe:	e000      	b.n	8002302 <TMC2209_CountSteps+0x36>
		return;
 8002300:	bf00      	nop
}
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	460b      	mov	r3, r1
 8002316:	ed87 0a01 	vstr	s0, [r7, #4]
 800231a:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index

    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 800231c:	7afb      	ldrb	r3, [r7, #11]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d903      	bls.n	800232a <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 8002322:	4830      	ldr	r0, [pc, #192]	@ (80023e4 <TMC2209_MoveTo+0xd8>)
 8002324:	f000 f96c 	bl	8002600 <debug_print>
        return;
 8002328:	e059      	b.n	80023de <TMC2209_MoveTo+0xd2>
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 800232a:	7afa      	ldrb	r2, [r7, #11]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002332:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002336:	ed97 7a01 	vldr	s14, [r7, #4]
 800233a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800233e:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	ed93 7a04 	vldr	s14, [r3, #16]
 8002348:	edd7 7a04 	vldr	s15, [r7, #16]
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002354:	ee17 3a90 	vmov	r3, s15
 8002358:	617b      	str	r3, [r7, #20]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 800235a:	7afa      	ldrb	r2, [r7, #11]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	dd08      	ble.n	8002380 <TMC2209_MoveTo+0x74>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 800236e:	7afa      	ldrb	r2, [r7, #11]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff feeb 	bl	8002154 <TMC2209_SetDirection>
 800237e:	e00a      	b.n	8002396 <TMC2209_MoveTo+0x8a>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 8002380:	7afa      	ldrb	r2, [r7, #11]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	2101      	movs	r1, #1
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fee2 	bl	8002154 <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	425b      	negs	r3, r3
 8002394:	617b      	str	r3, [r7, #20]
    }

    // Start the motor

    TMC2209_Start(axis->motors[motorIndex]);
 8002396:	7afa      	ldrb	r2, [r7, #11]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff7a 	bl	8002298 <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 80023a4:	7afa      	ldrb	r2, [r7, #11]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	679a      	str	r2, [r3, #120]	@ 0x78
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 80023b0:	7afa      	ldrb	r2, [r7, #11]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff85 	bl	80022cc <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 80023c2:	7afa      	ldrb	r2, [r7, #11]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff ff4e 	bl	800226c <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 80023d0:	7afa      	ldrb	r2, [r7, #11]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

}
 80023de:	3718      	adds	r7, #24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	08018840 	.word	0x08018840

080023e8 <TMC2209_MoveAllMotorsTo>:
// Function to move all motors concurrently to their target positions.
// The targetPositionsMM array should have one target position (in millimeters)
// for each motor in the axis. We assume that MAX_MOTORS_PER_AXIS is defined.
void TMC2209_MoveAllMotorsTo(Axis axes[2], float targetPositions[4]) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	@ 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    uint8_t axisIndex, motorIndex;

    // Initialize each motor on both axes.
    // The mapping is:
    //   targetPositions[ axisIndex * MAX_MOTORS_PER_AXIS + motorIndex ]
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80023f2:	2300      	movs	r3, #0
 80023f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80023f8:	e09f      	b.n	800253a <TMC2209_MoveAllMotorsTo+0x152>
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002400:	e091      	b.n	8002526 <TMC2209_MoveAllMotorsTo+0x13e>
            int targetIndex = axisIndex * MAX_MOTORS_PER_AXIS + motorIndex;
 8002402:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002406:	005a      	lsls	r2, r3, #1
 8002408:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800240c:	4413      	add	r3, r2
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24
            Motor *motor = axes[axisIndex].motors[motorIndex];
 8002410:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002414:	4613      	mov	r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	461a      	mov	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242a:	623b      	str	r3, [r7, #32]
            if (motor == NULL) {
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d073      	beq.n	800251a <TMC2209_MoveAllMotorsTo+0x132>
                continue;
            }

            // Calculate the distance (in mm) and convert to steps.
            float distanceToMoveMM = targetPositions[targetIndex] - motor->currentPositionMM;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	ed93 7a00 	vldr	s14, [r3]
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002448:	edc7 7a07 	vstr	s15, [r7, #28]
            double stepsError = (distanceToMoveMM * axes[axisIndex].stepPerUnit) + motor->stepError;
 800244c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002450:	4613      	mov	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002462:	edd7 7a07 	vldr	s15, [r7, #28]
 8002466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246a:	ee17 0a90 	vmov	r0, s15
 800246e:	f7fe f88b 	bl	8000588 <__aeabi_f2d>
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8002478:	f7fd ff28 	bl	80002cc <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	e9c7 2304 	strd	r2, r3, [r7, #16]
            int32_t stepsToMove = (int32_t)(roundf(stepsError));
 8002484:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002488:	f7fe fb90 	bl	8000bac <__aeabi_d2f>
 800248c:	4603      	mov	r3, r0
 800248e:	ee00 3a10 	vmov	s0, r3
 8002492:	f016 f8bd 	bl	8018610 <roundf>
 8002496:	eef0 7a40 	vmov.f32	s15, s0
 800249a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800249e:	ee17 3a90 	vmov	r3, s15
 80024a2:	60fb      	str	r3, [r7, #12]
            motor->stepError = stepsError - stepsToMove;
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f7fe f85d 	bl	8000564 <__aeabi_i2d>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b2:	f7fd ff09 	bl	80002c8 <__aeabi_dsub>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	6a39      	ldr	r1, [r7, #32]
 80024bc:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

            // Save the absolute number of steps required.
            motor->nextTotalSteps = (stepsToMove >= 0) ? stepsToMove : -stepsToMove;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	bfb8      	it	lt
 80024c6:	425b      	neglt	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	679a      	str	r2, [r3, #120]	@ 0x78
            // Reset the steps counter.
            motor->stepsTaken = 0;
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	2200      	movs	r2, #0
 80024d2:	671a      	str	r2, [r3, #112]	@ 0x70
            // Store the target position.
            motor->nextPositionMM = targetPositions[targetIndex];
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            // Set the motor direction.
            if (stepsToMove >= 0) {
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db04      	blt.n	80024f4 <TMC2209_MoveAllMotorsTo+0x10c>
                TMC2209_SetDirection(motor, GPIO_PIN_RESET);  // Forward
 80024ea:	2100      	movs	r1, #0
 80024ec:	6a38      	ldr	r0, [r7, #32]
 80024ee:	f7ff fe31 	bl	8002154 <TMC2209_SetDirection>
 80024f2:	e003      	b.n	80024fc <TMC2209_MoveAllMotorsTo+0x114>
            } else {
                TMC2209_SetDirection(motor, GPIO_PIN_SET);      // Reverse
 80024f4:	2101      	movs	r1, #1
 80024f6:	6a38      	ldr	r0, [r7, #32]
 80024f8:	f7ff fe2c 	bl	8002154 <TMC2209_SetDirection>
            }

            // Start the motor.
            if(motor->currentPositionMM != motor->nextPositionMM)	TMC2209_Start(motor);
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 8002508:	eeb4 7a67 	vcmp.f32	s14, s15
 800250c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002510:	d004      	beq.n	800251c <TMC2209_MoveAllMotorsTo+0x134>
 8002512:	6a38      	ldr	r0, [r7, #32]
 8002514:	f7ff fec0 	bl	8002298 <TMC2209_Start>
 8002518:	e000      	b.n	800251c <TMC2209_MoveAllMotorsTo+0x134>
                continue;
 800251a:	bf00      	nop
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800251c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002520:	3301      	adds	r3, #1
 8002522:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002526:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800252a:	2b01      	cmp	r3, #1
 800252c:	f67f af69 	bls.w	8002402 <TMC2209_MoveAllMotorsTo+0x1a>
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 8002530:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002534:	3301      	adds	r3, #1
 8002536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800253a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800253e:	2b01      	cmp	r3, #1
 8002540:	f67f af5b 	bls.w	80023fa <TMC2209_MoveAllMotorsTo+0x12>

        }
    }

    // Poll all motors concurrently. Each motor will be stopped as soon as it finishes.
    bool motorsStillRunning = true;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    while (motorsStillRunning) {
 800254a:	e050      	b.n	80025ee <TMC2209_MoveAllMotorsTo+0x206>
        motorsStillRunning = false;  // Assume all motors are finished unless one is still moving.
 800254c:	2300      	movs	r3, #0
 800254e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 8002552:	2300      	movs	r3, #0
 8002554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002558:	e045      	b.n	80025e6 <TMC2209_MoveAllMotorsTo+0x1fe>
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800255a:	2300      	movs	r3, #0
 800255c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002560:	e038      	b.n	80025d4 <TMC2209_MoveAllMotorsTo+0x1ec>
                Motor *motor = axes[axisIndex].motors[motorIndex];
 8002562:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	461a      	mov	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4413      	add	r3, r2
 8002574:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (motor == NULL) {
 800257e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002580:	2b00      	cmp	r3, #0
 8002582:	d021      	beq.n	80025c8 <TMC2209_MoveAllMotorsTo+0x1e0>
                    continue;
                }
                // If this motor still has steps to take...
                if (motor->nextTotalSteps > 0) {
 8002584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002586:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002588:	2b00      	cmp	r3, #0
 800258a:	d01e      	beq.n	80025ca <TMC2209_MoveAllMotorsTo+0x1e2>
                    if (motor->stepsTaken >= motor->nextTotalSteps) {
 800258c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800258e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002590:	461a      	mov	r2, r3
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002596:	429a      	cmp	r2, r3
 8002598:	d312      	bcc.n	80025c0 <TMC2209_MoveAllMotorsTo+0x1d8>
                        // This motor has reached its target: stop it and update its current position.
                        TMC2209_Stop(motor);
 800259a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800259c:	f7ff fe66 	bl	800226c <TMC2209_Stop>
                        motor->prevPositionMM = motor->currentPositionMM;
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        motor->currentPositionMM = motor->nextPositionMM;
 80025ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80025b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        // Mark this motor as finished.
                        motor->nextTotalSteps = 0;
 80025b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ba:	2200      	movs	r2, #0
 80025bc:	679a      	str	r2, [r3, #120]	@ 0x78
 80025be:	e004      	b.n	80025ca <TMC2209_MoveAllMotorsTo+0x1e2>
                    } else {
                        // At least one motor is still moving.
                        motorsStillRunning = true;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80025c6:	e000      	b.n	80025ca <TMC2209_MoveAllMotorsTo+0x1e2>
                    continue;
 80025c8:	bf00      	nop
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 80025ca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025ce:	3301      	adds	r3, #1
 80025d0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80025d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d9c2      	bls.n	8002562 <TMC2209_MoveAllMotorsTo+0x17a>
        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80025dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025e0:	3301      	adds	r3, #1
 80025e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d9b5      	bls.n	800255a <TMC2209_MoveAllMotorsTo+0x172>
    while (motorsStillRunning) {
 80025ee:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1aa      	bne.n	800254c <TMC2209_MoveAllMotorsTo+0x164>
        }
        // Delay briefly to avoid hogging the CPU.
        // If you're not using an RTOS, replace vTaskDelay(1) with a suitable delay function (e.g., HAL_Delay(1)).
        //vTaskDelay(1);
    }
}
 80025f6:	bf00      	nop
 80025f8:	bf00      	nop
 80025fa:	3730      	adds	r7, #48	@ 0x30
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fd fe01 	bl	8000210 <strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	b29b      	uxth	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4803      	ldr	r0, [pc, #12]	@ (8002624 <debug_print+0x24>)
 8002618:	f009 ffa8 	bl	800c56c <HAL_UART_Transmit_DMA>
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000b714 	.word	0x2000b714

08002628 <calculate_CRC>:
    ptr += sprintf(ptr, "]\r\n");

    debug_print(buffer);
}

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8002638:	2300      	movs	r3, #0
 800263a:	73bb      	strb	r3, [r7, #14]
 800263c:	e027      	b.n	800268e <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 800263e:	7bbb      	ldrb	r3, [r7, #14]
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8002648:	2300      	movs	r3, #0
 800264a:	733b      	strb	r3, [r7, #12]
 800264c:	e019      	b.n	8002682 <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	09db      	lsrs	r3, r3, #7
 8002652:	b2db      	uxtb	r3, r3
 8002654:	461a      	mov	r2, r3
 8002656:	7b7b      	ldrb	r3, [r7, #13]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	429a      	cmp	r2, r3
 800265e:	d007      	beq.n	8002670 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8002660:	7bfb      	ldrb	r3, [r7, #15]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	b25b      	sxtb	r3, r3
 8002666:	f083 0307 	eor.w	r3, r3, #7
 800266a:	b25b      	sxtb	r3, r3
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e002      	b.n	8002676 <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8002676:	7b7b      	ldrb	r3, [r7, #13]
 8002678:	085b      	lsrs	r3, r3, #1
 800267a:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	3301      	adds	r3, #1
 8002680:	733b      	strb	r3, [r7, #12]
 8002682:	7b3b      	ldrb	r3, [r7, #12]
 8002684:	2b07      	cmp	r3, #7
 8002686:	d9e2      	bls.n	800264e <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	3301      	adds	r3, #1
 800268c:	73bb      	strb	r3, [r7, #14]
 800268e:	7bba      	ldrb	r2, [r7, #14]
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	429a      	cmp	r2, r3
 8002694:	d3d3      	bcc.n	800263e <calculate_CRC+0x16>
        }
    }
    return crc;
 8002696:	7bfb      	ldrb	r3, [r7, #15]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 80026ac:	f004 fcd2 	bl	8007054 <HAL_GetTick>
 80026b0:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 80026b2:	e00c      	b.n	80026ce <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 80026b4:	f004 fcce 	bl	8007054 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d204      	bcs.n	80026ce <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 80026c4:	4808      	ldr	r0, [pc, #32]	@ (80026e8 <TMC2209_WaitForReply+0x44>)
 80026c6:	f7ff ff9b 	bl	8002600 <debug_print>
             return 0; // Timeout
 80026ca:	2300      	movs	r3, #0
 80026cc:	e008      	b.n	80026e0 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 80026ce:	4b07      	ldr	r3, [pc, #28]	@ (80026ec <TMC2209_WaitForReply+0x48>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ed      	beq.n	80026b4 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 80026d8:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <TMC2209_WaitForReply+0x48>)
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 80026de:	2301      	movs	r3, #1
 }
 80026e0:	4618      	mov	r0, r3
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	08018884 	.word	0x08018884
 80026ec:	20008a4c 	.word	0x20008a4c

080026f0 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	6858      	ldr	r0, [r3, #4]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	b29a      	uxth	r2, r3
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	68f9      	ldr	r1, [r7, #12]
 800270c:	f009 fea4 	bl	800c458 <HAL_UART_Transmit>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <TMC2209_sendCommand+0x30>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2214      	movs	r2, #20
 800271a:	60da      	str	r2, [r3, #12]
         return	NULL;
 800271c:	2300      	movs	r3, #0
 800271e:	e01e      	b.n	800275e <TMC2209_sendCommand+0x6e>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01a      	beq.n	800275c <TMC2209_sendCommand+0x6c>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <TMC2209_sendCommand+0x6c>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6858      	ldr	r0, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	b29b      	uxth	r3, r3
 8002736:	3301      	adds	r3, #1
 8002738:	b29b      	uxth	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	490a      	ldr	r1, [pc, #40]	@ (8002768 <TMC2209_sendCommand+0x78>)
 800273e:	f009 ff91 	bl	800c664 <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	f7ff ffae 	bl	80026a4 <TMC2209_WaitForReply>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <TMC2209_sendCommand+0x68>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	221e      	movs	r2, #30
 8002752:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 8002754:	2300      	movs	r3, #0
 8002756:	e002      	b.n	800275e <TMC2209_sendCommand+0x6e>
     debug_print_hex(command, writeLength);
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
     }
     return rxBuffer; // Success
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <TMC2209_sendCommand+0x7c>)
 800275a:	e000      	b.n	800275e <TMC2209_sendCommand+0x6e>
     }
     return NULL;
 800275c:	2300      	movs	r3, #0
 }
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20008a38 	.word	0x20008a38
 800276c:	20008a44 	.word	0x20008a44

08002770 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	460b      	mov	r3, r1
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 800277e:	2305      	movs	r3, #5
 8002780:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	7a1b      	ldrb	r3, [r3, #8]
 8002786:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8002788:	7afb      	ldrb	r3, [r7, #11]
 800278a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800278e:	b2db      	uxtb	r3, r3
 8002790:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	b2db      	uxtb	r3, r3
 8002798:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	141b      	asrs	r3, r3, #16
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	121b      	asrs	r3, r3, #8
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	2107      	movs	r1, #7
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff36 	bl	8002628 <calculate_CRC>
 80027bc:	4603      	mov	r3, r0
 80027be:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 80027c0:	f107 0010 	add.w	r0, r7, #16
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	2108      	movs	r1, #8
 80027ca:	f7ff ff91 	bl	80026f0 <TMC2209_sendCommand>

 }
 80027ce:	bf00      	nop
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 80027d6:	b590      	push	{r4, r7, lr}
 80027d8:	b087      	sub	sp, #28
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <TMC2209_readInit+0x1a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	e059      	b.n	80028a4 <TMC2209_readInit+0xce>
 	uint8_t read_request_command[8] = { 0 };
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	2300      	movs	r3, #0
 80027f6:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 80027f8:	2305      	movs	r3, #5
 80027fa:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7a1b      	ldrb	r3, [r3, #8]
 8002800:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8002802:	78fb      	ldrb	r3, [r7, #3]
 8002804:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff0b 	bl	8002628 <calculate_CRC>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 8002816:	f107 000c 	add.w	r0, r7, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2208      	movs	r2, #8
 800281e:	2104      	movs	r1, #4
 8002820:	f7ff ff66 	bl	80026f0 <TMC2209_sendCommand>
 8002824:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b05      	cmp	r3, #5
 800282c:	d004      	beq.n	8002838 <TMC2209_readInit+0x62>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2228      	movs	r2, #40	@ 0x28
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	2328      	movs	r3, #40	@ 0x28
 8002836:	e035      	b.n	80028a4 <TMC2209_readInit+0xce>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3301      	adds	r3, #1
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2bff      	cmp	r3, #255	@ 0xff
 8002840:	d004      	beq.n	800284c <TMC2209_readInit+0x76>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2232      	movs	r2, #50	@ 0x32
 8002846:	60da      	str	r2, [r3, #12]
 8002848:	2332      	movs	r3, #50	@ 0x32
 800284a:	e02b      	b.n	80028a4 <TMC2209_readInit+0xce>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3302      	adds	r3, #2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	429a      	cmp	r2, r3
 8002856:	d004      	beq.n	8002862 <TMC2209_readInit+0x8c>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	223c      	movs	r2, #60	@ 0x3c
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	233c      	movs	r3, #60	@ 0x3c
 8002860:	e020      	b.n	80028a4 <TMC2209_readInit+0xce>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	3307      	adds	r3, #7
 8002866:	781c      	ldrb	r4, [r3, #0]
 8002868:	2107      	movs	r1, #7
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7ff fedc 	bl	8002628 <calculate_CRC>
 8002870:	4603      	mov	r3, r0
 8002872:	429c      	cmp	r4, r3
 8002874:	d004      	beq.n	8002880 <TMC2209_readInit+0xaa>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2246      	movs	r2, #70	@ 0x46
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	2346      	movs	r3, #70	@ 0x46
 800287e:	e011      	b.n	80028a4 <TMC2209_readInit+0xce>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	3303      	adds	r3, #3
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	061a      	lsls	r2, r3, #24
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3304      	adds	r3, #4
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3305      	adds	r3, #5
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	4313      	orrs	r3, r2
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	3206      	adds	r2, #6
 80028a0:	7812      	ldrb	r2, [r2, #0]
 80028a2:	4313      	orrs	r3, r2
 }
 80028a4:	4618      	mov	r0, r3
 80028a6:	371c      	adds	r7, #28
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd90      	pop	{r4, r7, pc}

080028ac <TMC2209_setPDNuart>:

bool TMC2209_setPDNuart(Motor *tmc2209, bool enable) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b0aa      	sub	sp, #168	@ 0xa8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
    // Read current GCONF register value from TMC2209_REG_GCONF
    uint32_t currentGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80028b8:	2100      	movs	r1, #0
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ff8b 	bl	80027d6 <TMC2209_readInit>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        debug_print(debug_msg);
    }

    // Modify the pdn_disable bit (bit 6). When set to 1, pdn_disable is enabled (UART controls the driver).
    // When cleared (0), PDN function is active.
    if (enable) {
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <TMC2209_setPDNuart+0x2e>
        currentGCONF |= 0x00000040; // Set bit 6 to enable PDN_UART
 80028cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80028d8:	e005      	b.n	80028e6 <TMC2209_setPDNuart+0x3a>
        if (ENABLE_DEBUG) {
            debug_print("Enabling PDN_UART (pdn_disable=1).\r\n");
        }
    } else {
        currentGCONF &= ~(0x00000040); // Clear bit 6 to disable PDN_UART
 80028da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            debug_print("Disabling PDN_UART (pdn_disable=0).\r\n");
        }
    }

    // Write back the updated GCONF register value
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, currentGCONF);
 80028e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028ea:	461a      	mov	r2, r3
 80028ec:	2100      	movs	r1, #0
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff3e 	bl	8002770 <TMC2209_writeInit>
    HAL_Delay(3); // Allow time for the write to complete
 80028f4:	2003      	movs	r0, #3
 80028f6:	f004 fbb9 	bl	800706c <HAL_Delay>

    // Optionally, check if the write was successful by re-reading the register
    uint32_t updatedGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80028fa:	2100      	movs	r1, #0
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff ff6a 	bl	80027d6 <TMC2209_readInit>
 8002902:	4603      	mov	r3, r0
 8002904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    HAL_Delay(3);
 8002908:	2003      	movs	r0, #3
 800290a:	f004 fbaf 	bl	800706c <HAL_Delay>
        sprintf(verify_msg, sizeof(verify_msg), "Updated GCONF = 0x%08lX\r\n", updatedGCONF);
        debug_print(verify_msg);
    }

    // Verify that the pdn_disable bit matches the intended configuration
    bool bitSet = (updatedGCONF & 0x00000040) ? true : false;
 800290e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bitSet == enable) {
 8002924:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	429a      	cmp	r2, r3
 800292c:	d105      	bne.n	800293a <TMC2209_setPDNuart+0x8e>
        return tmc2209->driver.pdn_disable = 1;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002936:	2301      	movs	r3, #1
 8002938:	e004      	b.n	8002944 <TMC2209_setPDNuart+0x98>
    } else {
        if (ENABLE_DEBUG) {
            debug_print("PDN_UART configuration failed to update correctly!\r\n");
        }
        return tmc2209->driver.pdn_disable = 0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8002942:	2300      	movs	r3, #0
    }
}
 8002944:	4618      	mov	r0, r3
 8002946:	37a8      	adds	r7, #168	@ 0xa8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <TMC2209_read_ifcnt>:



void TMC2209_read_ifcnt(Motor *tmc2209) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b09c      	sub	sp, #112	@ 0x70
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 8002954:	2102      	movs	r1, #2
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff3d 	bl	80027d6 <TMC2209_readInit>
 800295c:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 800295e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002960:	2b00      	cmp	r3, #0
 8002962:	db03      	blt.n	800296c <TMC2209_read_ifcnt+0x20>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
         debug_print(debug_msg);
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 8002964:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	621a      	str	r2, [r3, #32]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 800296a:	e003      	b.n	8002974 <TMC2209_read_ifcnt+0x28>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 8002972:	621a      	str	r2, [r3, #32]
 }
 8002974:	bf00      	nop
 8002976:	3770      	adds	r7, #112	@ 0x70
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <TMC2209_setSpreadCycle>:
    }
    return (tmc2209->driver.GCONF = true);
}


uint16_t TMC2209_setSpreadCycle(Motor *tmc2209, uint8_t enable) {
 800297c:	b580      	push	{r7, lr}
 800297e:	b0ac      	sub	sp, #176	@ 0xb0
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;
	uint8_t driverID = tmc2209->driver.id;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	char debug_msg[150];
	snprintf(debug_msg, sizeof(debug_msg), "Setting SpreadCycle Mode for Driver: %u\r\n", driverID);
	debug_print(debug_msg);
	}

	gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002998:	2100      	movs	r1, #0
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff1b 	bl	80027d6 <TMC2209_readInit>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if(tmc2209->driver.STATUS != TMC_OK){
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <TMC2209_setSpreadCycle+0x3a>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
    	return gconf;
 80029ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	e03c      	b.n	8002a30 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = gconf;
 80029b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(enable) {
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <TMC2209_setSpreadCycle+0x56>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 80029c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029c8:	f043 0304 	orr.w	r3, r3, #4
 80029cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029d0:	e005      	b.n	80029de <TMC2209_setSpreadCycle+0x62>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 80029d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 80029de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d102      	bne.n	80029f0 <TMC2209_setSpreadCycle+0x74>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
    	return enable;
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	e01f      	b.n	8002a30 <TMC2209_setSpreadCycle+0xb4>
    }

    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80029f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7ff feb9 	bl	8002770 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ffa4 	bl	800294c <TMC2209_read_ifcnt>
    if(tmc2209->driver.IFCNT <= IFCNT){
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a1a      	ldr	r2, [r3, #32]
 8002a08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d804      	bhi.n	8002a1a <TMC2209_setSpreadCycle+0x9e>
    	tmc2209->driver.chopperMode = 0;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	779a      	strb	r2, [r3, #30]
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!\r\n");
    	return TMC_SET_SPREADCYCLE_ERROR;
 8002a16:	2369      	movs	r3, #105	@ 0x69
 8002a18:	e00a      	b.n	8002a30 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff feda 	bl	80027d6 <TMC2209_readInit>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(check_gconf != gconf){
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
    }

    tmc2209->driver.chopperMode = 1;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	779a      	strb	r2, [r3, #30]
    return TMC_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	37b0      	adds	r7, #176	@ 0xb0
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <TMC2209_setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t TMC2209_setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0ae      	sub	sp, #184	@ 0xb8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    snprintf(debug_msg, sizeof(debug_msg), "Setting Microstepping For Driver ID: %u \r\n", driverID);
    debug_print(debug_msg);
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint32_t gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002a54:	2100      	movs	r1, #0
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7ff febd 	bl	80027d6 <TMC2209_readInit>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    gconf |= 0x80;  // / Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8002a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_Delay(3);
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f004 fafc 	bl	800706c <HAL_Delay>
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8002a74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a78:	461a      	mov	r2, r3
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fe77 	bl	8002770 <TMC2209_writeInit>

    HAL_Delay(3);
 8002a82:	2003      	movs	r0, #3
 8002a84:	f004 faf2 	bl	800706c <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8002a88:	216c      	movs	r1, #108	@ 0x6c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f7ff fea3 	bl	80027d6 <TMC2209_readInit>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    HAL_Delay(3);
 8002a96:	2003      	movs	r0, #3
 8002a98:	f004 fae8 	bl	800706c <HAL_Delay>

    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8002a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002aa0:	0e1b      	lsrs	r3, r3, #24
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab2:	d054      	beq.n	8002b5e <TMC2209_setMicrosteppingResolution+0x126>
 8002ab4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ab8:	dc75      	bgt.n	8002ba6 <TMC2209_setMicrosteppingResolution+0x16e>
 8002aba:	2b80      	cmp	r3, #128	@ 0x80
 8002abc:	d053      	beq.n	8002b66 <TMC2209_setMicrosteppingResolution+0x12e>
 8002abe:	2b80      	cmp	r3, #128	@ 0x80
 8002ac0:	dc71      	bgt.n	8002ba6 <TMC2209_setMicrosteppingResolution+0x16e>
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	dc48      	bgt.n	8002b58 <TMC2209_setMicrosteppingResolution+0x120>
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	dd6d      	ble.n	8002ba6 <TMC2209_setMicrosteppingResolution+0x16e>
 8002aca:	3b01      	subs	r3, #1
 8002acc:	2b1f      	cmp	r3, #31
 8002ace:	d86a      	bhi.n	8002ba6 <TMC2209_setMicrosteppingResolution+0x16e>
 8002ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad8 <TMC2209_setMicrosteppingResolution+0xa0>)
 8002ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad6:	bf00      	nop
 8002ad8:	08002b9f 	.word	0x08002b9f
 8002adc:	08002b97 	.word	0x08002b97
 8002ae0:	08002ba7 	.word	0x08002ba7
 8002ae4:	08002b8f 	.word	0x08002b8f
 8002ae8:	08002ba7 	.word	0x08002ba7
 8002aec:	08002ba7 	.word	0x08002ba7
 8002af0:	08002ba7 	.word	0x08002ba7
 8002af4:	08002b87 	.word	0x08002b87
 8002af8:	08002ba7 	.word	0x08002ba7
 8002afc:	08002ba7 	.word	0x08002ba7
 8002b00:	08002ba7 	.word	0x08002ba7
 8002b04:	08002ba7 	.word	0x08002ba7
 8002b08:	08002ba7 	.word	0x08002ba7
 8002b0c:	08002ba7 	.word	0x08002ba7
 8002b10:	08002ba7 	.word	0x08002ba7
 8002b14:	08002b7f 	.word	0x08002b7f
 8002b18:	08002ba7 	.word	0x08002ba7
 8002b1c:	08002ba7 	.word	0x08002ba7
 8002b20:	08002ba7 	.word	0x08002ba7
 8002b24:	08002ba7 	.word	0x08002ba7
 8002b28:	08002ba7 	.word	0x08002ba7
 8002b2c:	08002ba7 	.word	0x08002ba7
 8002b30:	08002ba7 	.word	0x08002ba7
 8002b34:	08002ba7 	.word	0x08002ba7
 8002b38:	08002ba7 	.word	0x08002ba7
 8002b3c:	08002ba7 	.word	0x08002ba7
 8002b40:	08002ba7 	.word	0x08002ba7
 8002b44:	08002ba7 	.word	0x08002ba7
 8002b48:	08002ba7 	.word	0x08002ba7
 8002b4c:	08002ba7 	.word	0x08002ba7
 8002b50:	08002ba7 	.word	0x08002ba7
 8002b54:	08002b77 	.word	0x08002b77
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d008      	beq.n	8002b6e <TMC2209_setMicrosteppingResolution+0x136>
 8002b5c:	e023      	b.n	8002ba6 <TMC2209_setMicrosteppingResolution+0x16e>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b64:	e024      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b6c:	e020      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b74:	e01c      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8002b76:	2303      	movs	r3, #3
 8002b78:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b7c:	e018      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8002b7e:	2304      	movs	r3, #4
 8002b80:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b84:	e014      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8002b86:	2305      	movs	r3, #5
 8002b88:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b8c:	e010      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8002b8e:	2306      	movs	r3, #6
 8002b90:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b94:	e00c      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8002b96:	2307      	movs	r3, #7
 8002b98:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b9c:	e008      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002ba4:	e004      	b.n	8002bb0 <TMC2209_setMicrosteppingResolution+0x178>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8002ba6:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002baa:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002bae:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8002bb0:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002bb4:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d105      	bne.n	8002bc8 <TMC2209_setMicrosteppingResolution+0x190>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
        return tmc2209->driver.mstep = resolution;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	839a      	strh	r2, [r3, #28]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	8b9b      	ldrh	r3, [r3, #28]
 8002bc6:	e025      	b.n	8002c14 <TMC2209_setMicrosteppingResolution+0x1dc>
    }
   // HAL_Delay(2);
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8002bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bcc:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002bd0:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002bd4:	061b      	lsls	r3, r3, #24
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8002bdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002be0:	461a      	mov	r2, r3
 8002be2:	216c      	movs	r1, #108	@ 0x6c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fdc3 	bl	8002770 <TMC2209_writeInit>
    HAL_Delay(3);
 8002bea:	2003      	movs	r0, #3
 8002bec:	f004 fa3e 	bl	800706c <HAL_Delay>

    TMC2209_read_ifcnt(tmc2209);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff feab 	bl	800294c <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1a      	ldr	r2, [r3, #32]
 8002bfa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d804      	bhi.n	8002c0c <TMC2209_setMicrosteppingResolution+0x1d4>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	226e      	movs	r2, #110	@ 0x6e
 8002c06:	839a      	strh	r2, [r3, #28]
 8002c08:	236e      	movs	r3, #110	@ 0x6e
 8002c0a:	e003      	b.n	8002c14 <TMC2209_setMicrosteppingResolution+0x1dc>
    }
    else{
        tmc2209->driver.mstep = resolution;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	887a      	ldrh	r2, [r7, #2]
 8002c10:	839a      	strh	r2, [r3, #28]

    if (ENABLE_DEBUG) {
    	sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
    	debug_print(debug_msg);
    }
    return TMC_OK;
 8002c12:	2300      	movs	r3, #0

}
 8002c14:	4618      	mov	r0, r3
 8002c16:	37b8      	adds	r7, #184	@ 0xb8
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TMC2209_configureCurrent>:





void TMC2209_configureCurrent(Motor *tmc2209, uint8_t ihold, uint8_t irun, uint8_t iholddelay) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4608      	mov	r0, r1
 8002c26:	4611      	mov	r1, r2
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	70fb      	strb	r3, [r7, #3]
 8002c2e:	460b      	mov	r3, r1
 8002c30:	70bb      	strb	r3, [r7, #2]
 8002c32:	4613      	mov	r3, r2
 8002c34:	707b      	strb	r3, [r7, #1]
	//  Bits 0-4  : IHOLD (0-31)
	//  Bits 8-12 : IRUN (0-31)
	//  Bits 16-19: IHOLDDELAY (0-15)

    // Clamp values to allowed ranges
    if (ihold > 31) {
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	2b1f      	cmp	r3, #31
 8002c3a:	d901      	bls.n	8002c40 <TMC2209_configureCurrent+0x24>
        ihold = 31;
 8002c3c:	231f      	movs	r3, #31
 8002c3e:	70fb      	strb	r3, [r7, #3]
    }
    if (irun > 31) {
 8002c40:	78bb      	ldrb	r3, [r7, #2]
 8002c42:	2b1f      	cmp	r3, #31
 8002c44:	d901      	bls.n	8002c4a <TMC2209_configureCurrent+0x2e>
        irun = 31;
 8002c46:	231f      	movs	r3, #31
 8002c48:	70bb      	strb	r3, [r7, #2]
    }
    if (iholddelay > 15) {
 8002c4a:	787b      	ldrb	r3, [r7, #1]
 8002c4c:	2b0f      	cmp	r3, #15
 8002c4e:	d901      	bls.n	8002c54 <TMC2209_configureCurrent+0x38>
        iholddelay = 15;
 8002c50:	230f      	movs	r3, #15
 8002c52:	707b      	strb	r3, [r7, #1]
    }
    uint32_t registerValue;
   // Clear the relevant bits for IHOLD (0-4), IRUN (8-12), and IHOLDDELAY (16-19)
    registerValue &= ~((0x1F) | (0x1F << 8) | (0x0F << 16));
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4b19      	ldr	r3, [pc, #100]	@ (8002cbc <TMC2209_configureCurrent+0xa0>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]

    //   Set bits 0-4 with IHOLD, bits 8-12 with IRUN, and bits 16-19 with IHOLDDELAY.
    registerValue |= ((iholddelay & 0x0F) << 16) | ((irun & 0x1F) << 8) | (ihold & 0x1F);
 8002c5c:	787b      	ldrb	r3, [r7, #1]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8002c64:	78bb      	ldrb	r3, [r7, #2]
 8002c66:	021b      	lsls	r3, r3, #8
 8002c68:	f403 53f8 	and.w	r3, r3, #7936	@ 0x1f00
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	4313      	orrs	r3, r2
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
    uint32_t IFCNT = tmc2209->driver.IFCNT;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	60bb      	str	r3, [r7, #8]
    TMC2209_writeInit(tmc2209, TMC2209_REG_IHOLD_IRUN, registerValue);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	461a      	mov	r2, r3
 8002c88:	2110      	movs	r1, #16
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff fd70 	bl	8002770 <TMC2209_writeInit>
    if(tmc2209->driver.IFCNT < IFCNT){
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d90b      	bls.n	8002cb2 <TMC2209_configureCurrent+0x96>
    	tmc2209->driver.IHOLD = TMC_IHOLD_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	225b      	movs	r2, #91	@ 0x5b
 8002c9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
    	tmc2209->driver.IRUN = TMC_IRUN_ERROR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	225c      	movs	r2, #92	@ 0x5c
 8002ca6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    	tmc2209->driver.IDELAY = TMC_IDELAY_ERROR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	225d      	movs	r2, #93	@ 0x5d
 8002cae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    }

}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	fff0e0e0 	.word	0xfff0e0e0

08002cc0 <TMC2209_enableStallDetection>:

    return 25.0f;
}


uint8_t TMC2209_enableStallDetection(Motor *tmc2209, uint8_t sgthrs) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	70fb      	strb	r3, [r7, #3]
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	60fb      	str	r3, [r7, #12]

    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs);    // Set StallGuard threshold (SGTHRS)
 8002cd2:	78fb      	ldrb	r3, [r7, #3]
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2140      	movs	r1, #64	@ 0x40
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff fd49 	bl	8002770 <TMC2209_writeInit>

    TMC2209_read_ifcnt(tmc2209);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff fe34 	bl	800294c <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= IFCNT){
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d807      	bhi.n	8002cfe <TMC2209_enableStallDetection+0x3e>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	return tmc2209->driver.stallEnabled = TMC_ENABLESTALL_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	220a      	movs	r2, #10
 8002cf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002cfc:	e006      	b.n	8002d0c <TMC2209_enableStallDetection+0x4c>
    }


    return tmc2209->driver.stallEnabled = 1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29

}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <TMC2209_SetTCoolThrs>:

void TMC2209_SetTCoolThrs(Motor *tmc2209, uint32_t stepFrequency) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
    const uint32_t fCLK = 12000000; // TMC2209 Internal clock frequency: 12 MHz
 8002d1e:	4b13      	ldr	r3, [pc, #76]	@ (8002d6c <TMC2209_SetTCoolThrs+0x58>)
 8002d20:	613b      	str	r3, [r7, #16]
    uint32_t tStep = fCLK / stepFrequency; // The internal clokc trims step frequency that's why we divied it.
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]

    // Ensure tStep doesn't exceed 20 bits (valid for TCOOLTHRS register)
    if (tStep > 0xFFFFF) {
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d32:	d301      	bcc.n	8002d38 <TMC2209_SetTCoolThrs+0x24>
        tStep = 0xFFFFF;
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <TMC2209_SetTCoolThrs+0x5c>)
 8002d36:	617b      	str	r3, [r7, #20]
    }

    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	60fb      	str	r3, [r7, #12]

    if (tmc2209->driver.IFCNT <= IFCNT){
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d803      	bhi.n	8002d50 <TMC2209_SetTCoolThrs+0x3c>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	tmc2209->driver.TCoolThrs = TMC2209_TCOOLTHRS_ERROR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f06f 0209 	mvn.w	r2, #9
 8002d4e:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    TMC2209_writeInit(tmc2209, TMC2209_REG_TCOOLTHRS, tStep);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	461a      	mov	r2, r3
 8002d54:	2114      	movs	r1, #20
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff fd0a 	bl	8002770 <TMC2209_writeInit>
    tmc2209->driver.TCoolThrs = tStep;
 8002d5c:	697a      	ldr	r2, [r7, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	00b71b00 	.word	0x00b71b00
 8002d70:	000fffff 	.word	0x000fffff

08002d74 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	e2bb      	b.n	80032f8 <initializeMotors+0x584>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x02; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2 // All drivers address 3 since they're on different uarts. If uart failed MSTEP 16 by default.
 8002d80:	4abe      	ldr	r2, [pc, #760]	@ (800307c <initializeMotors+0x308>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	21b0      	movs	r1, #176	@ 0xb0
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3308      	adds	r3, #8
 8002d8e:	2202      	movs	r2, #2
 8002d90:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	b2d8      	uxtb	r0, r3
 8002d96:	4ab9      	ldr	r2, [pc, #740]	@ (800307c <initializeMotors+0x308>)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	21b0      	movs	r1, #176	@ 0xb0
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	4602      	mov	r2, r0
 8002da4:	701a      	strb	r2, [r3, #0]
    	motors[i].driver.STATUS = TMC_OK;
 8002da6:	4ab5      	ldr	r2, [pc, #724]	@ (800307c <initializeMotors+0x308>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	21b0      	movs	r1, #176	@ 0xb0
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	330c      	adds	r3, #12
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
        motors[i].driver.GCONF = 0;
 8002db8:	4ab0      	ldr	r2, [pc, #704]	@ (800307c <initializeMotors+0x308>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	21b0      	movs	r1, #176	@ 0xb0
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3325      	adds	r3, #37	@ 0x25
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IFCNT = 0;
 8002dca:	4aac      	ldr	r2, [pc, #688]	@ (800307c <initializeMotors+0x308>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	21b0      	movs	r1, #176	@ 0xb0
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3320      	adds	r3, #32
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
        motors[i].driver.chopperMode = 0;
 8002ddc:	4aa7      	ldr	r2, [pc, #668]	@ (800307c <initializeMotors+0x308>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	21b0      	movs	r1, #176	@ 0xb0
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	331e      	adds	r3, #30
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
        motors[i].driver.SG_RESULT = 0;
 8002dee:	4aa3      	ldr	r2, [pc, #652]	@ (800307c <initializeMotors+0x308>)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	21b0      	movs	r1, #176	@ 0xb0
 8002df4:	fb01 f303 	mul.w	r3, r1, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	332c      	adds	r3, #44	@ 0x2c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
        motors[i].driver.checkSG_RESULT = 0;
 8002e00:	4a9e      	ldr	r2, [pc, #632]	@ (800307c <initializeMotors+0x308>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	21b0      	movs	r1, #176	@ 0xb0
 8002e06:	fb01 f303 	mul.w	r3, r1, r3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3330      	adds	r3, #48	@ 0x30
 8002e0e:	2200      	movs	r2, #0
 8002e10:	701a      	strb	r2, [r3, #0]
        motors[i].driver.TCoolThrs = 0;
 8002e12:	4a9a      	ldr	r2, [pc, #616]	@ (800307c <initializeMotors+0x308>)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	21b0      	movs	r1, #176	@ 0xb0
 8002e18:	fb01 f303 	mul.w	r3, r1, r3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	3334      	adds	r3, #52	@ 0x34
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
        motors[i].driver.stepFrequency = 0;
 8002e24:	4a95      	ldr	r2, [pc, #596]	@ (800307c <initializeMotors+0x308>)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	21b0      	movs	r1, #176	@ 0xb0
 8002e2a:	fb01 f303 	mul.w	r3, r1, r3
 8002e2e:	4413      	add	r3, r2
 8002e30:	3318      	adds	r3, #24
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
        motors[i].driver.IRUN = 0;
 8002e36:	4a91      	ldr	r2, [pc, #580]	@ (800307c <initializeMotors+0x308>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	21b0      	movs	r1, #176	@ 0xb0
 8002e3c:	fb01 f303 	mul.w	r3, r1, r3
 8002e40:	4413      	add	r3, r2
 8002e42:	3326      	adds	r3, #38	@ 0x26
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IHOLD = 0;
 8002e48:	4a8c      	ldr	r2, [pc, #560]	@ (800307c <initializeMotors+0x308>)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	21b0      	movs	r1, #176	@ 0xb0
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3327      	adds	r3, #39	@ 0x27
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]


        motors[i].fullSteps = 0;
 8002e5a:	4a88      	ldr	r2, [pc, #544]	@ (800307c <initializeMotors+0x308>)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	21b0      	movs	r1, #176	@ 0xb0
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3374      	adds	r3, #116	@ 0x74
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
        motors[i].stepsTaken = 0;
 8002e6c:	4a83      	ldr	r2, [pc, #524]	@ (800307c <initializeMotors+0x308>)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	21b0      	movs	r1, #176	@ 0xb0
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3370      	adds	r3, #112	@ 0x70
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8002e7e:	4a7f      	ldr	r2, [pc, #508]	@ (800307c <initializeMotors+0x308>)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	21b0      	movs	r1, #176	@ 0xb0
 8002e84:	fb01 f303 	mul.w	r3, r1, r3
 8002e88:	4413      	add	r3, r2
 8002e8a:	3378      	adds	r3, #120	@ 0x78
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8002e90:	4a7a      	ldr	r2, [pc, #488]	@ (800307c <initializeMotors+0x308>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	21b0      	movs	r1, #176	@ 0xb0
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3384      	adds	r3, #132	@ 0x84
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8002ea4:	4a75      	ldr	r2, [pc, #468]	@ (800307c <initializeMotors+0x308>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	21b0      	movs	r1, #176	@ 0xb0
 8002eaa:	fb01 f303 	mul.w	r3, r1, r3
 8002eae:	4413      	add	r3, r2
 8002eb0:	3388      	adds	r3, #136	@ 0x88
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
        motors[i].stepError = 0;
 8002eb8:	4a70      	ldr	r2, [pc, #448]	@ (800307c <initializeMotors+0x308>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	21b0      	movs	r1, #176	@ 0xb0
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9c1 2300 	strd	r2, r3, [r1]
        motors[i].isStepping = false;
 8002ed4:	4a69      	ldr	r2, [pc, #420]	@ (800307c <initializeMotors+0x308>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	21b0      	movs	r1, #176	@ 0xb0
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	3398      	adds	r3, #152	@ 0x98
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	701a      	strb	r2, [r3, #0]
        motors[i].STALL = 0;
 8002ee6:	4a65      	ldr	r2, [pc, #404]	@ (800307c <initializeMotors+0x308>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	21b0      	movs	r1, #176	@ 0xb0
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	33ac      	adds	r3, #172	@ 0xac
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d178      	bne.n	8002ff0 <initializeMotors+0x27c>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.huart = &huart2;
 8002efe:	4a5f      	ldr	r2, [pc, #380]	@ (800307c <initializeMotors+0x308>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	21b0      	movs	r1, #176	@ 0xb0
 8002f04:	fb01 f303 	mul.w	r3, r1, r3
 8002f08:	4413      	add	r3, r2
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8003080 <initializeMotors+0x30c>)
 8002f0e:	601a      	str	r2, [r3, #0]
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8002f10:	4a5a      	ldr	r2, [pc, #360]	@ (800307c <initializeMotors+0x308>)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	21b0      	movs	r1, #176	@ 0xb0
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3310      	adds	r3, #16
 8002f1e:	4a59      	ldr	r2, [pc, #356]	@ (8003084 <initializeMotors+0x310>)
 8002f20:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8002f22:	4a56      	ldr	r2, [pc, #344]	@ (800307c <initializeMotors+0x308>)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	21b0      	movs	r1, #176	@ 0xb0
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3314      	adds	r3, #20
 8002f30:	2208      	movs	r2, #8
 8002f32:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 0;
 8002f34:	4a51      	ldr	r2, [pc, #324]	@ (800307c <initializeMotors+0x308>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	21b0      	movs	r1, #176	@ 0xb0
 8002f3a:	fb01 f303 	mul.w	r3, r1, r3
 8002f3e:	4413      	add	r3, r2
 8002f40:	331c      	adds	r3, #28
 8002f42:	2200      	movs	r2, #0
 8002f44:	801a      	strh	r2, [r3, #0]

        motors[i].stepsPerRevolution = 200;
 8002f46:	4a4d      	ldr	r2, [pc, #308]	@ (800307c <initializeMotors+0x308>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	21b0      	movs	r1, #176	@ 0xb0
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3364      	adds	r3, #100	@ 0x64
 8002f54:	22c8      	movs	r2, #200	@ 0xc8
 8002f56:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8002f58:	4a48      	ldr	r2, [pc, #288]	@ (800307c <initializeMotors+0x308>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	21b0      	movs	r1, #176	@ 0xb0
 8002f5e:	fb01 f303 	mul.w	r3, r1, r3
 8002f62:	4413      	add	r3, r2
 8002f64:	333c      	adds	r3, #60	@ 0x3c
 8002f66:	4a48      	ldr	r2, [pc, #288]	@ (8003088 <initializeMotors+0x314>)
 8002f68:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8002f6a:	4a44      	ldr	r2, [pc, #272]	@ (800307c <initializeMotors+0x308>)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	21b0      	movs	r1, #176	@ 0xb0
 8002f70:	fb01 f303 	mul.w	r3, r1, r3
 8002f74:	4413      	add	r3, r2
 8002f76:	3340      	adds	r3, #64	@ 0x40
 8002f78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f7c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8002f7e:	4a3f      	ldr	r2, [pc, #252]	@ (800307c <initializeMotors+0x308>)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	21b0      	movs	r1, #176	@ 0xb0
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	3344      	adds	r3, #68	@ 0x44
 8002f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800308c <initializeMotors+0x318>)
 8002f8e:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 8002f90:	4a3a      	ldr	r2, [pc, #232]	@ (800307c <initializeMotors+0x308>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	21b0      	movs	r1, #176	@ 0xb0
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3348      	adds	r3, #72	@ 0x48
 8002f9e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002fa2:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8002fa4:	4a35      	ldr	r2, [pc, #212]	@ (800307c <initializeMotors+0x308>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	21b0      	movs	r1, #176	@ 0xb0
 8002faa:	fb01 f303 	mul.w	r3, r1, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	334c      	adds	r3, #76	@ 0x4c
 8002fb2:	4a35      	ldr	r2, [pc, #212]	@ (8003088 <initializeMotors+0x314>)
 8002fb4:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 8002fb6:	4a31      	ldr	r2, [pc, #196]	@ (800307c <initializeMotors+0x308>)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	21b0      	movs	r1, #176	@ 0xb0
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3350      	adds	r3, #80	@ 0x50
 8002fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fc8:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = DIAG1_GPIO_Port;
 8002fca:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <initializeMotors+0x308>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	21b0      	movs	r1, #176	@ 0xb0
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3354      	adds	r3, #84	@ 0x54
 8002fd8:	4a2d      	ldr	r2, [pc, #180]	@ (8003090 <initializeMotors+0x31c>)
 8002fda:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = DIAG1_Pin;
 8002fdc:	4a27      	ldr	r2, [pc, #156]	@ (800307c <initializeMotors+0x308>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	21b0      	movs	r1, #176	@ 0xb0
 8002fe2:	fb01 f303 	mul.w	r3, r1, r3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3358      	adds	r3, #88	@ 0x58
 8002fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fee:	801a      	strh	r2, [r3, #0]


        }


        if(i == 1){
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	f040 808a 	bne.w	800310c <initializeMotors+0x398>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 8002ff8:	4a20      	ldr	r2, [pc, #128]	@ (800307c <initializeMotors+0x308>)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	21b0      	movs	r1, #176	@ 0xb0
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3310      	adds	r3, #16
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <initializeMotors+0x320>)
 8003008:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 800300a:	4a1c      	ldr	r2, [pc, #112]	@ (800307c <initializeMotors+0x308>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	21b0      	movs	r1, #176	@ 0xb0
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	4413      	add	r3, r2
 8003016:	3314      	adds	r3, #20
 8003018:	220c      	movs	r2, #12
 800301a:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 800301c:	4a17      	ldr	r2, [pc, #92]	@ (800307c <initializeMotors+0x308>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	21b0      	movs	r1, #176	@ 0xb0
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	331c      	adds	r3, #28
 800302a:	2200      	movs	r2, #0
 800302c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 800302e:	4a13      	ldr	r2, [pc, #76]	@ (800307c <initializeMotors+0x308>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	21b0      	movs	r1, #176	@ 0xb0
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <initializeMotors+0x324>)
 800303e:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8003040:	4a0e      	ldr	r2, [pc, #56]	@ (800307c <initializeMotors+0x308>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	21b0      	movs	r1, #176	@ 0xb0
 8003046:	fb01 f303 	mul.w	r3, r1, r3
 800304a:	4413      	add	r3, r2
 800304c:	3364      	adds	r3, #100	@ 0x64
 800304e:	22c8      	movs	r2, #200	@ 0xc8
 8003050:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8003052:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <initializeMotors+0x308>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	21b0      	movs	r1, #176	@ 0xb0
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	333c      	adds	r3, #60	@ 0x3c
 8003060:	4a0a      	ldr	r2, [pc, #40]	@ (800308c <initializeMotors+0x318>)
 8003062:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8003064:	4a05      	ldr	r2, [pc, #20]	@ (800307c <initializeMotors+0x308>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	21b0      	movs	r1, #176	@ 0xb0
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	4413      	add	r3, r2
 8003070:	3340      	adds	r3, #64	@ 0x40
 8003072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003076:	801a      	strh	r2, [r3, #0]
 8003078:	e010      	b.n	800309c <initializeMotors+0x328>
 800307a:	bf00      	nop
 800307c:	2000bf48 	.word	0x2000bf48
 8003080:	2000b68c 	.word	0x2000b68c
 8003084:	2000b368 	.word	0x2000b368
 8003088:	40020400 	.word	0x40020400
 800308c:	40021000 	.word	0x40021000
 8003090:	40021800 	.word	0x40021800
 8003094:	2000b31c 	.word	0x2000b31c
 8003098:	2000b57c 	.word	0x2000b57c
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 800309c:	4a9c      	ldr	r2, [pc, #624]	@ (8003310 <initializeMotors+0x59c>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	21b0      	movs	r1, #176	@ 0xb0
 80030a2:	fb01 f303 	mul.w	r3, r1, r3
 80030a6:	4413      	add	r3, r2
 80030a8:	3344      	adds	r3, #68	@ 0x44
 80030aa:	4a9a      	ldr	r2, [pc, #616]	@ (8003314 <initializeMotors+0x5a0>)
 80030ac:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 80030ae:	4a98      	ldr	r2, [pc, #608]	@ (8003310 <initializeMotors+0x59c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	21b0      	movs	r1, #176	@ 0xb0
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	3348      	adds	r3, #72	@ 0x48
 80030bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80030c0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 80030c2:	4a93      	ldr	r2, [pc, #588]	@ (8003310 <initializeMotors+0x59c>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	21b0      	movs	r1, #176	@ 0xb0
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	334c      	adds	r3, #76	@ 0x4c
 80030d0:	4a90      	ldr	r2, [pc, #576]	@ (8003314 <initializeMotors+0x5a0>)
 80030d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 80030d4:	4a8e      	ldr	r2, [pc, #568]	@ (8003310 <initializeMotors+0x59c>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	21b0      	movs	r1, #176	@ 0xb0
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3350      	adds	r3, #80	@ 0x50
 80030e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030e6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG2_GPIO_Port;
 80030e8:	4a89      	ldr	r2, [pc, #548]	@ (8003310 <initializeMotors+0x59c>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	21b0      	movs	r1, #176	@ 0xb0
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	4413      	add	r3, r2
 80030f4:	3354      	adds	r3, #84	@ 0x54
 80030f6:	4a88      	ldr	r2, [pc, #544]	@ (8003318 <initializeMotors+0x5a4>)
 80030f8:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG2_Pin;
 80030fa:	4a85      	ldr	r2, [pc, #532]	@ (8003310 <initializeMotors+0x59c>)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	21b0      	movs	r1, #176	@ 0xb0
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3358      	adds	r3, #88	@ 0x58
 8003108:	2204      	movs	r2, #4
 800310a:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d175      	bne.n	80031fe <initializeMotors+0x48a>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 8003112:	4a7f      	ldr	r2, [pc, #508]	@ (8003310 <initializeMotors+0x59c>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	21b0      	movs	r1, #176	@ 0xb0
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	3310      	adds	r3, #16
 8003120:	4a7e      	ldr	r2, [pc, #504]	@ (800331c <initializeMotors+0x5a8>)
 8003122:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8003124:	4a7a      	ldr	r2, [pc, #488]	@ (8003310 <initializeMotors+0x59c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	21b0      	movs	r1, #176	@ 0xb0
 800312a:	fb01 f303 	mul.w	r3, r1, r3
 800312e:	4413      	add	r3, r2
 8003130:	3314      	adds	r3, #20
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003136:	4a76      	ldr	r2, [pc, #472]	@ (8003310 <initializeMotors+0x59c>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	21b0      	movs	r1, #176	@ 0xb0
 800313c:	fb01 f303 	mul.w	r3, r1, r3
 8003140:	4413      	add	r3, r2
 8003142:	331c      	adds	r3, #28
 8003144:	2200      	movs	r2, #0
 8003146:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 8003148:	4a71      	ldr	r2, [pc, #452]	@ (8003310 <initializeMotors+0x59c>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	21b0      	movs	r1, #176	@ 0xb0
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4413      	add	r3, r2
 8003154:	3304      	adds	r3, #4
 8003156:	4a72      	ldr	r2, [pc, #456]	@ (8003320 <initializeMotors+0x5ac>)
 8003158:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 800315a:	4a6d      	ldr	r2, [pc, #436]	@ (8003310 <initializeMotors+0x59c>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	21b0      	movs	r1, #176	@ 0xb0
 8003160:	fb01 f303 	mul.w	r3, r1, r3
 8003164:	4413      	add	r3, r2
 8003166:	3364      	adds	r3, #100	@ 0x64
 8003168:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800316c:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 800316e:	4a68      	ldr	r2, [pc, #416]	@ (8003310 <initializeMotors+0x59c>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	21b0      	movs	r1, #176	@ 0xb0
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	333c      	adds	r3, #60	@ 0x3c
 800317c:	4a69      	ldr	r2, [pc, #420]	@ (8003324 <initializeMotors+0x5b0>)
 800317e:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 8003180:	4a63      	ldr	r2, [pc, #396]	@ (8003310 <initializeMotors+0x59c>)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	21b0      	movs	r1, #176	@ 0xb0
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3340      	adds	r3, #64	@ 0x40
 800318e:	2201      	movs	r2, #1
 8003190:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 8003192:	4a5f      	ldr	r2, [pc, #380]	@ (8003310 <initializeMotors+0x59c>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	21b0      	movs	r1, #176	@ 0xb0
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3344      	adds	r3, #68	@ 0x44
 80031a0:	4a5c      	ldr	r2, [pc, #368]	@ (8003314 <initializeMotors+0x5a0>)
 80031a2:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 80031a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003310 <initializeMotors+0x59c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	21b0      	movs	r1, #176	@ 0xb0
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3348      	adds	r3, #72	@ 0x48
 80031b2:	2204      	movs	r2, #4
 80031b4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 80031b6:	4a56      	ldr	r2, [pc, #344]	@ (8003310 <initializeMotors+0x59c>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	21b0      	movs	r1, #176	@ 0xb0
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	334c      	adds	r3, #76	@ 0x4c
 80031c4:	4a53      	ldr	r2, [pc, #332]	@ (8003314 <initializeMotors+0x5a0>)
 80031c6:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 80031c8:	4a51      	ldr	r2, [pc, #324]	@ (8003310 <initializeMotors+0x59c>)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	21b0      	movs	r1, #176	@ 0xb0
 80031ce:	fb01 f303 	mul.w	r3, r1, r3
 80031d2:	4413      	add	r3, r2
 80031d4:	3350      	adds	r3, #80	@ 0x50
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG3_GPIO_Port;
 80031da:	4a4d      	ldr	r2, [pc, #308]	@ (8003310 <initializeMotors+0x59c>)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	21b0      	movs	r1, #176	@ 0xb0
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3354      	adds	r3, #84	@ 0x54
 80031e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003318 <initializeMotors+0x5a4>)
 80031ea:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG3_Pin;
 80031ec:	4a48      	ldr	r2, [pc, #288]	@ (8003310 <initializeMotors+0x59c>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	21b0      	movs	r1, #176	@ 0xb0
 80031f2:	fb01 f303 	mul.w	r3, r1, r3
 80031f6:	4413      	add	r3, r2
 80031f8:	3358      	adds	r3, #88	@ 0x58
 80031fa:	2240      	movs	r2, #64	@ 0x40
 80031fc:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b03      	cmp	r3, #3
 8003202:	d176      	bne.n	80032f2 <initializeMotors+0x57e>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8003204:	4a42      	ldr	r2, [pc, #264]	@ (8003310 <initializeMotors+0x59c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	21b0      	movs	r1, #176	@ 0xb0
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3310      	adds	r3, #16
 8003212:	4a45      	ldr	r2, [pc, #276]	@ (8003328 <initializeMotors+0x5b4>)
 8003214:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8003216:	4a3e      	ldr	r2, [pc, #248]	@ (8003310 <initializeMotors+0x59c>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	21b0      	movs	r1, #176	@ 0xb0
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3314      	adds	r3, #20
 8003224:	2208      	movs	r2, #8
 8003226:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003228:	4a39      	ldr	r2, [pc, #228]	@ (8003310 <initializeMotors+0x59c>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	21b0      	movs	r1, #176	@ 0xb0
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	331c      	adds	r3, #28
 8003236:	2200      	movs	r2, #0
 8003238:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 800323a:	4a35      	ldr	r2, [pc, #212]	@ (8003310 <initializeMotors+0x59c>)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	21b0      	movs	r1, #176	@ 0xb0
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3304      	adds	r3, #4
 8003248:	4a38      	ldr	r2, [pc, #224]	@ (800332c <initializeMotors+0x5b8>)
 800324a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 800324c:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <initializeMotors+0x59c>)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	21b0      	movs	r1, #176	@ 0xb0
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3364      	adds	r3, #100	@ 0x64
 800325a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800325e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 8003260:	4a2b      	ldr	r2, [pc, #172]	@ (8003310 <initializeMotors+0x59c>)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	21b0      	movs	r1, #176	@ 0xb0
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	333c      	adds	r3, #60	@ 0x3c
 800326e:	4a2a      	ldr	r2, [pc, #168]	@ (8003318 <initializeMotors+0x5a4>)
 8003270:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 8003272:	4a27      	ldr	r2, [pc, #156]	@ (8003310 <initializeMotors+0x59c>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	21b0      	movs	r1, #176	@ 0xb0
 8003278:	fb01 f303 	mul.w	r3, r1, r3
 800327c:	4413      	add	r3, r2
 800327e:	3340      	adds	r3, #64	@ 0x40
 8003280:	2201      	movs	r2, #1
 8003282:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 8003284:	4a22      	ldr	r2, [pc, #136]	@ (8003310 <initializeMotors+0x59c>)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	21b0      	movs	r1, #176	@ 0xb0
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	3344      	adds	r3, #68	@ 0x44
 8003292:	4a20      	ldr	r2, [pc, #128]	@ (8003314 <initializeMotors+0x5a0>)
 8003294:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 8003296:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <initializeMotors+0x59c>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	21b0      	movs	r1, #176	@ 0xb0
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3348      	adds	r3, #72	@ 0x48
 80032a4:	2201      	movs	r2, #1
 80032a6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 80032a8:	4a19      	ldr	r2, [pc, #100]	@ (8003310 <initializeMotors+0x59c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	21b0      	movs	r1, #176	@ 0xb0
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	334c      	adds	r3, #76	@ 0x4c
 80032b6:	4a17      	ldr	r2, [pc, #92]	@ (8003314 <initializeMotors+0x5a0>)
 80032b8:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 80032ba:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <initializeMotors+0x59c>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	21b0      	movs	r1, #176	@ 0xb0
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	4413      	add	r3, r2
 80032c6:	3350      	adds	r3, #80	@ 0x50
 80032c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032cc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG4_GPIO_Port;
 80032ce:	4a10      	ldr	r2, [pc, #64]	@ (8003310 <initializeMotors+0x59c>)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	21b0      	movs	r1, #176	@ 0xb0
 80032d4:	fb01 f303 	mul.w	r3, r1, r3
 80032d8:	4413      	add	r3, r2
 80032da:	3354      	adds	r3, #84	@ 0x54
 80032dc:	4a14      	ldr	r2, [pc, #80]	@ (8003330 <initializeMotors+0x5bc>)
 80032de:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG4_Pin;
 80032e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003310 <initializeMotors+0x59c>)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	21b0      	movs	r1, #176	@ 0xb0
 80032e6:	fb01 f303 	mul.w	r3, r1, r3
 80032ea:	4413      	add	r3, r2
 80032ec:	3358      	adds	r3, #88	@ 0x58
 80032ee:	2210      	movs	r2, #16
 80032f0:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3301      	adds	r3, #1
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	f77f ad40 	ble.w	8002d80 <initializeMotors+0xc>


    }


}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	2000bf48 	.word	0x2000bf48
 8003314:	40021000 	.word	0x40021000
 8003318:	40020400 	.word	0x40020400
 800331c:	2000b44c 	.word	0x2000b44c
 8003320:	2000b604 	.word	0x2000b604
 8003324:	40020000 	.word	0x40020000
 8003328:	2000b3b4 	.word	0x2000b3b4
 800332c:	2000b79c 	.word	0x2000b79c
 8003330:	40021400 	.word	0x40021400

08003334 <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors){	// Set all motor configurations based on their variables set from init function
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800333c:	2300      	movs	r3, #0
 800333e:	75fb      	strb	r3, [r7, #23]
 8003340:	e06d      	b.n	800341e <TMC2209_setMotorsConfiguration+0xea>
    	// DEFAULT VALUES
    	uint16_t mstep = 256;
 8003342:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003346:	82bb      	strh	r3, [r7, #20]
    	uint8_t IHOLD = 15;
 8003348:	230f      	movs	r3, #15
 800334a:	74fb      	strb	r3, [r7, #19]
    	uint8_t IRUN = 25;
 800334c:	2319      	movs	r3, #25
 800334e:	74bb      	strb	r3, [r7, #18]
    	uint8_t IDELAY = 8;
 8003350:	2308      	movs	r3, #8
 8003352:	747b      	strb	r3, [r7, #17]
    	uint8_t sgthrs = 1;
 8003354:	2301      	movs	r3, #1
 8003356:	743b      	strb	r3, [r7, #16]
    	uint32_t coolThrs = 7000;
 8003358:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800335c:	60fb      	str	r3, [r7, #12]

    	TMC2209_EnableDriver(&motors[i], 1);
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	22b0      	movs	r2, #176	@ 0xb0
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	2101      	movs	r1, #1
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe ff07 	bl	8002180 <TMC2209_EnableDriver>
    	HAL_Delay(10);
 8003372:	200a      	movs	r0, #10
 8003374:	f003 fe7a 	bl	800706c <HAL_Delay>
    	TMC2209_setPDNuart(&motors[i], 1);
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	22b0      	movs	r2, #176	@ 0xb0
 800337c:	fb02 f303 	mul.w	r3, r2, r3
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	4413      	add	r3, r2
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fa90 	bl	80028ac <TMC2209_setPDNuart>
    	HAL_Delay(100);
 800338c:	2064      	movs	r0, #100	@ 0x64
 800338e:	f003 fe6d 	bl	800706c <HAL_Delay>
    	TMC2209_configureCurrent(&motors[i], IHOLD, IRUN, IDELAY);
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	22b0      	movs	r2, #176	@ 0xb0
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	18d0      	adds	r0, r2, r3
 800339e:	7c7b      	ldrb	r3, [r7, #17]
 80033a0:	7cba      	ldrb	r2, [r7, #18]
 80033a2:	7cf9      	ldrb	r1, [r7, #19]
 80033a4:	f7ff fc3a 	bl	8002c1c <TMC2209_configureCurrent>
    	HAL_Delay(500);
 80033a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ac:	f003 fe5e 	bl	800706c <HAL_Delay>
    	TMC2209_setMicrosteppingResolution(&motors[i], mstep);
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	22b0      	movs	r2, #176	@ 0xb0
 80033b4:	fb02 f303 	mul.w	r3, r2, r3
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	4413      	add	r3, r2
 80033bc:	8aba      	ldrh	r2, [r7, #20]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7ff fb39 	bl	8002a38 <TMC2209_setMicrosteppingResolution>
    	HAL_Delay(500);
 80033c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033ca:	f003 fe4f 	bl	800706c <HAL_Delay>
    	TMC2209_enableStallDetection(&motors[i], sgthrs);
 80033ce:	7dfb      	ldrb	r3, [r7, #23]
 80033d0:	22b0      	movs	r2, #176	@ 0xb0
 80033d2:	fb02 f303 	mul.w	r3, r2, r3
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	7c3a      	ldrb	r2, [r7, #16]
 80033dc:	4611      	mov	r1, r2
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fc6e 	bl	8002cc0 <TMC2209_enableStallDetection>
    	HAL_Delay(10);
 80033e4:	200a      	movs	r0, #10
 80033e6:	f003 fe41 	bl	800706c <HAL_Delay>
    	TMC2209_SetTCoolThrs(&motors[i], coolThrs);
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	22b0      	movs	r2, #176	@ 0xb0
 80033ee:	fb02 f303 	mul.w	r3, r2, r3
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	4413      	add	r3, r2
 80033f6:	68f9      	ldr	r1, [r7, #12]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff fc8b 	bl	8002d14 <TMC2209_SetTCoolThrs>
    	HAL_Delay(10);
 80033fe:	200a      	movs	r0, #10
 8003400:	f003 fe34 	bl	800706c <HAL_Delay>
    	//TMC2209_readStandstillIndicator(&motors[i]);
    	TMC2209_EnableDriver(&motors[i], 0);
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	22b0      	movs	r2, #176	@ 0xb0
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f7fe feb4 	bl	8002180 <TMC2209_EnableDriver>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8003418:	7dfb      	ldrb	r3, [r7, #23]
 800341a:	3301      	adds	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d98e      	bls.n	8003342 <TMC2209_setMotorsConfiguration+0xe>
    }
    TMC2209_SetSpeed(&motors[0], 8000);
 8003424:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7fe febc 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	33b0      	adds	r3, #176	@ 0xb0
 8003432:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe feb5 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003442:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fead 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8003452:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe fea5 	bl	80021a6 <TMC2209_SetSpeed>
}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b088      	sub	sp, #32
 8003468:	af02      	add	r7, sp, #8
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[1]->currentPositionMM = 0;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[0]->prevPositionMM = 0;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[1]->prevPositionMM = 0;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[0]->nextPositionMM = 0;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    axis->motors[1]->nextPositionMM = 0;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	8b92      	ldrh	r2, [r2, #28]
 80034ce:	fb02 f303 	mul.w	r3, r2, r3
 80034d2:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	669a      	str	r2, [r3, #104]	@ 0x68
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	669a      	str	r2, [r3, #104]	@ 0x68
    axis->stepPerUnit =  totalStepsPerRevolution / circumference;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	ee07 3a90 	vmov	s15, r3
 80034ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	edc3 7a04 	vstr	s15, [r3, #16]


    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f103 0014 	add.w	r0, r3, #20
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	4a0a      	ldr	r2, [pc, #40]	@ (8003530 <initializeAxis+0xcc>)
 8003506:	210a      	movs	r1, #10
 8003508:	f012 fee4 	bl	80162d4 <sniprintf>
    if (motor2 != NULL) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <initializeAxis+0xc4>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f103 001e 	add.w	r0, r3, #30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	4a03      	ldr	r2, [pc, #12]	@ (8003530 <initializeAxis+0xcc>)
 8003522:	210a      	movs	r1, #10
 8003524:	f012 fed6 	bl	80162d4 <sniprintf>
    }
}
 8003528:	bf00      	nop
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	080188a4 	.word	0x080188a4

08003534 <initializeSystem>:

void initializeSystem(){
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af02      	add	r7, sp, #8
	// motors
	 initializeMotors();
 800353a:	f7ff fc1b 	bl	8002d74 <initializeMotors>
    // motor configurations
	TMC2209_setMotorsConfiguration(&motors);
 800353e:	480e      	ldr	r0, [pc, #56]	@ (8003578 <initializeSystem+0x44>)
 8003540:	f7ff fef8 	bl	8003334 <TMC2209_setMotorsConfiguration>
    // axis
	initializeAxis(&axes[0], &motors[0],&motors[1], 8, "Y");
 8003544:	4b0d      	ldr	r3, [pc, #52]	@ (800357c <initializeSystem+0x48>)
 8003546:	9300      	str	r3, [sp, #0]
 8003548:	2308      	movs	r3, #8
 800354a:	4a0d      	ldr	r2, [pc, #52]	@ (8003580 <initializeSystem+0x4c>)
 800354c:	490a      	ldr	r1, [pc, #40]	@ (8003578 <initializeSystem+0x44>)
 800354e:	480d      	ldr	r0, [pc, #52]	@ (8003584 <initializeSystem+0x50>)
 8003550:	f7ff ff88 	bl	8003464 <initializeAxis>
	initializeAxis(&axes[1], &motors[2],&motors[3], 40, "X");
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <initializeSystem+0x54>)
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	2328      	movs	r3, #40	@ 0x28
 800355a:	4a0c      	ldr	r2, [pc, #48]	@ (800358c <initializeSystem+0x58>)
 800355c:	490c      	ldr	r1, [pc, #48]	@ (8003590 <initializeSystem+0x5c>)
 800355e:	480d      	ldr	r0, [pc, #52]	@ (8003594 <initializeSystem+0x60>)
 8003560:	f7ff ff80 	bl	8003464 <initializeAxis>



		xSemaphoreGive(xInitSemaphore); // signal welcome menu state to proceed with next state
 8003564:	4b0c      	ldr	r3, [pc, #48]	@ (8003598 <initializeSystem+0x64>)
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	2300      	movs	r3, #0
 800356a:	2200      	movs	r2, #0
 800356c:	2100      	movs	r1, #0
 800356e:	f00f fcb3 	bl	8012ed8 <xQueueGenericSend>

}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	2000bf48 	.word	0x2000bf48
 800357c:	080188ac 	.word	0x080188ac
 8003580:	2000bff8 	.word	0x2000bff8
 8003584:	2000c208 	.word	0x2000c208
 8003588:	080188b0 	.word	0x080188b0
 800358c:	2000c158 	.word	0x2000c158
 8003590:	2000c0a8 	.word	0x2000c0a8
 8003594:	2000c230 	.word	0x2000c230
 8003598:	20008a64 	.word	0x20008a64

0800359c <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	213c      	movs	r1, #60	@ 0x3c
 80035aa:	4618      	mov	r0, r3
 80035ac:	f007 fe80 	bl	800b2b0 <HAL_TIM_Encoder_Start>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	429a      	cmp	r2, r3
 80035da:	bf34      	ite	cc
 80035dc:	2301      	movcc	r3, #1
 80035de:	2300      	movcs	r3, #0
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf8c      	ite	hi
 80035f0:	2301      	movhi	r3, #1
 80035f2:	2300      	movls	r3, #0
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <CheckConnection>:


#include "extras.h"
bool probe = 0;

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo2){
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, SERVO1_CHECK_POS);
 800361e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003674 <CheckConnection+0x60>
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8f8 	bl	8003818 <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_CHECK_POS);
 8003628:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8003678 <CheckConnection+0x64>
 800362c:	6838      	ldr	r0, [r7, #0]
 800362e:	f000 f8f3 	bl	8003818 <SERVO_WritePosition>
	HAL_Delay(100);
 8003632:	2064      	movs	r0, #100	@ 0x64
 8003634:	f003 fd1a 	bl	800706c <HAL_Delay>
	probe = HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin);
 8003638:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800363c:	480f      	ldr	r0, [pc, #60]	@ (800367c <CheckConnection+0x68>)
 800363e:	f004 fbd1 	bl	8007de4 <HAL_GPIO_ReadPin>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b0c      	ldr	r3, [pc, #48]	@ (8003680 <CheckConnection+0x6c>)
 8003650:	701a      	strb	r2, [r3, #0]
	SERVO_WritePosition(hservo, SERVO1_HOME_POS);
 8003652:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003684 <CheckConnection+0x70>
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f8de 	bl	8003818 <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_HOME_POS);
 800365c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003688 <CheckConnection+0x74>
 8003660:	6838      	ldr	r0, [r7, #0]
 8003662:	f000 f8d9 	bl	8003818 <SERVO_WritePosition>
//	HAL_Delay(1000);
	return probe;
 8003666:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <CheckConnection+0x6c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	428c0000 	.word	0x428c0000
 8003678:	42180000 	.word	0x42180000
 800367c:	40021000 	.word	0x40021000
 8003680:	20008a34 	.word	0x20008a34
 8003684:	42b40000 	.word	0x42b40000
 8003688:	42700000 	.word	0x42700000

0800368c <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	4619      	mov	r1, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f004 fba1 	bl	8007de4 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <IsSensorTriggered+0x24>
    	return false;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e000      	b.n	80036b2 <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80036b0:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b082      	sub	sp, #8
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80036c8:	eeb0 0a67 	vmov.f32	s0, s15
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f80d 	bl	80036ec <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4619      	mov	r1, r3
 80036dc:	4610      	mov	r0, r2
 80036de:	f007 fa31 	bl	800ab44 <HAL_TIM_PWM_Start>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80036f8:	edd7 7a00 	vldr	s15, [r7]
 80036fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003704:	d503      	bpl.n	800370e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	e00a      	b.n	8003724 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800370e:	edd7 7a00 	vldr	s15, [r7]
 8003712:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80037d0 <PWM_WriteDuty+0xe4>
 8003716:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371e:	dd01      	ble.n	8003724 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8003720:	4b2c      	ldr	r3, [pc, #176]	@ (80037d4 <PWM_WriteDuty+0xe8>)
 8003722:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	3301      	adds	r3, #1
 8003734:	ee07 3a90 	vmov	s15, r3
 8003738:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800373c:	edd7 7a00 	vldr	s15, [r7]
 8003740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003744:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80037d0 <PWM_WriteDuty+0xe4>
 8003748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800374c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003750:	ee17 3a90 	vmov	r3, s15
 8003754:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d105      	bne.n	800376a <PWM_WriteDuty+0x7e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003768:	e02c      	b.n	80037c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b04      	cmp	r3, #4
 8003770:	d105      	bne.n	800377e <PWM_WriteDuty+0x92>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800377c:	e022      	b.n	80037c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b08      	cmp	r3, #8
 8003784:	d105      	bne.n	8003792 <PWM_WriteDuty+0xa6>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003790:	e018      	b.n	80037c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d105      	bne.n	80037a6 <PWM_WriteDuty+0xba>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80037a4:	e00e      	b.n	80037c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b10      	cmp	r3, #16
 80037ac:	d105      	bne.n	80037ba <PWM_WriteDuty+0xce>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80037b8:	e004      	b.n	80037c4 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	42c80000 	.word	0x42c80000
 80037d4:	42c80000 	.word	0x42c80000

080037d8 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	if(hservo->ID == 1 ){
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7c1b      	ldrb	r3, [r3, #16]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <SERVO_Init+0x1c>
	SERVO_WritePosition(hservo, SERVO1_HOME_POS); // Home position is 90 deg, Down is 72 deg.
 80037e8:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8003810 <SERVO_Init+0x38>
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f813 	bl	8003818 <SERVO_WritePosition>
 80037f2:	e004      	b.n	80037fe <SERVO_Init+0x26>
	}
	else{
	SERVO_WritePosition(hservo, SERVO2_HOME_POS); // Home position is 50 deg, down is 40.
 80037f4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003814 <SERVO_Init+0x3c>
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f80d 	bl	8003818 <SERVO_WritePosition>
	}

	PWM_Init(&(hservo->PwmOut));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4618      	mov	r0, r3
 8003802:	f7ff ff5a 	bl	80036ba <PWM_Init>
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	42b40000 	.word	0x42b40000
 8003814:	42700000 	.word	0x42700000

08003818 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8003824:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003880 <SERVO_WritePosition+0x68>
 8003828:	ed97 0a00 	vldr	s0, [r7]
 800382c:	f014 feb7 	bl	801859e <fminf>
 8003830:	eef0 7a40 	vmov.f32	s15, s0
 8003834:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003884 <SERVO_WritePosition+0x6c>
 8003838:	eeb0 0a67 	vmov.f32	s0, s15
 800383c:	f014 fe92 	bl	8018564 <fmaxf>
 8003840:	eef0 7a40 	vmov.f32	s15, s0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003850:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003880 <SERVO_WritePosition+0x68>
 8003854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003858:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800385c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003860:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003868:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff3a 	bl	80036ec <PWM_WriteDuty>
}
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	43340000 	.word	0x43340000
 8003884:	00000000 	.word	0x00000000

08003888 <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a0f      	ldr	r2, [pc, #60]	@ (80038d4 <HAL_UART_RxCpltCallback+0x4c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00e      	beq.n	80038b8 <HAL_UART_RxCpltCallback+0x30>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a0e      	ldr	r2, [pc, #56]	@ (80038d8 <HAL_UART_RxCpltCallback+0x50>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_UART_RxCpltCallback+0x30>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0c      	ldr	r2, [pc, #48]	@ (80038dc <HAL_UART_RxCpltCallback+0x54>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_UART_RxCpltCallback+0x30>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a0b      	ldr	r2, [pc, #44]	@ (80038e0 <HAL_UART_RxCpltCallback+0x58>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <HAL_UART_RxCpltCallback+0x5c>)
 80038ba:	2209      	movs	r2, #9
 80038bc:	4619      	mov	r1, r3
 80038be:	480a      	ldr	r0, [pc, #40]	@ (80038e8 <HAL_UART_RxCpltCallback+0x60>)
 80038c0:	f012 fe6d 	bl	801659e <memcpy>
        rxBufferReady = 1;
 80038c4:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_UART_RxCpltCallback+0x64>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 80038ca:	bf00      	nop
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40011400 	.word	0x40011400
 80038dc:	40004c00 	.word	0x40004c00
 80038e0:	40005000 	.word	0x40005000
 80038e4:	20008a39 	.word	0x20008a39
 80038e8:	20008a44 	.word	0x20008a44
 80038ec:	20008a4c 	.word	0x20008a4c

080038f0 <calibProcessTask>:
  RunCalibrationStateMachine(): Encapsulates the calibration logic.
  Parameters can include pointers to LCD, motors, and any other state
  needed to update the calibration instructions.
-------------------------------------------------------------------*/

void calibProcessTask(void *pvParameters){
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af02      	add	r7, sp, #8
 80038f6:	6078      	str	r0, [r7, #4]

	for(;;){
		EventBits_t uxBits = xEventGroupWaitBits(calibEventGroup, CALIB_START_BIT | CALIB_STOP_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 80038f8:	4b24      	ldr	r3, [pc, #144]	@ (800398c <calibProcessTask+0x9c>)
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	2300      	movs	r3, #0
 8003904:	2201      	movs	r2, #1
 8003906:	2105      	movs	r1, #5
 8003908:	f00e ff1a 	bl	8012740 <xEventGroupWaitBits>
 800390c:	60f8      	str	r0, [r7, #12]
    if(uxBits & CALIB_STOP_BIT){
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b00      	cmp	r3, #0
 8003916:	d012      	beq.n	800393e <calibProcessTask+0x4e>
    	LCD_I2C_ClearAllLines(&hlcd3);
 8003918:	481d      	ldr	r0, [pc, #116]	@ (8003990 <calibProcessTask+0xa0>)
 800391a:	f7fd fca3 	bl	8001264 <LCD_I2C_ClearAllLines>
    	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 800391e:	2201      	movs	r2, #1
 8003920:	2100      	movs	r1, #0
 8003922:	481b      	ldr	r0, [pc, #108]	@ (8003990 <calibProcessTask+0xa0>)
 8003924:	f7fd fc72 	bl	800120c <LCD_I2C_SetCursor>
    	LCD_I2C_printStr(&hlcd3, "Stall Detected, Calibration Aborted!");
 8003928:	491a      	ldr	r1, [pc, #104]	@ (8003994 <calibProcessTask+0xa4>)
 800392a:	4819      	ldr	r0, [pc, #100]	@ (8003990 <calibProcessTask+0xa0>)
 800392c:	f7fd fc34 	bl	8001198 <LCD_I2C_printStr>
    	osDelay(3500);
 8003930:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8003934:	f00e fe0b 	bl	801254e <osDelay>
    	currentState = MENU_STATE_TESTING;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <calibProcessTask+0xa8>)
 800393a:	2207      	movs	r2, #7
 800393c:	701a      	strb	r2, [r3, #0]
    }
	if (uxBits & CALIB_START_BIT) {
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01d      	beq.n	8003984 <calibProcessTask+0x94>

     switch(g_calibSelection){
 8003948:	4b14      	ldr	r3, [pc, #80]	@ (800399c <calibProcessTask+0xac>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b01      	cmp	r3, #1
 8003950:	d002      	beq.n	8003958 <calibProcessTask+0x68>
 8003952:	2b02      	cmp	r3, #2
 8003954:	d00b      	beq.n	800396e <calibProcessTask+0x7e>
//                       // xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
//        //RunManualCalibrationStateMachine(&hlcd3, &motors);
//        currentState = MENU_STATE_TESTING; // TODO: Add Test Process
//        break;
        default:
        break;
 8003956:	e015      	b.n	8003984 <calibProcessTask+0x94>
        AutoCalibration(&axes,&motors); 
 8003958:	4911      	ldr	r1, [pc, #68]	@ (80039a0 <calibProcessTask+0xb0>)
 800395a:	4812      	ldr	r0, [pc, #72]	@ (80039a4 <calibProcessTask+0xb4>)
 800395c:	f000 fea4 	bl	80046a8 <AutoCalibration>
        xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <calibProcessTask+0x9c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f00e ffc4 	bl	80128f4 <xEventGroupSetBits>
        break;
 800396c:	e00a      	b.n	8003984 <calibProcessTask+0x94>
        	ManualCalibration(&axes,&motors);
 800396e:	490c      	ldr	r1, [pc, #48]	@ (80039a0 <calibProcessTask+0xb0>)
 8003970:	480c      	ldr	r0, [pc, #48]	@ (80039a4 <calibProcessTask+0xb4>)
 8003972:	f000 ff75 	bl	8004860 <ManualCalibration>
            xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003976:	4b05      	ldr	r3, [pc, #20]	@ (800398c <calibProcessTask+0x9c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f00e ffb9 	bl	80128f4 <xEventGroupSetBits>
        break;
 8003982:	bf00      	nop
    }
        // Short delay to let other tasks run.
     //xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);

       }
		vTaskDelay(pdMS_TO_TICKS(10));
 8003984:	200a      	movs	r0, #10
 8003986:	f010 f9f7 	bl	8013d78 <vTaskDelay>
	for(;;){
 800398a:	e7b5      	b.n	80038f8 <calibProcessTask+0x8>
 800398c:	20008a58 	.word	0x20008a58
 8003990:	20000018 	.word	0x20000018
 8003994:	080188b4 	.word	0x080188b4
 8003998:	20008a54 	.word	0x20008a54
 800399c:	20008a68 	.word	0x20008a68
 80039a0:	2000bf48 	.word	0x2000bf48
 80039a4:	2000c208 	.word	0x2000c208

080039a8 <motorControlTask>:
   }
}


void motorControlTask(void *argument) {
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08c      	sub	sp, #48	@ 0x30
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
		// Queue for motor cmds
	motorCommandQueue = xQueueCreate(256, sizeof(MotorCommand));
 80039b0:	2200      	movs	r2, #0
 80039b2:	2124      	movs	r1, #36	@ 0x24
 80039b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80039b8:	f00f f9f5 	bl	8012da6 <xQueueGenericCreate>
 80039bc:	4603      	mov	r3, r0
 80039be:	4a62      	ldr	r2, [pc, #392]	@ (8003b48 <motorControlTask+0x1a0>)
 80039c0:	6013      	str	r3, [r2, #0]
	configASSERT(motorCommandQueue != NULL);
 80039c2:	4b61      	ldr	r3, [pc, #388]	@ (8003b48 <motorControlTask+0x1a0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10d      	bne.n	80039e6 <motorControlTask+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ce:	b672      	cpsid	i
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	b662      	cpsie	i
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <motorControlTask+0x3a>

	MotorCommand cmd;

    for(;;) {
    // Wait for a command from the queue
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 80039e6:	4b58      	ldr	r3, [pc, #352]	@ (8003b48 <motorControlTask+0x1a0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f107 0108 	add.w	r1, r7, #8
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	4618      	mov	r0, r3
 80039f4:	f00f fc12 	bl	801321c <xQueueReceive>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	f040 809b 	bne.w	8003b36 <motorControlTask+0x18e>
    		switch (cmd.command){
 8003a00:	7a3b      	ldrb	r3, [r7, #8]
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	f200 8096 	bhi.w	8003b34 <motorControlTask+0x18c>
 8003a08:	a201      	add	r2, pc, #4	@ (adr r2, 8003a10 <motorControlTask+0x68>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a4f 	.word	0x08003a4f
 8003a14:	08003a73 	.word	0x08003a73
 8003a18:	08003a39 	.word	0x08003a39
 8003a1c:	08003a89 	.word	0x08003a89
 8003a20:	08003aa3 	.word	0x08003aa3
 8003a24:	08003abd 	.word	0x08003abd
 8003a28:	08003af1 	.word	0x08003af1
 8003a2c:	08003b0b 	.word	0x08003b0b
 8003a30:	08003ad7 	.word	0x08003ad7
 8003a34:	08003b25 	.word	0x08003b25

    		case	MOTOR_CMD_START: // Start the motor
    				TMC2209_Start(&motors[cmd.motorIndex]);
 8003a38:	7abb      	ldrb	r3, [r7, #10]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	23b0      	movs	r3, #176	@ 0xb0
 8003a3e:	fb02 f303 	mul.w	r3, r2, r3
 8003a42:	4a42      	ldr	r2, [pc, #264]	@ (8003b4c <motorControlTask+0x1a4>)
 8003a44:	4413      	add	r3, r2
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe fc26 	bl	8002298 <TMC2209_Start>
    				break;
 8003a4c:	e073      	b.n	8003b36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_MOVETO: // Move the motor to a target position
    				TMC2209_MoveTo(&axes[cmd.axisIndex], cmd.motorIndex, cmd.targetPositionMM);
 8003a4e:	7a7b      	ldrb	r3, [r7, #9]
 8003a50:	461a      	mov	r2, r3
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4a3d      	ldr	r2, [pc, #244]	@ (8003b50 <motorControlTask+0x1a8>)
 8003a5c:	4413      	add	r3, r2
 8003a5e:	7aba      	ldrb	r2, [r7, #10]
 8003a60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a64:	eeb0 0a67 	vmov.f32	s0, s15
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fe fc4e 	bl	800230c <TMC2209_MoveTo>
    				break;
 8003a70:	e061      	b.n	8003b36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_STOP:	// Stop the motor
    				TMC2209_Stop(&motors[cmd.motorIndex]);
 8003a72:	7abb      	ldrb	r3, [r7, #10]
 8003a74:	461a      	mov	r2, r3
 8003a76:	23b0      	movs	r3, #176	@ 0xb0
 8003a78:	fb02 f303 	mul.w	r3, r2, r3
 8003a7c:	4a33      	ldr	r2, [pc, #204]	@ (8003b4c <motorControlTask+0x1a4>)
 8003a7e:	4413      	add	r3, r2
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe fbf3 	bl	800226c <TMC2209_Stop>

    				break;
 8003a86:	e056      	b.n	8003b36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_DIRECTION:
    				TMC2209_SetDirection(&motors[cmd.motorIndex], cmd.direction);
 8003a88:	7abb      	ldrb	r3, [r7, #10]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	23b0      	movs	r3, #176	@ 0xb0
 8003a8e:	fb02 f303 	mul.w	r3, r2, r3
 8003a92:	4a2e      	ldr	r2, [pc, #184]	@ (8003b4c <motorControlTask+0x1a4>)
 8003a94:	4413      	add	r3, r2
 8003a96:	7c3a      	ldrb	r2, [r7, #16]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fb5a 	bl	8002154 <TMC2209_SetDirection>
    				break;
 8003aa0:	e049      	b.n	8003b36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_SETSPEED:
    				TMC2209_SetSpeed(&motors[cmd.motorIndex], cmd.speed);
 8003aa2:	7abb      	ldrb	r3, [r7, #10]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	23b0      	movs	r3, #176	@ 0xb0
 8003aa8:	fb02 f303 	mul.w	r3, r2, r3
 8003aac:	4a27      	ldr	r2, [pc, #156]	@ (8003b4c <motorControlTask+0x1a4>)
 8003aae:	4413      	add	r3, r2
 8003ab0:	8a7a      	ldrh	r2, [r7, #18]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fb76 	bl	80021a6 <TMC2209_SetSpeed>
    				break;
 8003aba:	e03c      	b.n	8003b36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_MSTEP:
    				TMC2209_setMicrosteppingResolution(&motors[cmd.motorIndex], cmd.mstep);
 8003abc:	7abb      	ldrb	r3, [r7, #10]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	23b0      	movs	r3, #176	@ 0xb0
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	4a21      	ldr	r2, [pc, #132]	@ (8003b4c <motorControlTask+0x1a4>)
 8003ac8:	4413      	add	r3, r2
 8003aca:	8aba      	ldrh	r2, [r7, #20]
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe ffb2 	bl	8002a38 <TMC2209_setMicrosteppingResolution>
    				break;
 8003ad4:	e02f      	b.n	8003b36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_CHOPPER:
    			    TMC2209_setSpreadCycle(&motors[cmd.motorIndex], cmd.chopper);
 8003ad6:	7abb      	ldrb	r3, [r7, #10]
 8003ad8:	461a      	mov	r2, r3
 8003ada:	23b0      	movs	r3, #176	@ 0xb0
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b4c <motorControlTask+0x1a4>)
 8003ae2:	4413      	add	r3, r2
 8003ae4:	7eba      	ldrb	r2, [r7, #26]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fe ff47 	bl	800297c <TMC2209_setSpreadCycle>
    			    break;
 8003aee:	e022      	b.n	8003b36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_CONFIG_SGTHRS:
    				TMC2209_enableStallDetection(&motors[cmd.motorIndex], cmd.sgthrs);
 8003af0:	7abb      	ldrb	r3, [r7, #10]
 8003af2:	461a      	mov	r2, r3
 8003af4:	23b0      	movs	r3, #176	@ 0xb0
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a14      	ldr	r2, [pc, #80]	@ (8003b4c <motorControlTask+0x1a4>)
 8003afc:	4413      	add	r3, r2
 8003afe:	7dba      	ldrb	r2, [r7, #22]
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff f8dc 	bl	8002cc0 <TMC2209_enableStallDetection>
    				break;
 8003b08:	e015      	b.n	8003b36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_COOLTHRS:
    				TMC2209_SetTCoolThrs(&motors[cmd.motorIndex], cmd.coolThrs);
 8003b0a:	7abb      	ldrb	r3, [r7, #10]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	23b0      	movs	r3, #176	@ 0xb0
 8003b10:	fb02 f303 	mul.w	r3, r2, r3
 8003b14:	4a0d      	ldr	r2, [pc, #52]	@ (8003b4c <motorControlTask+0x1a4>)
 8003b16:	4413      	add	r3, r2
 8003b18:	8b3a      	ldrh	r2, [r7, #24]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f8f9 	bl	8002d14 <TMC2209_SetTCoolThrs>
    				break;
 8003b22:	e008      	b.n	8003b36 <motorControlTask+0x18e>
       		case 	MOTOR_CMD_MOVE_ALL_MOTORS:
       		{
       			   // Move all motors on axis 0 concurrently.
       			TMC2209_MoveAllMotorsTo(&axes, cmd.targetPositionsAxis0);
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	3314      	adds	r3, #20
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4808      	ldr	r0, [pc, #32]	@ (8003b50 <motorControlTask+0x1a8>)
 8003b2e:	f7fe fc5b 	bl	80023e8 <TMC2209_MoveAllMotorsTo>

       			    break;
 8003b32:	e000      	b.n	8003b36 <motorControlTask+0x18e>
//    		case 	MOTOR_CMD_CHECK_CHOPPER:
//    		case	MOTOR_CMD_CHECK_SGTHRS:
//    		case 	MOTOR_CMD_CHECK_COOLTHRS:
//    				break;
    		default: // unkown command
    				break;
 8003b34:	bf00      	nop
    		}
    	}



    	taskYIELD();
 8003b36:	4b07      	ldr	r3, [pc, #28]	@ (8003b54 <motorControlTask+0x1ac>)
 8003b38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	f3bf 8f6f 	isb	sy
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8003b46:	e74e      	b.n	80039e6 <motorControlTask+0x3e>
 8003b48:	20008a50 	.word	0x20008a50
 8003b4c:	2000bf48 	.word	0x2000bf48
 8003b50:	2000c208 	.word	0x2000c208
 8003b54:	e000ed04 	.word	0xe000ed04

08003b58 <stallMonitorTask>:

/*
 * Stall Monitor Task
 * This task will check the diag pin of each motor and send a stop command for the motor that stalled.
 */
void stallMonitorTask(void *argument) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	@ 0x38
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	MotorCommand stallCmd;
    for(;;) {
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003b60:	2300      	movs	r3, #0
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b64:	e050      	b.n	8003c08 <stallMonitorTask+0xb0>
        	motors[i].STALL = HAL_GPIO_ReadPin(motors[i].driver.diag_port, motors[i].driver.diag_pin);
 8003b66:	4a2c      	ldr	r2, [pc, #176]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b6a:	21b0      	movs	r1, #176	@ 0xb0
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	4413      	add	r3, r2
 8003b72:	3354      	adds	r3, #84	@ 0x54
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4928      	ldr	r1, [pc, #160]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b7a:	20b0      	movs	r0, #176	@ 0xb0
 8003b7c:	fb00 f303 	mul.w	r3, r0, r3
 8003b80:	440b      	add	r3, r1
 8003b82:	3358      	adds	r3, #88	@ 0x58
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f004 f92b 	bl	8007de4 <HAL_GPIO_ReadPin>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	4a21      	ldr	r2, [pc, #132]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	21b0      	movs	r1, #176	@ 0xb0
 8003b98:	fb01 f303 	mul.w	r3, r1, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	33ac      	adds	r3, #172	@ 0xac
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	701a      	strb	r2, [r3, #0]

            if(motors[i].STALL == GPIO_PIN_SET) {  // Stall detecte
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	21b0      	movs	r1, #176	@ 0xb0
 8003baa:	fb01 f303 	mul.w	r3, r1, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	33ac      	adds	r3, #172	@ 0xac
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d124      	bne.n	8003c02 <stallMonitorTask+0xaa>

                xEventGroupSetBits(testingEvent, TEST_STOP_BIT); // Abort Testing task
 8003bb8:	4b18      	ldr	r3, [pc, #96]	@ (8003c1c <stallMonitorTask+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00e fe98 	bl	80128f4 <xEventGroupSetBits>
                TMC2209_Stop(&motors[i]); // Stop stalled motor first -- We don't send a command through the motor task here since we need to not queue and execute as soon as possible
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc6:	22b0      	movs	r2, #176	@ 0xb0
 8003bc8:	fb02 f303 	mul.w	r3, r2, r3
 8003bcc:	4a12      	ldr	r2, [pc, #72]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003bce:	4413      	add	r3, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fe fb4b 	bl	800226c <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bda:	e00f      	b.n	8003bfc <stallMonitorTask+0xa4>
                   if(j != i) TMC2209_Stop(&motors[j]);
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d008      	beq.n	8003bf6 <stallMonitorTask+0x9e>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	22b0      	movs	r2, #176	@ 0xb0
 8003be8:	fb02 f303 	mul.w	r3, r2, r3
 8003bec:	4a0a      	ldr	r2, [pc, #40]	@ (8003c18 <stallMonitorTask+0xc0>)
 8003bee:	4413      	add	r3, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f7fe fb3b 	bl	800226c <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	ddec      	ble.n	8003bdc <stallMonitorTask+0x84>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c04:	3301      	adds	r3, #1
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	2b03      	cmp	r3, #3
 8003c0c:	ddab      	ble.n	8003b66 <stallMonitorTask+0xe>

                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(STALL_CHECK_INTERVAL_MS));
 8003c0e:	2032      	movs	r0, #50	@ 0x32
 8003c10:	f010 f8b2 	bl	8013d78 <vTaskDelay>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003c14:	e7a4      	b.n	8003b60 <stallMonitorTask+0x8>
 8003c16:	bf00      	nop
 8003c18:	2000bf48 	.word	0x2000bf48
 8003c1c:	20008a5c 	.word	0x20008a5c

08003c20 <vMainMenuTask>:
 * FreeRTOS task to handle the main menu.
 * This task will display the menu, wait for a selection,
 * and then call the handler for that selection.
 */
void vMainMenuTask(void *pvParameters)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	@ 0x28
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
    currentState = MENU_STATE_WELCOME;
 8003c28:	4b6a      	ldr	r3, [pc, #424]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
    for (;;) {

        switch (currentState) {
 8003c2e:	4b69      	ldr	r3, [pc, #420]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b07      	cmp	r3, #7
 8003c34:	f200 80c3 	bhi.w	8003dbe <vMainMenuTask+0x19e>
 8003c38:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <vMainMenuTask+0x20>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003cab 	.word	0x08003cab
 8003c48:	08003ceb 	.word	0x08003ceb
 8003c4c:	08003d0d 	.word	0x08003d0d
 8003c50:	08003dbf 	.word	0x08003dbf
 8003c54:	08003dbf 	.word	0x08003dbf
 8003c58:	08003d6d 	.word	0x08003d6d
 8003c5c:	08003d97 	.word	0x08003d97
        	case MENU_STATE_WELCOME:
        	{
        		LCD_I2C_DisplaySequentialGlossyText(&hlcd3, 2);
 8003c60:	2102      	movs	r1, #2
 8003c62:	485d      	ldr	r0, [pc, #372]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003c64:	f7fd fb44 	bl	80012f0 <LCD_I2C_DisplaySequentialGlossyText>
        		osDelay(500);
 8003c68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c6c:	f00e fc6f 	bl	801254e <osDelay>
        		LCD_I2C_ClearAllLines(&hlcd3);
 8003c70:	4859      	ldr	r0, [pc, #356]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003c72:	f7fd faf7 	bl	8001264 <LCD_I2C_ClearAllLines>
        		LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003c76:	2201      	movs	r2, #1
 8003c78:	2100      	movs	r1, #0
 8003c7a:	4857      	ldr	r0, [pc, #348]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003c7c:	f7fd fac6 	bl	800120c <LCD_I2C_SetCursor>
        		LCD_I2C_printStr(&hlcd3, "Setting up machine, please wait...");
 8003c80:	4956      	ldr	r1, [pc, #344]	@ (8003ddc <vMainMenuTask+0x1bc>)
 8003c82:	4855      	ldr	r0, [pc, #340]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003c84:	f7fd fa88 	bl	8001198 <LCD_I2C_printStr>
        		initializeSystem();
 8003c88:	f7ff fc54 	bl	8003534 <initializeSystem>
                // Wait here until the initialization semaphore is given.
                if (xSemaphoreTake(xInitSemaphore, portMAX_DELAY) == pdTRUE) {
 8003c8c:	4b54      	ldr	r3, [pc, #336]	@ (8003de0 <vMainMenuTask+0x1c0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f04f 31ff 	mov.w	r1, #4294967295
 8003c94:	4618      	mov	r0, r3
 8003c96:	f00f fba9 	bl	80133ec <xQueueSemaphoreTake>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	f040 8092 	bne.w	8003dc6 <vMainMenuTask+0x1a6>
                    currentState = MENU_STATE_MAIN;
 8003ca2:	4b4c      	ldr	r3, [pc, #304]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
                }
        }
        	break;
 8003ca8:	e08d      	b.n	8003dc6 <vMainMenuTask+0x1a6>

            case MENU_STATE_MAIN:
                {
                    // Display main menu and get selection.
                	const char* menuItems[] = {"Test from SD", "Prepare Machine"};
 8003caa:	4a4e      	ldr	r2, [pc, #312]	@ (8003de4 <vMainMenuTask+0x1c4>)
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cb4:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t mainSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1, menuItems,2, 0);
 8003cb8:	f107 0214 	add.w	r2, r7, #20
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	4949      	ldr	r1, [pc, #292]	@ (8003de8 <vMainMenuTask+0x1c8>)
 8003cc4:	4844      	ldr	r0, [pc, #272]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003cc6:	f7fd fb65 	bl	8001394 <LCD_I2C_menuTemplate>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	77bb      	strb	r3, [r7, #30]
                    if (mainSelection == 0) {
 8003cce:	7fbb      	ldrb	r3, [r7, #30]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <vMainMenuTask+0xbc>
                        currentState = MENU_STATE_SD_TEST;
 8003cd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	701a      	strb	r2, [r3, #0]
                    } else if (mainSelection == 1) {
                        currentState = MENU_STATE_PREPARE_MACHINE;
                    } 
                }
                break;
 8003cda:	e076      	b.n	8003dca <vMainMenuTask+0x1aa>
                    } else if (mainSelection == 1) {
 8003cdc:	7fbb      	ldrb	r3, [r7, #30]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d173      	bne.n	8003dca <vMainMenuTask+0x1aa>
                        currentState = MENU_STATE_PREPARE_MACHINE;
 8003ce2:	4b3c      	ldr	r3, [pc, #240]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003ce4:	2206      	movs	r2, #6
 8003ce6:	701a      	strb	r2, [r3, #0]
                break;
 8003ce8:	e06f      	b.n	8003dca <vMainMenuTask+0x1aa>

            case MENU_STATE_SD_TEST:
                {
                    // Display SD card test menu or process SD card files.
                	  LCD_I2C_Clear(&hlcd3);
 8003cea:	483b      	ldr	r0, [pc, #236]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003cec:	f7fd faae 	bl	800124c <LCD_I2C_Clear>
                	  LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4838      	ldr	r0, [pc, #224]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003cf6:	f7fd fa89 	bl	800120c <LCD_I2C_SetCursor>
                	  LCD_I2C_printStr(&hlcd3, "Performing Tests");
 8003cfa:	493c      	ldr	r1, [pc, #240]	@ (8003dec <vMainMenuTask+0x1cc>)
 8003cfc:	4836      	ldr	r0, [pc, #216]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003cfe:	f7fd fa4b 	bl	8001198 <LCD_I2C_printStr>
                      LCD_I2C_DisplaySDMenu(&hlcd3, &henc1);
 8003d02:	4939      	ldr	r1, [pc, #228]	@ (8003de8 <vMainMenuTask+0x1c8>)
 8003d04:	4834      	ldr	r0, [pc, #208]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003d06:	f7fd fd7f 	bl	8001808 <LCD_I2C_DisplaySDMenu>



                        //currentState = MENU_STATE_MAIN;
                }
                break;
 8003d0a:	e05f      	b.n	8003dcc <vMainMenuTask+0x1ac>

            case MENU_STATE_CALIBRATION:
                {
                    const char* calibMenuItems[] = {"Auto Calibartion", "Manual Calibration" };
 8003d0c:	4a38      	ldr	r2, [pc, #224]	@ (8003df0 <vMainMenuTask+0x1d0>)
 8003d0e:	f107 030c 	add.w	r3, r7, #12
 8003d12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d16:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t calibSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1,calibMenuItems,2, 1);
 8003d1a:	f107 020c 	add.w	r2, r7, #12
 8003d1e:	2301      	movs	r3, #1
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	2302      	movs	r3, #2
 8003d24:	4930      	ldr	r1, [pc, #192]	@ (8003de8 <vMainMenuTask+0x1c8>)
 8003d26:	482c      	ldr	r0, [pc, #176]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003d28:	f7fd fb34 	bl	8001394 <LCD_I2C_menuTemplate>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	77fb      	strb	r3, [r7, #31]
                        if(calibSelection == 0){
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <vMainMenuTask+0x11e>
                            currentState = MENU_STATE_MAIN;
 8003d36:	4b27      	ldr	r3, [pc, #156]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]

                         //Calibration is complete. Return to the main menu or update as needed.
                        currentState = MENU_STATE_TESTING;
                        }
                }
                break;
 8003d3c:	e046      	b.n	8003dcc <vMainMenuTask+0x1ac>
                    	g_calibSelection = calibSelection;
 8003d3e:	4a2d      	ldr	r2, [pc, #180]	@ (8003df4 <vMainMenuTask+0x1d4>)
 8003d40:	7ffb      	ldrb	r3, [r7, #31]
 8003d42:	7013      	strb	r3, [r2, #0]
                    	xEventGroupSetBits(calibEventGroup, CALIB_START_BIT);
 8003d44:	4b2c      	ldr	r3, [pc, #176]	@ (8003df8 <vMainMenuTask+0x1d8>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2101      	movs	r1, #1
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f00e fdd2 	bl	80128f4 <xEventGroupSetBits>
                    	xEventGroupWaitBits(calibEventGroup, CALIB_COMPLETE_BIT,
 8003d50:	4b29      	ldr	r3, [pc, #164]	@ (8003df8 <vMainMenuTask+0x1d8>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	2102      	movs	r1, #2
 8003d60:	f00e fcee 	bl	8012740 <xEventGroupWaitBits>
                        currentState = MENU_STATE_TESTING;
 8003d64:	4b1b      	ldr	r3, [pc, #108]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003d66:	2207      	movs	r2, #7
 8003d68:	701a      	strb	r2, [r3, #0]
                break;
 8003d6a:	e02f      	b.n	8003dcc <vMainMenuTask+0x1ac>


            case MENU_STATE_PREPARE_MACHINE:
                {
                	LCD_I2C_ClearAllLines(&hlcd3);
 8003d6c:	481a      	ldr	r0, [pc, #104]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003d6e:	f7fd fa79 	bl	8001264 <LCD_I2C_ClearAllLines>
                	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2100      	movs	r1, #0
 8003d76:	4818      	ldr	r0, [pc, #96]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003d78:	f7fd fa48 	bl	800120c <LCD_I2C_SetCursor>
                    LCD_I2C_printStr(&hlcd3, "Preparing...");
 8003d7c:	491f      	ldr	r1, [pc, #124]	@ (8003dfc <vMainMenuTask+0x1dc>)
 8003d7e:	4816      	ldr	r0, [pc, #88]	@ (8003dd8 <vMainMenuTask+0x1b8>)
 8003d80:	f7fd fa0a 	bl	8001198 <LCD_I2C_printStr>
                    if(MotorsHoming(&motors) == 1){
 8003d84:	481e      	ldr	r0, [pc, #120]	@ (8003e00 <vMainMenuTask+0x1e0>)
 8003d86:	f000 fae5 	bl	8004354 <MotorsHoming>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <vMainMenuTask+0x176>

                       currentState = MENU_STATE_MAIN;
 8003d90:	4b10      	ldr	r3, [pc, #64]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	701a      	strb	r2, [r3, #0]

                 }
            case MENU_STATE_TESTING:
            {
            	// TDOD: MENU FOR TESTING -- SHOW PROGRESS OF TESTING
            	xEventGroupSetBits(testingEvent, TEST_START_BIT); // Start Testing task
 8003d96:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <vMainMenuTask+0x1e4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f00e fda9 	bl	80128f4 <xEventGroupSetBits>
            	xEventGroupWaitBits(testingEvent, TEST_COMPLETE_BIT, pdTRUE, pdFALSE, portMAX_DELAY); // Test Finished.
 8003da2:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <vMainMenuTask+0x1e4>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	2201      	movs	r2, #1
 8003db0:	2104      	movs	r1, #4
 8003db2:	f00e fcc5 	bl	8012740 <xEventGroupWaitBits>
            	currentState = MENU_STATE_MAIN;
 8003db6:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
            }
                break;
 8003dbc:	e006      	b.n	8003dcc <vMainMenuTask+0x1ac>
            default:
                currentState = MENU_STATE_MAIN;
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <vMainMenuTask+0x1b4>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
                break;
 8003dc4:	e002      	b.n	8003dcc <vMainMenuTask+0x1ac>
        	break;
 8003dc6:	bf00      	nop
 8003dc8:	e000      	b.n	8003dcc <vMainMenuTask+0x1ac>
                break;
 8003dca:	bf00      	nop
        }

        osDelay(1);  // Allow other tasks to run
 8003dcc:	2001      	movs	r0, #1
 8003dce:	f00e fbbe 	bl	801254e <osDelay>
        switch (currentState) {
 8003dd2:	e72c      	b.n	8003c2e <vMainMenuTask+0xe>
 8003dd4:	20008a54 	.word	0x20008a54
 8003dd8:	20000018 	.word	0x20000018
 8003ddc:	080188dc 	.word	0x080188dc
 8003de0:	20008a64 	.word	0x20008a64
 8003de4:	08018944 	.word	0x08018944
 8003de8:	20000000 	.word	0x20000000
 8003dec:	08018900 	.word	0x08018900
 8003df0:	08018974 	.word	0x08018974
 8003df4:	20008a68 	.word	0x20008a68
 8003df8:	20008a58 	.word	0x20008a58
 8003dfc:	08018914 	.word	0x08018914
 8003e00:	2000bf48 	.word	0x2000bf48
 8003e04:	20008a5c 	.word	0x20008a5c

08003e08 <vTestingTask>:
    }
}

void vTestingTask(void *arugment){
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	6078      	str	r0, [r7, #4]
	for(;;){

		EventBits_t testingBits = xEventGroupWaitBits(testingEvent, TEST_START_BIT | TEST_STOP_BIT,
 8003e10:	4b18      	ldr	r3, [pc, #96]	@ (8003e74 <vTestingTask+0x6c>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2103      	movs	r1, #3
 8003e20:	f00e fc8e 	bl	8012740 <xEventGroupWaitBits>
 8003e24:	60f8      	str	r0, [r7, #12]
		                                                   pdTRUE, pdFALSE, portMAX_DELAY); // Trigger testing
		if(testingBits & TEST_STOP_BIT){ // Stall detected during test
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d010      	beq.n	8003e52 <vTestingTask+0x4a>
	    	LCD_I2C_ClearAllLines(&hlcd3);
 8003e30:	4811      	ldr	r0, [pc, #68]	@ (8003e78 <vTestingTask+0x70>)
 8003e32:	f7fd fa17 	bl	8001264 <LCD_I2C_ClearAllLines>
	    	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003e36:	2201      	movs	r2, #1
 8003e38:	2100      	movs	r1, #0
 8003e3a:	480f      	ldr	r0, [pc, #60]	@ (8003e78 <vTestingTask+0x70>)
 8003e3c:	f7fd f9e6 	bl	800120c <LCD_I2C_SetCursor>
	    	LCD_I2C_printStr(&hlcd3, "Stall Detected, Test Aborted!");
 8003e40:	490e      	ldr	r1, [pc, #56]	@ (8003e7c <vTestingTask+0x74>)
 8003e42:	480d      	ldr	r0, [pc, #52]	@ (8003e78 <vTestingTask+0x70>)
 8003e44:	f7fd f9a8 	bl	8001198 <LCD_I2C_printStr>
	    	osDelay(500);
 8003e48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e4c:	f00e fb7f 	bl	801254e <osDelay>
			continue;	// Abort test
 8003e50:	e00f      	b.n	8003e72 <vTestingTask+0x6a>
		}
		if (testingBits & TEST_START_BIT) { // Start Test
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <vTestingTask+0x64>

		preformTest();
 8003e5c:	f000 f810 	bl	8003e80 <preformTest>
		xEventGroupSetBits(testingEvent, TEST_COMPLETE_BIT);
 8003e60:	4b04      	ldr	r3, [pc, #16]	@ (8003e74 <vTestingTask+0x6c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2104      	movs	r1, #4
 8003e66:	4618      	mov	r0, r3
 8003e68:	f00e fd44 	bl	80128f4 <xEventGroupSetBits>
       // xEventGroupClearBits(testingEvent, TEST_STOP_BIT); // clear bit incase we want to restart test

		}

		vTaskDelay(pdMS_TO_TICKS(10));
 8003e6c:	200a      	movs	r0, #10
 8003e6e:	f00f ff83 	bl	8013d78 <vTaskDelay>
	for(;;){
 8003e72:	e7cd      	b.n	8003e10 <vTestingTask+0x8>
 8003e74:	20008a5c 	.word	0x20008a5c
 8003e78:	20000018 	.word	0x20000018
 8003e7c:	0801897c 	.word	0x0801897c

08003e80 <preformTest>:
}



//// FUNCTIONS //////
void preformTest(){
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b08c      	sub	sp, #48	@ 0x30
 8003e84:	af00      	add	r7, sp, #0

	MotorCommand testingCMD;
	uint16_t j = 0;
 8003e86:	2300      	movs	r3, #0
 8003e88:	84fb      	strh	r3, [r7, #38]	@ 0x26
	LCD_I2C_ClearAllLines(&hlcd3);
 8003e8a:	4850      	ldr	r0, [pc, #320]	@ (8003fcc <preformTest+0x14c>)
 8003e8c:	f7fd f9ea 	bl	8001264 <LCD_I2C_ClearAllLines>
	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003e90:	2201      	movs	r2, #1
 8003e92:	2100      	movs	r1, #0
 8003e94:	484d      	ldr	r0, [pc, #308]	@ (8003fcc <preformTest+0x14c>)
 8003e96:	f7fd f9b9 	bl	800120c <LCD_I2C_SetCursor>
	LCD_I2C_printStr(&hlcd3, "Testing Started!");
 8003e9a:	494d      	ldr	r1, [pc, #308]	@ (8003fd0 <preformTest+0x150>)
 8003e9c:	484b      	ldr	r0, [pc, #300]	@ (8003fcc <preformTest+0x14c>)
 8003e9e:	f7fd f97b 	bl	8001198 <LCD_I2C_printStr>

	for(int l = 0; l< MAX_MOTORS; l++){ // Set testing speed for all motors
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ea6:	e012      	b.n	8003ece <preformTest+0x4e>
		testingCMD.command = MOTOR_CMD_SETSPEED;
 8003ea8:	2304      	movs	r3, #4
 8003eaa:	703b      	strb	r3, [r7, #0]
		testingCMD.motorIndex = l;
 8003eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	70bb      	strb	r3, [r7, #2]
		testingCMD.speed = 80000;
 8003eb2:	f44f 5362 	mov.w	r3, #14464	@ 0x3880
 8003eb6:	817b      	strh	r3, [r7, #10]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003eb8:	4b46      	ldr	r3, [pc, #280]	@ (8003fd4 <preformTest+0x154>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4639      	mov	r1, r7
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	f00f f808 	bl	8012ed8 <xQueueGenericSend>
	for(int l = 0; l< MAX_MOTORS; l++){ // Set testing speed for all motors
 8003ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eca:	3301      	adds	r3, #1
 8003ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	dde9      	ble.n	8003ea8 <preformTest+0x28>
	}
	osDelay(1000);
 8003ed4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003ed8:	f00e fb39 	bl	801254e <osDelay>
	for(int i = 0; i < commandsGcode; i++){
 8003edc:	2300      	movs	r3, #0
 8003ede:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ee0:	e050      	b.n	8003f84 <preformTest+0x104>
		if(i % 2 == 0){
 8003ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10d      	bne.n	8003f08 <preformTest+0x88>
			testingCMD.targetPositionsAxis0[2] = coordinates[i].x;
 8003eec:	4a3a      	ldr	r2, [pc, #232]	@ (8003fd8 <preformTest+0x158>)
 8003eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef0:	015b      	lsls	r3, r3, #5
 8003ef2:	4413      	add	r3, r2
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	61fb      	str	r3, [r7, #28]
			testingCMD.targetPositionsAxis0[0] = coordinates[i].y;
 8003ef8:	4a37      	ldr	r2, [pc, #220]	@ (8003fd8 <preformTest+0x158>)
 8003efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efc:	015b      	lsls	r3, r3, #5
 8003efe:	4413      	add	r3, r2
 8003f00:	3304      	adds	r3, #4
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e00c      	b.n	8003f22 <preformTest+0xa2>
		}
		else{
			testingCMD.targetPositionsAxis0[3] = coordinates[i].x;
 8003f08:	4a33      	ldr	r2, [pc, #204]	@ (8003fd8 <preformTest+0x158>)
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	015b      	lsls	r3, r3, #5
 8003f0e:	4413      	add	r3, r2
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	623b      	str	r3, [r7, #32]
			testingCMD.targetPositionsAxis0[1] = coordinates[i].y;
 8003f14:	4a30      	ldr	r2, [pc, #192]	@ (8003fd8 <preformTest+0x158>)
 8003f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f18:	015b      	lsls	r3, r3, #5
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	61bb      	str	r3, [r7, #24]
		}
		if(i >= 1 && (i+1)%2 == 0){
 8003f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	dd2a      	ble.n	8003f7e <preformTest+0xfe>
 8003f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d124      	bne.n	8003f7e <preformTest+0xfe>
		testingCMD.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8003f34:	2309      	movs	r3, #9
 8003f36:	703b      	strb	r3, [r7, #0]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003f38:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <preformTest+0x154>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	f00e ffc8 	bl	8012ed8 <xQueueGenericSend>
		 coordinates[i].testResult = CheckConnection(&hservo1,&hservo2);
 8003f48:	4924      	ldr	r1, [pc, #144]	@ (8003fdc <preformTest+0x15c>)
 8003f4a:	4825      	ldr	r0, [pc, #148]	@ (8003fe0 <preformTest+0x160>)
 8003f4c:	f7ff fb62 	bl	8003614 <CheckConnection>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4619      	mov	r1, r3
 8003f54:	4a20      	ldr	r2, [pc, #128]	@ (8003fd8 <preformTest+0x158>)
 8003f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f58:	015b      	lsls	r3, r3, #5
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	460a      	mov	r2, r1
 8003f60:	701a      	strb	r2, [r3, #0]
		 coordinates[i-1].testResult = coordinates[i].testResult;
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	491c      	ldr	r1, [pc, #112]	@ (8003fd8 <preformTest+0x158>)
 8003f68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f6a:	0152      	lsls	r2, r2, #5
 8003f6c:	440a      	add	r2, r1
 8003f6e:	3208      	adds	r2, #8
 8003f70:	7811      	ldrb	r1, [r2, #0]
 8003f72:	4a19      	ldr	r2, [pc, #100]	@ (8003fd8 <preformTest+0x158>)
 8003f74:	015b      	lsls	r3, r3, #5
 8003f76:	4413      	add	r3, r2
 8003f78:	3308      	adds	r3, #8
 8003f7a:	460a      	mov	r2, r1
 8003f7c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < commandsGcode; i++){
 8003f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f80:	3301      	adds	r3, #1
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f86:	4b17      	ldr	r3, [pc, #92]	@ (8003fe4 <preformTest+0x164>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d3a9      	bcc.n	8003ee2 <preformTest+0x62>
		}
	}
    LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003f8e:	2201      	movs	r2, #1
 8003f90:	2100      	movs	r1, #0
 8003f92:	480e      	ldr	r0, [pc, #56]	@ (8003fcc <preformTest+0x14c>)
 8003f94:	f7fd f93a 	bl	800120c <LCD_I2C_SetCursor>
    LCD_I2C_printStr(&hlcd3, "Testing Done!");
 8003f98:	4913      	ldr	r1, [pc, #76]	@ (8003fe8 <preformTest+0x168>)
 8003f9a:	480c      	ldr	r0, [pc, #48]	@ (8003fcc <preformTest+0x14c>)
 8003f9c:	f7fd f8fc 	bl	8001198 <LCD_I2C_printStr>
	generate_report(&hlcd3);
 8003fa0:	480a      	ldr	r0, [pc, #40]	@ (8003fcc <preformTest+0x14c>)
 8003fa2:	f7fd ff13 	bl	8001dcc <generate_report>

	LCD_I2C_ClearAllLines(&hlcd3);
 8003fa6:	4809      	ldr	r0, [pc, #36]	@ (8003fcc <preformTest+0x14c>)
 8003fa8:	f7fd f95c 	bl	8001264 <LCD_I2C_ClearAllLines>
    LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003fac:	2201      	movs	r2, #1
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4806      	ldr	r0, [pc, #24]	@ (8003fcc <preformTest+0x14c>)
 8003fb2:	f7fd f92b 	bl	800120c <LCD_I2C_SetCursor>
    LCD_I2C_printStr(&hlcd3, "File Generated");
 8003fb6:	490d      	ldr	r1, [pc, #52]	@ (8003fec <preformTest+0x16c>)
 8003fb8:	4804      	ldr	r0, [pc, #16]	@ (8003fcc <preformTest+0x14c>)
 8003fba:	f7fd f8ed 	bl	8001198 <LCD_I2C_printStr>


	MotorsHoming(&motors);
 8003fbe:	480c      	ldr	r0, [pc, #48]	@ (8003ff0 <preformTest+0x170>)
 8003fc0:	f000 f9c8 	bl	8004354 <MotorsHoming>

		//osDelay(2000);

}
 8003fc4:	bf00      	nop
 8003fc6:	3730      	adds	r7, #48	@ 0x30
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	20000018 	.word	0x20000018
 8003fd0:	0801899c 	.word	0x0801899c
 8003fd4:	20008a50 	.word	0x20008a50
 8003fd8:	20008a74 	.word	0x20008a74
 8003fdc:	20000040 	.word	0x20000040
 8003fe0:	2000002c 	.word	0x2000002c
 8003fe4:	2000aff4 	.word	0x2000aff4
 8003fe8:	080189b0 	.word	0x080189b0
 8003fec:	080189c0 	.word	0x080189c0
 8003ff0:	2000bf48 	.word	0x2000bf48

08003ff4 <ProcessGcode>:


void ProcessGcode(Axis *axisGroup[], const char *gcodeArray[][MAX_LINE_LENGTH], size_t gcodeCount) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b092      	sub	sp, #72	@ 0x48
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]

    // Variables to hold PCB dimensions
	uint16_t netTestCount = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	86fb      	strh	r3, [r7, #54]	@ 0x36
	    int inNetBlock = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
	    size_t currentNetIndex = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    for(size_t i = 0; i < gcodeCount; i++) {
 800400c:	2300      	movs	r3, #0
 800400e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004010:	e12b      	b.n	800426a <ProcessGcode+0x276>
	            const char *line = gcodeArray[i];
 8004012:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	4413      	add	r3, r2
 800401a:	62bb      	str	r3, [r7, #40]	@ 0x28
	        // Check for a net definition line.



        if (line[0] == ';') {
 800401c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b3b      	cmp	r3, #59	@ 0x3b
 8004022:	d167      	bne.n	80040f4 <ProcessGcode+0x100>
            if (strncmp(line, "; G54", 5) == 0) { // G54: actual PCB dimensions. Format G54 X.. Y..
 8004024:	2205      	movs	r2, #5
 8004026:	4994      	ldr	r1, [pc, #592]	@ (8004278 <ProcessGcode+0x284>)
 8004028:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800402a:	f012 fa0a 	bl	8016442 <strncmp>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d12c      	bne.n	800408e <ProcessGcode+0x9a>

                const char *ptr = strchr(line, 'X');
 8004034:	2158      	movs	r1, #88	@ 0x58
 8004036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004038:	f012 f9e5 	bl	8016406 <strchr>
 800403c:	6178      	str	r0, [r7, #20]


                if (ptr) {
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <ProcessGcode+0x6c>
                    pcbWidth = (float)atof(ptr + 1);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	4618      	mov	r0, r3
 800404a:	f011 fa6f 	bl	801552c <atof>
 800404e:	ec53 2b10 	vmov	r2, r3, d0
 8004052:	4610      	mov	r0, r2
 8004054:	4619      	mov	r1, r3
 8004056:	f7fc fda9 	bl	8000bac <__aeabi_d2f>
 800405a:	4603      	mov	r3, r0
 800405c:	4a87      	ldr	r2, [pc, #540]	@ (800427c <ProcessGcode+0x288>)
 800405e:	6013      	str	r3, [r2, #0]
                }

                ptr = strchr(line, 'Y');
 8004060:	2159      	movs	r1, #89	@ 0x59
 8004062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004064:	f012 f9cf 	bl	8016406 <strchr>
 8004068:	6178      	str	r0, [r7, #20]
                if (ptr) {
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 814d 	beq.w	800430c <ProcessGcode+0x318>
                    pcbHeight = (float)atof(ptr + 1);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	3301      	adds	r3, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f011 fa58 	bl	801552c <atof>
 800407c:	ec53 2b10 	vmov	r2, r3, d0
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	f7fc fd92 	bl	8000bac <__aeabi_d2f>
 8004088:	4603      	mov	r3, r0
 800408a:	4a7d      	ldr	r2, [pc, #500]	@ (8004280 <ProcessGcode+0x28c>)
 800408c:	6013      	str	r3, [r2, #0]
                else{
                	return;
                }
            }

        if (strncmp(line, "; Net:", 6) == 0) {
 800408e:	2206      	movs	r2, #6
 8004090:	497c      	ldr	r1, [pc, #496]	@ (8004284 <ProcessGcode+0x290>)
 8004092:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004094:	f012 f9d5 	bl	8016442 <strncmp>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 80e1 	bne.w	8004262 <ProcessGcode+0x26e>

        	const char *netName = strchr(line, 'Net-(');
 80040a0:	4979      	ldr	r1, [pc, #484]	@ (8004288 <ProcessGcode+0x294>)
 80040a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040a4:	f012 f9af 	bl	8016406 <strchr>
 80040a8:	6138      	str	r0, [r7, #16]

        		if(netName != NULL){
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 80d8 	beq.w	8004262 <ProcessGcode+0x26e>
              	  //netName = strlen(line);
              	  size_t len = strcspn(netName,"\r\n");
 80040b2:	4976      	ldr	r1, [pc, #472]	@ (800428c <ProcessGcode+0x298>)
 80040b4:	6938      	ldr	r0, [r7, #16]
 80040b6:	f012 f9b3 	bl	8016420 <strcspn>
 80040ba:	6438      	str	r0, [r7, #64]	@ 0x40
              	  if( len >= 20){
 80040bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040be:	2b13      	cmp	r3, #19
 80040c0:	d901      	bls.n	80040c6 <ProcessGcode+0xd2>
              		  len = 20-1;
 80040c2:	2313      	movs	r3, #19
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
              	  }
        			strncpy(coordinates[commandsGcode].netName, netName, len);
 80040c6:	4b72      	ldr	r3, [pc, #456]	@ (8004290 <ProcessGcode+0x29c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	015b      	lsls	r3, r3, #5
 80040cc:	3308      	adds	r3, #8
 80040ce:	4a71      	ldr	r2, [pc, #452]	@ (8004294 <ProcessGcode+0x2a0>)
 80040d0:	4413      	add	r3, r2
 80040d2:	3301      	adds	r3, #1
 80040d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040d6:	6939      	ldr	r1, [r7, #16]
 80040d8:	4618      	mov	r0, r3
 80040da:	f012 f9c4 	bl	8016466 <strncpy>
        			coordinates[commandsGcode].netName[len] ='\0';
 80040de:	4b6c      	ldr	r3, [pc, #432]	@ (8004290 <ProcessGcode+0x29c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a6c      	ldr	r2, [pc, #432]	@ (8004294 <ProcessGcode+0x2a0>)
 80040e4:	015b      	lsls	r3, r3, #5
 80040e6:	441a      	add	r2, r3
 80040e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040ea:	4413      	add	r3, r2
 80040ec:	3309      	adds	r3, #9
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
        		}
        	}

        continue;
 80040f2:	e0b6      	b.n	8004262 <ProcessGcode+0x26e>

        }

        if (strncmp(line, "G0", 2) == 0) { // G0: move command
 80040f4:	2202      	movs	r2, #2
 80040f6:	4968      	ldr	r1, [pc, #416]	@ (8004298 <ProcessGcode+0x2a4>)
 80040f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040fa:	f012 f9a2 	bl	8016442 <strncmp>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f040 8093 	bne.w	800422c <ProcessGcode+0x238>
            float xTarget = 0.0f, yTarget = 0.0f, zTarget = 0.0f;
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t probe = (strstr(line, "P1") != NULL) ? 1 : ((strstr(line, "P2") != NULL) ? 2 : 0); // P1 or P2
 8004118:	4960      	ldr	r1, [pc, #384]	@ (800429c <ProcessGcode+0x2a8>)
 800411a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800411c:	f012 f9b6 	bl	801648c <strstr>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <ProcessGcode+0x148>
 8004126:	495e      	ldr	r1, [pc, #376]	@ (80042a0 <ProcessGcode+0x2ac>)
 8004128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412a:	f012 f9af 	bl	801648c <strstr>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <ProcessGcode+0x144>
 8004134:	2302      	movs	r3, #2
 8004136:	e002      	b.n	800413e <ProcessGcode+0x14a>
 8004138:	2300      	movs	r3, #0
 800413a:	e000      	b.n	800413e <ProcessGcode+0x14a>
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            // Extract axis coordinates from the line
             const char *ptr = strchr(line, 'X');
 8004142:	2158      	movs	r1, #88	@ 0x58
 8004144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004146:	f012 f95e 	bl	8016406 <strchr>
 800414a:	61f8      	str	r0, [r7, #28]
             if (ptr) xTarget = (float)atof(ptr + 1);
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <ProcessGcode+0x178>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3301      	adds	r3, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f011 f9e8 	bl	801552c <atof>
 800415c:	ec53 2b10 	vmov	r2, r3, d0
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	f7fc fd22 	bl	8000bac <__aeabi_d2f>
 8004168:	4603      	mov	r3, r0
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                ptr = strchr(line, 'Y');
 800416c:	2159      	movs	r1, #89	@ 0x59
 800416e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004170:	f012 f949 	bl	8016406 <strchr>
 8004174:	61f8      	str	r0, [r7, #28]
             if (ptr) yTarget = (float)atof(ptr + 1);
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00c      	beq.n	8004196 <ProcessGcode+0x1a2>
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f011 f9d3 	bl	801552c <atof>
 8004186:	ec53 2b10 	vmov	r2, r3, d0
 800418a:	4610      	mov	r0, r2
 800418c:	4619      	mov	r1, r3
 800418e:	f7fc fd0d 	bl	8000bac <__aeabi_d2f>
 8004192:	4603      	mov	r3, r0
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38

             uint8_t motorIndex = (probe == 2) ? 1 : 0; // Select motor index based on P1 or P2
 8004196:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800419a:	2b02      	cmp	r3, #2
 800419c:	bf0c      	ite	eq
 800419e:	2301      	moveq	r3, #1
 80041a0:	2300      	movne	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	76fb      	strb	r3, [r7, #27]
             // Send MoveTo commands
            if (xTarget >= 0) {
 80041a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	db15      	blt.n	80041e0 <ProcessGcode+0x1ec>
                //cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 1;

                if(motorIndex == 0){
 80041b4:	7efb      	ldrb	r3, [r7, #27]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <ProcessGcode+0x1de>
                	coordinates[commandsGcode].x = -xTarget;
 80041ba:	4b35      	ldr	r3, [pc, #212]	@ (8004290 <ProcessGcode+0x29c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041c2:	eef1 7a67 	vneg.f32	s15, s15
 80041c6:	4a33      	ldr	r2, [pc, #204]	@ (8004294 <ProcessGcode+0x2a0>)
 80041c8:	015b      	lsls	r3, r3, #5
 80041ca:	4413      	add	r3, r2
 80041cc:	edc3 7a00 	vstr	s15, [r3]
 80041d0:	e006      	b.n	80041e0 <ProcessGcode+0x1ec>
            }
                else{
                	coordinates[commandsGcode].x = xTarget;
 80041d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004290 <ProcessGcode+0x29c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a2f      	ldr	r2, [pc, #188]	@ (8004294 <ProcessGcode+0x2a0>)
 80041d8:	015b      	lsls	r3, r3, #5
 80041da:	4413      	add	r3, r2
 80041dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041de:	601a      	str	r2, [r3, #0]
           }
                }
                //cmd.command = MOTOR_CMD_MOVETO;
                //xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);

            if (yTarget >= 0) {
 80041e0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80041e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	db3a      	blt.n	8004264 <ProcessGcode+0x270>
               // cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 0;
                if(motorIndex == 0){
 80041ee:	7efb      	ldrb	r3, [r7, #27]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10d      	bne.n	8004210 <ProcessGcode+0x21c>
                	coordinates[commandsGcode].y = yTarget;
 80041f4:	4b26      	ldr	r3, [pc, #152]	@ (8004290 <ProcessGcode+0x29c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a26      	ldr	r2, [pc, #152]	@ (8004294 <ProcessGcode+0x2a0>)
 80041fa:	015b      	lsls	r3, r3, #5
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004202:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 8004204:	4b22      	ldr	r3, [pc, #136]	@ (8004290 <ProcessGcode+0x29c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3301      	adds	r3, #1
 800420a:	4a21      	ldr	r2, [pc, #132]	@ (8004290 <ProcessGcode+0x29c>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e029      	b.n	8004264 <ProcessGcode+0x270>
                }
                else{
                	coordinates[commandsGcode].y = yTarget;
 8004210:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <ProcessGcode+0x29c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <ProcessGcode+0x2a0>)
 8004216:	015b      	lsls	r3, r3, #5
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800421e:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 8004220:	4b1b      	ldr	r3, [pc, #108]	@ (8004290 <ProcessGcode+0x29c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a1a      	ldr	r2, [pc, #104]	@ (8004290 <ProcessGcode+0x29c>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	e01b      	b.n	8004264 <ProcessGcode+0x270>
//          if(i == gcodeCount - 1){
//        	   num_elements = i;
//
//          }

        else if (strncmp(line, "T1", 2) == 0) { // T : perform test
 800422c:	2202      	movs	r2, #2
 800422e:	491d      	ldr	r1, [pc, #116]	@ (80042a4 <ProcessGcode+0x2b0>)
 8004230:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004232:	f012 f906 	bl	8016442 <strncmp>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d105      	bne.n	8004248 <ProcessGcode+0x254>
        	testResultsCount++;
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <ProcessGcode+0x2b4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	4a19      	ldr	r2, [pc, #100]	@ (80042a8 <ProcessGcode+0x2b4>)
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	e00d      	b.n	8004264 <ProcessGcode+0x270>
        	//inNetBlock = 0;
        //CheckConnection(&hservo1, &hservo2);
        }

        else if (line[0] == 'M') {
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b4d      	cmp	r3, #77	@ 0x4d
 800424e:	d109      	bne.n	8004264 <ProcessGcode+0x270>
            if (strncmp(line, "M30", 3) == 0) { // M30: end of program
 8004250:	2203      	movs	r2, #3
 8004252:	4916      	ldr	r1, [pc, #88]	@ (80042ac <ProcessGcode+0x2b8>)
 8004254:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004256:	f012 f8f4 	bl	8016442 <strncmp>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d027      	beq.n	80042b0 <ProcessGcode+0x2bc>
 8004260:	e000      	b.n	8004264 <ProcessGcode+0x270>
        continue;
 8004262:	bf00      	nop
	    for(size_t i = 0; i < gcodeCount; i++) {
 8004264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004266:	3301      	adds	r3, #1
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
 800426a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	429a      	cmp	r2, r3
 8004270:	f4ff aecf 	bcc.w	8004012 <ProcessGcode+0x1e>
 8004274:	e01d      	b.n	80042b2 <ProcessGcode+0x2be>
 8004276:	bf00      	nop
 8004278:	080189d0 	.word	0x080189d0
 800427c:	20008a6c 	.word	0x20008a6c
 8004280:	20008a70 	.word	0x20008a70
 8004284:	080189d8 	.word	0x080189d8
 8004288:	65742d28 	.word	0x65742d28
 800428c:	080189e0 	.word	0x080189e0
 8004290:	2000aff4 	.word	0x2000aff4
 8004294:	20008a74 	.word	0x20008a74
 8004298:	080189e4 	.word	0x080189e4
 800429c:	080189e8 	.word	0x080189e8
 80042a0:	080189ec 	.word	0x080189ec
 80042a4:	080189f0 	.word	0x080189f0
 80042a8:	2000aff8 	.word	0x2000aff8
 80042ac:	080189f4 	.word	0x080189f4
                break;  // End processing
 80042b0:	bf00      	nop
            }
            //vTaskDelay(100);
        }
        // TODO: Some delay?
    }
	    commandsGcode++;
 80042b2:	4b18      	ldr	r3, [pc, #96]	@ (8004314 <ProcessGcode+0x320>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3301      	adds	r3, #1
 80042b8:	4a16      	ldr	r2, [pc, #88]	@ (8004314 <ProcessGcode+0x320>)
 80042ba:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 80042bc:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <ProcessGcode+0x320>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a15      	ldr	r2, [pc, #84]	@ (8004318 <ProcessGcode+0x324>)
 80042c2:	015b      	lsls	r3, r3, #5
 80042c4:	4413      	add	r3, r2
 80042c6:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80042ca:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 80042cc:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <ProcessGcode+0x320>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <ProcessGcode+0x324>)
 80042d2:	015b      	lsls	r3, r3, #5
 80042d4:	4413      	add	r3, r2
 80042d6:	3304      	adds	r3, #4
 80042d8:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80042dc:	601a      	str	r2, [r3, #0]
	    commandsGcode++;
 80042de:	4b0d      	ldr	r3, [pc, #52]	@ (8004314 <ProcessGcode+0x320>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3301      	adds	r3, #1
 80042e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004314 <ProcessGcode+0x320>)
 80042e6:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 80042e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004314 <ProcessGcode+0x320>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004318 <ProcessGcode+0x324>)
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	4413      	add	r3, r2
 80042f2:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 80042f6:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 80042f8:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <ProcessGcode+0x320>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a06      	ldr	r2, [pc, #24]	@ (8004318 <ProcessGcode+0x324>)
 80042fe:	015b      	lsls	r3, r3, #5
 8004300:	4413      	add	r3, r2
 8004302:	3304      	adds	r3, #4
 8004304:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	e000      	b.n	800430e <ProcessGcode+0x31a>
                	return;
 800430c:	bf00      	nop

}
 800430e:	3748      	adds	r7, #72	@ 0x48
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	2000aff4 	.word	0x2000aff4
 8004318:	20008a74 	.word	0x20008a74

0800431c <ResetMotorState>:
uint8_t x = 0;
bool testing = 0;
const uint32_t HOMING_SPEED = 80000;
const uint32_t CALIB_SPEED = 80000;

static void ResetMotorState(Motor *m, float homePosition) {
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	ed87 0a00 	vstr	s0, [r7]
    m->currentPositionMM = homePosition;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    m->stepsTaken = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	671a      	str	r2, [r3, #112]	@ 0x70
    m->StepsBack = 0;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    m->StepsFront = 0;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <MotorsHoming>:
      reset its state.
    • Then poll (with a short delay) until each motor reaches its home.
    • When a sensor is triggered during polling, a STOP command is sent,
      and the motor state is reset.
------------------------------------------------------------------*/
bool MotorsHoming(Motor *motor) {
 8004354:	b580      	push	{r7, lr}
 8004356:	b08c      	sub	sp, #48	@ 0x30
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
    bool homed[4] = { false, false, false, false };
 800435c:	2300      	movs	r3, #0
 800435e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    //SERVO_WritePosition(&hservo1, 115);
    //SERVO_WritePosition(&hservo2, 115);

    /* --- Start each motor if not already at its home sensor --- */
    /* Motor 0: Uses EndStop2, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 0) {
 8004360:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004364:	48cb      	ldr	r0, [pc, #812]	@ (8004694 <MotorsHoming+0x340>)
 8004366:	f7ff f991 	bl	800368c <IsSensorTriggered>
 800436a:	4603      	mov	r3, r0
 800436c:	f083 0301 	eor.w	r3, r3, #1
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01f      	beq.n	80043b6 <MotorsHoming+0x62>
        TMC2209_SetSpeed(&motor[0], HOMING_SPEED);
 8004376:	4bc8      	ldr	r3, [pc, #800]	@ (8004698 <MotorsHoming+0x344>)
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fd ff13 	bl	80021a6 <TMC2209_SetSpeed>
        cmd.motorIndex = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004384:	2303      	movs	r3, #3
 8004386:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8004388:	2301      	movs	r3, #1
 800438a:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800438c:	4bc3      	ldr	r3, [pc, #780]	@ (800469c <MotorsHoming+0x348>)
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	f107 0108 	add.w	r1, r7, #8
 8004394:	2300      	movs	r3, #0
 8004396:	f04f 32ff 	mov.w	r2, #4294967295
 800439a:	f00e fd9d 	bl	8012ed8 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 800439e:	2302      	movs	r3, #2
 80043a0:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043a2:	4bbe      	ldr	r3, [pc, #760]	@ (800469c <MotorsHoming+0x348>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f107 0108 	add.w	r1, r7, #8
 80043aa:	2300      	movs	r3, #0
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	f00e fd92 	bl	8012ed8 <xQueueGenericSend>
 80043b4:	e007      	b.n	80043c6 <MotorsHoming+0x72>
    } else {
        homed[0] = true;
 80043b6:	2301      	movs	r3, #1
 80043b8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        ResetMotorState(&motor[0], 0);
 80043bc:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 80046a0 <MotorsHoming+0x34c>
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ffab 	bl	800431c <ResetMotorState>
    }

    /* Motor 1: Uses EndStop4, home position = 450, direction = 0 */
    if (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 0) {
 80043c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043ca:	48b6      	ldr	r0, [pc, #728]	@ (80046a4 <MotorsHoming+0x350>)
 80043cc:	f7ff f95e 	bl	800368c <IsSensorTriggered>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d021      	beq.n	8004420 <MotorsHoming+0xcc>
        TMC2209_SetSpeed(&motor[1], HOMING_SPEED);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	33b0      	adds	r3, #176	@ 0xb0
 80043e0:	4aad      	ldr	r2, [pc, #692]	@ (8004698 <MotorsHoming+0x344>)
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7fd fede 	bl	80021a6 <TMC2209_SetSpeed>
        cmd.motorIndex = 1;
 80043ea:	2301      	movs	r3, #1
 80043ec:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80043ee:	2303      	movs	r3, #3
 80043f0:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043f6:	4ba9      	ldr	r3, [pc, #676]	@ (800469c <MotorsHoming+0x348>)
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	f107 0108 	add.w	r1, r7, #8
 80043fe:	2300      	movs	r3, #0
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	f00e fd68 	bl	8012ed8 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004408:	2302      	movs	r3, #2
 800440a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800440c:	4ba3      	ldr	r3, [pc, #652]	@ (800469c <MotorsHoming+0x348>)
 800440e:	6818      	ldr	r0, [r3, #0]
 8004410:	f107 0108 	add.w	r1, r7, #8
 8004414:	2300      	movs	r3, #0
 8004416:	f04f 32ff 	mov.w	r2, #4294967295
 800441a:	f00e fd5d 	bl	8012ed8 <xQueueGenericSend>
 800441e:	e009      	b.n	8004434 <MotorsHoming+0xe0>
    } else {
        homed[1] = true;
 8004420:	2301      	movs	r3, #1
 8004422:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        ResetMotorState(&motor[1], 0);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	33b0      	adds	r3, #176	@ 0xb0
 800442a:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 80046a0 <MotorsHoming+0x34c>
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff74 	bl	800431c <ResetMotorState>
    }

    /* Motor 2: Uses EndStop1, home position = 0, direction = 0 */
    if (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 0) {
 8004434:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004438:	489a      	ldr	r0, [pc, #616]	@ (80046a4 <MotorsHoming+0x350>)
 800443a:	f7ff f927 	bl	800368c <IsSensorTriggered>
 800443e:	4603      	mov	r3, r0
 8004440:	f083 0301 	eor.w	r3, r3, #1
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d022      	beq.n	8004490 <MotorsHoming+0x13c>
        TMC2209_SetSpeed(&motor[2], HOMING_SPEED);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004450:	4a91      	ldr	r2, [pc, #580]	@ (8004698 <MotorsHoming+0x344>)
 8004452:	4611      	mov	r1, r2
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd fea6 	bl	80021a6 <TMC2209_SetSpeed>
        cmd.motorIndex = 2;
 800445a:	2302      	movs	r3, #2
 800445c:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 800445e:	2303      	movs	r3, #3
 8004460:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004466:	4b8d      	ldr	r3, [pc, #564]	@ (800469c <MotorsHoming+0x348>)
 8004468:	6818      	ldr	r0, [r3, #0]
 800446a:	f107 0108 	add.w	r1, r7, #8
 800446e:	2300      	movs	r3, #0
 8004470:	f04f 32ff 	mov.w	r2, #4294967295
 8004474:	f00e fd30 	bl	8012ed8 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004478:	2302      	movs	r3, #2
 800447a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800447c:	4b87      	ldr	r3, [pc, #540]	@ (800469c <MotorsHoming+0x348>)
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	f107 0108 	add.w	r1, r7, #8
 8004484:	2300      	movs	r3, #0
 8004486:	f04f 32ff 	mov.w	r2, #4294967295
 800448a:	f00e fd25 	bl	8012ed8 <xQueueGenericSend>
 800448e:	e00a      	b.n	80044a6 <MotorsHoming+0x152>
    } else {
        homed[2] = true;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ResetMotorState(&motor[2], 0);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800449c:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 80046a0 <MotorsHoming+0x34c>
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7ff ff3b 	bl	800431c <ResetMotorState>
    }

    /* Motor 3: Uses EndStop3, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 0) {
 80044a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044aa:	487a      	ldr	r0, [pc, #488]	@ (8004694 <MotorsHoming+0x340>)
 80044ac:	f7ff f8ee 	bl	800368c <IsSensorTriggered>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f083 0301 	eor.w	r3, r3, #1
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <MotorsHoming+0x1ae>
        TMC2209_SetSpeed(&motor[3], HOMING_SPEED);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80044c2:	4a75      	ldr	r2, [pc, #468]	@ (8004698 <MotorsHoming+0x344>)
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fe6d 	bl	80021a6 <TMC2209_SetSpeed>
        cmd.motorIndex = 3;
 80044cc:	2303      	movs	r3, #3
 80044ce:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80044d0:	2303      	movs	r3, #3
 80044d2:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 80044d4:	2301      	movs	r3, #1
 80044d6:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80044d8:	4b70      	ldr	r3, [pc, #448]	@ (800469c <MotorsHoming+0x348>)
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	f107 0108 	add.w	r1, r7, #8
 80044e0:	2300      	movs	r3, #0
 80044e2:	f04f 32ff 	mov.w	r2, #4294967295
 80044e6:	f00e fcf7 	bl	8012ed8 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 80044ea:	2302      	movs	r3, #2
 80044ec:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80044ee:	4b6b      	ldr	r3, [pc, #428]	@ (800469c <MotorsHoming+0x348>)
 80044f0:	6818      	ldr	r0, [r3, #0]
 80044f2:	f107 0108 	add.w	r1, r7, #8
 80044f6:	2300      	movs	r3, #0
 80044f8:	f04f 32ff 	mov.w	r2, #4294967295
 80044fc:	f00e fcec 	bl	8012ed8 <xQueueGenericSend>
 8004500:	e0a3      	b.n	800464a <MotorsHoming+0x2f6>
    } else {
        homed[3] = true;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        ResetMotorState(&motor[3], 0);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800450e:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 80046a0 <MotorsHoming+0x34c>
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff ff02 	bl	800431c <ResetMotorState>
    }

    /* --- Poll sensors until all motors are homed --- */
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 8004518:	e097      	b.n	800464a <MotorsHoming+0x2f6>
        if (!homed[0] && (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 1)) {
 800451a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800451e:	f083 0301 	eor.w	r3, r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01c      	beq.n	8004562 <MotorsHoming+0x20e>
 8004528:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800452c:	4859      	ldr	r0, [pc, #356]	@ (8004694 <MotorsHoming+0x340>)
 800452e:	f7ff f8ad 	bl	800368c <IsSensorTriggered>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d014      	beq.n	8004562 <MotorsHoming+0x20e>
            cmd.motorIndex = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 800453c:	2301      	movs	r3, #1
 800453e:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004540:	4b56      	ldr	r3, [pc, #344]	@ (800469c <MotorsHoming+0x348>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	f107 0108 	add.w	r1, r7, #8
 8004548:	2300      	movs	r3, #0
 800454a:	f04f 32ff 	mov.w	r2, #4294967295
 800454e:	f00e fcc3 	bl	8012ed8 <xQueueGenericSend>
            ResetMotorState(&motor[0], 0);
 8004552:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 80046a0 <MotorsHoming+0x34c>
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7ff fee0 	bl	800431c <ResetMotorState>
            homed[0] = true;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        }
        if (!homed[1] && (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 1)) {
 8004562:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8004566:	f083 0301 	eor.w	r3, r3, #1
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01e      	beq.n	80045ae <MotorsHoming+0x25a>
 8004570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004574:	484b      	ldr	r0, [pc, #300]	@ (80046a4 <MotorsHoming+0x350>)
 8004576:	f7ff f889 	bl	800368c <IsSensorTriggered>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d016      	beq.n	80045ae <MotorsHoming+0x25a>
            cmd.motorIndex = 1;
 8004580:	2301      	movs	r3, #1
 8004582:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004584:	2301      	movs	r3, #1
 8004586:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004588:	4b44      	ldr	r3, [pc, #272]	@ (800469c <MotorsHoming+0x348>)
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	f107 0108 	add.w	r1, r7, #8
 8004590:	2300      	movs	r3, #0
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	f00e fc9f 	bl	8012ed8 <xQueueGenericSend>
            ResetMotorState(&motor[1], 0);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	33b0      	adds	r3, #176	@ 0xb0
 800459e:	ed9f 0a40 	vldr	s0, [pc, #256]	@ 80046a0 <MotorsHoming+0x34c>
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff feba 	bl	800431c <ResetMotorState>
            homed[1] = true;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }
        if (!homed[2] && (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 1)) {
 80045ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045b2:	f083 0301 	eor.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01f      	beq.n	80045fc <MotorsHoming+0x2a8>
 80045bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045c0:	4838      	ldr	r0, [pc, #224]	@ (80046a4 <MotorsHoming+0x350>)
 80045c2:	f7ff f863 	bl	800368c <IsSensorTriggered>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <MotorsHoming+0x2a8>
            cmd.motorIndex = 2;
 80045cc:	2302      	movs	r3, #2
 80045ce:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80045d0:	2301      	movs	r3, #1
 80045d2:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80045d4:	4b31      	ldr	r3, [pc, #196]	@ (800469c <MotorsHoming+0x348>)
 80045d6:	6818      	ldr	r0, [r3, #0]
 80045d8:	f107 0108 	add.w	r1, r7, #8
 80045dc:	2300      	movs	r3, #0
 80045de:	f04f 32ff 	mov.w	r2, #4294967295
 80045e2:	f00e fc79 	bl	8012ed8 <xQueueGenericSend>
            ResetMotorState(&motor[2], 0);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80045ec:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80046a0 <MotorsHoming+0x34c>
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fe93 	bl	800431c <ResetMotorState>
            homed[2] = true;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        }
        if (!homed[3] && (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 1)) {
 80045fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01f      	beq.n	800464a <MotorsHoming+0x2f6>
 800460a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800460e:	4821      	ldr	r0, [pc, #132]	@ (8004694 <MotorsHoming+0x340>)
 8004610:	f7ff f83c 	bl	800368c <IsSensorTriggered>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d017      	beq.n	800464a <MotorsHoming+0x2f6>
            cmd.motorIndex = 3;
 800461a:	2303      	movs	r3, #3
 800461c:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 800461e:	2301      	movs	r3, #1
 8004620:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004622:	4b1e      	ldr	r3, [pc, #120]	@ (800469c <MotorsHoming+0x348>)
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	f107 0108 	add.w	r1, r7, #8
 800462a:	2300      	movs	r3, #0
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	f00e fc52 	bl	8012ed8 <xQueueGenericSend>
            ResetMotorState(&motor[3], 0);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 800463a:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80046a0 <MotorsHoming+0x34c>
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fe6c 	bl	800431c <ResetMotorState>
            homed[3] = true;
 8004644:	2301      	movs	r3, #1
 8004646:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 800464a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800464e:	f083 0301 	eor.w	r3, r3, #1
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	f47f af60 	bne.w	800451a <MotorsHoming+0x1c6>
 800465a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800465e:	f083 0301 	eor.w	r3, r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	f47f af58 	bne.w	800451a <MotorsHoming+0x1c6>
 800466a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800466e:	f083 0301 	eor.w	r3, r3, #1
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	f47f af50 	bne.w	800451a <MotorsHoming+0x1c6>
 800467a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800467e:	f083 0301 	eor.w	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	f47f af48 	bne.w	800451a <MotorsHoming+0x1c6>
        }
        /* Yield for 1 ms to allow other tasks to run */
        //vTaskDelay(pdMS_TO_TICKS(1));
    }

    return true;
 800468a:	2301      	movs	r3, #1
}
 800468c:	4618      	mov	r0, r3
 800468e:	3730      	adds	r7, #48	@ 0x30
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40021000 	.word	0x40021000
 8004698:	00013880 	.word	0x00013880
 800469c:	20008a50 	.word	0x20008a50
 80046a0:	00000000 	.word	0x00000000
 80046a4:	40021400 	.word	0x40021400

080046a8 <AutoCalibration>:
       to move each motor to its calibration positions.
    3. Uses nonblocking delays with vTaskDelay().

  Adjust axis/motor indexes, positions, and offsets as needed.
------------------------------------------------------------------*/
void AutoCalibration(Axis *axes, Motor *motors) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	@ 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
    MotorCommand cmd;

//    SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//    SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
    // Continue with calibration until the calibration condition is met.
    if(!calibrationState()) {
 80046b2:	f000 f8a9 	bl	8004808 <calibrationState>
 80046b6:	4603      	mov	r3, r0
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8085 	beq.w	80047ce <AutoCalibration+0x126>
        MotorsHoming(motors);
 80046c4:	6838      	ldr	r0, [r7, #0]
 80046c6:	f7ff fe45 	bl	8004354 <MotorsHoming>
         *       Motor 0 -> -47.9 mm
         *       Motor 1 -> 50.2 mm
         *
         * Adjust the indices below if your system assigns motors differently.
         */
        TMC2209_SetSpeed(&motors[0], CALIB_SPEED);
 80046ca:	4b43      	ldr	r3, [pc, #268]	@ (80047d8 <AutoCalibration+0x130>)
 80046cc:	4619      	mov	r1, r3
 80046ce:	6838      	ldr	r0, [r7, #0]
 80046d0:	f7fd fd69 	bl	80021a6 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[1], CALIB_SPEED);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	33b0      	adds	r3, #176	@ 0xb0
 80046d8:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <AutoCalibration+0x130>)
 80046da:	4611      	mov	r1, r2
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fd fd62 	bl	80021a6 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[2], CALIB_SPEED);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80046e8:	4a3b      	ldr	r2, [pc, #236]	@ (80047d8 <AutoCalibration+0x130>)
 80046ea:	4611      	mov	r1, r2
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fd fd5a 	bl	80021a6 <TMC2209_SetSpeed>
        TMC2209_SetSpeed(&motors[3], CALIB_SPEED);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80046f8:	4a37      	ldr	r2, [pc, #220]	@ (80047d8 <AutoCalibration+0x130>)
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fd fd52 	bl	80021a6 <TMC2209_SetSpeed>
        HAL_Delay(3000);
 8004702:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004706:	f002 fcb1 	bl	800706c <HAL_Delay>

        LCD_I2C_ClearAllLines(&hlcd3);
 800470a:	4834      	ldr	r0, [pc, #208]	@ (80047dc <AutoCalibration+0x134>)
 800470c:	f7fc fdaa 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004710:	2202      	movs	r2, #2
 8004712:	2100      	movs	r1, #0
 8004714:	4831      	ldr	r0, [pc, #196]	@ (80047dc <AutoCalibration+0x134>)
 8004716:	f7fc fd79 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibrating!");
 800471a:	4931      	ldr	r1, [pc, #196]	@ (80047e0 <AutoCalibration+0x138>)
 800471c:	482f      	ldr	r0, [pc, #188]	@ (80047dc <AutoCalibration+0x134>)
 800471e:	f7fc fd3b 	bl	8001198 <LCD_I2C_printStr>

        // The Auto calibration based on only hard saving one point was deleted
        // Because of the mechanical design the probes were bending so the next commands
        // are for auto calibration based on 2 hard saved coordinates
        // sending commands to the motor control task
        cmd.targetPositionsAxis0[0] = 38.653677f;   // Y
 8004722:	4b30      	ldr	r3, [pc, #192]	@ (80047e4 <AutoCalibration+0x13c>)
 8004724:	623b      	str	r3, [r7, #32]
        cmd.targetPositionsAxis0[1] = -57.26f; // Y
 8004726:	4b30      	ldr	r3, [pc, #192]	@ (80047e8 <AutoCalibration+0x140>)
 8004728:	627b      	str	r3, [r7, #36]	@ 0x24
        cmd.targetPositionsAxis0[2] = -80.8456786f;  // X
 800472a:	4b30      	ldr	r3, [pc, #192]	@ (80047ec <AutoCalibration+0x144>)
 800472c:	62bb      	str	r3, [r7, #40]	@ 0x28
        cmd.targetPositionsAxis0[3] = 22.0f;   // X
 800472e:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <AutoCalibration+0x148>)
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c

        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8004732:	2309      	movs	r3, #9
 8004734:	733b      	strb	r3, [r7, #12]

       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004736:	4b2f      	ldr	r3, [pc, #188]	@ (80047f4 <AutoCalibration+0x14c>)
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	f107 010c 	add.w	r1, r7, #12
 800473e:	2300      	movs	r3, #0
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	f00e fbc8 	bl	8012ed8 <xQueueGenericSend>
       CheckConnection(&hservo1,&hservo2);
 8004748:	492b      	ldr	r1, [pc, #172]	@ (80047f8 <AutoCalibration+0x150>)
 800474a:	482c      	ldr	r0, [pc, #176]	@ (80047fc <AutoCalibration+0x154>)
 800474c:	f7fe ff62 	bl	8003614 <CheckConnection>
//       SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//       SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
       axes[0].motors[0]->currentPositionMM = 0.0f;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[0].motors[1]->currentPositionMM = pcbHeight;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	4a27      	ldr	r2, [pc, #156]	@ (8004800 <AutoCalibration+0x158>)
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[0]->currentPositionMM = 0.0f;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3328      	adds	r3, #40	@ 0x28
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[1]->currentPositionMM = 0.0f;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3328      	adds	r3, #40	@ 0x28
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84


       // This is just to leave the function after actually calibrating the numbers don't matter
        motors[0].calib[1] = 1;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800478a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        motors[1].calib[1] = 1;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	33b0      	adds	r3, #176	@ 0xb0
 8004792:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004796:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        motors[2].calib[1] = 1;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80047a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80047a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        motors[3].calib[1] = 1;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 80047ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80047b2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

        // Clear and update the LCD to indicate calibration is done.
        LCD_I2C_ClearAllLines(&hlcd3);
 80047b6:	4809      	ldr	r0, [pc, #36]	@ (80047dc <AutoCalibration+0x134>)
 80047b8:	f7fc fd54 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 80047bc:	2202      	movs	r2, #2
 80047be:	2100      	movs	r1, #0
 80047c0:	4806      	ldr	r0, [pc, #24]	@ (80047dc <AutoCalibration+0x134>)
 80047c2:	f7fc fd23 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibration done!");
 80047c6:	490f      	ldr	r1, [pc, #60]	@ (8004804 <AutoCalibration+0x15c>)
 80047c8:	4804      	ldr	r0, [pc, #16]	@ (80047dc <AutoCalibration+0x134>)
 80047ca:	f7fc fce5 	bl	8001198 <LCD_I2C_printStr>

        // Perform any connection testing.
       // testing = CheckConnection(&hservo2, &hservo1);

    }
}
 80047ce:	bf00      	nop
 80047d0:	3730      	adds	r7, #48	@ 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	00013880 	.word	0x00013880
 80047dc:	20000018 	.word	0x20000018
 80047e0:	08018ae0 	.word	0x08018ae0
 80047e4:	421a9d5e 	.word	0x421a9d5e
 80047e8:	c2650a3d 	.word	0xc2650a3d
 80047ec:	c2a1b0fd 	.word	0xc2a1b0fd
 80047f0:	41b00000 	.word	0x41b00000
 80047f4:	20008a50 	.word	0x20008a50
 80047f8:	20000040 	.word	0x20000040
 80047fc:	2000002c 	.word	0x2000002c
 8004800:	20008a70 	.word	0x20008a70
 8004804:	08018af0 	.word	0x08018af0

08004808 <calibrationState>:


bool calibrationState(void) {
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
    
    if (motors[0].calib[1] != 0 &&
 800480c:	4b13      	ldr	r3, [pc, #76]	@ (800485c <calibrationState+0x54>)
 800480e:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8004812:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	d019      	beq.n	8004850 <calibrationState+0x48>
        motors[2].calib[1] != 0 &&
 800481c:	4b0f      	ldr	r3, [pc, #60]	@ (800485c <calibrationState+0x54>)
 800481e:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
    if (motors[0].calib[1] != 0 &&
 8004822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800482a:	d011      	beq.n	8004850 <calibrationState+0x48>
        motors[3].calib[1] != 0 &&
 800482c:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <calibrationState+0x54>)
 800482e:	edd3 7aae 	vldr	s15, [r3, #696]	@ 0x2b8
        motors[2].calib[1] != 0 &&
 8004832:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	d009      	beq.n	8004850 <calibrationState+0x48>
        motors[1].calib[1] != 0)
 800483c:	4b07      	ldr	r3, [pc, #28]	@ (800485c <calibrationState+0x54>)
 800483e:	edd3 7a56 	vldr	s15, [r3, #344]	@ 0x158
        motors[3].calib[1] != 0 &&
 8004842:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	d001      	beq.n	8004850 <calibrationState+0x48>
    {
        return true;
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <calibrationState+0x4a>
    }
    else {
        return false;
 8004850:	2300      	movs	r3, #0
    }
}
 8004852:	4618      	mov	r0, r3
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	2000bf48 	.word	0x2000bf48

08004860 <ManualCalibration>:


void ManualCalibration(Axis *axes, Motor *motors) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b08e      	sub	sp, #56	@ 0x38
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
    /* If calibration is complete, exit immediately */
    TMC2209_SetSpeed(&motors[0], 50000);
 800486a:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800486e:	6838      	ldr	r0, [r7, #0]
 8004870:	f7fd fc99 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 50000);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	33b0      	adds	r3, #176	@ 0xb0
 8004878:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800487c:	4618      	mov	r0, r3
 800487e:	f7fd fc92 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 50000);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004888:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800488c:	4618      	mov	r0, r3
 800488e:	f7fd fc8a 	bl	80021a6 <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 50000);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004898:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800489c:	4618      	mov	r0, r3
 800489e:	f7fd fc82 	bl	80021a6 <TMC2209_SetSpeed>
    MotorCommand cmd;  // Command structure to post to motorControlTask
	LCD_I2C_ClearAllLines(&hlcd3);
 80048a2:	487a      	ldr	r0, [pc, #488]	@ (8004a8c <ManualCalibration+0x22c>)
 80048a4:	f7fc fcde 	bl	8001264 <LCD_I2C_ClearAllLines>
	LCD_I2C_SetCursor(&hlcd3, 0, 2);
 80048a8:	2202      	movs	r2, #2
 80048aa:	2100      	movs	r1, #0
 80048ac:	4877      	ldr	r0, [pc, #476]	@ (8004a8c <ManualCalibration+0x22c>)
 80048ae:	f7fc fcad 	bl	800120c <LCD_I2C_SetCursor>
	LCD_I2C_printStr(&hlcd3, "Calibrate Probe 1!");
 80048b2:	4977      	ldr	r1, [pc, #476]	@ (8004a90 <ManualCalibration+0x230>)
 80048b4:	4875      	ldr	r0, [pc, #468]	@ (8004a8c <ManualCalibration+0x22c>)
 80048b6:	f7fc fc6f 	bl	8001198 <LCD_I2C_printStr>
	MotorsHoming(motors);
 80048ba:	6838      	ldr	r0, [r7, #0]
 80048bc:	f7ff fd4a 	bl	8004354 <MotorsHoming>
    while(!calibrationState()){
 80048c0:	e2fd      	b.n	8004ebe <ManualCalibration+0x65e>
    //RunManualCalibrationStateMachine(&hlcd3, &motors);
        SERVO_WritePosition(&hservo1, SERVO1_CHECK_POS);
 80048c2:	ed9f 0a74 	vldr	s0, [pc, #464]	@ 8004a94 <ManualCalibration+0x234>
 80048c6:	4874      	ldr	r0, [pc, #464]	@ (8004a98 <ManualCalibration+0x238>)
 80048c8:	f7fe ffa6 	bl	8003818 <SERVO_WritePosition>
        SERVO_WritePosition(&hservo2, SERVO2_CHECK_POS);
 80048cc:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8004a9c <ManualCalibration+0x23c>
 80048d0:	4873      	ldr	r0, [pc, #460]	@ (8004aa0 <ManualCalibration+0x240>)
 80048d2:	f7fe ffa1 	bl	8003818 <SERVO_WritePosition>
    	/* Example variables. Put them in a suitable scope (static in file-scope or function-scope). */
    	static uint8_t buttonState = 0;       // 0 = not pressed, 1 = pressed
    	static uint32_t pressStartTime = 0;   // Time at which the button was first pressed

    	// Debounce time in ms:
    	const uint32_t debounceTime = 50;
 80048d6:	2332      	movs	r3, #50	@ 0x32
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34

    static uint32_t lastPressTime = 0;  // Last valid press timestamp

    /* Process the calibration button (BtnCtr) */

    uint32_t currentTime = xTaskGetTickCount(); // or HAL_GetTick(), whichever you use
 80048da:	f00f fb9b 	bl	8014014 <xTaskGetTickCount>
 80048de:	6338      	str	r0, [r7, #48]	@ 0x30
    uint8_t currentLevel = HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin);
 80048e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048e4:	486f      	ldr	r0, [pc, #444]	@ (8004aa4 <ManualCalibration+0x244>)
 80048e6:	f003 fa7d 	bl	8007de4 <HAL_GPIO_ReadPin>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // ----------------------------------------------------------
    // Active-low button logic: pressed = (currentLevel == RESET)
    // ----------------------------------------------------------
    if (currentLevel == GPIO_PIN_RESET) {
 80048f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <ManualCalibration+0xb0>
        // Button is physically pressed
        if (buttonState == 0) {
 80048f8:	4b6b      	ldr	r3, [pc, #428]	@ (8004aa8 <ManualCalibration+0x248>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f040 81f9 	bne.w	8004cf4 <ManualCalibration+0x494>
            // Transition from not-pressed -> pressed
            buttonState = 1;
 8004902:	4b69      	ldr	r3, [pc, #420]	@ (8004aa8 <ManualCalibration+0x248>)
 8004904:	2201      	movs	r2, #1
 8004906:	701a      	strb	r2, [r3, #0]
            pressStartTime = currentTime;
 8004908:	4a68      	ldr	r2, [pc, #416]	@ (8004aac <ManualCalibration+0x24c>)
 800490a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e1f1      	b.n	8004cf4 <ManualCalibration+0x494>
        }
    } else {
        // Button is physically released
        if (buttonState == 1) {
 8004910:	4b65      	ldr	r3, [pc, #404]	@ (8004aa8 <ManualCalibration+0x248>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	f040 81ed 	bne.w	8004cf4 <ManualCalibration+0x494>
            // Transition from pressed -> released
            buttonState = 0;
 800491a:	4b63      	ldr	r3, [pc, #396]	@ (8004aa8 <ManualCalibration+0x248>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
            // Check if it was held long enough to count as a valid press
            if ((currentTime - pressStartTime) >= debounceTime) {
 8004920:	4b62      	ldr	r3, [pc, #392]	@ (8004aac <ManualCalibration+0x24c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800492a:	429a      	cmp	r2, r3
 800492c:	f200 81e2 	bhi.w	8004cf4 <ManualCalibration+0x494>
                // We register exactly ONE press per cycle
                Pressed++;
 8004930:	4b5f      	ldr	r3, [pc, #380]	@ (8004ab0 <ManualCalibration+0x250>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2db      	uxtb	r3, r3
 8004936:	3301      	adds	r3, #1
 8004938:	b2da      	uxtb	r2, r3
 800493a:	4b5d      	ldr	r3, [pc, #372]	@ (8004ab0 <ManualCalibration+0x250>)
 800493c:	701a      	strb	r2, [r3, #0]

                // -----------------------------
                // Handle your calibration steps
                // -----------------------------
                switch (Pressed) {
 800493e:	4b5c      	ldr	r3, [pc, #368]	@ (8004ab0 <ManualCalibration+0x250>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d003      	beq.n	8004950 <ManualCalibration+0xf0>
 8004948:	2b02      	cmp	r3, #2
 800494a:	f000 80b7 	beq.w	8004abc <ManualCalibration+0x25c>
 800494e:	e1cd      	b.n	8004cec <ManualCalibration+0x48c>
                    case 1:
                        // Save calibration for first press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 8004950:	4b58      	ldr	r3, [pc, #352]	@ (8004ab4 <ManualCalibration+0x254>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	461a      	mov	r2, r3
 8004956:	23b0      	movs	r3, #176	@ 0xb0
 8004958:	fb02 f303 	mul.w	r3, r2, r3
 800495c:	683a      	ldr	r2, [r7, #0]
 800495e:	4413      	add	r3, r2
 8004960:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004964:	4a53      	ldr	r2, [pc, #332]	@ (8004ab4 <ManualCalibration+0x254>)
 8004966:	7812      	ldrb	r2, [r2, #0]
 8004968:	4611      	mov	r1, r2
 800496a:	22b0      	movs	r2, #176	@ 0xb0
 800496c:	fb01 f202 	mul.w	r2, r1, r2
 8004970:	6839      	ldr	r1, [r7, #0]
 8004972:	440a      	add	r2, r1
 8004974:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	bfb8      	it	lt
 800497e:	425b      	neglt	r3, r3
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 800498e:	4b49      	ldr	r3, [pc, #292]	@ (8004ab4 <ManualCalibration+0x254>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	23b0      	movs	r3, #176	@ 0xb0
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 800499e:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 80049a2:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 80049a6:	4b43      	ldr	r3, [pc, #268]	@ (8004ab4 <ManualCalibration+0x254>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	461a      	mov	r2, r3
 80049ac:	23b0      	movs	r3, #176	@ 0xb0
 80049ae:	fb02 f303 	mul.w	r3, r2, r3
 80049b2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	4413      	add	r3, r2
 80049ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049be:	4619      	mov	r1, r3
 80049c0:	4b3c      	ldr	r3, [pc, #240]	@ (8004ab4 <ManualCalibration+0x254>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	23b0      	movs	r3, #176	@ 0xb0
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	4413      	add	r3, r2
 80049d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049d8:	1acb      	subs	r3, r1, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	bfb8      	it	lt
 80049de:	425b      	neglt	r3, r3
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3328      	adds	r3, #40	@ 0x28
 80049ec:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 80049f0:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <ManualCalibration+0x254>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	23b0      	movs	r3, #176	@ 0xb0
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 8004a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 8004a08:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 8004a0c:	4b29      	ldr	r3, [pc, #164]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	23b0      	movs	r3, #176	@ 0xb0
 8004a14:	fb02 f303 	mul.w	r3, r2, r3
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	441a      	add	r2, r3
 8004a1c:	4b25      	ldr	r3, [pc, #148]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	4619      	mov	r1, r3
 8004a22:	23b0      	movs	r3, #176	@ 0xb0
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	440b      	add	r3, r1
 8004a2c:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 8004a34:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	461a      	mov	r2, r3
 8004a3a:	23b0      	movs	r3, #176	@ 0xb0
 8004a3c:	fb02 f303 	mul.w	r3, r2, r3
 8004a40:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	441a      	add	r2, r3
 8004a48:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	23b0      	movs	r3, #176	@ 0xb0
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a58:	6839      	ldr	r1, [r7, #0]
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

                        motorGroup += 1;
 8004a64:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	3301      	adds	r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4b11      	ldr	r3, [pc, #68]	@ (8004ab4 <ManualCalibration+0x254>)
 8004a6e:	701a      	strb	r2, [r3, #0]
                        LCD_I2C_ClearAllLines(&hlcd3);
 8004a70:	4806      	ldr	r0, [pc, #24]	@ (8004a8c <ManualCalibration+0x22c>)
 8004a72:	f7fc fbf7 	bl	8001264 <LCD_I2C_ClearAllLines>
                        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004a76:	2202      	movs	r2, #2
 8004a78:	2100      	movs	r1, #0
 8004a7a:	4804      	ldr	r0, [pc, #16]	@ (8004a8c <ManualCalibration+0x22c>)
 8004a7c:	f7fc fbc6 	bl	800120c <LCD_I2C_SetCursor>
                        LCD_I2C_printStr(&hlcd3, "Calibrate Probe 2!");
 8004a80:	490d      	ldr	r1, [pc, #52]	@ (8004ab8 <ManualCalibration+0x258>)
 8004a82:	4802      	ldr	r0, [pc, #8]	@ (8004a8c <ManualCalibration+0x22c>)
 8004a84:	f7fc fb88 	bl	8001198 <LCD_I2C_printStr>
                        break;
 8004a88:	e134      	b.n	8004cf4 <ManualCalibration+0x494>
 8004a8a:	bf00      	nop
 8004a8c:	20000018 	.word	0x20000018
 8004a90:	08018b04 	.word	0x08018b04
 8004a94:	428c0000 	.word	0x428c0000
 8004a98:	2000002c 	.word	0x2000002c
 8004a9c:	42180000 	.word	0x42180000
 8004aa0:	20000040 	.word	0x20000040
 8004aa4:	40020c00 	.word	0x40020c00
 8004aa8:	2000affe 	.word	0x2000affe
 8004aac:	2000b000 	.word	0x2000b000
 8004ab0:	2000affd 	.word	0x2000affd
 8004ab4:	2000affc 	.word	0x2000affc
 8004ab8:	08018b18 	.word	0x08018b18

                    case 2:
                        // Save calibration for second press

                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 8004abc:	4b81      	ldr	r3, [pc, #516]	@ (8004cc4 <ManualCalibration+0x464>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	23b0      	movs	r3, #176	@ 0xb0
 8004ac4:	fb02 f303 	mul.w	r3, r2, r3
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	4413      	add	r3, r2
 8004acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ad0:	4a7c      	ldr	r2, [pc, #496]	@ (8004cc4 <ManualCalibration+0x464>)
 8004ad2:	7812      	ldrb	r2, [r2, #0]
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	22b0      	movs	r2, #176	@ 0xb0
 8004ad8:	fb01 f202 	mul.w	r2, r1, r2
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f8d2 20a0 	ldr.w	r2, [r2, #160]	@ 0xa0
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bfb8      	it	lt
 8004aea:	425b      	neglt	r3, r3
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 8004afa:	4b72      	ldr	r3, [pc, #456]	@ (8004cc4 <ManualCalibration+0x464>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	23b0      	movs	r3, #176	@ 0xb0
 8004b02:	fb02 f303 	mul.w	r3, r2, r3
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 8004b0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 8004b0e:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 8004b12:	4b6c      	ldr	r3, [pc, #432]	@ (8004cc4 <ManualCalibration+0x464>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	461a      	mov	r2, r3
 8004b18:	23b0      	movs	r3, #176	@ 0xb0
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	4413      	add	r3, r2
 8004b26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <ManualCalibration+0x464>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	23b0      	movs	r3, #176	@ 0xb0
 8004b34:	fb02 f303 	mul.w	r3, r2, r3
 8004b38:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b44:	1acb      	subs	r3, r1, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	425b      	neglt	r3, r3
 8004b4c:	ee07 3a90 	vmov	s15, r3
 8004b50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3328      	adds	r3, #40	@ 0x28
 8004b58:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 8004b5c:	4b59      	ldr	r3, [pc, #356]	@ (8004cc4 <ManualCalibration+0x464>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	23b0      	movs	r3, #176	@ 0xb0
 8004b64:	fb02 f303 	mul.w	r3, r2, r3
 8004b68:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 8004b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 8004b74:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 8004b78:	4b52      	ldr	r3, [pc, #328]	@ (8004cc4 <ManualCalibration+0x464>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	23b0      	movs	r3, #176	@ 0xb0
 8004b80:	fb02 f303 	mul.w	r3, r2, r3
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	441a      	add	r2, r3
 8004b88:	4b4e      	ldr	r3, [pc, #312]	@ (8004cc4 <ManualCalibration+0x464>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	23b0      	movs	r3, #176	@ 0xb0
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	6839      	ldr	r1, [r7, #0]
 8004b96:	440b      	add	r3, r1
 8004b98:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 8004ba0:	4b48      	ldr	r3, [pc, #288]	@ (8004cc4 <ManualCalibration+0x464>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	23b0      	movs	r3, #176	@ 0xb0
 8004ba8:	fb02 f303 	mul.w	r3, r2, r3
 8004bac:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	441a      	add	r2, r3
 8004bb4:	4b43      	ldr	r3, [pc, #268]	@ (8004cc4 <ManualCalibration+0x464>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	4619      	mov	r1, r3
 8004bba:	23b0      	movs	r3, #176	@ 0xb0
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004bc4:	6839      	ldr	r1, [r7, #0]
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004bcc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        MotorsHoming(motors);
 8004bd0:	6838      	ldr	r0, [r7, #0]
 8004bd2:	f7ff fbbf 	bl	8004354 <MotorsHoming>
                    	SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
 8004bd6:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8004cc8 <ManualCalibration+0x468>
 8004bda:	483c      	ldr	r0, [pc, #240]	@ (8004ccc <ManualCalibration+0x46c>)
 8004bdc:	f7fe fe1c 	bl	8003818 <SERVO_WritePosition>
                    	SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
 8004be0:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8004cd0 <ManualCalibration+0x470>
 8004be4:	483b      	ldr	r0, [pc, #236]	@ (8004cd4 <ManualCalibration+0x474>)
 8004be6:	f7fe fe17 	bl	8003818 <SERVO_WritePosition>

                        cmd.targetPositionsAxis0[0] = motors[0].calib[0];   // Y
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bf0:	61fb      	str	r3, [r7, #28]
                        cmd.targetPositionsAxis0[1] = -(motors[1].calib[0]); // Y
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	33b0      	adds	r3, #176	@ 0xb0
 8004bf6:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8004bfa:	eef1 7a67 	vneg.f32	s15, s15
 8004bfe:	edc7 7a08 	vstr	s15, [r7, #32]
                        cmd.targetPositionsAxis0[2] = -(motors[2].calib[0]);  // X
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004c08:	edd3 7a29 	vldr	s15, [r3, #164]	@ 0xa4
 8004c0c:	eef1 7a67 	vneg.f32	s15, s15
 8004c10:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        cmd.targetPositionsAxis0[3] = motors[3].calib[0];   // X
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
                        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8004c20:	2309      	movs	r3, #9
 8004c22:	723b      	strb	r3, [r7, #8]
                        LCD_I2C_ClearAllLines(&hlcd3);
 8004c24:	482c      	ldr	r0, [pc, #176]	@ (8004cd8 <ManualCalibration+0x478>)
 8004c26:	f7fc fb1d 	bl	8001264 <LCD_I2C_ClearAllLines>
                        LCD_I2C_SetCursor(&hlcd3, 0, 2);
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	482a      	ldr	r0, [pc, #168]	@ (8004cd8 <ManualCalibration+0x478>)
 8004c30:	f7fc faec 	bl	800120c <LCD_I2C_SetCursor>
                        LCD_I2C_printStr(&hlcd3, "Calibration Done!");
 8004c34:	4929      	ldr	r1, [pc, #164]	@ (8004cdc <ManualCalibration+0x47c>)
 8004c36:	4828      	ldr	r0, [pc, #160]	@ (8004cd8 <ManualCalibration+0x478>)
 8004c38:	f7fc faae 	bl	8001198 <LCD_I2C_printStr>
                       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c3c:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <ManualCalibration+0x480>)
 8004c3e:	6818      	ldr	r0, [r3, #0]
 8004c40:	f107 0108 	add.w	r1, r7, #8
 8004c44:	2300      	movs	r3, #0
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295
 8004c4a:	f00e f945 	bl	8012ed8 <xQueueGenericSend>
                       axes[0].motors[0]->currentPositionMM = 0.0f;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[0].motors[1]->currentPositionMM = pcbHeight;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ce4 <ManualCalibration+0x484>)
 8004c60:	6812      	ldr	r2, [r2, #0]
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[0]->currentPositionMM = 0.0f;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3328      	adds	r3, #40	@ 0x28
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[1]->currentPositionMM = 0.0f;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	3328      	adds	r3, #40	@ 0x28
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84


                        motorGroup = 0;  // Reset as needed
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <ManualCalibration+0x464>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
                        Pressed = 0;     // Reset the press counter
 8004c88:	4b17      	ldr	r3, [pc, #92]	@ (8004ce8 <ManualCalibration+0x488>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
                        //The numbers below don't matter they are just to leave the function
                        motors[0].calib[1] = 1;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004c94:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        motors[1].calib[1] = 1;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	33b0      	adds	r3, #176	@ 0xb0
 8004c9c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ca0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        motors[2].calib[1] = 1;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004caa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004cae:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
                        motors[3].calib[1] = 1;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	f503 7304 	add.w	r3, r3, #528	@ 0x210
 8004cb8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004cbc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

                        break;
 8004cc0:	e018      	b.n	8004cf4 <ManualCalibration+0x494>
 8004cc2:	bf00      	nop
 8004cc4:	2000affc 	.word	0x2000affc
 8004cc8:	42b40000 	.word	0x42b40000
 8004ccc:	2000002c 	.word	0x2000002c
 8004cd0:	42700000 	.word	0x42700000
 8004cd4:	20000040 	.word	0x20000040
 8004cd8:	20000018 	.word	0x20000018
 8004cdc:	08018b2c 	.word	0x08018b2c
 8004ce0:	20008a50 	.word	0x20008a50
 8004ce4:	20008a70 	.word	0x20008a70
 8004ce8:	2000affd 	.word	0x2000affd
                        break;

                    default:
                        // If somehow we get more than 2, just reset
                        Pressed = 0;
 8004cec:	4b7b      	ldr	r3, [pc, #492]	@ (8004edc <ManualCalibration+0x67c>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
                        break;
 8004cf2:	bf00      	nop


    /* --- Manual motor control via buttons --- */

    /* Example: BtnUp pressed -> move motor (motorGroup) in the forward direction */
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	487a      	ldr	r0, [pc, #488]	@ (8004ee0 <ManualCalibration+0x680>)
 8004cf8:	f003 f874 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d12d      	bne.n	8004d5e <ManualCalibration+0x4fe>
        cmd.motorIndex = motorGroup;
 8004d02:	4b78      	ldr	r3, [pc, #480]	@ (8004ee4 <ManualCalibration+0x684>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;  // Set forward direction
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d10:	4b75      	ldr	r3, [pc, #468]	@ (8004ee8 <ManualCalibration+0x688>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	f107 0108 	add.w	r1, r7, #8
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d1e:	f00e f8db 	bl	8012ed8 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004d22:	2302      	movs	r3, #2
 8004d24:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d26:	4b70      	ldr	r3, [pc, #448]	@ (8004ee8 <ManualCalibration+0x688>)
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	f107 0108 	add.w	r1, r7, #8
 8004d2e:	2300      	movs	r3, #0
 8004d30:	f04f 32ff 	mov.w	r2, #4294967295
 8004d34:	f00e f8d0 	bl	8012ed8 <xQueueGenericSend>

        /* While the button remains pressed, yield to other tasks */
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004d38:	bf00      	nop
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	4868      	ldr	r0, [pc, #416]	@ (8004ee0 <ManualCalibration+0x680>)
 8004d3e:	f003 f851 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f8      	beq.n	8004d3a <ManualCalibration+0x4da>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.command = MOTOR_CMD_STOP;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d4c:	4b66      	ldr	r3, [pc, #408]	@ (8004ee8 <ManualCalibration+0x688>)
 8004d4e:	6818      	ldr	r0, [r3, #0]
 8004d50:	f107 0108 	add.w	r1, r7, #8
 8004d54:	2300      	movs	r3, #0
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	f00e f8bd 	bl	8012ed8 <xQueueGenericSend>
    }


    /* Example: BtnDown pressed -> move motor (motorGroup) in the reverse direction */
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004d5e:	2101      	movs	r1, #1
 8004d60:	485f      	ldr	r0, [pc, #380]	@ (8004ee0 <ManualCalibration+0x680>)
 8004d62:	f003 f83f 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d130      	bne.n	8004dce <ManualCalibration+0x56e>
        cmd.motorIndex = motorGroup;
 8004d6c:	4b5d      	ldr	r3, [pc, #372]	@ (8004ee4 <ManualCalibration+0x684>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004d72:	2303      	movs	r3, #3
 8004d74:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;  // Set reverse direction
 8004d76:	2300      	movs	r3, #0
 8004d78:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <ManualCalibration+0x688>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	f107 0108 	add.w	r1, r7, #8
 8004d82:	2300      	movs	r3, #0
 8004d84:	f04f 32ff 	mov.w	r2, #4294967295
 8004d88:	f00e f8a6 	bl	8012ed8 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004d90:	4b55      	ldr	r3, [pc, #340]	@ (8004ee8 <ManualCalibration+0x688>)
 8004d92:	6818      	ldr	r0, [r3, #0]
 8004d94:	f107 0108 	add.w	r1, r7, #8
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9e:	f00e f89b 	bl	8012ed8 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004da2:	bf00      	nop
 8004da4:	2101      	movs	r1, #1
 8004da6:	484e      	ldr	r0, [pc, #312]	@ (8004ee0 <ManualCalibration+0x680>)
 8004da8:	f003 f81c 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0f8      	beq.n	8004da4 <ManualCalibration+0x544>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup;
 8004db2:	4b4c      	ldr	r3, [pc, #304]	@ (8004ee4 <ManualCalibration+0x684>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004db8:	2301      	movs	r3, #1
 8004dba:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	@ (8004ee8 <ManualCalibration+0x688>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	f107 0108 	add.w	r1, r7, #8
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	f00e f885 	bl	8012ed8 <xQueueGenericSend>
    }


    /* Example: BtnRight pressed -> move paired motor (motorGroup+2) forward */
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004dce:	2102      	movs	r1, #2
 8004dd0:	4846      	ldr	r0, [pc, #280]	@ (8004eec <ManualCalibration+0x68c>)
 8004dd2:	f003 f807 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d134      	bne.n	8004e46 <ManualCalibration+0x5e6>
        cmd.motorIndex = motorGroup + 2;
 8004ddc:	4b41      	ldr	r3, [pc, #260]	@ (8004ee4 <ManualCalibration+0x684>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3302      	adds	r3, #2
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004de6:	2303      	movs	r3, #3
 8004de8:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;
 8004dea:	2301      	movs	r3, #1
 8004dec:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004dee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <ManualCalibration+0x688>)
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	f107 0108 	add.w	r1, r7, #8
 8004df6:	2300      	movs	r3, #0
 8004df8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dfc:	f00e f86c 	bl	8012ed8 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],1);
        cmd.command = MOTOR_CMD_START;
 8004e00:	2302      	movs	r3, #2
 8004e02:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e04:	4b38      	ldr	r3, [pc, #224]	@ (8004ee8 <ManualCalibration+0x688>)
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f107 0108 	add.w	r1, r7, #8
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e12:	f00e f861 	bl	8012ed8 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004e16:	bf00      	nop
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4834      	ldr	r0, [pc, #208]	@ (8004eec <ManualCalibration+0x68c>)
 8004e1c:	f002 ffe2 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0f8      	beq.n	8004e18 <ManualCalibration+0x5b8>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup + 2;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee4 <ManualCalibration+0x684>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	3302      	adds	r3, #2
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004e30:	2301      	movs	r3, #1
 8004e32:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e34:	4b2c      	ldr	r3, [pc, #176]	@ (8004ee8 <ManualCalibration+0x688>)
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	f107 0108 	add.w	r1, r7, #8
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e42:	f00e f849 	bl	8012ed8 <xQueueGenericSend>
    }



    /* Example: BtnLeft pressed -> move paired motor (motorGroup+2) in reverse */
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004e46:	2102      	movs	r1, #2
 8004e48:	4829      	ldr	r0, [pc, #164]	@ (8004ef0 <ManualCalibration+0x690>)
 8004e4a:	f002 ffcb 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d134      	bne.n	8004ebe <ManualCalibration+0x65e>
        cmd.motorIndex = motorGroup + 2;
 8004e54:	4b23      	ldr	r3, [pc, #140]	@ (8004ee4 <ManualCalibration+0x684>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	3302      	adds	r3, #2
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;
 8004e62:	2300      	movs	r3, #0
 8004e64:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e66:	4b20      	ldr	r3, [pc, #128]	@ (8004ee8 <ManualCalibration+0x688>)
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	f107 0108 	add.w	r1, r7, #8
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	f00e f830 	bl	8012ed8 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],0);

        cmd.command = MOTOR_CMD_START;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <ManualCalibration+0x688>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	f107 0108 	add.w	r1, r7, #8
 8004e84:	2300      	movs	r3, #0
 8004e86:	f04f 32ff 	mov.w	r2, #4294967295
 8004e8a:	f00e f825 	bl	8012ed8 <xQueueGenericSend>



    while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004e8e:	bf00      	nop
 8004e90:	2102      	movs	r1, #2
 8004e92:	4817      	ldr	r0, [pc, #92]	@ (8004ef0 <ManualCalibration+0x690>)
 8004e94:	f002 ffa6 	bl	8007de4 <HAL_GPIO_ReadPin>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0f8      	beq.n	8004e90 <ManualCalibration+0x630>
                //vTaskDelay(pdMS_TO_TICKS(10));
            }
            cmd.motorIndex = motorGroup + 2;
 8004e9e:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <ManualCalibration+0x684>)
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	72bb      	strb	r3, [r7, #10]
            cmd.command    = MOTOR_CMD_STOP;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004eac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <ManualCalibration+0x688>)
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	f107 0108 	add.w	r1, r7, #8
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	f00e f80d 	bl	8012ed8 <xQueueGenericSend>
    while(!calibrationState()){
 8004ebe:	f7ff fca3 	bl	8004808 <calibrationState>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	f083 0301 	eor.w	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f47f acf9 	bne.w	80048c2 <ManualCalibration+0x62>
        }
    }
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3738      	adds	r7, #56	@ 0x38
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2000affd 	.word	0x2000affd
 8004ee0:	40021400 	.word	0x40021400
 8004ee4:	2000affc 	.word	0x2000affc
 8004ee8:	20008a50 	.word	0x20008a50
 8004eec:	40020c00 	.word	0x40020c00
 8004ef0:	40021800 	.word	0x40021800

08004ef4 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0

}
 8004ef8:	bf00      	nop
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
return 0;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr

08004f12 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a07      	ldr	r2, [pc, #28]	@ (8004f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a06      	ldr	r2, [pc, #24]	@ (8004f58 <vApplicationGetIdleTaskMemory+0x30>)
 8004f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	2000b004 	.word	0x2000b004
 8004f58:	2000b064 	.word	0x2000b064

08004f5c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	4603      	mov	r3, r0
 8004f64:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8004f66:	88fb      	ldrh	r3, [r7, #6]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6c:	d102      	bne.n	8004f74 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 8004f6e:	4b04      	ldr	r3, [pc, #16]	@ (8004f80 <HAL_GPIO_EXTI_Callback+0x24>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	701a      	strb	r2, [r3, #0]
    }

}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	2000c258 	.word	0x2000c258

08004f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f8a:	f002 f842 	bl	8007012 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f8e:	f000 f8cb 	bl	8005128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f92:	f000 fe57 	bl	8005c44 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f96:	f000 fe03 	bl	8005ba0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004f9a:	f000 fd73 	bl	8005a84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004f9e:	f000 fdd1 	bl	8005b44 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8004fa2:	f000 fbf9 	bl	8005798 <MX_TIM7_Init>
  MX_TIM4_Init();
 8004fa6:	f000 fb45 	bl	8005634 <MX_TIM4_Init>
  MX_TIM2_Init();
 8004faa:	f000 fa53 	bl	8005454 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004fae:	f000 fd39 	bl	8005a24 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004fb2:	f009 f811 	bl	800dfd8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8004fb6:	f000 f963 	bl	8005280 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004fba:	f000 fac3 	bl	8005544 <MX_TIM3_Init>
  MX_TIM14_Init();
 8004fbe:	f000 fc83 	bl	80058c8 <MX_TIM14_Init>
  MX_TIM5_Init();
 8004fc2:	f000 fb8d 	bl	80056e0 <MX_TIM5_Init>
  MX_TIM9_Init();
 8004fc6:	f000 fc1d 	bl	8005804 <MX_TIM9_Init>
  MX_I2C1_Init();
 8004fca:	f000 f919 	bl	8005200 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004fce:	f000 fd89 	bl	8005ae4 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004fd2:	f000 fcc7 	bl	8005964 <MX_UART4_Init>
  MX_UART5_Init();
 8004fd6:	f000 fcf5 	bl	80059c4 <MX_UART5_Init>
  MX_TIM1_Init();
 8004fda:	f000 f98f 	bl	80052fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8004fde:	4840      	ldr	r0, [pc, #256]	@ (80050e0 <main+0x15c>)
 8004fe0:	f7fc f876 	bl	80010d0 <LCD_I2C_Init>
 // LCD_I2C_Clear(&hlcd3);

  SERVO_Init(&hservo1);
 8004fe4:	483f      	ldr	r0, [pc, #252]	@ (80050e4 <main+0x160>)
 8004fe6:	f7fe fbf7 	bl	80037d8 <SERVO_Init>
  SERVO_Init(&hservo2);
 8004fea:	483f      	ldr	r0, [pc, #252]	@ (80050e8 <main+0x164>)
 8004fec:	f7fe fbf4 	bl	80037d8 <SERVO_Init>

  ENC_Init(&henc1);
 8004ff0:	483e      	ldr	r0, [pc, #248]	@ (80050ec <main+0x168>)
 8004ff2:	f7fe fad3 	bl	800359c <ENC_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  testingEvent = xEventGroupCreate();
 8004ff6:	f00d fb88 	bl	801270a <xEventGroupCreate>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80050f0 <main+0x16c>)
 8004ffe:	6013      	str	r3, [r2, #0]
  configASSERT(testingEvent != NULL);
 8005000:	4b3b      	ldr	r3, [pc, #236]	@ (80050f0 <main+0x16c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <main+0xa0>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	607b      	str	r3, [r7, #4]
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <main+0x9c>
  calibEventGroup = xEventGroupCreate();
 8005024:	f00d fb71 	bl	801270a <xEventGroupCreate>
 8005028:	4603      	mov	r3, r0
 800502a:	4a32      	ldr	r2, [pc, #200]	@ (80050f4 <main+0x170>)
 800502c:	6013      	str	r3, [r2, #0]
  configASSERT(calibEventGroup != NULL);
 800502e:	4b31      	ldr	r3, [pc, #196]	@ (80050f4 <main+0x170>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10d      	bne.n	8005052 <main+0xce>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503a:	b672      	cpsid	i
 800503c:	f383 8811 	msr	BASEPRI, r3
 8005040:	f3bf 8f6f 	isb	sy
 8005044:	f3bf 8f4f 	dsb	sy
 8005048:	b662      	cpsie	i
 800504a:	603b      	str	r3, [r7, #0]
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	e7fd      	b.n	800504e <main+0xca>

  lcdMutex = xSemaphoreCreateMutex();
 8005052:	2001      	movs	r0, #1
 8005054:	f00d ff27 	bl	8012ea6 <xQueueCreateMutex>
 8005058:	4603      	mov	r3, r0
 800505a:	4a27      	ldr	r2, [pc, #156]	@ (80050f8 <main+0x174>)
 800505c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xInitSemaphore = xSemaphoreCreateMutex();
 800505e:	2001      	movs	r0, #1
 8005060:	f00d ff21 	bl	8012ea6 <xQueueCreateMutex>
 8005064:	4603      	mov	r3, r0
 8005066:	4a25      	ldr	r2, [pc, #148]	@ (80050fc <main+0x178>)
 8005068:	6013      	str	r3, [r2, #0]
//  osThreadId_t motorTaskHandle = osThreadNew(motorControlTask, NULL, &motorTask_attributes);



  /* Create the main menu task */
  xTaskCreate(
 800506a:	2300      	movs	r3, #0
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	2304      	movs	r3, #4
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	2300      	movs	r3, #0
 8005074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005078:	4921      	ldr	r1, [pc, #132]	@ (8005100 <main+0x17c>)
 800507a:	4822      	ldr	r0, [pc, #136]	@ (8005104 <main+0x180>)
 800507c:	f00e fd34 	bl	8013ae8 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 4,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8005080:	2300      	movs	r3, #0
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	2304      	movs	r3, #4
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	2300      	movs	r3, #0
 800508a:	2280      	movs	r2, #128	@ 0x80
 800508c:	491e      	ldr	r1, [pc, #120]	@ (8005108 <main+0x184>)
 800508e:	481f      	ldr	r0, [pc, #124]	@ (800510c <main+0x188>)
 8005090:	f00e fd2a 	bl	8013ae8 <xTaskCreate>
      NULL,                     /* Task parameters */
	  tskIDLE_PRIORITY + 4,     /* Task priority */
      NULL                       /* Task handle (optional) */
  );

  xTaskCreate(
 8005094:	2300      	movs	r3, #0
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	2301      	movs	r3, #1
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050a2:	491b      	ldr	r1, [pc, #108]	@ (8005110 <main+0x18c>)
 80050a4:	481b      	ldr	r0, [pc, #108]	@ (8005114 <main+0x190>)
 80050a6:	f00e fd1f 	bl	8013ae8 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 1,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 80050aa:	2300      	movs	r3, #0
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	2303      	movs	r3, #3
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80050b8:	4917      	ldr	r1, [pc, #92]	@ (8005118 <main+0x194>)
 80050ba:	4818      	ldr	r0, [pc, #96]	@ (800511c <main+0x198>)
 80050bc:	f00e fd14 	bl	8013ae8 <xTaskCreate>
	  tskIDLE_PRIORITY + 3,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );


  xTaskCreate(
 80050c0:	2300      	movs	r3, #0
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	2302      	movs	r3, #2
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	2280      	movs	r2, #128	@ 0x80
 80050cc:	4914      	ldr	r1, [pc, #80]	@ (8005120 <main+0x19c>)
 80050ce:	4815      	ldr	r0, [pc, #84]	@ (8005124 <main+0x1a0>)
 80050d0:	f00e fd0a 	bl	8013ae8 <xTaskCreate>
  );



  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 80050d4:	f00e fe88 	bl	8013de8 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80050d8:	f00d fa32 	bl	8012540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <main+0x158>
 80050e0:	20000018 	.word	0x20000018
 80050e4:	2000002c 	.word	0x2000002c
 80050e8:	20000040 	.word	0x20000040
 80050ec:	20000000 	.word	0x20000000
 80050f0:	20008a5c 	.word	0x20008a5c
 80050f4:	20008a58 	.word	0x20008a58
 80050f8:	20008a60 	.word	0x20008a60
 80050fc:	20008a64 	.word	0x20008a64
 8005100:	08018b40 	.word	0x08018b40
 8005104:	080039a9 	.word	0x080039a9
 8005108:	08018b54 	.word	0x08018b54
 800510c:	08003b59 	.word	0x08003b59
 8005110:	08018b68 	.word	0x08018b68
 8005114:	08003c21 	.word	0x08003c21
 8005118:	08018b78 	.word	0x08018b78
 800511c:	08003e09 	.word	0x08003e09
 8005120:	08018b88 	.word	0x08018b88
 8005124:	080038f1 	.word	0x080038f1

08005128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b094      	sub	sp, #80	@ 0x50
 800512c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800512e:	f107 0320 	add.w	r3, r7, #32
 8005132:	2230      	movs	r2, #48	@ 0x30
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f011 f95d 	bl	80163f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800513c:	f107 030c 	add.w	r3, r7, #12
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800514c:	4b2a      	ldr	r3, [pc, #168]	@ (80051f8 <SystemClock_Config+0xd0>)
 800514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005150:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <SystemClock_Config+0xd0>)
 8005152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005156:	6413      	str	r3, [r2, #64]	@ 0x40
 8005158:	4b27      	ldr	r3, [pc, #156]	@ (80051f8 <SystemClock_Config+0xd0>)
 800515a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005160:	60bb      	str	r3, [r7, #8]
 8005162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005164:	4b25      	ldr	r3, [pc, #148]	@ (80051fc <SystemClock_Config+0xd4>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <SystemClock_Config+0xd4>)
 800516a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	4b22      	ldr	r3, [pc, #136]	@ (80051fc <SystemClock_Config+0xd4>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800517c:	2301      	movs	r3, #1
 800517e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005186:	2302      	movs	r3, #2
 8005188:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800518a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8005190:	2304      	movs	r3, #4
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8005194:	23d8      	movs	r3, #216	@ 0xd8
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005198:	2302      	movs	r3, #2
 800519a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800519c:	2309      	movs	r3, #9
 800519e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051a0:	f107 0320 	add.w	r3, r7, #32
 80051a4:	4618      	mov	r0, r3
 80051a6:	f003 fc57 	bl	8008a58 <HAL_RCC_OscConfig>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80051b0:	f000 fe9c 	bl	8005eec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80051b4:	f003 fc00 	bl	80089b8 <HAL_PWREx_EnableOverDrive>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80051be:	f000 fe95 	bl	8005eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051c2:	230f      	movs	r3, #15
 80051c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051c6:	2302      	movs	r3, #2
 80051c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051ca:	2300      	movs	r3, #0
 80051cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80051ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80051d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80051d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80051d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80051da:	f107 030c 	add.w	r3, r7, #12
 80051de:	2107      	movs	r1, #7
 80051e0:	4618      	mov	r0, r3
 80051e2:	f003 fedd 	bl	8008fa0 <HAL_RCC_ClockConfig>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80051ec:	f000 fe7e 	bl	8005eec <Error_Handler>
  }
}
 80051f0:	bf00      	nop
 80051f2:	3750      	adds	r7, #80	@ 0x50
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40023800 	.word	0x40023800
 80051fc:	40007000 	.word	0x40007000

08005200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005206:	4a1c      	ldr	r2, [pc, #112]	@ (8005278 <MX_I2C1_Init+0x78>)
 8005208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800520a:	4b1a      	ldr	r3, [pc, #104]	@ (8005274 <MX_I2C1_Init+0x74>)
 800520c:	4a1b      	ldr	r2, [pc, #108]	@ (800527c <MX_I2C1_Init+0x7c>)
 800520e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005210:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005212:	2200      	movs	r2, #0
 8005214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005216:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005218:	2201      	movs	r2, #1
 800521a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800521c:	4b15      	ldr	r3, [pc, #84]	@ (8005274 <MX_I2C1_Init+0x74>)
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005222:	4b14      	ldr	r3, [pc, #80]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005224:	2200      	movs	r2, #0
 8005226:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005228:	4b12      	ldr	r3, [pc, #72]	@ (8005274 <MX_I2C1_Init+0x74>)
 800522a:	2200      	movs	r2, #0
 800522c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800522e:	4b11      	ldr	r3, [pc, #68]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005230:	2200      	movs	r2, #0
 8005232:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005234:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005236:	2200      	movs	r2, #0
 8005238:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800523a:	480e      	ldr	r0, [pc, #56]	@ (8005274 <MX_I2C1_Init+0x74>)
 800523c:	f002 fe1c 	bl	8007e78 <HAL_I2C_Init>
 8005240:	4603      	mov	r3, r0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d001      	beq.n	800524a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005246:	f000 fe51 	bl	8005eec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800524a:	2100      	movs	r1, #0
 800524c:	4809      	ldr	r0, [pc, #36]	@ (8005274 <MX_I2C1_Init+0x74>)
 800524e:	f003 f9e1 	bl	8008614 <HAL_I2CEx_ConfigAnalogFilter>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005258:	f000 fe48 	bl	8005eec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800525c:	2100      	movs	r1, #0
 800525e:	4805      	ldr	r0, [pc, #20]	@ (8005274 <MX_I2C1_Init+0x74>)
 8005260:	f003 fa23 	bl	80086aa <HAL_I2CEx_ConfigDigitalFilter>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800526a:	f000 fe3f 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800526e:	bf00      	nop
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	2000b264 	.word	0x2000b264
 8005278:	40005400 	.word	0x40005400
 800527c:	20404768 	.word	0x20404768

08005280 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005284:	4b1b      	ldr	r3, [pc, #108]	@ (80052f4 <MX_SPI2_Init+0x74>)
 8005286:	4a1c      	ldr	r2, [pc, #112]	@ (80052f8 <MX_SPI2_Init+0x78>)
 8005288:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800528a:	4b1a      	ldr	r3, [pc, #104]	@ (80052f4 <MX_SPI2_Init+0x74>)
 800528c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005290:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005292:	4b18      	ldr	r3, [pc, #96]	@ (80052f4 <MX_SPI2_Init+0x74>)
 8005294:	2200      	movs	r2, #0
 8005296:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005298:	4b16      	ldr	r3, [pc, #88]	@ (80052f4 <MX_SPI2_Init+0x74>)
 800529a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800529e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052a0:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052a6:	4b13      	ldr	r3, [pc, #76]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052b2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052b6:	2238      	movs	r2, #56	@ 0x38
 80052b8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052ba:	4b0e      	ldr	r3, [pc, #56]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052bc:	2200      	movs	r2, #0
 80052be:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c6:	4b0b      	ldr	r3, [pc, #44]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80052cc:	4b09      	ldr	r3, [pc, #36]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052ce:	2207      	movs	r2, #7
 80052d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80052d2:	4b08      	ldr	r3, [pc, #32]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80052d8:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052da:	2208      	movs	r2, #8
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80052de:	4805      	ldr	r0, [pc, #20]	@ (80052f4 <MX_SPI2_Init+0x74>)
 80052e0:	f004 fca6 	bl	8009c30 <HAL_SPI_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80052ea:	f000 fdff 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80052ee:	bf00      	nop
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	2000b2b8 	.word	0x2000b2b8
 80052f8:	40003800 	.word	0x40003800

080052fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b09a      	sub	sp, #104	@ 0x68
 8005300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005302:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005306:	2200      	movs	r2, #0
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	609a      	str	r2, [r3, #8]
 800530e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005310:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	605a      	str	r2, [r3, #4]
 800531a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800531c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
 800532c:	615a      	str	r2, [r3, #20]
 800532e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005330:	1d3b      	adds	r3, r7, #4
 8005332:	222c      	movs	r2, #44	@ 0x2c
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f011 f85d 	bl	80163f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800533c:	4b43      	ldr	r3, [pc, #268]	@ (800544c <MX_TIM1_Init+0x150>)
 800533e:	4a44      	ldr	r2, [pc, #272]	@ (8005450 <MX_TIM1_Init+0x154>)
 8005340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8005342:	4b42      	ldr	r3, [pc, #264]	@ (800544c <MX_TIM1_Init+0x150>)
 8005344:	22d7      	movs	r2, #215	@ 0xd7
 8005346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005348:	4b40      	ldr	r3, [pc, #256]	@ (800544c <MX_TIM1_Init+0x150>)
 800534a:	2200      	movs	r2, #0
 800534c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800534e:	4b3f      	ldr	r3, [pc, #252]	@ (800544c <MX_TIM1_Init+0x150>)
 8005350:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005356:	4b3d      	ldr	r3, [pc, #244]	@ (800544c <MX_TIM1_Init+0x150>)
 8005358:	2200      	movs	r2, #0
 800535a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800535c:	4b3b      	ldr	r3, [pc, #236]	@ (800544c <MX_TIM1_Init+0x150>)
 800535e:	2200      	movs	r2, #0
 8005360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005362:	4b3a      	ldr	r3, [pc, #232]	@ (800544c <MX_TIM1_Init+0x150>)
 8005364:	2200      	movs	r2, #0
 8005366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005368:	4838      	ldr	r0, [pc, #224]	@ (800544c <MX_TIM1_Init+0x150>)
 800536a:	f005 fa2b 	bl	800a7c4 <HAL_TIM_Base_Init>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005374:	f000 fdba 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005378:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800537c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800537e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005382:	4619      	mov	r1, r3
 8005384:	4831      	ldr	r0, [pc, #196]	@ (800544c <MX_TIM1_Init+0x150>)
 8005386:	f006 fa3d 	bl	800b804 <HAL_TIM_ConfigClockSource>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005390:	f000 fdac 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005394:	482d      	ldr	r0, [pc, #180]	@ (800544c <MX_TIM1_Init+0x150>)
 8005396:	f005 fb7d 	bl	800aa94 <HAL_TIM_PWM_Init>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80053a0:	f000 fda4 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a4:	2300      	movs	r3, #0
 80053a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80053a8:	2300      	movs	r3, #0
 80053aa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053ac:	2300      	movs	r3, #0
 80053ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80053b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80053b4:	4619      	mov	r1, r3
 80053b6:	4825      	ldr	r0, [pc, #148]	@ (800544c <MX_TIM1_Init+0x150>)
 80053b8:	f006 fed6 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d001      	beq.n	80053c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80053c2:	f000 fd93 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053c6:	2360      	movs	r3, #96	@ 0x60
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 80053ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80053ce:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053d4:	2300      	movs	r3, #0
 80053d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80053d8:	2300      	movs	r3, #0
 80053da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80053dc:	2300      	movs	r3, #0
 80053de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80053e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80053e4:	220c      	movs	r2, #12
 80053e6:	4619      	mov	r1, r3
 80053e8:	4818      	ldr	r0, [pc, #96]	@ (800544c <MX_TIM1_Init+0x150>)
 80053ea:	f006 f8f7 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80053f4:	f000 fd7a 	bl	8005eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80053f8:	2300      	movs	r3, #0
 80053fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80053fc:	2300      	movs	r3, #0
 80053fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005408:	2300      	movs	r3, #0
 800540a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800540c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005410:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005416:	2300      	movs	r3, #0
 8005418:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800541a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800541e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005420:	2300      	movs	r3, #0
 8005422:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005428:	1d3b      	adds	r3, r7, #4
 800542a:	4619      	mov	r1, r3
 800542c:	4807      	ldr	r0, [pc, #28]	@ (800544c <MX_TIM1_Init+0x150>)
 800542e:	f006 ff29 	bl	800c284 <HAL_TIMEx_ConfigBreakDeadTime>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d001      	beq.n	800543c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8005438:	f000 fd58 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800543c:	4803      	ldr	r0, [pc, #12]	@ (800544c <MX_TIM1_Init+0x150>)
 800543e:	f000 ff4f 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 8005442:	bf00      	nop
 8005444:	3768      	adds	r7, #104	@ 0x68
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	2000b31c 	.word	0x2000b31c
 8005450:	40010000 	.word	0x40010000

08005454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08e      	sub	sp, #56	@ 0x38
 8005458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800545a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
 8005462:	605a      	str	r2, [r3, #4]
 8005464:	609a      	str	r2, [r3, #8]
 8005466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005468:	f107 031c 	add.w	r3, r7, #28
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005474:	463b      	mov	r3, r7
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	605a      	str	r2, [r3, #4]
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	611a      	str	r2, [r3, #16]
 8005482:	615a      	str	r2, [r3, #20]
 8005484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005486:	4b2e      	ldr	r3, [pc, #184]	@ (8005540 <MX_TIM2_Init+0xec>)
 8005488:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800548c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800548e:	4b2c      	ldr	r3, [pc, #176]	@ (8005540 <MX_TIM2_Init+0xec>)
 8005490:	22d7      	movs	r2, #215	@ 0xd7
 8005492:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005494:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <MX_TIM2_Init+0xec>)
 8005496:	2200      	movs	r2, #0
 8005498:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800549a:	4b29      	ldr	r3, [pc, #164]	@ (8005540 <MX_TIM2_Init+0xec>)
 800549c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054a2:	4b27      	ldr	r3, [pc, #156]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054a8:	4b25      	ldr	r3, [pc, #148]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054ae:	4824      	ldr	r0, [pc, #144]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054b0:	f005 f988 	bl	800a7c4 <HAL_TIM_Base_Init>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80054ba:	f000 fd17 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80054be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80054c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80054c8:	4619      	mov	r1, r3
 80054ca:	481d      	ldr	r0, [pc, #116]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054cc:	f006 f99a 	bl	800b804 <HAL_TIM_ConfigClockSource>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80054d6:	f000 fd09 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80054da:	4819      	ldr	r0, [pc, #100]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054dc:	f005 fada 	bl	800aa94 <HAL_TIM_PWM_Init>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80054e6:	f000 fd01 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80054f2:	f107 031c 	add.w	r3, r7, #28
 80054f6:	4619      	mov	r1, r3
 80054f8:	4811      	ldr	r0, [pc, #68]	@ (8005540 <MX_TIM2_Init+0xec>)
 80054fa:	f006 fe35 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005504:	f000 fcf2 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005508:	2360      	movs	r3, #96	@ 0x60
 800550a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800550c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005510:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800551a:	463b      	mov	r3, r7
 800551c:	2208      	movs	r2, #8
 800551e:	4619      	mov	r1, r3
 8005520:	4807      	ldr	r0, [pc, #28]	@ (8005540 <MX_TIM2_Init+0xec>)
 8005522:	f006 f85b 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800552c:	f000 fcde 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005530:	4803      	ldr	r0, [pc, #12]	@ (8005540 <MX_TIM2_Init+0xec>)
 8005532:	f000 fed5 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 8005536:	bf00      	nop
 8005538:	3738      	adds	r7, #56	@ 0x38
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	2000b368 	.word	0x2000b368

08005544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	@ 0x38
 8005548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800554a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	609a      	str	r2, [r3, #8]
 8005556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005558:	f107 031c 	add.w	r3, r7, #28
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005564:	463b      	mov	r3, r7
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	605a      	str	r2, [r3, #4]
 800556c:	609a      	str	r2, [r3, #8]
 800556e:	60da      	str	r2, [r3, #12]
 8005570:	611a      	str	r2, [r3, #16]
 8005572:	615a      	str	r2, [r3, #20]
 8005574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005576:	4b2d      	ldr	r3, [pc, #180]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005578:	4a2d      	ldr	r2, [pc, #180]	@ (8005630 <MX_TIM3_Init+0xec>)
 800557a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 800557c:	4b2b      	ldr	r3, [pc, #172]	@ (800562c <MX_TIM3_Init+0xe8>)
 800557e:	22d7      	movs	r2, #215	@ 0xd7
 8005580:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005582:	4b2a      	ldr	r3, [pc, #168]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005584:	2200      	movs	r2, #0
 8005586:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8005588:	4b28      	ldr	r3, [pc, #160]	@ (800562c <MX_TIM3_Init+0xe8>)
 800558a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800558e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005590:	4b26      	ldr	r3, [pc, #152]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005592:	2200      	movs	r2, #0
 8005594:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005596:	4b25      	ldr	r3, [pc, #148]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005598:	2200      	movs	r2, #0
 800559a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800559c:	4823      	ldr	r0, [pc, #140]	@ (800562c <MX_TIM3_Init+0xe8>)
 800559e:	f005 f911 	bl	800a7c4 <HAL_TIM_Base_Init>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d001      	beq.n	80055ac <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80055a8:	f000 fca0 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80055b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80055b6:	4619      	mov	r1, r3
 80055b8:	481c      	ldr	r0, [pc, #112]	@ (800562c <MX_TIM3_Init+0xe8>)
 80055ba:	f006 f923 	bl	800b804 <HAL_TIM_ConfigClockSource>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80055c4:	f000 fc92 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80055c8:	4818      	ldr	r0, [pc, #96]	@ (800562c <MX_TIM3_Init+0xe8>)
 80055ca:	f005 fa63 	bl	800aa94 <HAL_TIM_PWM_Init>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d001      	beq.n	80055d8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80055d4:	f000 fc8a 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80055e0:	f107 031c 	add.w	r3, r7, #28
 80055e4:	4619      	mov	r1, r3
 80055e6:	4811      	ldr	r0, [pc, #68]	@ (800562c <MX_TIM3_Init+0xe8>)
 80055e8:	f006 fdbe 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80055f2:	f000 fc7b 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80055f6:	2360      	movs	r3, #96	@ 0x60
 80055f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80055fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80055fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005600:	2300      	movs	r3, #0
 8005602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005608:	463b      	mov	r3, r7
 800560a:	2208      	movs	r2, #8
 800560c:	4619      	mov	r1, r3
 800560e:	4807      	ldr	r0, [pc, #28]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005610:	f005 ffe4 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800561a:	f000 fc67 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800561e:	4803      	ldr	r0, [pc, #12]	@ (800562c <MX_TIM3_Init+0xe8>)
 8005620:	f000 fe5e 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 8005624:	bf00      	nop
 8005626:	3738      	adds	r7, #56	@ 0x38
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	2000b3b4 	.word	0x2000b3b4
 8005630:	40000400 	.word	0x40000400

08005634 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	@ 0x30
 8005638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	2224      	movs	r2, #36	@ 0x24
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f010 fed7 	bl	80163f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005648:	463b      	mov	r3, r7
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005652:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 8005654:	4a21      	ldr	r2, [pc, #132]	@ (80056dc <MX_TIM4_Init+0xa8>)
 8005656:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005658:	4b1f      	ldr	r3, [pc, #124]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800565e:	4b1e      	ldr	r3, [pc, #120]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 8005660:	2200      	movs	r2, #0
 8005662:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800;
 8005664:	4b1c      	ldr	r3, [pc, #112]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 8005666:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800566a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800566c:	4b1a      	ldr	r3, [pc, #104]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005672:	4b19      	ldr	r3, [pc, #100]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 8005674:	2200      	movs	r2, #0
 8005676:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005678:	2303      	movs	r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800567c:	2300      	movs	r3, #0
 800567e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005680:	2301      	movs	r3, #1
 8005682:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005684:	2300      	movs	r3, #0
 8005686:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8005688:	230f      	movs	r3, #15
 800568a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800568c:	2300      	movs	r3, #0
 800568e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005690:	2301      	movs	r3, #1
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005694:	2300      	movs	r3, #0
 8005696:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8005698:	230f      	movs	r3, #15
 800569a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800569c:	f107 030c 	add.w	r3, r7, #12
 80056a0:	4619      	mov	r1, r3
 80056a2:	480d      	ldr	r0, [pc, #52]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 80056a4:	f005 fd5e 	bl	800b164 <HAL_TIM_Encoder_Init>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80056ae:	f000 fc1d 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80056ba:	463b      	mov	r3, r7
 80056bc:	4619      	mov	r1, r3
 80056be:	4806      	ldr	r0, [pc, #24]	@ (80056d8 <MX_TIM4_Init+0xa4>)
 80056c0:	f006 fd52 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80056ca:	f000 fc0f 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80056ce:	bf00      	nop
 80056d0:	3730      	adds	r7, #48	@ 0x30
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	2000b400 	.word	0x2000b400
 80056dc:	40000800 	.word	0x40000800

080056e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056e6:	f107 031c 	add.w	r3, r7, #28
 80056ea:	2200      	movs	r2, #0
 80056ec:	601a      	str	r2, [r3, #0]
 80056ee:	605a      	str	r2, [r3, #4]
 80056f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056f2:	463b      	mov	r3, r7
 80056f4:	2200      	movs	r2, #0
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	60da      	str	r2, [r3, #12]
 80056fe:	611a      	str	r2, [r3, #16]
 8005700:	615a      	str	r2, [r3, #20]
 8005702:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005704:	4b22      	ldr	r3, [pc, #136]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005706:	4a23      	ldr	r2, [pc, #140]	@ (8005794 <MX_TIM5_Init+0xb4>)
 8005708:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 800570a:	4b21      	ldr	r3, [pc, #132]	@ (8005790 <MX_TIM5_Init+0xb0>)
 800570c:	22d7      	movs	r2, #215	@ 0xd7
 800570e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005710:	4b1f      	ldr	r3, [pc, #124]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005712:	2200      	movs	r2, #0
 8005714:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005718:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800571c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800571e:	4b1c      	ldr	r3, [pc, #112]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005720:	2200      	movs	r2, #0
 8005722:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005724:	4b1a      	ldr	r3, [pc, #104]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005726:	2200      	movs	r2, #0
 8005728:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800572a:	4819      	ldr	r0, [pc, #100]	@ (8005790 <MX_TIM5_Init+0xb0>)
 800572c:	f005 f9b2 	bl	800aa94 <HAL_TIM_PWM_Init>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8005736:	f000 fbd9 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800573a:	2300      	movs	r3, #0
 800573c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800573e:	2300      	movs	r3, #0
 8005740:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005742:	f107 031c 	add.w	r3, r7, #28
 8005746:	4619      	mov	r1, r3
 8005748:	4811      	ldr	r0, [pc, #68]	@ (8005790 <MX_TIM5_Init+0xb0>)
 800574a:	f006 fd0d 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005754:	f000 fbca 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005758:	2360      	movs	r3, #96	@ 0x60
 800575a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800575c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005760:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005762:	2300      	movs	r3, #0
 8005764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800576a:	463b      	mov	r3, r7
 800576c:	2200      	movs	r2, #0
 800576e:	4619      	mov	r1, r3
 8005770:	4807      	ldr	r0, [pc, #28]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005772:	f005 ff33 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 800577c:	f000 fbb6 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005780:	4803      	ldr	r0, [pc, #12]	@ (8005790 <MX_TIM5_Init+0xb0>)
 8005782:	f000 fdad 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 8005786:	bf00      	nop
 8005788:	3728      	adds	r7, #40	@ 0x28
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	2000b44c 	.word	0x2000b44c
 8005794:	40000c00 	.word	0x40000c00

08005798 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800579e:	1d3b      	adds	r3, r7, #4
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057a8:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <MX_TIM7_Init+0x68>)
 80057ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80057ae:	4b13      	ldr	r3, [pc, #76]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057b0:	22d7      	movs	r2, #215	@ 0xd7
 80057b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b4:	4b11      	ldr	r3, [pc, #68]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80057ba:	4b10      	ldr	r3, [pc, #64]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c2:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80057c8:	480c      	ldr	r0, [pc, #48]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057ca:	f004 fffb 	bl	800a7c4 <HAL_TIM_Base_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80057d4:	f000 fb8a 	bl	8005eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057d8:	2300      	movs	r3, #0
 80057da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057dc:	2300      	movs	r3, #0
 80057de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	4619      	mov	r1, r3
 80057e4:	4805      	ldr	r0, [pc, #20]	@ (80057fc <MX_TIM7_Init+0x64>)
 80057e6:	f006 fcbf 	bl	800c168 <HAL_TIMEx_MasterConfigSynchronization>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80057f0:	f000 fb7c 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	2000b498 	.word	0x2000b498
 8005800:	40001400 	.word	0x40001400

08005804 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08c      	sub	sp, #48	@ 0x30
 8005808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800580a:	f107 0320 	add.w	r3, r7, #32
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	605a      	str	r2, [r3, #4]
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	611a      	str	r2, [r3, #16]
 8005826:	615a      	str	r2, [r3, #20]
 8005828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800582a:	4b25      	ldr	r3, [pc, #148]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 800582c:	4a25      	ldr	r2, [pc, #148]	@ (80058c4 <MX_TIM9_Init+0xc0>)
 800582e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8005830:	4b23      	ldr	r3, [pc, #140]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 8005832:	226b      	movs	r2, #107	@ 0x6b
 8005834:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005836:	4b22      	ldr	r3, [pc, #136]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 8005838:	2200      	movs	r2, #0
 800583a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800583c:	4b20      	ldr	r3, [pc, #128]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 800583e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005842:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005844:	4b1e      	ldr	r3, [pc, #120]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 8005846:	2200      	movs	r2, #0
 8005848:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800584a:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 800584c:	2200      	movs	r2, #0
 800584e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005850:	481b      	ldr	r0, [pc, #108]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 8005852:	f004 ffb7 	bl	800a7c4 <HAL_TIM_Base_Init>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800585c:	f000 fb46 	bl	8005eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005864:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005866:	f107 0320 	add.w	r3, r7, #32
 800586a:	4619      	mov	r1, r3
 800586c:	4814      	ldr	r0, [pc, #80]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 800586e:	f005 ffc9 	bl	800b804 <HAL_TIM_ConfigClockSource>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8005878:	f000 fb38 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800587c:	4810      	ldr	r0, [pc, #64]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 800587e:	f005 f909 	bl	800aa94 <HAL_TIM_PWM_Init>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d001      	beq.n	800588c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8005888:	f000 fb30 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800588c:	2360      	movs	r3, #96	@ 0x60
 800588e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8005890:	230a      	movs	r3, #10
 8005892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005898:	2300      	movs	r3, #0
 800589a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	2200      	movs	r2, #0
 80058a0:	4619      	mov	r1, r3
 80058a2:	4807      	ldr	r0, [pc, #28]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 80058a4:	f005 fe9a 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80058ae:	f000 fb1d 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80058b2:	4803      	ldr	r0, [pc, #12]	@ (80058c0 <MX_TIM9_Init+0xbc>)
 80058b4:	f000 fd14 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 80058b8:	bf00      	nop
 80058ba:	3730      	adds	r7, #48	@ 0x30
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000b4e4 	.word	0x2000b4e4
 80058c4:	40014000 	.word	0x40014000

080058c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	2200      	movs	r2, #0
 80058d2:	601a      	str	r2, [r3, #0]
 80058d4:	605a      	str	r2, [r3, #4]
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	60da      	str	r2, [r3, #12]
 80058da:	611a      	str	r2, [r3, #16]
 80058dc:	615a      	str	r2, [r3, #20]
 80058de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80058e0:	4b1e      	ldr	r3, [pc, #120]	@ (800595c <MX_TIM14_Init+0x94>)
 80058e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005960 <MX_TIM14_Init+0x98>)
 80058e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 80058e6:	4b1d      	ldr	r3, [pc, #116]	@ (800595c <MX_TIM14_Init+0x94>)
 80058e8:	226b      	movs	r2, #107	@ 0x6b
 80058ea:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058ec:	4b1b      	ldr	r3, [pc, #108]	@ (800595c <MX_TIM14_Init+0x94>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80058f2:	4b1a      	ldr	r3, [pc, #104]	@ (800595c <MX_TIM14_Init+0x94>)
 80058f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80058f8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058fa:	4b18      	ldr	r3, [pc, #96]	@ (800595c <MX_TIM14_Init+0x94>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005900:	4b16      	ldr	r3, [pc, #88]	@ (800595c <MX_TIM14_Init+0x94>)
 8005902:	2200      	movs	r2, #0
 8005904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005906:	4815      	ldr	r0, [pc, #84]	@ (800595c <MX_TIM14_Init+0x94>)
 8005908:	f004 ff5c 	bl	800a7c4 <HAL_TIM_Base_Init>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8005912:	f000 faeb 	bl	8005eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005916:	4811      	ldr	r0, [pc, #68]	@ (800595c <MX_TIM14_Init+0x94>)
 8005918:	f005 f8bc 	bl	800aa94 <HAL_TIM_PWM_Init>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8005922:	f000 fae3 	bl	8005eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005926:	2360      	movs	r3, #96	@ 0x60
 8005928:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800592a:	230a      	movs	r3, #10
 800592c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800592e:	2300      	movs	r3, #0
 8005930:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005936:	1d3b      	adds	r3, r7, #4
 8005938:	2200      	movs	r2, #0
 800593a:	4619      	mov	r1, r3
 800593c:	4807      	ldr	r0, [pc, #28]	@ (800595c <MX_TIM14_Init+0x94>)
 800593e:	f005 fe4d 	bl	800b5dc <HAL_TIM_PWM_ConfigChannel>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005948:	f000 fad0 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800594c:	4803      	ldr	r0, [pc, #12]	@ (800595c <MX_TIM14_Init+0x94>)
 800594e:	f000 fcc7 	bl	80062e0 <HAL_TIM_MspPostInit>

}
 8005952:	bf00      	nop
 8005954:	3720      	adds	r7, #32
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	2000b530 	.word	0x2000b530
 8005960:	40002000 	.word	0x40002000

08005964 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005968:	4b14      	ldr	r3, [pc, #80]	@ (80059bc <MX_UART4_Init+0x58>)
 800596a:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <MX_UART4_Init+0x5c>)
 800596c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800596e:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <MX_UART4_Init+0x58>)
 8005970:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005974:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005976:	4b11      	ldr	r3, [pc, #68]	@ (80059bc <MX_UART4_Init+0x58>)
 8005978:	2200      	movs	r2, #0
 800597a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800597c:	4b0f      	ldr	r3, [pc, #60]	@ (80059bc <MX_UART4_Init+0x58>)
 800597e:	2200      	movs	r2, #0
 8005980:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005982:	4b0e      	ldr	r3, [pc, #56]	@ (80059bc <MX_UART4_Init+0x58>)
 8005984:	2200      	movs	r2, #0
 8005986:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005988:	4b0c      	ldr	r3, [pc, #48]	@ (80059bc <MX_UART4_Init+0x58>)
 800598a:	220c      	movs	r2, #12
 800598c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800598e:	4b0b      	ldr	r3, [pc, #44]	@ (80059bc <MX_UART4_Init+0x58>)
 8005990:	2200      	movs	r2, #0
 8005992:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <MX_UART4_Init+0x58>)
 8005996:	2200      	movs	r2, #0
 8005998:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800599a:	4b08      	ldr	r3, [pc, #32]	@ (80059bc <MX_UART4_Init+0x58>)
 800599c:	2200      	movs	r2, #0
 800599e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80059a0:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <MX_UART4_Init+0x58>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80059a6:	4805      	ldr	r0, [pc, #20]	@ (80059bc <MX_UART4_Init+0x58>)
 80059a8:	f006 fd08 	bl	800c3bc <HAL_UART_Init>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80059b2:	f000 fa9b 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80059b6:	bf00      	nop
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	2000b57c 	.word	0x2000b57c
 80059c0:	40004c00 	.word	0x40004c00

080059c4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80059c8:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059ca:	4a15      	ldr	r2, [pc, #84]	@ (8005a20 <MX_UART5_Init+0x5c>)
 80059cc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80059ce:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80059d4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80059d6:	4b11      	ldr	r3, [pc, #68]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059d8:	2200      	movs	r2, #0
 80059da:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80059dc:	4b0f      	ldr	r3, [pc, #60]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059de:	2200      	movs	r2, #0
 80059e0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80059e2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80059e8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059ea:	220c      	movs	r2, #12
 80059ec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059ee:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80059f4:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <MX_UART5_Init+0x58>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <MX_UART5_Init+0x58>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005a06:	4805      	ldr	r0, [pc, #20]	@ (8005a1c <MX_UART5_Init+0x58>)
 8005a08:	f006 fcd8 	bl	800c3bc <HAL_UART_Init>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d001      	beq.n	8005a16 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8005a12:	f000 fa6b 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005a16:	bf00      	nop
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	2000b604 	.word	0x2000b604
 8005a20:	40005000 	.word	0x40005000

08005a24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005a28:	4b14      	ldr	r3, [pc, #80]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <MX_USART2_UART_Init+0x5c>)
 8005a2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005a34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005a36:	4b11      	ldr	r3, [pc, #68]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005a42:	4b0e      	ldr	r3, [pc, #56]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a4a:	220c      	movs	r2, #12
 8005a4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005a54:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005a66:	4805      	ldr	r0, [pc, #20]	@ (8005a7c <MX_USART2_UART_Init+0x58>)
 8005a68:	f006 fca8 	bl	800c3bc <HAL_UART_Init>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8005a72:	f000 fa3b 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	2000b68c 	.word	0x2000b68c
 8005a80:	40004400 	.word	0x40004400

08005a84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005a88:	4b14      	ldr	r3, [pc, #80]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005a8a:	4a15      	ldr	r2, [pc, #84]	@ (8005ae0 <MX_USART3_UART_Init+0x5c>)
 8005a8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8005a8e:	4b13      	ldr	r3, [pc, #76]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005a90:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8005a94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005a96:	4b11      	ldr	r3, [pc, #68]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005aaa:	220c      	movs	r2, #12
 8005aac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005aae:	4b0b      	ldr	r3, [pc, #44]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ab4:	4b09      	ldr	r3, [pc, #36]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005aba:	4b08      	ldr	r3, [pc, #32]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005ac0:	4b06      	ldr	r3, [pc, #24]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005ac6:	4805      	ldr	r0, [pc, #20]	@ (8005adc <MX_USART3_UART_Init+0x58>)
 8005ac8:	f006 fc78 	bl	800c3bc <HAL_UART_Init>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005ad2:	f000 fa0b 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005ad6:	bf00      	nop
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	2000b714 	.word	0x2000b714
 8005ae0:	40004800 	.word	0x40004800

08005ae4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005ae8:	4b14      	ldr	r3, [pc, #80]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005aea:	4a15      	ldr	r2, [pc, #84]	@ (8005b40 <MX_USART6_UART_Init+0x5c>)
 8005aec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8005aee:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005af4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005af6:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005afc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005b02:	4b0e      	ldr	r3, [pc, #56]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005b08:	4b0c      	ldr	r3, [pc, #48]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b0a:	220c      	movs	r2, #12
 8005b0c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b14:	4b09      	ldr	r3, [pc, #36]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b16:	2200      	movs	r2, #0
 8005b18:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b1a:	4b08      	ldr	r3, [pc, #32]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b20:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b22:	2200      	movs	r2, #0
 8005b24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005b26:	4805      	ldr	r0, [pc, #20]	@ (8005b3c <MX_USART6_UART_Init+0x58>)
 8005b28:	f006 fc48 	bl	800c3bc <HAL_UART_Init>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d001      	beq.n	8005b36 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005b32:	f000 f9db 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000b79c 	.word	0x2000b79c
 8005b40:	40011400 	.word	0x40011400

08005b44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005b48:	4b14      	ldr	r3, [pc, #80]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b4a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8005b4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005b50:	4b12      	ldr	r3, [pc, #72]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b52:	2206      	movs	r2, #6
 8005b54:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005b56:	4b11      	ldr	r3, [pc, #68]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b58:	2202      	movs	r2, #2
 8005b5a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005b62:	4b0e      	ldr	r3, [pc, #56]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b64:	2202      	movs	r2, #2
 8005b66:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005b68:	4b0c      	ldr	r3, [pc, #48]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b76:	2200      	movs	r2, #0
 8005b78:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8005b7a:	4b08      	ldr	r3, [pc, #32]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005b80:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005b86:	4805      	ldr	r0, [pc, #20]	@ (8005b9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005b88:	f002 fddb 	bl	8008742 <HAL_PCD_Init>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8005b92:	f000 f9ab 	bl	8005eec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	2000ba64 	.word	0x2000ba64

08005ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005ba6:	4b26      	ldr	r3, [pc, #152]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005baa:	4a25      	ldr	r2, [pc, #148]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005bac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bb2:	4b23      	ldr	r3, [pc, #140]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005bbe:	4b20      	ldr	r3, [pc, #128]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005bc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bca:	4b1d      	ldr	r3, [pc, #116]	@ (8005c40 <MX_DMA_Init+0xa0>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	210a      	movs	r1, #10
 8005bda:	200b      	movs	r0, #11
 8005bdc:	f001 fb22 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005be0:	200b      	movs	r0, #11
 8005be2:	f001 fb3b 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8005be6:	2200      	movs	r2, #0
 8005be8:	210a      	movs	r1, #10
 8005bea:	200c      	movs	r0, #12
 8005bec:	f001 fb1a 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005bf0:	200c      	movs	r0, #12
 8005bf2:	f001 fb33 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	210a      	movs	r1, #10
 8005bfa:	200d      	movs	r0, #13
 8005bfc:	f001 fb12 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005c00:	200d      	movs	r0, #13
 8005c02:	f001 fb2b 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 10, 0);
 8005c06:	2200      	movs	r2, #0
 8005c08:	210a      	movs	r1, #10
 8005c0a:	200e      	movs	r0, #14
 8005c0c:	f001 fb0a 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005c10:	200e      	movs	r0, #14
 8005c12:	f001 fb23 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 10, 0);
 8005c16:	2200      	movs	r2, #0
 8005c18:	210a      	movs	r1, #10
 8005c1a:	2010      	movs	r0, #16
 8005c1c:	f001 fb02 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005c20:	2010      	movs	r0, #16
 8005c22:	f001 fb1b 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005c26:	2200      	movs	r2, #0
 8005c28:	2105      	movs	r1, #5
 8005c2a:	2039      	movs	r0, #57	@ 0x39
 8005c2c:	f001 fafa 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005c30:	2039      	movs	r0, #57	@ 0x39
 8005c32:	f001 fb13 	bl	800725c <HAL_NVIC_EnableIRQ>

}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	40023800 	.word	0x40023800

08005c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08e      	sub	sp, #56	@ 0x38
 8005c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	605a      	str	r2, [r3, #4]
 8005c54:	609a      	str	r2, [r3, #8]
 8005c56:	60da      	str	r2, [r3, #12]
 8005c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005c5a:	4b94      	ldr	r3, [pc, #592]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5e:	4a93      	ldr	r2, [pc, #588]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c60:	f043 0310 	orr.w	r3, r3, #16
 8005c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c66:	4b91      	ldr	r3, [pc, #580]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c6a:	f003 0310 	and.w	r3, r3, #16
 8005c6e:	623b      	str	r3, [r7, #32]
 8005c70:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c72:	4b8e      	ldr	r3, [pc, #568]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	4a8d      	ldr	r2, [pc, #564]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c8a:	4b88      	ldr	r3, [pc, #544]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c8e:	4a87      	ldr	r2, [pc, #540]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c90:	f043 0320 	orr.w	r3, r3, #32
 8005c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c96:	4b85      	ldr	r3, [pc, #532]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c9a:	f003 0320 	and.w	r3, r3, #32
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ca2:	4b82      	ldr	r3, [pc, #520]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	4a81      	ldr	r2, [pc, #516]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cae:	4b7f      	ldr	r3, [pc, #508]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cba:	4b7c      	ldr	r3, [pc, #496]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cbe:	4a7b      	ldr	r2, [pc, #492]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cc6:	4b79      	ldr	r3, [pc, #484]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	613b      	str	r3, [r7, #16]
 8005cd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd2:	4b76      	ldr	r3, [pc, #472]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd6:	4a75      	ldr	r2, [pc, #468]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cde:	4b73      	ldr	r3, [pc, #460]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005cea:	4b70      	ldr	r3, [pc, #448]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cee:	4a6f      	ldr	r2, [pc, #444]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	4a69      	ldr	r2, [pc, #420]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005d08:	f043 0308 	orr.w	r3, r3, #8
 8005d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d0e:	4b67      	ldr	r3, [pc, #412]	@ (8005eac <MX_GPIO_Init+0x268>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f249 5185 	movw	r1, #38277	@ 0x9585
 8005d20:	4863      	ldr	r0, [pc, #396]	@ (8005eb0 <MX_GPIO_Init+0x26c>)
 8005d22:	f002 f877 	bl	8007e14 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8005d26:	2200      	movs	r2, #0
 8005d28:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005d2c:	4861      	ldr	r0, [pc, #388]	@ (8005eb4 <MX_GPIO_Init+0x270>)
 8005d2e:	f002 f871 	bl	8007e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005d32:	2200      	movs	r2, #0
 8005d34:	2140      	movs	r1, #64	@ 0x40
 8005d36:	4860      	ldr	r0, [pc, #384]	@ (8005eb8 <MX_GPIO_Init+0x274>)
 8005d38:	f002 f86c 	bl	8007e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005d3c:	f249 5385 	movw	r3, #38277	@ 0x9585
 8005d40:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d42:	2301      	movs	r3, #1
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d52:	4619      	mov	r1, r3
 8005d54:	4856      	ldr	r0, [pc, #344]	@ (8005eb0 <MX_GPIO_Init+0x26c>)
 8005d56:	f001 fe99 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005d5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005d5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d60:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4852      	ldr	r0, [pc, #328]	@ (8005ebc <MX_GPIO_Init+0x278>)
 8005d72:	f001 fe8b 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8005d76:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005d80:	2301      	movs	r3, #1
 8005d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d88:	4619      	mov	r1, r3
 8005d8a:	484d      	ldr	r0, [pc, #308]	@ (8005ec0 <MX_GPIO_Init+0x27c>)
 8005d8c:	f001 fe7e 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG4_Pin */
  GPIO_InitStruct.Pin = DIAG4_Pin;
 8005d90:	2310      	movs	r3, #16
 8005d92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d94:	2300      	movs	r3, #0
 8005d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIAG4_GPIO_Port, &GPIO_InitStruct);
 8005d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005da0:	4619      	mov	r1, r3
 8005da2:	4847      	ldr	r0, [pc, #284]	@ (8005ec0 <MX_GPIO_Init+0x27c>)
 8005da4:	f001 fe72 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG2_Pin DIAG3_Pin */
  GPIO_InitStruct.Pin = DIAG2_Pin|DIAG3_Pin;
 8005da8:	2344      	movs	r3, #68	@ 0x44
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dac:	2300      	movs	r3, #0
 8005dae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005db8:	4619      	mov	r1, r3
 8005dba:	483e      	ldr	r0, [pc, #248]	@ (8005eb4 <MX_GPIO_Init+0x270>)
 8005dbc:	f001 fe66 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLef_Pin BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLef_Pin|BtnLeft_Pin;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4839      	ldr	r0, [pc, #228]	@ (8005eb8 <MX_GPIO_Init+0x274>)
 8005dd4:	f001 fe5a 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8005dd8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005dde:	2300      	movs	r3, #0
 8005de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005de2:	2301      	movs	r3, #1
 8005de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dea:	4619      	mov	r1, r3
 8005dec:	4830      	ldr	r0, [pc, #192]	@ (8005eb0 <MX_GPIO_Init+0x26c>)
 8005dee:	f001 fe4d 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8005df2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005df6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8005e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e04:	4619      	mov	r1, r3
 8005e06:	482a      	ldr	r0, [pc, #168]	@ (8005eb0 <MX_GPIO_Init+0x26c>)
 8005e08:	f001 fe40 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8005e0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e12:	2301      	movs	r3, #1
 8005e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e16:	2300      	movs	r3, #0
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e22:	4619      	mov	r1, r3
 8005e24:	4823      	ldr	r0, [pc, #140]	@ (8005eb4 <MX_GPIO_Init+0x270>)
 8005e26:	f001 fe31 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8005e2a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e34:	2300      	movs	r3, #0
 8005e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8005e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4821      	ldr	r0, [pc, #132]	@ (8005ec4 <MX_GPIO_Init+0x280>)
 8005e40:	f001 fe24 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005e44:	2340      	movs	r3, #64	@ 0x40
 8005e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e50:	2300      	movs	r3, #0
 8005e52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4817      	ldr	r0, [pc, #92]	@ (8005eb8 <MX_GPIO_Init+0x274>)
 8005e5c:	f001 fe16 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin DIAG1_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|DIAG1_Pin;
 8005e60:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e66:	2300      	movs	r3, #0
 8005e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e72:	4619      	mov	r1, r3
 8005e74:	4810      	ldr	r0, [pc, #64]	@ (8005eb8 <MX_GPIO_Init+0x274>)
 8005e76:	f001 fe09 	bl	8007a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e82:	2301      	movs	r3, #1
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <MX_GPIO_Init+0x280>)
 8005e8e:	f001 fdfd 	bl	8007a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005e92:	2200      	movs	r2, #0
 8005e94:	2105      	movs	r1, #5
 8005e96:	2028      	movs	r0, #40	@ 0x28
 8005e98:	f001 f9c4 	bl	8007224 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005e9c:	2028      	movs	r0, #40	@ 0x28
 8005e9e:	f001 f9dd 	bl	800725c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005ea2:	bf00      	nop
 8005ea4:	3738      	adds	r7, #56	@ 0x38
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40020400 	.word	0x40020400
 8005eb8:	40021800 	.word	0x40021800
 8005ebc:	40020800 	.word	0x40020800
 8005ec0:	40021400 	.word	0x40021400
 8005ec4:	40020c00 	.word	0x40020c00

08005ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005eda:	f001 f8a7 	bl	800702c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005ede:	bf00      	nop
 8005ee0:	3708      	adds	r7, #8
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	40001000 	.word	0x40001000

08005eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ef0:	b672      	cpsid	i
}
 8005ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <Error_Handler+0x8>

08005ef8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005efe:	4b11      	ldr	r3, [pc, #68]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f02:	4a10      	ldr	r2, [pc, #64]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f12:	607b      	str	r3, [r7, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f16:	4b0b      	ldr	r3, [pc, #44]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f22:	4b08      	ldr	r3, [pc, #32]	@ (8005f44 <HAL_MspInit+0x4c>)
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f2a:	603b      	str	r3, [r7, #0]
 8005f2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005f2e:	2200      	movs	r2, #0
 8005f30:	210f      	movs	r1, #15
 8005f32:	f06f 0001 	mvn.w	r0, #1
 8005f36:	f001 f975 	bl	8007224 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800

08005f48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b0aa      	sub	sp, #168	@ 0xa8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f50:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005f54:	2200      	movs	r2, #0
 8005f56:	601a      	str	r2, [r3, #0]
 8005f58:	605a      	str	r2, [r3, #4]
 8005f5a:	609a      	str	r2, [r3, #8]
 8005f5c:	60da      	str	r2, [r3, #12]
 8005f5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f60:	f107 0310 	add.w	r3, r7, #16
 8005f64:	2284      	movs	r2, #132	@ 0x84
 8005f66:	2100      	movs	r1, #0
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f010 fa44 	bl	80163f6 <memset>
  if(hi2c->Instance==I2C1)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a22      	ldr	r2, [pc, #136]	@ (8005ffc <HAL_I2C_MspInit+0xb4>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d13c      	bne.n	8005ff2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005f78:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005f7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f82:	f107 0310 	add.w	r3, r7, #16
 8005f86:	4618      	mov	r0, r3
 8005f88:	f003 fa62 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005f92:	f7ff ffab 	bl	8005eec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f96:	4b1a      	ldr	r3, [pc, #104]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9a:	4a19      	ldr	r2, [pc, #100]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005f9c:	f043 0302 	orr.w	r3, r3, #2
 8005fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005fae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005fb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fb6:	2312      	movs	r3, #18
 8005fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005fc8:	2304      	movs	r3, #4
 8005fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fce:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	480b      	ldr	r0, [pc, #44]	@ (8006004 <HAL_I2C_MspInit+0xbc>)
 8005fd6:	f001 fd59 	bl	8007a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005fda:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fde:	4a08      	ldr	r2, [pc, #32]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005fe0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fe6:	4b06      	ldr	r3, [pc, #24]	@ (8006000 <HAL_I2C_MspInit+0xb8>)
 8005fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005fee:	60bb      	str	r3, [r7, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005ff2:	bf00      	nop
 8005ff4:	37a8      	adds	r7, #168	@ 0xa8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	40005400 	.word	0x40005400
 8006000:	40023800 	.word	0x40023800
 8006004:	40020400 	.word	0x40020400

08006008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	@ 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a25      	ldr	r2, [pc, #148]	@ (80060bc <HAL_SPI_MspInit+0xb4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d144      	bne.n	80060b4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800602a:	4b25      	ldr	r3, [pc, #148]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	4a24      	ldr	r2, [pc, #144]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006030:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006034:	6413      	str	r3, [r2, #64]	@ 0x40
 8006036:	4b22      	ldr	r3, [pc, #136]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006042:	4b1f      	ldr	r3, [pc, #124]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006046:	4a1e      	ldr	r2, [pc, #120]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006048:	f043 0304 	orr.w	r3, r3, #4
 800604c:	6313      	str	r3, [r2, #48]	@ 0x30
 800604e:	4b1c      	ldr	r3, [pc, #112]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800605a:	4b19      	ldr	r3, [pc, #100]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	4a18      	ldr	r2, [pc, #96]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006060:	f043 0302 	orr.w	r3, r3, #2
 8006064:	6313      	str	r3, [r2, #48]	@ 0x30
 8006066:	4b16      	ldr	r3, [pc, #88]	@ (80060c0 <HAL_SPI_MspInit+0xb8>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006072:	2304      	movs	r3, #4
 8006074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006076:	2302      	movs	r3, #2
 8006078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	2300      	movs	r3, #0
 800607c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800607e:	2303      	movs	r3, #3
 8006080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006082:	2305      	movs	r3, #5
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006086:	f107 0314 	add.w	r3, r7, #20
 800608a:	4619      	mov	r1, r3
 800608c:	480d      	ldr	r0, [pc, #52]	@ (80060c4 <HAL_SPI_MspInit+0xbc>)
 800608e:	f001 fcfd 	bl	8007a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8006092:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8006096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006098:	2302      	movs	r3, #2
 800609a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609c:	2300      	movs	r3, #0
 800609e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060a0:	2303      	movs	r3, #3
 80060a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80060a4:	2305      	movs	r3, #5
 80060a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	4619      	mov	r1, r3
 80060ae:	4806      	ldr	r0, [pc, #24]	@ (80060c8 <HAL_SPI_MspInit+0xc0>)
 80060b0:	f001 fcec 	bl	8007a8c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80060b4:	bf00      	nop
 80060b6:	3728      	adds	r7, #40	@ 0x28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40003800 	.word	0x40003800
 80060c0:	40023800 	.word	0x40023800
 80060c4:	40020800 	.word	0x40020800
 80060c8:	40020400 	.word	0x40020400

080060cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a42      	ldr	r2, [pc, #264]	@ (80061e4 <HAL_TIM_Base_MspInit+0x118>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d114      	bne.n	8006108 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060de:	4b42      	ldr	r3, [pc, #264]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	4a41      	ldr	r2, [pc, #260]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80060e4:	f043 0301 	orr.w	r3, r3, #1
 80060e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80060ea:	4b3f      	ldr	r3, [pc, #252]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80060f6:	2200      	movs	r2, #0
 80060f8:	2105      	movs	r1, #5
 80060fa:	201b      	movs	r0, #27
 80060fc:	f001 f892 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006100:	201b      	movs	r0, #27
 8006102:	f001 f8ab 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006106:	e068      	b.n	80061da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006110:	d114      	bne.n	800613c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006112:	4b35      	ldr	r3, [pc, #212]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	4a34      	ldr	r2, [pc, #208]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006118:	f043 0301 	orr.w	r3, r3, #1
 800611c:	6413      	str	r3, [r2, #64]	@ 0x40
 800611e:	4b32      	ldr	r3, [pc, #200]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800612a:	2200      	movs	r2, #0
 800612c:	2105      	movs	r1, #5
 800612e:	201c      	movs	r0, #28
 8006130:	f001 f878 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006134:	201c      	movs	r0, #28
 8006136:	f001 f891 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 800613a:	e04e      	b.n	80061da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2a      	ldr	r2, [pc, #168]	@ (80061ec <HAL_TIM_Base_MspInit+0x120>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d114      	bne.n	8006170 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006146:	4b28      	ldr	r3, [pc, #160]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614a:	4a27      	ldr	r2, [pc, #156]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 800614c:	f043 0302 	orr.w	r3, r3, #2
 8006150:	6413      	str	r3, [r2, #64]	@ 0x40
 8006152:	4b25      	ldr	r3, [pc, #148]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800615e:	2200      	movs	r2, #0
 8006160:	2105      	movs	r1, #5
 8006162:	201d      	movs	r0, #29
 8006164:	f001 f85e 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006168:	201d      	movs	r0, #29
 800616a:	f001 f877 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 800616e:	e034      	b.n	80061da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <HAL_TIM_Base_MspInit+0x124>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800617a:	4b1b      	ldr	r3, [pc, #108]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 800617c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617e:	4a1a      	ldr	r2, [pc, #104]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006180:	f043 0320 	orr.w	r3, r3, #32
 8006184:	6413      	str	r3, [r2, #64]	@ 0x40
 8006186:	4b18      	ldr	r3, [pc, #96]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	613b      	str	r3, [r7, #16]
 8006190:	693b      	ldr	r3, [r7, #16]
}
 8006192:	e022      	b.n	80061da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a16      	ldr	r2, [pc, #88]	@ (80061f4 <HAL_TIM_Base_MspInit+0x128>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d10c      	bne.n	80061b8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800619e:	4b12      	ldr	r3, [pc, #72]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061a2:	4a11      	ldr	r2, [pc, #68]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061aa:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
}
 80061b6:	e010      	b.n	80061da <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	@ (80061f8 <HAL_TIM_Base_MspInit+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10b      	bne.n	80061da <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80061c2:	4b09      	ldr	r3, [pc, #36]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	4a08      	ldr	r2, [pc, #32]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80061ce:	4b06      	ldr	r3, [pc, #24]	@ (80061e8 <HAL_TIM_Base_MspInit+0x11c>)
 80061d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d6:	60bb      	str	r3, [r7, #8]
 80061d8:	68bb      	ldr	r3, [r7, #8]
}
 80061da:	bf00      	nop
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40023800 	.word	0x40023800
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40001400 	.word	0x40001400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40002000 	.word	0x40002000

080061fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1b      	ldr	r2, [pc, #108]	@ (8006288 <HAL_TIM_Encoder_MspInit+0x8c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d130      	bne.n	8006280 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800621e:	4b1b      	ldr	r3, [pc, #108]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	4a1a      	ldr	r2, [pc, #104]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 8006224:	f043 0304 	orr.w	r3, r3, #4
 8006228:	6413      	str	r3, [r2, #64]	@ 0x40
 800622a:	4b18      	ldr	r3, [pc, #96]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	613b      	str	r3, [r7, #16]
 8006234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006236:	4b15      	ldr	r3, [pc, #84]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800623a:	4a14      	ldr	r2, [pc, #80]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 800623c:	f043 0308 	orr.w	r3, r3, #8
 8006240:	6313      	str	r3, [r2, #48]	@ 0x30
 8006242:	4b12      	ldr	r3, [pc, #72]	@ (800628c <HAL_TIM_Encoder_MspInit+0x90>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800624e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006252:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006254:	2302      	movs	r3, #2
 8006256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625c:	2300      	movs	r3, #0
 800625e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006260:	2302      	movs	r3, #2
 8006262:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	4619      	mov	r1, r3
 800626a:	4809      	ldr	r0, [pc, #36]	@ (8006290 <HAL_TIM_Encoder_MspInit+0x94>)
 800626c:	f001 fc0e 	bl	8007a8c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006270:	2200      	movs	r2, #0
 8006272:	2105      	movs	r1, #5
 8006274:	201e      	movs	r0, #30
 8006276:	f000 ffd5 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800627a:	201e      	movs	r0, #30
 800627c:	f000 ffee 	bl	800725c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8006280:	bf00      	nop
 8006282:	3728      	adds	r7, #40	@ 0x28
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}
 8006288:	40000800 	.word	0x40000800
 800628c:	40023800 	.word	0x40023800
 8006290:	40020c00 	.word	0x40020c00

08006294 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a0d      	ldr	r2, [pc, #52]	@ (80062d8 <HAL_TIM_PWM_MspInit+0x44>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d113      	bne.n	80062ce <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80062a6:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <HAL_TIM_PWM_MspInit+0x48>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	4a0c      	ldr	r2, [pc, #48]	@ (80062dc <HAL_TIM_PWM_MspInit+0x48>)
 80062ac:	f043 0308 	orr.w	r3, r3, #8
 80062b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062b2:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <HAL_TIM_PWM_MspInit+0x48>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	60fb      	str	r3, [r7, #12]
 80062bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80062be:	2200      	movs	r2, #0
 80062c0:	2105      	movs	r1, #5
 80062c2:	2032      	movs	r0, #50	@ 0x32
 80062c4:	f000 ffae 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80062c8:	2032      	movs	r0, #50	@ 0x32
 80062ca:	f000 ffc7 	bl	800725c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80062ce:	bf00      	nop
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	40000c00 	.word	0x40000c00
 80062dc:	40023800 	.word	0x40023800

080062e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08e      	sub	sp, #56	@ 0x38
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	605a      	str	r2, [r3, #4]
 80062f2:	609a      	str	r2, [r3, #8]
 80062f4:	60da      	str	r2, [r3, #12]
 80062f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a67      	ldr	r2, [pc, #412]	@ (800649c <HAL_TIM_MspPostInit+0x1bc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d11d      	bne.n	800633e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006302:	4b67      	ldr	r3, [pc, #412]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006306:	4a66      	ldr	r2, [pc, #408]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006308:	f043 0310 	orr.w	r3, r3, #16
 800630c:	6313      	str	r3, [r2, #48]	@ 0x30
 800630e:	4b64      	ldr	r3, [pc, #400]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	623b      	str	r3, [r7, #32]
 8006318:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 800631a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006320:	2302      	movs	r3, #2
 8006322:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006324:	2300      	movs	r3, #0
 8006326:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006328:	2300      	movs	r3, #0
 800632a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800632c:	2301      	movs	r3, #1
 800632e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8006330:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006334:	4619      	mov	r1, r3
 8006336:	485b      	ldr	r0, [pc, #364]	@ (80064a4 <HAL_TIM_MspPostInit+0x1c4>)
 8006338:	f001 fba8 	bl	8007a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800633c:	e0a9      	b.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006346:	d11d      	bne.n	8006384 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006348:	4b55      	ldr	r3, [pc, #340]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 800634a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634c:	4a54      	ldr	r2, [pc, #336]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	6313      	str	r3, [r2, #48]	@ 0x30
 8006354:	4b52      	ldr	r3, [pc, #328]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006366:	2302      	movs	r3, #2
 8006368:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800636a:	2300      	movs	r3, #0
 800636c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800636e:	2300      	movs	r3, #0
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006372:	2301      	movs	r3, #1
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800637a:	4619      	mov	r1, r3
 800637c:	484a      	ldr	r0, [pc, #296]	@ (80064a8 <HAL_TIM_MspPostInit+0x1c8>)
 800637e:	f001 fb85 	bl	8007a8c <HAL_GPIO_Init>
}
 8006382:	e086      	b.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a48      	ldr	r2, [pc, #288]	@ (80064ac <HAL_TIM_MspPostInit+0x1cc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d11c      	bne.n	80063c8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800638e:	4b44      	ldr	r3, [pc, #272]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006392:	4a43      	ldr	r2, [pc, #268]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006394:	f043 0302 	orr.w	r3, r3, #2
 8006398:	6313      	str	r3, [r2, #48]	@ 0x30
 800639a:	4b41      	ldr	r3, [pc, #260]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 800639c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	61bb      	str	r3, [r7, #24]
 80063a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80063a6:	2301      	movs	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063aa:	2302      	movs	r3, #2
 80063ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063ae:	2300      	movs	r3, #0
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b2:	2300      	movs	r3, #0
 80063b4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063b6:	2302      	movs	r3, #2
 80063b8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80063ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063be:	4619      	mov	r1, r3
 80063c0:	4839      	ldr	r0, [pc, #228]	@ (80064a8 <HAL_TIM_MspPostInit+0x1c8>)
 80063c2:	f001 fb63 	bl	8007a8c <HAL_GPIO_Init>
}
 80063c6:	e064      	b.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a38      	ldr	r2, [pc, #224]	@ (80064b0 <HAL_TIM_MspPostInit+0x1d0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d11c      	bne.n	800640c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d2:	4b33      	ldr	r3, [pc, #204]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d6:	4a32      	ldr	r2, [pc, #200]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80063de:	4b30      	ldr	r3, [pc, #192]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 80063ea:	2301      	movs	r3, #1
 80063ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ee:	2302      	movs	r3, #2
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063f6:	2300      	movs	r3, #0
 80063f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80063fa:	2302      	movs	r3, #2
 80063fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80063fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006402:	4619      	mov	r1, r3
 8006404:	482b      	ldr	r0, [pc, #172]	@ (80064b4 <HAL_TIM_MspPostInit+0x1d4>)
 8006406:	f001 fb41 	bl	8007a8c <HAL_GPIO_Init>
}
 800640a:	e042      	b.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a29      	ldr	r2, [pc, #164]	@ (80064b8 <HAL_TIM_MspPostInit+0x1d8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d11c      	bne.n	8006450 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006416:	4b22      	ldr	r3, [pc, #136]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	4a21      	ldr	r2, [pc, #132]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 800641c:	f043 0310 	orr.w	r3, r3, #16
 8006420:	6313      	str	r3, [r2, #48]	@ 0x30
 8006422:	4b1f      	ldr	r3, [pc, #124]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 800642e:	2320      	movs	r3, #32
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006432:	2302      	movs	r3, #2
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006436:	2300      	movs	r3, #0
 8006438:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800643a:	2300      	movs	r3, #0
 800643c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800643e:	2303      	movs	r3, #3
 8006440:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 8006442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006446:	4619      	mov	r1, r3
 8006448:	4816      	ldr	r0, [pc, #88]	@ (80064a4 <HAL_TIM_MspPostInit+0x1c4>)
 800644a:	f001 fb1f 	bl	8007a8c <HAL_GPIO_Init>
}
 800644e:	e020      	b.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <HAL_TIM_MspPostInit+0x1dc>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d11b      	bne.n	8006492 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800645a:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	4a10      	ldr	r2, [pc, #64]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	6313      	str	r3, [r2, #48]	@ 0x30
 8006466:	4b0e      	ldr	r3, [pc, #56]	@ (80064a0 <HAL_TIM_MspPostInit+0x1c0>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8006472:	2380      	movs	r3, #128	@ 0x80
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006476:	2302      	movs	r3, #2
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647a:	2300      	movs	r3, #0
 800647c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800647e:	2300      	movs	r3, #0
 8006480:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006482:	2309      	movs	r3, #9
 8006484:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8006486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800648a:	4619      	mov	r1, r3
 800648c:	4809      	ldr	r0, [pc, #36]	@ (80064b4 <HAL_TIM_MspPostInit+0x1d4>)
 800648e:	f001 fafd 	bl	8007a8c <HAL_GPIO_Init>
}
 8006492:	bf00      	nop
 8006494:	3738      	adds	r7, #56	@ 0x38
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40023800 	.word	0x40023800
 80064a4:	40021000 	.word	0x40021000
 80064a8:	40020400 	.word	0x40020400
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40020000 	.word	0x40020000
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40002000 	.word	0x40002000

080064c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b0b4      	sub	sp, #208	@ 0xd0
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80064dc:	2284      	movs	r2, #132	@ 0x84
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f00f ff88 	bl	80163f6 <memset>
  if(huart->Instance==UART4)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a8a      	ldr	r2, [pc, #552]	@ (8006714 <HAL_UART_MspInit+0x254>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d174      	bne.n	80065da <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80064f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80064fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006500:	4618      	mov	r0, r3
 8006502:	f002 ffa5 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800650c:	f7ff fcee 	bl	8005eec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006510:	4b81      	ldr	r3, [pc, #516]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006514:	4a80      	ldr	r2, [pc, #512]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006516:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800651a:	6413      	str	r3, [r2, #64]	@ 0x40
 800651c:	4b7e      	ldr	r3, [pc, #504]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800651e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006520:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006524:	637b      	str	r3, [r7, #52]	@ 0x34
 8006526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006528:	4b7b      	ldr	r3, [pc, #492]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800652a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800652c:	4a7a      	ldr	r2, [pc, #488]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800652e:	f043 0304 	orr.w	r3, r3, #4
 8006532:	6313      	str	r3, [r2, #48]	@ 0x30
 8006534:	4b78      	ldr	r3, [pc, #480]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	633b      	str	r3, [r7, #48]	@ 0x30
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006540:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006544:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006548:	2302      	movs	r3, #2
 800654a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800654e:	2300      	movs	r3, #0
 8006550:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006554:	2303      	movs	r3, #3
 8006556:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800655a:	2308      	movs	r3, #8
 800655c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006560:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006564:	4619      	mov	r1, r3
 8006566:	486d      	ldr	r0, [pc, #436]	@ (800671c <HAL_UART_MspInit+0x25c>)
 8006568:	f001 fa90 	bl	8007a8c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800656c:	4b6c      	ldr	r3, [pc, #432]	@ (8006720 <HAL_UART_MspInit+0x260>)
 800656e:	4a6d      	ldr	r2, [pc, #436]	@ (8006724 <HAL_UART_MspInit+0x264>)
 8006570:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006572:	4b6b      	ldr	r3, [pc, #428]	@ (8006720 <HAL_UART_MspInit+0x260>)
 8006574:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006578:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800657a:	4b69      	ldr	r3, [pc, #420]	@ (8006720 <HAL_UART_MspInit+0x260>)
 800657c:	2200      	movs	r2, #0
 800657e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006580:	4b67      	ldr	r3, [pc, #412]	@ (8006720 <HAL_UART_MspInit+0x260>)
 8006582:	2200      	movs	r2, #0
 8006584:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006586:	4b66      	ldr	r3, [pc, #408]	@ (8006720 <HAL_UART_MspInit+0x260>)
 8006588:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800658c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800658e:	4b64      	ldr	r3, [pc, #400]	@ (8006720 <HAL_UART_MspInit+0x260>)
 8006590:	2200      	movs	r2, #0
 8006592:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006594:	4b62      	ldr	r3, [pc, #392]	@ (8006720 <HAL_UART_MspInit+0x260>)
 8006596:	2200      	movs	r2, #0
 8006598:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800659a:	4b61      	ldr	r3, [pc, #388]	@ (8006720 <HAL_UART_MspInit+0x260>)
 800659c:	2200      	movs	r2, #0
 800659e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065a0:	4b5f      	ldr	r3, [pc, #380]	@ (8006720 <HAL_UART_MspInit+0x260>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065a6:	4b5e      	ldr	r3, [pc, #376]	@ (8006720 <HAL_UART_MspInit+0x260>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80065ac:	485c      	ldr	r0, [pc, #368]	@ (8006720 <HAL_UART_MspInit+0x260>)
 80065ae:	f000 fe63 	bl	8007278 <HAL_DMA_Init>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80065b8:	f7ff fc98 	bl	8005eec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a58      	ldr	r2, [pc, #352]	@ (8006720 <HAL_UART_MspInit+0x260>)
 80065c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80065c2:	4a57      	ldr	r2, [pc, #348]	@ (8006720 <HAL_UART_MspInit+0x260>)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2105      	movs	r1, #5
 80065cc:	2034      	movs	r0, #52	@ 0x34
 80065ce:	f000 fe29 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80065d2:	2034      	movs	r0, #52	@ 0x34
 80065d4:	f000 fe42 	bl	800725c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80065d8:	e254      	b.n	8006a84 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==UART5)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a52      	ldr	r2, [pc, #328]	@ (8006728 <HAL_UART_MspInit+0x268>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	f040 80a9 	bne.w	8006738 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80065e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80065ec:	2300      	movs	r3, #0
 80065ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80065f6:	4618      	mov	r0, r3
 80065f8:	f002 ff2a 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8006602:	f7ff fc73 	bl	8005eec <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006606:	4b44      	ldr	r3, [pc, #272]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800660a:	4a43      	ldr	r2, [pc, #268]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800660c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006610:	6413      	str	r3, [r2, #64]	@ 0x40
 8006612:	4b41      	ldr	r3, [pc, #260]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800661a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800661e:	4b3e      	ldr	r3, [pc, #248]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	4a3d      	ldr	r2, [pc, #244]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006624:	f043 0304 	orr.w	r3, r3, #4
 8006628:	6313      	str	r3, [r2, #48]	@ 0x30
 800662a:	4b3b      	ldr	r3, [pc, #236]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800662c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006636:	4b38      	ldr	r3, [pc, #224]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800663a:	4a37      	ldr	r2, [pc, #220]	@ (8006718 <HAL_UART_MspInit+0x258>)
 800663c:	f043 0308 	orr.w	r3, r3, #8
 8006640:	6313      	str	r3, [r2, #48]	@ 0x30
 8006642:	4b35      	ldr	r3, [pc, #212]	@ (8006718 <HAL_UART_MspInit+0x258>)
 8006644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006646:	f003 0308 	and.w	r3, r3, #8
 800664a:	627b      	str	r3, [r7, #36]	@ 0x24
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800664e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006652:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006656:	2302      	movs	r3, #2
 8006658:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	2303      	movs	r3, #3
 8006664:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006668:	2308      	movs	r3, #8
 800666a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800666e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006672:	4619      	mov	r1, r3
 8006674:	4829      	ldr	r0, [pc, #164]	@ (800671c <HAL_UART_MspInit+0x25c>)
 8006676:	f001 fa09 	bl	8007a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800667a:	2304      	movs	r3, #4
 800667c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006680:	2302      	movs	r3, #2
 8006682:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006686:	2300      	movs	r3, #0
 8006688:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800668c:	2303      	movs	r3, #3
 800668e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006692:	2308      	movs	r3, #8
 8006694:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006698:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800669c:	4619      	mov	r1, r3
 800669e:	4823      	ldr	r0, [pc, #140]	@ (800672c <HAL_UART_MspInit+0x26c>)
 80066a0:	f001 f9f4 	bl	8007a8c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80066a4:	4b22      	ldr	r3, [pc, #136]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066a6:	4a23      	ldr	r2, [pc, #140]	@ (8006734 <HAL_UART_MspInit+0x274>)
 80066a8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80066aa:	4b21      	ldr	r3, [pc, #132]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066ac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80066b0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066b8:	4b1d      	ldr	r3, [pc, #116]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066be:	4b1c      	ldr	r3, [pc, #112]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80066c4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80066c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80066cc:	4b18      	ldr	r3, [pc, #96]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80066d2:	4b17      	ldr	r3, [pc, #92]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80066d8:	4b15      	ldr	r3, [pc, #84]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066da:	2200      	movs	r2, #0
 80066dc:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066de:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80066e4:	4812      	ldr	r0, [pc, #72]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066e6:	f000 fdc7 	bl	8007278 <HAL_DMA_Init>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <HAL_UART_MspInit+0x234>
      Error_Handler();
 80066f0:	f7ff fbfc 	bl	8005eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066f8:	675a      	str	r2, [r3, #116]	@ 0x74
 80066fa:	4a0d      	ldr	r2, [pc, #52]	@ (8006730 <HAL_UART_MspInit+0x270>)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006700:	2200      	movs	r2, #0
 8006702:	2105      	movs	r1, #5
 8006704:	2035      	movs	r0, #53	@ 0x35
 8006706:	f000 fd8d 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800670a:	2035      	movs	r0, #53	@ 0x35
 800670c:	f000 fda6 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 8006710:	e1b8      	b.n	8006a84 <HAL_UART_MspInit+0x5c4>
 8006712:	bf00      	nop
 8006714:	40004c00 	.word	0x40004c00
 8006718:	40023800 	.word	0x40023800
 800671c:	40020800 	.word	0x40020800
 8006720:	2000b824 	.word	0x2000b824
 8006724:	40026040 	.word	0x40026040
 8006728:	40005000 	.word	0x40005000
 800672c:	40020c00 	.word	0x40020c00
 8006730:	2000b884 	.word	0x2000b884
 8006734:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a8b      	ldr	r2, [pc, #556]	@ (800696c <HAL_UART_MspInit+0x4ac>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d172      	bne.n	8006828 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006746:	2300      	movs	r3, #0
 8006748:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800674c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006750:	4618      	mov	r0, r3
 8006752:	f002 fe7d 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800675c:	f7ff fbc6 	bl	8005eec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006760:	4b83      	ldr	r3, [pc, #524]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006764:	4a82      	ldr	r2, [pc, #520]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800676a:	6413      	str	r3, [r2, #64]	@ 0x40
 800676c:	4b80      	ldr	r3, [pc, #512]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006778:	4b7d      	ldr	r3, [pc, #500]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800677a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677c:	4a7c      	ldr	r2, [pc, #496]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800677e:	f043 0308 	orr.w	r3, r3, #8
 8006782:	6313      	str	r3, [r2, #48]	@ 0x30
 8006784:	4b7a      	ldr	r3, [pc, #488]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006788:	f003 0308 	and.w	r3, r3, #8
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006790:	2360      	movs	r3, #96	@ 0x60
 8006792:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006796:	2302      	movs	r3, #2
 8006798:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679c:	2300      	movs	r3, #0
 800679e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a2:	2303      	movs	r3, #3
 80067a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80067a8:	2307      	movs	r3, #7
 80067aa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80067ae:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80067b2:	4619      	mov	r1, r3
 80067b4:	486f      	ldr	r0, [pc, #444]	@ (8006974 <HAL_UART_MspInit+0x4b4>)
 80067b6:	f001 f969 	bl	8007a8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80067ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067bc:	4a6f      	ldr	r2, [pc, #444]	@ (800697c <HAL_UART_MspInit+0x4bc>)
 80067be:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80067c0:	4b6d      	ldr	r3, [pc, #436]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067c2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80067c6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067c8:	4b6b      	ldr	r3, [pc, #428]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067d4:	4b68      	ldr	r3, [pc, #416]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067dc:	4b66      	ldr	r3, [pc, #408]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067de:	2200      	movs	r2, #0
 80067e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067e2:	4b65      	ldr	r3, [pc, #404]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80067e8:	4b63      	ldr	r3, [pc, #396]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80067ee:	4b62      	ldr	r3, [pc, #392]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067f0:	2200      	movs	r2, #0
 80067f2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067f4:	4b60      	ldr	r3, [pc, #384]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80067fa:	485f      	ldr	r0, [pc, #380]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 80067fc:	f000 fd3c 	bl	8007278 <HAL_DMA_Init>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8006806:	f7ff fb71 	bl	8005eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a5a      	ldr	r2, [pc, #360]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 800680e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006810:	4a59      	ldr	r2, [pc, #356]	@ (8006978 <HAL_UART_MspInit+0x4b8>)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006816:	2200      	movs	r2, #0
 8006818:	2105      	movs	r1, #5
 800681a:	2026      	movs	r0, #38	@ 0x26
 800681c:	f000 fd02 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006820:	2026      	movs	r0, #38	@ 0x26
 8006822:	f000 fd1b 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 8006826:	e12d      	b.n	8006a84 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==USART3)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a54      	ldr	r2, [pc, #336]	@ (8006980 <HAL_UART_MspInit+0x4c0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	f040 80b0 	bne.w	8006994 <HAL_UART_MspInit+0x4d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006838:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800683a:	2300      	movs	r3, #0
 800683c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006840:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006844:	4618      	mov	r0, r3
 8006846:	f002 fe03 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8006850:	f7ff fb4c 	bl	8005eec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006854:	4b46      	ldr	r3, [pc, #280]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	4a45      	ldr	r2, [pc, #276]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800685a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800685e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006860:	4b43      	ldr	r3, [pc, #268]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800686c:	4b40      	ldr	r3, [pc, #256]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800686e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006870:	4a3f      	ldr	r2, [pc, #252]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 8006872:	f043 0308 	orr.w	r3, r3, #8
 8006876:	6313      	str	r3, [r2, #48]	@ 0x30
 8006878:	4b3d      	ldr	r3, [pc, #244]	@ (8006970 <HAL_UART_MspInit+0x4b0>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8006884:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688c:	2302      	movs	r3, #2
 800688e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006892:	2301      	movs	r3, #1
 8006894:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006898:	2303      	movs	r3, #3
 800689a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800689e:	2307      	movs	r3, #7
 80068a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068a4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80068a8:	4619      	mov	r1, r3
 80068aa:	4832      	ldr	r0, [pc, #200]	@ (8006974 <HAL_UART_MspInit+0x4b4>)
 80068ac:	f001 f8ee 	bl	8007a8c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80068b0:	4b34      	ldr	r3, [pc, #208]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068b2:	4a35      	ldr	r2, [pc, #212]	@ (8006988 <HAL_UART_MspInit+0x4c8>)
 80068b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80068b6:	4b33      	ldr	r3, [pc, #204]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80068bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068be:	4b31      	ldr	r3, [pc, #196]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068c4:	4b2f      	ldr	r3, [pc, #188]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80068d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068d2:	4b2c      	ldr	r3, [pc, #176]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068d8:	4b2a      	ldr	r3, [pc, #168]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068da:	2200      	movs	r2, #0
 80068dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80068de:	4b29      	ldr	r3, [pc, #164]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068e4:	4b27      	ldr	r3, [pc, #156]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068ea:	4b26      	ldr	r3, [pc, #152]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80068f0:	4824      	ldr	r0, [pc, #144]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 80068f2:	f000 fcc1 	bl	8007278 <HAL_DMA_Init>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d001      	beq.n	8006900 <HAL_UART_MspInit+0x440>
      Error_Handler();
 80068fc:	f7ff faf6 	bl	8005eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a20      	ldr	r2, [pc, #128]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 8006904:	675a      	str	r2, [r3, #116]	@ 0x74
 8006906:	4a1f      	ldr	r2, [pc, #124]	@ (8006984 <HAL_UART_MspInit+0x4c4>)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800690c:	4b1f      	ldr	r3, [pc, #124]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 800690e:	4a20      	ldr	r2, [pc, #128]	@ (8006990 <HAL_UART_MspInit+0x4d0>)
 8006910:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006912:	4b1e      	ldr	r3, [pc, #120]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006914:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006918:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800691a:	4b1c      	ldr	r3, [pc, #112]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 800691c:	2240      	movs	r2, #64	@ 0x40
 800691e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006920:	4b1a      	ldr	r3, [pc, #104]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006922:	2200      	movs	r2, #0
 8006924:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006926:	4b19      	ldr	r3, [pc, #100]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800692c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800692e:	4b17      	ldr	r3, [pc, #92]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006930:	2200      	movs	r2, #0
 8006932:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006934:	4b15      	ldr	r3, [pc, #84]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006936:	2200      	movs	r2, #0
 8006938:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800693a:	4b14      	ldr	r3, [pc, #80]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 800693c:	2200      	movs	r2, #0
 800693e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006940:	4b12      	ldr	r3, [pc, #72]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006942:	2200      	movs	r2, #0
 8006944:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006946:	4b11      	ldr	r3, [pc, #68]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006948:	2200      	movs	r2, #0
 800694a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800694c:	480f      	ldr	r0, [pc, #60]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 800694e:	f000 fc93 	bl	8007278 <HAL_DMA_Init>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <HAL_UART_MspInit+0x49c>
      Error_Handler();
 8006958:	f7ff fac8 	bl	8005eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a0b      	ldr	r2, [pc, #44]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006960:	671a      	str	r2, [r3, #112]	@ 0x70
 8006962:	4a0a      	ldr	r2, [pc, #40]	@ (800698c <HAL_UART_MspInit+0x4cc>)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006968:	e08c      	b.n	8006a84 <HAL_UART_MspInit+0x5c4>
 800696a:	bf00      	nop
 800696c:	40004400 	.word	0x40004400
 8006970:	40023800 	.word	0x40023800
 8006974:	40020c00 	.word	0x40020c00
 8006978:	2000b8e4 	.word	0x2000b8e4
 800697c:	40026088 	.word	0x40026088
 8006980:	40004800 	.word	0x40004800
 8006984:	2000b944 	.word	0x2000b944
 8006988:	40026028 	.word	0x40026028
 800698c:	2000b9a4 	.word	0x2000b9a4
 8006990:	40026058 	.word	0x40026058
  else if(huart->Instance==USART6)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a3c      	ldr	r2, [pc, #240]	@ (8006a8c <HAL_UART_MspInit+0x5cc>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d172      	bne.n	8006a84 <HAL_UART_MspInit+0x5c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800699e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80069a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80069a4:	2300      	movs	r3, #0
 80069a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80069aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80069ae:	4618      	mov	r0, r3
 80069b0:	f002 fd4e 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <HAL_UART_MspInit+0x4fe>
      Error_Handler();
 80069ba:	f7ff fa97 	bl	8005eec <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80069be:	4b34      	ldr	r3, [pc, #208]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069c2:	4a33      	ldr	r2, [pc, #204]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069c4:	f043 0320 	orr.w	r3, r3, #32
 80069c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80069ca:	4b31      	ldr	r3, [pc, #196]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069d6:	4b2e      	ldr	r3, [pc, #184]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069da:	4a2d      	ldr	r2, [pc, #180]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069dc:	f043 0304 	orr.w	r3, r3, #4
 80069e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80069e2:	4b2b      	ldr	r3, [pc, #172]	@ (8006a90 <HAL_UART_MspInit+0x5d0>)
 80069e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e6:	f003 0304 	and.w	r3, r3, #4
 80069ea:	60fb      	str	r3, [r7, #12]
 80069ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069ee:	23c0      	movs	r3, #192	@ 0xc0
 80069f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f4:	2302      	movs	r3, #2
 80069f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a00:	2303      	movs	r3, #3
 8006a02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006a06:	2308      	movs	r3, #8
 8006a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a0c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006a10:	4619      	mov	r1, r3
 8006a12:	4820      	ldr	r0, [pc, #128]	@ (8006a94 <HAL_UART_MspInit+0x5d4>)
 8006a14:	f001 f83a 	bl	8007a8c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006a18:	4b1f      	ldr	r3, [pc, #124]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a1a:	4a20      	ldr	r2, [pc, #128]	@ (8006a9c <HAL_UART_MspInit+0x5dc>)
 8006a1c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a20:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006a24:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a26:	4b1c      	ldr	r3, [pc, #112]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a2e:	2200      	movs	r2, #0
 8006a30:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a32:	4b19      	ldr	r3, [pc, #100]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a38:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a3a:	4b17      	ldr	r3, [pc, #92]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a40:	4b15      	ldr	r3, [pc, #84]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006a46:	4b14      	ldr	r3, [pc, #80]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006a4c:	4b12      	ldr	r3, [pc, #72]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a4e:	2200      	movs	r2, #0
 8006a50:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a52:	4b11      	ldr	r3, [pc, #68]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006a58:	480f      	ldr	r0, [pc, #60]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a5a:	f000 fc0d 	bl	8007278 <HAL_DMA_Init>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <HAL_UART_MspInit+0x5a8>
      Error_Handler();
 8006a64:	f7ff fa42 	bl	8005eec <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a0b      	ldr	r2, [pc, #44]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a6c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a98 <HAL_UART_MspInit+0x5d8>)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006a74:	2200      	movs	r2, #0
 8006a76:	2105      	movs	r1, #5
 8006a78:	2047      	movs	r0, #71	@ 0x47
 8006a7a:	f000 fbd3 	bl	8007224 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006a7e:	2047      	movs	r0, #71	@ 0x47
 8006a80:	f000 fbec 	bl	800725c <HAL_NVIC_EnableIRQ>
}
 8006a84:	bf00      	nop
 8006a86:	37d0      	adds	r7, #208	@ 0xd0
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40011400 	.word	0x40011400
 8006a90:	40023800 	.word	0x40023800
 8006a94:	40020800 	.word	0x40020800
 8006a98:	2000ba04 	.word	0x2000ba04
 8006a9c:	40026428 	.word	0x40026428

08006aa0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b0ac      	sub	sp, #176	@ 0xb0
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	605a      	str	r2, [r3, #4]
 8006ab2:	609a      	str	r2, [r3, #8]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006ab8:	f107 0318 	add.w	r3, r7, #24
 8006abc:	2284      	movs	r2, #132	@ 0x84
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f00f fc98 	bl	80163f6 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ace:	d159      	bne.n	8006b84 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006ad0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006ad4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006adc:	f107 0318 	add.w	r3, r7, #24
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f002 fcb5 	bl	8009450 <HAL_RCCEx_PeriphCLKConfig>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d001      	beq.n	8006af0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8006aec:	f7ff f9fe 	bl	8005eec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006af0:	4b26      	ldr	r3, [pc, #152]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af4:	4a25      	ldr	r2, [pc, #148]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006af6:	f043 0301 	orr.w	r3, r3, #1
 8006afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8006afc:	4b23      	ldr	r3, [pc, #140]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006b08:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8006b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b10:	2302      	movs	r3, #2
 8006b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b22:	230a      	movs	r3, #10
 8006b24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b28:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4818      	ldr	r0, [pc, #96]	@ (8006b90 <HAL_PCD_MspInit+0xf0>)
 8006b30:	f000 ffac 	bl	8007a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006b34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b38:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006b48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4810      	ldr	r0, [pc, #64]	@ (8006b90 <HAL_PCD_MspInit+0xf0>)
 8006b50:	f000 ff9c 	bl	8007a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b54:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b58:	4a0c      	ldr	r2, [pc, #48]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b5e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006b60:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	613b      	str	r3, [r7, #16]
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	4b07      	ldr	r3, [pc, #28]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b70:	4a06      	ldr	r2, [pc, #24]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006b76:	6453      	str	r3, [r2, #68]	@ 0x44
 8006b78:	4b04      	ldr	r3, [pc, #16]	@ (8006b8c <HAL_PCD_MspInit+0xec>)
 8006b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b80:	60fb      	str	r3, [r7, #12]
 8006b82:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8006b84:	bf00      	nop
 8006b86:	37b0      	adds	r7, #176	@ 0xb0
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	40023800 	.word	0x40023800
 8006b90:	40020000 	.word	0x40020000

08006b94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08e      	sub	sp, #56	@ 0x38
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006ba4:	4b33      	ldr	r3, [pc, #204]	@ (8006c74 <HAL_InitTick+0xe0>)
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba8:	4a32      	ldr	r2, [pc, #200]	@ (8006c74 <HAL_InitTick+0xe0>)
 8006baa:	f043 0310 	orr.w	r3, r3, #16
 8006bae:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bb0:	4b30      	ldr	r3, [pc, #192]	@ (8006c74 <HAL_InitTick+0xe0>)
 8006bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb4:	f003 0310 	and.w	r3, r3, #16
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006bbc:	f107 0210 	add.w	r2, r7, #16
 8006bc0:	f107 0314 	add.w	r3, r7, #20
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fc10 	bl	80093ec <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006bd6:	f002 fbe1 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 8006bda:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bdc:	e004      	b.n	8006be8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006bde:	f002 fbdd 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 8006be2:	4603      	mov	r3, r0
 8006be4:	005b      	lsls	r3, r3, #1
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bea:	4a23      	ldr	r2, [pc, #140]	@ (8006c78 <HAL_InitTick+0xe4>)
 8006bec:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf0:	0c9b      	lsrs	r3, r3, #18
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006bf6:	4b21      	ldr	r3, [pc, #132]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006bf8:	4a21      	ldr	r2, [pc, #132]	@ (8006c80 <HAL_InitTick+0xec>)
 8006bfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006bfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006c02:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006c04:	4a1d      	ldr	r2, [pc, #116]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c08:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c10:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c16:	4b19      	ldr	r3, [pc, #100]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006c1c:	4817      	ldr	r0, [pc, #92]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c1e:	f003 fdd1 	bl	800a7c4 <HAL_TIM_Base_Init>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11b      	bne.n	8006c68 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006c30:	4812      	ldr	r0, [pc, #72]	@ (8006c7c <HAL_InitTick+0xe8>)
 8006c32:	f003 feb7 	bl	800a9a4 <HAL_TIM_Base_Start_IT>
 8006c36:	4603      	mov	r3, r0
 8006c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d111      	bne.n	8006c68 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006c44:	2036      	movs	r0, #54	@ 0x36
 8006c46:	f000 fb09 	bl	800725c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b0f      	cmp	r3, #15
 8006c4e:	d808      	bhi.n	8006c62 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006c50:	2200      	movs	r2, #0
 8006c52:	6879      	ldr	r1, [r7, #4]
 8006c54:	2036      	movs	r0, #54	@ 0x36
 8006c56:	f000 fae5 	bl	8007224 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c84 <HAL_InitTick+0xf0>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	e002      	b.n	8006c68 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006c68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3738      	adds	r7, #56	@ 0x38
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40023800 	.word	0x40023800
 8006c78:	431bde83 	.word	0x431bde83
 8006c7c:	2000c25c 	.word	0x2000c25c
 8006c80:	40001000 	.word	0x40001000
 8006c84:	20000058 	.word	0x20000058

08006c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006c8c:	bf00      	nop
 8006c8e:	e7fd      	b.n	8006c8c <NMI_Handler+0x4>

08006c90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c90:	b480      	push	{r7}
 8006c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c94:	bf00      	nop
 8006c96:	e7fd      	b.n	8006c94 <HardFault_Handler+0x4>

08006c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c9c:	bf00      	nop
 8006c9e:	e7fd      	b.n	8006c9c <MemManage_Handler+0x4>

08006ca0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <BusFault_Handler+0x4>

08006ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <UsageFault_Handler+0x4>

08006cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cb4:	bf00      	nop
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006cc4:	4802      	ldr	r0, [pc, #8]	@ (8006cd0 <DMA1_Stream0_IRQHandler+0x10>)
 8006cc6:	f000 fc77 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	2000b884 	.word	0x2000b884

08006cd4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006cd8:	4802      	ldr	r0, [pc, #8]	@ (8006ce4 <DMA1_Stream1_IRQHandler+0x10>)
 8006cda:	f000 fc6d 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	2000b944 	.word	0x2000b944

08006ce8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006cec:	4802      	ldr	r0, [pc, #8]	@ (8006cf8 <DMA1_Stream2_IRQHandler+0x10>)
 8006cee:	f000 fc63 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006cf2:	bf00      	nop
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	2000b824 	.word	0x2000b824

08006cfc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006d00:	4802      	ldr	r0, [pc, #8]	@ (8006d0c <DMA1_Stream3_IRQHandler+0x10>)
 8006d02:	f000 fc59 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	2000b9a4 	.word	0x2000b9a4

08006d10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006d14:	4802      	ldr	r0, [pc, #8]	@ (8006d20 <DMA1_Stream5_IRQHandler+0x10>)
 8006d16:	f000 fc4f 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006d1a:	bf00      	nop
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	2000b8e4 	.word	0x2000b8e4

08006d24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006d28:	4802      	ldr	r0, [pc, #8]	@ (8006d34 <TIM1_CC_IRQHandler+0x10>)
 8006d2a:	f004 fb4f 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006d2e:	bf00      	nop
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	2000b31c 	.word	0x2000b31c

08006d38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006d3c:	4802      	ldr	r0, [pc, #8]	@ (8006d48 <TIM2_IRQHandler+0x10>)
 8006d3e:	f004 fb45 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006d42:	bf00      	nop
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	2000b368 	.word	0x2000b368

08006d4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006d50:	4802      	ldr	r0, [pc, #8]	@ (8006d5c <TIM3_IRQHandler+0x10>)
 8006d52:	f004 fb3b 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006d56:	bf00      	nop
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	2000b3b4 	.word	0x2000b3b4

08006d60 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006d64:	4802      	ldr	r0, [pc, #8]	@ (8006d70 <TIM4_IRQHandler+0x10>)
 8006d66:	f004 fb31 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	2000b400 	.word	0x2000b400

08006d74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006d78:	4802      	ldr	r0, [pc, #8]	@ (8006d84 <USART2_IRQHandler+0x10>)
 8006d7a:	f005 fcb7 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006d7e:	bf00      	nop
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	2000b68c 	.word	0x2000b68c

08006d88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006d8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006d90:	f001 f85a 	bl	8007e48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006d94:	bf00      	nop
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006d9c:	4802      	ldr	r0, [pc, #8]	@ (8006da8 <TIM5_IRQHandler+0x10>)
 8006d9e:	f004 fb15 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006da2:	bf00      	nop
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	2000b44c 	.word	0x2000b44c

08006dac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006db0:	4802      	ldr	r0, [pc, #8]	@ (8006dbc <UART4_IRQHandler+0x10>)
 8006db2:	f005 fc9b 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	2000b57c 	.word	0x2000b57c

08006dc0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006dc4:	4802      	ldr	r0, [pc, #8]	@ (8006dd0 <UART5_IRQHandler+0x10>)
 8006dc6:	f005 fc91 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	2000b604 	.word	0x2000b604

08006dd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006dd8:	4802      	ldr	r0, [pc, #8]	@ (8006de4 <TIM6_DAC_IRQHandler+0x10>)
 8006dda:	f004 faf7 	bl	800b3cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006dde:	bf00      	nop
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	2000c25c 	.word	0x2000c25c

08006de8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006dec:	4802      	ldr	r0, [pc, #8]	@ (8006df8 <DMA2_Stream1_IRQHandler+0x10>)
 8006dee:	f000 fbe3 	bl	80075b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	2000ba04 	.word	0x2000ba04

08006dfc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006e00:	4802      	ldr	r0, [pc, #8]	@ (8006e0c <USART6_IRQHandler+0x10>)
 8006e02:	f005 fc73 	bl	800c6ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006e06:	bf00      	nop
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	2000b79c 	.word	0x2000b79c

08006e10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return 1;
 8006e14:	2301      	movs	r3, #1
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <_kill>:

int _kill(int pid, int sig)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e2a:	f00f fb8b 	bl	8016544 <__errno>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2216      	movs	r2, #22
 8006e32:	601a      	str	r2, [r3, #0]
  return -1;
 8006e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_exit>:

void _exit (int status)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006e48:	f04f 31ff 	mov.w	r1, #4294967295
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f7ff ffe7 	bl	8006e20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006e52:	bf00      	nop
 8006e54:	e7fd      	b.n	8006e52 <_exit+0x12>

08006e56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b086      	sub	sp, #24
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]
 8006e66:	e00a      	b.n	8006e7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006e68:	f3af 8000 	nop.w
 8006e6c:	4601      	mov	r1, r0
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	60ba      	str	r2, [r7, #8]
 8006e74:	b2ca      	uxtb	r2, r1
 8006e76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	dbf0      	blt.n	8006e68 <_read+0x12>
  }

  return len;
 8006e86:	687b      	ldr	r3, [r7, #4]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]
 8006ea0:	e009      	b.n	8006eb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	1c5a      	adds	r2, r3, #1
 8006ea6:	60ba      	str	r2, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	dbf1      	blt.n	8006ea2 <_write+0x12>
  }
  return len;
 8006ebe:	687b      	ldr	r3, [r7, #4]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3718      	adds	r7, #24
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <_close>:

int _close(int file)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ef0:	605a      	str	r2, [r3, #4]
  return 0;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <_isatty>:

int _isatty(int file)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f08:	2301      	movs	r3, #1
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b085      	sub	sp, #20
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f38:	4a14      	ldr	r2, [pc, #80]	@ (8006f8c <_sbrk+0x5c>)
 8006f3a:	4b15      	ldr	r3, [pc, #84]	@ (8006f90 <_sbrk+0x60>)
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f44:	4b13      	ldr	r3, [pc, #76]	@ (8006f94 <_sbrk+0x64>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d102      	bne.n	8006f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f4c:	4b11      	ldr	r3, [pc, #68]	@ (8006f94 <_sbrk+0x64>)
 8006f4e:	4a12      	ldr	r2, [pc, #72]	@ (8006f98 <_sbrk+0x68>)
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <_sbrk+0x64>)
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d207      	bcs.n	8006f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f60:	f00f faf0 	bl	8016544 <__errno>
 8006f64:	4603      	mov	r3, r0
 8006f66:	220c      	movs	r2, #12
 8006f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	e009      	b.n	8006f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f70:	4b08      	ldr	r3, [pc, #32]	@ (8006f94 <_sbrk+0x64>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f76:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <_sbrk+0x64>)
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	4a05      	ldr	r2, [pc, #20]	@ (8006f94 <_sbrk+0x64>)
 8006f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f82:	68fb      	ldr	r3, [r7, #12]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20050000 	.word	0x20050000
 8006f90:	00000400 	.word	0x00000400
 8006f94:	2000c2a8 	.word	0x2000c2a8
 8006f98:	20014df8 	.word	0x20014df8

08006f9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <SystemInit+0x20>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa6:	4a05      	ldr	r2, [pc, #20]	@ (8006fbc <SystemInit+0x20>)
 8006fa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006fac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	e000ed00 	.word	0xe000ed00

08006fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8006fc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006ff8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006fc4:	f7ff ffea 	bl	8006f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fc8:	480c      	ldr	r0, [pc, #48]	@ (8006ffc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006fca:	490d      	ldr	r1, [pc, #52]	@ (8007000 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8007004 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fd0:	e002      	b.n	8006fd8 <LoopCopyDataInit>

08006fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fd6:	3304      	adds	r3, #4

08006fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fdc:	d3f9      	bcc.n	8006fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fde:	4a0a      	ldr	r2, [pc, #40]	@ (8007008 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800700c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fe4:	e001      	b.n	8006fea <LoopFillZerobss>

08006fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fe8:	3204      	adds	r2, #4

08006fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fec:	d3fb      	bcc.n	8006fe6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8006fee:	f00f faaf 	bl	8016550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006ff2:	f7fd ffc7 	bl	8004f84 <main>
  bx  lr    
 8006ff6:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8006ff8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8006ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007000:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8007004:	08019418 	.word	0x08019418
  ldr r2, =_sbss
 8007008:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 800700c:	20014df8 	.word	0x20014df8

08007010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007010:	e7fe      	b.n	8007010 <ADC_IRQHandler>

08007012 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007016:	2003      	movs	r0, #3
 8007018:	f000 f8f9 	bl	800720e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800701c:	200f      	movs	r0, #15
 800701e:	f7ff fdb9 	bl	8006b94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007022:	f7fe ff69 	bl	8005ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800702c:	b480      	push	{r7}
 800702e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007030:	4b06      	ldr	r3, [pc, #24]	@ (800704c <HAL_IncTick+0x20>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	4b06      	ldr	r3, [pc, #24]	@ (8007050 <HAL_IncTick+0x24>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4413      	add	r3, r2
 800703c:	4a04      	ldr	r2, [pc, #16]	@ (8007050 <HAL_IncTick+0x24>)
 800703e:	6013      	str	r3, [r2, #0]
}
 8007040:	bf00      	nop
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	2000005c 	.word	0x2000005c
 8007050:	2000c2ac 	.word	0x2000c2ac

08007054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  return uwTick;
 8007058:	4b03      	ldr	r3, [pc, #12]	@ (8007068 <HAL_GetTick+0x14>)
 800705a:	681b      	ldr	r3, [r3, #0]
}
 800705c:	4618      	mov	r0, r3
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	2000c2ac 	.word	0x2000c2ac

0800706c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007074:	f7ff ffee 	bl	8007054 <HAL_GetTick>
 8007078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d005      	beq.n	8007092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007086:	4b0a      	ldr	r3, [pc, #40]	@ (80070b0 <HAL_Delay+0x44>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	461a      	mov	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007092:	bf00      	nop
 8007094:	f7ff ffde 	bl	8007054 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d8f7      	bhi.n	8007094 <HAL_Delay+0x28>
  {
  }
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	2000005c 	.word	0x2000005c

080070b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <__NVIC_SetPriorityGrouping+0x40>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80070d0:	4013      	ands	r3, r2
 80070d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <__NVIC_SetPriorityGrouping+0x44>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070e2:	4a04      	ldr	r2, [pc, #16]	@ (80070f4 <__NVIC_SetPriorityGrouping+0x40>)
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	60d3      	str	r3, [r2, #12]
}
 80070e8:	bf00      	nop
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	e000ed00 	.word	0xe000ed00
 80070f8:	05fa0000 	.word	0x05fa0000

080070fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070fc:	b480      	push	{r7}
 80070fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007100:	4b04      	ldr	r3, [pc, #16]	@ (8007114 <__NVIC_GetPriorityGrouping+0x18>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	0a1b      	lsrs	r3, r3, #8
 8007106:	f003 0307 	and.w	r3, r3, #7
}
 800710a:	4618      	mov	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	e000ed00 	.word	0xe000ed00

08007118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	2b00      	cmp	r3, #0
 8007128:	db0b      	blt.n	8007142 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	f003 021f 	and.w	r2, r3, #31
 8007130:	4907      	ldr	r1, [pc, #28]	@ (8007150 <__NVIC_EnableIRQ+0x38>)
 8007132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	2001      	movs	r0, #1
 800713a:	fa00 f202 	lsl.w	r2, r0, r2
 800713e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	e000e100 	.word	0xe000e100

08007154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	6039      	str	r1, [r7, #0]
 800715e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007164:	2b00      	cmp	r3, #0
 8007166:	db0a      	blt.n	800717e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	490c      	ldr	r1, [pc, #48]	@ (80071a0 <__NVIC_SetPriority+0x4c>)
 800716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007172:	0112      	lsls	r2, r2, #4
 8007174:	b2d2      	uxtb	r2, r2
 8007176:	440b      	add	r3, r1
 8007178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800717c:	e00a      	b.n	8007194 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	b2da      	uxtb	r2, r3
 8007182:	4908      	ldr	r1, [pc, #32]	@ (80071a4 <__NVIC_SetPriority+0x50>)
 8007184:	79fb      	ldrb	r3, [r7, #7]
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	3b04      	subs	r3, #4
 800718c:	0112      	lsls	r2, r2, #4
 800718e:	b2d2      	uxtb	r2, r2
 8007190:	440b      	add	r3, r1
 8007192:	761a      	strb	r2, [r3, #24]
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr
 80071a0:	e000e100 	.word	0xe000e100
 80071a4:	e000ed00 	.word	0xe000ed00

080071a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b089      	sub	sp, #36	@ 0x24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f1c3 0307 	rsb	r3, r3, #7
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	bf28      	it	cs
 80071c6:	2304      	movcs	r3, #4
 80071c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3304      	adds	r3, #4
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d902      	bls.n	80071d8 <NVIC_EncodePriority+0x30>
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	3b03      	subs	r3, #3
 80071d6:	e000      	b.n	80071da <NVIC_EncodePriority+0x32>
 80071d8:	2300      	movs	r3, #0
 80071da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071dc:	f04f 32ff 	mov.w	r2, #4294967295
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	fa02 f303 	lsl.w	r3, r2, r3
 80071e6:	43da      	mvns	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	401a      	ands	r2, r3
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071f0:	f04f 31ff 	mov.w	r1, #4294967295
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	fa01 f303 	lsl.w	r3, r1, r3
 80071fa:	43d9      	mvns	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007200:	4313      	orrs	r3, r2
         );
}
 8007202:	4618      	mov	r0, r3
 8007204:	3724      	adds	r7, #36	@ 0x24
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f7ff ff4c 	bl	80070b4 <__NVIC_SetPriorityGrouping>
}
 800721c:	bf00      	nop
 800721e:	3708      	adds	r7, #8
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	4603      	mov	r3, r0
 800722c:	60b9      	str	r1, [r7, #8]
 800722e:	607a      	str	r2, [r7, #4]
 8007230:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007236:	f7ff ff61 	bl	80070fc <__NVIC_GetPriorityGrouping>
 800723a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	6978      	ldr	r0, [r7, #20]
 8007242:	f7ff ffb1 	bl	80071a8 <NVIC_EncodePriority>
 8007246:	4602      	mov	r2, r0
 8007248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f7ff ff80 	bl	8007154 <__NVIC_SetPriority>
}
 8007254:	bf00      	nop
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff ff54 	bl	8007118 <__NVIC_EnableIRQ>
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007284:	f7ff fee6 	bl	8007054 <HAL_GetTick>
 8007288:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e099      	b.n	80073c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f022 0201 	bic.w	r2, r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072b4:	e00f      	b.n	80072d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80072b6:	f7ff fecd 	bl	8007054 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b05      	cmp	r3, #5
 80072c2:	d908      	bls.n	80072d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2220      	movs	r2, #32
 80072c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2203      	movs	r2, #3
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e078      	b.n	80073c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e8      	bne.n	80072b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	4b38      	ldr	r3, [pc, #224]	@ (80073d0 <HAL_DMA_Init+0x158>)
 80072f0:	4013      	ands	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007302:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	691b      	ldr	r3, [r3, #16]
 8007308:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800730e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800731a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	4313      	orrs	r3, r2
 8007326:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732c:	2b04      	cmp	r3, #4
 800732e:	d107      	bne.n	8007340 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007338:	4313      	orrs	r3, r2
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007366:	2b04      	cmp	r3, #4
 8007368:	d117      	bne.n	800739a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800736e:	697a      	ldr	r2, [r7, #20]
 8007370:	4313      	orrs	r3, r2
 8007372:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00e      	beq.n	800739a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb09 	bl	8007994 <DMA_CheckFifoParam>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d008      	beq.n	800739a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2240      	movs	r2, #64	@ 0x40
 800738c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007396:	2301      	movs	r3, #1
 8007398:	e016      	b.n	80073c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fac0 	bl	8007928 <DMA_CalcBaseAndBitshift>
 80073a8:	4603      	mov	r3, r0
 80073aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b0:	223f      	movs	r2, #63	@ 0x3f
 80073b2:	409a      	lsls	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	f010803f 	.word	0xf010803f

080073d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_DMA_Start_IT+0x26>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e048      	b.n	800748c <HAL_DMA_Start_IT+0xb8>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d137      	bne.n	800747e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2202      	movs	r2, #2
 8007412:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68b9      	ldr	r1, [r7, #8]
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fa52 	bl	80078cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800742c:	223f      	movs	r2, #63	@ 0x3f
 800742e:	409a      	lsls	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0216 	orr.w	r2, r2, #22
 8007442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	695a      	ldr	r2, [r3, #20]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007452:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	e005      	b.n	800748a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007486:	2302      	movs	r3, #2
 8007488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3718      	adds	r7, #24
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80074a2:	f7ff fdd7 	bl	8007054 <HAL_GetTick>
 80074a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b02      	cmp	r3, #2
 80074b2:	d008      	beq.n	80074c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2280      	movs	r2, #128	@ 0x80
 80074b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e052      	b.n	800756c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0216 	bic.w	r2, r2, #22
 80074d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80074e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <HAL_DMA_Abort+0x62>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0208 	bic.w	r2, r2, #8
 8007504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 0201 	bic.w	r2, r2, #1
 8007514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007516:	e013      	b.n	8007540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007518:	f7ff fd9c 	bl	8007054 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b05      	cmp	r3, #5
 8007524:	d90c      	bls.n	8007540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2220      	movs	r2, #32
 800752a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2203      	movs	r2, #3
 8007530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e015      	b.n	800756c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1e4      	bne.n	8007518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007552:	223f      	movs	r2, #63	@ 0x3f
 8007554:	409a      	lsls	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007582:	b2db      	uxtb	r3, r3
 8007584:	2b02      	cmp	r3, #2
 8007586:	d004      	beq.n	8007592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2280      	movs	r2, #128	@ 0x80
 800758c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e00c      	b.n	80075ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2205      	movs	r2, #5
 8007596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0201 	bic.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80075c4:	4b8e      	ldr	r3, [pc, #568]	@ (8007800 <HAL_DMA_IRQHandler+0x248>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a8e      	ldr	r2, [pc, #568]	@ (8007804 <HAL_DMA_IRQHandler+0x24c>)
 80075ca:	fba2 2303 	umull	r2, r3, r2, r3
 80075ce:	0a9b      	lsrs	r3, r3, #10
 80075d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075e2:	2208      	movs	r2, #8
 80075e4:	409a      	lsls	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	4013      	ands	r3, r2
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01a      	beq.n	8007624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d013      	beq.n	8007624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0204 	bic.w	r2, r2, #4
 800760a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007610:	2208      	movs	r2, #8
 8007612:	409a      	lsls	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761c:	f043 0201 	orr.w	r2, r3, #1
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007628:	2201      	movs	r2, #1
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d012      	beq.n	800765a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007646:	2201      	movs	r2, #1
 8007648:	409a      	lsls	r2, r3
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007652:	f043 0202 	orr.w	r2, r3, #2
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800765e:	2204      	movs	r2, #4
 8007660:	409a      	lsls	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4013      	ands	r3, r2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d012      	beq.n	8007690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 0302 	and.w	r3, r3, #2
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800767c:	2204      	movs	r2, #4
 800767e:	409a      	lsls	r2, r3
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007688:	f043 0204 	orr.w	r2, r3, #4
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007694:	2210      	movs	r2, #16
 8007696:	409a      	lsls	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d043      	beq.n	8007728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0308 	and.w	r3, r3, #8
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d03c      	beq.n	8007728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076b2:	2210      	movs	r2, #16
 80076b4:	409a      	lsls	r2, r3
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d018      	beq.n	80076fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d024      	beq.n	8007728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	e01f      	b.n	8007728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d01b      	beq.n	8007728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	4798      	blx	r3
 80076f8:	e016      	b.n	8007728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007704:	2b00      	cmp	r3, #0
 8007706:	d107      	bne.n	8007718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 0208 	bic.w	r2, r2, #8
 8007716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800771c:	2b00      	cmp	r3, #0
 800771e:	d003      	beq.n	8007728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800772c:	2220      	movs	r2, #32
 800772e:	409a      	lsls	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4013      	ands	r3, r2
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 808f 	beq.w	8007858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0310 	and.w	r3, r3, #16
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 8087 	beq.w	8007858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800774e:	2220      	movs	r2, #32
 8007750:	409a      	lsls	r2, r3
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b05      	cmp	r3, #5
 8007760:	d136      	bne.n	80077d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f022 0216 	bic.w	r2, r2, #22
 8007770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d103      	bne.n	8007792 <HAL_DMA_IRQHandler+0x1da>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0208 	bic.w	r2, r2, #8
 80077a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077a6:	223f      	movs	r2, #63	@ 0x3f
 80077a8:	409a      	lsls	r2, r3
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d07e      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
        }
        return;
 80077ce:	e079      	b.n	80078c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01d      	beq.n	800781a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10d      	bne.n	8007808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d031      	beq.n	8007858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
 80077fc:	e02c      	b.n	8007858 <HAL_DMA_IRQHandler+0x2a0>
 80077fe:	bf00      	nop
 8007800:	20000054 	.word	0x20000054
 8007804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800780c:	2b00      	cmp	r3, #0
 800780e:	d023      	beq.n	8007858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	e01e      	b.n	8007858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10f      	bne.n	8007848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0210 	bic.w	r2, r2, #16
 8007836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d003      	beq.n	8007858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800785c:	2b00      	cmp	r3, #0
 800785e:	d032      	beq.n	80078c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d022      	beq.n	80078b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2205      	movs	r2, #5
 8007870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f022 0201 	bic.w	r2, r2, #1
 8007882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	3301      	adds	r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	429a      	cmp	r2, r3
 800788e:	d307      	bcc.n	80078a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0301 	and.w	r3, r3, #1
 800789a:	2b00      	cmp	r3, #0
 800789c:	d1f2      	bne.n	8007884 <HAL_DMA_IRQHandler+0x2cc>
 800789e:	e000      	b.n	80078a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80078a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	4798      	blx	r3
 80078c2:	e000      	b.n	80078c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80078c4:	bf00      	nop
    }
  }
}
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]
 80078d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80078e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	2b40      	cmp	r3, #64	@ 0x40
 80078f8:	d108      	bne.n	800790c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800790a:	e007      	b.n	800791c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	60da      	str	r2, [r3, #12]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	3b10      	subs	r3, #16
 8007938:	4a13      	ldr	r2, [pc, #76]	@ (8007988 <DMA_CalcBaseAndBitshift+0x60>)
 800793a:	fba2 2303 	umull	r2, r3, r2, r3
 800793e:	091b      	lsrs	r3, r3, #4
 8007940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007942:	4a12      	ldr	r2, [pc, #72]	@ (800798c <DMA_CalcBaseAndBitshift+0x64>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4413      	add	r3, r2
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b03      	cmp	r3, #3
 8007954:	d908      	bls.n	8007968 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	4b0c      	ldr	r3, [pc, #48]	@ (8007990 <DMA_CalcBaseAndBitshift+0x68>)
 800795e:	4013      	ands	r3, r2
 8007960:	1d1a      	adds	r2, r3, #4
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	659a      	str	r2, [r3, #88]	@ 0x58
 8007966:	e006      	b.n	8007976 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	4b08      	ldr	r3, [pc, #32]	@ (8007990 <DMA_CalcBaseAndBitshift+0x68>)
 8007970:	4013      	ands	r3, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	aaaaaaab 	.word	0xaaaaaaab
 800798c:	08018c08 	.word	0x08018c08
 8007990:	fffffc00 	.word	0xfffffc00

08007994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d11f      	bne.n	80079ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d856      	bhi.n	8007a62 <DMA_CheckFifoParam+0xce>
 80079b4:	a201      	add	r2, pc, #4	@ (adr r2, 80079bc <DMA_CheckFifoParam+0x28>)
 80079b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ba:	bf00      	nop
 80079bc:	080079cd 	.word	0x080079cd
 80079c0:	080079df 	.word	0x080079df
 80079c4:	080079cd 	.word	0x080079cd
 80079c8:	08007a63 	.word	0x08007a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d046      	beq.n	8007a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079dc:	e043      	b.n	8007a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80079e6:	d140      	bne.n	8007a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80079ec:	e03d      	b.n	8007a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079f6:	d121      	bne.n	8007a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b03      	cmp	r3, #3
 80079fc:	d837      	bhi.n	8007a6e <DMA_CheckFifoParam+0xda>
 80079fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007a04 <DMA_CheckFifoParam+0x70>)
 8007a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a04:	08007a15 	.word	0x08007a15
 8007a08:	08007a1b 	.word	0x08007a1b
 8007a0c:	08007a15 	.word	0x08007a15
 8007a10:	08007a2d 	.word	0x08007a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
      break;
 8007a18:	e030      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d025      	beq.n	8007a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a2a:	e022      	b.n	8007a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007a34:	d11f      	bne.n	8007a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007a3a:	e01c      	b.n	8007a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d903      	bls.n	8007a4a <DMA_CheckFifoParam+0xb6>
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d003      	beq.n	8007a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007a48:	e018      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4e:	e015      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00e      	beq.n	8007a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a60:	e00b      	b.n	8007a7a <DMA_CheckFifoParam+0xe6>
      break;
 8007a62:	bf00      	nop
 8007a64:	e00a      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;
 8007a66:	bf00      	nop
 8007a68:	e008      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;
 8007a6a:	bf00      	nop
 8007a6c:	e006      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;
 8007a6e:	bf00      	nop
 8007a70:	e004      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;
 8007a72:	bf00      	nop
 8007a74:	e002      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8007a76:	bf00      	nop
 8007a78:	e000      	b.n	8007a7c <DMA_CheckFifoParam+0xe8>
      break;
 8007a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop

08007a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b089      	sub	sp, #36	@ 0x24
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8007a96:	2300      	movs	r3, #0
 8007a98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e175      	b.n	8007d98 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007aac:	2201      	movs	r2, #1
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	4013      	ands	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	f040 8164 	bne.w	8007d92 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f003 0303 	and.w	r3, r3, #3
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d005      	beq.n	8007ae2 <HAL_GPIO_Init+0x56>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 0303 	and.w	r3, r3, #3
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d130      	bne.n	8007b44 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	2203      	movs	r2, #3
 8007aee:	fa02 f303 	lsl.w	r3, r2, r3
 8007af2:	43db      	mvns	r3, r3
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	4013      	ands	r3, r2
 8007af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	fa02 f303 	lsl.w	r3, r2, r3
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007b18:	2201      	movs	r2, #1
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	43db      	mvns	r3, r3
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	4013      	ands	r3, r2
 8007b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	091b      	lsrs	r3, r3, #4
 8007b2e:	f003 0201 	and.w	r2, r3, #1
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	69ba      	ldr	r2, [r7, #24]
 8007b42:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f003 0303 	and.w	r3, r3, #3
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d017      	beq.n	8007b80 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	005b      	lsls	r3, r3, #1
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b60:	43db      	mvns	r3, r3
 8007b62:	69ba      	ldr	r2, [r7, #24]
 8007b64:	4013      	ands	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	689a      	ldr	r2, [r3, #8]
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	005b      	lsls	r3, r3, #1
 8007b70:	fa02 f303 	lsl.w	r3, r2, r3
 8007b74:	69ba      	ldr	r2, [r7, #24]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69ba      	ldr	r2, [r7, #24]
 8007b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d123      	bne.n	8007bd4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	08da      	lsrs	r2, r3, #3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	3208      	adds	r2, #8
 8007b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	220f      	movs	r2, #15
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	43db      	mvns	r3, r3
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	4013      	ands	r3, r2
 8007bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	691a      	ldr	r2, [r3, #16]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	08da      	lsrs	r2, r3, #3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3208      	adds	r2, #8
 8007bce:	69b9      	ldr	r1, [r7, #24]
 8007bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	2203      	movs	r2, #3
 8007be0:	fa02 f303 	lsl.w	r3, r2, r3
 8007be4:	43db      	mvns	r3, r3
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	4013      	ands	r3, r2
 8007bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f003 0203 	and.w	r2, r3, #3
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	005b      	lsls	r3, r3, #1
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 80be 	beq.w	8007d92 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c16:	4b66      	ldr	r3, [pc, #408]	@ (8007db0 <HAL_GPIO_Init+0x324>)
 8007c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c1a:	4a65      	ldr	r2, [pc, #404]	@ (8007db0 <HAL_GPIO_Init+0x324>)
 8007c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8007c22:	4b63      	ldr	r3, [pc, #396]	@ (8007db0 <HAL_GPIO_Init+0x324>)
 8007c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c2a:	60fb      	str	r3, [r7, #12]
 8007c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007c2e:	4a61      	ldr	r2, [pc, #388]	@ (8007db4 <HAL_GPIO_Init+0x328>)
 8007c30:	69fb      	ldr	r3, [r7, #28]
 8007c32:	089b      	lsrs	r3, r3, #2
 8007c34:	3302      	adds	r3, #2
 8007c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	220f      	movs	r2, #15
 8007c46:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4a:	43db      	mvns	r3, r3
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	4013      	ands	r3, r2
 8007c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a58      	ldr	r2, [pc, #352]	@ (8007db8 <HAL_GPIO_Init+0x32c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d037      	beq.n	8007cca <HAL_GPIO_Init+0x23e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a57      	ldr	r2, [pc, #348]	@ (8007dbc <HAL_GPIO_Init+0x330>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d031      	beq.n	8007cc6 <HAL_GPIO_Init+0x23a>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a56      	ldr	r2, [pc, #344]	@ (8007dc0 <HAL_GPIO_Init+0x334>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d02b      	beq.n	8007cc2 <HAL_GPIO_Init+0x236>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a55      	ldr	r2, [pc, #340]	@ (8007dc4 <HAL_GPIO_Init+0x338>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d025      	beq.n	8007cbe <HAL_GPIO_Init+0x232>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a54      	ldr	r2, [pc, #336]	@ (8007dc8 <HAL_GPIO_Init+0x33c>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01f      	beq.n	8007cba <HAL_GPIO_Init+0x22e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a53      	ldr	r2, [pc, #332]	@ (8007dcc <HAL_GPIO_Init+0x340>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d019      	beq.n	8007cb6 <HAL_GPIO_Init+0x22a>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a52      	ldr	r2, [pc, #328]	@ (8007dd0 <HAL_GPIO_Init+0x344>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_GPIO_Init+0x226>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a51      	ldr	r2, [pc, #324]	@ (8007dd4 <HAL_GPIO_Init+0x348>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d00d      	beq.n	8007cae <HAL_GPIO_Init+0x222>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a50      	ldr	r2, [pc, #320]	@ (8007dd8 <HAL_GPIO_Init+0x34c>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d007      	beq.n	8007caa <HAL_GPIO_Init+0x21e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8007ddc <HAL_GPIO_Init+0x350>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d101      	bne.n	8007ca6 <HAL_GPIO_Init+0x21a>
 8007ca2:	2309      	movs	r3, #9
 8007ca4:	e012      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	e010      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007caa:	2308      	movs	r3, #8
 8007cac:	e00e      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cae:	2307      	movs	r3, #7
 8007cb0:	e00c      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cb2:	2306      	movs	r3, #6
 8007cb4:	e00a      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cb6:	2305      	movs	r3, #5
 8007cb8:	e008      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	e006      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e004      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e002      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <HAL_GPIO_Init+0x240>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	69fa      	ldr	r2, [r7, #28]
 8007cce:	f002 0203 	and.w	r2, r2, #3
 8007cd2:	0092      	lsls	r2, r2, #2
 8007cd4:	4093      	lsls	r3, r2
 8007cd6:	69ba      	ldr	r2, [r7, #24]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007cdc:	4935      	ldr	r1, [pc, #212]	@ (8007db4 <HAL_GPIO_Init+0x328>)
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	089b      	lsrs	r3, r3, #2
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	69ba      	ldr	r2, [r7, #24]
 8007ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007cea:	4b3d      	ldr	r3, [pc, #244]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	43db      	mvns	r3, r3
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007d06:	69ba      	ldr	r2, [r7, #24]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007d0e:	4a34      	ldr	r2, [pc, #208]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007d14:	4b32      	ldr	r3, [pc, #200]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	4013      	ands	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007d38:	4a29      	ldr	r2, [pc, #164]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007d3e:	4b28      	ldr	r3, [pc, #160]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	43db      	mvns	r3, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007d62:	4a1f      	ldr	r2, [pc, #124]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007d68:	4b1d      	ldr	r3, [pc, #116]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	43db      	mvns	r3, r3
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	4013      	ands	r3, r2
 8007d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007d8c:	4a14      	ldr	r2, [pc, #80]	@ (8007de0 <HAL_GPIO_Init+0x354>)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61fb      	str	r3, [r7, #28]
 8007d98:	69fb      	ldr	r3, [r7, #28]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	f67f ae86 	bls.w	8007aac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	3724      	adds	r7, #36	@ 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40023800 	.word	0x40023800
 8007db4:	40013800 	.word	0x40013800
 8007db8:	40020000 	.word	0x40020000
 8007dbc:	40020400 	.word	0x40020400
 8007dc0:	40020800 	.word	0x40020800
 8007dc4:	40020c00 	.word	0x40020c00
 8007dc8:	40021000 	.word	0x40021000
 8007dcc:	40021400 	.word	0x40021400
 8007dd0:	40021800 	.word	0x40021800
 8007dd4:	40021c00 	.word	0x40021c00
 8007dd8:	40022000 	.word	0x40022000
 8007ddc:	40022400 	.word	0x40022400
 8007de0:	40013c00 	.word	0x40013c00

08007de4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	887b      	ldrh	r3, [r7, #2]
 8007df6:	4013      	ands	r3, r2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	73fb      	strb	r3, [r7, #15]
 8007e00:	e001      	b.n	8007e06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	807b      	strh	r3, [r7, #2]
 8007e20:	4613      	mov	r3, r2
 8007e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e24:	787b      	ldrb	r3, [r7, #1]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007e2a:	887a      	ldrh	r2, [r7, #2]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007e30:	e003      	b.n	8007e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	041a      	lsls	r2, r3, #16
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	619a      	str	r2, [r3, #24]
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	4603      	mov	r3, r0
 8007e50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007e52:	4b08      	ldr	r3, [pc, #32]	@ (8007e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d006      	beq.n	8007e6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e5e:	4a05      	ldr	r2, [pc, #20]	@ (8007e74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007e60:	88fb      	ldrh	r3, [r7, #6]
 8007e62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e64:	88fb      	ldrh	r3, [r7, #6]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fd f878 	bl	8004f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8007e6c:	bf00      	nop
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40013c00 	.word	0x40013c00

08007e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e08b      	b.n	8007fa2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f7fe f852 	bl	8005f48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2224      	movs	r2, #36	@ 0x24
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0201 	bic.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685a      	ldr	r2, [r3, #4]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007ec8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007ed8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	e006      	b.n	8007f00 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	689a      	ldr	r2, [r3, #8]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007efe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	2b02      	cmp	r3, #2
 8007f06:	d108      	bne.n	8007f1a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	e007      	b.n	8007f2a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	6859      	ldr	r1, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	4b1d      	ldr	r3, [pc, #116]	@ (8007fac <HAL_I2C_Init+0x134>)
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007f48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695b      	ldr	r3, [r3, #20]
 8007f52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	69d9      	ldr	r1, [r3, #28]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f042 0201 	orr.w	r2, r2, #1
 8007f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007fa0:	2300      	movs	r3, #0
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	02008000 	.word	0x02008000

08007fb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	461a      	mov	r2, r3
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	817b      	strh	r3, [r7, #10]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	f040 80fd 	bne.w	80081cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <HAL_I2C_Master_Transmit+0x30>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e0f6      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007fe8:	f7ff f834 	bl	8007054 <HAL_GetTick>
 8007fec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2319      	movs	r3, #25
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 f914 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e0e1      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2221      	movs	r2, #33	@ 0x21
 800800e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2210      	movs	r2, #16
 8008016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	893a      	ldrh	r2, [r7, #8]
 800802a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008036:	b29b      	uxth	r3, r3
 8008038:	2bff      	cmp	r3, #255	@ 0xff
 800803a:	d906      	bls.n	800804a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	22ff      	movs	r2, #255	@ 0xff
 8008040:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008042:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e007      	b.n	800805a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008058:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800805e:	2b00      	cmp	r3, #0
 8008060:	d024      	beq.n	80080ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008066:	781a      	ldrb	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008096:	b2db      	uxtb	r3, r3
 8008098:	3301      	adds	r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	8979      	ldrh	r1, [r7, #10]
 800809e:	4b4e      	ldr	r3, [pc, #312]	@ (80081d8 <HAL_I2C_Master_Transmit+0x228>)
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 fa83 	bl	80085b0 <I2C_TransferConfig>
 80080aa:	e066      	b.n	800817a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080b0:	b2da      	uxtb	r2, r3
 80080b2:	8979      	ldrh	r1, [r7, #10]
 80080b4:	4b48      	ldr	r3, [pc, #288]	@ (80081d8 <HAL_I2C_Master_Transmit+0x228>)
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fa78 	bl	80085b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80080c0:	e05b      	b.n	800817a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	6a39      	ldr	r1, [r7, #32]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 f907 	bl	80082da <I2C_WaitOnTXISFlagUntilTimeout>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e07b      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080da:	781a      	ldrb	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d034      	beq.n	800817a <HAL_I2C_Master_Transmit+0x1ca>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d130      	bne.n	800817a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	2200      	movs	r2, #0
 8008120:	2180      	movs	r1, #128	@ 0x80
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 f880 	bl	8008228 <I2C_WaitOnFlagUntilTimeout>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e04d      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008136:	b29b      	uxth	r3, r3
 8008138:	2bff      	cmp	r3, #255	@ 0xff
 800813a:	d90e      	bls.n	800815a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	22ff      	movs	r2, #255	@ 0xff
 8008140:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008146:	b2da      	uxtb	r2, r3
 8008148:	8979      	ldrh	r1, [r7, #10]
 800814a:	2300      	movs	r3, #0
 800814c:	9300      	str	r3, [sp, #0]
 800814e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 fa2c 	bl	80085b0 <I2C_TransferConfig>
 8008158:	e00f      	b.n	800817a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800815e:	b29a      	uxth	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008168:	b2da      	uxtb	r2, r3
 800816a:	8979      	ldrh	r1, [r7, #10]
 800816c:	2300      	movs	r3, #0
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	f000 fa1b 	bl	80085b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800817e:	b29b      	uxth	r3, r3
 8008180:	2b00      	cmp	r3, #0
 8008182:	d19e      	bne.n	80080c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	6a39      	ldr	r1, [r7, #32]
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 f8ed 	bl	8008368 <I2C_WaitOnSTOPFlagUntilTimeout>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e01a      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2220      	movs	r2, #32
 800819e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6859      	ldr	r1, [r3, #4]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	4b0c      	ldr	r3, [pc, #48]	@ (80081dc <HAL_I2C_Master_Transmit+0x22c>)
 80081ac:	400b      	ands	r3, r1
 80081ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e000      	b.n	80081ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80081cc:	2302      	movs	r3, #2
  }
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	80002000 	.word	0x80002000
 80081dc:	fe00e800 	.word	0xfe00e800

080081e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d103      	bne.n	80081fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2200      	movs	r2, #0
 80081fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699b      	ldr	r3, [r3, #24]
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b01      	cmp	r3, #1
 800820a:	d007      	beq.n	800821c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0201 	orr.w	r2, r2, #1
 800821a:	619a      	str	r2, [r3, #24]
  }
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4613      	mov	r3, r2
 8008236:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008238:	e03b      	b.n	80082b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800823a:	69ba      	ldr	r2, [r7, #24]
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f8d6 	bl	80083f0 <I2C_IsErrorOccurred>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e041      	b.n	80082d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d02d      	beq.n	80082b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008256:	f7fe fefd 	bl	8007054 <HAL_GetTick>
 800825a:	4602      	mov	r2, r0
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	683a      	ldr	r2, [r7, #0]
 8008262:	429a      	cmp	r2, r3
 8008264:	d302      	bcc.n	800826c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d122      	bne.n	80082b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	4013      	ands	r3, r2
 8008276:	68ba      	ldr	r2, [r7, #8]
 8008278:	429a      	cmp	r2, r3
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	461a      	mov	r2, r3
 8008284:	79fb      	ldrb	r3, [r7, #7]
 8008286:	429a      	cmp	r2, r3
 8008288:	d113      	bne.n	80082b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828e:	f043 0220 	orr.w	r2, r3, #32
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2220      	movs	r2, #32
 800829a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2200      	movs	r2, #0
 80082a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e00f      	b.n	80082d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4013      	ands	r3, r2
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	429a      	cmp	r2, r3
 80082c0:	bf0c      	ite	eq
 80082c2:	2301      	moveq	r3, #1
 80082c4:	2300      	movne	r3, #0
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	79fb      	ldrb	r3, [r7, #7]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d0b4      	beq.n	800823a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b084      	sub	sp, #16
 80082de:	af00      	add	r7, sp, #0
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082e6:	e033      	b.n	8008350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	68b9      	ldr	r1, [r7, #8]
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f87f 	bl	80083f0 <I2C_IsErrorOccurred>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d001      	beq.n	80082fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e031      	b.n	8008360 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008302:	d025      	beq.n	8008350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008304:	f7fe fea6 	bl	8007054 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d11a      	bne.n	8008350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d013      	beq.n	8008350 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800832c:	f043 0220 	orr.w	r2, r3, #32
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2220      	movs	r2, #32
 8008338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e007      	b.n	8008360 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699b      	ldr	r3, [r3, #24]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d1c4      	bne.n	80082e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008374:	e02f      	b.n	80083d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f838 	bl	80083f0 <I2C_IsErrorOccurred>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e02d      	b.n	80083e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800838a:	f7fe fe63 	bl	8007054 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d302      	bcc.n	80083a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11a      	bne.n	80083d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699b      	ldr	r3, [r3, #24]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b20      	cmp	r3, #32
 80083ac:	d013      	beq.n	80083d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b2:	f043 0220 	orr.w	r2, r3, #32
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e007      	b.n	80083e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699b      	ldr	r3, [r3, #24]
 80083dc:	f003 0320 	and.w	r3, r3, #32
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d1c8      	bne.n	8008376 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
	...

080083f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b08a      	sub	sp, #40	@ 0x28
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800840a:	2300      	movs	r3, #0
 800840c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	d068      	beq.n	80084ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2210      	movs	r2, #16
 8008422:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008424:	e049      	b.n	80084ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842c:	d045      	beq.n	80084ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800842e:	f7fe fe11 	bl	8007054 <HAL_GetTick>
 8008432:	4602      	mov	r2, r0
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	429a      	cmp	r2, r3
 800843c:	d302      	bcc.n	8008444 <I2C_IsErrorOccurred+0x54>
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d13a      	bne.n	80084ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800844e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008456:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699b      	ldr	r3, [r3, #24]
 800845e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008462:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008466:	d121      	bne.n	80084ac <I2C_IsErrorOccurred+0xbc>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800846e:	d01d      	beq.n	80084ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008470:	7cfb      	ldrb	r3, [r7, #19]
 8008472:	2b20      	cmp	r3, #32
 8008474:	d01a      	beq.n	80084ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008484:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008486:	f7fe fde5 	bl	8007054 <HAL_GetTick>
 800848a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800848c:	e00e      	b.n	80084ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800848e:	f7fe fde1 	bl	8007054 <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	2b19      	cmp	r3, #25
 800849a:	d907      	bls.n	80084ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800849c:	6a3b      	ldr	r3, [r7, #32]
 800849e:	f043 0320 	orr.w	r3, r3, #32
 80084a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80084aa:	e006      	b.n	80084ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d1e9      	bne.n	800848e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d003      	beq.n	80084d0 <I2C_IsErrorOccurred+0xe0>
 80084c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0aa      	beq.n	8008426 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80084d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2220      	movs	r2, #32
 80084de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80084e0:	6a3b      	ldr	r3, [r7, #32]
 80084e2:	f043 0304 	orr.w	r3, r3, #4
 80084e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00b      	beq.n	8008518 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	f043 0301 	orr.w	r3, r3, #1
 8008506:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008510:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	f043 0308 	orr.w	r3, r3, #8
 8008528:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008532:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008544:	6a3b      	ldr	r3, [r7, #32]
 8008546:	f043 0302 	orr.w	r3, r3, #2
 800854a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008554:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800855c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008560:	2b00      	cmp	r3, #0
 8008562:	d01c      	beq.n	800859e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7ff fe3b 	bl	80081e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	4b0d      	ldr	r3, [pc, #52]	@ (80085ac <I2C_IsErrorOccurred+0x1bc>)
 8008576:	400b      	ands	r3, r1
 8008578:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800857e:	6a3b      	ldr	r3, [r7, #32]
 8008580:	431a      	orrs	r2, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800859e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3728      	adds	r7, #40	@ 0x28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	fe00e800 	.word	0xfe00e800

080085b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	817b      	strh	r3, [r7, #10]
 80085be:	4613      	mov	r3, r2
 80085c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085c2:	897b      	ldrh	r3, [r7, #10]
 80085c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085c8:	7a7b      	ldrb	r3, [r7, #9]
 80085ca:	041b      	lsls	r3, r3, #16
 80085cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	4313      	orrs	r3, r2
 80085da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	6a3b      	ldr	r3, [r7, #32]
 80085e8:	0d5b      	lsrs	r3, r3, #21
 80085ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80085ee:	4b08      	ldr	r3, [pc, #32]	@ (8008610 <I2C_TransferConfig+0x60>)
 80085f0:	430b      	orrs	r3, r1
 80085f2:	43db      	mvns	r3, r3
 80085f4:	ea02 0103 	and.w	r1, r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	430a      	orrs	r2, r1
 8008600:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	03ff63ff 	.word	0x03ff63ff

08008614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b20      	cmp	r3, #32
 8008628:	d138      	bne.n	800869c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008630:	2b01      	cmp	r3, #1
 8008632:	d101      	bne.n	8008638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008634:	2302      	movs	r3, #2
 8008636:	e032      	b.n	800869e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2224      	movs	r2, #36	@ 0x24
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0201 	bic.w	r2, r2, #1
 8008656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6819      	ldr	r1, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	683a      	ldr	r2, [r7, #0]
 8008674:	430a      	orrs	r2, r1
 8008676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0201 	orr.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2220      	movs	r2, #32
 800868c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a8:	4770      	bx	lr

080086aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80086aa:	b480      	push	{r7}
 80086ac:	b085      	sub	sp, #20
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d139      	bne.n	8008734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d101      	bne.n	80086ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e033      	b.n	8008736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2224      	movs	r2, #36	@ 0x24
 80086da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f022 0201 	bic.w	r2, r2, #1
 80086ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80086fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	021b      	lsls	r3, r3, #8
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	4313      	orrs	r3, r2
 8008706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0201 	orr.w	r2, r2, #1
 800871e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	e000      	b.n	8008736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008734:	2302      	movs	r3, #2
  }
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af02      	add	r7, sp, #8
 8008748:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d101      	bne.n	8008754 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e108      	b.n	8008966 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d106      	bne.n	8008774 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fe f996 	bl	8006aa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2203      	movs	r2, #3
 8008778:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008782:	d102      	bne.n	800878a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f005 f98c 	bl	800daac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6818      	ldr	r0, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7c1a      	ldrb	r2, [r3, #16]
 800879c:	f88d 2000 	strb.w	r2, [sp]
 80087a0:	3304      	adds	r3, #4
 80087a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087a4:	f005 f928 	bl	800d9f8 <USB_CoreInit>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2202      	movs	r2, #2
 80087b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e0d5      	b.n	8008966 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2100      	movs	r1, #0
 80087c0:	4618      	mov	r0, r3
 80087c2:	f005 f984 	bl	800dace <USB_SetCurrentMode>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0c6      	b.n	8008966 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
 80087dc:	e04a      	b.n	8008874 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80087de:	7bfa      	ldrb	r2, [r7, #15]
 80087e0:	6879      	ldr	r1, [r7, #4]
 80087e2:	4613      	mov	r3, r2
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	440b      	add	r3, r1
 80087ec:	3315      	adds	r3, #21
 80087ee:	2201      	movs	r2, #1
 80087f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80087f2:	7bfa      	ldrb	r2, [r7, #15]
 80087f4:	6879      	ldr	r1, [r7, #4]
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	3314      	adds	r3, #20
 8008802:	7bfa      	ldrb	r2, [r7, #15]
 8008804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008806:	7bfa      	ldrb	r2, [r7, #15]
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	b298      	uxth	r0, r3
 800880c:	6879      	ldr	r1, [r7, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	4413      	add	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	440b      	add	r3, r1
 8008818:	332e      	adds	r3, #46	@ 0x2e
 800881a:	4602      	mov	r2, r0
 800881c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800881e:	7bfa      	ldrb	r2, [r7, #15]
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	3318      	adds	r3, #24
 800882e:	2200      	movs	r2, #0
 8008830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008832:	7bfa      	ldrb	r2, [r7, #15]
 8008834:	6879      	ldr	r1, [r7, #4]
 8008836:	4613      	mov	r3, r2
 8008838:	00db      	lsls	r3, r3, #3
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	440b      	add	r3, r1
 8008840:	331c      	adds	r3, #28
 8008842:	2200      	movs	r2, #0
 8008844:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008846:	7bfa      	ldrb	r2, [r7, #15]
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4613      	mov	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	440b      	add	r3, r1
 8008854:	3320      	adds	r3, #32
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800885a:	7bfa      	ldrb	r2, [r7, #15]
 800885c:	6879      	ldr	r1, [r7, #4]
 800885e:	4613      	mov	r3, r2
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	4413      	add	r3, r2
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	440b      	add	r3, r1
 8008868:	3324      	adds	r3, #36	@ 0x24
 800886a:	2200      	movs	r2, #0
 800886c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	3301      	adds	r3, #1
 8008872:	73fb      	strb	r3, [r7, #15]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	791b      	ldrb	r3, [r3, #4]
 8008878:	7bfa      	ldrb	r2, [r7, #15]
 800887a:	429a      	cmp	r2, r3
 800887c:	d3af      	bcc.n	80087de <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]
 8008882:	e044      	b.n	800890e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008884:	7bfa      	ldrb	r2, [r7, #15]
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4613      	mov	r3, r2
 800888a:	00db      	lsls	r3, r3, #3
 800888c:	4413      	add	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	440b      	add	r3, r1
 8008892:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800889a:	7bfa      	ldrb	r2, [r7, #15]
 800889c:	6879      	ldr	r1, [r7, #4]
 800889e:	4613      	mov	r3, r2
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	440b      	add	r3, r1
 80088a8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80088ac:	7bfa      	ldrb	r2, [r7, #15]
 80088ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	6879      	ldr	r1, [r7, #4]
 80088b4:	4613      	mov	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	4413      	add	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	440b      	add	r3, r1
 80088be:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80088c2:	2200      	movs	r2, #0
 80088c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80088c6:	7bfa      	ldrb	r2, [r7, #15]
 80088c8:	6879      	ldr	r1, [r7, #4]
 80088ca:	4613      	mov	r3, r2
 80088cc:	00db      	lsls	r3, r3, #3
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	440b      	add	r3, r1
 80088d4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80088dc:	7bfa      	ldrb	r2, [r7, #15]
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	4613      	mov	r3, r2
 80088e2:	00db      	lsls	r3, r3, #3
 80088e4:	4413      	add	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	440b      	add	r3, r1
 80088ea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80088f2:	7bfa      	ldrb	r2, [r7, #15]
 80088f4:	6879      	ldr	r1, [r7, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	00db      	lsls	r3, r3, #3
 80088fa:	4413      	add	r3, r2
 80088fc:	009b      	lsls	r3, r3, #2
 80088fe:	440b      	add	r3, r1
 8008900:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	3301      	adds	r3, #1
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	791b      	ldrb	r3, [r3, #4]
 8008912:	7bfa      	ldrb	r2, [r7, #15]
 8008914:	429a      	cmp	r2, r3
 8008916:	d3b5      	bcc.n	8008884 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	7c1a      	ldrb	r2, [r3, #16]
 8008920:	f88d 2000 	strb.w	r2, [sp]
 8008924:	3304      	adds	r3, #4
 8008926:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008928:	f005 f91e 	bl	800db68 <USB_DevInit>
 800892c:	4603      	mov	r3, r0
 800892e:	2b00      	cmp	r3, #0
 8008930:	d005      	beq.n	800893e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2202      	movs	r2, #2
 8008936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e013      	b.n	8008966 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d102      	bne.n	800895a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f80b 	bl	8008970 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f005 fad9 	bl	800df16 <USB_DevDisconnect>

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
	...

08008970 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800899e:	4b05      	ldr	r3, [pc, #20]	@ (80089b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80089a0:	4313      	orrs	r3, r2
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80089a6:	2300      	movs	r3, #0
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	10000003 	.word	0x10000003

080089b8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80089c2:	4b23      	ldr	r3, [pc, #140]	@ (8008a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80089c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089c6:	4a22      	ldr	r2, [pc, #136]	@ (8008a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80089c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80089ce:	4b20      	ldr	r3, [pc, #128]	@ (8008a50 <HAL_PWREx_EnableOverDrive+0x98>)
 80089d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80089da:	4b1e      	ldr	r3, [pc, #120]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a1d      	ldr	r2, [pc, #116]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 80089e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089e4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e6:	f7fe fb35 	bl	8007054 <HAL_GetTick>
 80089ea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80089ec:	e009      	b.n	8008a02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80089ee:	f7fe fb31 	bl	8007054 <HAL_GetTick>
 80089f2:	4602      	mov	r2, r0
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089fc:	d901      	bls.n	8008a02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	e022      	b.n	8008a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008a02:	4b14      	ldr	r3, [pc, #80]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a0e:	d1ee      	bne.n	80089ee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008a10:	4b10      	ldr	r3, [pc, #64]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a0f      	ldr	r2, [pc, #60]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a1c:	f7fe fb1a 	bl	8007054 <HAL_GetTick>
 8008a20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a22:	e009      	b.n	8008a38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008a24:	f7fe fb16 	bl	8007054 <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a32:	d901      	bls.n	8008a38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e007      	b.n	8008a48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008a38:	4b06      	ldr	r3, [pc, #24]	@ (8008a54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a44:	d1ee      	bne.n	8008a24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	40023800 	.word	0x40023800
 8008a54:	40007000 	.word	0x40007000

08008a58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008a60:	2300      	movs	r3, #0
 8008a62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d101      	bne.n	8008a6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e291      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0301 	and.w	r3, r3, #1
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8087 	beq.w	8008b8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a7c:	4b96      	ldr	r3, [pc, #600]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 030c 	and.w	r3, r3, #12
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d00c      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a88:	4b93      	ldr	r3, [pc, #588]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	f003 030c 	and.w	r3, r3, #12
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d112      	bne.n	8008aba <HAL_RCC_OscConfig+0x62>
 8008a94:	4b90      	ldr	r3, [pc, #576]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa0:	d10b      	bne.n	8008aba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d06c      	beq.n	8008b88 <HAL_RCC_OscConfig+0x130>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d168      	bne.n	8008b88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e26b      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ac2:	d106      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x7a>
 8008ac4:	4b84      	ldr	r3, [pc, #528]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a83      	ldr	r2, [pc, #524]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ace:	6013      	str	r3, [r2, #0]
 8008ad0:	e02e      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x9c>
 8008ada:	4b7f      	ldr	r3, [pc, #508]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a7e      	ldr	r2, [pc, #504]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ae0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ae4:	6013      	str	r3, [r2, #0]
 8008ae6:	4b7c      	ldr	r3, [pc, #496]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a7b      	ldr	r2, [pc, #492]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008aec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e01d      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008afc:	d10c      	bne.n	8008b18 <HAL_RCC_OscConfig+0xc0>
 8008afe:	4b76      	ldr	r3, [pc, #472]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a75      	ldr	r2, [pc, #468]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008b08:	6013      	str	r3, [r2, #0]
 8008b0a:	4b73      	ldr	r3, [pc, #460]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a72      	ldr	r2, [pc, #456]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b14:	6013      	str	r3, [r2, #0]
 8008b16:	e00b      	b.n	8008b30 <HAL_RCC_OscConfig+0xd8>
 8008b18:	4b6f      	ldr	r3, [pc, #444]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b22:	6013      	str	r3, [r2, #0]
 8008b24:	4b6c      	ldr	r3, [pc, #432]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a6b      	ldr	r2, [pc, #428]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d013      	beq.n	8008b60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b38:	f7fe fa8c 	bl	8007054 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b40:	f7fe fa88 	bl	8007054 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b64      	cmp	r3, #100	@ 0x64
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e21f      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b52:	4b61      	ldr	r3, [pc, #388]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d0f0      	beq.n	8008b40 <HAL_RCC_OscConfig+0xe8>
 8008b5e:	e014      	b.n	8008b8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b60:	f7fe fa78 	bl	8007054 <HAL_GetTick>
 8008b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b66:	e008      	b.n	8008b7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b68:	f7fe fa74 	bl	8007054 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	2b64      	cmp	r3, #100	@ 0x64
 8008b74:	d901      	bls.n	8008b7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e20b      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b7a:	4b57      	ldr	r3, [pc, #348]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1f0      	bne.n	8008b68 <HAL_RCC_OscConfig+0x110>
 8008b86:	e000      	b.n	8008b8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d069      	beq.n	8008c6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b96:	4b50      	ldr	r3, [pc, #320]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f003 030c 	and.w	r3, r3, #12
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d00b      	beq.n	8008bba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ba2:	4b4d      	ldr	r3, [pc, #308]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f003 030c 	and.w	r3, r3, #12
 8008baa:	2b08      	cmp	r3, #8
 8008bac:	d11c      	bne.n	8008be8 <HAL_RCC_OscConfig+0x190>
 8008bae:	4b4a      	ldr	r3, [pc, #296]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d116      	bne.n	8008be8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bba:	4b47      	ldr	r3, [pc, #284]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x17a>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d001      	beq.n	8008bd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e1df      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bd2:	4b41      	ldr	r3, [pc, #260]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	493d      	ldr	r1, [pc, #244]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008be6:	e040      	b.n	8008c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d023      	beq.n	8008c38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf0:	4b39      	ldr	r3, [pc, #228]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a38      	ldr	r2, [pc, #224]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008bf6:	f043 0301 	orr.w	r3, r3, #1
 8008bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7fe fa2a 	bl	8007054 <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c04:	f7fe fa26 	bl	8007054 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e1bd      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c16:	4b30      	ldr	r3, [pc, #192]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c22:	4b2d      	ldr	r3, [pc, #180]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	00db      	lsls	r3, r3, #3
 8008c30:	4929      	ldr	r1, [pc, #164]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	600b      	str	r3, [r1, #0]
 8008c36:	e018      	b.n	8008c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c38:	4b27      	ldr	r3, [pc, #156]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a26      	ldr	r2, [pc, #152]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c3e:	f023 0301 	bic.w	r3, r3, #1
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fe fa06 	bl	8007054 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4c:	f7fe fa02 	bl	8007054 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e199      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d038      	beq.n	8008ce8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d019      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c7e:	4b16      	ldr	r3, [pc, #88]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c82:	4a15      	ldr	r2, [pc, #84]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c8a:	f7fe f9e3 	bl	8007054 <HAL_GetTick>
 8008c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c92:	f7fe f9df 	bl	8007054 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e176      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008ca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0f0      	beq.n	8008c92 <HAL_RCC_OscConfig+0x23a>
 8008cb0:	e01a      	b.n	8008ce8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cb2:	4b09      	ldr	r3, [pc, #36]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb6:	4a08      	ldr	r2, [pc, #32]	@ (8008cd8 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	f023 0301 	bic.w	r3, r3, #1
 8008cbc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cbe:	f7fe f9c9 	bl	8007054 <HAL_GetTick>
 8008cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cc4:	e00a      	b.n	8008cdc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cc6:	f7fe f9c5 	bl	8007054 <HAL_GetTick>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	1ad3      	subs	r3, r2, r3
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d903      	bls.n	8008cdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008cd4:	2303      	movs	r3, #3
 8008cd6:	e15c      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
 8008cd8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cdc:	4b91      	ldr	r3, [pc, #580]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008cde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d1ee      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f003 0304 	and.w	r3, r3, #4
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 80a4 	beq.w	8008e3e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d10d      	bne.n	8008d1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d02:	4b88      	ldr	r3, [pc, #544]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d06:	4a87      	ldr	r2, [pc, #540]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008d0e:	4b85      	ldr	r3, [pc, #532]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d16:	60bb      	str	r3, [r7, #8]
 8008d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d1e:	4b82      	ldr	r3, [pc, #520]	@ (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d118      	bne.n	8008d5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a7e      	ldr	r2, [pc, #504]	@ (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d36:	f7fe f98d 	bl	8007054 <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d3e:	f7fe f989 	bl	8007054 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b64      	cmp	r3, #100	@ 0x64
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e120      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d50:	4b75      	ldr	r3, [pc, #468]	@ (8008f28 <HAL_RCC_OscConfig+0x4d0>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d106      	bne.n	8008d72 <HAL_RCC_OscConfig+0x31a>
 8008d64:	4b6f      	ldr	r3, [pc, #444]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d68:	4a6e      	ldr	r2, [pc, #440]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d6a:	f043 0301 	orr.w	r3, r3, #1
 8008d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d70:	e02d      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10c      	bne.n	8008d94 <HAL_RCC_OscConfig+0x33c>
 8008d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d7e:	4a69      	ldr	r2, [pc, #420]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d80:	f023 0301 	bic.w	r3, r3, #1
 8008d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d86:	4b67      	ldr	r3, [pc, #412]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d8a:	4a66      	ldr	r2, [pc, #408]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d8c:	f023 0304 	bic.w	r3, r3, #4
 8008d90:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d92:	e01c      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	2b05      	cmp	r3, #5
 8008d9a:	d10c      	bne.n	8008db6 <HAL_RCC_OscConfig+0x35e>
 8008d9c:	4b61      	ldr	r3, [pc, #388]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008da0:	4a60      	ldr	r2, [pc, #384]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008da2:	f043 0304 	orr.w	r3, r3, #4
 8008da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008da8:	4b5e      	ldr	r3, [pc, #376]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dac:	4a5d      	ldr	r2, [pc, #372]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dae:	f043 0301 	orr.w	r3, r3, #1
 8008db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008db4:	e00b      	b.n	8008dce <HAL_RCC_OscConfig+0x376>
 8008db6:	4b5b      	ldr	r3, [pc, #364]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dba:	4a5a      	ldr	r2, [pc, #360]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008dc2:	4b58      	ldr	r3, [pc, #352]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008dc6:	4a57      	ldr	r2, [pc, #348]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008dc8:	f023 0304 	bic.w	r3, r3, #4
 8008dcc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d015      	beq.n	8008e02 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd6:	f7fe f93d 	bl	8007054 <HAL_GetTick>
 8008dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ddc:	e00a      	b.n	8008df4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dde:	f7fe f939 	bl	8007054 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e0ce      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df4:	4b4b      	ldr	r3, [pc, #300]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df8:	f003 0302 	and.w	r3, r3, #2
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d0ee      	beq.n	8008dde <HAL_RCC_OscConfig+0x386>
 8008e00:	e014      	b.n	8008e2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e02:	f7fe f927 	bl	8007054 <HAL_GetTick>
 8008e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e08:	e00a      	b.n	8008e20 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e0a:	f7fe f923 	bl	8007054 <HAL_GetTick>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d901      	bls.n	8008e20 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008e1c:	2303      	movs	r3, #3
 8008e1e:	e0b8      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e20:	4b40      	ldr	r3, [pc, #256]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1ee      	bne.n	8008e0a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d105      	bne.n	8008e3e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e32:	4b3c      	ldr	r3, [pc, #240]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e36:	4a3b      	ldr	r2, [pc, #236]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e3c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 80a4 	beq.w	8008f90 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008e48:	4b36      	ldr	r3, [pc, #216]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	f003 030c 	and.w	r3, r3, #12
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d06b      	beq.n	8008f2c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	699b      	ldr	r3, [r3, #24]
 8008e58:	2b02      	cmp	r3, #2
 8008e5a:	d149      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e5c:	4b31      	ldr	r3, [pc, #196]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a30      	ldr	r2, [pc, #192]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e68:	f7fe f8f4 	bl	8007054 <HAL_GetTick>
 8008e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e6e:	e008      	b.n	8008e82 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e70:	f7fe f8f0 	bl	8007054 <HAL_GetTick>
 8008e74:	4602      	mov	r2, r0
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	1ad3      	subs	r3, r2, r3
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d901      	bls.n	8008e82 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008e7e:	2303      	movs	r3, #3
 8008e80:	e087      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e82:	4b28      	ldr	r3, [pc, #160]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1f0      	bne.n	8008e70 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	69da      	ldr	r2, [r3, #28]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6a1b      	ldr	r3, [r3, #32]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea4:	085b      	lsrs	r3, r3, #1
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	041b      	lsls	r3, r3, #16
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eb0:	061b      	lsls	r3, r3, #24
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008eb6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008eba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ebc:	4b19      	ldr	r3, [pc, #100]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a18      	ldr	r2, [pc, #96]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ec2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec8:	f7fe f8c4 	bl	8007054 <HAL_GetTick>
 8008ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ece:	e008      	b.n	8008ee2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ed0:	f7fe f8c0 	bl	8007054 <HAL_GetTick>
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	1ad3      	subs	r3, r2, r3
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e057      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ee2:	4b10      	ldr	r3, [pc, #64]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0f0      	beq.n	8008ed0 <HAL_RCC_OscConfig+0x478>
 8008eee:	e04f      	b.n	8008f90 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a0b      	ldr	r2, [pc, #44]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008ef6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efc:	f7fe f8aa 	bl	8007054 <HAL_GetTick>
 8008f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f02:	e008      	b.n	8008f16 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f04:	f7fe f8a6 	bl	8007054 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d901      	bls.n	8008f16 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008f12:	2303      	movs	r3, #3
 8008f14:	e03d      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f16:	4b03      	ldr	r3, [pc, #12]	@ (8008f24 <HAL_RCC_OscConfig+0x4cc>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1f0      	bne.n	8008f04 <HAL_RCC_OscConfig+0x4ac>
 8008f22:	e035      	b.n	8008f90 <HAL_RCC_OscConfig+0x538>
 8008f24:	40023800 	.word	0x40023800
 8008f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008f9c <HAL_RCC_OscConfig+0x544>)
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d028      	beq.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d121      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d11a      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d111      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	3b01      	subs	r3, #1
 8008f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d107      	bne.n	8008f8c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d001      	beq.n	8008f90 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e000      	b.n	8008f92 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3718      	adds	r7, #24
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	bf00      	nop
 8008f9c:	40023800 	.word	0x40023800

08008fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e0d0      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 030f 	and.w	r3, r3, #15
 8008fc0:	683a      	ldr	r2, [r7, #0]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d910      	bls.n	8008fe8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc6:	4b67      	ldr	r3, [pc, #412]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f023 020f 	bic.w	r2, r3, #15
 8008fce:	4965      	ldr	r1, [pc, #404]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fd6:	4b63      	ldr	r3, [pc, #396]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 030f 	and.w	r3, r3, #15
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	429a      	cmp	r2, r3
 8008fe2:	d001      	beq.n	8008fe8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e0b8      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0302 	and.w	r3, r3, #2
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d020      	beq.n	8009036 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0304 	and.w	r3, r3, #4
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d005      	beq.n	800900c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009000:	4b59      	ldr	r3, [pc, #356]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	4a58      	ldr	r2, [pc, #352]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009006:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800900a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0308 	and.w	r3, r3, #8
 8009014:	2b00      	cmp	r3, #0
 8009016:	d005      	beq.n	8009024 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009018:	4b53      	ldr	r3, [pc, #332]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	4a52      	ldr	r2, [pc, #328]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800901e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009024:	4b50      	ldr	r3, [pc, #320]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	494d      	ldr	r1, [pc, #308]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009032:	4313      	orrs	r3, r2
 8009034:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d040      	beq.n	80090c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d107      	bne.n	800905a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800904a:	4b47      	ldr	r3, [pc, #284]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009052:	2b00      	cmp	r3, #0
 8009054:	d115      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e07f      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d107      	bne.n	8009072 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009062:	4b41      	ldr	r3, [pc, #260]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d109      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e073      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009072:	4b3d      	ldr	r3, [pc, #244]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f003 0302 	and.w	r3, r3, #2
 800907a:	2b00      	cmp	r3, #0
 800907c:	d101      	bne.n	8009082 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800907e:	2301      	movs	r3, #1
 8009080:	e06b      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009082:	4b39      	ldr	r3, [pc, #228]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f023 0203 	bic.w	r2, r3, #3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	4936      	ldr	r1, [pc, #216]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009090:	4313      	orrs	r3, r2
 8009092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009094:	f7fd ffde 	bl	8007054 <HAL_GetTick>
 8009098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800909a:	e00a      	b.n	80090b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800909c:	f7fd ffda 	bl	8007054 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e053      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090b2:	4b2d      	ldr	r3, [pc, #180]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 020c 	and.w	r2, r3, #12
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d1eb      	bne.n	800909c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090c4:	4b27      	ldr	r3, [pc, #156]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 030f 	and.w	r3, r3, #15
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d210      	bcs.n	80090f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b24      	ldr	r3, [pc, #144]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 020f 	bic.w	r2, r3, #15
 80090da:	4922      	ldr	r1, [pc, #136]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e2:	4b20      	ldr	r3, [pc, #128]	@ (8009164 <HAL_RCC_ClockConfig+0x1c4>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 030f 	and.w	r3, r3, #15
 80090ea:	683a      	ldr	r2, [r7, #0]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d001      	beq.n	80090f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e032      	b.n	800915a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f003 0304 	and.w	r3, r3, #4
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d008      	beq.n	8009112 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009100:	4b19      	ldr	r3, [pc, #100]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	4916      	ldr	r1, [pc, #88]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800910e:	4313      	orrs	r3, r2
 8009110:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0308 	and.w	r3, r3, #8
 800911a:	2b00      	cmp	r3, #0
 800911c:	d009      	beq.n	8009132 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800911e:	4b12      	ldr	r3, [pc, #72]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	691b      	ldr	r3, [r3, #16]
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	490e      	ldr	r1, [pc, #56]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800912e:	4313      	orrs	r3, r2
 8009130:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009132:	f000 f821 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 8009136:	4602      	mov	r2, r0
 8009138:	4b0b      	ldr	r3, [pc, #44]	@ (8009168 <HAL_RCC_ClockConfig+0x1c8>)
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	091b      	lsrs	r3, r3, #4
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	490a      	ldr	r1, [pc, #40]	@ (800916c <HAL_RCC_ClockConfig+0x1cc>)
 8009144:	5ccb      	ldrb	r3, [r1, r3]
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	4a09      	ldr	r2, [pc, #36]	@ (8009170 <HAL_RCC_ClockConfig+0x1d0>)
 800914c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800914e:	4b09      	ldr	r3, [pc, #36]	@ (8009174 <HAL_RCC_ClockConfig+0x1d4>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4618      	mov	r0, r3
 8009154:	f7fd fd1e 	bl	8006b94 <HAL_InitTick>

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	40023c00 	.word	0x40023c00
 8009168:	40023800 	.word	0x40023800
 800916c:	08018bf0 	.word	0x08018bf0
 8009170:	20000054 	.word	0x20000054
 8009174:	20000058 	.word	0x20000058

08009178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800917c:	b094      	sub	sp, #80	@ 0x50
 800917e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	647b      	str	r3, [r7, #68]	@ 0x44
 8009184:	2300      	movs	r3, #0
 8009186:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009188:	2300      	movs	r3, #0
 800918a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009190:	4b79      	ldr	r3, [pc, #484]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 030c 	and.w	r3, r3, #12
 8009198:	2b08      	cmp	r3, #8
 800919a:	d00d      	beq.n	80091b8 <HAL_RCC_GetSysClockFreq+0x40>
 800919c:	2b08      	cmp	r3, #8
 800919e:	f200 80e1 	bhi.w	8009364 <HAL_RCC_GetSysClockFreq+0x1ec>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d002      	beq.n	80091ac <HAL_RCC_GetSysClockFreq+0x34>
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d003      	beq.n	80091b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80091aa:	e0db      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80091ac:	4b73      	ldr	r3, [pc, #460]	@ (800937c <HAL_RCC_GetSysClockFreq+0x204>)
 80091ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80091b0:	e0db      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80091b2:	4b73      	ldr	r3, [pc, #460]	@ (8009380 <HAL_RCC_GetSysClockFreq+0x208>)
 80091b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80091b6:	e0d8      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80091b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80091c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80091c2:	4b6d      	ldr	r3, [pc, #436]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d063      	beq.n	8009296 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	099b      	lsrs	r3, r3, #6
 80091d4:	2200      	movs	r2, #0
 80091d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80091d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80091da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80091e2:	2300      	movs	r3, #0
 80091e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80091ea:	4622      	mov	r2, r4
 80091ec:	462b      	mov	r3, r5
 80091ee:	f04f 0000 	mov.w	r0, #0
 80091f2:	f04f 0100 	mov.w	r1, #0
 80091f6:	0159      	lsls	r1, r3, #5
 80091f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091fc:	0150      	lsls	r0, r2, #5
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4621      	mov	r1, r4
 8009204:	1a51      	subs	r1, r2, r1
 8009206:	6139      	str	r1, [r7, #16]
 8009208:	4629      	mov	r1, r5
 800920a:	eb63 0301 	sbc.w	r3, r3, r1
 800920e:	617b      	str	r3, [r7, #20]
 8009210:	f04f 0200 	mov.w	r2, #0
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800921c:	4659      	mov	r1, fp
 800921e:	018b      	lsls	r3, r1, #6
 8009220:	4651      	mov	r1, sl
 8009222:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009226:	4651      	mov	r1, sl
 8009228:	018a      	lsls	r2, r1, #6
 800922a:	4651      	mov	r1, sl
 800922c:	ebb2 0801 	subs.w	r8, r2, r1
 8009230:	4659      	mov	r1, fp
 8009232:	eb63 0901 	sbc.w	r9, r3, r1
 8009236:	f04f 0200 	mov.w	r2, #0
 800923a:	f04f 0300 	mov.w	r3, #0
 800923e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009242:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009246:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800924a:	4690      	mov	r8, r2
 800924c:	4699      	mov	r9, r3
 800924e:	4623      	mov	r3, r4
 8009250:	eb18 0303 	adds.w	r3, r8, r3
 8009254:	60bb      	str	r3, [r7, #8]
 8009256:	462b      	mov	r3, r5
 8009258:	eb49 0303 	adc.w	r3, r9, r3
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	f04f 0200 	mov.w	r2, #0
 8009262:	f04f 0300 	mov.w	r3, #0
 8009266:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800926a:	4629      	mov	r1, r5
 800926c:	024b      	lsls	r3, r1, #9
 800926e:	4621      	mov	r1, r4
 8009270:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009274:	4621      	mov	r1, r4
 8009276:	024a      	lsls	r2, r1, #9
 8009278:	4610      	mov	r0, r2
 800927a:	4619      	mov	r1, r3
 800927c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800927e:	2200      	movs	r2, #0
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009288:	f7f7 fce0 	bl	8000c4c <__aeabi_uldivmod>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4613      	mov	r3, r2
 8009292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009294:	e058      	b.n	8009348 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009296:	4b38      	ldr	r3, [pc, #224]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	099b      	lsrs	r3, r3, #6
 800929c:	2200      	movs	r2, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	4611      	mov	r1, r2
 80092a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80092a6:	623b      	str	r3, [r7, #32]
 80092a8:	2300      	movs	r3, #0
 80092aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80092ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80092b0:	4642      	mov	r2, r8
 80092b2:	464b      	mov	r3, r9
 80092b4:	f04f 0000 	mov.w	r0, #0
 80092b8:	f04f 0100 	mov.w	r1, #0
 80092bc:	0159      	lsls	r1, r3, #5
 80092be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092c2:	0150      	lsls	r0, r2, #5
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4641      	mov	r1, r8
 80092ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80092ce:	4649      	mov	r1, r9
 80092d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80092e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80092e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80092e8:	ebb2 040a 	subs.w	r4, r2, sl
 80092ec:	eb63 050b 	sbc.w	r5, r3, fp
 80092f0:	f04f 0200 	mov.w	r2, #0
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	00eb      	lsls	r3, r5, #3
 80092fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80092fe:	00e2      	lsls	r2, r4, #3
 8009300:	4614      	mov	r4, r2
 8009302:	461d      	mov	r5, r3
 8009304:	4643      	mov	r3, r8
 8009306:	18e3      	adds	r3, r4, r3
 8009308:	603b      	str	r3, [r7, #0]
 800930a:	464b      	mov	r3, r9
 800930c:	eb45 0303 	adc.w	r3, r5, r3
 8009310:	607b      	str	r3, [r7, #4]
 8009312:	f04f 0200 	mov.w	r2, #0
 8009316:	f04f 0300 	mov.w	r3, #0
 800931a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800931e:	4629      	mov	r1, r5
 8009320:	028b      	lsls	r3, r1, #10
 8009322:	4621      	mov	r1, r4
 8009324:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009328:	4621      	mov	r1, r4
 800932a:	028a      	lsls	r2, r1, #10
 800932c:	4610      	mov	r0, r2
 800932e:	4619      	mov	r1, r3
 8009330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009332:	2200      	movs	r2, #0
 8009334:	61bb      	str	r3, [r7, #24]
 8009336:	61fa      	str	r2, [r7, #28]
 8009338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800933c:	f7f7 fc86 	bl	8000c4c <__aeabi_uldivmod>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4613      	mov	r3, r2
 8009346:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009348:	4b0b      	ldr	r3, [pc, #44]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x200>)
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	0c1b      	lsrs	r3, r3, #16
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	3301      	adds	r3, #1
 8009354:	005b      	lsls	r3, r3, #1
 8009356:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009358:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800935a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800935c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009360:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009362:	e002      	b.n	800936a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009364:	4b05      	ldr	r3, [pc, #20]	@ (800937c <HAL_RCC_GetSysClockFreq+0x204>)
 8009366:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009368:	bf00      	nop
    }
  }
  return sysclockfreq;
 800936a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800936c:	4618      	mov	r0, r3
 800936e:	3750      	adds	r7, #80	@ 0x50
 8009370:	46bd      	mov	sp, r7
 8009372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009376:	bf00      	nop
 8009378:	40023800 	.word	0x40023800
 800937c:	00f42400 	.word	0x00f42400
 8009380:	007a1200 	.word	0x007a1200

08009384 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009388:	4b03      	ldr	r3, [pc, #12]	@ (8009398 <HAL_RCC_GetHCLKFreq+0x14>)
 800938a:	681b      	ldr	r3, [r3, #0]
}
 800938c:	4618      	mov	r0, r3
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr
 8009396:	bf00      	nop
 8009398:	20000054 	.word	0x20000054

0800939c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80093a0:	f7ff fff0 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 80093a4:	4602      	mov	r2, r0
 80093a6:	4b05      	ldr	r3, [pc, #20]	@ (80093bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	0a9b      	lsrs	r3, r3, #10
 80093ac:	f003 0307 	and.w	r3, r3, #7
 80093b0:	4903      	ldr	r1, [pc, #12]	@ (80093c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093b2:	5ccb      	ldrb	r3, [r1, r3]
 80093b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	40023800 	.word	0x40023800
 80093c0:	08018c00 	.word	0x08018c00

080093c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80093c8:	f7ff ffdc 	bl	8009384 <HAL_RCC_GetHCLKFreq>
 80093cc:	4602      	mov	r2, r0
 80093ce:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	0b5b      	lsrs	r3, r3, #13
 80093d4:	f003 0307 	and.w	r3, r3, #7
 80093d8:	4903      	ldr	r1, [pc, #12]	@ (80093e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80093da:	5ccb      	ldrb	r3, [r1, r3]
 80093dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	40023800 	.word	0x40023800
 80093e8:	08018c00 	.word	0x08018c00

080093ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	220f      	movs	r2, #15
 80093fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80093fc:	4b12      	ldr	r3, [pc, #72]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	f003 0203 	and.w	r2, r3, #3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009408:	4b0f      	ldr	r3, [pc, #60]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009414:	4b0c      	ldr	r3, [pc, #48]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009420:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <HAL_RCC_GetClockConfig+0x5c>)
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	08db      	lsrs	r3, r3, #3
 8009426:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800942e:	4b07      	ldr	r3, [pc, #28]	@ (800944c <HAL_RCC_GetClockConfig+0x60>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	601a      	str	r2, [r3, #0]
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	40023800 	.word	0x40023800
 800944c:	40023c00 	.word	0x40023c00

08009450 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b088      	sub	sp, #32
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009460:	2300      	movs	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d012      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009478:	4b69      	ldr	r3, [pc, #420]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	4a68      	ldr	r2, [pc, #416]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800947e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009482:	6093      	str	r3, [r2, #8]
 8009484:	4b66      	ldr	r3, [pc, #408]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009486:	689a      	ldr	r2, [r3, #8]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800948c:	4964      	ldr	r1, [pc, #400]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800948e:	4313      	orrs	r3, r2
 8009490:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009496:	2b00      	cmp	r3, #0
 8009498:	d101      	bne.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d017      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094aa:	4b5d      	ldr	r3, [pc, #372]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094b0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094b8:	4959      	ldr	r1, [pc, #356]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094c8:	d101      	bne.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80094ca:	2301      	movs	r3, #1
 80094cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d017      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80094e6:	4b4e      	ldr	r3, [pc, #312]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094ec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094f4:	494a      	ldr	r1, [pc, #296]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009504:	d101      	bne.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009506:	2301      	movs	r3, #1
 8009508:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009512:	2301      	movs	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009522:	2301      	movs	r3, #1
 8009524:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0320 	and.w	r3, r3, #32
 800952e:	2b00      	cmp	r3, #0
 8009530:	f000 808b 	beq.w	800964a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009534:	4b3a      	ldr	r3, [pc, #232]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009538:	4a39      	ldr	r2, [pc, #228]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800953a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800953e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009540:	4b37      	ldr	r3, [pc, #220]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009544:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009548:	60bb      	str	r3, [r7, #8]
 800954a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800954c:	4b35      	ldr	r3, [pc, #212]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	4a34      	ldr	r2, [pc, #208]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009556:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009558:	f7fd fd7c 	bl	8007054 <HAL_GetTick>
 800955c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800955e:	e008      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009560:	f7fd fd78 	bl	8007054 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b64      	cmp	r3, #100	@ 0x64
 800956c:	d901      	bls.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e357      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009572:	4b2c      	ldr	r3, [pc, #176]	@ (8009624 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800957a:	2b00      	cmp	r3, #0
 800957c:	d0f0      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800957e:	4b28      	ldr	r3, [pc, #160]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009586:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d035      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	429a      	cmp	r2, r3
 800959a:	d02e      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800959c:	4b20      	ldr	r3, [pc, #128]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800959e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095a4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80095a6:	4b1e      	ldr	r3, [pc, #120]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095aa:	4a1d      	ldr	r2, [pc, #116]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095b0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095b6:	4a1a      	ldr	r2, [pc, #104]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095bc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80095c4:	4b16      	ldr	r3, [pc, #88]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095c8:	f003 0301 	and.w	r3, r3, #1
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d114      	bne.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d0:	f7fd fd40 	bl	8007054 <HAL_GetTick>
 80095d4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d6:	e00a      	b.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80095d8:	f7fd fd3c 	bl	8007054 <HAL_GetTick>
 80095dc:	4602      	mov	r2, r0
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d901      	bls.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80095ea:	2303      	movs	r3, #3
 80095ec:	e319      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095f2:	f003 0302 	and.w	r3, r3, #2
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d0ee      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009606:	d111      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009608:	4b05      	ldr	r3, [pc, #20]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009614:	4b04      	ldr	r3, [pc, #16]	@ (8009628 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009616:	400b      	ands	r3, r1
 8009618:	4901      	ldr	r1, [pc, #4]	@ (8009620 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800961a:	4313      	orrs	r3, r2
 800961c:	608b      	str	r3, [r1, #8]
 800961e:	e00b      	b.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009620:	40023800 	.word	0x40023800
 8009624:	40007000 	.word	0x40007000
 8009628:	0ffffcff 	.word	0x0ffffcff
 800962c:	4baa      	ldr	r3, [pc, #680]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	4aa9      	ldr	r2, [pc, #676]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009632:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009636:	6093      	str	r3, [r2, #8]
 8009638:	4ba7      	ldr	r3, [pc, #668]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009644:	49a4      	ldr	r1, [pc, #656]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009646:	4313      	orrs	r3, r2
 8009648:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0310 	and.w	r3, r3, #16
 8009652:	2b00      	cmp	r3, #0
 8009654:	d010      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009656:	4ba0      	ldr	r3, [pc, #640]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009658:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800965c:	4a9e      	ldr	r2, [pc, #632]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009662:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009666:	4b9c      	ldr	r3, [pc, #624]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009668:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009670:	4999      	ldr	r1, [pc, #612]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009672:	4313      	orrs	r3, r2
 8009674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d00a      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009684:	4b94      	ldr	r3, [pc, #592]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009692:	4991      	ldr	r1, [pc, #580]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80096a6:	4b8c      	ldr	r3, [pc, #560]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096b4:	4988      	ldr	r1, [pc, #544]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b6:	4313      	orrs	r3, r2
 80096b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80096c8:	4b83      	ldr	r3, [pc, #524]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096d6:	4980      	ldr	r1, [pc, #512]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d8:	4313      	orrs	r3, r2
 80096da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096ea:	4b7b      	ldr	r3, [pc, #492]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096f0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096f8:	4977      	ldr	r1, [pc, #476]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d00a      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800970c:	4b72      	ldr	r3, [pc, #456]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800970e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009712:	f023 0203 	bic.w	r2, r3, #3
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800971a:	496f      	ldr	r1, [pc, #444]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800971c:	4313      	orrs	r3, r2
 800971e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00a      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800972e:	4b6a      	ldr	r3, [pc, #424]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009730:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009734:	f023 020c 	bic.w	r2, r3, #12
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973c:	4966      	ldr	r1, [pc, #408]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800973e:	4313      	orrs	r3, r2
 8009740:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009750:	4b61      	ldr	r3, [pc, #388]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009756:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800975e:	495e      	ldr	r1, [pc, #376]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009772:	4b59      	ldr	r3, [pc, #356]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009778:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009780:	4955      	ldr	r1, [pc, #340]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00a      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009794:	4b50      	ldr	r3, [pc, #320]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800979a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097a2:	494d      	ldr	r1, [pc, #308]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097a4:	4313      	orrs	r3, r2
 80097a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00a      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80097b6:	4b48      	ldr	r3, [pc, #288]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097bc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c4:	4944      	ldr	r1, [pc, #272]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80097d8:	4b3f      	ldr	r3, [pc, #252]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097de:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80097e6:	493c      	ldr	r1, [pc, #240]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80097fa:	4b37      	ldr	r3, [pc, #220]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80097fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009800:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009808:	4933      	ldr	r1, [pc, #204]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800980a:	4313      	orrs	r3, r2
 800980c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d00a      	beq.n	8009832 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800981c:	4b2e      	ldr	r3, [pc, #184]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009822:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800982a:	492b      	ldr	r1, [pc, #172]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800982c:	4313      	orrs	r3, r2
 800982e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d011      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800983e:	4b26      	ldr	r3, [pc, #152]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009840:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009844:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800984c:	4922      	ldr	r1, [pc, #136]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800984e:	4313      	orrs	r3, r2
 8009850:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009858:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985c:	d101      	bne.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800985e:	2301      	movs	r3, #1
 8009860:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f003 0308 	and.w	r3, r3, #8
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800986e:	2301      	movs	r3, #1
 8009870:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00a      	beq.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800987e:	4b16      	ldr	r3, [pc, #88]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009880:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009884:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800988c:	4912      	ldr	r1, [pc, #72]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800988e:	4313      	orrs	r3, r2
 8009890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00b      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80098a0:	4b0d      	ldr	r3, [pc, #52]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098b0:	4909      	ldr	r1, [pc, #36]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d006      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	f000 80d9 	beq.w	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80098cc:	4b02      	ldr	r3, [pc, #8]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a01      	ldr	r2, [pc, #4]	@ (80098d8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80098d6:	e001      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80098d8:	40023800 	.word	0x40023800
 80098dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098de:	f7fd fbb9 	bl	8007054 <HAL_GetTick>
 80098e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098e4:	e008      	b.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80098e6:	f7fd fbb5 	bl	8007054 <HAL_GetTick>
 80098ea:	4602      	mov	r2, r0
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	2b64      	cmp	r3, #100	@ 0x64
 80098f2:	d901      	bls.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098f4:	2303      	movs	r3, #3
 80098f6:	e194      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80098f8:	4b6c      	ldr	r3, [pc, #432]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d1f0      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 0301 	and.w	r3, r3, #1
 800990c:	2b00      	cmp	r3, #0
 800990e:	d021      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009914:	2b00      	cmp	r3, #0
 8009916:	d11d      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009918:	4b64      	ldr	r3, [pc, #400]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800991a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800991e:	0c1b      	lsrs	r3, r3, #16
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009926:	4b61      	ldr	r3, [pc, #388]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009928:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800992c:	0e1b      	lsrs	r3, r3, #24
 800992e:	f003 030f 	and.w	r3, r3, #15
 8009932:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	019a      	lsls	r2, r3, #6
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	041b      	lsls	r3, r3, #16
 800993e:	431a      	orrs	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	061b      	lsls	r3, r3, #24
 8009944:	431a      	orrs	r2, r3
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	071b      	lsls	r3, r3, #28
 800994c:	4957      	ldr	r1, [pc, #348]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800994e:	4313      	orrs	r3, r2
 8009950:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009964:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009968:	d00a      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009972:	2b00      	cmp	r3, #0
 8009974:	d02e      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800997e:	d129      	bne.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009980:	4b4a      	ldr	r3, [pc, #296]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009986:	0c1b      	lsrs	r3, r3, #16
 8009988:	f003 0303 	and.w	r3, r3, #3
 800998c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800998e:	4b47      	ldr	r3, [pc, #284]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009990:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009994:	0f1b      	lsrs	r3, r3, #28
 8009996:	f003 0307 	and.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	019a      	lsls	r2, r3, #6
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	041b      	lsls	r3, r3, #16
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	431a      	orrs	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	071b      	lsls	r3, r3, #28
 80099b4:	493d      	ldr	r1, [pc, #244]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80099bc:	4b3b      	ldr	r3, [pc, #236]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80099c2:	f023 021f 	bic.w	r2, r3, #31
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4937      	ldr	r1, [pc, #220]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d01d      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80099e0:	4b32      	ldr	r3, [pc, #200]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099e6:	0e1b      	lsrs	r3, r3, #24
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099ee:	4b2f      	ldr	r3, [pc, #188]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80099f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099f4:	0f1b      	lsrs	r3, r3, #28
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	019a      	lsls	r2, r3, #6
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	041b      	lsls	r3, r3, #16
 8009a08:	431a      	orrs	r2, r3
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	431a      	orrs	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	071b      	lsls	r3, r3, #28
 8009a14:	4925      	ldr	r1, [pc, #148]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d011      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	019a      	lsls	r2, r3, #6
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	041b      	lsls	r3, r3, #16
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	061b      	lsls	r3, r3, #24
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	071b      	lsls	r3, r3, #28
 8009a44:	4919      	ldr	r1, [pc, #100]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a4c:	4b17      	ldr	r3, [pc, #92]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a16      	ldr	r2, [pc, #88]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a58:	f7fd fafc 	bl	8007054 <HAL_GetTick>
 8009a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a5e:	e008      	b.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a60:	f7fd faf8 	bl	8007054 <HAL_GetTick>
 8009a64:	4602      	mov	r2, r0
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	2b64      	cmp	r3, #100	@ 0x64
 8009a6c:	d901      	bls.n	8009a72 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e0d7      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a72:	4b0e      	ldr	r3, [pc, #56]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d0f0      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009a7e:	69bb      	ldr	r3, [r7, #24]
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	f040 80cd 	bne.w	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a86:	4b09      	ldr	r3, [pc, #36]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a08      	ldr	r2, [pc, #32]	@ (8009aac <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009a8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a92:	f7fd fadf 	bl	8007054 <HAL_GetTick>
 8009a96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a98:	e00a      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a9a:	f7fd fadb 	bl	8007054 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b64      	cmp	r3, #100	@ 0x64
 8009aa6:	d903      	bls.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e0ba      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009aac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ab0:	4b5e      	ldr	r3, [pc, #376]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009abc:	d0ed      	beq.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d009      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d02e      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d12a      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ae6:	4b51      	ldr	r3, [pc, #324]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aec:	0c1b      	lsrs	r3, r3, #16
 8009aee:	f003 0303 	and.w	r3, r3, #3
 8009af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009af4:	4b4d      	ldr	r3, [pc, #308]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afa:	0f1b      	lsrs	r3, r3, #28
 8009afc:	f003 0307 	and.w	r3, r3, #7
 8009b00:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	019a      	lsls	r2, r3, #6
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	041b      	lsls	r3, r3, #16
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699b      	ldr	r3, [r3, #24]
 8009b12:	061b      	lsls	r3, r3, #24
 8009b14:	431a      	orrs	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	071b      	lsls	r3, r3, #28
 8009b1a:	4944      	ldr	r1, [pc, #272]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009b22:	4b42      	ldr	r3, [pc, #264]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009b28:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b30:	3b01      	subs	r3, #1
 8009b32:	021b      	lsls	r3, r3, #8
 8009b34:	493d      	ldr	r1, [pc, #244]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d022      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b50:	d11d      	bne.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b52:	4b36      	ldr	r3, [pc, #216]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b58:	0e1b      	lsrs	r3, r3, #24
 8009b5a:	f003 030f 	and.w	r3, r3, #15
 8009b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009b60:	4b32      	ldr	r3, [pc, #200]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b66:	0f1b      	lsrs	r3, r3, #28
 8009b68:	f003 0307 	and.w	r3, r3, #7
 8009b6c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	019a      	lsls	r2, r3, #6
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	041b      	lsls	r3, r3, #16
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	061b      	lsls	r3, r3, #24
 8009b80:	431a      	orrs	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	071b      	lsls	r3, r3, #28
 8009b86:	4929      	ldr	r1, [pc, #164]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 0308 	and.w	r3, r3, #8
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d028      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b9a:	4b24      	ldr	r3, [pc, #144]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba0:	0e1b      	lsrs	r3, r3, #24
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ba8:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bae:	0c1b      	lsrs	r3, r3, #16
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	019a      	lsls	r2, r3, #6
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	041b      	lsls	r3, r3, #16
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	061b      	lsls	r3, r3, #24
 8009bc6:	431a      	orrs	r2, r3
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	071b      	lsls	r3, r3, #28
 8009bce:	4917      	ldr	r1, [pc, #92]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009bd6:	4b15      	ldr	r3, [pc, #84]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009be4:	4911      	ldr	r1, [pc, #68]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009be6:	4313      	orrs	r3, r2
 8009be8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009bec:	4b0f      	ldr	r3, [pc, #60]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bf8:	f7fd fa2c 	bl	8007054 <HAL_GetTick>
 8009bfc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009bfe:	e008      	b.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c00:	f7fd fa28 	bl	8007054 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	2b64      	cmp	r3, #100	@ 0x64
 8009c0c:	d901      	bls.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e007      	b.n	8009c22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c12:	4b06      	ldr	r3, [pc, #24]	@ (8009c2c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c1e:	d1ef      	bne.n	8009c00 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	40023800 	.word	0x40023800

08009c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e09d      	b.n	8009d7e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d108      	bne.n	8009c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c52:	d009      	beq.n	8009c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	61da      	str	r2, [r3, #28]
 8009c5a:	e005      	b.n	8009c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7fc f9c0 	bl	8006008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68db      	ldr	r3, [r3, #12]
 8009ca4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ca8:	d902      	bls.n	8009cb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009caa:	2300      	movs	r3, #0
 8009cac:	60fb      	str	r3, [r7, #12]
 8009cae:	e002      	b.n	8009cb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009cbe:	d007      	beq.n	8009cd0 <HAL_SPI_Init+0xa0>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009cc8:	d002      	beq.n	8009cd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	431a      	orrs	r2, r3
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	695b      	ldr	r3, [r3, #20]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cfe:	431a      	orrs	r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d08:	431a      	orrs	r2, r3
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d12:	ea42 0103 	orr.w	r1, r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	430a      	orrs	r2, r1
 8009d24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	0c1b      	lsrs	r3, r3, #16
 8009d2c:	f003 0204 	and.w	r2, r3, #4
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d34:	f003 0310 	and.w	r3, r3, #16
 8009d38:	431a      	orrs	r2, r3
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	431a      	orrs	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009d4c:	ea42 0103 	orr.w	r1, r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	69da      	ldr	r2, [r3, #28]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b088      	sub	sp, #32
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	603b      	str	r3, [r7, #0]
 8009d92:	4613      	mov	r3, r2
 8009d94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_SPI_Transmit+0x22>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e15f      	b.n	800a068 <HAL_SPI_Transmit+0x2e2>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009db0:	f7fd f950 	bl	8007054 <HAL_GetTick>
 8009db4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d002      	beq.n	8009dcc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009dc6:	2302      	movs	r3, #2
 8009dc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009dca:	e148      	b.n	800a05e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d002      	beq.n	8009dd8 <HAL_SPI_Transmit+0x52>
 8009dd2:	88fb      	ldrh	r3, [r7, #6]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d102      	bne.n	8009dde <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009ddc:	e13f      	b.n	800a05e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2203      	movs	r2, #3
 8009de2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	68ba      	ldr	r2, [r7, #8]
 8009df0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	88fa      	ldrh	r2, [r7, #6]
 8009df6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	88fa      	ldrh	r2, [r7, #6]
 8009dfc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2200      	movs	r2, #0
 8009e02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e28:	d10f      	bne.n	8009e4a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009e48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e54:	2b40      	cmp	r3, #64	@ 0x40
 8009e56:	d007      	beq.n	8009e68 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009e70:	d94f      	bls.n	8009f12 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_SPI_Transmit+0xfa>
 8009e7a:	8afb      	ldrh	r3, [r7, #22]
 8009e7c:	2b01      	cmp	r3, #1
 8009e7e:	d142      	bne.n	8009f06 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e84:	881a      	ldrh	r2, [r3, #0]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e90:	1c9a      	adds	r2, r3, #2
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009ea4:	e02f      	b.n	8009f06 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	f003 0302 	and.w	r3, r3, #2
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d112      	bne.n	8009eda <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eb8:	881a      	ldrh	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec4:	1c9a      	adds	r2, r3, #2
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ed8:	e015      	b.n	8009f06 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009eda:	f7fd f8bb 	bl	8007054 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	683a      	ldr	r2, [r7, #0]
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d803      	bhi.n	8009ef2 <HAL_SPI_Transmit+0x16c>
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef0:	d102      	bne.n	8009ef8 <HAL_SPI_Transmit+0x172>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d106      	bne.n	8009f06 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009ef8:	2303      	movs	r3, #3
 8009efa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009f04:	e0ab      	b.n	800a05e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d1ca      	bne.n	8009ea6 <HAL_SPI_Transmit+0x120>
 8009f10:	e080      	b.n	800a014 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_SPI_Transmit+0x19a>
 8009f1a:	8afb      	ldrh	r3, [r7, #22]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d174      	bne.n	800a00a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d912      	bls.n	8009f50 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f2e:	881a      	ldrh	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f3a:	1c9a      	adds	r2, r3, #2
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	3b02      	subs	r3, #2
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009f4e:	e05c      	b.n	800a00a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	7812      	ldrb	r2, [r2, #0]
 8009f5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f62:	1c5a      	adds	r2, r3, #1
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f6c:	b29b      	uxth	r3, r3
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009f76:	e048      	b.n	800a00a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f003 0302 	and.w	r3, r3, #2
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d12b      	bne.n	8009fde <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d912      	bls.n	8009fb6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f94:	881a      	ldrh	r2, [r3, #0]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa0:	1c9a      	adds	r2, r3, #2
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	3b02      	subs	r3, #2
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009fb4:	e029      	b.n	800a00a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	330c      	adds	r3, #12
 8009fc0:	7812      	ldrb	r2, [r2, #0]
 8009fc2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc8:	1c5a      	adds	r2, r3, #1
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009fdc:	e015      	b.n	800a00a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009fde:	f7fd f839 	bl	8007054 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	69bb      	ldr	r3, [r7, #24]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d803      	bhi.n	8009ff6 <HAL_SPI_Transmit+0x270>
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff4:	d102      	bne.n	8009ffc <HAL_SPI_Transmit+0x276>
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d106      	bne.n	800a00a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009ffc:	2303      	movs	r3, #3
 8009ffe:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a008:	e029      	b.n	800a05e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a00e:	b29b      	uxth	r3, r3
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1b1      	bne.n	8009f78 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a014:	69ba      	ldr	r2, [r7, #24]
 800a016:	6839      	ldr	r1, [r7, #0]
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f000 fb69 	bl	800a6f0 <SPI_EndRxTxTransaction>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d002      	beq.n	800a02a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a032:	2300      	movs	r3, #0
 800a034:	613b      	str	r3, [r7, #16]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	613b      	str	r3, [r7, #16]
 800a046:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	77fb      	strb	r3, [r7, #31]
 800a054:	e003      	b.n	800a05e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a066:	7ffb      	ldrb	r3, [r7, #31]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b08a      	sub	sp, #40	@ 0x28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
 800a07c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a07e:	2301      	movs	r3, #1
 800a080:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d101      	bne.n	800a096 <HAL_SPI_TransmitReceive+0x26>
 800a092:	2302      	movs	r3, #2
 800a094:	e20a      	b.n	800a4ac <HAL_SPI_TransmitReceive+0x43c>
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a09e:	f7fc ffd9 	bl	8007054 <HAL_GetTick>
 800a0a2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0aa:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a0b2:	887b      	ldrh	r3, [r7, #2]
 800a0b4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a0b6:	887b      	ldrh	r3, [r7, #2]
 800a0b8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a0ba:	7efb      	ldrb	r3, [r7, #27]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d00e      	beq.n	800a0de <HAL_SPI_TransmitReceive+0x6e>
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c6:	d106      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689b      	ldr	r3, [r3, #8]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d102      	bne.n	800a0d6 <HAL_SPI_TransmitReceive+0x66>
 800a0d0:	7efb      	ldrb	r3, [r7, #27]
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d003      	beq.n	800a0de <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a0dc:	e1e0      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d005      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x80>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <HAL_SPI_TransmitReceive+0x80>
 800a0ea:	887b      	ldrh	r3, [r7, #2]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a0f6:	e1d3      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a0fe:	b2db      	uxtb	r3, r3
 800a100:	2b04      	cmp	r3, #4
 800a102:	d003      	beq.n	800a10c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2205      	movs	r2, #5
 800a108:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	887a      	ldrh	r2, [r7, #2]
 800a11c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	887a      	ldrh	r2, [r7, #2]
 800a124:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	887a      	ldrh	r2, [r7, #2]
 800a132:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	887a      	ldrh	r2, [r7, #2]
 800a138:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a14e:	d802      	bhi.n	800a156 <HAL_SPI_TransmitReceive+0xe6>
 800a150:	8a3b      	ldrh	r3, [r7, #16]
 800a152:	2b01      	cmp	r3, #1
 800a154:	d908      	bls.n	800a168 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a164:	605a      	str	r2, [r3, #4]
 800a166:	e007      	b.n	800a178 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	685a      	ldr	r2, [r3, #4]
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a176:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a182:	2b40      	cmp	r3, #64	@ 0x40
 800a184:	d007      	beq.n	800a196 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a194:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a19e:	f240 8081 	bls.w	800a2a4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d002      	beq.n	800a1b0 <HAL_SPI_TransmitReceive+0x140>
 800a1aa:	8a7b      	ldrh	r3, [r7, #18]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d16d      	bne.n	800a28c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1b4:	881a      	ldrh	r2, [r3, #0]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1c0:	1c9a      	adds	r2, r3, #2
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	b29a      	uxth	r2, r3
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1d4:	e05a      	b.n	800a28c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689b      	ldr	r3, [r3, #8]
 800a1dc:	f003 0302 	and.w	r3, r3, #2
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d11b      	bne.n	800a21c <HAL_SPI_TransmitReceive+0x1ac>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d016      	beq.n	800a21c <HAL_SPI_TransmitReceive+0x1ac>
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d113      	bne.n	800a21c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1f8:	881a      	ldrh	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a204:	1c9a      	adds	r2, r3, #2
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a20e:	b29b      	uxth	r3, r3
 800a210:	3b01      	subs	r3, #1
 800a212:	b29a      	uxth	r2, r3
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a218:	2300      	movs	r3, #0
 800a21a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b01      	cmp	r3, #1
 800a228:	d11c      	bne.n	800a264 <HAL_SPI_TransmitReceive+0x1f4>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a230:	b29b      	uxth	r3, r3
 800a232:	2b00      	cmp	r3, #0
 800a234:	d016      	beq.n	800a264 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68da      	ldr	r2, [r3, #12]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a240:	b292      	uxth	r2, r2
 800a242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a248:	1c9a      	adds	r2, r3, #2
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a254:	b29b      	uxth	r3, r3
 800a256:	3b01      	subs	r3, #1
 800a258:	b29a      	uxth	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a260:	2301      	movs	r3, #1
 800a262:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a264:	f7fc fef6 	bl	8007054 <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a270:	429a      	cmp	r2, r3
 800a272:	d80b      	bhi.n	800a28c <HAL_SPI_TransmitReceive+0x21c>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27a:	d007      	beq.n	800a28c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a28a:	e109      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a290:	b29b      	uxth	r3, r3
 800a292:	2b00      	cmp	r3, #0
 800a294:	d19f      	bne.n	800a1d6 <HAL_SPI_TransmitReceive+0x166>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d199      	bne.n	800a1d6 <HAL_SPI_TransmitReceive+0x166>
 800a2a2:	e0e3      	b.n	800a46c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d003      	beq.n	800a2b4 <HAL_SPI_TransmitReceive+0x244>
 800a2ac:	8a7b      	ldrh	r3, [r7, #18]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	f040 80cf 	bne.w	800a452 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d912      	bls.n	800a2e4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c2:	881a      	ldrh	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ce:	1c9a      	adds	r2, r3, #2
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	3b02      	subs	r3, #2
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2e2:	e0b6      	b.n	800a452 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	330c      	adds	r3, #12
 800a2ee:	7812      	ldrb	r2, [r2, #0]
 800a2f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a300:	b29b      	uxth	r3, r3
 800a302:	3b01      	subs	r3, #1
 800a304:	b29a      	uxth	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a30a:	e0a2      	b.n	800a452 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	f003 0302 	and.w	r3, r3, #2
 800a316:	2b02      	cmp	r3, #2
 800a318:	d134      	bne.n	800a384 <HAL_SPI_TransmitReceive+0x314>
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a31e:	b29b      	uxth	r3, r3
 800a320:	2b00      	cmp	r3, #0
 800a322:	d02f      	beq.n	800a384 <HAL_SPI_TransmitReceive+0x314>
 800a324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a326:	2b01      	cmp	r3, #1
 800a328:	d12c      	bne.n	800a384 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b01      	cmp	r3, #1
 800a332:	d912      	bls.n	800a35a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a338:	881a      	ldrh	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a344:	1c9a      	adds	r2, r3, #2
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a34e:	b29b      	uxth	r3, r3
 800a350:	3b02      	subs	r3, #2
 800a352:	b29a      	uxth	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a358:	e012      	b.n	800a380 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	330c      	adds	r3, #12
 800a364:	7812      	ldrb	r2, [r2, #0]
 800a366:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36c:	1c5a      	adds	r2, r3, #1
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a376:	b29b      	uxth	r3, r3
 800a378:	3b01      	subs	r3, #1
 800a37a:	b29a      	uxth	r2, r3
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	689b      	ldr	r3, [r3, #8]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d148      	bne.n	800a424 <HAL_SPI_TransmitReceive+0x3b4>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a398:	b29b      	uxth	r3, r3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d042      	beq.n	800a424 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d923      	bls.n	800a3f2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3b4:	b292      	uxth	r2, r2
 800a3b6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3bc:	1c9a      	adds	r2, r3, #2
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b02      	subs	r3, #2
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d81f      	bhi.n	800a420 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685a      	ldr	r2, [r3, #4]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a3ee:	605a      	str	r2, [r3, #4]
 800a3f0:	e016      	b.n	800a420 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f103 020c 	add.w	r2, r3, #12
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3fe:	7812      	ldrb	r2, [r2, #0]
 800a400:	b2d2      	uxtb	r2, r2
 800a402:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a414:	b29b      	uxth	r3, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a420:	2301      	movs	r3, #1
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a424:	f7fc fe16 	bl	8007054 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a430:	429a      	cmp	r2, r3
 800a432:	d803      	bhi.n	800a43c <HAL_SPI_TransmitReceive+0x3cc>
 800a434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43a:	d102      	bne.n	800a442 <HAL_SPI_TransmitReceive+0x3d2>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d107      	bne.n	800a452 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a442:	2303      	movs	r3, #3
 800a444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a450:	e026      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a456:	b29b      	uxth	r3, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f47f af57 	bne.w	800a30c <HAL_SPI_TransmitReceive+0x29c>
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a464:	b29b      	uxth	r3, r3
 800a466:	2b00      	cmp	r3, #0
 800a468:	f47f af50 	bne.w	800a30c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a46c:	69fa      	ldr	r2, [r7, #28]
 800a46e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f93d 	bl	800a6f0 <SPI_EndRxTxTransaction>
 800a476:	4603      	mov	r3, r0
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d005      	beq.n	800a488 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2220      	movs	r2, #32
 800a486:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d003      	beq.n	800a498 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a496:	e003      	b.n	800a4a0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a4a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	@ 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b088      	sub	sp, #32
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	60f8      	str	r0, [r7, #12]
 800a4bc:	60b9      	str	r1, [r7, #8]
 800a4be:	603b      	str	r3, [r7, #0]
 800a4c0:	4613      	mov	r3, r2
 800a4c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a4c4:	f7fc fdc6 	bl	8007054 <HAL_GetTick>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4cc:	1a9b      	subs	r3, r3, r2
 800a4ce:	683a      	ldr	r2, [r7, #0]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a4d4:	f7fc fdbe 	bl	8007054 <HAL_GetTick>
 800a4d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a4da:	4b39      	ldr	r3, [pc, #228]	@ (800a5c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	015b      	lsls	r3, r3, #5
 800a4e0:	0d1b      	lsrs	r3, r3, #20
 800a4e2:	69fa      	ldr	r2, [r7, #28]
 800a4e4:	fb02 f303 	mul.w	r3, r2, r3
 800a4e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a4ea:	e054      	b.n	800a596 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f2:	d050      	beq.n	800a596 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a4f4:	f7fc fdae 	bl	8007054 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	429a      	cmp	r2, r3
 800a502:	d902      	bls.n	800a50a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d13d      	bne.n	800a586 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a518:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a522:	d111      	bne.n	800a548 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a52c:	d004      	beq.n	800a538 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a536:	d107      	bne.n	800a548 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a546:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a550:	d10f      	bne.n	800a572 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a560:	601a      	str	r2, [r3, #0]
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a570:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2201      	movs	r2, #1
 800a576:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a582:	2303      	movs	r3, #3
 800a584:	e017      	b.n	800a5b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d101      	bne.n	800a590 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	3b01      	subs	r3, #1
 800a594:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689a      	ldr	r2, [r3, #8]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	bf0c      	ite	eq
 800a5a6:	2301      	moveq	r3, #1
 800a5a8:	2300      	movne	r3, #0
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d19b      	bne.n	800a4ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a5b4:	2300      	movs	r3, #0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	20000054 	.word	0x20000054

0800a5c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b08a      	sub	sp, #40	@ 0x28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a5d6:	f7fc fd3d 	bl	8007054 <HAL_GetTick>
 800a5da:	4602      	mov	r2, r0
 800a5dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5de:	1a9b      	subs	r3, r3, r2
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a5e6:	f7fc fd35 	bl	8007054 <HAL_GetTick>
 800a5ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	330c      	adds	r3, #12
 800a5f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a5f4:	4b3d      	ldr	r3, [pc, #244]	@ (800a6ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a5f6:	681a      	ldr	r2, [r3, #0]
 800a5f8:	4613      	mov	r3, r2
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	00da      	lsls	r2, r3, #3
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	0d1b      	lsrs	r3, r3, #20
 800a604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a606:	fb02 f303 	mul.w	r3, r2, r3
 800a60a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a60c:	e060      	b.n	800a6d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a614:	d107      	bne.n	800a626 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d104      	bne.n	800a626 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	b2db      	uxtb	r3, r3
 800a622:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a624:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a62c:	d050      	beq.n	800a6d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a62e:	f7fc fd11 	bl	8007054 <HAL_GetTick>
 800a632:	4602      	mov	r2, r0
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d902      	bls.n	800a644 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	2b00      	cmp	r3, #0
 800a642:	d13d      	bne.n	800a6c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a652:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	685b      	ldr	r3, [r3, #4]
 800a658:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a65c:	d111      	bne.n	800a682 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a666:	d004      	beq.n	800a672 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a670:	d107      	bne.n	800a682 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a680:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a686:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a68a:	d10f      	bne.n	800a6ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	681a      	ldr	r2, [r3, #0]
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a69a:	601a      	str	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a6aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a6bc:	2303      	movs	r3, #3
 800a6be:	e010      	b.n	800a6e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	3b01      	subs	r3, #1
 800a6ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4013      	ands	r3, r2
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d196      	bne.n	800a60e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3728      	adds	r7, #40	@ 0x28
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	20000054 	.word	0x20000054

0800a6f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2200      	movs	r2, #0
 800a704:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff ff5b 	bl	800a5c4 <SPI_WaitFifoStateUntilTimeout>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a718:	f043 0220 	orr.w	r2, r3, #32
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e046      	b.n	800a7b2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a724:	4b25      	ldr	r3, [pc, #148]	@ (800a7bc <SPI_EndRxTxTransaction+0xcc>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a25      	ldr	r2, [pc, #148]	@ (800a7c0 <SPI_EndRxTxTransaction+0xd0>)
 800a72a:	fba2 2303 	umull	r2, r3, r2, r3
 800a72e:	0d5b      	lsrs	r3, r3, #21
 800a730:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a734:	fb02 f303 	mul.w	r3, r2, r3
 800a738:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a742:	d112      	bne.n	800a76a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	2200      	movs	r2, #0
 800a74c:	2180      	movs	r1, #128	@ 0x80
 800a74e:	68f8      	ldr	r0, [r7, #12]
 800a750:	f7ff feb0 	bl	800a4b4 <SPI_WaitFlagStateUntilTimeout>
 800a754:	4603      	mov	r3, r0
 800a756:	2b00      	cmp	r3, #0
 800a758:	d016      	beq.n	800a788 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a75e:	f043 0220 	orr.w	r2, r3, #32
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a766:	2303      	movs	r3, #3
 800a768:	e023      	b.n	800a7b2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3b01      	subs	r3, #1
 800a774:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a780:	2b80      	cmp	r3, #128	@ 0x80
 800a782:	d0f2      	beq.n	800a76a <SPI_EndRxTxTransaction+0x7a>
 800a784:	e000      	b.n	800a788 <SPI_EndRxTxTransaction+0x98>
        break;
 800a786:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	9300      	str	r3, [sp, #0]
 800a78c:	68bb      	ldr	r3, [r7, #8]
 800a78e:	2200      	movs	r2, #0
 800a790:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff ff15 	bl	800a5c4 <SPI_WaitFifoStateUntilTimeout>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d007      	beq.n	800a7b0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7a4:	f043 0220 	orr.w	r2, r3, #32
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e000      	b.n	800a7b2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000054 	.word	0x20000054
 800a7c0:	165e9f81 	.word	0x165e9f81

0800a7c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b082      	sub	sp, #8
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e049      	b.n	800a86a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f7fb fc6e 	bl	80060cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	3304      	adds	r3, #4
 800a800:	4619      	mov	r1, r3
 800a802:	4610      	mov	r0, r2
 800a804:	f001 f8e6 	bl	800b9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2201      	movs	r2, #1
 800a82c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2201      	movs	r2, #1
 800a83c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2201      	movs	r2, #1
 800a854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2201      	movs	r2, #1
 800a85c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
	...

0800a874 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b01      	cmp	r3, #1
 800a886:	d001      	beq.n	800a88c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e04c      	b.n	800a926 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a26      	ldr	r2, [pc, #152]	@ (800a934 <HAL_TIM_Base_Start+0xc0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d022      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8a6:	d01d      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a22      	ldr	r2, [pc, #136]	@ (800a938 <HAL_TIM_Base_Start+0xc4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d018      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a21      	ldr	r2, [pc, #132]	@ (800a93c <HAL_TIM_Base_Start+0xc8>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d013      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a1f      	ldr	r2, [pc, #124]	@ (800a940 <HAL_TIM_Base_Start+0xcc>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00e      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a944 <HAL_TIM_Base_Start+0xd0>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d009      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a1c      	ldr	r2, [pc, #112]	@ (800a948 <HAL_TIM_Base_Start+0xd4>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d004      	beq.n	800a8e4 <HAL_TIM_Base_Start+0x70>
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4a1b      	ldr	r2, [pc, #108]	@ (800a94c <HAL_TIM_Base_Start+0xd8>)
 800a8e0:	4293      	cmp	r3, r2
 800a8e2:	d115      	bne.n	800a910 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689a      	ldr	r2, [r3, #8]
 800a8ea:	4b19      	ldr	r3, [pc, #100]	@ (800a950 <HAL_TIM_Base_Start+0xdc>)
 800a8ec:	4013      	ands	r3, r2
 800a8ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2b06      	cmp	r3, #6
 800a8f4:	d015      	beq.n	800a922 <HAL_TIM_Base_Start+0xae>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8fc:	d011      	beq.n	800a922 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0201 	orr.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a90e:	e008      	b.n	800a922 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f042 0201 	orr.w	r2, r2, #1
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	e000      	b.n	800a924 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a922:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	3714      	adds	r7, #20
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr
 800a932:	bf00      	nop
 800a934:	40010000 	.word	0x40010000
 800a938:	40000400 	.word	0x40000400
 800a93c:	40000800 	.word	0x40000800
 800a940:	40000c00 	.word	0x40000c00
 800a944:	40010400 	.word	0x40010400
 800a948:	40014000 	.word	0x40014000
 800a94c:	40001800 	.word	0x40001800
 800a950:	00010007 	.word	0x00010007

0800a954 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6a1a      	ldr	r2, [r3, #32]
 800a962:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a966:	4013      	ands	r3, r2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d10f      	bne.n	800a98c <HAL_TIM_Base_Stop+0x38>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6a1a      	ldr	r2, [r3, #32]
 800a972:	f240 4344 	movw	r3, #1092	@ 0x444
 800a976:	4013      	ands	r3, r2
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d107      	bne.n	800a98c <HAL_TIM_Base_Stop+0x38>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f022 0201 	bic.w	r2, r2, #1
 800a98a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d001      	beq.n	800a9bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e054      	b.n	800aa66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68da      	ldr	r2, [r3, #12]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f042 0201 	orr.w	r2, r2, #1
 800a9d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a26      	ldr	r2, [pc, #152]	@ (800aa74 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d022      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9e6:	d01d      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a22      	ldr	r2, [pc, #136]	@ (800aa78 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d018      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a21      	ldr	r2, [pc, #132]	@ (800aa7c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d013      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a1f      	ldr	r2, [pc, #124]	@ (800aa80 <HAL_TIM_Base_Start_IT+0xdc>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00e      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a1e      	ldr	r2, [pc, #120]	@ (800aa84 <HAL_TIM_Base_Start_IT+0xe0>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d009      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a1c      	ldr	r2, [pc, #112]	@ (800aa88 <HAL_TIM_Base_Start_IT+0xe4>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <HAL_TIM_Base_Start_IT+0x80>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a1b      	ldr	r2, [pc, #108]	@ (800aa8c <HAL_TIM_Base_Start_IT+0xe8>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d115      	bne.n	800aa50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	689a      	ldr	r2, [r3, #8]
 800aa2a:	4b19      	ldr	r3, [pc, #100]	@ (800aa90 <HAL_TIM_Base_Start_IT+0xec>)
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2b06      	cmp	r3, #6
 800aa34:	d015      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa3c:	d011      	beq.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa4e:	e008      	b.n	800aa62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f042 0201 	orr.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	e000      	b.n	800aa64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa64:	2300      	movs	r3, #0
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	40010000 	.word	0x40010000
 800aa78:	40000400 	.word	0x40000400
 800aa7c:	40000800 	.word	0x40000800
 800aa80:	40000c00 	.word	0x40000c00
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40014000 	.word	0x40014000
 800aa8c:	40001800 	.word	0x40001800
 800aa90:	00010007 	.word	0x00010007

0800aa94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e049      	b.n	800ab3a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d106      	bne.n	800aac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7fb fbea 	bl	8006294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2202      	movs	r2, #2
 800aac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	3304      	adds	r3, #4
 800aad0:	4619      	mov	r1, r3
 800aad2:	4610      	mov	r0, r2
 800aad4:	f000 ff7e 	bl	800b9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2201      	movs	r2, #1
 800aadc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2201      	movs	r2, #1
 800aaec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2201      	movs	r2, #1
 800ab04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2201      	movs	r2, #1
 800ab14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2201      	movs	r2, #1
 800ab2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
	...

0800ab44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d109      	bne.n	800ab68 <HAL_TIM_PWM_Start+0x24>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	bf14      	ite	ne
 800ab60:	2301      	movne	r3, #1
 800ab62:	2300      	moveq	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	e03c      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d109      	bne.n	800ab82 <HAL_TIM_PWM_Start+0x3e>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	bf14      	ite	ne
 800ab7a:	2301      	movne	r3, #1
 800ab7c:	2300      	moveq	r3, #0
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	e02f      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	2b08      	cmp	r3, #8
 800ab86:	d109      	bne.n	800ab9c <HAL_TIM_PWM_Start+0x58>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	bf14      	ite	ne
 800ab94:	2301      	movne	r3, #1
 800ab96:	2300      	moveq	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e022      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	2b0c      	cmp	r3, #12
 800aba0:	d109      	bne.n	800abb6 <HAL_TIM_PWM_Start+0x72>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b01      	cmp	r3, #1
 800abac:	bf14      	ite	ne
 800abae:	2301      	movne	r3, #1
 800abb0:	2300      	moveq	r3, #0
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	e015      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2b10      	cmp	r3, #16
 800abba:	d109      	bne.n	800abd0 <HAL_TIM_PWM_Start+0x8c>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	bf14      	ite	ne
 800abc8:	2301      	movne	r3, #1
 800abca:	2300      	moveq	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	e008      	b.n	800abe2 <HAL_TIM_PWM_Start+0x9e>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	2b01      	cmp	r3, #1
 800abda:	bf14      	ite	ne
 800abdc:	2301      	movne	r3, #1
 800abde:	2300      	moveq	r3, #0
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e092      	b.n	800ad10 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <HAL_TIM_PWM_Start+0xb6>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800abf8:	e023      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	d104      	bne.n	800ac0a <HAL_TIM_PWM_Start+0xc6>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2202      	movs	r2, #2
 800ac04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac08:	e01b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	d104      	bne.n	800ac1a <HAL_TIM_PWM_Start+0xd6>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2202      	movs	r2, #2
 800ac14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac18:	e013      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	2b0c      	cmp	r3, #12
 800ac1e:	d104      	bne.n	800ac2a <HAL_TIM_PWM_Start+0xe6>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac28:	e00b      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b10      	cmp	r3, #16
 800ac2e:	d104      	bne.n	800ac3a <HAL_TIM_PWM_Start+0xf6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2202      	movs	r2, #2
 800ac34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac38:	e003      	b.n	800ac42 <HAL_TIM_PWM_Start+0xfe>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2201      	movs	r2, #1
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f001 fa66 	bl	800c11c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a30      	ldr	r2, [pc, #192]	@ (800ad18 <HAL_TIM_PWM_Start+0x1d4>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d004      	beq.n	800ac64 <HAL_TIM_PWM_Start+0x120>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a2f      	ldr	r2, [pc, #188]	@ (800ad1c <HAL_TIM_PWM_Start+0x1d8>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d101      	bne.n	800ac68 <HAL_TIM_PWM_Start+0x124>
 800ac64:	2301      	movs	r3, #1
 800ac66:	e000      	b.n	800ac6a <HAL_TIM_PWM_Start+0x126>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ac7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a25      	ldr	r2, [pc, #148]	@ (800ad18 <HAL_TIM_PWM_Start+0x1d4>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d022      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac90:	d01d      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a22      	ldr	r2, [pc, #136]	@ (800ad20 <HAL_TIM_PWM_Start+0x1dc>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d018      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a20      	ldr	r2, [pc, #128]	@ (800ad24 <HAL_TIM_PWM_Start+0x1e0>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d013      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ad28 <HAL_TIM_PWM_Start+0x1e4>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d00e      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a19      	ldr	r2, [pc, #100]	@ (800ad1c <HAL_TIM_PWM_Start+0x1d8>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d009      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a1b      	ldr	r2, [pc, #108]	@ (800ad2c <HAL_TIM_PWM_Start+0x1e8>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d004      	beq.n	800acce <HAL_TIM_PWM_Start+0x18a>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a19      	ldr	r2, [pc, #100]	@ (800ad30 <HAL_TIM_PWM_Start+0x1ec>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d115      	bne.n	800acfa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689a      	ldr	r2, [r3, #8]
 800acd4:	4b17      	ldr	r3, [pc, #92]	@ (800ad34 <HAL_TIM_PWM_Start+0x1f0>)
 800acd6:	4013      	ands	r3, r2
 800acd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2b06      	cmp	r3, #6
 800acde:	d015      	beq.n	800ad0c <HAL_TIM_PWM_Start+0x1c8>
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ace6:	d011      	beq.n	800ad0c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf8:	e008      	b.n	800ad0c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f042 0201 	orr.w	r2, r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e000      	b.n	800ad0e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	40010000 	.word	0x40010000
 800ad1c:	40010400 	.word	0x40010400
 800ad20:	40000400 	.word	0x40000400
 800ad24:	40000800 	.word	0x40000800
 800ad28:	40000c00 	.word	0x40000c00
 800ad2c:	40014000 	.word	0x40014000
 800ad30:	40001800 	.word	0x40001800
 800ad34:	00010007 	.word	0x00010007

0800ad38 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad42:	2300      	movs	r3, #0
 800ad44:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d109      	bne.n	800ad60 <HAL_TIM_PWM_Start_IT+0x28>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	e03c      	b.n	800adda <HAL_TIM_PWM_Start_IT+0xa2>
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	d109      	bne.n	800ad7a <HAL_TIM_PWM_Start_IT+0x42>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	bf14      	ite	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	2300      	moveq	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	e02f      	b.n	800adda <HAL_TIM_PWM_Start_IT+0xa2>
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2b08      	cmp	r3, #8
 800ad7e:	d109      	bne.n	800ad94 <HAL_TIM_PWM_Start_IT+0x5c>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	bf14      	ite	ne
 800ad8c:	2301      	movne	r3, #1
 800ad8e:	2300      	moveq	r3, #0
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	e022      	b.n	800adda <HAL_TIM_PWM_Start_IT+0xa2>
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b0c      	cmp	r3, #12
 800ad98:	d109      	bne.n	800adae <HAL_TIM_PWM_Start_IT+0x76>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ada0:	b2db      	uxtb	r3, r3
 800ada2:	2b01      	cmp	r3, #1
 800ada4:	bf14      	ite	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	2300      	moveq	r3, #0
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	e015      	b.n	800adda <HAL_TIM_PWM_Start_IT+0xa2>
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	2b10      	cmp	r3, #16
 800adb2:	d109      	bne.n	800adc8 <HAL_TIM_PWM_Start_IT+0x90>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800adba:	b2db      	uxtb	r3, r3
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	bf14      	ite	ne
 800adc0:	2301      	movne	r3, #1
 800adc2:	2300      	moveq	r3, #0
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	e008      	b.n	800adda <HAL_TIM_PWM_Start_IT+0xa2>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800adce:	b2db      	uxtb	r3, r3
 800add0:	2b01      	cmp	r3, #1
 800add2:	bf14      	ite	ne
 800add4:	2301      	movne	r3, #1
 800add6:	2300      	moveq	r3, #0
 800add8:	b2db      	uxtb	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d001      	beq.n	800ade2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800adde:	2301      	movs	r3, #1
 800ade0:	e0dd      	b.n	800af9e <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d104      	bne.n	800adf2 <HAL_TIM_PWM_Start_IT+0xba>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2202      	movs	r2, #2
 800adec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800adf0:	e023      	b.n	800ae3a <HAL_TIM_PWM_Start_IT+0x102>
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d104      	bne.n	800ae02 <HAL_TIM_PWM_Start_IT+0xca>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ae00:	e01b      	b.n	800ae3a <HAL_TIM_PWM_Start_IT+0x102>
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	2b08      	cmp	r3, #8
 800ae06:	d104      	bne.n	800ae12 <HAL_TIM_PWM_Start_IT+0xda>
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ae10:	e013      	b.n	800ae3a <HAL_TIM_PWM_Start_IT+0x102>
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	2b0c      	cmp	r3, #12
 800ae16:	d104      	bne.n	800ae22 <HAL_TIM_PWM_Start_IT+0xea>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ae20:	e00b      	b.n	800ae3a <HAL_TIM_PWM_Start_IT+0x102>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	2b10      	cmp	r3, #16
 800ae26:	d104      	bne.n	800ae32 <HAL_TIM_PWM_Start_IT+0xfa>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2202      	movs	r2, #2
 800ae2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ae30:	e003      	b.n	800ae3a <HAL_TIM_PWM_Start_IT+0x102>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b0c      	cmp	r3, #12
 800ae3e:	d841      	bhi.n	800aec4 <HAL_TIM_PWM_Start_IT+0x18c>
 800ae40:	a201      	add	r2, pc, #4	@ (adr r2, 800ae48 <HAL_TIM_PWM_Start_IT+0x110>)
 800ae42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae46:	bf00      	nop
 800ae48:	0800ae7d 	.word	0x0800ae7d
 800ae4c:	0800aec5 	.word	0x0800aec5
 800ae50:	0800aec5 	.word	0x0800aec5
 800ae54:	0800aec5 	.word	0x0800aec5
 800ae58:	0800ae8f 	.word	0x0800ae8f
 800ae5c:	0800aec5 	.word	0x0800aec5
 800ae60:	0800aec5 	.word	0x0800aec5
 800ae64:	0800aec5 	.word	0x0800aec5
 800ae68:	0800aea1 	.word	0x0800aea1
 800ae6c:	0800aec5 	.word	0x0800aec5
 800ae70:	0800aec5 	.word	0x0800aec5
 800ae74:	0800aec5 	.word	0x0800aec5
 800ae78:	0800aeb3 	.word	0x0800aeb3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	68da      	ldr	r2, [r3, #12]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f042 0202 	orr.w	r2, r2, #2
 800ae8a:	60da      	str	r2, [r3, #12]
      break;
 800ae8c:	e01d      	b.n	800aeca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68da      	ldr	r2, [r3, #12]
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f042 0204 	orr.w	r2, r2, #4
 800ae9c:	60da      	str	r2, [r3, #12]
      break;
 800ae9e:	e014      	b.n	800aeca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f042 0208 	orr.w	r2, r2, #8
 800aeae:	60da      	str	r2, [r3, #12]
      break;
 800aeb0:	e00b      	b.n	800aeca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68da      	ldr	r2, [r3, #12]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f042 0210 	orr.w	r2, r2, #16
 800aec0:	60da      	str	r2, [r3, #12]
      break;
 800aec2:	e002      	b.n	800aeca <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800aec4:	2301      	movs	r3, #1
 800aec6:	73fb      	strb	r3, [r7, #15]
      break;
 800aec8:	bf00      	nop
  }

  if (status == HAL_OK)
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d165      	bne.n	800af9c <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2201      	movs	r2, #1
 800aed6:	6839      	ldr	r1, [r7, #0]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f001 f91f 	bl	800c11c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a31      	ldr	r2, [pc, #196]	@ (800afa8 <HAL_TIM_PWM_Start_IT+0x270>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d004      	beq.n	800aef2 <HAL_TIM_PWM_Start_IT+0x1ba>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a2f      	ldr	r2, [pc, #188]	@ (800afac <HAL_TIM_PWM_Start_IT+0x274>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d101      	bne.n	800aef6 <HAL_TIM_PWM_Start_IT+0x1be>
 800aef2:	2301      	movs	r3, #1
 800aef4:	e000      	b.n	800aef8 <HAL_TIM_PWM_Start_IT+0x1c0>
 800aef6:	2300      	movs	r3, #0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d007      	beq.n	800af0c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800af0a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a25      	ldr	r2, [pc, #148]	@ (800afa8 <HAL_TIM_PWM_Start_IT+0x270>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d022      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af1e:	d01d      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	4a22      	ldr	r2, [pc, #136]	@ (800afb0 <HAL_TIM_PWM_Start_IT+0x278>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d018      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a21      	ldr	r2, [pc, #132]	@ (800afb4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d013      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a1f      	ldr	r2, [pc, #124]	@ (800afb8 <HAL_TIM_PWM_Start_IT+0x280>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d00e      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a1a      	ldr	r2, [pc, #104]	@ (800afac <HAL_TIM_PWM_Start_IT+0x274>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d009      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a1b      	ldr	r2, [pc, #108]	@ (800afbc <HAL_TIM_PWM_Start_IT+0x284>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d004      	beq.n	800af5c <HAL_TIM_PWM_Start_IT+0x224>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a1a      	ldr	r2, [pc, #104]	@ (800afc0 <HAL_TIM_PWM_Start_IT+0x288>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d115      	bne.n	800af88 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689a      	ldr	r2, [r3, #8]
 800af62:	4b18      	ldr	r3, [pc, #96]	@ (800afc4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800af64:	4013      	ands	r3, r2
 800af66:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	2b06      	cmp	r3, #6
 800af6c:	d015      	beq.n	800af9a <HAL_TIM_PWM_Start_IT+0x262>
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af74:	d011      	beq.n	800af9a <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f042 0201 	orr.w	r2, r2, #1
 800af84:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af86:	e008      	b.n	800af9a <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0201 	orr.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]
 800af98:	e000      	b.n	800af9c <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af9a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800af9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	40010000 	.word	0x40010000
 800afac:	40010400 	.word	0x40010400
 800afb0:	40000400 	.word	0x40000400
 800afb4:	40000800 	.word	0x40000800
 800afb8:	40000c00 	.word	0x40000c00
 800afbc:	40014000 	.word	0x40014000
 800afc0:	40001800 	.word	0x40001800
 800afc4:	00010007 	.word	0x00010007

0800afc8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b0c      	cmp	r3, #12
 800afda:	d841      	bhi.n	800b060 <HAL_TIM_PWM_Stop_IT+0x98>
 800afdc:	a201      	add	r2, pc, #4	@ (adr r2, 800afe4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800afde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe2:	bf00      	nop
 800afe4:	0800b019 	.word	0x0800b019
 800afe8:	0800b061 	.word	0x0800b061
 800afec:	0800b061 	.word	0x0800b061
 800aff0:	0800b061 	.word	0x0800b061
 800aff4:	0800b02b 	.word	0x0800b02b
 800aff8:	0800b061 	.word	0x0800b061
 800affc:	0800b061 	.word	0x0800b061
 800b000:	0800b061 	.word	0x0800b061
 800b004:	0800b03d 	.word	0x0800b03d
 800b008:	0800b061 	.word	0x0800b061
 800b00c:	0800b061 	.word	0x0800b061
 800b010:	0800b061 	.word	0x0800b061
 800b014:	0800b04f 	.word	0x0800b04f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 0202 	bic.w	r2, r2, #2
 800b026:	60da      	str	r2, [r3, #12]
      break;
 800b028:	e01d      	b.n	800b066 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f022 0204 	bic.w	r2, r2, #4
 800b038:	60da      	str	r2, [r3, #12]
      break;
 800b03a:	e014      	b.n	800b066 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f022 0208 	bic.w	r2, r2, #8
 800b04a:	60da      	str	r2, [r3, #12]
      break;
 800b04c:	e00b      	b.n	800b066 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68da      	ldr	r2, [r3, #12]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 0210 	bic.w	r2, r2, #16
 800b05c:	60da      	str	r2, [r3, #12]
      break;
 800b05e:	e002      	b.n	800b066 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
      break;
 800b064:	bf00      	nop
  }

  if (status == HAL_OK)
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d171      	bne.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2200      	movs	r2, #0
 800b072:	6839      	ldr	r1, [r7, #0]
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f851 	bl	800c11c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a37      	ldr	r2, [pc, #220]	@ (800b15c <HAL_TIM_PWM_Stop_IT+0x194>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <HAL_TIM_PWM_Stop_IT+0xc6>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a35      	ldr	r2, [pc, #212]	@ (800b160 <HAL_TIM_PWM_Stop_IT+0x198>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d101      	bne.n	800b092 <HAL_TIM_PWM_Stop_IT+0xca>
 800b08e:	2301      	movs	r3, #1
 800b090:	e000      	b.n	800b094 <HAL_TIM_PWM_Stop_IT+0xcc>
 800b092:	2300      	movs	r3, #0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d017      	beq.n	800b0c8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	6a1a      	ldr	r2, [r3, #32]
 800b09e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10f      	bne.n	800b0c8 <HAL_TIM_PWM_Stop_IT+0x100>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	6a1a      	ldr	r2, [r3, #32]
 800b0ae:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d107      	bne.n	800b0c8 <HAL_TIM_PWM_Stop_IT+0x100>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b0c6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6a1a      	ldr	r2, [r3, #32]
 800b0ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d10f      	bne.n	800b0f8 <HAL_TIM_PWM_Stop_IT+0x130>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	6a1a      	ldr	r2, [r3, #32]
 800b0de:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d107      	bne.n	800b0f8 <HAL_TIM_PWM_Stop_IT+0x130>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f022 0201 	bic.w	r2, r2, #1
 800b0f6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d104      	bne.n	800b108 <HAL_TIM_PWM_Stop_IT+0x140>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b106:	e023      	b.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	2b04      	cmp	r3, #4
 800b10c:	d104      	bne.n	800b118 <HAL_TIM_PWM_Stop_IT+0x150>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2201      	movs	r2, #1
 800b112:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b116:	e01b      	b.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b08      	cmp	r3, #8
 800b11c:	d104      	bne.n	800b128 <HAL_TIM_PWM_Stop_IT+0x160>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b126:	e013      	b.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	2b0c      	cmp	r3, #12
 800b12c:	d104      	bne.n	800b138 <HAL_TIM_PWM_Stop_IT+0x170>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b136:	e00b      	b.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	2b10      	cmp	r3, #16
 800b13c:	d104      	bne.n	800b148 <HAL_TIM_PWM_Stop_IT+0x180>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b146:	e003      	b.n	800b150 <HAL_TIM_PWM_Stop_IT+0x188>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2201      	movs	r2, #1
 800b14c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800b150:	7bfb      	ldrb	r3, [r7, #15]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40010000 	.word	0x40010000
 800b160:	40010400 	.word	0x40010400

0800b164 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b086      	sub	sp, #24
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e08f      	b.n	800b298 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7fb f835 	bl	80061fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2202      	movs	r2, #2
 800b196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6899      	ldr	r1, [r3, #8]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	4b3e      	ldr	r3, [pc, #248]	@ (800b2a0 <HAL_TIM_Encoder_Init+0x13c>)
 800b1a6:	400b      	ands	r3, r1
 800b1a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f000 fc0d 	bl	800b9d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	6a1b      	ldr	r3, [r3, #32]
 800b1d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	4b31      	ldr	r3, [pc, #196]	@ (800b2a4 <HAL_TIM_Encoder_Init+0x140>)
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b1f6:	693a      	ldr	r2, [r7, #16]
 800b1f8:	4b2b      	ldr	r3, [pc, #172]	@ (800b2a8 <HAL_TIM_Encoder_Init+0x144>)
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	4b2a      	ldr	r3, [pc, #168]	@ (800b2ac <HAL_TIM_Encoder_Init+0x148>)
 800b202:	4013      	ands	r3, r2
 800b204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68da      	ldr	r2, [r3, #12]
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	69db      	ldr	r3, [r3, #28]
 800b20e:	021b      	lsls	r3, r3, #8
 800b210:	4313      	orrs	r3, r2
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	4313      	orrs	r3, r2
 800b216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	691b      	ldr	r3, [r3, #16]
 800b21c:	011a      	lsls	r2, r3, #4
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	6a1b      	ldr	r3, [r3, #32]
 800b222:	031b      	lsls	r3, r3, #12
 800b224:	4313      	orrs	r3, r2
 800b226:	693a      	ldr	r2, [r7, #16]
 800b228:	4313      	orrs	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b232:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b23a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	4313      	orrs	r3, r2
 800b248:	68fa      	ldr	r2, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	697a      	ldr	r2, [r7, #20]
 800b254:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	693a      	ldr	r2, [r7, #16]
 800b25c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2201      	movs	r2, #1
 800b26a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2201      	movs	r2, #1
 800b27a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2201      	movs	r2, #1
 800b282:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2201      	movs	r2, #1
 800b28a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2201      	movs	r2, #1
 800b292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3718      	adds	r7, #24
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	fffebff8 	.word	0xfffebff8
 800b2a4:	fffffcfc 	.word	0xfffffcfc
 800b2a8:	fffff3f3 	.word	0xfffff3f3
 800b2ac:	ffff0f0f 	.word	0xffff0f0f

0800b2b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b2c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b2c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b2d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d110      	bne.n	800b302 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2e0:	7bfb      	ldrb	r3, [r7, #15]
 800b2e2:	2b01      	cmp	r3, #1
 800b2e4:	d102      	bne.n	800b2ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2e6:	7b7b      	ldrb	r3, [r7, #13]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d001      	beq.n	800b2f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e069      	b.n	800b3c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2202      	movs	r2, #2
 800b2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b300:	e031      	b.n	800b366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b04      	cmp	r3, #4
 800b306:	d110      	bne.n	800b32a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b308:	7bbb      	ldrb	r3, [r7, #14]
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d102      	bne.n	800b314 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b30e:	7b3b      	ldrb	r3, [r7, #12]
 800b310:	2b01      	cmp	r3, #1
 800b312:	d001      	beq.n	800b318 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e055      	b.n	800b3c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2202      	movs	r2, #2
 800b324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b328:	e01d      	b.n	800b366 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d108      	bne.n	800b342 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	2b01      	cmp	r3, #1
 800b334:	d105      	bne.n	800b342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b336:	7b7b      	ldrb	r3, [r7, #13]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d102      	bne.n	800b342 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b33c:	7b3b      	ldrb	r3, [r7, #12]
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d001      	beq.n	800b346 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e03e      	b.n	800b3c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2202      	movs	r2, #2
 800b34a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2202      	movs	r2, #2
 800b352:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2202      	movs	r2, #2
 800b35a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2202      	movs	r2, #2
 800b362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <HAL_TIM_Encoder_Start+0xc4>
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	2b04      	cmp	r3, #4
 800b370:	d008      	beq.n	800b384 <HAL_TIM_Encoder_Start+0xd4>
 800b372:	e00f      	b.n	800b394 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2201      	movs	r2, #1
 800b37a:	2100      	movs	r1, #0
 800b37c:	4618      	mov	r0, r3
 800b37e:	f000 fecd 	bl	800c11c <TIM_CCxChannelCmd>
      break;
 800b382:	e016      	b.n	800b3b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2201      	movs	r2, #1
 800b38a:	2104      	movs	r1, #4
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fec5 	bl	800c11c <TIM_CCxChannelCmd>
      break;
 800b392:	e00e      	b.n	800b3b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	2201      	movs	r2, #1
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 febd 	bl	800c11c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	2104      	movs	r1, #4
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 feb6 	bl	800c11c <TIM_CCxChannelCmd>
      break;
 800b3b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f042 0201 	orr.w	r2, r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	f003 0302 	and.w	r3, r3, #2
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d020      	beq.n	800b430 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f003 0302 	and.w	r3, r3, #2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d01b      	beq.n	800b430 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0202 	mvn.w	r2, #2
 800b400:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2201      	movs	r2, #1
 800b406:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	f003 0303 	and.w	r3, r3, #3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d003      	beq.n	800b41e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fac8 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b41c:	e005      	b.n	800b42a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 faba 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f7f6 fdf7 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	f003 0304 	and.w	r3, r3, #4
 800b436:	2b00      	cmp	r3, #0
 800b438:	d020      	beq.n	800b47c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f003 0304 	and.w	r3, r3, #4
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01b      	beq.n	800b47c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f06f 0204 	mvn.w	r2, #4
 800b44c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2202      	movs	r2, #2
 800b452:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	699b      	ldr	r3, [r3, #24]
 800b45a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 faa2 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b468:	e005      	b.n	800b476 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 fa94 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f7f6 fdd1 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	f003 0308 	and.w	r3, r3, #8
 800b482:	2b00      	cmp	r3, #0
 800b484:	d020      	beq.n	800b4c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f003 0308 	and.w	r3, r3, #8
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d01b      	beq.n	800b4c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f06f 0208 	mvn.w	r2, #8
 800b498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2204      	movs	r2, #4
 800b49e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69db      	ldr	r3, [r3, #28]
 800b4a6:	f003 0303 	and.w	r3, r3, #3
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d003      	beq.n	800b4b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa7c 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b4b4:	e005      	b.n	800b4c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4b6:	6878      	ldr	r0, [r7, #4]
 800b4b8:	f000 fa6e 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7f6 fdab 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	f003 0310 	and.w	r3, r3, #16
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d020      	beq.n	800b514 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f003 0310 	and.w	r3, r3, #16
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d01b      	beq.n	800b514 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f06f 0210 	mvn.w	r2, #16
 800b4e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2208      	movs	r2, #8
 800b4ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	69db      	ldr	r3, [r3, #28]
 800b4f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d003      	beq.n	800b502 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f000 fa56 	bl	800b9ac <HAL_TIM_IC_CaptureCallback>
 800b500:	e005      	b.n	800b50e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 fa48 	bl	800b998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7f6 fd85 	bl	8002018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f003 0301 	and.w	r3, r3, #1
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00c      	beq.n	800b538 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f003 0301 	and.w	r3, r3, #1
 800b524:	2b00      	cmp	r3, #0
 800b526:	d007      	beq.n	800b538 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f06f 0201 	mvn.w	r2, #1
 800b530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7fa fcc8 	bl	8005ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d104      	bne.n	800b54c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00c      	beq.n	800b566 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 ff17 	bl	800c394 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00c      	beq.n	800b58a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b576:	2b00      	cmp	r3, #0
 800b578:	d007      	beq.n	800b58a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 ff0f 	bl	800c3a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00c      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d007      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fa09 	bl	800b9c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	f003 0320 	and.w	r3, r3, #32
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00c      	beq.n	800b5d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f003 0320 	and.w	r3, r3, #32
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d007      	beq.n	800b5d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f06f 0220 	mvn.w	r2, #32
 800b5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f000 fed7 	bl	800c380 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5d2:	bf00      	nop
 800b5d4:	3710      	adds	r7, #16
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}
	...

0800b5dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b086      	sub	sp, #24
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d101      	bne.n	800b5fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	e0ff      	b.n	800b7fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2b14      	cmp	r3, #20
 800b606:	f200 80f0 	bhi.w	800b7ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b60a:	a201      	add	r2, pc, #4	@ (adr r2, 800b610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b665 	.word	0x0800b665
 800b614:	0800b7eb 	.word	0x0800b7eb
 800b618:	0800b7eb 	.word	0x0800b7eb
 800b61c:	0800b7eb 	.word	0x0800b7eb
 800b620:	0800b6a5 	.word	0x0800b6a5
 800b624:	0800b7eb 	.word	0x0800b7eb
 800b628:	0800b7eb 	.word	0x0800b7eb
 800b62c:	0800b7eb 	.word	0x0800b7eb
 800b630:	0800b6e7 	.word	0x0800b6e7
 800b634:	0800b7eb 	.word	0x0800b7eb
 800b638:	0800b7eb 	.word	0x0800b7eb
 800b63c:	0800b7eb 	.word	0x0800b7eb
 800b640:	0800b727 	.word	0x0800b727
 800b644:	0800b7eb 	.word	0x0800b7eb
 800b648:	0800b7eb 	.word	0x0800b7eb
 800b64c:	0800b7eb 	.word	0x0800b7eb
 800b650:	0800b769 	.word	0x0800b769
 800b654:	0800b7eb 	.word	0x0800b7eb
 800b658:	0800b7eb 	.word	0x0800b7eb
 800b65c:	0800b7eb 	.word	0x0800b7eb
 800b660:	0800b7a9 	.word	0x0800b7a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68b9      	ldr	r1, [r7, #8]
 800b66a:	4618      	mov	r0, r3
 800b66c:	f000 fa5e 	bl	800bb2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	699a      	ldr	r2, [r3, #24]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f042 0208 	orr.w	r2, r2, #8
 800b67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	699a      	ldr	r2, [r3, #24]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0204 	bic.w	r2, r2, #4
 800b68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6999      	ldr	r1, [r3, #24]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	691a      	ldr	r2, [r3, #16]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	430a      	orrs	r2, r1
 800b6a0:	619a      	str	r2, [r3, #24]
      break;
 800b6a2:	e0a5      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68b9      	ldr	r1, [r7, #8]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 fab0 	bl	800bc10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	699a      	ldr	r2, [r3, #24]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	699a      	ldr	r2, [r3, #24]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6999      	ldr	r1, [r3, #24]
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	691b      	ldr	r3, [r3, #16]
 800b6da:	021a      	lsls	r2, r3, #8
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	619a      	str	r2, [r3, #24]
      break;
 800b6e4:	e084      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68b9      	ldr	r1, [r7, #8]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 fb07 	bl	800bd00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	69da      	ldr	r2, [r3, #28]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0208 	orr.w	r2, r2, #8
 800b700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	69da      	ldr	r2, [r3, #28]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f022 0204 	bic.w	r2, r2, #4
 800b710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	69d9      	ldr	r1, [r3, #28]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	691a      	ldr	r2, [r3, #16]
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	430a      	orrs	r2, r1
 800b722:	61da      	str	r2, [r3, #28]
      break;
 800b724:	e064      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	68b9      	ldr	r1, [r7, #8]
 800b72c:	4618      	mov	r0, r3
 800b72e:	f000 fb5d 	bl	800bdec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	69da      	ldr	r2, [r3, #28]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	69da      	ldr	r2, [r3, #28]
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	69d9      	ldr	r1, [r3, #28]
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	021a      	lsls	r2, r3, #8
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	430a      	orrs	r2, r1
 800b764:	61da      	str	r2, [r3, #28]
      break;
 800b766:	e043      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	4618      	mov	r0, r3
 800b770:	f000 fb94 	bl	800be9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f042 0208 	orr.w	r2, r2, #8
 800b782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f022 0204 	bic.w	r2, r2, #4
 800b792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	691a      	ldr	r2, [r3, #16]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	430a      	orrs	r2, r1
 800b7a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b7a6:	e023      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	68b9      	ldr	r1, [r7, #8]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f000 fbc6 	bl	800bf40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	691b      	ldr	r3, [r3, #16]
 800b7de:	021a      	lsls	r2, r3, #8
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b7e8:	e002      	b.n	800b7f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	75fb      	strb	r3, [r7, #23]
      break;
 800b7ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop

0800b804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d101      	bne.n	800b820 <HAL_TIM_ConfigClockSource+0x1c>
 800b81c:	2302      	movs	r3, #2
 800b81e:	e0b4      	b.n	800b98a <HAL_TIM_ConfigClockSource+0x186>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2202      	movs	r2, #2
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	4b56      	ldr	r3, [pc, #344]	@ (800b994 <HAL_TIM_ConfigClockSource+0x190>)
 800b83c:	4013      	ands	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b858:	d03e      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0xd4>
 800b85a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b85e:	f200 8087 	bhi.w	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b866:	f000 8086 	beq.w	800b976 <HAL_TIM_ConfigClockSource+0x172>
 800b86a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b86e:	d87f      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b870:	2b70      	cmp	r3, #112	@ 0x70
 800b872:	d01a      	beq.n	800b8aa <HAL_TIM_ConfigClockSource+0xa6>
 800b874:	2b70      	cmp	r3, #112	@ 0x70
 800b876:	d87b      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b878:	2b60      	cmp	r3, #96	@ 0x60
 800b87a:	d050      	beq.n	800b91e <HAL_TIM_ConfigClockSource+0x11a>
 800b87c:	2b60      	cmp	r3, #96	@ 0x60
 800b87e:	d877      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b880:	2b50      	cmp	r3, #80	@ 0x50
 800b882:	d03c      	beq.n	800b8fe <HAL_TIM_ConfigClockSource+0xfa>
 800b884:	2b50      	cmp	r3, #80	@ 0x50
 800b886:	d873      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b888:	2b40      	cmp	r3, #64	@ 0x40
 800b88a:	d058      	beq.n	800b93e <HAL_TIM_ConfigClockSource+0x13a>
 800b88c:	2b40      	cmp	r3, #64	@ 0x40
 800b88e:	d86f      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b890:	2b30      	cmp	r3, #48	@ 0x30
 800b892:	d064      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b894:	2b30      	cmp	r3, #48	@ 0x30
 800b896:	d86b      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b898:	2b20      	cmp	r3, #32
 800b89a:	d060      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d867      	bhi.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d05c      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b8a4:	2b10      	cmp	r3, #16
 800b8a6:	d05a      	beq.n	800b95e <HAL_TIM_ConfigClockSource+0x15a>
 800b8a8:	e062      	b.n	800b970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8ba:	f000 fc0f 	bl	800c0dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b8cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	609a      	str	r2, [r3, #8]
      break;
 800b8d6:	e04f      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8e8:	f000 fbf8 	bl	800c0dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8fa:	609a      	str	r2, [r3, #8]
      break;
 800b8fc:	e03c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b90a:	461a      	mov	r2, r3
 800b90c:	f000 fb6c 	bl	800bfe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2150      	movs	r1, #80	@ 0x50
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fbc5 	bl	800c0a6 <TIM_ITRx_SetConfig>
      break;
 800b91c:	e02c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b92a:	461a      	mov	r2, r3
 800b92c:	f000 fb8b 	bl	800c046 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2160      	movs	r1, #96	@ 0x60
 800b936:	4618      	mov	r0, r3
 800b938:	f000 fbb5 	bl	800c0a6 <TIM_ITRx_SetConfig>
      break;
 800b93c:	e01c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b94a:	461a      	mov	r2, r3
 800b94c:	f000 fb4c 	bl	800bfe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2140      	movs	r1, #64	@ 0x40
 800b956:	4618      	mov	r0, r3
 800b958:	f000 fba5 	bl	800c0a6 <TIM_ITRx_SetConfig>
      break;
 800b95c:	e00c      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f000 fb9c 	bl	800c0a6 <TIM_ITRx_SetConfig>
      break;
 800b96e:	e003      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	73fb      	strb	r3, [r7, #15]
      break;
 800b974:	e000      	b.n	800b978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b988:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
 800b992:	bf00      	nop
 800b994:	fffeff88 	.word	0xfffeff88

0800b998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b9a0:	bf00      	nop
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a46      	ldr	r2, [pc, #280]	@ (800bb00 <TIM_Base_SetConfig+0x12c>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d013      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d00f      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4a43      	ldr	r2, [pc, #268]	@ (800bb04 <TIM_Base_SetConfig+0x130>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d00b      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4a42      	ldr	r2, [pc, #264]	@ (800bb08 <TIM_Base_SetConfig+0x134>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d007      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	4a41      	ldr	r2, [pc, #260]	@ (800bb0c <TIM_Base_SetConfig+0x138>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d003      	beq.n	800ba14 <TIM_Base_SetConfig+0x40>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4a40      	ldr	r2, [pc, #256]	@ (800bb10 <TIM_Base_SetConfig+0x13c>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d108      	bne.n	800ba26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	4a35      	ldr	r2, [pc, #212]	@ (800bb00 <TIM_Base_SetConfig+0x12c>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d02b      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba34:	d027      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a32      	ldr	r2, [pc, #200]	@ (800bb04 <TIM_Base_SetConfig+0x130>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d023      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	4a31      	ldr	r2, [pc, #196]	@ (800bb08 <TIM_Base_SetConfig+0x134>)
 800ba42:	4293      	cmp	r3, r2
 800ba44:	d01f      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	4a30      	ldr	r2, [pc, #192]	@ (800bb0c <TIM_Base_SetConfig+0x138>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d01b      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	4a2f      	ldr	r2, [pc, #188]	@ (800bb10 <TIM_Base_SetConfig+0x13c>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d017      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a2e      	ldr	r2, [pc, #184]	@ (800bb14 <TIM_Base_SetConfig+0x140>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d013      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a2d      	ldr	r2, [pc, #180]	@ (800bb18 <TIM_Base_SetConfig+0x144>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00f      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a2c      	ldr	r2, [pc, #176]	@ (800bb1c <TIM_Base_SetConfig+0x148>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00b      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a2b      	ldr	r2, [pc, #172]	@ (800bb20 <TIM_Base_SetConfig+0x14c>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d007      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a2a      	ldr	r2, [pc, #168]	@ (800bb24 <TIM_Base_SetConfig+0x150>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d003      	beq.n	800ba86 <TIM_Base_SetConfig+0xb2>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a29      	ldr	r2, [pc, #164]	@ (800bb28 <TIM_Base_SetConfig+0x154>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d108      	bne.n	800ba98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	68db      	ldr	r3, [r3, #12]
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	68fa      	ldr	r2, [r7, #12]
 800baaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	689a      	ldr	r2, [r3, #8]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a10      	ldr	r2, [pc, #64]	@ (800bb00 <TIM_Base_SetConfig+0x12c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d003      	beq.n	800bacc <TIM_Base_SetConfig+0xf8>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a12      	ldr	r2, [pc, #72]	@ (800bb10 <TIM_Base_SetConfig+0x13c>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d103      	bne.n	800bad4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	691a      	ldr	r2, [r3, #16]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2201      	movs	r2, #1
 800bad8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d105      	bne.n	800baf2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f023 0201 	bic.w	r2, r3, #1
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	611a      	str	r2, [r3, #16]
  }
}
 800baf2:	bf00      	nop
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	40010000 	.word	0x40010000
 800bb04:	40000400 	.word	0x40000400
 800bb08:	40000800 	.word	0x40000800
 800bb0c:	40000c00 	.word	0x40000c00
 800bb10:	40010400 	.word	0x40010400
 800bb14:	40014000 	.word	0x40014000
 800bb18:	40014400 	.word	0x40014400
 800bb1c:	40014800 	.word	0x40014800
 800bb20:	40001800 	.word	0x40001800
 800bb24:	40001c00 	.word	0x40001c00
 800bb28:	40002000 	.word	0x40002000

0800bb2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b087      	sub	sp, #28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6a1b      	ldr	r3, [r3, #32]
 800bb40:	f023 0201 	bic.w	r2, r3, #1
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bb54:	68fa      	ldr	r2, [r7, #12]
 800bb56:	4b2b      	ldr	r3, [pc, #172]	@ (800bc04 <TIM_OC1_SetConfig+0xd8>)
 800bb58:	4013      	ands	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0303 	bic.w	r3, r3, #3
 800bb62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f023 0302 	bic.w	r3, r3, #2
 800bb74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	4a21      	ldr	r2, [pc, #132]	@ (800bc08 <TIM_OC1_SetConfig+0xdc>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d003      	beq.n	800bb90 <TIM_OC1_SetConfig+0x64>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	4a20      	ldr	r2, [pc, #128]	@ (800bc0c <TIM_OC1_SetConfig+0xe0>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d10c      	bne.n	800bbaa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f023 0308 	bic.w	r3, r3, #8
 800bb96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f023 0304 	bic.w	r3, r3, #4
 800bba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	4a16      	ldr	r2, [pc, #88]	@ (800bc08 <TIM_OC1_SetConfig+0xdc>)
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	d003      	beq.n	800bbba <TIM_OC1_SetConfig+0x8e>
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a15      	ldr	r2, [pc, #84]	@ (800bc0c <TIM_OC1_SetConfig+0xe0>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d111      	bne.n	800bbde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bbc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bbc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	695b      	ldr	r3, [r3, #20]
 800bbce:	693a      	ldr	r2, [r7, #16]
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	697a      	ldr	r2, [r7, #20]
 800bbf6:	621a      	str	r2, [r3, #32]
}
 800bbf8:	bf00      	nop
 800bbfa:	371c      	adds	r7, #28
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr
 800bc04:	fffeff8f 	.word	0xfffeff8f
 800bc08:	40010000 	.word	0x40010000
 800bc0c:	40010400 	.word	0x40010400

0800bc10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b087      	sub	sp, #28
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6a1b      	ldr	r3, [r3, #32]
 800bc1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6a1b      	ldr	r3, [r3, #32]
 800bc24:	f023 0210 	bic.w	r2, r3, #16
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	699b      	ldr	r3, [r3, #24]
 800bc36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4b2e      	ldr	r3, [pc, #184]	@ (800bcf4 <TIM_OC2_SetConfig+0xe4>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	021b      	lsls	r3, r3, #8
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f023 0320 	bic.w	r3, r3, #32
 800bc5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	011b      	lsls	r3, r3, #4
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4313      	orrs	r3, r2
 800bc66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	4a23      	ldr	r2, [pc, #140]	@ (800bcf8 <TIM_OC2_SetConfig+0xe8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d003      	beq.n	800bc78 <TIM_OC2_SetConfig+0x68>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a22      	ldr	r2, [pc, #136]	@ (800bcfc <TIM_OC2_SetConfig+0xec>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d10d      	bne.n	800bc94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bc78:	697b      	ldr	r3, [r7, #20]
 800bc7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	011b      	lsls	r3, r3, #4
 800bc86:	697a      	ldr	r2, [r7, #20]
 800bc88:	4313      	orrs	r3, r2
 800bc8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a18      	ldr	r2, [pc, #96]	@ (800bcf8 <TIM_OC2_SetConfig+0xe8>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_OC2_SetConfig+0x94>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a17      	ldr	r2, [pc, #92]	@ (800bcfc <TIM_OC2_SetConfig+0xec>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d113      	bne.n	800bccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bcaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bcb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	693a      	ldr	r2, [r7, #16]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	699b      	ldr	r3, [r3, #24]
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	693a      	ldr	r2, [r7, #16]
 800bcd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	621a      	str	r2, [r3, #32]
}
 800bce6:	bf00      	nop
 800bce8:	371c      	adds	r7, #28
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	feff8fff 	.word	0xfeff8fff
 800bcf8:	40010000 	.word	0x40010000
 800bcfc:	40010400 	.word	0x40010400

0800bd00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b087      	sub	sp, #28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6a1b      	ldr	r3, [r3, #32]
 800bd0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	69db      	ldr	r3, [r3, #28]
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	4b2d      	ldr	r3, [pc, #180]	@ (800bde0 <TIM_OC3_SetConfig+0xe0>)
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 0303 	bic.w	r3, r3, #3
 800bd36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bd42:	697b      	ldr	r3, [r7, #20]
 800bd44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	689b      	ldr	r3, [r3, #8]
 800bd4e:	021b      	lsls	r3, r3, #8
 800bd50:	697a      	ldr	r2, [r7, #20]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a22      	ldr	r2, [pc, #136]	@ (800bde4 <TIM_OC3_SetConfig+0xe4>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d003      	beq.n	800bd66 <TIM_OC3_SetConfig+0x66>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a21      	ldr	r2, [pc, #132]	@ (800bde8 <TIM_OC3_SetConfig+0xe8>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d10d      	bne.n	800bd82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	68db      	ldr	r3, [r3, #12]
 800bd72:	021b      	lsls	r3, r3, #8
 800bd74:	697a      	ldr	r2, [r7, #20]
 800bd76:	4313      	orrs	r3, r2
 800bd78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	4a17      	ldr	r2, [pc, #92]	@ (800bde4 <TIM_OC3_SetConfig+0xe4>)
 800bd86:	4293      	cmp	r3, r2
 800bd88:	d003      	beq.n	800bd92 <TIM_OC3_SetConfig+0x92>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a16      	ldr	r2, [pc, #88]	@ (800bde8 <TIM_OC3_SetConfig+0xe8>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d113      	bne.n	800bdba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bd98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bda0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	011b      	lsls	r3, r3, #4
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	011b      	lsls	r3, r3, #4
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	685a      	ldr	r2, [r3, #4]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	621a      	str	r2, [r3, #32]
}
 800bdd4:	bf00      	nop
 800bdd6:	371c      	adds	r7, #28
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	fffeff8f 	.word	0xfffeff8f
 800bde4:	40010000 	.word	0x40010000
 800bde8:	40010400 	.word	0x40010400

0800bdec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b087      	sub	sp, #28
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a1b      	ldr	r3, [r3, #32]
 800be00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	69db      	ldr	r3, [r3, #28]
 800be12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	4b1e      	ldr	r3, [pc, #120]	@ (800be90 <TIM_OC4_SetConfig+0xa4>)
 800be18:	4013      	ands	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	021b      	lsls	r3, r3, #8
 800be2a:	68fa      	ldr	r2, [r7, #12]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	031b      	lsls	r3, r3, #12
 800be3e:	693a      	ldr	r2, [r7, #16]
 800be40:	4313      	orrs	r3, r2
 800be42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a13      	ldr	r2, [pc, #76]	@ (800be94 <TIM_OC4_SetConfig+0xa8>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d003      	beq.n	800be54 <TIM_OC4_SetConfig+0x68>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	4a12      	ldr	r2, [pc, #72]	@ (800be98 <TIM_OC4_SetConfig+0xac>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d109      	bne.n	800be68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800be5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	019b      	lsls	r3, r3, #6
 800be62:	697a      	ldr	r2, [r7, #20]
 800be64:	4313      	orrs	r3, r2
 800be66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	697a      	ldr	r2, [r7, #20]
 800be6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	693a      	ldr	r2, [r7, #16]
 800be80:	621a      	str	r2, [r3, #32]
}
 800be82:	bf00      	nop
 800be84:	371c      	adds	r7, #28
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	feff8fff 	.word	0xfeff8fff
 800be94:	40010000 	.word	0x40010000
 800be98:	40010400 	.word	0x40010400

0800be9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a1b      	ldr	r3, [r3, #32]
 800beaa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6a1b      	ldr	r3, [r3, #32]
 800beb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	685b      	ldr	r3, [r3, #4]
 800bebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4b1b      	ldr	r3, [pc, #108]	@ (800bf34 <TIM_OC5_SetConfig+0x98>)
 800bec8:	4013      	ands	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68fa      	ldr	r2, [r7, #12]
 800bed2:	4313      	orrs	r3, r2
 800bed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bedc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	689b      	ldr	r3, [r3, #8]
 800bee2:	041b      	lsls	r3, r3, #16
 800bee4:	693a      	ldr	r2, [r7, #16]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a12      	ldr	r2, [pc, #72]	@ (800bf38 <TIM_OC5_SetConfig+0x9c>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d003      	beq.n	800befa <TIM_OC5_SetConfig+0x5e>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a11      	ldr	r2, [pc, #68]	@ (800bf3c <TIM_OC5_SetConfig+0xa0>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d109      	bne.n	800bf0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	695b      	ldr	r3, [r3, #20]
 800bf06:	021b      	lsls	r3, r3, #8
 800bf08:	697a      	ldr	r2, [r7, #20]
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	68fa      	ldr	r2, [r7, #12]
 800bf18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	693a      	ldr	r2, [r7, #16]
 800bf26:	621a      	str	r2, [r3, #32]
}
 800bf28:	bf00      	nop
 800bf2a:	371c      	adds	r7, #28
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	fffeff8f 	.word	0xfffeff8f
 800bf38:	40010000 	.word	0x40010000
 800bf3c:	40010400 	.word	0x40010400

0800bf40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a1b      	ldr	r3, [r3, #32]
 800bf4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a1b      	ldr	r3, [r3, #32]
 800bf54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	4b1c      	ldr	r3, [pc, #112]	@ (800bfdc <TIM_OC6_SetConfig+0x9c>)
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	021b      	lsls	r3, r3, #8
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	051b      	lsls	r3, r3, #20
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a13      	ldr	r2, [pc, #76]	@ (800bfe0 <TIM_OC6_SetConfig+0xa0>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_OC6_SetConfig+0x60>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a12      	ldr	r2, [pc, #72]	@ (800bfe4 <TIM_OC6_SetConfig+0xa4>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d109      	bne.n	800bfb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bfa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	029b      	lsls	r3, r3, #10
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	621a      	str	r2, [r3, #32]
}
 800bfce:	bf00      	nop
 800bfd0:	371c      	adds	r7, #28
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop
 800bfdc:	feff8fff 	.word	0xfeff8fff
 800bfe0:	40010000 	.word	0x40010000
 800bfe4:	40010400 	.word	0x40010400

0800bfe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b087      	sub	sp, #28
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6a1b      	ldr	r3, [r3, #32]
 800bff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6a1b      	ldr	r3, [r3, #32]
 800bffe:	f023 0201 	bic.w	r2, r3, #1
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	699b      	ldr	r3, [r3, #24]
 800c00a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	011b      	lsls	r3, r3, #4
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f023 030a 	bic.w	r3, r3, #10
 800c024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c026:	697a      	ldr	r2, [r7, #20]
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	4313      	orrs	r3, r2
 800c02c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	693a      	ldr	r2, [r7, #16]
 800c032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	621a      	str	r2, [r3, #32]
}
 800c03a:	bf00      	nop
 800c03c:	371c      	adds	r7, #28
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c046:	b480      	push	{r7}
 800c048:	b087      	sub	sp, #28
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6a1b      	ldr	r3, [r3, #32]
 800c056:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	f023 0210 	bic.w	r2, r3, #16
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	699b      	ldr	r3, [r3, #24]
 800c068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c070:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	031b      	lsls	r3, r3, #12
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	4313      	orrs	r3, r2
 800c07a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c082:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	697a      	ldr	r2, [r7, #20]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	621a      	str	r2, [r3, #32]
}
 800c09a:	bf00      	nop
 800c09c:	371c      	adds	r7, #28
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr

0800c0a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c0a6:	b480      	push	{r7}
 800c0a8:	b085      	sub	sp, #20
 800c0aa:	af00      	add	r7, sp, #0
 800c0ac:	6078      	str	r0, [r7, #4]
 800c0ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	f043 0307 	orr.w	r3, r3, #7
 800c0c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	68fa      	ldr	r2, [r7, #12]
 800c0ce:	609a      	str	r2, [r3, #8]
}
 800c0d0:	bf00      	nop
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b087      	sub	sp, #28
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60f8      	str	r0, [r7, #12]
 800c0e4:	60b9      	str	r1, [r7, #8]
 800c0e6:	607a      	str	r2, [r7, #4]
 800c0e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c0f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	021a      	lsls	r2, r3, #8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	431a      	orrs	r2, r3
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	4313      	orrs	r3, r2
 800c104:	697a      	ldr	r2, [r7, #20]
 800c106:	4313      	orrs	r3, r2
 800c108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	609a      	str	r2, [r3, #8]
}
 800c110:	bf00      	nop
 800c112:	371c      	adds	r7, #28
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	f003 031f 	and.w	r3, r3, #31
 800c12e:	2201      	movs	r2, #1
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	6a1a      	ldr	r2, [r3, #32]
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	43db      	mvns	r3, r3
 800c13e:	401a      	ands	r2, r3
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6a1a      	ldr	r2, [r3, #32]
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	f003 031f 	and.w	r3, r3, #31
 800c14e:	6879      	ldr	r1, [r7, #4]
 800c150:	fa01 f303 	lsl.w	r3, r1, r3
 800c154:	431a      	orrs	r2, r3
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	621a      	str	r2, [r3, #32]
}
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr
	...

0800c168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d101      	bne.n	800c180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c17c:	2302      	movs	r3, #2
 800c17e:	e06d      	b.n	800c25c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	689b      	ldr	r3, [r3, #8]
 800c19e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a30      	ldr	r2, [pc, #192]	@ (800c268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d004      	beq.n	800c1b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a2f      	ldr	r2, [pc, #188]	@ (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d108      	bne.n	800c1c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c1ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a20      	ldr	r2, [pc, #128]	@ (800c268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d022      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1f2:	d01d      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a1d      	ldr	r2, [pc, #116]	@ (800c270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d018      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a1c      	ldr	r2, [pc, #112]	@ (800c274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d013      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a1a      	ldr	r2, [pc, #104]	@ (800c278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d00e      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a15      	ldr	r2, [pc, #84]	@ (800c26c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d009      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a16      	ldr	r2, [pc, #88]	@ (800c27c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d004      	beq.n	800c230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a15      	ldr	r2, [pc, #84]	@ (800c280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d10c      	bne.n	800c24a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	689b      	ldr	r3, [r3, #8]
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c25a:	2300      	movs	r3, #0
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3714      	adds	r7, #20
 800c260:	46bd      	mov	sp, r7
 800c262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c266:	4770      	bx	lr
 800c268:	40010000 	.word	0x40010000
 800c26c:	40010400 	.word	0x40010400
 800c270:	40000400 	.word	0x40000400
 800c274:	40000800 	.word	0x40000800
 800c278:	40000c00 	.word	0x40000c00
 800c27c:	40014000 	.word	0x40014000
 800c280:	40001800 	.word	0x40001800

0800c284 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c284:	b480      	push	{r7}
 800c286:	b085      	sub	sp, #20
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c28e:	2300      	movs	r3, #0
 800c290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e065      	b.n	800c36c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	689b      	ldr	r3, [r3, #8]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	041b      	lsls	r3, r3, #16
 800c316:	4313      	orrs	r3, r2
 800c318:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	4a16      	ldr	r2, [pc, #88]	@ (800c378 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d004      	beq.n	800c32e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a14      	ldr	r2, [pc, #80]	@ (800c37c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d115      	bne.n	800c35a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c338:	051b      	lsls	r3, r3, #20
 800c33a:	4313      	orrs	r3, r2
 800c33c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	69db      	ldr	r3, [r3, #28]
 800c348:	4313      	orrs	r3, r2
 800c34a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	4313      	orrs	r3, r2
 800c358:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c36a:	2300      	movs	r3, #0
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	40010000 	.word	0x40010000
 800c37c:	40010400 	.word	0x40010400

0800c380 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d101      	bne.n	800c3ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e040      	b.n	800c450 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7fa f86e 	bl	80064c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2224      	movs	r2, #36	@ 0x24
 800c3e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0201 	bic.w	r2, r2, #1
 800c3f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d002      	beq.n	800c408 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fedc 	bl	800d1c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fc75 	bl	800ccf8 <UART_SetConfig>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b01      	cmp	r3, #1
 800c412:	d101      	bne.n	800c418 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c414:	2301      	movs	r3, #1
 800c416:	e01b      	b.n	800c450 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c426:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c436:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681a      	ldr	r2, [r3, #0]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f042 0201 	orr.w	r2, r2, #1
 800c446:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f000 ff5b 	bl	800d304 <UART_CheckIdleState>
 800c44e:	4603      	mov	r3, r0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08a      	sub	sp, #40	@ 0x28
 800c45c:	af02      	add	r7, sp, #8
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	603b      	str	r3, [r7, #0]
 800c464:	4613      	mov	r3, r2
 800c466:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c46c:	2b20      	cmp	r3, #32
 800c46e:	d177      	bne.n	800c560 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <HAL_UART_Transmit+0x24>
 800c476:	88fb      	ldrh	r3, [r7, #6]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d101      	bne.n	800c480 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e070      	b.n	800c562 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	2200      	movs	r2, #0
 800c484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2221      	movs	r2, #33	@ 0x21
 800c48c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c48e:	f7fa fde1 	bl	8007054 <HAL_GetTick>
 800c492:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	88fa      	ldrh	r2, [r7, #6]
 800c498:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	88fa      	ldrh	r2, [r7, #6]
 800c4a0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4ac:	d108      	bne.n	800c4c0 <HAL_UART_Transmit+0x68>
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	691b      	ldr	r3, [r3, #16]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d104      	bne.n	800c4c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	e003      	b.n	800c4c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c4c8:	e02f      	b.n	800c52a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	9300      	str	r3, [sp, #0]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	2180      	movs	r1, #128	@ 0x80
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	f000 ff6c 	bl	800d3b2 <UART_WaitOnFlagUntilTimeout>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d004      	beq.n	800c4ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2220      	movs	r2, #32
 800c4e4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c4e6:	2303      	movs	r3, #3
 800c4e8:	e03b      	b.n	800c562 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c4ea:	69fb      	ldr	r3, [r7, #28]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10b      	bne.n	800c508 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	881b      	ldrh	r3, [r3, #0]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c4fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c500:	69bb      	ldr	r3, [r7, #24]
 800c502:	3302      	adds	r3, #2
 800c504:	61bb      	str	r3, [r7, #24]
 800c506:	e007      	b.n	800c518 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	781a      	ldrb	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	3301      	adds	r3, #1
 800c516:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c51e:	b29b      	uxth	r3, r3
 800c520:	3b01      	subs	r3, #1
 800c522:	b29a      	uxth	r2, r3
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c530:	b29b      	uxth	r3, r3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d1c9      	bne.n	800c4ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2200      	movs	r2, #0
 800c53e:	2140      	movs	r1, #64	@ 0x40
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 ff36 	bl	800d3b2 <UART_WaitOnFlagUntilTimeout>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2220      	movs	r2, #32
 800c550:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e005      	b.n	800c562 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2220      	movs	r2, #32
 800c55a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c55c:	2300      	movs	r3, #0
 800c55e:	e000      	b.n	800c562 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c560:	2302      	movs	r3, #2
  }
}
 800c562:	4618      	mov	r0, r3
 800c564:	3720      	adds	r7, #32
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	@ 0x28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4613      	mov	r3, r2
 800c578:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c57e:	2b20      	cmp	r3, #32
 800c580:	d165      	bne.n	800c64e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d002      	beq.n	800c58e <HAL_UART_Transmit_DMA+0x22>
 800c588:	88fb      	ldrh	r3, [r7, #6]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c58e:	2301      	movs	r3, #1
 800c590:	e05e      	b.n	800c650 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	68ba      	ldr	r2, [r7, #8]
 800c596:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	88fa      	ldrh	r2, [r7, #6]
 800c59c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	88fa      	ldrh	r2, [r7, #6]
 800c5a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2221      	movs	r2, #33	@ 0x21
 800c5b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d027      	beq.n	800c60e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5c2:	4a25      	ldr	r2, [pc, #148]	@ (800c658 <HAL_UART_Transmit_DMA+0xec>)
 800c5c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5ca:	4a24      	ldr	r2, [pc, #144]	@ (800c65c <HAL_UART_Transmit_DMA+0xf0>)
 800c5cc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5d2:	4a23      	ldr	r2, [pc, #140]	@ (800c660 <HAL_UART_Transmit_DMA+0xf4>)
 800c5d4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c5da:	2200      	movs	r2, #0
 800c5dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	3328      	adds	r3, #40	@ 0x28
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	88fb      	ldrh	r3, [r7, #6]
 800c5f2:	f7fa feef 	bl	80073d4 <HAL_DMA_Start_IT>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d008      	beq.n	800c60e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	2210      	movs	r2, #16
 800c600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2220      	movs	r2, #32
 800c608:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e020      	b.n	800c650 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2240      	movs	r2, #64	@ 0x40
 800c614:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3308      	adds	r3, #8
 800c61c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	613b      	str	r3, [r7, #16]
   return(result);
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	3308      	adds	r3, #8
 800c634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c636:	623a      	str	r2, [r7, #32]
 800c638:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63a:	69f9      	ldr	r1, [r7, #28]
 800c63c:	6a3a      	ldr	r2, [r7, #32]
 800c63e:	e841 2300 	strex	r3, r2, [r1]
 800c642:	61bb      	str	r3, [r7, #24]
   return(result);
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d1e5      	bne.n	800c616 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c64e:	2302      	movs	r3, #2
  }
}
 800c650:	4618      	mov	r0, r3
 800c652:	3728      	adds	r7, #40	@ 0x28
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	0800d6e1 	.word	0x0800d6e1
 800c65c:	0800d777 	.word	0x0800d777
 800c660:	0800d8f9 	.word	0x0800d8f9

0800c664 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b08a      	sub	sp, #40	@ 0x28
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60f8      	str	r0, [r7, #12]
 800c66c:	60b9      	str	r1, [r7, #8]
 800c66e:	4613      	mov	r3, r2
 800c670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c678:	2b20      	cmp	r3, #32
 800c67a:	d132      	bne.n	800c6e2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d002      	beq.n	800c688 <HAL_UART_Receive_DMA+0x24>
 800c682:	88fb      	ldrh	r3, [r7, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e02b      	b.n	800c6e4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2200      	movs	r2, #0
 800c690:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	685b      	ldr	r3, [r3, #4]
 800c698:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d018      	beq.n	800c6d2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	e853 3f00 	ldrex	r3, [r3]
 800c6ac:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	623b      	str	r3, [r7, #32]
 800c6c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c2:	69f9      	ldr	r1, [r7, #28]
 800c6c4:	6a3a      	ldr	r2, [r7, #32]
 800c6c6:	e841 2300 	strex	r3, r2, [r1]
 800c6ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6cc:	69bb      	ldr	r3, [r7, #24]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1e6      	bne.n	800c6a0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c6d2:	88fb      	ldrh	r3, [r7, #6]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 fed7 	bl	800d48c <UART_Start_Receive_DMA>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	e000      	b.n	800c6e4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c6e2:	2302      	movs	r3, #2
  }
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3728      	adds	r7, #40	@ 0x28
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b0ba      	sub	sp, #232	@ 0xe8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c712:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c716:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c71a:	4013      	ands	r3, r2
 800c71c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c724:	2b00      	cmp	r3, #0
 800c726:	d115      	bne.n	800c754 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c72c:	f003 0320 	and.w	r3, r3, #32
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00f      	beq.n	800c754 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c738:	f003 0320 	and.w	r3, r3, #32
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d009      	beq.n	800c754 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 8297 	beq.w	800cc78 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	4798      	blx	r3
      }
      return;
 800c752:	e291      	b.n	800cc78 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c754:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 8117 	beq.w	800c98c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c76a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c76e:	4b85      	ldr	r3, [pc, #532]	@ (800c984 <HAL_UART_IRQHandler+0x298>)
 800c770:	4013      	ands	r3, r2
 800c772:	2b00      	cmp	r3, #0
 800c774:	f000 810a 	beq.w	800c98c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d011      	beq.n	800c7a8 <HAL_UART_IRQHandler+0xbc>
 800c784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2201      	movs	r2, #1
 800c796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c79e:	f043 0201 	orr.w	r2, r3, #1
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ac:	f003 0302 	and.w	r3, r3, #2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d011      	beq.n	800c7d8 <HAL_UART_IRQHandler+0xec>
 800c7b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7b8:	f003 0301 	and.w	r3, r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d00b      	beq.n	800c7d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	2202      	movs	r2, #2
 800c7c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7ce:	f043 0204 	orr.w	r2, r3, #4
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7dc:	f003 0304 	and.w	r3, r3, #4
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d011      	beq.n	800c808 <HAL_UART_IRQHandler+0x11c>
 800c7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c7e8:	f003 0301 	and.w	r3, r3, #1
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d00b      	beq.n	800c808 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2204      	movs	r2, #4
 800c7f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c7fe:	f043 0202 	orr.w	r2, r3, #2
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c80c:	f003 0308 	and.w	r3, r3, #8
 800c810:	2b00      	cmp	r3, #0
 800c812:	d017      	beq.n	800c844 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c818:	f003 0320 	and.w	r3, r3, #32
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d105      	bne.n	800c82c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c824:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00b      	beq.n	800c844 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	2208      	movs	r2, #8
 800c832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c83a:	f043 0208 	orr.w	r2, r3, #8
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d012      	beq.n	800c876 <HAL_UART_IRQHandler+0x18a>
 800c850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c854:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00c      	beq.n	800c876 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c86c:	f043 0220 	orr.w	r2, r3, #32
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f000 81fd 	beq.w	800cc7c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c886:	f003 0320 	and.w	r3, r3, #32
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00d      	beq.n	800c8aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c88e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c892:	f003 0320 	and.w	r3, r3, #32
 800c896:	2b00      	cmp	r3, #0
 800c898:	d007      	beq.n	800c8aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d003      	beq.n	800c8aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8be:	2b40      	cmp	r3, #64	@ 0x40
 800c8c0:	d005      	beq.n	800c8ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c8c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c8c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d04f      	beq.n	800c96e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f000 fea2 	bl	800d618 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8de:	2b40      	cmp	r3, #64	@ 0x40
 800c8e0:	d141      	bne.n	800c966 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	3308      	adds	r3, #8
 800c8e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c8f0:	e853 3f00 	ldrex	r3, [r3]
 800c8f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c8f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c900:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	3308      	adds	r3, #8
 800c90a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c90e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c916:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c91a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c91e:	e841 2300 	strex	r3, r2, [r1]
 800c922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d1d9      	bne.n	800c8e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c932:	2b00      	cmp	r3, #0
 800c934:	d013      	beq.n	800c95e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c93a:	4a13      	ldr	r2, [pc, #76]	@ (800c988 <HAL_UART_IRQHandler+0x29c>)
 800c93c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c942:	4618      	mov	r0, r3
 800c944:	f7fa fe16 	bl	8007574 <HAL_DMA_Abort_IT>
 800c948:	4603      	mov	r3, r0
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d017      	beq.n	800c97e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c958:	4610      	mov	r0, r2
 800c95a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c95c:	e00f      	b.n	800c97e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f9b4 	bl	800cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c964:	e00b      	b.n	800c97e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f9b0 	bl	800cccc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c96c:	e007      	b.n	800c97e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 f9ac 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c97c:	e17e      	b.n	800cc7c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c97e:	bf00      	nop
    return;
 800c980:	e17c      	b.n	800cc7c <HAL_UART_IRQHandler+0x590>
 800c982:	bf00      	nop
 800c984:	04000120 	.word	0x04000120
 800c988:	0800d977 	.word	0x0800d977

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c990:	2b01      	cmp	r3, #1
 800c992:	f040 814c 	bne.w	800cc2e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c99a:	f003 0310 	and.w	r3, r3, #16
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 8145 	beq.w	800cc2e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9a8:	f003 0310 	and.w	r3, r3, #16
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 813e 	beq.w	800cc2e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	2210      	movs	r2, #16
 800c9b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9c4:	2b40      	cmp	r3, #64	@ 0x40
 800c9c6:	f040 80b6 	bne.w	800cb36 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c9d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	f000 8150 	beq.w	800cc80 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c9e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	f080 8148 	bcs.w	800cc80 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c9f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9fe:	69db      	ldr	r3, [r3, #28]
 800ca00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca04:	f000 8086 	beq.w	800cb14 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ca14:	e853 3f00 	ldrex	r3, [r3]
 800ca18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ca1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ca20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ca24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ca32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ca36:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ca3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ca42:	e841 2300 	strex	r3, r2, [r1]
 800ca46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ca4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1da      	bne.n	800ca08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	3308      	adds	r3, #8
 800ca58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ca5c:	e853 3f00 	ldrex	r3, [r3]
 800ca60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ca62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca64:	f023 0301 	bic.w	r3, r3, #1
 800ca68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3308      	adds	r3, #8
 800ca72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ca7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ca7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ca82:	e841 2300 	strex	r3, r2, [r1]
 800ca86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ca88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d1e1      	bne.n	800ca52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3308      	adds	r3, #8
 800ca94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca98:	e853 3f00 	ldrex	r3, [r3]
 800ca9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ca9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800caa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3308      	adds	r3, #8
 800caae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cab2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cab4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cab8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e3      	bne.n	800ca8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2220      	movs	r2, #32
 800caca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cadc:	e853 3f00 	ldrex	r3, [r3]
 800cae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cae4:	f023 0310 	bic.w	r3, r3, #16
 800cae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	461a      	mov	r2, r3
 800caf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caf6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caf8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cafa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cafc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cafe:	e841 2300 	strex	r3, r2, [r1]
 800cb02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cb04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d1e4      	bne.n	800cad4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7fa fcc0 	bl	8007494 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2202      	movs	r2, #2
 800cb18:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f8d6 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cb34:	e0a4      	b.n	800cc80 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800cb50:	b29b      	uxth	r3, r3
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	f000 8096 	beq.w	800cc84 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800cb58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	f000 8091 	beq.w	800cc84 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6a:	e853 3f00 	ldrex	r3, [r3]
 800cb6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	461a      	mov	r2, r3
 800cb80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800cb84:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cb8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb8c:	e841 2300 	strex	r3, r2, [r1]
 800cb90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cb92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d1e4      	bne.n	800cb62 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	3308      	adds	r3, #8
 800cb9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba2:	e853 3f00 	ldrex	r3, [r3]
 800cba6:	623b      	str	r3, [r7, #32]
   return(result);
 800cba8:	6a3b      	ldr	r3, [r7, #32]
 800cbaa:	f023 0301 	bic.w	r3, r3, #1
 800cbae:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cbbc:	633a      	str	r2, [r7, #48]	@ 0x30
 800cbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cbc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cbc4:	e841 2300 	strex	r3, r2, [r1]
 800cbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d1e3      	bne.n	800cb98 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2220      	movs	r2, #32
 800cbd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f023 0310 	bic.w	r3, r3, #16
 800cbf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800cc06:	61fb      	str	r3, [r7, #28]
 800cc08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	69b9      	ldr	r1, [r7, #24]
 800cc0c:	69fa      	ldr	r2, [r7, #28]
 800cc0e:	e841 2300 	strex	r3, r2, [r1]
 800cc12:	617b      	str	r3, [r7, #20]
   return(result);
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1e4      	bne.n	800cbe4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2202      	movs	r2, #2
 800cc1e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cc20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800cc24:	4619      	mov	r1, r3
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f85a 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cc2c:	e02a      	b.n	800cc84 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cc2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00e      	beq.n	800cc58 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cc3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d008      	beq.n	800cc58 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d01c      	beq.n	800cc88 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	4798      	blx	r3
    }
    return;
 800cc56:	e017      	b.n	800cc88 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cc58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d012      	beq.n	800cc8a <HAL_UART_IRQHandler+0x59e>
 800cc64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00c      	beq.n	800cc8a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 fe96 	bl	800d9a2 <UART_EndTransmit_IT>
    return;
 800cc76:	e008      	b.n	800cc8a <HAL_UART_IRQHandler+0x59e>
      return;
 800cc78:	bf00      	nop
 800cc7a:	e006      	b.n	800cc8a <HAL_UART_IRQHandler+0x59e>
    return;
 800cc7c:	bf00      	nop
 800cc7e:	e004      	b.n	800cc8a <HAL_UART_IRQHandler+0x59e>
      return;
 800cc80:	bf00      	nop
 800cc82:	e002      	b.n	800cc8a <HAL_UART_IRQHandler+0x59e>
      return;
 800cc84:	bf00      	nop
 800cc86:	e000      	b.n	800cc8a <HAL_UART_IRQHandler+0x59e>
    return;
 800cc88:	bf00      	nop
  }

}
 800cc8a:	37e8      	adds	r7, #232	@ 0xe8
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cc98:	bf00      	nop
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ccc0:	bf00      	nop
 800ccc2:	370c      	adds	r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ccd4:	bf00      	nop
 800ccd6:	370c      	adds	r7, #12
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b083      	sub	sp, #12
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ccec:	bf00      	nop
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b088      	sub	sp, #32
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	689a      	ldr	r2, [r3, #8]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	691b      	ldr	r3, [r3, #16]
 800cd0c:	431a      	orrs	r2, r3
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	695b      	ldr	r3, [r3, #20]
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	69db      	ldr	r3, [r3, #28]
 800cd18:	4313      	orrs	r3, r2
 800cd1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	4ba6      	ldr	r3, [pc, #664]	@ (800cfbc <UART_SetConfig+0x2c4>)
 800cd24:	4013      	ands	r3, r2
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	6812      	ldr	r2, [r2, #0]
 800cd2a:	6979      	ldr	r1, [r7, #20]
 800cd2c:	430b      	orrs	r3, r1
 800cd2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	68da      	ldr	r2, [r3, #12]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	430a      	orrs	r2, r1
 800cd44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699b      	ldr	r3, [r3, #24]
 800cd4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a1b      	ldr	r3, [r3, #32]
 800cd50:	697a      	ldr	r2, [r7, #20]
 800cd52:	4313      	orrs	r3, r2
 800cd54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	697a      	ldr	r2, [r7, #20]
 800cd66:	430a      	orrs	r2, r1
 800cd68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4a94      	ldr	r2, [pc, #592]	@ (800cfc0 <UART_SetConfig+0x2c8>)
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d120      	bne.n	800cdb6 <UART_SetConfig+0xbe>
 800cd74:	4b93      	ldr	r3, [pc, #588]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7a:	f003 0303 	and.w	r3, r3, #3
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d816      	bhi.n	800cdb0 <UART_SetConfig+0xb8>
 800cd82:	a201      	add	r2, pc, #4	@ (adr r2, 800cd88 <UART_SetConfig+0x90>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cd99 	.word	0x0800cd99
 800cd8c:	0800cda5 	.word	0x0800cda5
 800cd90:	0800cd9f 	.word	0x0800cd9f
 800cd94:	0800cdab 	.word	0x0800cdab
 800cd98:	2301      	movs	r3, #1
 800cd9a:	77fb      	strb	r3, [r7, #31]
 800cd9c:	e150      	b.n	800d040 <UART_SetConfig+0x348>
 800cd9e:	2302      	movs	r3, #2
 800cda0:	77fb      	strb	r3, [r7, #31]
 800cda2:	e14d      	b.n	800d040 <UART_SetConfig+0x348>
 800cda4:	2304      	movs	r3, #4
 800cda6:	77fb      	strb	r3, [r7, #31]
 800cda8:	e14a      	b.n	800d040 <UART_SetConfig+0x348>
 800cdaa:	2308      	movs	r3, #8
 800cdac:	77fb      	strb	r3, [r7, #31]
 800cdae:	e147      	b.n	800d040 <UART_SetConfig+0x348>
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	77fb      	strb	r3, [r7, #31]
 800cdb4:	e144      	b.n	800d040 <UART_SetConfig+0x348>
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a83      	ldr	r2, [pc, #524]	@ (800cfc8 <UART_SetConfig+0x2d0>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d132      	bne.n	800ce26 <UART_SetConfig+0x12e>
 800cdc0:	4b80      	ldr	r3, [pc, #512]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800cdc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdc6:	f003 030c 	and.w	r3, r3, #12
 800cdca:	2b0c      	cmp	r3, #12
 800cdcc:	d828      	bhi.n	800ce20 <UART_SetConfig+0x128>
 800cdce:	a201      	add	r2, pc, #4	@ (adr r2, 800cdd4 <UART_SetConfig+0xdc>)
 800cdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd4:	0800ce09 	.word	0x0800ce09
 800cdd8:	0800ce21 	.word	0x0800ce21
 800cddc:	0800ce21 	.word	0x0800ce21
 800cde0:	0800ce21 	.word	0x0800ce21
 800cde4:	0800ce15 	.word	0x0800ce15
 800cde8:	0800ce21 	.word	0x0800ce21
 800cdec:	0800ce21 	.word	0x0800ce21
 800cdf0:	0800ce21 	.word	0x0800ce21
 800cdf4:	0800ce0f 	.word	0x0800ce0f
 800cdf8:	0800ce21 	.word	0x0800ce21
 800cdfc:	0800ce21 	.word	0x0800ce21
 800ce00:	0800ce21 	.word	0x0800ce21
 800ce04:	0800ce1b 	.word	0x0800ce1b
 800ce08:	2300      	movs	r3, #0
 800ce0a:	77fb      	strb	r3, [r7, #31]
 800ce0c:	e118      	b.n	800d040 <UART_SetConfig+0x348>
 800ce0e:	2302      	movs	r3, #2
 800ce10:	77fb      	strb	r3, [r7, #31]
 800ce12:	e115      	b.n	800d040 <UART_SetConfig+0x348>
 800ce14:	2304      	movs	r3, #4
 800ce16:	77fb      	strb	r3, [r7, #31]
 800ce18:	e112      	b.n	800d040 <UART_SetConfig+0x348>
 800ce1a:	2308      	movs	r3, #8
 800ce1c:	77fb      	strb	r3, [r7, #31]
 800ce1e:	e10f      	b.n	800d040 <UART_SetConfig+0x348>
 800ce20:	2310      	movs	r3, #16
 800ce22:	77fb      	strb	r3, [r7, #31]
 800ce24:	e10c      	b.n	800d040 <UART_SetConfig+0x348>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4a68      	ldr	r2, [pc, #416]	@ (800cfcc <UART_SetConfig+0x2d4>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d120      	bne.n	800ce72 <UART_SetConfig+0x17a>
 800ce30:	4b64      	ldr	r3, [pc, #400]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800ce32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ce3a:	2b30      	cmp	r3, #48	@ 0x30
 800ce3c:	d013      	beq.n	800ce66 <UART_SetConfig+0x16e>
 800ce3e:	2b30      	cmp	r3, #48	@ 0x30
 800ce40:	d814      	bhi.n	800ce6c <UART_SetConfig+0x174>
 800ce42:	2b20      	cmp	r3, #32
 800ce44:	d009      	beq.n	800ce5a <UART_SetConfig+0x162>
 800ce46:	2b20      	cmp	r3, #32
 800ce48:	d810      	bhi.n	800ce6c <UART_SetConfig+0x174>
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d002      	beq.n	800ce54 <UART_SetConfig+0x15c>
 800ce4e:	2b10      	cmp	r3, #16
 800ce50:	d006      	beq.n	800ce60 <UART_SetConfig+0x168>
 800ce52:	e00b      	b.n	800ce6c <UART_SetConfig+0x174>
 800ce54:	2300      	movs	r3, #0
 800ce56:	77fb      	strb	r3, [r7, #31]
 800ce58:	e0f2      	b.n	800d040 <UART_SetConfig+0x348>
 800ce5a:	2302      	movs	r3, #2
 800ce5c:	77fb      	strb	r3, [r7, #31]
 800ce5e:	e0ef      	b.n	800d040 <UART_SetConfig+0x348>
 800ce60:	2304      	movs	r3, #4
 800ce62:	77fb      	strb	r3, [r7, #31]
 800ce64:	e0ec      	b.n	800d040 <UART_SetConfig+0x348>
 800ce66:	2308      	movs	r3, #8
 800ce68:	77fb      	strb	r3, [r7, #31]
 800ce6a:	e0e9      	b.n	800d040 <UART_SetConfig+0x348>
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	77fb      	strb	r3, [r7, #31]
 800ce70:	e0e6      	b.n	800d040 <UART_SetConfig+0x348>
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	4a56      	ldr	r2, [pc, #344]	@ (800cfd0 <UART_SetConfig+0x2d8>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d120      	bne.n	800cebe <UART_SetConfig+0x1c6>
 800ce7c:	4b51      	ldr	r3, [pc, #324]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800ce7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ce86:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce88:	d013      	beq.n	800ceb2 <UART_SetConfig+0x1ba>
 800ce8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ce8c:	d814      	bhi.n	800ceb8 <UART_SetConfig+0x1c0>
 800ce8e:	2b80      	cmp	r3, #128	@ 0x80
 800ce90:	d009      	beq.n	800cea6 <UART_SetConfig+0x1ae>
 800ce92:	2b80      	cmp	r3, #128	@ 0x80
 800ce94:	d810      	bhi.n	800ceb8 <UART_SetConfig+0x1c0>
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <UART_SetConfig+0x1a8>
 800ce9a:	2b40      	cmp	r3, #64	@ 0x40
 800ce9c:	d006      	beq.n	800ceac <UART_SetConfig+0x1b4>
 800ce9e:	e00b      	b.n	800ceb8 <UART_SetConfig+0x1c0>
 800cea0:	2300      	movs	r3, #0
 800cea2:	77fb      	strb	r3, [r7, #31]
 800cea4:	e0cc      	b.n	800d040 <UART_SetConfig+0x348>
 800cea6:	2302      	movs	r3, #2
 800cea8:	77fb      	strb	r3, [r7, #31]
 800ceaa:	e0c9      	b.n	800d040 <UART_SetConfig+0x348>
 800ceac:	2304      	movs	r3, #4
 800ceae:	77fb      	strb	r3, [r7, #31]
 800ceb0:	e0c6      	b.n	800d040 <UART_SetConfig+0x348>
 800ceb2:	2308      	movs	r3, #8
 800ceb4:	77fb      	strb	r3, [r7, #31]
 800ceb6:	e0c3      	b.n	800d040 <UART_SetConfig+0x348>
 800ceb8:	2310      	movs	r3, #16
 800ceba:	77fb      	strb	r3, [r7, #31]
 800cebc:	e0c0      	b.n	800d040 <UART_SetConfig+0x348>
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4a44      	ldr	r2, [pc, #272]	@ (800cfd4 <UART_SetConfig+0x2dc>)
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d125      	bne.n	800cf14 <UART_SetConfig+0x21c>
 800cec8:	4b3e      	ldr	r3, [pc, #248]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800ceca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ced2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ced6:	d017      	beq.n	800cf08 <UART_SetConfig+0x210>
 800ced8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cedc:	d817      	bhi.n	800cf0e <UART_SetConfig+0x216>
 800cede:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cee2:	d00b      	beq.n	800cefc <UART_SetConfig+0x204>
 800cee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cee8:	d811      	bhi.n	800cf0e <UART_SetConfig+0x216>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d003      	beq.n	800cef6 <UART_SetConfig+0x1fe>
 800ceee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cef2:	d006      	beq.n	800cf02 <UART_SetConfig+0x20a>
 800cef4:	e00b      	b.n	800cf0e <UART_SetConfig+0x216>
 800cef6:	2300      	movs	r3, #0
 800cef8:	77fb      	strb	r3, [r7, #31]
 800cefa:	e0a1      	b.n	800d040 <UART_SetConfig+0x348>
 800cefc:	2302      	movs	r3, #2
 800cefe:	77fb      	strb	r3, [r7, #31]
 800cf00:	e09e      	b.n	800d040 <UART_SetConfig+0x348>
 800cf02:	2304      	movs	r3, #4
 800cf04:	77fb      	strb	r3, [r7, #31]
 800cf06:	e09b      	b.n	800d040 <UART_SetConfig+0x348>
 800cf08:	2308      	movs	r3, #8
 800cf0a:	77fb      	strb	r3, [r7, #31]
 800cf0c:	e098      	b.n	800d040 <UART_SetConfig+0x348>
 800cf0e:	2310      	movs	r3, #16
 800cf10:	77fb      	strb	r3, [r7, #31]
 800cf12:	e095      	b.n	800d040 <UART_SetConfig+0x348>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a2f      	ldr	r2, [pc, #188]	@ (800cfd8 <UART_SetConfig+0x2e0>)
 800cf1a:	4293      	cmp	r3, r2
 800cf1c:	d125      	bne.n	800cf6a <UART_SetConfig+0x272>
 800cf1e:	4b29      	ldr	r3, [pc, #164]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800cf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cf28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf2c:	d017      	beq.n	800cf5e <UART_SetConfig+0x266>
 800cf2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cf32:	d817      	bhi.n	800cf64 <UART_SetConfig+0x26c>
 800cf34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf38:	d00b      	beq.n	800cf52 <UART_SetConfig+0x25a>
 800cf3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf3e:	d811      	bhi.n	800cf64 <UART_SetConfig+0x26c>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d003      	beq.n	800cf4c <UART_SetConfig+0x254>
 800cf44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf48:	d006      	beq.n	800cf58 <UART_SetConfig+0x260>
 800cf4a:	e00b      	b.n	800cf64 <UART_SetConfig+0x26c>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	77fb      	strb	r3, [r7, #31]
 800cf50:	e076      	b.n	800d040 <UART_SetConfig+0x348>
 800cf52:	2302      	movs	r3, #2
 800cf54:	77fb      	strb	r3, [r7, #31]
 800cf56:	e073      	b.n	800d040 <UART_SetConfig+0x348>
 800cf58:	2304      	movs	r3, #4
 800cf5a:	77fb      	strb	r3, [r7, #31]
 800cf5c:	e070      	b.n	800d040 <UART_SetConfig+0x348>
 800cf5e:	2308      	movs	r3, #8
 800cf60:	77fb      	strb	r3, [r7, #31]
 800cf62:	e06d      	b.n	800d040 <UART_SetConfig+0x348>
 800cf64:	2310      	movs	r3, #16
 800cf66:	77fb      	strb	r3, [r7, #31]
 800cf68:	e06a      	b.n	800d040 <UART_SetConfig+0x348>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4a1b      	ldr	r2, [pc, #108]	@ (800cfdc <UART_SetConfig+0x2e4>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d138      	bne.n	800cfe6 <UART_SetConfig+0x2ee>
 800cf74:	4b13      	ldr	r3, [pc, #76]	@ (800cfc4 <UART_SetConfig+0x2cc>)
 800cf76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cf7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf82:	d017      	beq.n	800cfb4 <UART_SetConfig+0x2bc>
 800cf84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cf88:	d82a      	bhi.n	800cfe0 <UART_SetConfig+0x2e8>
 800cf8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf8e:	d00b      	beq.n	800cfa8 <UART_SetConfig+0x2b0>
 800cf90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf94:	d824      	bhi.n	800cfe0 <UART_SetConfig+0x2e8>
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d003      	beq.n	800cfa2 <UART_SetConfig+0x2aa>
 800cf9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf9e:	d006      	beq.n	800cfae <UART_SetConfig+0x2b6>
 800cfa0:	e01e      	b.n	800cfe0 <UART_SetConfig+0x2e8>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	77fb      	strb	r3, [r7, #31]
 800cfa6:	e04b      	b.n	800d040 <UART_SetConfig+0x348>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	77fb      	strb	r3, [r7, #31]
 800cfac:	e048      	b.n	800d040 <UART_SetConfig+0x348>
 800cfae:	2304      	movs	r3, #4
 800cfb0:	77fb      	strb	r3, [r7, #31]
 800cfb2:	e045      	b.n	800d040 <UART_SetConfig+0x348>
 800cfb4:	2308      	movs	r3, #8
 800cfb6:	77fb      	strb	r3, [r7, #31]
 800cfb8:	e042      	b.n	800d040 <UART_SetConfig+0x348>
 800cfba:	bf00      	nop
 800cfbc:	efff69f3 	.word	0xefff69f3
 800cfc0:	40011000 	.word	0x40011000
 800cfc4:	40023800 	.word	0x40023800
 800cfc8:	40004400 	.word	0x40004400
 800cfcc:	40004800 	.word	0x40004800
 800cfd0:	40004c00 	.word	0x40004c00
 800cfd4:	40005000 	.word	0x40005000
 800cfd8:	40011400 	.word	0x40011400
 800cfdc:	40007800 	.word	0x40007800
 800cfe0:	2310      	movs	r3, #16
 800cfe2:	77fb      	strb	r3, [r7, #31]
 800cfe4:	e02c      	b.n	800d040 <UART_SetConfig+0x348>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a72      	ldr	r2, [pc, #456]	@ (800d1b4 <UART_SetConfig+0x4bc>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d125      	bne.n	800d03c <UART_SetConfig+0x344>
 800cff0:	4b71      	ldr	r3, [pc, #452]	@ (800d1b8 <UART_SetConfig+0x4c0>)
 800cff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cff6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800cffa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800cffe:	d017      	beq.n	800d030 <UART_SetConfig+0x338>
 800d000:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800d004:	d817      	bhi.n	800d036 <UART_SetConfig+0x33e>
 800d006:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d00a:	d00b      	beq.n	800d024 <UART_SetConfig+0x32c>
 800d00c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d010:	d811      	bhi.n	800d036 <UART_SetConfig+0x33e>
 800d012:	2b00      	cmp	r3, #0
 800d014:	d003      	beq.n	800d01e <UART_SetConfig+0x326>
 800d016:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d01a:	d006      	beq.n	800d02a <UART_SetConfig+0x332>
 800d01c:	e00b      	b.n	800d036 <UART_SetConfig+0x33e>
 800d01e:	2300      	movs	r3, #0
 800d020:	77fb      	strb	r3, [r7, #31]
 800d022:	e00d      	b.n	800d040 <UART_SetConfig+0x348>
 800d024:	2302      	movs	r3, #2
 800d026:	77fb      	strb	r3, [r7, #31]
 800d028:	e00a      	b.n	800d040 <UART_SetConfig+0x348>
 800d02a:	2304      	movs	r3, #4
 800d02c:	77fb      	strb	r3, [r7, #31]
 800d02e:	e007      	b.n	800d040 <UART_SetConfig+0x348>
 800d030:	2308      	movs	r3, #8
 800d032:	77fb      	strb	r3, [r7, #31]
 800d034:	e004      	b.n	800d040 <UART_SetConfig+0x348>
 800d036:	2310      	movs	r3, #16
 800d038:	77fb      	strb	r3, [r7, #31]
 800d03a:	e001      	b.n	800d040 <UART_SetConfig+0x348>
 800d03c:	2310      	movs	r3, #16
 800d03e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	69db      	ldr	r3, [r3, #28]
 800d044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d048:	d15b      	bne.n	800d102 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d04a:	7ffb      	ldrb	r3, [r7, #31]
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	d828      	bhi.n	800d0a2 <UART_SetConfig+0x3aa>
 800d050:	a201      	add	r2, pc, #4	@ (adr r2, 800d058 <UART_SetConfig+0x360>)
 800d052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d056:	bf00      	nop
 800d058:	0800d07d 	.word	0x0800d07d
 800d05c:	0800d085 	.word	0x0800d085
 800d060:	0800d08d 	.word	0x0800d08d
 800d064:	0800d0a3 	.word	0x0800d0a3
 800d068:	0800d093 	.word	0x0800d093
 800d06c:	0800d0a3 	.word	0x0800d0a3
 800d070:	0800d0a3 	.word	0x0800d0a3
 800d074:	0800d0a3 	.word	0x0800d0a3
 800d078:	0800d09b 	.word	0x0800d09b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07c:	f7fc f98e 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 800d080:	61b8      	str	r0, [r7, #24]
        break;
 800d082:	e013      	b.n	800d0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d084:	f7fc f99e 	bl	80093c4 <HAL_RCC_GetPCLK2Freq>
 800d088:	61b8      	str	r0, [r7, #24]
        break;
 800d08a:	e00f      	b.n	800d0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d08c:	4b4b      	ldr	r3, [pc, #300]	@ (800d1bc <UART_SetConfig+0x4c4>)
 800d08e:	61bb      	str	r3, [r7, #24]
        break;
 800d090:	e00c      	b.n	800d0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d092:	f7fc f871 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800d096:	61b8      	str	r0, [r7, #24]
        break;
 800d098:	e008      	b.n	800d0ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d09a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d09e:	61bb      	str	r3, [r7, #24]
        break;
 800d0a0:	e004      	b.n	800d0ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	77bb      	strb	r3, [r7, #30]
        break;
 800d0aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d074      	beq.n	800d19c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d0b2:	69bb      	ldr	r3, [r7, #24]
 800d0b4:	005a      	lsls	r2, r3, #1
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	085b      	lsrs	r3, r3, #1
 800d0bc:	441a      	add	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0c8:	693b      	ldr	r3, [r7, #16]
 800d0ca:	2b0f      	cmp	r3, #15
 800d0cc:	d916      	bls.n	800d0fc <UART_SetConfig+0x404>
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0d4:	d212      	bcs.n	800d0fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f023 030f 	bic.w	r3, r3, #15
 800d0de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	b29a      	uxth	r2, r3
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	89fa      	ldrh	r2, [r7, #14]
 800d0f8:	60da      	str	r2, [r3, #12]
 800d0fa:	e04f      	b.n	800d19c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	77bb      	strb	r3, [r7, #30]
 800d100:	e04c      	b.n	800d19c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d102:	7ffb      	ldrb	r3, [r7, #31]
 800d104:	2b08      	cmp	r3, #8
 800d106:	d828      	bhi.n	800d15a <UART_SetConfig+0x462>
 800d108:	a201      	add	r2, pc, #4	@ (adr r2, 800d110 <UART_SetConfig+0x418>)
 800d10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d10e:	bf00      	nop
 800d110:	0800d135 	.word	0x0800d135
 800d114:	0800d13d 	.word	0x0800d13d
 800d118:	0800d145 	.word	0x0800d145
 800d11c:	0800d15b 	.word	0x0800d15b
 800d120:	0800d14b 	.word	0x0800d14b
 800d124:	0800d15b 	.word	0x0800d15b
 800d128:	0800d15b 	.word	0x0800d15b
 800d12c:	0800d15b 	.word	0x0800d15b
 800d130:	0800d153 	.word	0x0800d153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d134:	f7fc f932 	bl	800939c <HAL_RCC_GetPCLK1Freq>
 800d138:	61b8      	str	r0, [r7, #24]
        break;
 800d13a:	e013      	b.n	800d164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d13c:	f7fc f942 	bl	80093c4 <HAL_RCC_GetPCLK2Freq>
 800d140:	61b8      	str	r0, [r7, #24]
        break;
 800d142:	e00f      	b.n	800d164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d144:	4b1d      	ldr	r3, [pc, #116]	@ (800d1bc <UART_SetConfig+0x4c4>)
 800d146:	61bb      	str	r3, [r7, #24]
        break;
 800d148:	e00c      	b.n	800d164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d14a:	f7fc f815 	bl	8009178 <HAL_RCC_GetSysClockFreq>
 800d14e:	61b8      	str	r0, [r7, #24]
        break;
 800d150:	e008      	b.n	800d164 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d156:	61bb      	str	r3, [r7, #24]
        break;
 800d158:	e004      	b.n	800d164 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d15a:	2300      	movs	r3, #0
 800d15c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	77bb      	strb	r3, [r7, #30]
        break;
 800d162:	bf00      	nop
    }

    if (pclk != 0U)
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d018      	beq.n	800d19c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	085a      	lsrs	r2, r3, #1
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	441a      	add	r2, r3
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	2b0f      	cmp	r3, #15
 800d182:	d909      	bls.n	800d198 <UART_SetConfig+0x4a0>
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d18a:	d205      	bcs.n	800d198 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	b29a      	uxth	r2, r3
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	60da      	str	r2, [r3, #12]
 800d196:	e001      	b.n	800d19c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2200      	movs	r2, #0
 800d1a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800d1a8:	7fbb      	ldrb	r3, [r7, #30]
}
 800d1aa:	4618      	mov	r0, r3
 800d1ac:	3720      	adds	r7, #32
 800d1ae:	46bd      	mov	sp, r7
 800d1b0:	bd80      	pop	{r7, pc}
 800d1b2:	bf00      	nop
 800d1b4:	40007c00 	.word	0x40007c00
 800d1b8:	40023800 	.word	0x40023800
 800d1bc:	00f42400 	.word	0x00f42400

0800d1c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	b083      	sub	sp, #12
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1cc:	f003 0308 	and.w	r3, r3, #8
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00a      	beq.n	800d1ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1ee:	f003 0301 	and.w	r3, r3, #1
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	430a      	orrs	r2, r1
 800d20a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d210:	f003 0302 	and.w	r3, r3, #2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	430a      	orrs	r2, r1
 800d22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d232:	f003 0304 	and.w	r3, r3, #4
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	430a      	orrs	r2, r1
 800d24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d254:	f003 0310 	and.w	r3, r3, #16
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00a      	beq.n	800d272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	689b      	ldr	r3, [r3, #8]
 800d262:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	430a      	orrs	r2, r1
 800d270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00a      	beq.n	800d294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	430a      	orrs	r2, r1
 800d292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d01a      	beq.n	800d2d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2be:	d10a      	bne.n	800d2d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	430a      	orrs	r2, r1
 800d2d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d00a      	beq.n	800d2f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	430a      	orrs	r2, r1
 800d2f6:	605a      	str	r2, [r3, #4]
  }
}
 800d2f8:	bf00      	nop
 800d2fa:	370c      	adds	r7, #12
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b08c      	sub	sp, #48	@ 0x30
 800d308:	af02      	add	r7, sp, #8
 800d30a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d314:	f7f9 fe9e 	bl	8007054 <HAL_GetTick>
 800d318:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 0308 	and.w	r3, r3, #8
 800d324:	2b08      	cmp	r3, #8
 800d326:	d12e      	bne.n	800d386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d328:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d330:	2200      	movs	r2, #0
 800d332:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f000 f83b 	bl	800d3b2 <UART_WaitOnFlagUntilTimeout>
 800d33c:	4603      	mov	r3, r0
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d021      	beq.n	800d386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	e853 3f00 	ldrex	r3, [r3]
 800d34e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d356:	623b      	str	r3, [r7, #32]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	461a      	mov	r2, r3
 800d35e:	6a3b      	ldr	r3, [r7, #32]
 800d360:	61fb      	str	r3, [r7, #28]
 800d362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d364:	69b9      	ldr	r1, [r7, #24]
 800d366:	69fa      	ldr	r2, [r7, #28]
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	617b      	str	r3, [r7, #20]
   return(result);
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e6      	bne.n	800d342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2220      	movs	r2, #32
 800d378:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d382:	2303      	movs	r3, #3
 800d384:	e011      	b.n	800d3aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2220      	movs	r2, #32
 800d38a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2200      	movs	r2, #0
 800d3a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d3a8:	2300      	movs	r3, #0
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3728      	adds	r7, #40	@ 0x28
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b084      	sub	sp, #16
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	60f8      	str	r0, [r7, #12]
 800d3ba:	60b9      	str	r1, [r7, #8]
 800d3bc:	603b      	str	r3, [r7, #0]
 800d3be:	4613      	mov	r3, r2
 800d3c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d3c2:	e04f      	b.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ca:	d04b      	beq.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3cc:	f7f9 fe42 	bl	8007054 <HAL_GetTick>
 800d3d0:	4602      	mov	r2, r0
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	429a      	cmp	r2, r3
 800d3da:	d302      	bcc.n	800d3e2 <UART_WaitOnFlagUntilTimeout+0x30>
 800d3dc:	69bb      	ldr	r3, [r7, #24]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e04e      	b.n	800d484 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f003 0304 	and.w	r3, r3, #4
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d037      	beq.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2b80      	cmp	r3, #128	@ 0x80
 800d3f8:	d034      	beq.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2b40      	cmp	r3, #64	@ 0x40
 800d3fe:	d031      	beq.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	69db      	ldr	r3, [r3, #28]
 800d406:	f003 0308 	and.w	r3, r3, #8
 800d40a:	2b08      	cmp	r3, #8
 800d40c:	d110      	bne.n	800d430 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2208      	movs	r2, #8
 800d414:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d416:	68f8      	ldr	r0, [r7, #12]
 800d418:	f000 f8fe 	bl	800d618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2208      	movs	r2, #8
 800d420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2200      	movs	r2, #0
 800d428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	e029      	b.n	800d484 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d43a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d43e:	d111      	bne.n	800d464 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d448:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f000 f8e4 	bl	800d618 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2220      	movs	r2, #32
 800d454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d460:	2303      	movs	r3, #3
 800d462:	e00f      	b.n	800d484 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	69da      	ldr	r2, [r3, #28]
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	4013      	ands	r3, r2
 800d46e:	68ba      	ldr	r2, [r7, #8]
 800d470:	429a      	cmp	r2, r3
 800d472:	bf0c      	ite	eq
 800d474:	2301      	moveq	r3, #1
 800d476:	2300      	movne	r3, #0
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	461a      	mov	r2, r3
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d0a0      	beq.n	800d3c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}

0800d48c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b096      	sub	sp, #88	@ 0x58
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	4613      	mov	r3, r2
 800d498:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	68ba      	ldr	r2, [r7, #8]
 800d49e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	88fa      	ldrh	r2, [r7, #6]
 800d4a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2222      	movs	r2, #34	@ 0x22
 800d4b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d028      	beq.n	800d512 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800d5c0 <UART_Start_Receive_DMA+0x134>)
 800d4c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4cc:	4a3d      	ldr	r2, [pc, #244]	@ (800d5c4 <UART_Start_Receive_DMA+0x138>)
 800d4ce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4d4:	4a3c      	ldr	r2, [pc, #240]	@ (800d5c8 <UART_Start_Receive_DMA+0x13c>)
 800d4d6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4dc:	2200      	movs	r2, #0
 800d4de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	3324      	adds	r3, #36	@ 0x24
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	88fb      	ldrh	r3, [r7, #6]
 800d4f4:	f7f9 ff6e 	bl	80073d4 <HAL_DMA_Start_IT>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d009      	beq.n	800d512 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2210      	movs	r2, #16
 800d502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	2220      	movs	r2, #32
 800d50a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e051      	b.n	800d5b6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d018      	beq.n	800d54c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d522:	e853 3f00 	ldrex	r3, [r3]
 800d526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d52a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d52e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	461a      	mov	r2, r3
 800d536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d538:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d53a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d53e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d540:	e841 2300 	strex	r3, r2, [r1]
 800d544:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d546:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1e6      	bne.n	800d51a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3308      	adds	r3, #8
 800d552:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d556:	e853 3f00 	ldrex	r3, [r3]
 800d55a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	f043 0301 	orr.w	r3, r3, #1
 800d562:	653b      	str	r3, [r7, #80]	@ 0x50
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3308      	adds	r3, #8
 800d56a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d56c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d56e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d572:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e5      	bne.n	800d54c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	3308      	adds	r3, #8
 800d586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	e853 3f00 	ldrex	r3, [r3]
 800d58e:	613b      	str	r3, [r7, #16]
   return(result);
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	3308      	adds	r3, #8
 800d59e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5a0:	623a      	str	r2, [r7, #32]
 800d5a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a4:	69f9      	ldr	r1, [r7, #28]
 800d5a6:	6a3a      	ldr	r2, [r7, #32]
 800d5a8:	e841 2300 	strex	r3, r2, [r1]
 800d5ac:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5ae:	69bb      	ldr	r3, [r7, #24]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d1e5      	bne.n	800d580 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3758      	adds	r7, #88	@ 0x58
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	0800d793 	.word	0x0800d793
 800d5c4:	0800d8bb 	.word	0x0800d8bb
 800d5c8:	0800d8f9 	.word	0x0800d8f9

0800d5cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b089      	sub	sp, #36	@ 0x24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	e853 3f00 	ldrex	r3, [r3]
 800d5e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d5e8:	61fb      	str	r3, [r7, #28]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	69fb      	ldr	r3, [r7, #28]
 800d5f2:	61bb      	str	r3, [r7, #24]
 800d5f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5f6:	6979      	ldr	r1, [r7, #20]
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	e841 2300 	strex	r3, r2, [r1]
 800d5fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d600:	693b      	ldr	r3, [r7, #16]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1e6      	bne.n	800d5d4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2220      	movs	r2, #32
 800d60a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d60c:	bf00      	nop
 800d60e:	3724      	adds	r7, #36	@ 0x24
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d618:	b480      	push	{r7}
 800d61a:	b095      	sub	sp, #84	@ 0x54
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d628:	e853 3f00 	ldrex	r3, [r3]
 800d62c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d62e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	461a      	mov	r2, r3
 800d63c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d640:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d642:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d644:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d646:	e841 2300 	strex	r3, r2, [r1]
 800d64a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1e6      	bne.n	800d620 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	3308      	adds	r3, #8
 800d658:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65a:	6a3b      	ldr	r3, [r7, #32]
 800d65c:	e853 3f00 	ldrex	r3, [r3]
 800d660:	61fb      	str	r3, [r7, #28]
   return(result);
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	f023 0301 	bic.w	r3, r3, #1
 800d668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	3308      	adds	r3, #8
 800d670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d672:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d674:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d676:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d67a:	e841 2300 	strex	r3, r2, [r1]
 800d67e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d682:	2b00      	cmp	r3, #0
 800d684:	d1e5      	bne.n	800d652 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d118      	bne.n	800d6c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	e853 3f00 	ldrex	r3, [r3]
 800d69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	f023 0310 	bic.w	r3, r3, #16
 800d6a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ac:	61bb      	str	r3, [r7, #24]
 800d6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b0:	6979      	ldr	r1, [r7, #20]
 800d6b2:	69ba      	ldr	r2, [r7, #24]
 800d6b4:	e841 2300 	strex	r3, r2, [r1]
 800d6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d1e6      	bne.n	800d68e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2220      	movs	r2, #32
 800d6c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d6d4:	bf00      	nop
 800d6d6:	3754      	adds	r7, #84	@ 0x54
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b090      	sub	sp, #64	@ 0x40
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	69db      	ldr	r3, [r3, #28]
 800d6f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6f6:	d037      	beq.n	800d768 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d6f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	623b      	str	r3, [r7, #32]
   return(result);
 800d710:	6a3b      	ldr	r3, [r7, #32]
 800d712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d716:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3308      	adds	r3, #8
 800d71e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d720:	633a      	str	r2, [r7, #48]	@ 0x30
 800d722:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d728:	e841 2300 	strex	r3, r2, [r1]
 800d72c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1e5      	bne.n	800d700 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	e853 3f00 	ldrex	r3, [r3]
 800d740:	60fb      	str	r3, [r7, #12]
   return(result);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d748:	637b      	str	r3, [r7, #52]	@ 0x34
 800d74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	461a      	mov	r2, r3
 800d750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d752:	61fb      	str	r3, [r7, #28]
 800d754:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d756:	69b9      	ldr	r1, [r7, #24]
 800d758:	69fa      	ldr	r2, [r7, #28]
 800d75a:	e841 2300 	strex	r3, r2, [r1]
 800d75e:	617b      	str	r3, [r7, #20]
   return(result);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d1e6      	bne.n	800d734 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d766:	e002      	b.n	800d76e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d768:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d76a:	f7ff fa91 	bl	800cc90 <HAL_UART_TxCpltCallback>
}
 800d76e:	bf00      	nop
 800d770:	3740      	adds	r7, #64	@ 0x40
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d776:	b580      	push	{r7, lr}
 800d778:	b084      	sub	sp, #16
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d782:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d784:	68f8      	ldr	r0, [r7, #12]
 800d786:	f7ff fa8d 	bl	800cca4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d78a:	bf00      	nop
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}

0800d792 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d792:	b580      	push	{r7, lr}
 800d794:	b09c      	sub	sp, #112	@ 0x70
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d79e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	69db      	ldr	r3, [r3, #28]
 800d7a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7a8:	d071      	beq.n	800d88e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d7aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7ba:	e853 3f00 	ldrex	r3, [r3]
 800d7be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d7c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d7c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d7d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d7d2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7d6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7d8:	e841 2300 	strex	r3, r2, [r1]
 800d7dc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1e6      	bne.n	800d7b2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	3308      	adds	r3, #8
 800d7ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ee:	e853 3f00 	ldrex	r3, [r3]
 800d7f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f6:	f023 0301 	bic.w	r3, r3, #1
 800d7fa:	667b      	str	r3, [r7, #100]	@ 0x64
 800d7fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	3308      	adds	r3, #8
 800d802:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d804:	647a      	str	r2, [r7, #68]	@ 0x44
 800d806:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d808:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d80a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d80c:	e841 2300 	strex	r3, r2, [r1]
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e5      	bne.n	800d7e4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	3308      	adds	r3, #8
 800d81e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d822:	e853 3f00 	ldrex	r3, [r3]
 800d826:	623b      	str	r3, [r7, #32]
   return(result);
 800d828:	6a3b      	ldr	r3, [r7, #32]
 800d82a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d82e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d830:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	3308      	adds	r3, #8
 800d836:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d838:	633a      	str	r2, [r7, #48]	@ 0x30
 800d83a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d840:	e841 2300 	strex	r3, r2, [r1]
 800d844:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d1e5      	bne.n	800d818 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d84c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d84e:	2220      	movs	r2, #32
 800d850:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d118      	bne.n	800d88e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d85c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	e853 3f00 	ldrex	r3, [r3]
 800d868:	60fb      	str	r3, [r7, #12]
   return(result);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f023 0310 	bic.w	r3, r3, #16
 800d870:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d872:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	461a      	mov	r2, r3
 800d878:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d87a:	61fb      	str	r3, [r7, #28]
 800d87c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87e:	69b9      	ldr	r1, [r7, #24]
 800d880:	69fa      	ldr	r2, [r7, #28]
 800d882:	e841 2300 	strex	r3, r2, [r1]
 800d886:	617b      	str	r3, [r7, #20]
   return(result);
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d1e6      	bne.n	800d85c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d88e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d890:	2200      	movs	r2, #0
 800d892:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d107      	bne.n	800d8ac <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d89c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d89e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d8a6:	f7ff fa1b 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8aa:	e002      	b.n	800d8b2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d8ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d8ae:	f7f5 ffeb 	bl	8003888 <HAL_UART_RxCpltCallback>
}
 800d8b2:	bf00      	nop
 800d8b4:	3770      	adds	r7, #112	@ 0x70
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d109      	bne.n	800d8ea <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d8dc:	085b      	lsrs	r3, r3, #1
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	68f8      	ldr	r0, [r7, #12]
 800d8e4:	f7ff f9fc 	bl	800cce0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d8e8:	e002      	b.n	800d8f0 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	f7ff f9e4 	bl	800ccb8 <HAL_UART_RxHalfCpltCallback>
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}

0800d8f8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d904:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d90a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d912:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d91e:	2b80      	cmp	r3, #128	@ 0x80
 800d920:	d109      	bne.n	800d936 <UART_DMAError+0x3e>
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	2b21      	cmp	r3, #33	@ 0x21
 800d926:	d106      	bne.n	800d936 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d930:	6978      	ldr	r0, [r7, #20]
 800d932:	f7ff fe4b 	bl	800d5cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d940:	2b40      	cmp	r3, #64	@ 0x40
 800d942:	d109      	bne.n	800d958 <UART_DMAError+0x60>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b22      	cmp	r3, #34	@ 0x22
 800d948:	d106      	bne.n	800d958 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	2200      	movs	r2, #0
 800d94e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d952:	6978      	ldr	r0, [r7, #20]
 800d954:	f7ff fe60 	bl	800d618 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d95e:	f043 0210 	orr.w	r2, r3, #16
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d968:	6978      	ldr	r0, [r7, #20]
 800d96a:	f7ff f9af 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d96e:	bf00      	nop
 800d970:	3718      	adds	r7, #24
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}

0800d976 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b084      	sub	sp, #16
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d982:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	2200      	movs	r2, #0
 800d988:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f7ff f999 	bl	800cccc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d99a:	bf00      	nop
 800d99c:	3710      	adds	r7, #16
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b088      	sub	sp, #32
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	e853 3f00 	ldrex	r3, [r3]
 800d9b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d9be:	61fb      	str	r3, [r7, #28]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	61bb      	str	r3, [r7, #24]
 800d9ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9cc:	6979      	ldr	r1, [r7, #20]
 800d9ce:	69ba      	ldr	r2, [r7, #24]
 800d9d0:	e841 2300 	strex	r3, r2, [r1]
 800d9d4:	613b      	str	r3, [r7, #16]
   return(result);
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d1e6      	bne.n	800d9aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2220      	movs	r2, #32
 800d9e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d9e8:	6878      	ldr	r0, [r7, #4]
 800d9ea:	f7ff f951 	bl	800cc90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9ee:	bf00      	nop
 800d9f0:	3720      	adds	r7, #32
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
	...

0800d9f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d9f8:	b084      	sub	sp, #16
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b084      	sub	sp, #16
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
 800da02:	f107 001c 	add.w	r0, r7, #28
 800da06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d121      	bne.n	800da56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	68da      	ldr	r2, [r3, #12]
 800da22:	4b21      	ldr	r3, [pc, #132]	@ (800daa8 <USB_CoreInit+0xb0>)
 800da24:	4013      	ands	r3, r2
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68db      	ldr	r3, [r3, #12]
 800da2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d105      	bne.n	800da4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68db      	ldr	r3, [r3, #12]
 800da42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa92 	bl	800df74 <USB_CoreReset>
 800da50:	4603      	mov	r3, r0
 800da52:	73fb      	strb	r3, [r7, #15]
 800da54:	e010      	b.n	800da78 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	68db      	ldr	r3, [r3, #12]
 800da5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fa86 	bl	800df74 <USB_CoreReset>
 800da68:	4603      	mov	r3, r0
 800da6a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800da78:	7fbb      	ldrb	r3, [r7, #30]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d10b      	bne.n	800da96 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	f043 0206 	orr.w	r2, r3, #6
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	689b      	ldr	r3, [r3, #8]
 800da8e:	f043 0220 	orr.w	r2, r3, #32
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800daa2:	b004      	add	sp, #16
 800daa4:	4770      	bx	lr
 800daa6:	bf00      	nop
 800daa8:	ffbdffbf 	.word	0xffbdffbf

0800daac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	689b      	ldr	r3, [r3, #8]
 800dab8:	f023 0201 	bic.w	r2, r3, #1
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	370c      	adds	r7, #12
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
 800dad6:	460b      	mov	r3, r1
 800dad8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dada:	2300      	movs	r3, #0
 800dadc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	68db      	ldr	r3, [r3, #12]
 800dae2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800daea:	78fb      	ldrb	r3, [r7, #3]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d115      	bne.n	800db1c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dafc:	200a      	movs	r0, #10
 800dafe:	f7f9 fab5 	bl	800706c <HAL_Delay>
      ms += 10U;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	330a      	adds	r3, #10
 800db06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 fa25 	bl	800df58 <USB_GetMode>
 800db0e:	4603      	mov	r3, r0
 800db10:	2b01      	cmp	r3, #1
 800db12:	d01e      	beq.n	800db52 <USB_SetCurrentMode+0x84>
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2bc7      	cmp	r3, #199	@ 0xc7
 800db18:	d9f0      	bls.n	800dafc <USB_SetCurrentMode+0x2e>
 800db1a:	e01a      	b.n	800db52 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db1c:	78fb      	ldrb	r3, [r7, #3]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d115      	bne.n	800db4e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	68db      	ldr	r3, [r3, #12]
 800db26:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800db2e:	200a      	movs	r0, #10
 800db30:	f7f9 fa9c 	bl	800706c <HAL_Delay>
      ms += 10U;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	330a      	adds	r3, #10
 800db38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fa0c 	bl	800df58 <USB_GetMode>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d005      	beq.n	800db52 <USB_SetCurrentMode+0x84>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	2bc7      	cmp	r3, #199	@ 0xc7
 800db4a:	d9f0      	bls.n	800db2e <USB_SetCurrentMode+0x60>
 800db4c:	e001      	b.n	800db52 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	e005      	b.n	800db5e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	2bc8      	cmp	r3, #200	@ 0xc8
 800db56:	d101      	bne.n	800db5c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	e000      	b.n	800db5e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800db5c:	2300      	movs	r3, #0
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
	...

0800db68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db68:	b084      	sub	sp, #16
 800db6a:	b580      	push	{r7, lr}
 800db6c:	b086      	sub	sp, #24
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
 800db72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800db76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db82:	2300      	movs	r3, #0
 800db84:	613b      	str	r3, [r7, #16]
 800db86:	e009      	b.n	800db9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	693b      	ldr	r3, [r7, #16]
 800db8c:	3340      	adds	r3, #64	@ 0x40
 800db8e:	009b      	lsls	r3, r3, #2
 800db90:	4413      	add	r3, r2
 800db92:	2200      	movs	r2, #0
 800db94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	3301      	adds	r3, #1
 800db9a:	613b      	str	r3, [r7, #16]
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b0e      	cmp	r3, #14
 800dba0:	d9f2      	bls.n	800db88 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dba2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d11c      	bne.n	800dbe4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	68fa      	ldr	r2, [r7, #12]
 800dbb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbb8:	f043 0302 	orr.w	r3, r3, #2
 800dbbc:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbc2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	e005      	b.n	800dbf0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dbf6:	461a      	mov	r2, r3
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbfc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	d10d      	bne.n	800dc20 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d104      	bne.n	800dc16 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f968 	bl	800dee4 <USB_SetDevSpeed>
 800dc14:	e008      	b.n	800dc28 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dc16:	2101      	movs	r1, #1
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f963 	bl	800dee4 <USB_SetDevSpeed>
 800dc1e:	e003      	b.n	800dc28 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dc20:	2103      	movs	r1, #3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f000 f95e 	bl	800dee4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dc28:	2110      	movs	r1, #16
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 f8fa 	bl	800de24 <USB_FlushTxFifo>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d001      	beq.n	800dc3a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f924 	bl	800de88 <USB_FlushRxFifo>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc50:	461a      	mov	r2, r3
 800dc52:	2300      	movs	r3, #0
 800dc54:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	2300      	movs	r3, #0
 800dc60:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dc68:	461a      	mov	r2, r3
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc6e:	2300      	movs	r3, #0
 800dc70:	613b      	str	r3, [r7, #16]
 800dc72:	e043      	b.n	800dcfc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	015a      	lsls	r2, r3, #5
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	4413      	add	r3, r2
 800dc7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc8a:	d118      	bne.n	800dcbe <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dc8c:	693b      	ldr	r3, [r7, #16]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d10a      	bne.n	800dca8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	015a      	lsls	r2, r3, #5
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	4413      	add	r3, r2
 800dc9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dca4:	6013      	str	r3, [r2, #0]
 800dca6:	e013      	b.n	800dcd0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	015a      	lsls	r2, r3, #5
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	4413      	add	r3, r2
 800dcb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcb4:	461a      	mov	r2, r3
 800dcb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	e008      	b.n	800dcd0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	015a      	lsls	r2, r3, #5
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcca:	461a      	mov	r2, r3
 800dccc:	2300      	movs	r3, #0
 800dcce:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	015a      	lsls	r2, r3, #5
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcdc:	461a      	mov	r2, r3
 800dcde:	2300      	movs	r3, #0
 800dce0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	015a      	lsls	r2, r3, #5
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	4413      	add	r3, r2
 800dcea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dcee:	461a      	mov	r2, r3
 800dcf0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dcf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	613b      	str	r3, [r7, #16]
 800dcfc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd00:	461a      	mov	r2, r3
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	4293      	cmp	r3, r2
 800dd06:	d3b5      	bcc.n	800dc74 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	613b      	str	r3, [r7, #16]
 800dd0c:	e043      	b.n	800dd96 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd0e:	693b      	ldr	r3, [r7, #16]
 800dd10:	015a      	lsls	r2, r3, #5
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	4413      	add	r3, r2
 800dd16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd24:	d118      	bne.n	800dd58 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	015a      	lsls	r2, r3, #5
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	4413      	add	r3, r2
 800dd34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd38:	461a      	mov	r2, r3
 800dd3a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	e013      	b.n	800dd6a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	015a      	lsls	r2, r3, #5
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	4413      	add	r3, r2
 800dd4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800dd54:	6013      	str	r3, [r2, #0]
 800dd56:	e008      	b.n	800dd6a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	015a      	lsls	r2, r3, #5
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	4413      	add	r3, r2
 800dd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd64:	461a      	mov	r2, r3
 800dd66:	2300      	movs	r3, #0
 800dd68:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	015a      	lsls	r2, r3, #5
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	4413      	add	r3, r2
 800dd72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd76:	461a      	mov	r2, r3
 800dd78:	2300      	movs	r3, #0
 800dd7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	015a      	lsls	r2, r3, #5
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	4413      	add	r3, r2
 800dd84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd88:	461a      	mov	r2, r3
 800dd8a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dd8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	3301      	adds	r3, #1
 800dd94:	613b      	str	r3, [r7, #16]
 800dd96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d3b5      	bcc.n	800dd0e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ddb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ddb4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ddc2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ddc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d105      	bne.n	800ddd8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	f043 0210 	orr.w	r2, r3, #16
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	699a      	ldr	r2, [r3, #24]
 800dddc:	4b0f      	ldr	r3, [pc, #60]	@ (800de1c <USB_DevInit+0x2b4>)
 800ddde:	4313      	orrs	r3, r2
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dde4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d005      	beq.n	800ddf8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	f043 0208 	orr.w	r2, r3, #8
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ddf8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d105      	bne.n	800de0c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	699a      	ldr	r2, [r3, #24]
 800de04:	4b06      	ldr	r3, [pc, #24]	@ (800de20 <USB_DevInit+0x2b8>)
 800de06:	4313      	orrs	r3, r2
 800de08:	687a      	ldr	r2, [r7, #4]
 800de0a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3718      	adds	r7, #24
 800de12:	46bd      	mov	sp, r7
 800de14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de18:	b004      	add	sp, #16
 800de1a:	4770      	bx	lr
 800de1c:	803c3800 	.word	0x803c3800
 800de20:	40000004 	.word	0x40000004

0800de24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800de2e:	2300      	movs	r3, #0
 800de30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	3301      	adds	r3, #1
 800de36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de3e:	d901      	bls.n	800de44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800de40:	2303      	movs	r3, #3
 800de42:	e01b      	b.n	800de7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	691b      	ldr	r3, [r3, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	daf2      	bge.n	800de32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800de4c:	2300      	movs	r3, #0
 800de4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	019b      	lsls	r3, r3, #6
 800de54:	f043 0220 	orr.w	r2, r3, #32
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	3301      	adds	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800de68:	d901      	bls.n	800de6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800de6a:	2303      	movs	r3, #3
 800de6c:	e006      	b.n	800de7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	f003 0320 	and.w	r3, r3, #32
 800de76:	2b20      	cmp	r3, #32
 800de78:	d0f0      	beq.n	800de5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3714      	adds	r7, #20
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	3301      	adds	r3, #1
 800de98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dea0:	d901      	bls.n	800dea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dea2:	2303      	movs	r3, #3
 800dea4:	e018      	b.n	800ded8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	daf2      	bge.n	800de94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800deae:	2300      	movs	r3, #0
 800deb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2210      	movs	r2, #16
 800deb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dec4:	d901      	bls.n	800deca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dec6:	2303      	movs	r3, #3
 800dec8:	e006      	b.n	800ded8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	691b      	ldr	r3, [r3, #16]
 800dece:	f003 0310 	and.w	r3, r3, #16
 800ded2:	2b10      	cmp	r3, #16
 800ded4:	d0f0      	beq.n	800deb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3714      	adds	r7, #20
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr

0800dee4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dee4:	b480      	push	{r7}
 800dee6:	b085      	sub	sp, #20
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	460b      	mov	r3, r1
 800deee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800defa:	681a      	ldr	r2, [r3, #0]
 800defc:	78fb      	ldrb	r3, [r7, #3]
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800df04:	4313      	orrs	r3, r2
 800df06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3714      	adds	r7, #20
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800df16:	b480      	push	{r7}
 800df18:	b085      	sub	sp, #20
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800df30:	f023 0303 	bic.w	r3, r3, #3
 800df34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	68fa      	ldr	r2, [r7, #12]
 800df40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800df44:	f043 0302 	orr.w	r3, r3, #2
 800df48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	695b      	ldr	r3, [r3, #20]
 800df64:	f003 0301 	and.w	r3, r3, #1
}
 800df68:	4618      	mov	r0, r3
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df7c:	2300      	movs	r3, #0
 800df7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	3301      	adds	r3, #1
 800df84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800df8c:	d901      	bls.n	800df92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800df8e:	2303      	movs	r3, #3
 800df90:	e01b      	b.n	800dfca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	691b      	ldr	r3, [r3, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	daf2      	bge.n	800df80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df9a:	2300      	movs	r3, #0
 800df9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	691b      	ldr	r3, [r3, #16]
 800dfa2:	f043 0201 	orr.w	r2, r3, #1
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	3301      	adds	r3, #1
 800dfae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dfb6:	d901      	bls.n	800dfbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dfb8:	2303      	movs	r3, #3
 800dfba:	e006      	b.n	800dfca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	2b01      	cmp	r3, #1
 800dfc6:	d0f0      	beq.n	800dfaa <USB_CoreReset+0x36>

  return HAL_OK;
 800dfc8:	2300      	movs	r3, #0
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3714      	adds	r7, #20
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd4:	4770      	bx	lr
	...

0800dfd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800dfdc:	4904      	ldr	r1, [pc, #16]	@ (800dff0 <MX_FATFS_Init+0x18>)
 800dfde:	4805      	ldr	r0, [pc, #20]	@ (800dff4 <MX_FATFS_Init+0x1c>)
 800dfe0:	f004 f97a 	bl	80122d8 <FATFS_LinkDriver>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	4b03      	ldr	r3, [pc, #12]	@ (800dff8 <MX_FATFS_Init+0x20>)
 800dfea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dfec:	bf00      	nop
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	2000c2b4 	.word	0x2000c2b4
 800dff4:	20000060 	.word	0x20000060
 800dff8:	2000c2b0 	.word	0x2000c2b0

0800dffc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dffc:	b480      	push	{r7}
 800dffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800e000:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800e002:	4618      	mov	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00a:	4770      	bx	lr

0800e00c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b082      	sub	sp, #8
 800e010:	af00      	add	r7, sp, #0
 800e012:	4603      	mov	r3, r0
 800e014:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800e016:	79fb      	ldrb	r3, [r7, #7]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f9d7 	bl	800e3cc <USER_SPI_initialize>
 800e01e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800e032:	79fb      	ldrb	r3, [r7, #7]
 800e034:	4618      	mov	r0, r3
 800e036:	f000 fabd 	bl	800e5b4 <USER_SPI_status>
 800e03a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60b9      	str	r1, [r7, #8]
 800e04c:	607a      	str	r2, [r7, #4]
 800e04e:	603b      	str	r3, [r7, #0]
 800e050:	4603      	mov	r3, r0
 800e052:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800e054:	7bf8      	ldrb	r0, [r7, #15]
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	68b9      	ldr	r1, [r7, #8]
 800e05c:	f000 fac0 	bl	800e5e0 <USER_SPI_read>
 800e060:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800e062:	4618      	mov	r0, r3
 800e064:	3710      	adds	r7, #16
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}

0800e06a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e06a:	b580      	push	{r7, lr}
 800e06c:	b084      	sub	sp, #16
 800e06e:	af00      	add	r7, sp, #0
 800e070:	60b9      	str	r1, [r7, #8]
 800e072:	607a      	str	r2, [r7, #4]
 800e074:	603b      	str	r3, [r7, #0]
 800e076:	4603      	mov	r3, r0
 800e078:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800e07a:	7bf8      	ldrb	r0, [r7, #15]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	68b9      	ldr	r1, [r7, #8]
 800e082:	f000 fb13 	bl	800e6ac <USER_SPI_write>
 800e086:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3710      	adds	r7, #16
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	4603      	mov	r3, r0
 800e098:	603a      	str	r2, [r7, #0]
 800e09a:	71fb      	strb	r3, [r7, #7]
 800e09c:	460b      	mov	r3, r1
 800e09e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800e0a0:	79b9      	ldrb	r1, [r7, #6]
 800e0a2:	79fb      	ldrb	r3, [r7, #7]
 800e0a4:	683a      	ldr	r2, [r7, #0]
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f000 fb7c 	bl	800e7a4 <USER_SPI_ioctl>
 800e0ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}
	...

0800e0b8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800e0c0:	f7f8 ffc8 	bl	8007054 <HAL_GetTick>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	4a04      	ldr	r2, [pc, #16]	@ (800e0d8 <SPI_Timer_On+0x20>)
 800e0c8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800e0ca:	4a04      	ldr	r2, [pc, #16]	@ (800e0dc <SPI_Timer_On+0x24>)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6013      	str	r3, [r2, #0]
}
 800e0d0:	bf00      	nop
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	2000c2c0 	.word	0x2000c2c0
 800e0dc:	2000c2c4 	.word	0x2000c2c4

0800e0e0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800e0e4:	f7f8 ffb6 	bl	8007054 <HAL_GetTick>
 800e0e8:	4602      	mov	r2, r0
 800e0ea:	4b06      	ldr	r3, [pc, #24]	@ (800e104 <SPI_Timer_Status+0x24>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	1ad2      	subs	r2, r2, r3
 800e0f0:	4b05      	ldr	r3, [pc, #20]	@ (800e108 <SPI_Timer_Status+0x28>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	bf34      	ite	cc
 800e0f8:	2301      	movcc	r3, #1
 800e0fa:	2300      	movcs	r3, #0
 800e0fc:	b2db      	uxtb	r3, r3
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	bd80      	pop	{r7, pc}
 800e102:	bf00      	nop
 800e104:	2000c2c0 	.word	0x2000c2c0
 800e108:	2000c2c4 	.word	0x2000c2c4

0800e10c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af02      	add	r7, sp, #8
 800e112:	4603      	mov	r3, r0
 800e114:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800e116:	f107 020f 	add.w	r2, r7, #15
 800e11a:	1df9      	adds	r1, r7, #7
 800e11c:	2332      	movs	r3, #50	@ 0x32
 800e11e:	9300      	str	r3, [sp, #0]
 800e120:	2301      	movs	r3, #1
 800e122:	4804      	ldr	r0, [pc, #16]	@ (800e134 <xchg_spi+0x28>)
 800e124:	f7fb ffa4 	bl	800a070 <HAL_SPI_TransmitReceive>
    return rxDat;
 800e128:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	2000b2b8 	.word	0x2000b2b8

0800e138 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800e142:	2300      	movs	r3, #0
 800e144:	60fb      	str	r3, [r7, #12]
 800e146:	e00a      	b.n	800e15e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	18d4      	adds	r4, r2, r3
 800e14e:	20ff      	movs	r0, #255	@ 0xff
 800e150:	f7ff ffdc 	bl	800e10c <xchg_spi>
 800e154:	4603      	mov	r3, r0
 800e156:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
 800e15e:	68fa      	ldr	r2, [r7, #12]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	429a      	cmp	r2, r3
 800e164:	d3f0      	bcc.n	800e148 <rcvr_spi_multi+0x10>
	}
}
 800e166:	bf00      	nop
 800e168:	bf00      	nop
 800e16a:	3714      	adds	r7, #20
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd90      	pop	{r4, r7, pc}

0800e170 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	f04f 33ff 	mov.w	r3, #4294967295
 800e182:	6879      	ldr	r1, [r7, #4]
 800e184:	4803      	ldr	r0, [pc, #12]	@ (800e194 <xmit_spi_multi+0x24>)
 800e186:	f7fb fdfe 	bl	8009d86 <HAL_SPI_Transmit>
}
 800e18a:	bf00      	nop
 800e18c:	3708      	adds	r7, #8
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	2000b2b8 	.word	0x2000b2b8

0800e198 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800e1a0:	f7f8 ff58 	bl	8007054 <HAL_GetTick>
 800e1a4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800e1aa:	20ff      	movs	r0, #255	@ 0xff
 800e1ac:	f7ff ffae 	bl	800e10c <xchg_spi>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800e1b4:	7bfb      	ldrb	r3, [r7, #15]
 800e1b6:	2bff      	cmp	r3, #255	@ 0xff
 800e1b8:	d007      	beq.n	800e1ca <wait_ready+0x32>
 800e1ba:	f7f8 ff4b 	bl	8007054 <HAL_GetTick>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	693a      	ldr	r2, [r7, #16]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d8ef      	bhi.n	800e1aa <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800e1ca:	7bfb      	ldrb	r3, [r7, #15]
 800e1cc:	2bff      	cmp	r3, #255	@ 0xff
 800e1ce:	bf0c      	ite	eq
 800e1d0:	2301      	moveq	r3, #1
 800e1d2:	2300      	movne	r3, #0
 800e1d4:	b2db      	uxtb	r3, r3
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e1ea:	4804      	ldr	r0, [pc, #16]	@ (800e1fc <despiselect+0x1c>)
 800e1ec:	f7f9 fe12 	bl	8007e14 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800e1f0:	20ff      	movs	r0, #255	@ 0xff
 800e1f2:	f7ff ff8b 	bl	800e10c <xchg_spi>

}
 800e1f6:	bf00      	nop
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	40020400 	.word	0x40020400

0800e200 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800e200:	b580      	push	{r7, lr}
 800e202:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800e204:	2200      	movs	r2, #0
 800e206:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e20a:	480a      	ldr	r0, [pc, #40]	@ (800e234 <spiselect+0x34>)
 800e20c:	f7f9 fe02 	bl	8007e14 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800e210:	20ff      	movs	r0, #255	@ 0xff
 800e212:	f7ff ff7b 	bl	800e10c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800e216:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e21a:	f7ff ffbd 	bl	800e198 <wait_ready>
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <spiselect+0x28>
 800e224:	2301      	movs	r3, #1
 800e226:	e002      	b.n	800e22e <spiselect+0x2e>

	despiselect();
 800e228:	f7ff ffda 	bl	800e1e0 <despiselect>
	return 0;	/* Timeout */
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	40020400 	.word	0x40020400

0800e238 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800e242:	20c8      	movs	r0, #200	@ 0xc8
 800e244:	f7ff ff38 	bl	800e0b8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800e248:	20ff      	movs	r0, #255	@ 0xff
 800e24a:	f7ff ff5f 	bl	800e10c <xchg_spi>
 800e24e:	4603      	mov	r3, r0
 800e250:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	2bff      	cmp	r3, #255	@ 0xff
 800e256:	d104      	bne.n	800e262 <rcvr_datablock+0x2a>
 800e258:	f7ff ff42 	bl	800e0e0 <SPI_Timer_Status>
 800e25c:	4603      	mov	r3, r0
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d1f2      	bne.n	800e248 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800e262:	7bfb      	ldrb	r3, [r7, #15]
 800e264:	2bfe      	cmp	r3, #254	@ 0xfe
 800e266:	d001      	beq.n	800e26c <rcvr_datablock+0x34>
 800e268:	2300      	movs	r3, #0
 800e26a:	e00a      	b.n	800e282 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7ff ff62 	bl	800e138 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800e274:	20ff      	movs	r0, #255	@ 0xff
 800e276:	f7ff ff49 	bl	800e10c <xchg_spi>
 800e27a:	20ff      	movs	r0, #255	@ 0xff
 800e27c:	f7ff ff46 	bl	800e10c <xchg_spi>

	return 1;						/* Function succeeded */
 800e280:	2301      	movs	r3, #1
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b084      	sub	sp, #16
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	460b      	mov	r3, r1
 800e294:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800e296:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e29a:	f7ff ff7d 	bl	800e198 <wait_ready>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <xmit_datablock+0x1e>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	e01e      	b.n	800e2e6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800e2a8:	78fb      	ldrb	r3, [r7, #3]
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f7ff ff2e 	bl	800e10c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800e2b0:	78fb      	ldrb	r3, [r7, #3]
 800e2b2:	2bfd      	cmp	r3, #253	@ 0xfd
 800e2b4:	d016      	beq.n	800e2e4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800e2b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7ff ff58 	bl	800e170 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800e2c0:	20ff      	movs	r0, #255	@ 0xff
 800e2c2:	f7ff ff23 	bl	800e10c <xchg_spi>
 800e2c6:	20ff      	movs	r0, #255	@ 0xff
 800e2c8:	f7ff ff20 	bl	800e10c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800e2cc:	20ff      	movs	r0, #255	@ 0xff
 800e2ce:	f7ff ff1d 	bl	800e10c <xchg_spi>
 800e2d2:	4603      	mov	r3, r0
 800e2d4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
 800e2d8:	f003 031f 	and.w	r3, r3, #31
 800e2dc:	2b05      	cmp	r3, #5
 800e2de:	d001      	beq.n	800e2e4 <xmit_datablock+0x5a>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	e000      	b.n	800e2e6 <xmit_datablock+0x5c>
	}
	return 1;
 800e2e4:	2301      	movs	r3, #1
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	6039      	str	r1, [r7, #0]
 800e2f8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800e2fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	da0e      	bge.n	800e320 <send_cmd+0x32>
		cmd &= 0x7F;
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e308:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800e30a:	2100      	movs	r1, #0
 800e30c:	2037      	movs	r0, #55	@ 0x37
 800e30e:	f7ff ffee 	bl	800e2ee <send_cmd>
 800e312:	4603      	mov	r3, r0
 800e314:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800e316:	7bbb      	ldrb	r3, [r7, #14]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d901      	bls.n	800e320 <send_cmd+0x32>
 800e31c:	7bbb      	ldrb	r3, [r7, #14]
 800e31e:	e051      	b.n	800e3c4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800e320:	79fb      	ldrb	r3, [r7, #7]
 800e322:	2b0c      	cmp	r3, #12
 800e324:	d008      	beq.n	800e338 <send_cmd+0x4a>
		despiselect();
 800e326:	f7ff ff5b 	bl	800e1e0 <despiselect>
		if (!spiselect()) return 0xFF;
 800e32a:	f7ff ff69 	bl	800e200 <spiselect>
 800e32e:	4603      	mov	r3, r0
 800e330:	2b00      	cmp	r3, #0
 800e332:	d101      	bne.n	800e338 <send_cmd+0x4a>
 800e334:	23ff      	movs	r3, #255	@ 0xff
 800e336:	e045      	b.n	800e3c4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e33e:	b2db      	uxtb	r3, r3
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff fee3 	bl	800e10c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	0e1b      	lsrs	r3, r3, #24
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	4618      	mov	r0, r3
 800e34e:	f7ff fedd 	bl	800e10c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	0c1b      	lsrs	r3, r3, #16
 800e356:	b2db      	uxtb	r3, r3
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff fed7 	bl	800e10c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	0a1b      	lsrs	r3, r3, #8
 800e362:	b2db      	uxtb	r3, r3
 800e364:	4618      	mov	r0, r3
 800e366:	f7ff fed1 	bl	800e10c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	b2db      	uxtb	r3, r3
 800e36e:	4618      	mov	r0, r3
 800e370:	f7ff fecc 	bl	800e10c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800e374:	2301      	movs	r3, #1
 800e376:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800e378:	79fb      	ldrb	r3, [r7, #7]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d101      	bne.n	800e382 <send_cmd+0x94>
 800e37e:	2395      	movs	r3, #149	@ 0x95
 800e380:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800e382:	79fb      	ldrb	r3, [r7, #7]
 800e384:	2b08      	cmp	r3, #8
 800e386:	d101      	bne.n	800e38c <send_cmd+0x9e>
 800e388:	2387      	movs	r3, #135	@ 0x87
 800e38a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800e38c:	7bfb      	ldrb	r3, [r7, #15]
 800e38e:	4618      	mov	r0, r3
 800e390:	f7ff febc 	bl	800e10c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800e394:	79fb      	ldrb	r3, [r7, #7]
 800e396:	2b0c      	cmp	r3, #12
 800e398:	d102      	bne.n	800e3a0 <send_cmd+0xb2>
 800e39a:	20ff      	movs	r0, #255	@ 0xff
 800e39c:	f7ff feb6 	bl	800e10c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800e3a0:	230a      	movs	r3, #10
 800e3a2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800e3a4:	20ff      	movs	r0, #255	@ 0xff
 800e3a6:	f7ff feb1 	bl	800e10c <xchg_spi>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800e3ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	da05      	bge.n	800e3c2 <send_cmd+0xd4>
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	73fb      	strb	r3, [r7, #15]
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1f0      	bne.n	800e3a4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800e3c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3710      	adds	r7, #16
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}

0800e3cc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e3cc:	b590      	push	{r4, r7, lr}
 800e3ce:	b085      	sub	sp, #20
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <USER_SPI_initialize+0x14>
 800e3dc:	2301      	movs	r3, #1
 800e3de:	e0dc      	b.n	800e59a <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800e3e0:	4b70      	ldr	r3, [pc, #448]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f003 0302 	and.w	r3, r3, #2
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <USER_SPI_initialize+0x2a>
 800e3ee:	4b6d      	ldr	r3, [pc, #436]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b2db      	uxtb	r3, r3
 800e3f4:	e0d1      	b.n	800e59a <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800e3f6:	4b6b      	ldr	r3, [pc, #428]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	4b6a      	ldr	r3, [pc, #424]	@ (800e5a8 <USER_SPI_initialize+0x1dc>)
 800e400:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800e402:	4b6a      	ldr	r3, [pc, #424]	@ (800e5ac <USER_SPI_initialize+0x1e0>)
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e40c:	4b67      	ldr	r3, [pc, #412]	@ (800e5ac <USER_SPI_initialize+0x1e0>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800e414:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800e416:	230a      	movs	r3, #10
 800e418:	73fb      	strb	r3, [r7, #15]
 800e41a:	e005      	b.n	800e428 <USER_SPI_initialize+0x5c>
 800e41c:	20ff      	movs	r0, #255	@ 0xff
 800e41e:	f7ff fe75 	bl	800e10c <xchg_spi>
 800e422:	7bfb      	ldrb	r3, [r7, #15]
 800e424:	3b01      	subs	r3, #1
 800e426:	73fb      	strb	r3, [r7, #15]
 800e428:	7bfb      	ldrb	r3, [r7, #15]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1f6      	bne.n	800e41c <USER_SPI_initialize+0x50>

	ty = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800e432:	2100      	movs	r1, #0
 800e434:	2000      	movs	r0, #0
 800e436:	f7ff ff5a 	bl	800e2ee <send_cmd>
 800e43a:	4603      	mov	r3, r0
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	f040 808b 	bne.w	800e558 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800e442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e446:	f7ff fe37 	bl	800e0b8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800e44a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e44e:	2008      	movs	r0, #8
 800e450:	f7ff ff4d 	bl	800e2ee <send_cmd>
 800e454:	4603      	mov	r3, r0
 800e456:	2b01      	cmp	r3, #1
 800e458:	d151      	bne.n	800e4fe <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800e45a:	2300      	movs	r3, #0
 800e45c:	73fb      	strb	r3, [r7, #15]
 800e45e:	e00d      	b.n	800e47c <USER_SPI_initialize+0xb0>
 800e460:	7bfc      	ldrb	r4, [r7, #15]
 800e462:	20ff      	movs	r0, #255	@ 0xff
 800e464:	f7ff fe52 	bl	800e10c <xchg_spi>
 800e468:	4603      	mov	r3, r0
 800e46a:	461a      	mov	r2, r3
 800e46c:	f104 0310 	add.w	r3, r4, #16
 800e470:	443b      	add	r3, r7
 800e472:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e476:	7bfb      	ldrb	r3, [r7, #15]
 800e478:	3301      	adds	r3, #1
 800e47a:	73fb      	strb	r3, [r7, #15]
 800e47c:	7bfb      	ldrb	r3, [r7, #15]
 800e47e:	2b03      	cmp	r3, #3
 800e480:	d9ee      	bls.n	800e460 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800e482:	7abb      	ldrb	r3, [r7, #10]
 800e484:	2b01      	cmp	r3, #1
 800e486:	d167      	bne.n	800e558 <USER_SPI_initialize+0x18c>
 800e488:	7afb      	ldrb	r3, [r7, #11]
 800e48a:	2baa      	cmp	r3, #170	@ 0xaa
 800e48c:	d164      	bne.n	800e558 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800e48e:	bf00      	nop
 800e490:	f7ff fe26 	bl	800e0e0 <SPI_Timer_Status>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d007      	beq.n	800e4aa <USER_SPI_initialize+0xde>
 800e49a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e49e:	20a9      	movs	r0, #169	@ 0xa9
 800e4a0:	f7ff ff25 	bl	800e2ee <send_cmd>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1f2      	bne.n	800e490 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800e4aa:	f7ff fe19 	bl	800e0e0 <SPI_Timer_Status>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d051      	beq.n	800e558 <USER_SPI_initialize+0x18c>
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	203a      	movs	r0, #58	@ 0x3a
 800e4b8:	f7ff ff19 	bl	800e2ee <send_cmd>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d14a      	bne.n	800e558 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	73fb      	strb	r3, [r7, #15]
 800e4c6:	e00d      	b.n	800e4e4 <USER_SPI_initialize+0x118>
 800e4c8:	7bfc      	ldrb	r4, [r7, #15]
 800e4ca:	20ff      	movs	r0, #255	@ 0xff
 800e4cc:	f7ff fe1e 	bl	800e10c <xchg_spi>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	461a      	mov	r2, r3
 800e4d4:	f104 0310 	add.w	r3, r4, #16
 800e4d8:	443b      	add	r3, r7
 800e4da:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	73fb      	strb	r3, [r7, #15]
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d9ee      	bls.n	800e4c8 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800e4ea:	7a3b      	ldrb	r3, [r7, #8]
 800e4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d001      	beq.n	800e4f8 <USER_SPI_initialize+0x12c>
 800e4f4:	230c      	movs	r3, #12
 800e4f6:	e000      	b.n	800e4fa <USER_SPI_initialize+0x12e>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	737b      	strb	r3, [r7, #13]
 800e4fc:	e02c      	b.n	800e558 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800e4fe:	2100      	movs	r1, #0
 800e500:	20a9      	movs	r0, #169	@ 0xa9
 800e502:	f7ff fef4 	bl	800e2ee <send_cmd>
 800e506:	4603      	mov	r3, r0
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d804      	bhi.n	800e516 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e50c:	2302      	movs	r3, #2
 800e50e:	737b      	strb	r3, [r7, #13]
 800e510:	23a9      	movs	r3, #169	@ 0xa9
 800e512:	73bb      	strb	r3, [r7, #14]
 800e514:	e003      	b.n	800e51e <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e516:	2301      	movs	r3, #1
 800e518:	737b      	strb	r3, [r7, #13]
 800e51a:	2301      	movs	r3, #1
 800e51c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e51e:	bf00      	nop
 800e520:	f7ff fdde 	bl	800e0e0 <SPI_Timer_Status>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <USER_SPI_initialize+0x16e>
 800e52a:	7bbb      	ldrb	r3, [r7, #14]
 800e52c:	2100      	movs	r1, #0
 800e52e:	4618      	mov	r0, r3
 800e530:	f7ff fedd 	bl	800e2ee <send_cmd>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1f2      	bne.n	800e520 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e53a:	f7ff fdd1 	bl	800e0e0 <SPI_Timer_Status>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d007      	beq.n	800e554 <USER_SPI_initialize+0x188>
 800e544:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e548:	2010      	movs	r0, #16
 800e54a:	f7ff fed0 	bl	800e2ee <send_cmd>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d001      	beq.n	800e558 <USER_SPI_initialize+0x18c>
				ty = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e558:	4a15      	ldr	r2, [pc, #84]	@ (800e5b0 <USER_SPI_initialize+0x1e4>)
 800e55a:	7b7b      	ldrb	r3, [r7, #13]
 800e55c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e55e:	f7ff fe3f 	bl	800e1e0 <despiselect>

	if (ty) {			/* OK */
 800e562:	7b7b      	ldrb	r3, [r7, #13]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d012      	beq.n	800e58e <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800e568:	4b10      	ldr	r3, [pc, #64]	@ (800e5ac <USER_SPI_initialize+0x1e0>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e572:	4b0e      	ldr	r3, [pc, #56]	@ (800e5ac <USER_SPI_initialize+0x1e0>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f042 0210 	orr.w	r2, r2, #16
 800e57a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e57c:	4b09      	ldr	r3, [pc, #36]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	b2db      	uxtb	r3, r3
 800e582:	f023 0301 	bic.w	r3, r3, #1
 800e586:	b2da      	uxtb	r2, r3
 800e588:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e002      	b.n	800e594 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e58e:	4b05      	ldr	r3, [pc, #20]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e590:	2201      	movs	r2, #1
 800e592:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e594:	4b03      	ldr	r3, [pc, #12]	@ (800e5a4 <USER_SPI_initialize+0x1d8>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	b2db      	uxtb	r3, r3
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	3714      	adds	r7, #20
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd90      	pop	{r4, r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	20000074 	.word	0x20000074
 800e5a8:	2000c2b8 	.word	0x2000c2b8
 800e5ac:	2000b2b8 	.word	0x2000b2b8
 800e5b0:	2000c2bc 	.word	0x2000c2bc

0800e5b4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d001      	beq.n	800e5c8 <USER_SPI_status+0x14>
 800e5c4:	2301      	movs	r3, #1
 800e5c6:	e002      	b.n	800e5ce <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e5c8:	4b04      	ldr	r3, [pc, #16]	@ (800e5dc <USER_SPI_status+0x28>)
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	b2db      	uxtb	r3, r3
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	370c      	adds	r7, #12
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop
 800e5dc:	20000074 	.word	0x20000074

0800e5e0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	60b9      	str	r1, [r7, #8]
 800e5e8:	607a      	str	r2, [r7, #4]
 800e5ea:	603b      	str	r3, [r7, #0]
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e5f0:	7bfb      	ldrb	r3, [r7, #15]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d102      	bne.n	800e5fc <USER_SPI_read+0x1c>
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d101      	bne.n	800e600 <USER_SPI_read+0x20>
 800e5fc:	2304      	movs	r3, #4
 800e5fe:	e04d      	b.n	800e69c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e600:	4b28      	ldr	r3, [pc, #160]	@ (800e6a4 <USER_SPI_read+0xc4>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	b2db      	uxtb	r3, r3
 800e606:	f003 0301 	and.w	r3, r3, #1
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d001      	beq.n	800e612 <USER_SPI_read+0x32>
 800e60e:	2303      	movs	r3, #3
 800e610:	e044      	b.n	800e69c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e612:	4b25      	ldr	r3, [pc, #148]	@ (800e6a8 <USER_SPI_read+0xc8>)
 800e614:	781b      	ldrb	r3, [r3, #0]
 800e616:	f003 0308 	and.w	r3, r3, #8
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d102      	bne.n	800e624 <USER_SPI_read+0x44>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	025b      	lsls	r3, r3, #9
 800e622:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2b01      	cmp	r3, #1
 800e628:	d111      	bne.n	800e64e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e62a:	6879      	ldr	r1, [r7, #4]
 800e62c:	2011      	movs	r0, #17
 800e62e:	f7ff fe5e 	bl	800e2ee <send_cmd>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d129      	bne.n	800e68c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e638:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e63c:	68b8      	ldr	r0, [r7, #8]
 800e63e:	f7ff fdfb 	bl	800e238 <rcvr_datablock>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d021      	beq.n	800e68c <USER_SPI_read+0xac>
			count = 0;
 800e648:	2300      	movs	r3, #0
 800e64a:	603b      	str	r3, [r7, #0]
 800e64c:	e01e      	b.n	800e68c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e64e:	6879      	ldr	r1, [r7, #4]
 800e650:	2012      	movs	r0, #18
 800e652:	f7ff fe4c 	bl	800e2ee <send_cmd>
 800e656:	4603      	mov	r3, r0
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d117      	bne.n	800e68c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e65c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e660:	68b8      	ldr	r0, [r7, #8]
 800e662:	f7ff fde9 	bl	800e238 <rcvr_datablock>
 800e666:	4603      	mov	r3, r0
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00a      	beq.n	800e682 <USER_SPI_read+0xa2>
				buff += 512;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e672:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	3b01      	subs	r3, #1
 800e678:	603b      	str	r3, [r7, #0]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1ed      	bne.n	800e65c <USER_SPI_read+0x7c>
 800e680:	e000      	b.n	800e684 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e682:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e684:	2100      	movs	r1, #0
 800e686:	200c      	movs	r0, #12
 800e688:	f7ff fe31 	bl	800e2ee <send_cmd>
		}
	}
	despiselect();
 800e68c:	f7ff fda8 	bl	800e1e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	2b00      	cmp	r3, #0
 800e694:	bf14      	ite	ne
 800e696:	2301      	movne	r3, #1
 800e698:	2300      	moveq	r3, #0
 800e69a:	b2db      	uxtb	r3, r3
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	20000074 	.word	0x20000074
 800e6a8:	2000c2bc 	.word	0x2000c2bc

0800e6ac <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	607a      	str	r2, [r7, #4]
 800e6b6:	603b      	str	r3, [r7, #0]
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d102      	bne.n	800e6c8 <USER_SPI_write+0x1c>
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <USER_SPI_write+0x20>
 800e6c8:	2304      	movs	r3, #4
 800e6ca:	e063      	b.n	800e794 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e6cc:	4b33      	ldr	r3, [pc, #204]	@ (800e79c <USER_SPI_write+0xf0>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	f003 0301 	and.w	r3, r3, #1
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <USER_SPI_write+0x32>
 800e6da:	2303      	movs	r3, #3
 800e6dc:	e05a      	b.n	800e794 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e6de:	4b2f      	ldr	r3, [pc, #188]	@ (800e79c <USER_SPI_write+0xf0>)
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	f003 0304 	and.w	r3, r3, #4
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <USER_SPI_write+0x44>
 800e6ec:	2302      	movs	r3, #2
 800e6ee:	e051      	b.n	800e794 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e6f0:	4b2b      	ldr	r3, [pc, #172]	@ (800e7a0 <USER_SPI_write+0xf4>)
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	f003 0308 	and.w	r3, r3, #8
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d102      	bne.n	800e702 <USER_SPI_write+0x56>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	025b      	lsls	r3, r3, #9
 800e700:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d110      	bne.n	800e72a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e708:	6879      	ldr	r1, [r7, #4]
 800e70a:	2018      	movs	r0, #24
 800e70c:	f7ff fdef 	bl	800e2ee <send_cmd>
 800e710:	4603      	mov	r3, r0
 800e712:	2b00      	cmp	r3, #0
 800e714:	d136      	bne.n	800e784 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e716:	21fe      	movs	r1, #254	@ 0xfe
 800e718:	68b8      	ldr	r0, [r7, #8]
 800e71a:	f7ff fdb6 	bl	800e28a <xmit_datablock>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d02f      	beq.n	800e784 <USER_SPI_write+0xd8>
			count = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	603b      	str	r3, [r7, #0]
 800e728:	e02c      	b.n	800e784 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e72a:	4b1d      	ldr	r3, [pc, #116]	@ (800e7a0 <USER_SPI_write+0xf4>)
 800e72c:	781b      	ldrb	r3, [r3, #0]
 800e72e:	f003 0306 	and.w	r3, r3, #6
 800e732:	2b00      	cmp	r3, #0
 800e734:	d003      	beq.n	800e73e <USER_SPI_write+0x92>
 800e736:	6839      	ldr	r1, [r7, #0]
 800e738:	2097      	movs	r0, #151	@ 0x97
 800e73a:	f7ff fdd8 	bl	800e2ee <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	2019      	movs	r0, #25
 800e742:	f7ff fdd4 	bl	800e2ee <send_cmd>
 800e746:	4603      	mov	r3, r0
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d11b      	bne.n	800e784 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e74c:	21fc      	movs	r1, #252	@ 0xfc
 800e74e:	68b8      	ldr	r0, [r7, #8]
 800e750:	f7ff fd9b 	bl	800e28a <xmit_datablock>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00a      	beq.n	800e770 <USER_SPI_write+0xc4>
				buff += 512;
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e760:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	3b01      	subs	r3, #1
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d1ee      	bne.n	800e74c <USER_SPI_write+0xa0>
 800e76e:	e000      	b.n	800e772 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e770:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e772:	21fd      	movs	r1, #253	@ 0xfd
 800e774:	2000      	movs	r0, #0
 800e776:	f7ff fd88 	bl	800e28a <xmit_datablock>
 800e77a:	4603      	mov	r3, r0
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d101      	bne.n	800e784 <USER_SPI_write+0xd8>
 800e780:	2301      	movs	r3, #1
 800e782:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e784:	f7ff fd2c 	bl	800e1e0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	bf14      	ite	ne
 800e78e:	2301      	movne	r3, #1
 800e790:	2300      	moveq	r3, #0
 800e792:	b2db      	uxtb	r3, r3
}
 800e794:	4618      	mov	r0, r3
 800e796:	3710      	adds	r7, #16
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	20000074 	.word	0x20000074
 800e7a0:	2000c2bc 	.word	0x2000c2bc

0800e7a4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b08c      	sub	sp, #48	@ 0x30
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	4603      	mov	r3, r0
 800e7ac:	603a      	str	r2, [r7, #0]
 800e7ae:	71fb      	strb	r3, [r7, #7]
 800e7b0:	460b      	mov	r3, r1
 800e7b2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e7b4:	79fb      	ldrb	r3, [r7, #7]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <USER_SPI_ioctl+0x1a>
 800e7ba:	2304      	movs	r3, #4
 800e7bc:	e15a      	b.n	800ea74 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e7be:	4baf      	ldr	r3, [pc, #700]	@ (800ea7c <USER_SPI_ioctl+0x2d8>)
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	b2db      	uxtb	r3, r3
 800e7c4:	f003 0301 	and.w	r3, r3, #1
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <USER_SPI_ioctl+0x2c>
 800e7cc:	2303      	movs	r3, #3
 800e7ce:	e151      	b.n	800ea74 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800e7d6:	79bb      	ldrb	r3, [r7, #6]
 800e7d8:	2b04      	cmp	r3, #4
 800e7da:	f200 8136 	bhi.w	800ea4a <USER_SPI_ioctl+0x2a6>
 800e7de:	a201      	add	r2, pc, #4	@ (adr r2, 800e7e4 <USER_SPI_ioctl+0x40>)
 800e7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e4:	0800e7f9 	.word	0x0800e7f9
 800e7e8:	0800e80d 	.word	0x0800e80d
 800e7ec:	0800ea4b 	.word	0x0800ea4b
 800e7f0:	0800e8b9 	.word	0x0800e8b9
 800e7f4:	0800e9af 	.word	0x0800e9af
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e7f8:	f7ff fd02 	bl	800e200 <spiselect>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	f000 8127 	beq.w	800ea52 <USER_SPI_ioctl+0x2ae>
 800e804:	2300      	movs	r3, #0
 800e806:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e80a:	e122      	b.n	800ea52 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e80c:	2100      	movs	r1, #0
 800e80e:	2009      	movs	r0, #9
 800e810:	f7ff fd6d 	bl	800e2ee <send_cmd>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	f040 811d 	bne.w	800ea56 <USER_SPI_ioctl+0x2b2>
 800e81c:	f107 030c 	add.w	r3, r7, #12
 800e820:	2110      	movs	r1, #16
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff fd08 	bl	800e238 <rcvr_datablock>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8113 	beq.w	800ea56 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e830:	7b3b      	ldrb	r3, [r7, #12]
 800e832:	099b      	lsrs	r3, r3, #6
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b01      	cmp	r3, #1
 800e838:	d111      	bne.n	800e85e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e83a:	7d7b      	ldrb	r3, [r7, #21]
 800e83c:	461a      	mov	r2, r3
 800e83e:	7d3b      	ldrb	r3, [r7, #20]
 800e840:	021b      	lsls	r3, r3, #8
 800e842:	4413      	add	r3, r2
 800e844:	461a      	mov	r2, r3
 800e846:	7cfb      	ldrb	r3, [r7, #19]
 800e848:	041b      	lsls	r3, r3, #16
 800e84a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800e84e:	4413      	add	r3, r2
 800e850:	3301      	adds	r3, #1
 800e852:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	029a      	lsls	r2, r3, #10
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	601a      	str	r2, [r3, #0]
 800e85c:	e028      	b.n	800e8b0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e85e:	7c7b      	ldrb	r3, [r7, #17]
 800e860:	f003 030f 	and.w	r3, r3, #15
 800e864:	b2da      	uxtb	r2, r3
 800e866:	7dbb      	ldrb	r3, [r7, #22]
 800e868:	09db      	lsrs	r3, r3, #7
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	4413      	add	r3, r2
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	7d7b      	ldrb	r3, [r7, #21]
 800e872:	005b      	lsls	r3, r3, #1
 800e874:	b2db      	uxtb	r3, r3
 800e876:	f003 0306 	and.w	r3, r3, #6
 800e87a:	b2db      	uxtb	r3, r3
 800e87c:	4413      	add	r3, r2
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	3302      	adds	r3, #2
 800e882:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e886:	7d3b      	ldrb	r3, [r7, #20]
 800e888:	099b      	lsrs	r3, r3, #6
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	461a      	mov	r2, r3
 800e88e:	7cfb      	ldrb	r3, [r7, #19]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	441a      	add	r2, r3
 800e894:	7cbb      	ldrb	r3, [r7, #18]
 800e896:	029b      	lsls	r3, r3, #10
 800e898:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e89c:	4413      	add	r3, r2
 800e89e:	3301      	adds	r3, #1
 800e8a0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e8a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e8a6:	3b09      	subs	r3, #9
 800e8a8:	69fa      	ldr	r2, [r7, #28]
 800e8aa:	409a      	lsls	r2, r3
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e8b6:	e0ce      	b.n	800ea56 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e8b8:	4b71      	ldr	r3, [pc, #452]	@ (800ea80 <USER_SPI_ioctl+0x2dc>)
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d031      	beq.n	800e928 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	208d      	movs	r0, #141	@ 0x8d
 800e8c8:	f7ff fd11 	bl	800e2ee <send_cmd>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	f040 80c3 	bne.w	800ea5a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e8d4:	20ff      	movs	r0, #255	@ 0xff
 800e8d6:	f7ff fc19 	bl	800e10c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e8da:	f107 030c 	add.w	r3, r7, #12
 800e8de:	2110      	movs	r1, #16
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f7ff fca9 	bl	800e238 <rcvr_datablock>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 80b6 	beq.w	800ea5a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e8ee:	2330      	movs	r3, #48	@ 0x30
 800e8f0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e8f4:	e007      	b.n	800e906 <USER_SPI_ioctl+0x162>
 800e8f6:	20ff      	movs	r0, #255	@ 0xff
 800e8f8:	f7ff fc08 	bl	800e10c <xchg_spi>
 800e8fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e900:	3b01      	subs	r3, #1
 800e902:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e906:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d1f3      	bne.n	800e8f6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e90e:	7dbb      	ldrb	r3, [r7, #22]
 800e910:	091b      	lsrs	r3, r3, #4
 800e912:	b2db      	uxtb	r3, r3
 800e914:	461a      	mov	r2, r3
 800e916:	2310      	movs	r3, #16
 800e918:	fa03 f202 	lsl.w	r2, r3, r2
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e920:	2300      	movs	r3, #0
 800e922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e926:	e098      	b.n	800ea5a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e928:	2100      	movs	r1, #0
 800e92a:	2009      	movs	r0, #9
 800e92c:	f7ff fcdf 	bl	800e2ee <send_cmd>
 800e930:	4603      	mov	r3, r0
 800e932:	2b00      	cmp	r3, #0
 800e934:	f040 8091 	bne.w	800ea5a <USER_SPI_ioctl+0x2b6>
 800e938:	f107 030c 	add.w	r3, r7, #12
 800e93c:	2110      	movs	r1, #16
 800e93e:	4618      	mov	r0, r3
 800e940:	f7ff fc7a 	bl	800e238 <rcvr_datablock>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	f000 8087 	beq.w	800ea5a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e94c:	4b4c      	ldr	r3, [pc, #304]	@ (800ea80 <USER_SPI_ioctl+0x2dc>)
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	f003 0302 	and.w	r3, r3, #2
 800e954:	2b00      	cmp	r3, #0
 800e956:	d012      	beq.n	800e97e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e958:	7dbb      	ldrb	r3, [r7, #22]
 800e95a:	005b      	lsls	r3, r3, #1
 800e95c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800e960:	7dfa      	ldrb	r2, [r7, #23]
 800e962:	09d2      	lsrs	r2, r2, #7
 800e964:	b2d2      	uxtb	r2, r2
 800e966:	4413      	add	r3, r2
 800e968:	1c5a      	adds	r2, r3, #1
 800e96a:	7e7b      	ldrb	r3, [r7, #25]
 800e96c:	099b      	lsrs	r3, r3, #6
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	3b01      	subs	r3, #1
 800e972:	fa02 f303 	lsl.w	r3, r2, r3
 800e976:	461a      	mov	r2, r3
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	601a      	str	r2, [r3, #0]
 800e97c:	e013      	b.n	800e9a6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e97e:	7dbb      	ldrb	r3, [r7, #22]
 800e980:	109b      	asrs	r3, r3, #2
 800e982:	b29b      	uxth	r3, r3
 800e984:	f003 031f 	and.w	r3, r3, #31
 800e988:	3301      	adds	r3, #1
 800e98a:	7dfa      	ldrb	r2, [r7, #23]
 800e98c:	00d2      	lsls	r2, r2, #3
 800e98e:	f002 0218 	and.w	r2, r2, #24
 800e992:	7df9      	ldrb	r1, [r7, #23]
 800e994:	0949      	lsrs	r1, r1, #5
 800e996:	b2c9      	uxtb	r1, r1
 800e998:	440a      	add	r2, r1
 800e99a:	3201      	adds	r2, #1
 800e99c:	fb02 f303 	mul.w	r3, r2, r3
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e9ac:	e055      	b.n	800ea5a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e9ae:	4b34      	ldr	r3, [pc, #208]	@ (800ea80 <USER_SPI_ioctl+0x2dc>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	f003 0306 	and.w	r3, r3, #6
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d051      	beq.n	800ea5e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e9ba:	f107 020c 	add.w	r2, r7, #12
 800e9be:	79fb      	ldrb	r3, [r7, #7]
 800e9c0:	210b      	movs	r1, #11
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7ff feee 	bl	800e7a4 <USER_SPI_ioctl>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d149      	bne.n	800ea62 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e9ce:	7b3b      	ldrb	r3, [r7, #12]
 800e9d0:	099b      	lsrs	r3, r3, #6
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d104      	bne.n	800e9e2 <USER_SPI_ioctl+0x23e>
 800e9d8:	7dbb      	ldrb	r3, [r7, #22]
 800e9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d041      	beq.n	800ea66 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	623b      	str	r3, [r7, #32]
 800e9e6:	6a3b      	ldr	r3, [r7, #32]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800e9f2:	4b23      	ldr	r3, [pc, #140]	@ (800ea80 <USER_SPI_ioctl+0x2dc>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	f003 0308 	and.w	r3, r3, #8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d105      	bne.n	800ea0a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea00:	025b      	lsls	r3, r3, #9
 800ea02:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ea04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea06:	025b      	lsls	r3, r3, #9
 800ea08:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800ea0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ea0c:	2020      	movs	r0, #32
 800ea0e:	f7ff fc6e 	bl	800e2ee <send_cmd>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d128      	bne.n	800ea6a <USER_SPI_ioctl+0x2c6>
 800ea18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ea1a:	2021      	movs	r0, #33	@ 0x21
 800ea1c:	f7ff fc67 	bl	800e2ee <send_cmd>
 800ea20:	4603      	mov	r3, r0
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d121      	bne.n	800ea6a <USER_SPI_ioctl+0x2c6>
 800ea26:	2100      	movs	r1, #0
 800ea28:	2026      	movs	r0, #38	@ 0x26
 800ea2a:	f7ff fc60 	bl	800e2ee <send_cmd>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d11a      	bne.n	800ea6a <USER_SPI_ioctl+0x2c6>
 800ea34:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ea38:	f7ff fbae 	bl	800e198 <wait_ready>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d013      	beq.n	800ea6a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800ea42:	2300      	movs	r3, #0
 800ea44:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800ea48:	e00f      	b.n	800ea6a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800ea4a:	2304      	movs	r3, #4
 800ea4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ea50:	e00c      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		break;
 800ea52:	bf00      	nop
 800ea54:	e00a      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		break;
 800ea56:	bf00      	nop
 800ea58:	e008      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		break;
 800ea5a:	bf00      	nop
 800ea5c:	e006      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800ea5e:	bf00      	nop
 800ea60:	e004      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800ea62:	bf00      	nop
 800ea64:	e002      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800ea66:	bf00      	nop
 800ea68:	e000      	b.n	800ea6c <USER_SPI_ioctl+0x2c8>
		break;
 800ea6a:	bf00      	nop
	}

	despiselect();
 800ea6c:	f7ff fbb8 	bl	800e1e0 <despiselect>

	return res;
 800ea70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ea74:	4618      	mov	r0, r3
 800ea76:	3730      	adds	r7, #48	@ 0x30
 800ea78:	46bd      	mov	sp, r7
 800ea7a:	bd80      	pop	{r7, pc}
 800ea7c:	20000074 	.word	0x20000074
 800ea80:	2000c2bc 	.word	0x2000c2bc

0800ea84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b084      	sub	sp, #16
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	4a08      	ldr	r2, [pc, #32]	@ (800eab4 <disk_status+0x30>)
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	79fa      	ldrb	r2, [r7, #7]
 800ea9c:	4905      	ldr	r1, [pc, #20]	@ (800eab4 <disk_status+0x30>)
 800ea9e:	440a      	add	r2, r1
 800eaa0:	7a12      	ldrb	r2, [r2, #8]
 800eaa2:	4610      	mov	r0, r2
 800eaa4:	4798      	blx	r3
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eaaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}
 800eab4:	2000c2f0 	.word	0x2000c2f0

0800eab8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	4603      	mov	r3, r0
 800eac0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eac2:	2300      	movs	r3, #0
 800eac4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eac6:	79fb      	ldrb	r3, [r7, #7]
 800eac8:	4a0d      	ldr	r2, [pc, #52]	@ (800eb00 <disk_initialize+0x48>)
 800eaca:	5cd3      	ldrb	r3, [r2, r3]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d111      	bne.n	800eaf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ead0:	79fb      	ldrb	r3, [r7, #7]
 800ead2:	4a0b      	ldr	r2, [pc, #44]	@ (800eb00 <disk_initialize+0x48>)
 800ead4:	2101      	movs	r1, #1
 800ead6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ead8:	79fb      	ldrb	r3, [r7, #7]
 800eada:	4a09      	ldr	r2, [pc, #36]	@ (800eb00 <disk_initialize+0x48>)
 800eadc:	009b      	lsls	r3, r3, #2
 800eade:	4413      	add	r3, r2
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	79fa      	ldrb	r2, [r7, #7]
 800eae6:	4906      	ldr	r1, [pc, #24]	@ (800eb00 <disk_initialize+0x48>)
 800eae8:	440a      	add	r2, r1
 800eaea:	7a12      	ldrb	r2, [r2, #8]
 800eaec:	4610      	mov	r0, r2
 800eaee:	4798      	blx	r3
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	2000c2f0 	.word	0x2000c2f0

0800eb04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eb04:	b590      	push	{r4, r7, lr}
 800eb06:	b087      	sub	sp, #28
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	60b9      	str	r1, [r7, #8]
 800eb0c:	607a      	str	r2, [r7, #4]
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	4603      	mov	r3, r0
 800eb12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
 800eb16:	4a0a      	ldr	r2, [pc, #40]	@ (800eb40 <disk_read+0x3c>)
 800eb18:	009b      	lsls	r3, r3, #2
 800eb1a:	4413      	add	r3, r2
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	689c      	ldr	r4, [r3, #8]
 800eb20:	7bfb      	ldrb	r3, [r7, #15]
 800eb22:	4a07      	ldr	r2, [pc, #28]	@ (800eb40 <disk_read+0x3c>)
 800eb24:	4413      	add	r3, r2
 800eb26:	7a18      	ldrb	r0, [r3, #8]
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	68b9      	ldr	r1, [r7, #8]
 800eb2e:	47a0      	blx	r4
 800eb30:	4603      	mov	r3, r0
 800eb32:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	371c      	adds	r7, #28
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd90      	pop	{r4, r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	2000c2f0 	.word	0x2000c2f0

0800eb44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eb44:	b590      	push	{r4, r7, lr}
 800eb46:	b087      	sub	sp, #28
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	60b9      	str	r1, [r7, #8]
 800eb4c:	607a      	str	r2, [r7, #4]
 800eb4e:	603b      	str	r3, [r7, #0]
 800eb50:	4603      	mov	r3, r0
 800eb52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb54:	7bfb      	ldrb	r3, [r7, #15]
 800eb56:	4a0a      	ldr	r2, [pc, #40]	@ (800eb80 <disk_write+0x3c>)
 800eb58:	009b      	lsls	r3, r3, #2
 800eb5a:	4413      	add	r3, r2
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	68dc      	ldr	r4, [r3, #12]
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	4a07      	ldr	r2, [pc, #28]	@ (800eb80 <disk_write+0x3c>)
 800eb64:	4413      	add	r3, r2
 800eb66:	7a18      	ldrb	r0, [r3, #8]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	687a      	ldr	r2, [r7, #4]
 800eb6c:	68b9      	ldr	r1, [r7, #8]
 800eb6e:	47a0      	blx	r4
 800eb70:	4603      	mov	r3, r0
 800eb72:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	371c      	adds	r7, #28
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd90      	pop	{r4, r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	2000c2f0 	.word	0x2000c2f0

0800eb84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	603a      	str	r2, [r7, #0]
 800eb8e:	71fb      	strb	r3, [r7, #7]
 800eb90:	460b      	mov	r3, r1
 800eb92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eb94:	79fb      	ldrb	r3, [r7, #7]
 800eb96:	4a09      	ldr	r2, [pc, #36]	@ (800ebbc <disk_ioctl+0x38>)
 800eb98:	009b      	lsls	r3, r3, #2
 800eb9a:	4413      	add	r3, r2
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	691b      	ldr	r3, [r3, #16]
 800eba0:	79fa      	ldrb	r2, [r7, #7]
 800eba2:	4906      	ldr	r1, [pc, #24]	@ (800ebbc <disk_ioctl+0x38>)
 800eba4:	440a      	add	r2, r1
 800eba6:	7a10      	ldrb	r0, [r2, #8]
 800eba8:	79b9      	ldrb	r1, [r7, #6]
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	4798      	blx	r3
 800ebae:	4603      	mov	r3, r0
 800ebb0:	73fb      	strb	r3, [r7, #15]
  return res;
 800ebb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3710      	adds	r7, #16
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	2000c2f0 	.word	0x2000c2f0

0800ebc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ebd0:	89fb      	ldrh	r3, [r7, #14]
 800ebd2:	021b      	lsls	r3, r3, #8
 800ebd4:	b21a      	sxth	r2, r3
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	b21b      	sxth	r3, r3
 800ebdc:	4313      	orrs	r3, r2
 800ebde:	b21b      	sxth	r3, r3
 800ebe0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ebe2:	89fb      	ldrh	r3, [r7, #14]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3714      	adds	r7, #20
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b085      	sub	sp, #20
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	3303      	adds	r3, #3
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	021b      	lsls	r3, r3, #8
 800ec04:	687a      	ldr	r2, [r7, #4]
 800ec06:	3202      	adds	r2, #2
 800ec08:	7812      	ldrb	r2, [r2, #0]
 800ec0a:	4313      	orrs	r3, r2
 800ec0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	021b      	lsls	r3, r3, #8
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	3201      	adds	r2, #1
 800ec16:	7812      	ldrb	r2, [r2, #0]
 800ec18:	4313      	orrs	r3, r2
 800ec1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	7812      	ldrb	r2, [r2, #0]
 800ec24:	4313      	orrs	r3, r2
 800ec26:	60fb      	str	r3, [r7, #12]
	return rv;
 800ec28:	68fb      	ldr	r3, [r7, #12]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3714      	adds	r7, #20
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr

0800ec36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ec36:	b480      	push	{r7}
 800ec38:	b083      	sub	sp, #12
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	460b      	mov	r3, r1
 800ec40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	887a      	ldrh	r2, [r7, #2]
 800ec4a:	b2d2      	uxtb	r2, r2
 800ec4c:	701a      	strb	r2, [r3, #0]
 800ec4e:	887b      	ldrh	r3, [r7, #2]
 800ec50:	0a1b      	lsrs	r3, r3, #8
 800ec52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	607a      	str	r2, [r7, #4]
 800ec5a:	887a      	ldrh	r2, [r7, #2]
 800ec5c:	b2d2      	uxtb	r2, r2
 800ec5e:	701a      	strb	r2, [r3, #0]
}
 800ec60:	bf00      	nop
 800ec62:	370c      	adds	r7, #12
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	1c5a      	adds	r2, r3, #1
 800ec7a:	607a      	str	r2, [r7, #4]
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	b2d2      	uxtb	r2, r2
 800ec80:	701a      	strb	r2, [r3, #0]
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	0a1b      	lsrs	r3, r3, #8
 800ec86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	607a      	str	r2, [r7, #4]
 800ec8e:	683a      	ldr	r2, [r7, #0]
 800ec90:	b2d2      	uxtb	r2, r2
 800ec92:	701a      	strb	r2, [r3, #0]
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	0a1b      	lsrs	r3, r3, #8
 800ec98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	607a      	str	r2, [r7, #4]
 800eca0:	683a      	ldr	r2, [r7, #0]
 800eca2:	b2d2      	uxtb	r2, r2
 800eca4:	701a      	strb	r2, [r3, #0]
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	0a1b      	lsrs	r3, r3, #8
 800ecaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	1c5a      	adds	r2, r3, #1
 800ecb0:	607a      	str	r2, [r7, #4]
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	b2d2      	uxtb	r2, r2
 800ecb6:	701a      	strb	r2, [r3, #0]
}
 800ecb8:	bf00      	nop
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ecc4:	b480      	push	{r7}
 800ecc6:	b087      	sub	sp, #28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	60f8      	str	r0, [r7, #12]
 800eccc:	60b9      	str	r1, [r7, #8]
 800ecce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d00d      	beq.n	800ecfa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ecde:	693a      	ldr	r2, [r7, #16]
 800ece0:	1c53      	adds	r3, r2, #1
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	1c59      	adds	r1, r3, #1
 800ece8:	6179      	str	r1, [r7, #20]
 800ecea:	7812      	ldrb	r2, [r2, #0]
 800ecec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	3b01      	subs	r3, #1
 800ecf2:	607b      	str	r3, [r7, #4]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d1f1      	bne.n	800ecde <mem_cpy+0x1a>
	}
}
 800ecfa:	bf00      	nop
 800ecfc:	371c      	adds	r7, #28
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr

0800ed06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ed06:	b480      	push	{r7}
 800ed08:	b087      	sub	sp, #28
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	60f8      	str	r0, [r7, #12]
 800ed0e:	60b9      	str	r1, [r7, #8]
 800ed10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	1c5a      	adds	r2, r3, #1
 800ed1a:	617a      	str	r2, [r7, #20]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	b2d2      	uxtb	r2, r2
 800ed20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3b01      	subs	r3, #1
 800ed26:	607b      	str	r3, [r7, #4]
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d1f3      	bne.n	800ed16 <mem_set+0x10>
}
 800ed2e:	bf00      	nop
 800ed30:	bf00      	nop
 800ed32:	371c      	adds	r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ed3c:	b480      	push	{r7}
 800ed3e:	b089      	sub	sp, #36	@ 0x24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	61fb      	str	r3, [r7, #28]
 800ed4c:	68bb      	ldr	r3, [r7, #8]
 800ed4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed50:	2300      	movs	r3, #0
 800ed52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	1c5a      	adds	r2, r3, #1
 800ed58:	61fa      	str	r2, [r7, #28]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	69bb      	ldr	r3, [r7, #24]
 800ed60:	1c5a      	adds	r2, r3, #1
 800ed62:	61ba      	str	r2, [r7, #24]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	1acb      	subs	r3, r1, r3
 800ed68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3b01      	subs	r3, #1
 800ed6e:	607b      	str	r3, [r7, #4]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d002      	beq.n	800ed7c <mem_cmp+0x40>
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d0eb      	beq.n	800ed54 <mem_cmp+0x18>

	return r;
 800ed7c:	697b      	ldr	r3, [r7, #20]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3724      	adds	r7, #36	@ 0x24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed88:	4770      	bx	lr

0800ed8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ed8a:	b480      	push	{r7}
 800ed8c:	b083      	sub	sp, #12
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ed94:	e002      	b.n	800ed9c <chk_chr+0x12>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	607b      	str	r3, [r7, #4]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	781b      	ldrb	r3, [r3, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d005      	beq.n	800edb0 <chk_chr+0x26>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	461a      	mov	r2, r3
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	4293      	cmp	r3, r2
 800edae:	d1f2      	bne.n	800ed96 <chk_chr+0xc>
	return *str;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	781b      	ldrb	r3, [r3, #0]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	370c      	adds	r7, #12
 800edb8:	46bd      	mov	sp, r7
 800edba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbe:	4770      	bx	lr

0800edc0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b082      	sub	sp, #8
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d009      	beq.n	800ede2 <lock_fs+0x22>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	691b      	ldr	r3, [r3, #16]
 800edd2:	4618      	mov	r0, r3
 800edd4:	f003 fb82 	bl	80124dc <ff_req_grant>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <lock_fs+0x22>
 800edde:	2301      	movs	r3, #1
 800ede0:	e000      	b.n	800ede4 <lock_fs+0x24>
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3708      	adds	r7, #8
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00d      	beq.n	800ee1a <unlock_fs+0x2e>
 800edfe:	78fb      	ldrb	r3, [r7, #3]
 800ee00:	2b0c      	cmp	r3, #12
 800ee02:	d00a      	beq.n	800ee1a <unlock_fs+0x2e>
 800ee04:	78fb      	ldrb	r3, [r7, #3]
 800ee06:	2b0b      	cmp	r3, #11
 800ee08:	d007      	beq.n	800ee1a <unlock_fs+0x2e>
 800ee0a:	78fb      	ldrb	r3, [r7, #3]
 800ee0c:	2b0f      	cmp	r3, #15
 800ee0e:	d004      	beq.n	800ee1a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	4618      	mov	r0, r3
 800ee16:	f003 fb76 	bl	8012506 <ff_rel_grant>
	}
}
 800ee1a:	bf00      	nop
 800ee1c:	3708      	adds	r7, #8
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}
	...

0800ee24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee2e:	2300      	movs	r3, #0
 800ee30:	60bb      	str	r3, [r7, #8]
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	60fb      	str	r3, [r7, #12]
 800ee36:	e029      	b.n	800ee8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ee38:	4a27      	ldr	r2, [pc, #156]	@ (800eed8 <chk_lock+0xb4>)
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	011b      	lsls	r3, r3, #4
 800ee3e:	4413      	add	r3, r2
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d01d      	beq.n	800ee82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee46:	4a24      	ldr	r2, [pc, #144]	@ (800eed8 <chk_lock+0xb4>)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	011b      	lsls	r3, r3, #4
 800ee4c:	4413      	add	r3, r2
 800ee4e:	681a      	ldr	r2, [r3, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d116      	bne.n	800ee86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ee58:	4a1f      	ldr	r2, [pc, #124]	@ (800eed8 <chk_lock+0xb4>)
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	011b      	lsls	r3, r3, #4
 800ee5e:	4413      	add	r3, r2
 800ee60:	3304      	adds	r3, #4
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	d10c      	bne.n	800ee86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee6c:	4a1a      	ldr	r2, [pc, #104]	@ (800eed8 <chk_lock+0xb4>)
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	011b      	lsls	r3, r3, #4
 800ee72:	4413      	add	r3, r2
 800ee74:	3308      	adds	r3, #8
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d102      	bne.n	800ee86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee80:	e007      	b.n	800ee92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ee82:	2301      	movs	r3, #1
 800ee84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	60fb      	str	r3, [r7, #12]
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d9d2      	bls.n	800ee38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	2b02      	cmp	r3, #2
 800ee96:	d109      	bne.n	800eeac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d102      	bne.n	800eea4 <chk_lock+0x80>
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d101      	bne.n	800eea8 <chk_lock+0x84>
 800eea4:	2300      	movs	r3, #0
 800eea6:	e010      	b.n	800eeca <chk_lock+0xa6>
 800eea8:	2312      	movs	r3, #18
 800eeaa:	e00e      	b.n	800eeca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d108      	bne.n	800eec4 <chk_lock+0xa0>
 800eeb2:	4a09      	ldr	r2, [pc, #36]	@ (800eed8 <chk_lock+0xb4>)
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	011b      	lsls	r3, r3, #4
 800eeb8:	4413      	add	r3, r2
 800eeba:	330c      	adds	r3, #12
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eec2:	d101      	bne.n	800eec8 <chk_lock+0xa4>
 800eec4:	2310      	movs	r3, #16
 800eec6:	e000      	b.n	800eeca <chk_lock+0xa6>
 800eec8:	2300      	movs	r3, #0
}
 800eeca:	4618      	mov	r0, r3
 800eecc:	3714      	adds	r7, #20
 800eece:	46bd      	mov	sp, r7
 800eed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	2000c2d0 	.word	0x2000c2d0

0800eedc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eee2:	2300      	movs	r3, #0
 800eee4:	607b      	str	r3, [r7, #4]
 800eee6:	e002      	b.n	800eeee <enq_lock+0x12>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	3301      	adds	r3, #1
 800eeec:	607b      	str	r3, [r7, #4]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d806      	bhi.n	800ef02 <enq_lock+0x26>
 800eef4:	4a09      	ldr	r2, [pc, #36]	@ (800ef1c <enq_lock+0x40>)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	011b      	lsls	r3, r3, #4
 800eefa:	4413      	add	r3, r2
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d1f2      	bne.n	800eee8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2b02      	cmp	r3, #2
 800ef06:	bf14      	ite	ne
 800ef08:	2301      	movne	r3, #1
 800ef0a:	2300      	moveq	r3, #0
 800ef0c:	b2db      	uxtb	r3, r3
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	2000c2d0 	.word	0x2000c2d0

0800ef20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	60fb      	str	r3, [r7, #12]
 800ef2e:	e01f      	b.n	800ef70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ef30:	4a41      	ldr	r2, [pc, #260]	@ (800f038 <inc_lock+0x118>)
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	011b      	lsls	r3, r3, #4
 800ef36:	4413      	add	r3, r2
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d113      	bne.n	800ef6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ef42:	4a3d      	ldr	r2, [pc, #244]	@ (800f038 <inc_lock+0x118>)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	011b      	lsls	r3, r3, #4
 800ef48:	4413      	add	r3, r2
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d109      	bne.n	800ef6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ef56:	4a38      	ldr	r2, [pc, #224]	@ (800f038 <inc_lock+0x118>)
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	011b      	lsls	r3, r3, #4
 800ef5c:	4413      	add	r3, r2
 800ef5e:	3308      	adds	r3, #8
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d006      	beq.n	800ef78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	60fb      	str	r3, [r7, #12]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	2b01      	cmp	r3, #1
 800ef74:	d9dc      	bls.n	800ef30 <inc_lock+0x10>
 800ef76:	e000      	b.n	800ef7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ef78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d132      	bne.n	800efe6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef80:	2300      	movs	r3, #0
 800ef82:	60fb      	str	r3, [r7, #12]
 800ef84:	e002      	b.n	800ef8c <inc_lock+0x6c>
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	60fb      	str	r3, [r7, #12]
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	2b01      	cmp	r3, #1
 800ef90:	d806      	bhi.n	800efa0 <inc_lock+0x80>
 800ef92:	4a29      	ldr	r2, [pc, #164]	@ (800f038 <inc_lock+0x118>)
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	011b      	lsls	r3, r3, #4
 800ef98:	4413      	add	r3, r2
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d1f2      	bne.n	800ef86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2b02      	cmp	r3, #2
 800efa4:	d101      	bne.n	800efaa <inc_lock+0x8a>
 800efa6:	2300      	movs	r3, #0
 800efa8:	e040      	b.n	800f02c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681a      	ldr	r2, [r3, #0]
 800efae:	4922      	ldr	r1, [pc, #136]	@ (800f038 <inc_lock+0x118>)
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	011b      	lsls	r3, r3, #4
 800efb4:	440b      	add	r3, r1
 800efb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	689a      	ldr	r2, [r3, #8]
 800efbc:	491e      	ldr	r1, [pc, #120]	@ (800f038 <inc_lock+0x118>)
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	011b      	lsls	r3, r3, #4
 800efc2:	440b      	add	r3, r1
 800efc4:	3304      	adds	r3, #4
 800efc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	695a      	ldr	r2, [r3, #20]
 800efcc:	491a      	ldr	r1, [pc, #104]	@ (800f038 <inc_lock+0x118>)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	011b      	lsls	r3, r3, #4
 800efd2:	440b      	add	r3, r1
 800efd4:	3308      	adds	r3, #8
 800efd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800efd8:	4a17      	ldr	r2, [pc, #92]	@ (800f038 <inc_lock+0x118>)
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	011b      	lsls	r3, r3, #4
 800efde:	4413      	add	r3, r2
 800efe0:	330c      	adds	r3, #12
 800efe2:	2200      	movs	r2, #0
 800efe4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d009      	beq.n	800f000 <inc_lock+0xe0>
 800efec:	4a12      	ldr	r2, [pc, #72]	@ (800f038 <inc_lock+0x118>)
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	011b      	lsls	r3, r3, #4
 800eff2:	4413      	add	r3, r2
 800eff4:	330c      	adds	r3, #12
 800eff6:	881b      	ldrh	r3, [r3, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d001      	beq.n	800f000 <inc_lock+0xe0>
 800effc:	2300      	movs	r3, #0
 800effe:	e015      	b.n	800f02c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d108      	bne.n	800f018 <inc_lock+0xf8>
 800f006:	4a0c      	ldr	r2, [pc, #48]	@ (800f038 <inc_lock+0x118>)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	011b      	lsls	r3, r3, #4
 800f00c:	4413      	add	r3, r2
 800f00e:	330c      	adds	r3, #12
 800f010:	881b      	ldrh	r3, [r3, #0]
 800f012:	3301      	adds	r3, #1
 800f014:	b29a      	uxth	r2, r3
 800f016:	e001      	b.n	800f01c <inc_lock+0xfc>
 800f018:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f01c:	4906      	ldr	r1, [pc, #24]	@ (800f038 <inc_lock+0x118>)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	011b      	lsls	r3, r3, #4
 800f022:	440b      	add	r3, r1
 800f024:	330c      	adds	r3, #12
 800f026:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	3301      	adds	r3, #1
}
 800f02c:	4618      	mov	r0, r3
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	2000c2d0 	.word	0x2000c2d0

0800f03c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	3b01      	subs	r3, #1
 800f048:	607b      	str	r3, [r7, #4]
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2b01      	cmp	r3, #1
 800f04e:	d825      	bhi.n	800f09c <dec_lock+0x60>
		n = Files[i].ctr;
 800f050:	4a17      	ldr	r2, [pc, #92]	@ (800f0b0 <dec_lock+0x74>)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	011b      	lsls	r3, r3, #4
 800f056:	4413      	add	r3, r2
 800f058:	330c      	adds	r3, #12
 800f05a:	881b      	ldrh	r3, [r3, #0]
 800f05c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f05e:	89fb      	ldrh	r3, [r7, #14]
 800f060:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f064:	d101      	bne.n	800f06a <dec_lock+0x2e>
 800f066:	2300      	movs	r3, #0
 800f068:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f06a:	89fb      	ldrh	r3, [r7, #14]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <dec_lock+0x3a>
 800f070:	89fb      	ldrh	r3, [r7, #14]
 800f072:	3b01      	subs	r3, #1
 800f074:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f076:	4a0e      	ldr	r2, [pc, #56]	@ (800f0b0 <dec_lock+0x74>)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	011b      	lsls	r3, r3, #4
 800f07c:	4413      	add	r3, r2
 800f07e:	330c      	adds	r3, #12
 800f080:	89fa      	ldrh	r2, [r7, #14]
 800f082:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f084:	89fb      	ldrh	r3, [r7, #14]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d105      	bne.n	800f096 <dec_lock+0x5a>
 800f08a:	4a09      	ldr	r2, [pc, #36]	@ (800f0b0 <dec_lock+0x74>)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	011b      	lsls	r3, r3, #4
 800f090:	4413      	add	r3, r2
 800f092:	2200      	movs	r2, #0
 800f094:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f096:	2300      	movs	r3, #0
 800f098:	737b      	strb	r3, [r7, #13]
 800f09a:	e001      	b.n	800f0a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f09c:	2302      	movs	r3, #2
 800f09e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f0a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	2000c2d0 	.word	0x2000c2d0

0800f0b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f0bc:	2300      	movs	r3, #0
 800f0be:	60fb      	str	r3, [r7, #12]
 800f0c0:	e010      	b.n	800f0e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f0c2:	4a0d      	ldr	r2, [pc, #52]	@ (800f0f8 <clear_lock+0x44>)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	011b      	lsls	r3, r3, #4
 800f0c8:	4413      	add	r3, r2
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d105      	bne.n	800f0de <clear_lock+0x2a>
 800f0d2:	4a09      	ldr	r2, [pc, #36]	@ (800f0f8 <clear_lock+0x44>)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	4413      	add	r3, r2
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3301      	adds	r3, #1
 800f0e2:	60fb      	str	r3, [r7, #12]
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d9eb      	bls.n	800f0c2 <clear_lock+0xe>
	}
}
 800f0ea:	bf00      	nop
 800f0ec:	bf00      	nop
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr
 800f0f8:	2000c2d0 	.word	0x2000c2d0

0800f0fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b086      	sub	sp, #24
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f104:	2300      	movs	r3, #0
 800f106:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	78db      	ldrb	r3, [r3, #3]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d034      	beq.n	800f17a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f114:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	7858      	ldrb	r0, [r3, #1]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f120:	2301      	movs	r3, #1
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	f7ff fd0e 	bl	800eb44 <disk_write>
 800f128:	4603      	mov	r3, r0
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f12e:	2301      	movs	r3, #1
 800f130:	73fb      	strb	r3, [r7, #15]
 800f132:	e022      	b.n	800f17a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2200      	movs	r2, #0
 800f138:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	1ad2      	subs	r2, r2, r3
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	429a      	cmp	r2, r3
 800f148:	d217      	bcs.n	800f17a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	789b      	ldrb	r3, [r3, #2]
 800f14e:	613b      	str	r3, [r7, #16]
 800f150:	e010      	b.n	800f174 <sync_window+0x78>
					wsect += fs->fsize;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	697a      	ldr	r2, [r7, #20]
 800f158:	4413      	add	r3, r2
 800f15a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	7858      	ldrb	r0, [r3, #1]
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f166:	2301      	movs	r3, #1
 800f168:	697a      	ldr	r2, [r7, #20]
 800f16a:	f7ff fceb 	bl	800eb44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	3b01      	subs	r3, #1
 800f172:	613b      	str	r3, [r7, #16]
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	2b01      	cmp	r3, #1
 800f178:	d8eb      	bhi.n	800f152 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3718      	adds	r7, #24
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f18e:	2300      	movs	r3, #0
 800f190:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	429a      	cmp	r2, r3
 800f19a:	d01b      	beq.n	800f1d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f7ff ffad 	bl	800f0fc <sync_window>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d113      	bne.n	800f1d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	7858      	ldrb	r0, [r3, #1]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f1b6:	2301      	movs	r3, #1
 800f1b8:	683a      	ldr	r2, [r7, #0]
 800f1ba:	f7ff fca3 	bl	800eb04 <disk_read>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d004      	beq.n	800f1ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	683a      	ldr	r2, [r7, #0]
 800f1d2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800f1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3710      	adds	r7, #16
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	f7ff ff87 	bl	800f0fc <sync_window>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f1f2:	7bfb      	ldrb	r3, [r7, #15]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d158      	bne.n	800f2aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	2b03      	cmp	r3, #3
 800f1fe:	d148      	bne.n	800f292 <sync_fs+0xb2>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	791b      	ldrb	r3, [r3, #4]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d144      	bne.n	800f292 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3338      	adds	r3, #56	@ 0x38
 800f20c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f210:	2100      	movs	r1, #0
 800f212:	4618      	mov	r0, r3
 800f214:	f7ff fd77 	bl	800ed06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	3338      	adds	r3, #56	@ 0x38
 800f21c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f220:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff fd06 	bl	800ec36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	3338      	adds	r3, #56	@ 0x38
 800f22e:	4921      	ldr	r1, [pc, #132]	@ (800f2b4 <sync_fs+0xd4>)
 800f230:	4618      	mov	r0, r3
 800f232:	f7ff fd1b 	bl	800ec6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3338      	adds	r3, #56	@ 0x38
 800f23a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f23e:	491e      	ldr	r1, [pc, #120]	@ (800f2b8 <sync_fs+0xd8>)
 800f240:	4618      	mov	r0, r3
 800f242:	f7ff fd13 	bl	800ec6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	3338      	adds	r3, #56	@ 0x38
 800f24a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	699b      	ldr	r3, [r3, #24]
 800f252:	4619      	mov	r1, r3
 800f254:	4610      	mov	r0, r2
 800f256:	f7ff fd09 	bl	800ec6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	3338      	adds	r3, #56	@ 0x38
 800f25e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	695b      	ldr	r3, [r3, #20]
 800f266:	4619      	mov	r1, r3
 800f268:	4610      	mov	r0, r2
 800f26a:	f7ff fcff 	bl	800ec6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f272:	1c5a      	adds	r2, r3, #1
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	7858      	ldrb	r0, [r3, #1]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f286:	2301      	movs	r3, #1
 800f288:	f7ff fc5c 	bl	800eb44 <disk_write>
			fs->fsi_flag = 0;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	785b      	ldrb	r3, [r3, #1]
 800f296:	2200      	movs	r2, #0
 800f298:	2100      	movs	r1, #0
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7ff fc72 	bl	800eb84 <disk_ioctl>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <sync_fs+0xca>
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	41615252 	.word	0x41615252
 800f2b8:	61417272 	.word	0x61417272

0800f2bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	3b02      	subs	r3, #2
 800f2ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	69db      	ldr	r3, [r3, #28]
 800f2d0:	3b02      	subs	r3, #2
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d301      	bcc.n	800f2dc <clust2sect+0x20>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e008      	b.n	800f2ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	895b      	ldrh	r3, [r3, #10]
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	fb03 f202 	mul.w	r2, r3, r2
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2ec:	4413      	add	r3, r2
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	370c      	adds	r7, #12
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f8:	4770      	bx	lr

0800f2fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b086      	sub	sp, #24
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d904      	bls.n	800f31a <get_fat+0x20>
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	69db      	ldr	r3, [r3, #28]
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	429a      	cmp	r2, r3
 800f318:	d302      	bcc.n	800f320 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f31a:	2301      	movs	r3, #1
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e08e      	b.n	800f43e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d061      	beq.n	800f3f2 <get_fat+0xf8>
 800f32e:	2b03      	cmp	r3, #3
 800f330:	dc7b      	bgt.n	800f42a <get_fat+0x130>
 800f332:	2b01      	cmp	r3, #1
 800f334:	d002      	beq.n	800f33c <get_fat+0x42>
 800f336:	2b02      	cmp	r3, #2
 800f338:	d041      	beq.n	800f3be <get_fat+0xc4>
 800f33a:	e076      	b.n	800f42a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	60fb      	str	r3, [r7, #12]
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	085b      	lsrs	r3, r3, #1
 800f344:	68fa      	ldr	r2, [r7, #12]
 800f346:	4413      	add	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	0a5b      	lsrs	r3, r3, #9
 800f352:	4413      	add	r3, r2
 800f354:	4619      	mov	r1, r3
 800f356:	6938      	ldr	r0, [r7, #16]
 800f358:	f7ff ff14 	bl	800f184 <move_window>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d166      	bne.n	800f430 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	60fa      	str	r2, [r7, #12]
 800f368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f36c:	693a      	ldr	r2, [r7, #16]
 800f36e:	4413      	add	r3, r2
 800f370:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f374:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	0a5b      	lsrs	r3, r3, #9
 800f37e:	4413      	add	r3, r2
 800f380:	4619      	mov	r1, r3
 800f382:	6938      	ldr	r0, [r7, #16]
 800f384:	f7ff fefe 	bl	800f184 <move_window>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d152      	bne.n	800f434 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f394:	693a      	ldr	r2, [r7, #16]
 800f396:	4413      	add	r3, r2
 800f398:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f39c:	021b      	lsls	r3, r3, #8
 800f39e:	68ba      	ldr	r2, [r7, #8]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	f003 0301 	and.w	r3, r3, #1
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d002      	beq.n	800f3b4 <get_fat+0xba>
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	091b      	lsrs	r3, r3, #4
 800f3b2:	e002      	b.n	800f3ba <get_fat+0xc0>
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f3ba:	617b      	str	r3, [r7, #20]
			break;
 800f3bc:	e03f      	b.n	800f43e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	0a1b      	lsrs	r3, r3, #8
 800f3c6:	4413      	add	r3, r2
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	6938      	ldr	r0, [r7, #16]
 800f3cc:	f7ff feda 	bl	800f184 <move_window>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d130      	bne.n	800f438 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f3dc:	683b      	ldr	r3, [r7, #0]
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f3e4:	4413      	add	r3, r2
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7ff fbea 	bl	800ebc0 <ld_word>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	617b      	str	r3, [r7, #20]
			break;
 800f3f0:	e025      	b.n	800f43e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	09db      	lsrs	r3, r3, #7
 800f3fa:	4413      	add	r3, r2
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6938      	ldr	r0, [r7, #16]
 800f400:	f7ff fec0 	bl	800f184 <move_window>
 800f404:	4603      	mov	r3, r0
 800f406:	2b00      	cmp	r3, #0
 800f408:	d118      	bne.n	800f43c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f410:	683b      	ldr	r3, [r7, #0]
 800f412:	009b      	lsls	r3, r3, #2
 800f414:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f418:	4413      	add	r3, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff fbe8 	bl	800ebf0 <ld_dword>
 800f420:	4603      	mov	r3, r0
 800f422:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f426:	617b      	str	r3, [r7, #20]
			break;
 800f428:	e009      	b.n	800f43e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f42a:	2301      	movs	r3, #1
 800f42c:	617b      	str	r3, [r7, #20]
 800f42e:	e006      	b.n	800f43e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f430:	bf00      	nop
 800f432:	e004      	b.n	800f43e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f434:	bf00      	nop
 800f436:	e002      	b.n	800f43e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f438:	bf00      	nop
 800f43a:	e000      	b.n	800f43e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f43c:	bf00      	nop
		}
	}

	return val;
 800f43e:	697b      	ldr	r3, [r7, #20]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3718      	adds	r7, #24
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f448:	b590      	push	{r4, r7, lr}
 800f44a:	b089      	sub	sp, #36	@ 0x24
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f454:	2302      	movs	r3, #2
 800f456:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	f240 80d9 	bls.w	800f612 <put_fat+0x1ca>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	69db      	ldr	r3, [r3, #28]
 800f464:	68ba      	ldr	r2, [r7, #8]
 800f466:	429a      	cmp	r2, r3
 800f468:	f080 80d3 	bcs.w	800f612 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	2b03      	cmp	r3, #3
 800f472:	f000 8096 	beq.w	800f5a2 <put_fat+0x15a>
 800f476:	2b03      	cmp	r3, #3
 800f478:	f300 80cb 	bgt.w	800f612 <put_fat+0x1ca>
 800f47c:	2b01      	cmp	r3, #1
 800f47e:	d002      	beq.n	800f486 <put_fat+0x3e>
 800f480:	2b02      	cmp	r3, #2
 800f482:	d06e      	beq.n	800f562 <put_fat+0x11a>
 800f484:	e0c5      	b.n	800f612 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	61bb      	str	r3, [r7, #24]
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	085b      	lsrs	r3, r3, #1
 800f48e:	69ba      	ldr	r2, [r7, #24]
 800f490:	4413      	add	r3, r2
 800f492:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	0a5b      	lsrs	r3, r3, #9
 800f49c:	4413      	add	r3, r2
 800f49e:	4619      	mov	r1, r3
 800f4a0:	68f8      	ldr	r0, [r7, #12]
 800f4a2:	f7ff fe6f 	bl	800f184 <move_window>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f4aa:	7ffb      	ldrb	r3, [r7, #31]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	f040 80a9 	bne.w	800f604 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	1c59      	adds	r1, r3, #1
 800f4bc:	61b9      	str	r1, [r7, #24]
 800f4be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4c2:	4413      	add	r3, r2
 800f4c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	f003 0301 	and.w	r3, r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00d      	beq.n	800f4ec <put_fat+0xa4>
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	b25b      	sxtb	r3, r3
 800f4d6:	f003 030f 	and.w	r3, r3, #15
 800f4da:	b25a      	sxtb	r2, r3
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	011b      	lsls	r3, r3, #4
 800f4e2:	b25b      	sxtb	r3, r3
 800f4e4:	4313      	orrs	r3, r2
 800f4e6:	b25b      	sxtb	r3, r3
 800f4e8:	b2db      	uxtb	r3, r3
 800f4ea:	e001      	b.n	800f4f0 <put_fat+0xa8>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	0a5b      	lsrs	r3, r3, #9
 800f502:	4413      	add	r3, r2
 800f504:	4619      	mov	r1, r3
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fe3c 	bl	800f184 <move_window>
 800f50c:	4603      	mov	r3, r0
 800f50e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f510:	7ffb      	ldrb	r3, [r7, #31]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d178      	bne.n	800f608 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f522:	4413      	add	r3, r2
 800f524:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f526:	68bb      	ldr	r3, [r7, #8]
 800f528:	f003 0301 	and.w	r3, r3, #1
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d003      	beq.n	800f538 <put_fat+0xf0>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	091b      	lsrs	r3, r3, #4
 800f534:	b2db      	uxtb	r3, r3
 800f536:	e00e      	b.n	800f556 <put_fat+0x10e>
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	b25b      	sxtb	r3, r3
 800f53e:	f023 030f 	bic.w	r3, r3, #15
 800f542:	b25a      	sxtb	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	0a1b      	lsrs	r3, r3, #8
 800f548:	b25b      	sxtb	r3, r3
 800f54a:	f003 030f 	and.w	r3, r3, #15
 800f54e:	b25b      	sxtb	r3, r3
 800f550:	4313      	orrs	r3, r2
 800f552:	b25b      	sxtb	r3, r3
 800f554:	b2db      	uxtb	r3, r3
 800f556:	697a      	ldr	r2, [r7, #20]
 800f558:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2201      	movs	r2, #1
 800f55e:	70da      	strb	r2, [r3, #3]
			break;
 800f560:	e057      	b.n	800f612 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	0a1b      	lsrs	r3, r3, #8
 800f56a:	4413      	add	r3, r2
 800f56c:	4619      	mov	r1, r3
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f7ff fe08 	bl	800f184 <move_window>
 800f574:	4603      	mov	r3, r0
 800f576:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f578:	7ffb      	ldrb	r3, [r7, #31]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d146      	bne.n	800f60c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	005b      	lsls	r3, r3, #1
 800f588:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f58c:	4413      	add	r3, r2
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	b292      	uxth	r2, r2
 800f592:	4611      	mov	r1, r2
 800f594:	4618      	mov	r0, r3
 800f596:	f7ff fb4e 	bl	800ec36 <st_word>
			fs->wflag = 1;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2201      	movs	r2, #1
 800f59e:	70da      	strb	r2, [r3, #3]
			break;
 800f5a0:	e037      	b.n	800f612 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	09db      	lsrs	r3, r3, #7
 800f5aa:	4413      	add	r3, r2
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f7ff fde8 	bl	800f184 <move_window>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f5b8:	7ffb      	ldrb	r3, [r7, #31]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d128      	bne.n	800f610 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f5ca:	68bb      	ldr	r3, [r7, #8]
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f5d2:	4413      	add	r3, r2
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f7ff fb0b 	bl	800ebf0 <ld_dword>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f5e0:	4323      	orrs	r3, r4
 800f5e2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	009b      	lsls	r3, r3, #2
 800f5ee:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f5f2:	4413      	add	r3, r2
 800f5f4:	6879      	ldr	r1, [r7, #4]
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff fb38 	bl	800ec6c <st_dword>
			fs->wflag = 1;
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	2201      	movs	r2, #1
 800f600:	70da      	strb	r2, [r3, #3]
			break;
 800f602:	e006      	b.n	800f612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f604:	bf00      	nop
 800f606:	e004      	b.n	800f612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f608:	bf00      	nop
 800f60a:	e002      	b.n	800f612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f60c:	bf00      	nop
 800f60e:	e000      	b.n	800f612 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f610:	bf00      	nop
		}
	}
	return res;
 800f612:	7ffb      	ldrb	r3, [r7, #31]
}
 800f614:	4618      	mov	r0, r3
 800f616:	3724      	adds	r7, #36	@ 0x24
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd90      	pop	{r4, r7, pc}

0800f61c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b088      	sub	sp, #32
 800f620:	af00      	add	r7, sp, #0
 800f622:	60f8      	str	r0, [r7, #12]
 800f624:	60b9      	str	r1, [r7, #8]
 800f626:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2b01      	cmp	r3, #1
 800f636:	d904      	bls.n	800f642 <remove_chain+0x26>
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	69db      	ldr	r3, [r3, #28]
 800f63c:	68ba      	ldr	r2, [r7, #8]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d301      	bcc.n	800f646 <remove_chain+0x2a>
 800f642:	2302      	movs	r3, #2
 800f644:	e04b      	b.n	800f6de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00c      	beq.n	800f666 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f64c:	f04f 32ff 	mov.w	r2, #4294967295
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	69b8      	ldr	r0, [r7, #24]
 800f654:	f7ff fef8 	bl	800f448 <put_fat>
 800f658:	4603      	mov	r3, r0
 800f65a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f65c:	7ffb      	ldrb	r3, [r7, #31]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d001      	beq.n	800f666 <remove_chain+0x4a>
 800f662:	7ffb      	ldrb	r3, [r7, #31]
 800f664:	e03b      	b.n	800f6de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f666:	68b9      	ldr	r1, [r7, #8]
 800f668:	68f8      	ldr	r0, [r7, #12]
 800f66a:	f7ff fe46 	bl	800f2fa <get_fat>
 800f66e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d031      	beq.n	800f6da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f676:	697b      	ldr	r3, [r7, #20]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d101      	bne.n	800f680 <remove_chain+0x64>
 800f67c:	2302      	movs	r3, #2
 800f67e:	e02e      	b.n	800f6de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f686:	d101      	bne.n	800f68c <remove_chain+0x70>
 800f688:	2301      	movs	r3, #1
 800f68a:	e028      	b.n	800f6de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f68c:	2200      	movs	r2, #0
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	69b8      	ldr	r0, [r7, #24]
 800f692:	f7ff fed9 	bl	800f448 <put_fat>
 800f696:	4603      	mov	r3, r0
 800f698:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f69a:	7ffb      	ldrb	r3, [r7, #31]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d001      	beq.n	800f6a4 <remove_chain+0x88>
 800f6a0:	7ffb      	ldrb	r3, [r7, #31]
 800f6a2:	e01c      	b.n	800f6de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	699a      	ldr	r2, [r3, #24]
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	69db      	ldr	r3, [r3, #28]
 800f6ac:	3b02      	subs	r3, #2
 800f6ae:	429a      	cmp	r2, r3
 800f6b0:	d20b      	bcs.n	800f6ca <remove_chain+0xae>
			fs->free_clst++;
 800f6b2:	69bb      	ldr	r3, [r7, #24]
 800f6b4:	699b      	ldr	r3, [r3, #24]
 800f6b6:	1c5a      	adds	r2, r3, #1
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f6bc:	69bb      	ldr	r3, [r7, #24]
 800f6be:	791b      	ldrb	r3, [r3, #4]
 800f6c0:	f043 0301 	orr.w	r3, r3, #1
 800f6c4:	b2da      	uxtb	r2, r3
 800f6c6:	69bb      	ldr	r3, [r7, #24]
 800f6c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f6ca:	697b      	ldr	r3, [r7, #20]
 800f6cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f6ce:	69bb      	ldr	r3, [r7, #24]
 800f6d0:	69db      	ldr	r3, [r3, #28]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d3c6      	bcc.n	800f666 <remove_chain+0x4a>
 800f6d8:	e000      	b.n	800f6dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f6da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f6dc:	2300      	movs	r3, #0
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3720      	adds	r7, #32
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}

0800f6e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f6e6:	b580      	push	{r7, lr}
 800f6e8:	b088      	sub	sp, #32
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d10d      	bne.n	800f718 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d004      	beq.n	800f712 <create_chain+0x2c>
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	69db      	ldr	r3, [r3, #28]
 800f70c:	69ba      	ldr	r2, [r7, #24]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d31b      	bcc.n	800f74a <create_chain+0x64>
 800f712:	2301      	movs	r3, #1
 800f714:	61bb      	str	r3, [r7, #24]
 800f716:	e018      	b.n	800f74a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f7ff fded 	bl	800f2fa <get_fat>
 800f720:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d801      	bhi.n	800f72c <create_chain+0x46>
 800f728:	2301      	movs	r3, #1
 800f72a:	e070      	b.n	800f80e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f732:	d101      	bne.n	800f738 <create_chain+0x52>
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	e06a      	b.n	800f80e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f738:	693b      	ldr	r3, [r7, #16]
 800f73a:	69db      	ldr	r3, [r3, #28]
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d201      	bcs.n	800f746 <create_chain+0x60>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	e063      	b.n	800f80e <create_chain+0x128>
		scl = clst;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	3301      	adds	r3, #1
 800f752:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	69db      	ldr	r3, [r3, #28]
 800f758:	69fa      	ldr	r2, [r7, #28]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d307      	bcc.n	800f76e <create_chain+0x88>
				ncl = 2;
 800f75e:	2302      	movs	r3, #2
 800f760:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f762:	69fa      	ldr	r2, [r7, #28]
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	429a      	cmp	r2, r3
 800f768:	d901      	bls.n	800f76e <create_chain+0x88>
 800f76a:	2300      	movs	r3, #0
 800f76c:	e04f      	b.n	800f80e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f76e:	69f9      	ldr	r1, [r7, #28]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f7ff fdc2 	bl	800f2fa <get_fat>
 800f776:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d00e      	beq.n	800f79c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d003      	beq.n	800f78c <create_chain+0xa6>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78a:	d101      	bne.n	800f790 <create_chain+0xaa>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	e03e      	b.n	800f80e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f790:	69fa      	ldr	r2, [r7, #28]
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	429a      	cmp	r2, r3
 800f796:	d1da      	bne.n	800f74e <create_chain+0x68>
 800f798:	2300      	movs	r3, #0
 800f79a:	e038      	b.n	800f80e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f79c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f79e:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a2:	69f9      	ldr	r1, [r7, #28]
 800f7a4:	6938      	ldr	r0, [r7, #16]
 800f7a6:	f7ff fe4f 	bl	800f448 <put_fat>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f7ae:	7dfb      	ldrb	r3, [r7, #23]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d109      	bne.n	800f7c8 <create_chain+0xe2>
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d006      	beq.n	800f7c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f7ba:	69fa      	ldr	r2, [r7, #28]
 800f7bc:	6839      	ldr	r1, [r7, #0]
 800f7be:	6938      	ldr	r0, [r7, #16]
 800f7c0:	f7ff fe42 	bl	800f448 <put_fat>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f7c8:	7dfb      	ldrb	r3, [r7, #23]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d116      	bne.n	800f7fc <create_chain+0x116>
		fs->last_clst = ncl;
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	69fa      	ldr	r2, [r7, #28]
 800f7d2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	699a      	ldr	r2, [r3, #24]
 800f7d8:	693b      	ldr	r3, [r7, #16]
 800f7da:	69db      	ldr	r3, [r3, #28]
 800f7dc:	3b02      	subs	r3, #2
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d804      	bhi.n	800f7ec <create_chain+0x106>
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	699b      	ldr	r3, [r3, #24]
 800f7e6:	1e5a      	subs	r2, r3, #1
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	791b      	ldrb	r3, [r3, #4]
 800f7f0:	f043 0301 	orr.w	r3, r3, #1
 800f7f4:	b2da      	uxtb	r2, r3
 800f7f6:	693b      	ldr	r3, [r7, #16]
 800f7f8:	711a      	strb	r2, [r3, #4]
 800f7fa:	e007      	b.n	800f80c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
 800f7fe:	2b01      	cmp	r3, #1
 800f800:	d102      	bne.n	800f808 <create_chain+0x122>
 800f802:	f04f 33ff 	mov.w	r3, #4294967295
 800f806:	e000      	b.n	800f80a <create_chain+0x124>
 800f808:	2301      	movs	r3, #1
 800f80a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f80c:	69fb      	ldr	r3, [r7, #28]
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3720      	adds	r7, #32
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f816:	b480      	push	{r7}
 800f818:	b087      	sub	sp, #28
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
 800f81e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f82a:	3304      	adds	r3, #4
 800f82c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f82e:	683b      	ldr	r3, [r7, #0]
 800f830:	0a5b      	lsrs	r3, r3, #9
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	8952      	ldrh	r2, [r2, #10]
 800f836:	fbb3 f3f2 	udiv	r3, r3, r2
 800f83a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	1d1a      	adds	r2, r3, #4
 800f840:	613a      	str	r2, [r7, #16]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d101      	bne.n	800f850 <clmt_clust+0x3a>
 800f84c:	2300      	movs	r3, #0
 800f84e:	e010      	b.n	800f872 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f850:	697a      	ldr	r2, [r7, #20]
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	429a      	cmp	r2, r3
 800f856:	d307      	bcc.n	800f868 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f858:	697a      	ldr	r2, [r7, #20]
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	1ad3      	subs	r3, r2, r3
 800f85e:	617b      	str	r3, [r7, #20]
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	3304      	adds	r3, #4
 800f864:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f866:	e7e9      	b.n	800f83c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f868:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	4413      	add	r3, r2
}
 800f872:	4618      	mov	r0, r3
 800f874:	371c      	adds	r7, #28
 800f876:	46bd      	mov	sp, r7
 800f878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87c:	4770      	bx	lr

0800f87e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f87e:	b580      	push	{r7, lr}
 800f880:	b086      	sub	sp, #24
 800f882:	af00      	add	r7, sp, #0
 800f884:	6078      	str	r0, [r7, #4]
 800f886:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f894:	d204      	bcs.n	800f8a0 <dir_sdi+0x22>
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	f003 031f 	and.w	r3, r3, #31
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d001      	beq.n	800f8a4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f8a0:	2302      	movs	r3, #2
 800f8a2:	e063      	b.n	800f96c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	683a      	ldr	r2, [r7, #0]
 800f8a8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	689b      	ldr	r3, [r3, #8]
 800f8ae:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d106      	bne.n	800f8c4 <dir_sdi+0x46>
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	781b      	ldrb	r3, [r3, #0]
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d902      	bls.n	800f8c4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f8c2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10c      	bne.n	800f8e4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	095b      	lsrs	r3, r3, #5
 800f8ce:	693a      	ldr	r2, [r7, #16]
 800f8d0:	8912      	ldrh	r2, [r2, #8]
 800f8d2:	4293      	cmp	r3, r2
 800f8d4:	d301      	bcc.n	800f8da <dir_sdi+0x5c>
 800f8d6:	2302      	movs	r3, #2
 800f8d8:	e048      	b.n	800f96c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	61da      	str	r2, [r3, #28]
 800f8e2:	e029      	b.n	800f938 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	895b      	ldrh	r3, [r3, #10]
 800f8e8:	025b      	lsls	r3, r3, #9
 800f8ea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f8ec:	e019      	b.n	800f922 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6979      	ldr	r1, [r7, #20]
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7ff fd01 	bl	800f2fa <get_fat>
 800f8f8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f900:	d101      	bne.n	800f906 <dir_sdi+0x88>
 800f902:	2301      	movs	r3, #1
 800f904:	e032      	b.n	800f96c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d904      	bls.n	800f916 <dir_sdi+0x98>
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	429a      	cmp	r2, r3
 800f914:	d301      	bcc.n	800f91a <dir_sdi+0x9c>
 800f916:	2302      	movs	r3, #2
 800f918:	e028      	b.n	800f96c <dir_sdi+0xee>
			ofs -= csz;
 800f91a:	683a      	ldr	r2, [r7, #0]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	1ad3      	subs	r3, r2, r3
 800f920:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	429a      	cmp	r2, r3
 800f928:	d2e1      	bcs.n	800f8ee <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f92a:	6979      	ldr	r1, [r7, #20]
 800f92c:	6938      	ldr	r0, [r7, #16]
 800f92e:	f7ff fcc5 	bl	800f2bc <clust2sect>
 800f932:	4602      	mov	r2, r0
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	697a      	ldr	r2, [r7, #20]
 800f93c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	69db      	ldr	r3, [r3, #28]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d101      	bne.n	800f94a <dir_sdi+0xcc>
 800f946:	2302      	movs	r3, #2
 800f948:	e010      	b.n	800f96c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69da      	ldr	r2, [r3, #28]
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	0a5b      	lsrs	r3, r3, #9
 800f952:	441a      	add	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f964:	441a      	add	r2, r3
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b086      	sub	sp, #24
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	695b      	ldr	r3, [r3, #20]
 800f988:	3320      	adds	r3, #32
 800f98a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	69db      	ldr	r3, [r3, #28]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d003      	beq.n	800f99c <dir_next+0x28>
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f99a:	d301      	bcc.n	800f9a0 <dir_next+0x2c>
 800f99c:	2304      	movs	r3, #4
 800f99e:	e0aa      	b.n	800faf6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f040 8098 	bne.w	800fadc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	69db      	ldr	r3, [r3, #28]
 800f9b0:	1c5a      	adds	r2, r3, #1
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	699b      	ldr	r3, [r3, #24]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d10b      	bne.n	800f9d6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	095b      	lsrs	r3, r3, #5
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	8912      	ldrh	r2, [r2, #8]
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	f0c0 8088 	bcc.w	800fadc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	61da      	str	r2, [r3, #28]
 800f9d2:	2304      	movs	r3, #4
 800f9d4:	e08f      	b.n	800faf6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	0a5b      	lsrs	r3, r3, #9
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	8952      	ldrh	r2, [r2, #10]
 800f9de:	3a01      	subs	r2, #1
 800f9e0:	4013      	ands	r3, r2
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d17a      	bne.n	800fadc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	699b      	ldr	r3, [r3, #24]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4610      	mov	r0, r2
 800f9f0:	f7ff fc83 	bl	800f2fa <get_fat>
 800f9f4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	2b01      	cmp	r3, #1
 800f9fa:	d801      	bhi.n	800fa00 <dir_next+0x8c>
 800f9fc:	2302      	movs	r3, #2
 800f9fe:	e07a      	b.n	800faf6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa06:	d101      	bne.n	800fa0c <dir_next+0x98>
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e074      	b.n	800faf6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	69db      	ldr	r3, [r3, #28]
 800fa10:	697a      	ldr	r2, [r7, #20]
 800fa12:	429a      	cmp	r2, r3
 800fa14:	d358      	bcc.n	800fac8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d104      	bne.n	800fa26 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	2200      	movs	r2, #0
 800fa20:	61da      	str	r2, [r3, #28]
 800fa22:	2304      	movs	r3, #4
 800fa24:	e067      	b.n	800faf6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	699b      	ldr	r3, [r3, #24]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4610      	mov	r0, r2
 800fa30:	f7ff fe59 	bl	800f6e6 <create_chain>
 800fa34:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <dir_next+0xcc>
 800fa3c:	2307      	movs	r3, #7
 800fa3e:	e05a      	b.n	800faf6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	2b01      	cmp	r3, #1
 800fa44:	d101      	bne.n	800fa4a <dir_next+0xd6>
 800fa46:	2302      	movs	r3, #2
 800fa48:	e055      	b.n	800faf6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa50:	d101      	bne.n	800fa56 <dir_next+0xe2>
 800fa52:	2301      	movs	r3, #1
 800fa54:	e04f      	b.n	800faf6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff fb50 	bl	800f0fc <sync_window>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d001      	beq.n	800fa66 <dir_next+0xf2>
 800fa62:	2301      	movs	r3, #1
 800fa64:	e047      	b.n	800faf6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	3338      	adds	r3, #56	@ 0x38
 800fa6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fa6e:	2100      	movs	r1, #0
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7ff f948 	bl	800ed06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa76:	2300      	movs	r3, #0
 800fa78:	613b      	str	r3, [r7, #16]
 800fa7a:	6979      	ldr	r1, [r7, #20]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7ff fc1d 	bl	800f2bc <clust2sect>
 800fa82:	4602      	mov	r2, r0
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	635a      	str	r2, [r3, #52]	@ 0x34
 800fa88:	e012      	b.n	800fab0 <dir_next+0x13c>
						fs->wflag = 1;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fa90:	68f8      	ldr	r0, [r7, #12]
 800fa92:	f7ff fb33 	bl	800f0fc <sync_window>
 800fa96:	4603      	mov	r3, r0
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d001      	beq.n	800faa0 <dir_next+0x12c>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e02a      	b.n	800faf6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3301      	adds	r3, #1
 800faa4:	613b      	str	r3, [r7, #16]
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	635a      	str	r2, [r3, #52]	@ 0x34
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	895b      	ldrh	r3, [r3, #10]
 800fab4:	461a      	mov	r2, r3
 800fab6:	693b      	ldr	r3, [r7, #16]
 800fab8:	4293      	cmp	r3, r2
 800faba:	d3e6      	bcc.n	800fa8a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	1ad2      	subs	r2, r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	697a      	ldr	r2, [r7, #20]
 800facc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800face:	6979      	ldr	r1, [r7, #20]
 800fad0:	68f8      	ldr	r0, [r7, #12]
 800fad2:	f7ff fbf3 	bl	800f2bc <clust2sect>
 800fad6:	4602      	mov	r2, r0
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800faee:	441a      	add	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800faf4:	2300      	movs	r3, #0
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b086      	sub	sp, #24
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fb0e:	2100      	movs	r1, #0
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff feb4 	bl	800f87e <dir_sdi>
 800fb16:	4603      	mov	r3, r0
 800fb18:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb1a:	7dfb      	ldrb	r3, [r7, #23]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d12b      	bne.n	800fb78 <dir_alloc+0x7a>
		n = 0;
 800fb20:	2300      	movs	r3, #0
 800fb22:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	4619      	mov	r1, r3
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f7ff fb2a 	bl	800f184 <move_window>
 800fb30:	4603      	mov	r3, r0
 800fb32:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d11d      	bne.n	800fb76 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	6a1b      	ldr	r3, [r3, #32]
 800fb3e:	781b      	ldrb	r3, [r3, #0]
 800fb40:	2be5      	cmp	r3, #229	@ 0xe5
 800fb42:	d004      	beq.n	800fb4e <dir_alloc+0x50>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6a1b      	ldr	r3, [r3, #32]
 800fb48:	781b      	ldrb	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d107      	bne.n	800fb5e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	3301      	adds	r3, #1
 800fb52:	613b      	str	r3, [r7, #16]
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	429a      	cmp	r2, r3
 800fb5a:	d102      	bne.n	800fb62 <dir_alloc+0x64>
 800fb5c:	e00c      	b.n	800fb78 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fb5e:	2300      	movs	r3, #0
 800fb60:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fb62:	2101      	movs	r1, #1
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f7ff ff05 	bl	800f974 <dir_next>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fb6e:	7dfb      	ldrb	r3, [r7, #23]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d0d7      	beq.n	800fb24 <dir_alloc+0x26>
 800fb74:	e000      	b.n	800fb78 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fb76:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fb78:	7dfb      	ldrb	r3, [r7, #23]
 800fb7a:	2b04      	cmp	r3, #4
 800fb7c:	d101      	bne.n	800fb82 <dir_alloc+0x84>
 800fb7e:	2307      	movs	r3, #7
 800fb80:	75fb      	strb	r3, [r7, #23]
	return res;
 800fb82:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3718      	adds	r7, #24
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	331a      	adds	r3, #26
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7ff f810 	bl	800ebc0 <ld_word>
 800fba0:	4603      	mov	r3, r0
 800fba2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b03      	cmp	r3, #3
 800fbaa:	d109      	bne.n	800fbc0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	3314      	adds	r3, #20
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff f805 	bl	800ebc0 <ld_word>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	041b      	lsls	r3, r3, #16
 800fbba:	68fa      	ldr	r2, [r7, #12]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3710      	adds	r7, #16
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}

0800fbca <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fbca:	b580      	push	{r7, lr}
 800fbcc:	b084      	sub	sp, #16
 800fbce:	af00      	add	r7, sp, #0
 800fbd0:	60f8      	str	r0, [r7, #12]
 800fbd2:	60b9      	str	r1, [r7, #8]
 800fbd4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	331a      	adds	r3, #26
 800fbda:	687a      	ldr	r2, [r7, #4]
 800fbdc:	b292      	uxth	r2, r2
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff f828 	bl	800ec36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	781b      	ldrb	r3, [r3, #0]
 800fbea:	2b03      	cmp	r3, #3
 800fbec:	d109      	bne.n	800fc02 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	f103 0214 	add.w	r2, r3, #20
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	0c1b      	lsrs	r3, r3, #16
 800fbf8:	b29b      	uxth	r3, r3
 800fbfa:	4619      	mov	r1, r3
 800fbfc:	4610      	mov	r0, r2
 800fbfe:	f7ff f81a 	bl	800ec36 <st_word>
	}
}
 800fc02:	bf00      	nop
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
	...

0800fc0c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800fc0c:	b590      	push	{r4, r7, lr}
 800fc0e:	b087      	sub	sp, #28
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
 800fc14:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	331a      	adds	r3, #26
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe ffd0 	bl	800ebc0 <ld_word>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <cmp_lfn+0x1e>
 800fc26:	2300      	movs	r3, #0
 800fc28:	e059      	b.n	800fcde <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fc32:	1e5a      	subs	r2, r3, #1
 800fc34:	4613      	mov	r3, r2
 800fc36:	005b      	lsls	r3, r3, #1
 800fc38:	4413      	add	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fc40:	2301      	movs	r3, #1
 800fc42:	81fb      	strh	r3, [r7, #14]
 800fc44:	2300      	movs	r3, #0
 800fc46:	613b      	str	r3, [r7, #16]
 800fc48:	e033      	b.n	800fcb2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fc4a:	4a27      	ldr	r2, [pc, #156]	@ (800fce8 <cmp_lfn+0xdc>)
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	4413      	add	r3, r2
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	461a      	mov	r2, r3
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	4413      	add	r3, r2
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7fe ffb1 	bl	800ebc0 <ld_word>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fc62:	89fb      	ldrh	r3, [r7, #14]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d01a      	beq.n	800fc9e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	2bfe      	cmp	r3, #254	@ 0xfe
 800fc6c:	d812      	bhi.n	800fc94 <cmp_lfn+0x88>
 800fc6e:	89bb      	ldrh	r3, [r7, #12]
 800fc70:	4618      	mov	r0, r3
 800fc72:	f002 fb7d 	bl	8012370 <ff_wtoupper>
 800fc76:	4603      	mov	r3, r0
 800fc78:	461c      	mov	r4, r3
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	1c5a      	adds	r2, r3, #1
 800fc7e:	617a      	str	r2, [r7, #20]
 800fc80:	005b      	lsls	r3, r3, #1
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	4413      	add	r3, r2
 800fc86:	881b      	ldrh	r3, [r3, #0]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f002 fb71 	bl	8012370 <ff_wtoupper>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	429c      	cmp	r4, r3
 800fc92:	d001      	beq.n	800fc98 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fc94:	2300      	movs	r3, #0
 800fc96:	e022      	b.n	800fcde <cmp_lfn+0xd2>
			}
			wc = uc;
 800fc98:	89bb      	ldrh	r3, [r7, #12]
 800fc9a:	81fb      	strh	r3, [r7, #14]
 800fc9c:	e006      	b.n	800fcac <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fc9e:	89bb      	ldrh	r3, [r7, #12]
 800fca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fca4:	4293      	cmp	r3, r2
 800fca6:	d001      	beq.n	800fcac <cmp_lfn+0xa0>
 800fca8:	2300      	movs	r3, #0
 800fcaa:	e018      	b.n	800fcde <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	3301      	adds	r3, #1
 800fcb0:	613b      	str	r3, [r7, #16]
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	2b0c      	cmp	r3, #12
 800fcb6:	d9c8      	bls.n	800fc4a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d00b      	beq.n	800fcdc <cmp_lfn+0xd0>
 800fcc4:	89fb      	ldrh	r3, [r7, #14]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d008      	beq.n	800fcdc <cmp_lfn+0xd0>
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	005b      	lsls	r3, r3, #1
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <cmp_lfn+0xd0>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	e000      	b.n	800fcde <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fcdc:	2301      	movs	r3, #1
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd90      	pop	{r4, r7, pc}
 800fce6:	bf00      	nop
 800fce8:	08018c90 	.word	0x08018c90

0800fcec <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b086      	sub	sp, #24
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	331a      	adds	r3, #26
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe ff60 	bl	800ebc0 <ld_word>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d001      	beq.n	800fd0a <pick_lfn+0x1e>
 800fd06:	2300      	movs	r3, #0
 800fd08:	e04d      	b.n	800fda6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	781b      	ldrb	r3, [r3, #0]
 800fd0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd12:	1e5a      	subs	r2, r3, #1
 800fd14:	4613      	mov	r3, r2
 800fd16:	005b      	lsls	r3, r3, #1
 800fd18:	4413      	add	r3, r2
 800fd1a:	009b      	lsls	r3, r3, #2
 800fd1c:	4413      	add	r3, r2
 800fd1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fd20:	2301      	movs	r3, #1
 800fd22:	81fb      	strh	r3, [r7, #14]
 800fd24:	2300      	movs	r3, #0
 800fd26:	613b      	str	r3, [r7, #16]
 800fd28:	e028      	b.n	800fd7c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fd2a:	4a21      	ldr	r2, [pc, #132]	@ (800fdb0 <pick_lfn+0xc4>)
 800fd2c:	693b      	ldr	r3, [r7, #16]
 800fd2e:	4413      	add	r3, r2
 800fd30:	781b      	ldrb	r3, [r3, #0]
 800fd32:	461a      	mov	r2, r3
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	4413      	add	r3, r2
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fe ff41 	bl	800ebc0 <ld_word>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fd42:	89fb      	ldrh	r3, [r7, #14]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00f      	beq.n	800fd68 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd4c:	d901      	bls.n	800fd52 <pick_lfn+0x66>
 800fd4e:	2300      	movs	r3, #0
 800fd50:	e029      	b.n	800fda6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd52:	89bb      	ldrh	r3, [r7, #12]
 800fd54:	81fb      	strh	r3, [r7, #14]
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	1c5a      	adds	r2, r3, #1
 800fd5a:	617a      	str	r2, [r7, #20]
 800fd5c:	005b      	lsls	r3, r3, #1
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	4413      	add	r3, r2
 800fd62:	89fa      	ldrh	r2, [r7, #14]
 800fd64:	801a      	strh	r2, [r3, #0]
 800fd66:	e006      	b.n	800fd76 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fd68:	89bb      	ldrh	r3, [r7, #12]
 800fd6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	d001      	beq.n	800fd76 <pick_lfn+0x8a>
 800fd72:	2300      	movs	r3, #0
 800fd74:	e017      	b.n	800fda6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	613b      	str	r3, [r7, #16]
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	2b0c      	cmp	r3, #12
 800fd80:	d9d3      	bls.n	800fd2a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fd82:	683b      	ldr	r3, [r7, #0]
 800fd84:	781b      	ldrb	r3, [r3, #0]
 800fd86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d00a      	beq.n	800fda4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	2bfe      	cmp	r3, #254	@ 0xfe
 800fd92:	d901      	bls.n	800fd98 <pick_lfn+0xac>
 800fd94:	2300      	movs	r3, #0
 800fd96:	e006      	b.n	800fda6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	687a      	ldr	r2, [r7, #4]
 800fd9e:	4413      	add	r3, r2
 800fda0:	2200      	movs	r2, #0
 800fda2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fda4:	2301      	movs	r3, #1
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3718      	adds	r7, #24
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	08018c90 	.word	0x08018c90

0800fdb4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	60f8      	str	r0, [r7, #12]
 800fdbc:	60b9      	str	r1, [r7, #8]
 800fdbe:	4611      	mov	r1, r2
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	460b      	mov	r3, r1
 800fdc4:	71fb      	strb	r3, [r7, #7]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	330d      	adds	r3, #13
 800fdce:	79ba      	ldrb	r2, [r7, #6]
 800fdd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	330b      	adds	r3, #11
 800fdd6:	220f      	movs	r2, #15
 800fdd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	330c      	adds	r3, #12
 800fdde:	2200      	movs	r2, #0
 800fde0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	331a      	adds	r3, #26
 800fde6:	2100      	movs	r1, #0
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fe ff24 	bl	800ec36 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fdee:	79fb      	ldrb	r3, [r7, #7]
 800fdf0:	1e5a      	subs	r2, r3, #1
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	005b      	lsls	r3, r3, #1
 800fdf6:	4413      	add	r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	4413      	add	r3, r2
 800fdfc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	82fb      	strh	r3, [r7, #22]
 800fe02:	2300      	movs	r3, #0
 800fe04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fe06:	8afb      	ldrh	r3, [r7, #22]
 800fe08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d007      	beq.n	800fe20 <put_lfn+0x6c>
 800fe10:	69fb      	ldr	r3, [r7, #28]
 800fe12:	1c5a      	adds	r2, r3, #1
 800fe14:	61fa      	str	r2, [r7, #28]
 800fe16:	005b      	lsls	r3, r3, #1
 800fe18:	68fa      	ldr	r2, [r7, #12]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fe20:	4a17      	ldr	r2, [pc, #92]	@ (800fe80 <put_lfn+0xcc>)
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	4413      	add	r3, r2
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	461a      	mov	r2, r3
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	8afa      	ldrh	r2, [r7, #22]
 800fe30:	4611      	mov	r1, r2
 800fe32:	4618      	mov	r0, r3
 800fe34:	f7fe feff 	bl	800ec36 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fe38:	8afb      	ldrh	r3, [r7, #22]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d102      	bne.n	800fe44 <put_lfn+0x90>
 800fe3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fe42:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fe44:	69bb      	ldr	r3, [r7, #24]
 800fe46:	3301      	adds	r3, #1
 800fe48:	61bb      	str	r3, [r7, #24]
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	2b0c      	cmp	r3, #12
 800fe4e:	d9da      	bls.n	800fe06 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fe50:	8afb      	ldrh	r3, [r7, #22]
 800fe52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d006      	beq.n	800fe68 <put_lfn+0xb4>
 800fe5a:	69fb      	ldr	r3, [r7, #28]
 800fe5c:	005b      	lsls	r3, r3, #1
 800fe5e:	68fa      	ldr	r2, [r7, #12]
 800fe60:	4413      	add	r3, r2
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d103      	bne.n	800fe70 <put_lfn+0xbc>
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe6e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	79fa      	ldrb	r2, [r7, #7]
 800fe74:	701a      	strb	r2, [r3, #0]
}
 800fe76:	bf00      	nop
 800fe78:	3720      	adds	r7, #32
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	08018c90 	.word	0x08018c90

0800fe84 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08c      	sub	sp, #48	@ 0x30
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
 800fe90:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fe92:	220b      	movs	r2, #11
 800fe94:	68b9      	ldr	r1, [r7, #8]
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f7fe ff14 	bl	800ecc4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	2b05      	cmp	r3, #5
 800fea0:	d929      	bls.n	800fef6 <gen_numname+0x72>
		sr = seq;
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fea6:	e020      	b.n	800feea <gen_numname+0x66>
			wc = *lfn++;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	1c9a      	adds	r2, r3, #2
 800feac:	607a      	str	r2, [r7, #4]
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800feb2:	2300      	movs	r3, #0
 800feb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800feb6:	e015      	b.n	800fee4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	005a      	lsls	r2, r3, #1
 800febc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800febe:	f003 0301 	and.w	r3, r3, #1
 800fec2:	4413      	add	r3, r2
 800fec4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fec6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fec8:	085b      	lsrs	r3, r3, #1
 800feca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <gen_numname+0x5a>
 800fed6:	69fa      	ldr	r2, [r7, #28]
 800fed8:	4b30      	ldr	r3, [pc, #192]	@ (800ff9c <gen_numname+0x118>)
 800feda:	4053      	eors	r3, r2
 800fedc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee0:	3301      	adds	r3, #1
 800fee2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fee6:	2b0f      	cmp	r3, #15
 800fee8:	d9e6      	bls.n	800feb8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	881b      	ldrh	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d1da      	bne.n	800fea8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fef2:	69fb      	ldr	r3, [r7, #28]
 800fef4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fef6:	2307      	movs	r3, #7
 800fef8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	f003 030f 	and.w	r3, r3, #15
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	3330      	adds	r3, #48	@ 0x30
 800ff06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800ff0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff0e:	2b39      	cmp	r3, #57	@ 0x39
 800ff10:	d904      	bls.n	800ff1c <gen_numname+0x98>
 800ff12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ff16:	3307      	adds	r3, #7
 800ff18:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800ff1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff1e:	1e5a      	subs	r2, r3, #1
 800ff20:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ff22:	3330      	adds	r3, #48	@ 0x30
 800ff24:	443b      	add	r3, r7
 800ff26:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800ff2a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	091b      	lsrs	r3, r3, #4
 800ff32:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1df      	bne.n	800fefa <gen_numname+0x76>
	ns[i] = '~';
 800ff3a:	f107 0214 	add.w	r2, r7, #20
 800ff3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff40:	4413      	add	r3, r2
 800ff42:	227e      	movs	r2, #126	@ 0x7e
 800ff44:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ff46:	2300      	movs	r3, #0
 800ff48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff4a:	e002      	b.n	800ff52 <gen_numname+0xce>
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff4e:	3301      	adds	r3, #1
 800ff50:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d205      	bcs.n	800ff66 <gen_numname+0xe2>
 800ff5a:	68fa      	ldr	r2, [r7, #12]
 800ff5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5e:	4413      	add	r3, r2
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	2b20      	cmp	r3, #32
 800ff64:	d1f2      	bne.n	800ff4c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ff66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff68:	2b07      	cmp	r3, #7
 800ff6a:	d807      	bhi.n	800ff7c <gen_numname+0xf8>
 800ff6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff6e:	1c5a      	adds	r2, r3, #1
 800ff70:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ff72:	3330      	adds	r3, #48	@ 0x30
 800ff74:	443b      	add	r3, r7
 800ff76:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ff7a:	e000      	b.n	800ff7e <gen_numname+0xfa>
 800ff7c:	2120      	movs	r1, #32
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff80:	1c5a      	adds	r2, r3, #1
 800ff82:	627a      	str	r2, [r7, #36]	@ 0x24
 800ff84:	68fa      	ldr	r2, [r7, #12]
 800ff86:	4413      	add	r3, r2
 800ff88:	460a      	mov	r2, r1
 800ff8a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	2b07      	cmp	r3, #7
 800ff90:	d9e9      	bls.n	800ff66 <gen_numname+0xe2>
}
 800ff92:	bf00      	nop
 800ff94:	bf00      	nop
 800ff96:	3730      	adds	r7, #48	@ 0x30
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bd80      	pop	{r7, pc}
 800ff9c:	00011021 	.word	0x00011021

0800ffa0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b085      	sub	sp, #20
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ffac:	230b      	movs	r3, #11
 800ffae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ffb0:	7bfb      	ldrb	r3, [r7, #15]
 800ffb2:	b2da      	uxtb	r2, r3
 800ffb4:	0852      	lsrs	r2, r2, #1
 800ffb6:	01db      	lsls	r3, r3, #7
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	1c59      	adds	r1, r3, #1
 800ffc0:	6079      	str	r1, [r7, #4]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	3b01      	subs	r3, #1
 800ffcc:	60bb      	str	r3, [r7, #8]
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1ed      	bne.n	800ffb0 <sum_sfn+0x10>
	return sum;
 800ffd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	3714      	adds	r7, #20
 800ffda:	46bd      	mov	sp, r7
 800ffdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe0:	4770      	bx	lr

0800ffe2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ffe2:	b580      	push	{r7, lr}
 800ffe4:	b086      	sub	sp, #24
 800ffe6:	af00      	add	r7, sp, #0
 800ffe8:	6078      	str	r0, [r7, #4]
 800ffea:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ffec:	2304      	movs	r3, #4
 800ffee:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800fff6:	23ff      	movs	r3, #255	@ 0xff
 800fff8:	757b      	strb	r3, [r7, #21]
 800fffa:	23ff      	movs	r3, #255	@ 0xff
 800fffc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800fffe:	e081      	b.n	8010104 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	69db      	ldr	r3, [r3, #28]
 8010004:	4619      	mov	r1, r3
 8010006:	6938      	ldr	r0, [r7, #16]
 8010008:	f7ff f8bc 	bl	800f184 <move_window>
 801000c:	4603      	mov	r3, r0
 801000e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010010:	7dfb      	ldrb	r3, [r7, #23]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d17c      	bne.n	8010110 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	781b      	ldrb	r3, [r3, #0]
 801001c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801001e:	7dbb      	ldrb	r3, [r7, #22]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d102      	bne.n	801002a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010024:	2304      	movs	r3, #4
 8010026:	75fb      	strb	r3, [r7, #23]
 8010028:	e077      	b.n	801011a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a1b      	ldr	r3, [r3, #32]
 801002e:	330b      	adds	r3, #11
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8010036:	73fb      	strb	r3, [r7, #15]
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7bfa      	ldrb	r2, [r7, #15]
 801003c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801003e:	7dbb      	ldrb	r3, [r7, #22]
 8010040:	2be5      	cmp	r3, #229	@ 0xe5
 8010042:	d00e      	beq.n	8010062 <dir_read+0x80>
 8010044:	7dbb      	ldrb	r3, [r7, #22]
 8010046:	2b2e      	cmp	r3, #46	@ 0x2e
 8010048:	d00b      	beq.n	8010062 <dir_read+0x80>
 801004a:	7bfb      	ldrb	r3, [r7, #15]
 801004c:	f023 0320 	bic.w	r3, r3, #32
 8010050:	2b08      	cmp	r3, #8
 8010052:	bf0c      	ite	eq
 8010054:	2301      	moveq	r3, #1
 8010056:	2300      	movne	r3, #0
 8010058:	b2db      	uxtb	r3, r3
 801005a:	461a      	mov	r2, r3
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	4293      	cmp	r3, r2
 8010060:	d002      	beq.n	8010068 <dir_read+0x86>
				ord = 0xFF;
 8010062:	23ff      	movs	r3, #255	@ 0xff
 8010064:	757b      	strb	r3, [r7, #21]
 8010066:	e044      	b.n	80100f2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8010068:	7bfb      	ldrb	r3, [r7, #15]
 801006a:	2b0f      	cmp	r3, #15
 801006c:	d12f      	bne.n	80100ce <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 801006e:	7dbb      	ldrb	r3, [r7, #22]
 8010070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00d      	beq.n	8010094 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a1b      	ldr	r3, [r3, #32]
 801007c:	7b5b      	ldrb	r3, [r3, #13]
 801007e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8010080:	7dbb      	ldrb	r3, [r7, #22]
 8010082:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010086:	75bb      	strb	r3, [r7, #22]
 8010088:	7dbb      	ldrb	r3, [r7, #22]
 801008a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	695a      	ldr	r2, [r3, #20]
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010094:	7dba      	ldrb	r2, [r7, #22]
 8010096:	7d7b      	ldrb	r3, [r7, #21]
 8010098:	429a      	cmp	r2, r3
 801009a:	d115      	bne.n	80100c8 <dir_read+0xe6>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6a1b      	ldr	r3, [r3, #32]
 80100a0:	330d      	adds	r3, #13
 80100a2:	781b      	ldrb	r3, [r3, #0]
 80100a4:	7d3a      	ldrb	r2, [r7, #20]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d10e      	bne.n	80100c8 <dir_read+0xe6>
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6a1b      	ldr	r3, [r3, #32]
 80100b2:	4619      	mov	r1, r3
 80100b4:	4610      	mov	r0, r2
 80100b6:	f7ff fe19 	bl	800fcec <pick_lfn>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d003      	beq.n	80100c8 <dir_read+0xe6>
 80100c0:	7d7b      	ldrb	r3, [r7, #21]
 80100c2:	3b01      	subs	r3, #1
 80100c4:	b2db      	uxtb	r3, r3
 80100c6:	e000      	b.n	80100ca <dir_read+0xe8>
 80100c8:	23ff      	movs	r3, #255	@ 0xff
 80100ca:	757b      	strb	r3, [r7, #21]
 80100cc:	e011      	b.n	80100f2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80100ce:	7d7b      	ldrb	r3, [r7, #21]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d109      	bne.n	80100e8 <dir_read+0x106>
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6a1b      	ldr	r3, [r3, #32]
 80100d8:	4618      	mov	r0, r3
 80100da:	f7ff ff61 	bl	800ffa0 <sum_sfn>
 80100de:	4603      	mov	r3, r0
 80100e0:	461a      	mov	r2, r3
 80100e2:	7d3b      	ldrb	r3, [r7, #20]
 80100e4:	4293      	cmp	r3, r2
 80100e6:	d015      	beq.n	8010114 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f04f 32ff 	mov.w	r2, #4294967295
 80100ee:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 80100f0:	e010      	b.n	8010114 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80100f2:	2100      	movs	r1, #0
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fc3d 	bl	800f974 <dir_next>
 80100fa:	4603      	mov	r3, r0
 80100fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d109      	bne.n	8010118 <dir_read+0x136>
	while (dp->sect) {
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	69db      	ldr	r3, [r3, #28]
 8010108:	2b00      	cmp	r3, #0
 801010a:	f47f af79 	bne.w	8010000 <dir_read+0x1e>
 801010e:	e004      	b.n	801011a <dir_read+0x138>
		if (res != FR_OK) break;
 8010110:	bf00      	nop
 8010112:	e002      	b.n	801011a <dir_read+0x138>
					break;
 8010114:	bf00      	nop
 8010116:	e000      	b.n	801011a <dir_read+0x138>
		if (res != FR_OK) break;
 8010118:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801011a:	7dfb      	ldrb	r3, [r7, #23]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d002      	beq.n	8010126 <dir_read+0x144>
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2200      	movs	r2, #0
 8010124:	61da      	str	r2, [r3, #28]
	return res;
 8010126:	7dfb      	ldrb	r3, [r7, #23]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3718      	adds	r7, #24
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b086      	sub	sp, #24
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801013e:	2100      	movs	r1, #0
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7ff fb9c 	bl	800f87e <dir_sdi>
 8010146:	4603      	mov	r3, r0
 8010148:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801014a:	7dfb      	ldrb	r3, [r7, #23]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d001      	beq.n	8010154 <dir_find+0x24>
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	e0a9      	b.n	80102a8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010154:	23ff      	movs	r3, #255	@ 0xff
 8010156:	753b      	strb	r3, [r7, #20]
 8010158:	7d3b      	ldrb	r3, [r7, #20]
 801015a:	757b      	strb	r3, [r7, #21]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f04f 32ff 	mov.w	r2, #4294967295
 8010162:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	4619      	mov	r1, r3
 801016a:	6938      	ldr	r0, [r7, #16]
 801016c:	f7ff f80a 	bl	800f184 <move_window>
 8010170:	4603      	mov	r3, r0
 8010172:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010174:	7dfb      	ldrb	r3, [r7, #23]
 8010176:	2b00      	cmp	r3, #0
 8010178:	f040 8090 	bne.w	801029c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	6a1b      	ldr	r3, [r3, #32]
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010184:	7dbb      	ldrb	r3, [r7, #22]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d102      	bne.n	8010190 <dir_find+0x60>
 801018a:	2304      	movs	r3, #4
 801018c:	75fb      	strb	r3, [r7, #23]
 801018e:	e08a      	b.n	80102a6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	6a1b      	ldr	r3, [r3, #32]
 8010194:	330b      	adds	r3, #11
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801019c:	73fb      	strb	r3, [r7, #15]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	7bfa      	ldrb	r2, [r7, #15]
 80101a2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80101a4:	7dbb      	ldrb	r3, [r7, #22]
 80101a6:	2be5      	cmp	r3, #229	@ 0xe5
 80101a8:	d007      	beq.n	80101ba <dir_find+0x8a>
 80101aa:	7bfb      	ldrb	r3, [r7, #15]
 80101ac:	f003 0308 	and.w	r3, r3, #8
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d009      	beq.n	80101c8 <dir_find+0x98>
 80101b4:	7bfb      	ldrb	r3, [r7, #15]
 80101b6:	2b0f      	cmp	r3, #15
 80101b8:	d006      	beq.n	80101c8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80101ba:	23ff      	movs	r3, #255	@ 0xff
 80101bc:	757b      	strb	r3, [r7, #21]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f04f 32ff 	mov.w	r2, #4294967295
 80101c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80101c6:	e05e      	b.n	8010286 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80101c8:	7bfb      	ldrb	r3, [r7, #15]
 80101ca:	2b0f      	cmp	r3, #15
 80101cc:	d136      	bne.n	801023c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80101d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d154      	bne.n	8010286 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80101dc:	7dbb      	ldrb	r3, [r7, #22]
 80101de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00d      	beq.n	8010202 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	7b5b      	ldrb	r3, [r3, #13]
 80101ec:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80101ee:	7dbb      	ldrb	r3, [r7, #22]
 80101f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101f4:	75bb      	strb	r3, [r7, #22]
 80101f6:	7dbb      	ldrb	r3, [r7, #22]
 80101f8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	695a      	ldr	r2, [r3, #20]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010202:	7dba      	ldrb	r2, [r7, #22]
 8010204:	7d7b      	ldrb	r3, [r7, #21]
 8010206:	429a      	cmp	r2, r3
 8010208:	d115      	bne.n	8010236 <dir_find+0x106>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a1b      	ldr	r3, [r3, #32]
 801020e:	330d      	adds	r3, #13
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	7d3a      	ldrb	r2, [r7, #20]
 8010214:	429a      	cmp	r2, r3
 8010216:	d10e      	bne.n	8010236 <dir_find+0x106>
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	68da      	ldr	r2, [r3, #12]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6a1b      	ldr	r3, [r3, #32]
 8010220:	4619      	mov	r1, r3
 8010222:	4610      	mov	r0, r2
 8010224:	f7ff fcf2 	bl	800fc0c <cmp_lfn>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d003      	beq.n	8010236 <dir_find+0x106>
 801022e:	7d7b      	ldrb	r3, [r7, #21]
 8010230:	3b01      	subs	r3, #1
 8010232:	b2db      	uxtb	r3, r3
 8010234:	e000      	b.n	8010238 <dir_find+0x108>
 8010236:	23ff      	movs	r3, #255	@ 0xff
 8010238:	757b      	strb	r3, [r7, #21]
 801023a:	e024      	b.n	8010286 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801023c:	7d7b      	ldrb	r3, [r7, #21]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d109      	bne.n	8010256 <dir_find+0x126>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6a1b      	ldr	r3, [r3, #32]
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff feaa 	bl	800ffa0 <sum_sfn>
 801024c:	4603      	mov	r3, r0
 801024e:	461a      	mov	r2, r3
 8010250:	7d3b      	ldrb	r3, [r7, #20]
 8010252:	4293      	cmp	r3, r2
 8010254:	d024      	beq.n	80102a0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801025c:	f003 0301 	and.w	r3, r3, #1
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10a      	bne.n	801027a <dir_find+0x14a>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	6a18      	ldr	r0, [r3, #32]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	3324      	adds	r3, #36	@ 0x24
 801026c:	220b      	movs	r2, #11
 801026e:	4619      	mov	r1, r3
 8010270:	f7fe fd64 	bl	800ed3c <mem_cmp>
 8010274:	4603      	mov	r3, r0
 8010276:	2b00      	cmp	r3, #0
 8010278:	d014      	beq.n	80102a4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801027a:	23ff      	movs	r3, #255	@ 0xff
 801027c:	757b      	strb	r3, [r7, #21]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f04f 32ff 	mov.w	r2, #4294967295
 8010284:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010286:	2100      	movs	r1, #0
 8010288:	6878      	ldr	r0, [r7, #4]
 801028a:	f7ff fb73 	bl	800f974 <dir_next>
 801028e:	4603      	mov	r3, r0
 8010290:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010292:	7dfb      	ldrb	r3, [r7, #23]
 8010294:	2b00      	cmp	r3, #0
 8010296:	f43f af65 	beq.w	8010164 <dir_find+0x34>
 801029a:	e004      	b.n	80102a6 <dir_find+0x176>
		if (res != FR_OK) break;
 801029c:	bf00      	nop
 801029e:	e002      	b.n	80102a6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80102a0:	bf00      	nop
 80102a2:	e000      	b.n	80102a6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80102a4:	bf00      	nop

	return res;
 80102a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3718      	adds	r7, #24
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08c      	sub	sp, #48	@ 0x30
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80102c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <dir_register+0x20>
 80102cc:	2306      	movs	r3, #6
 80102ce:	e0e0      	b.n	8010492 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80102d0:	2300      	movs	r3, #0
 80102d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80102d4:	e002      	b.n	80102dc <dir_register+0x2c>
 80102d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d8:	3301      	adds	r3, #1
 80102da:	627b      	str	r3, [r7, #36]	@ 0x24
 80102dc:	69fb      	ldr	r3, [r7, #28]
 80102de:	68da      	ldr	r2, [r3, #12]
 80102e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	4413      	add	r3, r2
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1f4      	bne.n	80102d6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80102f2:	f107 030c 	add.w	r3, r7, #12
 80102f6:	220c      	movs	r2, #12
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fe fce3 	bl	800ecc4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80102fe:	7dfb      	ldrb	r3, [r7, #23]
 8010300:	f003 0301 	and.w	r3, r3, #1
 8010304:	2b00      	cmp	r3, #0
 8010306:	d032      	beq.n	801036e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2240      	movs	r2, #64	@ 0x40
 801030c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010310:	2301      	movs	r3, #1
 8010312:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010314:	e016      	b.n	8010344 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	68da      	ldr	r2, [r3, #12]
 8010320:	f107 010c 	add.w	r1, r7, #12
 8010324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010326:	f7ff fdad 	bl	800fe84 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f7ff ff00 	bl	8010130 <dir_find>
 8010330:	4603      	mov	r3, r0
 8010332:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010336:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801033a:	2b00      	cmp	r3, #0
 801033c:	d106      	bne.n	801034c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801033e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010340:	3301      	adds	r3, #1
 8010342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010346:	2b63      	cmp	r3, #99	@ 0x63
 8010348:	d9e5      	bls.n	8010316 <dir_register+0x66>
 801034a:	e000      	b.n	801034e <dir_register+0x9e>
			if (res != FR_OK) break;
 801034c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801034e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010350:	2b64      	cmp	r3, #100	@ 0x64
 8010352:	d101      	bne.n	8010358 <dir_register+0xa8>
 8010354:	2307      	movs	r3, #7
 8010356:	e09c      	b.n	8010492 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010358:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801035c:	2b04      	cmp	r3, #4
 801035e:	d002      	beq.n	8010366 <dir_register+0xb6>
 8010360:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010364:	e095      	b.n	8010492 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010366:	7dfa      	ldrb	r2, [r7, #23]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	f003 0302 	and.w	r3, r3, #2
 8010374:	2b00      	cmp	r3, #0
 8010376:	d007      	beq.n	8010388 <dir_register+0xd8>
 8010378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037a:	330c      	adds	r3, #12
 801037c:	4a47      	ldr	r2, [pc, #284]	@ (801049c <dir_register+0x1ec>)
 801037e:	fba2 2303 	umull	r2, r3, r2, r3
 8010382:	089b      	lsrs	r3, r3, #2
 8010384:	3301      	adds	r3, #1
 8010386:	e000      	b.n	801038a <dir_register+0xda>
 8010388:	2301      	movs	r3, #1
 801038a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801038c:	6a39      	ldr	r1, [r7, #32]
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff fbb5 	bl	800fafe <dir_alloc>
 8010394:	4603      	mov	r3, r0
 8010396:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801039a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d148      	bne.n	8010434 <dir_register+0x184>
 80103a2:	6a3b      	ldr	r3, [r7, #32]
 80103a4:	3b01      	subs	r3, #1
 80103a6:	623b      	str	r3, [r7, #32]
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d042      	beq.n	8010434 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	695a      	ldr	r2, [r3, #20]
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	015b      	lsls	r3, r3, #5
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	4619      	mov	r1, r3
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7ff fa5f 	bl	800f87e <dir_sdi>
 80103c0:	4603      	mov	r3, r0
 80103c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80103c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d132      	bne.n	8010434 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3324      	adds	r3, #36	@ 0x24
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7ff fde4 	bl	800ffa0 <sum_sfn>
 80103d8:	4603      	mov	r3, r0
 80103da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	69db      	ldr	r3, [r3, #28]
 80103e0:	4619      	mov	r1, r3
 80103e2:	69f8      	ldr	r0, [r7, #28]
 80103e4:	f7fe fece 	bl	800f184 <move_window>
 80103e8:	4603      	mov	r3, r0
 80103ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80103ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d11d      	bne.n	8010432 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	68d8      	ldr	r0, [r3, #12]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6a19      	ldr	r1, [r3, #32]
 80103fe:	6a3b      	ldr	r3, [r7, #32]
 8010400:	b2da      	uxtb	r2, r3
 8010402:	7efb      	ldrb	r3, [r7, #27]
 8010404:	f7ff fcd6 	bl	800fdb4 <put_lfn>
				fs->wflag = 1;
 8010408:	69fb      	ldr	r3, [r7, #28]
 801040a:	2201      	movs	r2, #1
 801040c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801040e:	2100      	movs	r1, #0
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f7ff faaf 	bl	800f974 <dir_next>
 8010416:	4603      	mov	r3, r0
 8010418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801041c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010420:	2b00      	cmp	r3, #0
 8010422:	d107      	bne.n	8010434 <dir_register+0x184>
 8010424:	6a3b      	ldr	r3, [r7, #32]
 8010426:	3b01      	subs	r3, #1
 8010428:	623b      	str	r3, [r7, #32]
 801042a:	6a3b      	ldr	r3, [r7, #32]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d1d5      	bne.n	80103dc <dir_register+0x12c>
 8010430:	e000      	b.n	8010434 <dir_register+0x184>
				if (res != FR_OK) break;
 8010432:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010434:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010438:	2b00      	cmp	r3, #0
 801043a:	d128      	bne.n	801048e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	69db      	ldr	r3, [r3, #28]
 8010440:	4619      	mov	r1, r3
 8010442:	69f8      	ldr	r0, [r7, #28]
 8010444:	f7fe fe9e 	bl	800f184 <move_window>
 8010448:	4603      	mov	r3, r0
 801044a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801044e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010452:	2b00      	cmp	r3, #0
 8010454:	d11b      	bne.n	801048e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	6a1b      	ldr	r3, [r3, #32]
 801045a:	2220      	movs	r2, #32
 801045c:	2100      	movs	r1, #0
 801045e:	4618      	mov	r0, r3
 8010460:	f7fe fc51 	bl	800ed06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a18      	ldr	r0, [r3, #32]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	3324      	adds	r3, #36	@ 0x24
 801046c:	220b      	movs	r2, #11
 801046e:	4619      	mov	r1, r3
 8010470:	f7fe fc28 	bl	800ecc4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a1b      	ldr	r3, [r3, #32]
 801047e:	330c      	adds	r3, #12
 8010480:	f002 0218 	and.w	r2, r2, #24
 8010484:	b2d2      	uxtb	r2, r2
 8010486:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	2201      	movs	r2, #1
 801048c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801048e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010492:	4618      	mov	r0, r3
 8010494:	3730      	adds	r7, #48	@ 0x30
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop
 801049c:	4ec4ec4f 	.word	0x4ec4ec4f

080104a0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b088      	sub	sp, #32
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	2200      	movs	r2, #0
 80104b4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	f000 80ca 	beq.w	8010654 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c8:	d032      	beq.n	8010530 <get_fileinfo+0x90>
			i = j = 0;
 80104ca:	2300      	movs	r3, #0
 80104cc:	61bb      	str	r3, [r7, #24]
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80104d2:	e01b      	b.n	801050c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80104d4:	89fb      	ldrh	r3, [r7, #14]
 80104d6:	2100      	movs	r1, #0
 80104d8:	4618      	mov	r0, r3
 80104da:	f001 ff0d 	bl	80122f8 <ff_convert>
 80104de:	4603      	mov	r3, r0
 80104e0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80104e2:	89fb      	ldrh	r3, [r7, #14]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d102      	bne.n	80104ee <get_fileinfo+0x4e>
 80104e8:	2300      	movs	r3, #0
 80104ea:	61fb      	str	r3, [r7, #28]
 80104ec:	e01a      	b.n	8010524 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80104ee:	69fb      	ldr	r3, [r7, #28]
 80104f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80104f2:	d902      	bls.n	80104fa <get_fileinfo+0x5a>
 80104f4:	2300      	movs	r3, #0
 80104f6:	61fb      	str	r3, [r7, #28]
 80104f8:	e014      	b.n	8010524 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	1c5a      	adds	r2, r3, #1
 80104fe:	61fa      	str	r2, [r7, #28]
 8010500:	89fa      	ldrh	r2, [r7, #14]
 8010502:	b2d1      	uxtb	r1, r2
 8010504:	683a      	ldr	r2, [r7, #0]
 8010506:	4413      	add	r3, r2
 8010508:	460a      	mov	r2, r1
 801050a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	68da      	ldr	r2, [r3, #12]
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	1c59      	adds	r1, r3, #1
 8010514:	61b9      	str	r1, [r7, #24]
 8010516:	005b      	lsls	r3, r3, #1
 8010518:	4413      	add	r3, r2
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	81fb      	strh	r3, [r7, #14]
 801051e:	89fb      	ldrh	r3, [r7, #14]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d1d7      	bne.n	80104d4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010524:	683a      	ldr	r2, [r7, #0]
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	4413      	add	r3, r2
 801052a:	3316      	adds	r3, #22
 801052c:	2200      	movs	r2, #0
 801052e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010530:	2300      	movs	r3, #0
 8010532:	61bb      	str	r3, [r7, #24]
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010538:	683a      	ldr	r2, [r7, #0]
 801053a:	69fb      	ldr	r3, [r7, #28]
 801053c:	4413      	add	r3, r2
 801053e:	3316      	adds	r3, #22
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010544:	e04d      	b.n	80105e2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a1a      	ldr	r2, [r3, #32]
 801054a:	69fb      	ldr	r3, [r7, #28]
 801054c:	1c59      	adds	r1, r3, #1
 801054e:	61f9      	str	r1, [r7, #28]
 8010550:	4413      	add	r3, r2
 8010552:	781b      	ldrb	r3, [r3, #0]
 8010554:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010556:	7dfb      	ldrb	r3, [r7, #23]
 8010558:	2b20      	cmp	r3, #32
 801055a:	d041      	beq.n	80105e0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801055c:	7dfb      	ldrb	r3, [r7, #23]
 801055e:	2b05      	cmp	r3, #5
 8010560:	d101      	bne.n	8010566 <get_fileinfo+0xc6>
 8010562:	23e5      	movs	r3, #229	@ 0xe5
 8010564:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	2b09      	cmp	r3, #9
 801056a:	d10f      	bne.n	801058c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801056c:	89bb      	ldrh	r3, [r7, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d105      	bne.n	801057e <get_fileinfo+0xde>
 8010572:	683a      	ldr	r2, [r7, #0]
 8010574:	69bb      	ldr	r3, [r7, #24]
 8010576:	4413      	add	r3, r2
 8010578:	3316      	adds	r3, #22
 801057a:	222e      	movs	r2, #46	@ 0x2e
 801057c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	61ba      	str	r2, [r7, #24]
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	4413      	add	r3, r2
 8010588:	222e      	movs	r2, #46	@ 0x2e
 801058a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801058c:	683a      	ldr	r2, [r7, #0]
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	4413      	add	r3, r2
 8010592:	3309      	adds	r3, #9
 8010594:	7dfa      	ldrb	r2, [r7, #23]
 8010596:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8010598:	89bb      	ldrh	r3, [r7, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d11c      	bne.n	80105d8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	2b40      	cmp	r3, #64	@ 0x40
 80105a2:	d913      	bls.n	80105cc <get_fileinfo+0x12c>
 80105a4:	7dfb      	ldrb	r3, [r7, #23]
 80105a6:	2b5a      	cmp	r3, #90	@ 0x5a
 80105a8:	d810      	bhi.n	80105cc <get_fileinfo+0x12c>
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	330c      	adds	r3, #12
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	2b08      	cmp	r3, #8
 80105b8:	d901      	bls.n	80105be <get_fileinfo+0x11e>
 80105ba:	2310      	movs	r3, #16
 80105bc:	e000      	b.n	80105c0 <get_fileinfo+0x120>
 80105be:	2308      	movs	r3, #8
 80105c0:	4013      	ands	r3, r2
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d002      	beq.n	80105cc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80105c6:	7dfb      	ldrb	r3, [r7, #23]
 80105c8:	3320      	adds	r3, #32
 80105ca:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80105cc:	683a      	ldr	r2, [r7, #0]
 80105ce:	69bb      	ldr	r3, [r7, #24]
 80105d0:	4413      	add	r3, r2
 80105d2:	3316      	adds	r3, #22
 80105d4:	7dfa      	ldrb	r2, [r7, #23]
 80105d6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	3301      	adds	r3, #1
 80105dc:	61bb      	str	r3, [r7, #24]
 80105de:	e000      	b.n	80105e2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80105e0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80105e2:	69fb      	ldr	r3, [r7, #28]
 80105e4:	2b0a      	cmp	r3, #10
 80105e6:	d9ae      	bls.n	8010546 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80105e8:	89bb      	ldrh	r3, [r7, #12]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d10d      	bne.n	801060a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	69bb      	ldr	r3, [r7, #24]
 80105f2:	4413      	add	r3, r2
 80105f4:	3316      	adds	r3, #22
 80105f6:	2200      	movs	r2, #0
 80105f8:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6a1b      	ldr	r3, [r3, #32]
 80105fe:	330c      	adds	r3, #12
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d101      	bne.n	801060a <get_fileinfo+0x16a>
 8010606:	2300      	movs	r3, #0
 8010608:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801060a:	683a      	ldr	r2, [r7, #0]
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	4413      	add	r3, r2
 8010610:	3309      	adds	r3, #9
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	7ada      	ldrb	r2, [r3, #11]
 801061c:	683b      	ldr	r3, [r7, #0]
 801061e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6a1b      	ldr	r3, [r3, #32]
 8010624:	331c      	adds	r3, #28
 8010626:	4618      	mov	r0, r3
 8010628:	f7fe fae2 	bl	800ebf0 <ld_dword>
 801062c:	4602      	mov	r2, r0
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	3316      	adds	r3, #22
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe fad9 	bl	800ebf0 <ld_dword>
 801063e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	b29a      	uxth	r2, r3
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	80da      	strh	r2, [r3, #6]
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	0c1b      	lsrs	r3, r3, #16
 801064c:	b29a      	uxth	r2, r3
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	809a      	strh	r2, [r3, #4]
 8010652:	e000      	b.n	8010656 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010654:	bf00      	nop
}
 8010656:	3720      	adds	r7, #32
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08a      	sub	sp, #40	@ 0x28
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	613b      	str	r3, [r7, #16]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	60fb      	str	r3, [r7, #12]
 8010674:	2300      	movs	r3, #0
 8010676:	617b      	str	r3, [r7, #20]
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	1c5a      	adds	r2, r3, #1
 8010680:	61ba      	str	r2, [r7, #24]
 8010682:	693a      	ldr	r2, [r7, #16]
 8010684:	4413      	add	r3, r2
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801068a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801068c:	2b1f      	cmp	r3, #31
 801068e:	d940      	bls.n	8010712 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010690:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010692:	2b2f      	cmp	r3, #47	@ 0x2f
 8010694:	d006      	beq.n	80106a4 <create_name+0x48>
 8010696:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010698:	2b5c      	cmp	r3, #92	@ 0x5c
 801069a:	d110      	bne.n	80106be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801069c:	e002      	b.n	80106a4 <create_name+0x48>
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	3301      	adds	r3, #1
 80106a2:	61bb      	str	r3, [r7, #24]
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	69bb      	ldr	r3, [r7, #24]
 80106a8:	4413      	add	r3, r2
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	2b2f      	cmp	r3, #47	@ 0x2f
 80106ae:	d0f6      	beq.n	801069e <create_name+0x42>
 80106b0:	693a      	ldr	r2, [r7, #16]
 80106b2:	69bb      	ldr	r3, [r7, #24]
 80106b4:	4413      	add	r3, r2
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80106ba:	d0f0      	beq.n	801069e <create_name+0x42>
			break;
 80106bc:	e02a      	b.n	8010714 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80106c2:	d901      	bls.n	80106c8 <create_name+0x6c>
 80106c4:	2306      	movs	r3, #6
 80106c6:	e17d      	b.n	80109c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80106c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80106ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106d0:	2101      	movs	r1, #1
 80106d2:	4618      	mov	r0, r3
 80106d4:	f001 fe10 	bl	80122f8 <ff_convert>
 80106d8:	4603      	mov	r3, r0
 80106da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80106dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d101      	bne.n	80106e6 <create_name+0x8a>
 80106e2:	2306      	movs	r3, #6
 80106e4:	e16e      	b.n	80109c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80106e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80106ea:	d809      	bhi.n	8010700 <create_name+0xa4>
 80106ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ee:	4619      	mov	r1, r3
 80106f0:	488d      	ldr	r0, [pc, #564]	@ (8010928 <create_name+0x2cc>)
 80106f2:	f7fe fb4a 	bl	800ed8a <chk_chr>
 80106f6:	4603      	mov	r3, r0
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <create_name+0xa4>
 80106fc:	2306      	movs	r3, #6
 80106fe:	e161      	b.n	80109c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	1c5a      	adds	r2, r3, #1
 8010704:	617a      	str	r2, [r7, #20]
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	4413      	add	r3, r2
 801070c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801070e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010710:	e7b4      	b.n	801067c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010712:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	69bb      	ldr	r3, [r7, #24]
 8010718:	441a      	add	r2, r3
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801071e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010720:	2b1f      	cmp	r3, #31
 8010722:	d801      	bhi.n	8010728 <create_name+0xcc>
 8010724:	2304      	movs	r3, #4
 8010726:	e000      	b.n	801072a <create_name+0xce>
 8010728:	2300      	movs	r3, #0
 801072a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801072e:	e011      	b.n	8010754 <create_name+0xf8>
		w = lfn[di - 1];
 8010730:	697a      	ldr	r2, [r7, #20]
 8010732:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010736:	4413      	add	r3, r2
 8010738:	005b      	lsls	r3, r3, #1
 801073a:	68fa      	ldr	r2, [r7, #12]
 801073c:	4413      	add	r3, r2
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010744:	2b20      	cmp	r3, #32
 8010746:	d002      	beq.n	801074e <create_name+0xf2>
 8010748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801074a:	2b2e      	cmp	r3, #46	@ 0x2e
 801074c:	d106      	bne.n	801075c <create_name+0x100>
		di--;
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	3b01      	subs	r3, #1
 8010752:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d1ea      	bne.n	8010730 <create_name+0xd4>
 801075a:	e000      	b.n	801075e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801075c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	005b      	lsls	r3, r3, #1
 8010762:	68fa      	ldr	r2, [r7, #12]
 8010764:	4413      	add	r3, r2
 8010766:	2200      	movs	r2, #0
 8010768:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <create_name+0x118>
 8010770:	2306      	movs	r3, #6
 8010772:	e127      	b.n	80109c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	3324      	adds	r3, #36	@ 0x24
 8010778:	220b      	movs	r2, #11
 801077a:	2120      	movs	r1, #32
 801077c:	4618      	mov	r0, r3
 801077e:	f7fe fac2 	bl	800ed06 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010782:	2300      	movs	r3, #0
 8010784:	61bb      	str	r3, [r7, #24]
 8010786:	e002      	b.n	801078e <create_name+0x132>
 8010788:	69bb      	ldr	r3, [r7, #24]
 801078a:	3301      	adds	r3, #1
 801078c:	61bb      	str	r3, [r7, #24]
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	005b      	lsls	r3, r3, #1
 8010792:	68fa      	ldr	r2, [r7, #12]
 8010794:	4413      	add	r3, r2
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	2b20      	cmp	r3, #32
 801079a:	d0f5      	beq.n	8010788 <create_name+0x12c>
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	005b      	lsls	r3, r3, #1
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	4413      	add	r3, r2
 80107a4:	881b      	ldrh	r3, [r3, #0]
 80107a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80107a8:	d0ee      	beq.n	8010788 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d009      	beq.n	80107c4 <create_name+0x168>
 80107b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107b4:	f043 0303 	orr.w	r3, r3, #3
 80107b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80107bc:	e002      	b.n	80107c4 <create_name+0x168>
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	617b      	str	r3, [r7, #20]
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d009      	beq.n	80107de <create_name+0x182>
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107d0:	4413      	add	r3, r2
 80107d2:	005b      	lsls	r3, r3, #1
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	4413      	add	r3, r2
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	2b2e      	cmp	r3, #46	@ 0x2e
 80107dc:	d1ef      	bne.n	80107be <create_name+0x162>

	i = b = 0; ni = 8;
 80107de:	2300      	movs	r3, #0
 80107e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80107e4:	2300      	movs	r3, #0
 80107e6:	623b      	str	r3, [r7, #32]
 80107e8:	2308      	movs	r3, #8
 80107ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	61ba      	str	r2, [r7, #24]
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	68fa      	ldr	r2, [r7, #12]
 80107f6:	4413      	add	r3, r2
 80107f8:	881b      	ldrh	r3, [r3, #0]
 80107fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80107fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f000 8090 	beq.w	8010924 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010804:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010806:	2b20      	cmp	r3, #32
 8010808:	d006      	beq.n	8010818 <create_name+0x1bc>
 801080a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801080c:	2b2e      	cmp	r3, #46	@ 0x2e
 801080e:	d10a      	bne.n	8010826 <create_name+0x1ca>
 8010810:	69ba      	ldr	r2, [r7, #24]
 8010812:	697b      	ldr	r3, [r7, #20]
 8010814:	429a      	cmp	r2, r3
 8010816:	d006      	beq.n	8010826 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010818:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801081c:	f043 0303 	orr.w	r3, r3, #3
 8010820:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010824:	e07d      	b.n	8010922 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010826:	6a3a      	ldr	r2, [r7, #32]
 8010828:	69fb      	ldr	r3, [r7, #28]
 801082a:	429a      	cmp	r2, r3
 801082c:	d203      	bcs.n	8010836 <create_name+0x1da>
 801082e:	69ba      	ldr	r2, [r7, #24]
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	429a      	cmp	r2, r3
 8010834:	d123      	bne.n	801087e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	2b0b      	cmp	r3, #11
 801083a:	d106      	bne.n	801084a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801083c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010840:	f043 0303 	orr.w	r3, r3, #3
 8010844:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010848:	e075      	b.n	8010936 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801084a:	69ba      	ldr	r2, [r7, #24]
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	429a      	cmp	r2, r3
 8010850:	d005      	beq.n	801085e <create_name+0x202>
 8010852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010856:	f043 0303 	orr.w	r3, r3, #3
 801085a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801085e:	69ba      	ldr	r2, [r7, #24]
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	429a      	cmp	r2, r3
 8010864:	d866      	bhi.n	8010934 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010866:	697b      	ldr	r3, [r7, #20]
 8010868:	61bb      	str	r3, [r7, #24]
 801086a:	2308      	movs	r3, #8
 801086c:	623b      	str	r3, [r7, #32]
 801086e:	230b      	movs	r3, #11
 8010870:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010872:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010876:	009b      	lsls	r3, r3, #2
 8010878:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801087c:	e051      	b.n	8010922 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801087e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010880:	2b7f      	cmp	r3, #127	@ 0x7f
 8010882:	d914      	bls.n	80108ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010886:	2100      	movs	r1, #0
 8010888:	4618      	mov	r0, r3
 801088a:	f001 fd35 	bl	80122f8 <ff_convert>
 801088e:	4603      	mov	r3, r0
 8010890:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010892:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <create_name+0x246>
 8010898:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801089a:	3b80      	subs	r3, #128	@ 0x80
 801089c:	4a23      	ldr	r2, [pc, #140]	@ (801092c <create_name+0x2d0>)
 801089e:	5cd3      	ldrb	r3, [r2, r3]
 80108a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80108a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108a6:	f043 0302 	orr.w	r3, r3, #2
 80108aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80108ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d007      	beq.n	80108c4 <create_name+0x268>
 80108b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108b6:	4619      	mov	r1, r3
 80108b8:	481d      	ldr	r0, [pc, #116]	@ (8010930 <create_name+0x2d4>)
 80108ba:	f7fe fa66 	bl	800ed8a <chk_chr>
 80108be:	4603      	mov	r3, r0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d008      	beq.n	80108d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80108c4:	235f      	movs	r3, #95	@ 0x5f
 80108c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80108c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108cc:	f043 0303 	orr.w	r3, r3, #3
 80108d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108d4:	e01b      	b.n	801090e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80108d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108d8:	2b40      	cmp	r3, #64	@ 0x40
 80108da:	d909      	bls.n	80108f0 <create_name+0x294>
 80108dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108de:	2b5a      	cmp	r3, #90	@ 0x5a
 80108e0:	d806      	bhi.n	80108f0 <create_name+0x294>
					b |= 2;
 80108e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80108e6:	f043 0302 	orr.w	r3, r3, #2
 80108ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80108ee:	e00e      	b.n	801090e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80108f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108f2:	2b60      	cmp	r3, #96	@ 0x60
 80108f4:	d90b      	bls.n	801090e <create_name+0x2b2>
 80108f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80108f8:	2b7a      	cmp	r3, #122	@ 0x7a
 80108fa:	d808      	bhi.n	801090e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80108fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010900:	f043 0301 	orr.w	r3, r3, #1
 8010904:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010908:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801090a:	3b20      	subs	r3, #32
 801090c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801090e:	6a3b      	ldr	r3, [r7, #32]
 8010910:	1c5a      	adds	r2, r3, #1
 8010912:	623a      	str	r2, [r7, #32]
 8010914:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010916:	b2d1      	uxtb	r1, r2
 8010918:	687a      	ldr	r2, [r7, #4]
 801091a:	4413      	add	r3, r2
 801091c:	460a      	mov	r2, r1
 801091e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010922:	e763      	b.n	80107ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010924:	bf00      	nop
 8010926:	e006      	b.n	8010936 <create_name+0x2da>
 8010928:	08018b9c 	.word	0x08018b9c
 801092c:	08018c10 	.word	0x08018c10
 8010930:	08018ba8 	.word	0x08018ba8
			if (si > di) break;			/* No extension */
 8010934:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801093c:	2be5      	cmp	r3, #229	@ 0xe5
 801093e:	d103      	bne.n	8010948 <create_name+0x2ec>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2205      	movs	r2, #5
 8010944:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	2b08      	cmp	r3, #8
 801094c:	d104      	bne.n	8010958 <create_name+0x2fc>
 801094e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010952:	009b      	lsls	r3, r3, #2
 8010954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801095c:	f003 030c 	and.w	r3, r3, #12
 8010960:	2b0c      	cmp	r3, #12
 8010962:	d005      	beq.n	8010970 <create_name+0x314>
 8010964:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010968:	f003 0303 	and.w	r3, r3, #3
 801096c:	2b03      	cmp	r3, #3
 801096e:	d105      	bne.n	801097c <create_name+0x320>
 8010970:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010974:	f043 0302 	orr.w	r3, r3, #2
 8010978:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801097c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010980:	f003 0302 	and.w	r3, r3, #2
 8010984:	2b00      	cmp	r3, #0
 8010986:	d117      	bne.n	80109b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010988:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801098c:	f003 0303 	and.w	r3, r3, #3
 8010990:	2b01      	cmp	r3, #1
 8010992:	d105      	bne.n	80109a0 <create_name+0x344>
 8010994:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010998:	f043 0310 	orr.w	r3, r3, #16
 801099c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80109a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80109a4:	f003 030c 	and.w	r3, r3, #12
 80109a8:	2b04      	cmp	r3, #4
 80109aa:	d105      	bne.n	80109b8 <create_name+0x35c>
 80109ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109b0:	f043 0308 	orr.w	r3, r3, #8
 80109b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80109be:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80109c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	3728      	adds	r7, #40	@ 0x28
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}

080109cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b086      	sub	sp, #24
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80109e0:	e002      	b.n	80109e8 <follow_path+0x1c>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	3301      	adds	r3, #1
 80109e6:	603b      	str	r3, [r7, #0]
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	2b2f      	cmp	r3, #47	@ 0x2f
 80109ee:	d0f8      	beq.n	80109e2 <follow_path+0x16>
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	781b      	ldrb	r3, [r3, #0]
 80109f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80109f6:	d0f4      	beq.n	80109e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2200      	movs	r2, #0
 80109fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	781b      	ldrb	r3, [r3, #0]
 8010a02:	2b1f      	cmp	r3, #31
 8010a04:	d80a      	bhi.n	8010a1c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2280      	movs	r2, #128	@ 0x80
 8010a0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8010a0e:	2100      	movs	r1, #0
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f7fe ff34 	bl	800f87e <dir_sdi>
 8010a16:	4603      	mov	r3, r0
 8010a18:	75fb      	strb	r3, [r7, #23]
 8010a1a:	e043      	b.n	8010aa4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a1c:	463b      	mov	r3, r7
 8010a1e:	4619      	mov	r1, r3
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff fe1b 	bl	801065c <create_name>
 8010a26:	4603      	mov	r3, r0
 8010a28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010a2a:	7dfb      	ldrb	r3, [r7, #23]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d134      	bne.n	8010a9a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7ff fb7d 	bl	8010130 <dir_find>
 8010a36:	4603      	mov	r3, r0
 8010a38:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010a40:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010a42:	7dfb      	ldrb	r3, [r7, #23]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00a      	beq.n	8010a5e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010a48:	7dfb      	ldrb	r3, [r7, #23]
 8010a4a:	2b04      	cmp	r3, #4
 8010a4c:	d127      	bne.n	8010a9e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010a4e:	7afb      	ldrb	r3, [r7, #11]
 8010a50:	f003 0304 	and.w	r3, r3, #4
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d122      	bne.n	8010a9e <follow_path+0xd2>
 8010a58:	2305      	movs	r3, #5
 8010a5a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010a5c:	e01f      	b.n	8010a9e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010a5e:	7afb      	ldrb	r3, [r7, #11]
 8010a60:	f003 0304 	and.w	r3, r3, #4
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d11c      	bne.n	8010aa2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010a68:	693b      	ldr	r3, [r7, #16]
 8010a6a:	799b      	ldrb	r3, [r3, #6]
 8010a6c:	f003 0310 	and.w	r3, r3, #16
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d102      	bne.n	8010a7a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010a74:	2305      	movs	r3, #5
 8010a76:	75fb      	strb	r3, [r7, #23]
 8010a78:	e014      	b.n	8010aa4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	695b      	ldr	r3, [r3, #20]
 8010a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a88:	4413      	add	r3, r2
 8010a8a:	4619      	mov	r1, r3
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7ff f87d 	bl	800fb8c <ld_clust>
 8010a92:	4602      	mov	r2, r0
 8010a94:	693b      	ldr	r3, [r7, #16]
 8010a96:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a98:	e7c0      	b.n	8010a1c <follow_path+0x50>
			if (res != FR_OK) break;
 8010a9a:	bf00      	nop
 8010a9c:	e002      	b.n	8010aa4 <follow_path+0xd8>
				break;
 8010a9e:	bf00      	nop
 8010aa0:	e000      	b.n	8010aa4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010aa2:	bf00      	nop
			}
		}
	}

	return res;
 8010aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3718      	adds	r7, #24
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}

08010aae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010aae:	b480      	push	{r7}
 8010ab0:	b087      	sub	sp, #28
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8010aba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d031      	beq.n	8010b28 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	617b      	str	r3, [r7, #20]
 8010aca:	e002      	b.n	8010ad2 <get_ldnumber+0x24>
 8010acc:	697b      	ldr	r3, [r7, #20]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	617b      	str	r3, [r7, #20]
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	2b1f      	cmp	r3, #31
 8010ad8:	d903      	bls.n	8010ae2 <get_ldnumber+0x34>
 8010ada:	697b      	ldr	r3, [r7, #20]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	2b3a      	cmp	r3, #58	@ 0x3a
 8010ae0:	d1f4      	bne.n	8010acc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	781b      	ldrb	r3, [r3, #0]
 8010ae6:	2b3a      	cmp	r3, #58	@ 0x3a
 8010ae8:	d11c      	bne.n	8010b24 <get_ldnumber+0x76>
			tp = *path;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	1c5a      	adds	r2, r3, #1
 8010af4:	60fa      	str	r2, [r7, #12]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	3b30      	subs	r3, #48	@ 0x30
 8010afa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2b09      	cmp	r3, #9
 8010b00:	d80e      	bhi.n	8010b20 <get_ldnumber+0x72>
 8010b02:	68fa      	ldr	r2, [r7, #12]
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d10a      	bne.n	8010b20 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d107      	bne.n	8010b20 <get_ldnumber+0x72>
					vol = (int)i;
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	3301      	adds	r3, #1
 8010b18:	617b      	str	r3, [r7, #20]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	697a      	ldr	r2, [r7, #20]
 8010b1e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	e002      	b.n	8010b2a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010b24:	2300      	movs	r3, #0
 8010b26:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010b28:	693b      	ldr	r3, [r7, #16]
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	371c      	adds	r7, #28
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b34:	4770      	bx	lr
	...

08010b38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	6078      	str	r0, [r7, #4]
 8010b40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	2200      	movs	r2, #0
 8010b46:	70da      	strb	r2, [r3, #3]
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8010b4e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010b50:	6839      	ldr	r1, [r7, #0]
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f7fe fb16 	bl	800f184 <move_window>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d001      	beq.n	8010b62 <check_fs+0x2a>
 8010b5e:	2304      	movs	r3, #4
 8010b60:	e038      	b.n	8010bd4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	3338      	adds	r3, #56	@ 0x38
 8010b66:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe f828 	bl	800ebc0 <ld_word>
 8010b70:	4603      	mov	r3, r0
 8010b72:	461a      	mov	r2, r3
 8010b74:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d001      	beq.n	8010b80 <check_fs+0x48>
 8010b7c:	2303      	movs	r3, #3
 8010b7e:	e029      	b.n	8010bd4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b86:	2be9      	cmp	r3, #233	@ 0xe9
 8010b88:	d009      	beq.n	8010b9e <check_fs+0x66>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8010b90:	2beb      	cmp	r3, #235	@ 0xeb
 8010b92:	d11e      	bne.n	8010bd2 <check_fs+0x9a>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8010b9a:	2b90      	cmp	r3, #144	@ 0x90
 8010b9c:	d119      	bne.n	8010bd2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	3338      	adds	r3, #56	@ 0x38
 8010ba2:	3336      	adds	r3, #54	@ 0x36
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe f823 	bl	800ebf0 <ld_dword>
 8010baa:	4603      	mov	r3, r0
 8010bac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8010bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8010bdc <check_fs+0xa4>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	d101      	bne.n	8010bba <check_fs+0x82>
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	e00c      	b.n	8010bd4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	3338      	adds	r3, #56	@ 0x38
 8010bbe:	3352      	adds	r3, #82	@ 0x52
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fe f815 	bl	800ebf0 <ld_dword>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	4a05      	ldr	r2, [pc, #20]	@ (8010be0 <check_fs+0xa8>)
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	d101      	bne.n	8010bd2 <check_fs+0x9a>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e000      	b.n	8010bd4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010bd2:	2302      	movs	r3, #2
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	00544146 	.word	0x00544146
 8010be0:	33544146 	.word	0x33544146

08010be4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b096      	sub	sp, #88	@ 0x58
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	60f8      	str	r0, [r7, #12]
 8010bec:	60b9      	str	r1, [r7, #8]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	2200      	movs	r2, #0
 8010bf6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010bf8:	68f8      	ldr	r0, [r7, #12]
 8010bfa:	f7ff ff58 	bl	8010aae <get_ldnumber>
 8010bfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	da01      	bge.n	8010c0a <find_volume+0x26>
 8010c06:	230b      	movs	r3, #11
 8010c08:	e235      	b.n	8011076 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c0a:	4aa5      	ldr	r2, [pc, #660]	@ (8010ea0 <find_volume+0x2bc>)
 8010c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c12:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d101      	bne.n	8010c1e <find_volume+0x3a>
 8010c1a:	230c      	movs	r3, #12
 8010c1c:	e22b      	b.n	8011076 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010c1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010c20:	f7fe f8ce 	bl	800edc0 <lock_fs>
 8010c24:	4603      	mov	r3, r0
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d101      	bne.n	8010c2e <find_volume+0x4a>
 8010c2a:	230f      	movs	r3, #15
 8010c2c:	e223      	b.n	8011076 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010c32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	f023 0301 	bic.w	r3, r3, #1
 8010c3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	781b      	ldrb	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d01a      	beq.n	8010c7a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c46:	785b      	ldrb	r3, [r3, #1]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7fd ff1b 	bl	800ea84 <disk_status>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010c54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c58:	f003 0301 	and.w	r3, r3, #1
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d10c      	bne.n	8010c7a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010c60:	79fb      	ldrb	r3, [r7, #7]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d007      	beq.n	8010c76 <find_volume+0x92>
 8010c66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c6a:	f003 0304 	and.w	r3, r3, #4
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d001      	beq.n	8010c76 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010c72:	230a      	movs	r3, #10
 8010c74:	e1ff      	b.n	8011076 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010c76:	2300      	movs	r3, #0
 8010c78:	e1fd      	b.n	8011076 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c82:	b2da      	uxtb	r2, r3
 8010c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8a:	785b      	ldrb	r3, [r3, #1]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fd ff13 	bl	800eab8 <disk_initialize>
 8010c92:	4603      	mov	r3, r0
 8010c94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010c98:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010c9c:	f003 0301 	and.w	r3, r3, #1
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d001      	beq.n	8010ca8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ca4:	2303      	movs	r3, #3
 8010ca6:	e1e6      	b.n	8011076 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010ca8:	79fb      	ldrb	r3, [r7, #7]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d007      	beq.n	8010cbe <find_volume+0xda>
 8010cae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010cb2:	f003 0304 	and.w	r3, r3, #4
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d001      	beq.n	8010cbe <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010cba:	230a      	movs	r3, #10
 8010cbc:	e1db      	b.n	8011076 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010cc2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010cc4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010cc6:	f7ff ff37 	bl	8010b38 <check_fs>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010cd4:	2b02      	cmp	r3, #2
 8010cd6:	d149      	bne.n	8010d6c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010cd8:	2300      	movs	r3, #0
 8010cda:	643b      	str	r3, [r7, #64]	@ 0x40
 8010cdc:	e01e      	b.n	8010d1c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ce6:	011b      	lsls	r3, r3, #4
 8010ce8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010cec:	4413      	add	r3, r2
 8010cee:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d006      	beq.n	8010d08 <find_volume+0x124>
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	3308      	adds	r3, #8
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f7fd ff76 	bl	800ebf0 <ld_dword>
 8010d04:	4602      	mov	r2, r0
 8010d06:	e000      	b.n	8010d0a <find_volume+0x126>
 8010d08:	2200      	movs	r2, #0
 8010d0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	3358      	adds	r3, #88	@ 0x58
 8010d10:	443b      	add	r3, r7
 8010d12:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d18:	3301      	adds	r3, #1
 8010d1a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d1e:	2b03      	cmp	r3, #3
 8010d20:	d9dd      	bls.n	8010cde <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010d22:	2300      	movs	r3, #0
 8010d24:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010d26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d002      	beq.n	8010d32 <find_volume+0x14e>
 8010d2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d2e:	3b01      	subs	r3, #1
 8010d30:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	3358      	adds	r3, #88	@ 0x58
 8010d38:	443b      	add	r3, r7
 8010d3a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010d3e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d005      	beq.n	8010d52 <find_volume+0x16e>
 8010d46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010d48:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010d4a:	f7ff fef5 	bl	8010b38 <check_fs>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	e000      	b.n	8010d54 <find_volume+0x170>
 8010d52:	2303      	movs	r3, #3
 8010d54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010d58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d5c:	2b01      	cmp	r3, #1
 8010d5e:	d905      	bls.n	8010d6c <find_volume+0x188>
 8010d60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d62:	3301      	adds	r3, #1
 8010d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d68:	2b03      	cmp	r3, #3
 8010d6a:	d9e2      	bls.n	8010d32 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d70:	2b04      	cmp	r3, #4
 8010d72:	d101      	bne.n	8010d78 <find_volume+0x194>
 8010d74:	2301      	movs	r3, #1
 8010d76:	e17e      	b.n	8011076 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010d78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d7c:	2b01      	cmp	r3, #1
 8010d7e:	d901      	bls.n	8010d84 <find_volume+0x1a0>
 8010d80:	230d      	movs	r3, #13
 8010d82:	e178      	b.n	8011076 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d86:	3338      	adds	r3, #56	@ 0x38
 8010d88:	330b      	adds	r3, #11
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fd ff18 	bl	800ebc0 <ld_word>
 8010d90:	4603      	mov	r3, r0
 8010d92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010d96:	d001      	beq.n	8010d9c <find_volume+0x1b8>
 8010d98:	230d      	movs	r3, #13
 8010d9a:	e16c      	b.n	8011076 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	3338      	adds	r3, #56	@ 0x38
 8010da0:	3316      	adds	r3, #22
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7fd ff0c 	bl	800ebc0 <ld_word>
 8010da8:	4603      	mov	r3, r0
 8010daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d106      	bne.n	8010dc0 <find_volume+0x1dc>
 8010db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db4:	3338      	adds	r3, #56	@ 0x38
 8010db6:	3324      	adds	r3, #36	@ 0x24
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fd ff19 	bl	800ebf0 <ld_dword>
 8010dbe:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010dc4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dc8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	789b      	ldrb	r3, [r3, #2]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d005      	beq.n	8010de4 <find_volume+0x200>
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dda:	789b      	ldrb	r3, [r3, #2]
 8010ddc:	2b02      	cmp	r3, #2
 8010dde:	d001      	beq.n	8010de4 <find_volume+0x200>
 8010de0:	230d      	movs	r3, #13
 8010de2:	e148      	b.n	8011076 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de6:	789b      	ldrb	r3, [r3, #2]
 8010de8:	461a      	mov	r2, r3
 8010dea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010dec:	fb02 f303 	mul.w	r3, r2, r3
 8010df0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010df8:	461a      	mov	r2, r3
 8010dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e00:	895b      	ldrh	r3, [r3, #10]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d008      	beq.n	8010e18 <find_volume+0x234>
 8010e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e08:	895b      	ldrh	r3, [r3, #10]
 8010e0a:	461a      	mov	r2, r3
 8010e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e0e:	895b      	ldrh	r3, [r3, #10]
 8010e10:	3b01      	subs	r3, #1
 8010e12:	4013      	ands	r3, r2
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d001      	beq.n	8010e1c <find_volume+0x238>
 8010e18:	230d      	movs	r3, #13
 8010e1a:	e12c      	b.n	8011076 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1e:	3338      	adds	r3, #56	@ 0x38
 8010e20:	3311      	adds	r3, #17
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fd fecc 	bl	800ebc0 <ld_word>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	461a      	mov	r2, r3
 8010e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e32:	891b      	ldrh	r3, [r3, #8]
 8010e34:	f003 030f 	and.w	r3, r3, #15
 8010e38:	b29b      	uxth	r3, r3
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d001      	beq.n	8010e42 <find_volume+0x25e>
 8010e3e:	230d      	movs	r3, #13
 8010e40:	e119      	b.n	8011076 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e44:	3338      	adds	r3, #56	@ 0x38
 8010e46:	3313      	adds	r3, #19
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fd feb9 	bl	800ebc0 <ld_word>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d106      	bne.n	8010e66 <find_volume+0x282>
 8010e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5a:	3338      	adds	r3, #56	@ 0x38
 8010e5c:	3320      	adds	r3, #32
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fd fec6 	bl	800ebf0 <ld_dword>
 8010e64:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e68:	3338      	adds	r3, #56	@ 0x38
 8010e6a:	330e      	adds	r3, #14
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fd fea7 	bl	800ebc0 <ld_word>
 8010e72:	4603      	mov	r3, r0
 8010e74:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010e76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d101      	bne.n	8010e80 <find_volume+0x29c>
 8010e7c:	230d      	movs	r3, #13
 8010e7e:	e0fa      	b.n	8011076 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010e80:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010e82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e84:	4413      	add	r3, r2
 8010e86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e88:	8912      	ldrh	r2, [r2, #8]
 8010e8a:	0912      	lsrs	r2, r2, #4
 8010e8c:	b292      	uxth	r2, r2
 8010e8e:	4413      	add	r3, r2
 8010e90:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d204      	bcs.n	8010ea4 <find_volume+0x2c0>
 8010e9a:	230d      	movs	r3, #13
 8010e9c:	e0eb      	b.n	8011076 <find_volume+0x492>
 8010e9e:	bf00      	nop
 8010ea0:	2000c2c8 	.word	0x2000c2c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ea8:	1ad3      	subs	r3, r2, r3
 8010eaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010eac:	8952      	ldrh	r2, [r2, #10]
 8010eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eb2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d101      	bne.n	8010ebe <find_volume+0x2da>
 8010eba:	230d      	movs	r3, #13
 8010ebc:	e0db      	b.n	8011076 <find_volume+0x492>
		fmt = FS_FAT32;
 8010ebe:	2303      	movs	r3, #3
 8010ec0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d802      	bhi.n	8010ed4 <find_volume+0x2f0>
 8010ece:	2302      	movs	r3, #2
 8010ed0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ed6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010eda:	4293      	cmp	r3, r2
 8010edc:	d802      	bhi.n	8010ee4 <find_volume+0x300>
 8010ede:	2301      	movs	r3, #1
 8010ee0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee6:	1c9a      	adds	r2, r3, #2
 8010ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010ef0:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010ef2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010ef4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010ef6:	441a      	add	r2, r3
 8010ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010efa:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010efc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f00:	441a      	add	r2, r3
 8010f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f04:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010f06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f0a:	2b03      	cmp	r3, #3
 8010f0c:	d11e      	bne.n	8010f4c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f10:	3338      	adds	r3, #56	@ 0x38
 8010f12:	332a      	adds	r3, #42	@ 0x2a
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fd fe53 	bl	800ebc0 <ld_word>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d001      	beq.n	8010f24 <find_volume+0x340>
 8010f20:	230d      	movs	r3, #13
 8010f22:	e0a8      	b.n	8011076 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f26:	891b      	ldrh	r3, [r3, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d001      	beq.n	8010f30 <find_volume+0x34c>
 8010f2c:	230d      	movs	r3, #13
 8010f2e:	e0a2      	b.n	8011076 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f32:	3338      	adds	r3, #56	@ 0x38
 8010f34:	332c      	adds	r3, #44	@ 0x2c
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fd fe5a 	bl	800ebf0 <ld_dword>
 8010f3c:	4602      	mov	r2, r0
 8010f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f40:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f44:	69db      	ldr	r3, [r3, #28]
 8010f46:	009b      	lsls	r3, r3, #2
 8010f48:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f4a:	e01f      	b.n	8010f8c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f4e:	891b      	ldrh	r3, [r3, #8]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d101      	bne.n	8010f58 <find_volume+0x374>
 8010f54:	230d      	movs	r3, #13
 8010f56:	e08e      	b.n	8011076 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f5e:	441a      	add	r2, r3
 8010f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f62:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010f64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010f68:	2b02      	cmp	r3, #2
 8010f6a:	d103      	bne.n	8010f74 <find_volume+0x390>
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f6e:	69db      	ldr	r3, [r3, #28]
 8010f70:	005b      	lsls	r3, r3, #1
 8010f72:	e00a      	b.n	8010f8a <find_volume+0x3a6>
 8010f74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f76:	69da      	ldr	r2, [r3, #28]
 8010f78:	4613      	mov	r3, r2
 8010f7a:	005b      	lsls	r3, r3, #1
 8010f7c:	4413      	add	r3, r2
 8010f7e:	085a      	lsrs	r2, r3, #1
 8010f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f82:	69db      	ldr	r3, [r3, #28]
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010f8a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8e:	6a1a      	ldr	r2, [r3, #32]
 8010f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f92:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010f96:	0a5b      	lsrs	r3, r3, #9
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d201      	bcs.n	8010fa0 <find_volume+0x3bc>
 8010f9c:	230d      	movs	r3, #13
 8010f9e:	e06a      	b.n	8011076 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8010fa6:	619a      	str	r2, [r3, #24]
 8010fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010faa:	699a      	ldr	r2, [r3, #24]
 8010fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fae:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb2:	2280      	movs	r2, #128	@ 0x80
 8010fb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010fb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010fba:	2b03      	cmp	r3, #3
 8010fbc:	d149      	bne.n	8011052 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc0:	3338      	adds	r3, #56	@ 0x38
 8010fc2:	3330      	adds	r3, #48	@ 0x30
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f7fd fdfb 	bl	800ebc0 <ld_word>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d140      	bne.n	8011052 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010fd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fd2:	3301      	adds	r3, #1
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010fd8:	f7fe f8d4 	bl	800f184 <move_window>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d137      	bne.n	8011052 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fea:	3338      	adds	r3, #56	@ 0x38
 8010fec:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fd fde5 	bl	800ebc0 <ld_word>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d127      	bne.n	8011052 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011004:	3338      	adds	r3, #56	@ 0x38
 8011006:	4618      	mov	r0, r3
 8011008:	f7fd fdf2 	bl	800ebf0 <ld_dword>
 801100c:	4603      	mov	r3, r0
 801100e:	4a1c      	ldr	r2, [pc, #112]	@ (8011080 <find_volume+0x49c>)
 8011010:	4293      	cmp	r3, r2
 8011012:	d11e      	bne.n	8011052 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011016:	3338      	adds	r3, #56	@ 0x38
 8011018:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801101c:	4618      	mov	r0, r3
 801101e:	f7fd fde7 	bl	800ebf0 <ld_dword>
 8011022:	4603      	mov	r3, r0
 8011024:	4a17      	ldr	r2, [pc, #92]	@ (8011084 <find_volume+0x4a0>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d113      	bne.n	8011052 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801102a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801102c:	3338      	adds	r3, #56	@ 0x38
 801102e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011032:	4618      	mov	r0, r3
 8011034:	f7fd fddc 	bl	800ebf0 <ld_dword>
 8011038:	4602      	mov	r2, r0
 801103a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801103c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801103e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011040:	3338      	adds	r3, #56	@ 0x38
 8011042:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011046:	4618      	mov	r0, r3
 8011048:	f7fd fdd2 	bl	800ebf0 <ld_dword>
 801104c:	4602      	mov	r2, r0
 801104e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011050:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011054:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011058:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801105a:	4b0b      	ldr	r3, [pc, #44]	@ (8011088 <find_volume+0x4a4>)
 801105c:	881b      	ldrh	r3, [r3, #0]
 801105e:	3301      	adds	r3, #1
 8011060:	b29a      	uxth	r2, r3
 8011062:	4b09      	ldr	r3, [pc, #36]	@ (8011088 <find_volume+0x4a4>)
 8011064:	801a      	strh	r2, [r3, #0]
 8011066:	4b08      	ldr	r3, [pc, #32]	@ (8011088 <find_volume+0x4a4>)
 8011068:	881a      	ldrh	r2, [r3, #0]
 801106a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801106e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011070:	f7fe f820 	bl	800f0b4 <clear_lock>
#endif
	return FR_OK;
 8011074:	2300      	movs	r3, #0
}
 8011076:	4618      	mov	r0, r3
 8011078:	3758      	adds	r7, #88	@ 0x58
 801107a:	46bd      	mov	sp, r7
 801107c:	bd80      	pop	{r7, pc}
 801107e:	bf00      	nop
 8011080:	41615252 	.word	0x41615252
 8011084:	61417272 	.word	0x61417272
 8011088:	2000c2cc 	.word	0x2000c2cc

0801108c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011096:	2309      	movs	r3, #9
 8011098:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d02e      	beq.n	80110fe <validate+0x72>
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d02a      	beq.n	80110fe <validate+0x72>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d025      	beq.n	80110fe <validate+0x72>
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	889a      	ldrh	r2, [r3, #4]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	88db      	ldrh	r3, [r3, #6]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d11e      	bne.n	80110fe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7fd fe7b 	bl	800edc0 <lock_fs>
 80110ca:	4603      	mov	r3, r0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d014      	beq.n	80110fa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	785b      	ldrb	r3, [r3, #1]
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fd fcd4 	bl	800ea84 <disk_status>
 80110dc:	4603      	mov	r3, r0
 80110de:	f003 0301 	and.w	r3, r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d102      	bne.n	80110ec <validate+0x60>
				res = FR_OK;
 80110e6:	2300      	movs	r3, #0
 80110e8:	73fb      	strb	r3, [r7, #15]
 80110ea:	e008      	b.n	80110fe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2100      	movs	r1, #0
 80110f2:	4618      	mov	r0, r3
 80110f4:	f7fd fe7a 	bl	800edec <unlock_fs>
 80110f8:	e001      	b.n	80110fe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80110fa:	230f      	movs	r3, #15
 80110fc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80110fe:	7bfb      	ldrb	r3, [r7, #15]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d102      	bne.n	801110a <validate+0x7e>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	e000      	b.n	801110c <validate+0x80>
 801110a:	2300      	movs	r3, #0
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	6013      	str	r3, [r2, #0]
	return res;
 8011110:	7bfb      	ldrb	r3, [r7, #15]
}
 8011112:	4618      	mov	r0, r3
 8011114:	3710      	adds	r7, #16
 8011116:	46bd      	mov	sp, r7
 8011118:	bd80      	pop	{r7, pc}
	...

0801111c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	60b9      	str	r1, [r7, #8]
 8011126:	4613      	mov	r3, r2
 8011128:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801112e:	f107 0310 	add.w	r3, r7, #16
 8011132:	4618      	mov	r0, r3
 8011134:	f7ff fcbb 	bl	8010aae <get_ldnumber>
 8011138:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801113a:	69fb      	ldr	r3, [r7, #28]
 801113c:	2b00      	cmp	r3, #0
 801113e:	da01      	bge.n	8011144 <f_mount+0x28>
 8011140:	230b      	movs	r3, #11
 8011142:	e048      	b.n	80111d6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011144:	4a26      	ldr	r2, [pc, #152]	@ (80111e0 <f_mount+0xc4>)
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801114c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d00f      	beq.n	8011174 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011154:	69b8      	ldr	r0, [r7, #24]
 8011156:	f7fd ffad 	bl	800f0b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	4618      	mov	r0, r3
 8011160:	f001 f9b0 	bl	80124c4 <ff_del_syncobj>
 8011164:	4603      	mov	r3, r0
 8011166:	2b00      	cmp	r3, #0
 8011168:	d101      	bne.n	801116e <f_mount+0x52>
 801116a:	2302      	movs	r3, #2
 801116c:	e033      	b.n	80111d6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	2200      	movs	r2, #0
 8011172:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d00f      	beq.n	801119a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2200      	movs	r2, #0
 801117e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	b2da      	uxtb	r2, r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	3310      	adds	r3, #16
 8011188:	4619      	mov	r1, r3
 801118a:	4610      	mov	r0, r2
 801118c:	f001 f97a 	bl	8012484 <ff_cre_syncobj>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <f_mount+0x7e>
 8011196:	2302      	movs	r3, #2
 8011198:	e01d      	b.n	80111d6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	4910      	ldr	r1, [pc, #64]	@ (80111e0 <f_mount+0xc4>)
 801119e:	69fb      	ldr	r3, [r7, #28]
 80111a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d002      	beq.n	80111b0 <f_mount+0x94>
 80111aa:	79fb      	ldrb	r3, [r7, #7]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d001      	beq.n	80111b4 <f_mount+0x98>
 80111b0:	2300      	movs	r3, #0
 80111b2:	e010      	b.n	80111d6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80111b4:	f107 010c 	add.w	r1, r7, #12
 80111b8:	f107 0308 	add.w	r3, r7, #8
 80111bc:	2200      	movs	r2, #0
 80111be:	4618      	mov	r0, r3
 80111c0:	f7ff fd10 	bl	8010be4 <find_volume>
 80111c4:	4603      	mov	r3, r0
 80111c6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	7dfa      	ldrb	r2, [r7, #23]
 80111cc:	4611      	mov	r1, r2
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fd fe0c 	bl	800edec <unlock_fs>
 80111d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3720      	adds	r7, #32
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	2000c2c8 	.word	0x2000c2c8

080111e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 80111ea:	af00      	add	r7, sp, #0
 80111ec:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111f0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80111f4:	6018      	str	r0, [r3, #0]
 80111f6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80111fa:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80111fe:	6019      	str	r1, [r3, #0]
 8011200:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011204:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011208:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801120a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801120e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d101      	bne.n	801121c <f_open+0x38>
 8011218:	2309      	movs	r3, #9
 801121a:	e299      	b.n	8011750 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801121c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011220:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011224:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011228:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801122c:	7812      	ldrb	r2, [r2, #0]
 801122e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011232:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8011234:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011238:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801123c:	781a      	ldrb	r2, [r3, #0]
 801123e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8011242:	f107 0308 	add.w	r3, r7, #8
 8011246:	4618      	mov	r0, r3
 8011248:	f7ff fccc 	bl	8010be4 <find_volume>
 801124c:	4603      	mov	r3, r0
 801124e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8011252:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011256:	2b00      	cmp	r3, #0
 8011258:	f040 8265 	bne.w	8011726 <f_open+0x542>
		dj.obj.fs = fs;
 801125c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011260:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8011264:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011268:	f107 0214 	add.w	r2, r7, #20
 801126c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801126e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011272:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8011276:	681a      	ldr	r2, [r3, #0]
 8011278:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f7ff fba4 	bl	80109cc <follow_path>
 8011284:	4603      	mov	r3, r0
 8011286:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801128a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801128e:	2b00      	cmp	r3, #0
 8011290:	d11c      	bne.n	80112cc <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011292:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8011296:	b25b      	sxtb	r3, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	da03      	bge.n	80112a4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 801129c:	2306      	movs	r3, #6
 801129e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80112a2:	e013      	b.n	80112cc <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80112a4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112a8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	bf8c      	ite	hi
 80112b2:	2301      	movhi	r3, #1
 80112b4:	2300      	movls	r3, #0
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	461a      	mov	r2, r3
 80112ba:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80112be:	4611      	mov	r1, r2
 80112c0:	4618      	mov	r0, r3
 80112c2:	f7fd fdaf 	bl	800ee24 <chk_lock>
 80112c6:	4603      	mov	r3, r0
 80112c8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80112cc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112d0:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	f003 031c 	and.w	r3, r3, #28
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 80a7 	beq.w	801142e <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 80112e0:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d01f      	beq.n	8011328 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80112e8:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80112ec:	2b04      	cmp	r3, #4
 80112ee:	d10e      	bne.n	801130e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80112f0:	f7fd fdf4 	bl	800eedc <enq_lock>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d006      	beq.n	8011308 <f_open+0x124>
 80112fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80112fe:	4618      	mov	r0, r3
 8011300:	f7fe ffd6 	bl	80102b0 <dir_register>
 8011304:	4603      	mov	r3, r0
 8011306:	e000      	b.n	801130a <f_open+0x126>
 8011308:	2312      	movs	r3, #18
 801130a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801130e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011312:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011316:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 801131a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801131e:	7812      	ldrb	r2, [r2, #0]
 8011320:	f042 0208 	orr.w	r2, r2, #8
 8011324:	701a      	strb	r2, [r3, #0]
 8011326:	e015      	b.n	8011354 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011328:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801132c:	f003 0311 	and.w	r3, r3, #17
 8011330:	2b00      	cmp	r3, #0
 8011332:	d003      	beq.n	801133c <f_open+0x158>
					res = FR_DENIED;
 8011334:	2307      	movs	r3, #7
 8011336:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801133a:	e00b      	b.n	8011354 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801133c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011340:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	f003 0304 	and.w	r3, r3, #4
 801134a:	2b00      	cmp	r3, #0
 801134c:	d002      	beq.n	8011354 <f_open+0x170>
 801134e:	2308      	movs	r3, #8
 8011350:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011354:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011358:	2b00      	cmp	r3, #0
 801135a:	f040 8088 	bne.w	801146e <f_open+0x28a>
 801135e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011362:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	f003 0308 	and.w	r3, r3, #8
 801136c:	2b00      	cmp	r3, #0
 801136e:	d07e      	beq.n	801146e <f_open+0x28a>
				dw = GET_FATTIME();
 8011370:	f7fc fe44 	bl	800dffc <get_fattime>
 8011374:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011378:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801137c:	330e      	adds	r3, #14
 801137e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011382:	4618      	mov	r0, r3
 8011384:	f7fd fc72 	bl	800ec6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011388:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801138c:	3316      	adds	r3, #22
 801138e:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011392:	4618      	mov	r0, r3
 8011394:	f7fd fc6a 	bl	800ec6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011398:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 801139c:	330b      	adds	r3, #11
 801139e:	2220      	movs	r2, #32
 80113a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80113a2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80113aa:	4611      	mov	r1, r2
 80113ac:	4618      	mov	r0, r3
 80113ae:	f7fe fbed 	bl	800fb8c <ld_clust>
 80113b2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80113b6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113ba:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80113be:	2200      	movs	r2, #0
 80113c0:	4618      	mov	r0, r3
 80113c2:	f7fe fc02 	bl	800fbca <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80113c6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80113ca:	331c      	adds	r3, #28
 80113cc:	2100      	movs	r1, #0
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fd fc4c 	bl	800ec6c <st_dword>
					fs->wflag = 1;
 80113d4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113d8:	2201      	movs	r2, #1
 80113da:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80113dc:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d044      	beq.n	801146e <f_open+0x28a>
						dw = fs->winsect;
 80113e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80113e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113ea:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80113ee:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80113f2:	2200      	movs	r2, #0
 80113f4:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fe f90f 	bl	800f61c <remove_chain>
 80113fe:	4603      	mov	r3, r0
 8011400:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8011404:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011408:	2b00      	cmp	r3, #0
 801140a:	d130      	bne.n	801146e <f_open+0x28a>
							res = move_window(fs, dw);
 801140c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011410:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011414:	4618      	mov	r0, r3
 8011416:	f7fd feb5 	bl	800f184 <move_window>
 801141a:	4603      	mov	r3, r0
 801141c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011420:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011424:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8011428:	3a01      	subs	r2, #1
 801142a:	615a      	str	r2, [r3, #20]
 801142c:	e01f      	b.n	801146e <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801142e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011432:	2b00      	cmp	r3, #0
 8011434:	d11b      	bne.n	801146e <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011436:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801143a:	f003 0310 	and.w	r3, r3, #16
 801143e:	2b00      	cmp	r3, #0
 8011440:	d003      	beq.n	801144a <f_open+0x266>
					res = FR_NO_FILE;
 8011442:	2304      	movs	r3, #4
 8011444:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8011448:	e011      	b.n	801146e <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801144a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801144e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011452:	781b      	ldrb	r3, [r3, #0]
 8011454:	f003 0302 	and.w	r3, r3, #2
 8011458:	2b00      	cmp	r3, #0
 801145a:	d008      	beq.n	801146e <f_open+0x28a>
 801145c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8011460:	f003 0301 	and.w	r3, r3, #1
 8011464:	2b00      	cmp	r3, #0
 8011466:	d002      	beq.n	801146e <f_open+0x28a>
						res = FR_DENIED;
 8011468:	2307      	movs	r3, #7
 801146a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801146e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011472:	2b00      	cmp	r3, #0
 8011474:	d148      	bne.n	8011508 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011476:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801147a:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801147e:	781b      	ldrb	r3, [r3, #0]
 8011480:	f003 0308 	and.w	r3, r3, #8
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00b      	beq.n	80114a0 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 8011488:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801148c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011490:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011494:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 8011498:	7812      	ldrb	r2, [r2, #0]
 801149a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801149e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80114a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80114a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80114a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114aa:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80114b2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80114b6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114ba:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80114c2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114c6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	bf8c      	ite	hi
 80114d0:	2301      	movhi	r3, #1
 80114d2:	2300      	movls	r3, #0
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	461a      	mov	r2, r3
 80114d8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80114dc:	4611      	mov	r1, r2
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fd fd1e 	bl	800ef20 <inc_lock>
 80114e4:	4602      	mov	r2, r0
 80114e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80114f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	691b      	ldr	r3, [r3, #16]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d102      	bne.n	8011508 <f_open+0x324>
 8011502:	2302      	movs	r3, #2
 8011504:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011508:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801150c:	2b00      	cmp	r3, #0
 801150e:	f040 810a 	bne.w	8011726 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011512:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011516:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801151a:	4611      	mov	r1, r2
 801151c:	4618      	mov	r0, r3
 801151e:	f7fe fb35 	bl	800fb8c <ld_clust>
 8011522:	4602      	mov	r2, r0
 8011524:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011528:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011530:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011534:	331c      	adds	r3, #28
 8011536:	4618      	mov	r0, r3
 8011538:	f7fd fb5a 	bl	800ebf0 <ld_dword>
 801153c:	4602      	mov	r2, r0
 801153e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011542:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801154a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801154e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	2200      	movs	r2, #0
 8011556:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011558:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801155c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011560:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011568:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801156c:	88da      	ldrh	r2, [r3, #6]
 801156e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011572:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801157a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801157e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011588:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801158c:	7812      	ldrb	r2, [r2, #0]
 801158e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011590:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011594:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2200      	movs	r2, #0
 801159c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801159e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115a2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2200      	movs	r2, #0
 80115aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80115ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	2200      	movs	r2, #0
 80115b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80115ba:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115be:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	3330      	adds	r3, #48	@ 0x30
 80115c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115ca:	2100      	movs	r1, #0
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7fd fb9a 	bl	800ed06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80115d2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115d6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	f003 0320 	and.w	r3, r3, #32
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 80a0 	beq.w	8011726 <f_open+0x542>
 80115e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f000 8097 	beq.w	8011726 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80115f8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80115fc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	68da      	ldr	r2, [r3, #12]
 8011604:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011608:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011610:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011614:	895b      	ldrh	r3, [r3, #10]
 8011616:	025b      	lsls	r3, r3, #9
 8011618:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801161c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011620:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	689b      	ldr	r3, [r3, #8]
 8011628:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801162c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011630:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	68db      	ldr	r3, [r3, #12]
 8011638:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801163c:	e021      	b.n	8011682 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 801163e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011642:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801164c:	4618      	mov	r0, r3
 801164e:	f7fd fe54 	bl	800f2fa <get_fat>
 8011652:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8011656:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801165a:	2b01      	cmp	r3, #1
 801165c:	d802      	bhi.n	8011664 <f_open+0x480>
 801165e:	2302      	movs	r3, #2
 8011660:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011664:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8011668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166c:	d102      	bne.n	8011674 <f_open+0x490>
 801166e:	2301      	movs	r3, #1
 8011670:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011674:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8011678:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 801167c:	1ad3      	subs	r3, r2, r3
 801167e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8011682:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011686:	2b00      	cmp	r3, #0
 8011688:	d105      	bne.n	8011696 <f_open+0x4b2>
 801168a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 801168e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 8011692:	429a      	cmp	r2, r3
 8011694:	d8d3      	bhi.n	801163e <f_open+0x45a>
				}
				fp->clust = clst;
 8011696:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801169a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80116a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80116a6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d13b      	bne.n	8011726 <f_open+0x542>
 80116ae:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80116b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d035      	beq.n	8011726 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80116ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80116be:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fd fdfa 	bl	800f2bc <clust2sect>
 80116c8:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 80116cc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d103      	bne.n	80116dc <f_open+0x4f8>
						res = FR_INT_ERR;
 80116d4:	2302      	movs	r3, #2
 80116d6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80116da:	e024      	b.n	8011726 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80116dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80116e0:	0a5a      	lsrs	r2, r3, #9
 80116e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 80116e6:	441a      	add	r2, r3
 80116e8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116ec:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80116f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80116f8:	7858      	ldrb	r0, [r3, #1]
 80116fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80116fe:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011708:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801170c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	6a1a      	ldr	r2, [r3, #32]
 8011714:	2301      	movs	r3, #1
 8011716:	f7fd f9f5 	bl	800eb04 <disk_read>
 801171a:	4603      	mov	r3, r0
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <f_open+0x542>
 8011720:	2301      	movs	r3, #1
 8011722:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011726:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801172a:	2b00      	cmp	r3, #0
 801172c:	d006      	beq.n	801173c <f_open+0x558>
 801172e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011732:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2200      	movs	r2, #0
 801173a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801173c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011740:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 8011744:	4611      	mov	r1, r2
 8011746:	4618      	mov	r0, r3
 8011748:	f7fd fb50 	bl	800edec <unlock_fs>
 801174c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8011750:	4618      	mov	r0, r3
 8011752:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}

0801175a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801175a:	b580      	push	{r7, lr}
 801175c:	b08e      	sub	sp, #56	@ 0x38
 801175e:	af00      	add	r7, sp, #0
 8011760:	60f8      	str	r0, [r7, #12]
 8011762:	60b9      	str	r1, [r7, #8]
 8011764:	607a      	str	r2, [r7, #4]
 8011766:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	2200      	movs	r2, #0
 8011770:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f107 0214 	add.w	r2, r7, #20
 8011778:	4611      	mov	r1, r2
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff fc86 	bl	801108c <validate>
 8011780:	4603      	mov	r3, r0
 8011782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011786:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801178a:	2b00      	cmp	r3, #0
 801178c:	d107      	bne.n	801179e <f_read+0x44>
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	7d5b      	ldrb	r3, [r3, #21]
 8011792:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8011796:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801179a:	2b00      	cmp	r3, #0
 801179c:	d009      	beq.n	80117b2 <f_read+0x58>
 801179e:	697b      	ldr	r3, [r7, #20]
 80117a0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80117a4:	4611      	mov	r1, r2
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fd fb20 	bl	800edec <unlock_fs>
 80117ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117b0:	e13d      	b.n	8011a2e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	f003 0301 	and.w	r3, r3, #1
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d106      	bne.n	80117cc <f_read+0x72>
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	2107      	movs	r1, #7
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fd fb12 	bl	800edec <unlock_fs>
 80117c8:	2307      	movs	r3, #7
 80117ca:	e130      	b.n	8011a2e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	68da      	ldr	r2, [r3, #12]
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	699b      	ldr	r3, [r3, #24]
 80117d4:	1ad3      	subs	r3, r2, r3
 80117d6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80117d8:	687a      	ldr	r2, [r7, #4]
 80117da:	6a3b      	ldr	r3, [r7, #32]
 80117dc:	429a      	cmp	r2, r3
 80117de:	f240 811c 	bls.w	8011a1a <f_read+0x2c0>
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80117e6:	e118      	b.n	8011a1a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	f040 80e4 	bne.w	80119be <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	699b      	ldr	r3, [r3, #24]
 80117fa:	0a5b      	lsrs	r3, r3, #9
 80117fc:	697a      	ldr	r2, [r7, #20]
 80117fe:	8952      	ldrh	r2, [r2, #10]
 8011800:	3a01      	subs	r2, #1
 8011802:	4013      	ands	r3, r2
 8011804:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011806:	69fb      	ldr	r3, [r7, #28]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d139      	bne.n	8011880 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	699b      	ldr	r3, [r3, #24]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d103      	bne.n	801181c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	633b      	str	r3, [r7, #48]	@ 0x30
 801181a:	e013      	b.n	8011844 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011820:	2b00      	cmp	r3, #0
 8011822:	d007      	beq.n	8011834 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	4619      	mov	r1, r3
 801182a:	68f8      	ldr	r0, [r7, #12]
 801182c:	f7fd fff3 	bl	800f816 <clmt_clust>
 8011830:	6338      	str	r0, [r7, #48]	@ 0x30
 8011832:	e007      	b.n	8011844 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	69db      	ldr	r3, [r3, #28]
 801183a:	4619      	mov	r1, r3
 801183c:	4610      	mov	r0, r2
 801183e:	f7fd fd5c 	bl	800f2fa <get_fat>
 8011842:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011846:	2b01      	cmp	r3, #1
 8011848:	d809      	bhi.n	801185e <f_read+0x104>
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	2202      	movs	r2, #2
 801184e:	755a      	strb	r2, [r3, #21]
 8011850:	697b      	ldr	r3, [r7, #20]
 8011852:	2102      	movs	r1, #2
 8011854:	4618      	mov	r0, r3
 8011856:	f7fd fac9 	bl	800edec <unlock_fs>
 801185a:	2302      	movs	r3, #2
 801185c:	e0e7      	b.n	8011a2e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801185e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011864:	d109      	bne.n	801187a <f_read+0x120>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	2201      	movs	r2, #1
 801186a:	755a      	strb	r2, [r3, #21]
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2101      	movs	r1, #1
 8011870:	4618      	mov	r0, r3
 8011872:	f7fd fabb 	bl	800edec <unlock_fs>
 8011876:	2301      	movs	r3, #1
 8011878:	e0d9      	b.n	8011a2e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801187e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011880:	697a      	ldr	r2, [r7, #20]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	69db      	ldr	r3, [r3, #28]
 8011886:	4619      	mov	r1, r3
 8011888:	4610      	mov	r0, r2
 801188a:	f7fd fd17 	bl	800f2bc <clust2sect>
 801188e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011890:	69bb      	ldr	r3, [r7, #24]
 8011892:	2b00      	cmp	r3, #0
 8011894:	d109      	bne.n	80118aa <f_read+0x150>
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	2202      	movs	r2, #2
 801189a:	755a      	strb	r2, [r3, #21]
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	2102      	movs	r1, #2
 80118a0:	4618      	mov	r0, r3
 80118a2:	f7fd faa3 	bl	800edec <unlock_fs>
 80118a6:	2302      	movs	r3, #2
 80118a8:	e0c1      	b.n	8011a2e <f_read+0x2d4>
			sect += csect;
 80118aa:	69ba      	ldr	r2, [r7, #24]
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	4413      	add	r3, r2
 80118b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	0a5b      	lsrs	r3, r3, #9
 80118b6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80118b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d03e      	beq.n	801193c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80118be:	69fa      	ldr	r2, [r7, #28]
 80118c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c2:	4413      	add	r3, r2
 80118c4:	697a      	ldr	r2, [r7, #20]
 80118c6:	8952      	ldrh	r2, [r2, #10]
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d905      	bls.n	80118d8 <f_read+0x17e>
					cc = fs->csize - csect;
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	895b      	ldrh	r3, [r3, #10]
 80118d0:	461a      	mov	r2, r3
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	7858      	ldrb	r0, [r3, #1]
 80118dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118de:	69ba      	ldr	r2, [r7, #24]
 80118e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80118e2:	f7fd f90f 	bl	800eb04 <disk_read>
 80118e6:	4603      	mov	r3, r0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d009      	beq.n	8011900 <f_read+0x1a6>
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	2201      	movs	r2, #1
 80118f0:	755a      	strb	r2, [r3, #21]
 80118f2:	697b      	ldr	r3, [r7, #20]
 80118f4:	2101      	movs	r1, #1
 80118f6:	4618      	mov	r0, r3
 80118f8:	f7fd fa78 	bl	800edec <unlock_fs>
 80118fc:	2301      	movs	r3, #1
 80118fe:	e096      	b.n	8011a2e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	7d1b      	ldrb	r3, [r3, #20]
 8011904:	b25b      	sxtb	r3, r3
 8011906:	2b00      	cmp	r3, #0
 8011908:	da14      	bge.n	8011934 <f_read+0x1da>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6a1a      	ldr	r2, [r3, #32]
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011914:	429a      	cmp	r2, r3
 8011916:	d90d      	bls.n	8011934 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	6a1a      	ldr	r2, [r3, #32]
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	1ad3      	subs	r3, r2, r3
 8011920:	025b      	lsls	r3, r3, #9
 8011922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011924:	18d0      	adds	r0, r2, r3
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	3330      	adds	r3, #48	@ 0x30
 801192a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801192e:	4619      	mov	r1, r3
 8011930:	f7fd f9c8 	bl	800ecc4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011936:	025b      	lsls	r3, r3, #9
 8011938:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801193a:	e05a      	b.n	80119f2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	6a1b      	ldr	r3, [r3, #32]
 8011940:	69ba      	ldr	r2, [r7, #24]
 8011942:	429a      	cmp	r2, r3
 8011944:	d038      	beq.n	80119b8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	7d1b      	ldrb	r3, [r3, #20]
 801194a:	b25b      	sxtb	r3, r3
 801194c:	2b00      	cmp	r3, #0
 801194e:	da1d      	bge.n	801198c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	7858      	ldrb	r0, [r3, #1]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	6a1a      	ldr	r2, [r3, #32]
 801195e:	2301      	movs	r3, #1
 8011960:	f7fd f8f0 	bl	800eb44 <disk_write>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	d009      	beq.n	801197e <f_read+0x224>
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	2201      	movs	r2, #1
 801196e:	755a      	strb	r2, [r3, #21]
 8011970:	697b      	ldr	r3, [r7, #20]
 8011972:	2101      	movs	r1, #1
 8011974:	4618      	mov	r0, r3
 8011976:	f7fd fa39 	bl	800edec <unlock_fs>
 801197a:	2301      	movs	r3, #1
 801197c:	e057      	b.n	8011a2e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	7d1b      	ldrb	r3, [r3, #20]
 8011982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011986:	b2da      	uxtb	r2, r3
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	7858      	ldrb	r0, [r3, #1]
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011996:	2301      	movs	r3, #1
 8011998:	69ba      	ldr	r2, [r7, #24]
 801199a:	f7fd f8b3 	bl	800eb04 <disk_read>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d009      	beq.n	80119b8 <f_read+0x25e>
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2201      	movs	r2, #1
 80119a8:	755a      	strb	r2, [r3, #21]
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2101      	movs	r1, #1
 80119ae:	4618      	mov	r0, r3
 80119b0:	f7fd fa1c 	bl	800edec <unlock_fs>
 80119b4:	2301      	movs	r3, #1
 80119b6:	e03a      	b.n	8011a2e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	69ba      	ldr	r2, [r7, #24]
 80119bc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	699b      	ldr	r3, [r3, #24]
 80119c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119c6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80119ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80119cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	429a      	cmp	r2, r3
 80119d2:	d901      	bls.n	80119d8 <f_read+0x27e>
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	699b      	ldr	r3, [r3, #24]
 80119e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119e6:	4413      	add	r3, r2
 80119e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119ea:	4619      	mov	r1, r3
 80119ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80119ee:	f7fd f969 	bl	800ecc4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80119f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119f6:	4413      	add	r3, r2
 80119f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	699a      	ldr	r2, [r3, #24]
 80119fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a00:	441a      	add	r2, r3
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	619a      	str	r2, [r3, #24]
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	681a      	ldr	r2, [r3, #0]
 8011a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a0c:	441a      	add	r2, r3
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	601a      	str	r2, [r3, #0]
 8011a12:	687a      	ldr	r2, [r7, #4]
 8011a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a16:	1ad3      	subs	r3, r2, r3
 8011a18:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f47f aee3 	bne.w	80117e8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2100      	movs	r1, #0
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7fd f9e0 	bl	800edec <unlock_fs>
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3738      	adds	r7, #56	@ 0x38
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}

08011a36 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b08c      	sub	sp, #48	@ 0x30
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	60f8      	str	r0, [r7, #12]
 8011a3e:	60b9      	str	r1, [r7, #8]
 8011a40:	607a      	str	r2, [r7, #4]
 8011a42:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f107 0210 	add.w	r2, r7, #16
 8011a54:	4611      	mov	r1, r2
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7ff fb18 	bl	801108c <validate>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011a62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d107      	bne.n	8011a7a <f_write+0x44>
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	7d5b      	ldrb	r3, [r3, #21]
 8011a6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011a72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d009      	beq.n	8011a8e <f_write+0x58>
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8011a80:	4611      	mov	r1, r2
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fd f9b2 	bl	800edec <unlock_fs>
 8011a88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011a8c:	e173      	b.n	8011d76 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	7d1b      	ldrb	r3, [r3, #20]
 8011a92:	f003 0302 	and.w	r3, r3, #2
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <f_write+0x72>
 8011a9a:	693b      	ldr	r3, [r7, #16]
 8011a9c:	2107      	movs	r1, #7
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fd f9a4 	bl	800edec <unlock_fs>
 8011aa4:	2307      	movs	r3, #7
 8011aa6:	e166      	b.n	8011d76 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	699a      	ldr	r2, [r3, #24]
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	441a      	add	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	699b      	ldr	r3, [r3, #24]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	f080 814b 	bcs.w	8011d50 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	699b      	ldr	r3, [r3, #24]
 8011abe:	43db      	mvns	r3, r3
 8011ac0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011ac2:	e145      	b.n	8011d50 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	699b      	ldr	r3, [r3, #24]
 8011ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	f040 8101 	bne.w	8011cd4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	699b      	ldr	r3, [r3, #24]
 8011ad6:	0a5b      	lsrs	r3, r3, #9
 8011ad8:	693a      	ldr	r2, [r7, #16]
 8011ada:	8952      	ldrh	r2, [r2, #10]
 8011adc:	3a01      	subs	r2, #1
 8011ade:	4013      	ands	r3, r2
 8011ae0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011ae2:	69bb      	ldr	r3, [r7, #24]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d14d      	bne.n	8011b84 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	699b      	ldr	r3, [r3, #24]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10c      	bne.n	8011b0a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d11a      	bne.n	8011b32 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2100      	movs	r1, #0
 8011b00:	4618      	mov	r0, r3
 8011b02:	f7fd fdf0 	bl	800f6e6 <create_chain>
 8011b06:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011b08:	e013      	b.n	8011b32 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d007      	beq.n	8011b22 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	699b      	ldr	r3, [r3, #24]
 8011b16:	4619      	mov	r1, r3
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f7fd fe7c 	bl	800f816 <clmt_clust>
 8011b1e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011b20:	e007      	b.n	8011b32 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011b22:	68fa      	ldr	r2, [r7, #12]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	69db      	ldr	r3, [r3, #28]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	f7fd fddb 	bl	800f6e6 <create_chain>
 8011b30:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f000 8110 	beq.w	8011d5a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d109      	bne.n	8011b54 <f_write+0x11e>
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2202      	movs	r2, #2
 8011b44:	755a      	strb	r2, [r3, #21]
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	2102      	movs	r1, #2
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fd f94e 	bl	800edec <unlock_fs>
 8011b50:	2302      	movs	r3, #2
 8011b52:	e110      	b.n	8011d76 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5a:	d109      	bne.n	8011b70 <f_write+0x13a>
 8011b5c:	68fb      	ldr	r3, [r7, #12]
 8011b5e:	2201      	movs	r2, #1
 8011b60:	755a      	strb	r2, [r3, #21]
 8011b62:	693b      	ldr	r3, [r7, #16]
 8011b64:	2101      	movs	r1, #1
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fd f940 	bl	800edec <unlock_fs>
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	e102      	b.n	8011d76 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b74:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d102      	bne.n	8011b84 <f_write+0x14e>
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b82:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	7d1b      	ldrb	r3, [r3, #20]
 8011b88:	b25b      	sxtb	r3, r3
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	da1d      	bge.n	8011bca <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b8e:	693b      	ldr	r3, [r7, #16]
 8011b90:	7858      	ldrb	r0, [r3, #1]
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	6a1a      	ldr	r2, [r3, #32]
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	f7fc ffd1 	bl	800eb44 <disk_write>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d009      	beq.n	8011bbc <f_write+0x186>
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2201      	movs	r2, #1
 8011bac:	755a      	strb	r2, [r3, #21]
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	2101      	movs	r1, #1
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fd f91a 	bl	800edec <unlock_fs>
 8011bb8:	2301      	movs	r3, #1
 8011bba:	e0dc      	b.n	8011d76 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	7d1b      	ldrb	r3, [r3, #20]
 8011bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bc4:	b2da      	uxtb	r2, r3
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011bca:	693a      	ldr	r2, [r7, #16]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	4610      	mov	r0, r2
 8011bd4:	f7fd fb72 	bl	800f2bc <clust2sect>
 8011bd8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d109      	bne.n	8011bf4 <f_write+0x1be>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	2202      	movs	r2, #2
 8011be4:	755a      	strb	r2, [r3, #21]
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	2102      	movs	r1, #2
 8011bea:	4618      	mov	r0, r3
 8011bec:	f7fd f8fe 	bl	800edec <unlock_fs>
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	e0c0      	b.n	8011d76 <f_write+0x340>
			sect += csect;
 8011bf4:	697a      	ldr	r2, [r7, #20]
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	0a5b      	lsrs	r3, r3, #9
 8011c00:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011c02:	6a3b      	ldr	r3, [r7, #32]
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d041      	beq.n	8011c8c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011c08:	69ba      	ldr	r2, [r7, #24]
 8011c0a:	6a3b      	ldr	r3, [r7, #32]
 8011c0c:	4413      	add	r3, r2
 8011c0e:	693a      	ldr	r2, [r7, #16]
 8011c10:	8952      	ldrh	r2, [r2, #10]
 8011c12:	4293      	cmp	r3, r2
 8011c14:	d905      	bls.n	8011c22 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	895b      	ldrh	r3, [r3, #10]
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	69bb      	ldr	r3, [r7, #24]
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	7858      	ldrb	r0, [r3, #1]
 8011c26:	6a3b      	ldr	r3, [r7, #32]
 8011c28:	697a      	ldr	r2, [r7, #20]
 8011c2a:	69f9      	ldr	r1, [r7, #28]
 8011c2c:	f7fc ff8a 	bl	800eb44 <disk_write>
 8011c30:	4603      	mov	r3, r0
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d009      	beq.n	8011c4a <f_write+0x214>
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2201      	movs	r2, #1
 8011c3a:	755a      	strb	r2, [r3, #21]
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	2101      	movs	r1, #1
 8011c40:	4618      	mov	r0, r3
 8011c42:	f7fd f8d3 	bl	800edec <unlock_fs>
 8011c46:	2301      	movs	r3, #1
 8011c48:	e095      	b.n	8011d76 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	6a1a      	ldr	r2, [r3, #32]
 8011c4e:	697b      	ldr	r3, [r7, #20]
 8011c50:	1ad3      	subs	r3, r2, r3
 8011c52:	6a3a      	ldr	r2, [r7, #32]
 8011c54:	429a      	cmp	r2, r3
 8011c56:	d915      	bls.n	8011c84 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	6a1a      	ldr	r2, [r3, #32]
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	1ad3      	subs	r3, r2, r3
 8011c66:	025b      	lsls	r3, r3, #9
 8011c68:	69fa      	ldr	r2, [r7, #28]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c70:	4619      	mov	r1, r3
 8011c72:	f7fd f827 	bl	800ecc4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	7d1b      	ldrb	r3, [r3, #20]
 8011c7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c7e:	b2da      	uxtb	r2, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011c84:	6a3b      	ldr	r3, [r7, #32]
 8011c86:	025b      	lsls	r3, r3, #9
 8011c88:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011c8a:	e044      	b.n	8011d16 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	6a1b      	ldr	r3, [r3, #32]
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d01b      	beq.n	8011cce <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	699a      	ldr	r2, [r3, #24]
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d215      	bcs.n	8011cce <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	7858      	ldrb	r0, [r3, #1]
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cac:	2301      	movs	r3, #1
 8011cae:	697a      	ldr	r2, [r7, #20]
 8011cb0:	f7fc ff28 	bl	800eb04 <disk_read>
 8011cb4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d009      	beq.n	8011cce <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	2201      	movs	r2, #1
 8011cbe:	755a      	strb	r2, [r3, #21]
 8011cc0:	693b      	ldr	r3, [r7, #16]
 8011cc2:	2101      	movs	r1, #1
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7fd f891 	bl	800edec <unlock_fs>
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e053      	b.n	8011d76 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	697a      	ldr	r2, [r7, #20]
 8011cd2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	699b      	ldr	r3, [r3, #24]
 8011cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cdc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011ce0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011ce2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d901      	bls.n	8011cee <f_write+0x2b8>
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	699b      	ldr	r3, [r3, #24]
 8011cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cfc:	4413      	add	r3, r2
 8011cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d00:	69f9      	ldr	r1, [r7, #28]
 8011d02:	4618      	mov	r0, r3
 8011d04:	f7fc ffde 	bl	800ecc4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	7d1b      	ldrb	r3, [r3, #20]
 8011d0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011d16:	69fa      	ldr	r2, [r7, #28]
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	4413      	add	r3, r2
 8011d1c:	61fb      	str	r3, [r7, #28]
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	699a      	ldr	r2, [r3, #24]
 8011d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d24:	441a      	add	r2, r3
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	619a      	str	r2, [r3, #24]
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	68da      	ldr	r2, [r3, #12]
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	699b      	ldr	r3, [r3, #24]
 8011d32:	429a      	cmp	r2, r3
 8011d34:	bf38      	it	cc
 8011d36:	461a      	movcc	r2, r3
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	60da      	str	r2, [r3, #12]
 8011d3c:	683b      	ldr	r3, [r7, #0]
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d42:	441a      	add	r2, r3
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	601a      	str	r2, [r3, #0]
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	f47f aeb6 	bne.w	8011ac4 <f_write+0x8e>
 8011d58:	e000      	b.n	8011d5c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011d5a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	7d1b      	ldrb	r3, [r3, #20]
 8011d60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011d64:	b2da      	uxtb	r2, r3
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	2100      	movs	r1, #0
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7fd f83c 	bl	800edec <unlock_fs>
 8011d74:	2300      	movs	r3, #0
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3730      	adds	r7, #48	@ 0x30
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}

08011d7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d7e:	b580      	push	{r7, lr}
 8011d80:	b086      	sub	sp, #24
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f107 0208 	add.w	r2, r7, #8
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff f97c 	bl	801108c <validate>
 8011d94:	4603      	mov	r3, r0
 8011d96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d98:	7dfb      	ldrb	r3, [r7, #23]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d16d      	bne.n	8011e7a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	7d1b      	ldrb	r3, [r3, #20]
 8011da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d067      	beq.n	8011e7a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	7d1b      	ldrb	r3, [r3, #20]
 8011dae:	b25b      	sxtb	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	da1a      	bge.n	8011dea <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	7858      	ldrb	r0, [r3, #1]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6a1a      	ldr	r2, [r3, #32]
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	f7fc febe 	bl	800eb44 <disk_write>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d006      	beq.n	8011ddc <f_sync+0x5e>
 8011dce:	68bb      	ldr	r3, [r7, #8]
 8011dd0:	2101      	movs	r1, #1
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	f7fd f80a 	bl	800edec <unlock_fs>
 8011dd8:	2301      	movs	r3, #1
 8011dda:	e055      	b.n	8011e88 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	7d1b      	ldrb	r3, [r3, #20]
 8011de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011de4:	b2da      	uxtb	r2, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011dea:	f7fc f907 	bl	800dffc <get_fattime>
 8011dee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011df0:	68ba      	ldr	r2, [r7, #8]
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011df6:	4619      	mov	r1, r3
 8011df8:	4610      	mov	r0, r2
 8011dfa:	f7fd f9c3 	bl	800f184 <move_window>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d138      	bne.n	8011e7a <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	330b      	adds	r3, #11
 8011e12:	781a      	ldrb	r2, [r3, #0]
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	330b      	adds	r3, #11
 8011e18:	f042 0220 	orr.w	r2, r2, #32
 8011e1c:	b2d2      	uxtb	r2, r2
 8011e1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6818      	ldr	r0, [r3, #0]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	689b      	ldr	r3, [r3, #8]
 8011e28:	461a      	mov	r2, r3
 8011e2a:	68f9      	ldr	r1, [r7, #12]
 8011e2c:	f7fd fecd 	bl	800fbca <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	f103 021c 	add.w	r2, r3, #28
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	4619      	mov	r1, r3
 8011e3c:	4610      	mov	r0, r2
 8011e3e:	f7fc ff15 	bl	800ec6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	3316      	adds	r3, #22
 8011e46:	6939      	ldr	r1, [r7, #16]
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fc ff0f 	bl	800ec6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	3312      	adds	r3, #18
 8011e52:	2100      	movs	r1, #0
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fc feee 	bl	800ec36 <st_word>
					fs->wflag = 1;
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2201      	movs	r2, #1
 8011e5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fd f9bc 	bl	800f1e0 <sync_fs>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	7d1b      	ldrb	r3, [r3, #20]
 8011e70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e74:	b2da      	uxtb	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011e7a:	68bb      	ldr	r3, [r7, #8]
 8011e7c:	7dfa      	ldrb	r2, [r7, #23]
 8011e7e:	4611      	mov	r1, r2
 8011e80:	4618      	mov	r0, r3
 8011e82:	f7fc ffb3 	bl	800edec <unlock_fs>
 8011e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	3718      	adds	r7, #24
 8011e8c:	46bd      	mov	sp, r7
 8011e8e:	bd80      	pop	{r7, pc}

08011e90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011e90:	b580      	push	{r7, lr}
 8011e92:	b084      	sub	sp, #16
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff ff70 	bl	8011d7e <f_sync>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011ea2:	7bfb      	ldrb	r3, [r7, #15]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d11d      	bne.n	8011ee4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	f107 0208 	add.w	r2, r7, #8
 8011eae:	4611      	mov	r1, r2
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7ff f8eb 	bl	801108c <validate>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011eba:	7bfb      	ldrb	r3, [r7, #15]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d111      	bne.n	8011ee4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	691b      	ldr	r3, [r3, #16]
 8011ec4:	4618      	mov	r0, r3
 8011ec6:	f7fd f8b9 	bl	800f03c <dec_lock>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011ece:	7bfb      	ldrb	r3, [r7, #15]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d102      	bne.n	8011eda <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011eda:	68bb      	ldr	r3, [r7, #8]
 8011edc:	2100      	movs	r1, #0
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fc ff84 	bl	800edec <unlock_fs>
#endif
		}
	}
	return res;
 8011ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3710      	adds	r7, #16
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}

08011eee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011eee:	b580      	push	{r7, lr}
 8011ef0:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011efa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011efe:	6018      	str	r0, [r3, #0]
 8011f00:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f04:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011f08:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011f0a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f0e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d101      	bne.n	8011f1c <f_opendir+0x2e>
 8011f18:	2309      	movs	r3, #9
 8011f1a:	e0a8      	b.n	801206e <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 8011f1c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8011f2a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8011f2e:	463b      	mov	r3, r7
 8011f30:	2200      	movs	r2, #0
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7fe fe56 	bl	8010be4 <find_volume>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8011f3e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	f040 8081 	bne.w	801204a <f_opendir+0x15c>
		obj->fs = fs;
 8011f48:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011f4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f50:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8011f52:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011f56:	f107 020c 	add.w	r2, r7, #12
 8011f5a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011f5c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f60:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f6a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f6e:	4611      	mov	r1, r2
 8011f70:	6818      	ldr	r0, [r3, #0]
 8011f72:	f7fe fd2b 	bl	80109cc <follow_path>
 8011f76:	4603      	mov	r3, r0
 8011f78:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8011f7c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d15b      	bne.n	801203c <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011f84:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011f88:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011f92:	b25b      	sxtb	r3, r3
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	db1a      	blt.n	8011fce <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011f98:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011f9c:	799b      	ldrb	r3, [r3, #6]
 8011f9e:	f003 0310 	and.w	r3, r3, #16
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d010      	beq.n	8011fc8 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011fa6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011faa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011fae:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6a1b      	ldr	r3, [r3, #32]
 8011fb6:	4619      	mov	r1, r3
 8011fb8:	4610      	mov	r0, r2
 8011fba:	f7fd fde7 	bl	800fb8c <ld_clust>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fc4:	609a      	str	r2, [r3, #8]
 8011fc6:	e002      	b.n	8011fce <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011fc8:	2305      	movs	r3, #5
 8011fca:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8011fce:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d132      	bne.n	801203c <f_opendir+0x14e>
				obj->id = fs->id;
 8011fd6:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011fda:	88da      	ldrh	r2, [r3, #6]
 8011fdc:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011fe0:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011fe2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011fe6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011fea:	2100      	movs	r1, #0
 8011fec:	6818      	ldr	r0, [r3, #0]
 8011fee:	f7fd fc46 	bl	800f87e <dir_sdi>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011ff8:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d11d      	bne.n	801203c <f_opendir+0x14e>
					if (obj->sclust) {
 8012000:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8012004:	689b      	ldr	r3, [r3, #8]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d014      	beq.n	8012034 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801200a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801200e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8012012:	2100      	movs	r1, #0
 8012014:	6818      	ldr	r0, [r3, #0]
 8012016:	f7fc ff83 	bl	800ef20 <inc_lock>
 801201a:	4602      	mov	r2, r0
 801201c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8012020:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012022:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8012026:	691b      	ldr	r3, [r3, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d107      	bne.n	801203c <f_opendir+0x14e>
 801202c:	2312      	movs	r3, #18
 801202e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8012032:	e003      	b.n	801203c <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012034:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8012038:	2200      	movs	r2, #0
 801203a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801203c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8012040:	2b04      	cmp	r3, #4
 8012042:	d102      	bne.n	801204a <f_opendir+0x15c>
 8012044:	2305      	movs	r3, #5
 8012046:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801204a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 801204e:	2b00      	cmp	r3, #0
 8012050:	d003      	beq.n	801205a <f_opendir+0x16c>
 8012052:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8012056:	2200      	movs	r2, #0
 8012058:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801205a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 801205e:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8012062:	4611      	mov	r1, r2
 8012064:	4618      	mov	r0, r3
 8012066:	f7fc fec1 	bl	800edec <unlock_fs>
 801206a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 801206e:	4618      	mov	r0, r3
 8012070:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f107 0208 	add.w	r2, r7, #8
 8012086:	4611      	mov	r1, r2
 8012088:	4618      	mov	r0, r3
 801208a:	f7fe ffff 	bl	801108c <validate>
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012092:	7bfb      	ldrb	r3, [r7, #15]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d115      	bne.n	80120c4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	691b      	ldr	r3, [r3, #16]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d006      	beq.n	80120ae <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7fc ffc9 	bl	800f03c <dec_lock>
 80120aa:	4603      	mov	r3, r0
 80120ac:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80120ae:	7bfb      	ldrb	r3, [r7, #15]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d102      	bne.n	80120ba <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	2100      	movs	r1, #0
 80120be:	4618      	mov	r0, r3
 80120c0:	f7fc fe94 	bl	800edec <unlock_fs>
#endif
	}
	return res;
 80120c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3710      	adds	r7, #16
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120da:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80120de:	6018      	str	r0, [r3, #0]
 80120e0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120e4:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 80120e8:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80120ea:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80120ee:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80120f8:	4611      	mov	r1, r2
 80120fa:	4618      	mov	r0, r3
 80120fc:	f7fe ffc6 	bl	801108c <validate>
 8012100:	4603      	mov	r3, r0
 8012102:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8012106:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801210a:	2b00      	cmp	r3, #0
 801210c:	d14b      	bne.n	80121a6 <f_readdir+0xd8>
		if (!fno) {
 801210e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012112:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8012116:	681b      	ldr	r3, [r3, #0]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d10b      	bne.n	8012134 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801211c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012120:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8012124:	2100      	movs	r1, #0
 8012126:	6818      	ldr	r0, [r3, #0]
 8012128:	f7fd fba9 	bl	800f87e <dir_sdi>
 801212c:	4603      	mov	r3, r0
 801212e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8012132:	e038      	b.n	80121a6 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8012134:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8012138:	f107 0208 	add.w	r2, r7, #8
 801213c:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 801213e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012142:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8012146:	2100      	movs	r1, #0
 8012148:	6818      	ldr	r0, [r3, #0]
 801214a:	f7fd ff4a 	bl	800ffe2 <dir_read>
 801214e:	4603      	mov	r3, r0
 8012150:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8012154:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8012158:	2b04      	cmp	r3, #4
 801215a:	d102      	bne.n	8012162 <f_readdir+0x94>
 801215c:	2300      	movs	r3, #0
 801215e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8012162:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8012166:	2b00      	cmp	r3, #0
 8012168:	d11d      	bne.n	80121a6 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 801216a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801216e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8012172:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012176:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801217a:	6811      	ldr	r1, [r2, #0]
 801217c:	6818      	ldr	r0, [r3, #0]
 801217e:	f7fe f98f 	bl	80104a0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012182:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8012186:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801218a:	2100      	movs	r1, #0
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	f7fd fbf1 	bl	800f974 <dir_next>
 8012192:	4603      	mov	r3, r0
 8012194:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8012198:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801219c:	2b04      	cmp	r3, #4
 801219e:	d102      	bne.n	80121a6 <f_readdir+0xd8>
 80121a0:	2300      	movs	r3, #0
 80121a2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80121a6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80121aa:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 80121ae:	4611      	mov	r1, r2
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fc fe1b 	bl	800edec <unlock_fs>
 80121b6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
	int n = 0;
 80121d0:	2300      	movs	r3, #0
 80121d2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80121d8:	e01c      	b.n	8012214 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80121da:	f107 0310 	add.w	r3, r7, #16
 80121de:	f107 0114 	add.w	r1, r7, #20
 80121e2:	2201      	movs	r2, #1
 80121e4:	6878      	ldr	r0, [r7, #4]
 80121e6:	f7ff fab8 	bl	801175a <f_read>
		if (rc != 1) break;
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d117      	bne.n	8012220 <f_gets+0x5c>
		c = s[0];
 80121f0:	7d3b      	ldrb	r3, [r7, #20]
 80121f2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80121f4:	7dfb      	ldrb	r3, [r7, #23]
 80121f6:	2b0d      	cmp	r3, #13
 80121f8:	d00b      	beq.n	8012212 <f_gets+0x4e>
		*p++ = c;
 80121fa:	69bb      	ldr	r3, [r7, #24]
 80121fc:	1c5a      	adds	r2, r3, #1
 80121fe:	61ba      	str	r2, [r7, #24]
 8012200:	7dfa      	ldrb	r2, [r7, #23]
 8012202:	701a      	strb	r2, [r3, #0]
		n++;
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	3301      	adds	r3, #1
 8012208:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801220a:	7dfb      	ldrb	r3, [r7, #23]
 801220c:	2b0a      	cmp	r3, #10
 801220e:	d009      	beq.n	8012224 <f_gets+0x60>
 8012210:	e000      	b.n	8012214 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8012212:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	3b01      	subs	r3, #1
 8012218:	69fa      	ldr	r2, [r7, #28]
 801221a:	429a      	cmp	r2, r3
 801221c:	dbdd      	blt.n	80121da <f_gets+0x16>
 801221e:	e002      	b.n	8012226 <f_gets+0x62>
		if (rc != 1) break;
 8012220:	bf00      	nop
 8012222:	e000      	b.n	8012226 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8012224:	bf00      	nop
	}
	*p = 0;
 8012226:	69bb      	ldr	r3, [r7, #24]
 8012228:	2200      	movs	r2, #0
 801222a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d001      	beq.n	8012236 <f_gets+0x72>
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	e000      	b.n	8012238 <f_gets+0x74>
 8012236:	2300      	movs	r3, #0
}
 8012238:	4618      	mov	r0, r3
 801223a:	3720      	adds	r7, #32
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012240:	b480      	push	{r7}
 8012242:	b087      	sub	sp, #28
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	60b9      	str	r1, [r7, #8]
 801224a:	4613      	mov	r3, r2
 801224c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801224e:	2301      	movs	r3, #1
 8012250:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012252:	2300      	movs	r3, #0
 8012254:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012256:	4b1f      	ldr	r3, [pc, #124]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012258:	7a5b      	ldrb	r3, [r3, #9]
 801225a:	b2db      	uxtb	r3, r3
 801225c:	2b00      	cmp	r3, #0
 801225e:	d131      	bne.n	80122c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012260:	4b1c      	ldr	r3, [pc, #112]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012262:	7a5b      	ldrb	r3, [r3, #9]
 8012264:	b2db      	uxtb	r3, r3
 8012266:	461a      	mov	r2, r3
 8012268:	4b1a      	ldr	r3, [pc, #104]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 801226a:	2100      	movs	r1, #0
 801226c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801226e:	4b19      	ldr	r3, [pc, #100]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012270:	7a5b      	ldrb	r3, [r3, #9]
 8012272:	b2db      	uxtb	r3, r3
 8012274:	4a17      	ldr	r2, [pc, #92]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012276:	009b      	lsls	r3, r3, #2
 8012278:	4413      	add	r3, r2
 801227a:	68fa      	ldr	r2, [r7, #12]
 801227c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801227e:	4b15      	ldr	r3, [pc, #84]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012280:	7a5b      	ldrb	r3, [r3, #9]
 8012282:	b2db      	uxtb	r3, r3
 8012284:	461a      	mov	r2, r3
 8012286:	4b13      	ldr	r3, [pc, #76]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012288:	4413      	add	r3, r2
 801228a:	79fa      	ldrb	r2, [r7, #7]
 801228c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801228e:	4b11      	ldr	r3, [pc, #68]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 8012290:	7a5b      	ldrb	r3, [r3, #9]
 8012292:	b2db      	uxtb	r3, r3
 8012294:	1c5a      	adds	r2, r3, #1
 8012296:	b2d1      	uxtb	r1, r2
 8012298:	4a0e      	ldr	r2, [pc, #56]	@ (80122d4 <FATFS_LinkDriverEx+0x94>)
 801229a:	7251      	strb	r1, [r2, #9]
 801229c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801229e:	7dbb      	ldrb	r3, [r7, #22]
 80122a0:	3330      	adds	r3, #48	@ 0x30
 80122a2:	b2da      	uxtb	r2, r3
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	3301      	adds	r3, #1
 80122ac:	223a      	movs	r2, #58	@ 0x3a
 80122ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	3302      	adds	r3, #2
 80122b4:	222f      	movs	r2, #47	@ 0x2f
 80122b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80122b8:	68bb      	ldr	r3, [r7, #8]
 80122ba:	3303      	adds	r3, #3
 80122bc:	2200      	movs	r2, #0
 80122be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80122c0:	2300      	movs	r3, #0
 80122c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80122c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80122c6:	4618      	mov	r0, r3
 80122c8:	371c      	adds	r7, #28
 80122ca:	46bd      	mov	sp, r7
 80122cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop
 80122d4:	2000c2f0 	.word	0x2000c2f0

080122d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b082      	sub	sp, #8
 80122dc:	af00      	add	r7, sp, #0
 80122de:	6078      	str	r0, [r7, #4]
 80122e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80122e2:	2200      	movs	r2, #0
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7ff ffaa 	bl	8012240 <FATFS_LinkDriverEx>
 80122ec:	4603      	mov	r3, r0
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
	...

080122f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b085      	sub	sp, #20
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	6039      	str	r1, [r7, #0]
 8012302:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012304:	88fb      	ldrh	r3, [r7, #6]
 8012306:	2b7f      	cmp	r3, #127	@ 0x7f
 8012308:	d802      	bhi.n	8012310 <ff_convert+0x18>
		c = chr;
 801230a:	88fb      	ldrh	r3, [r7, #6]
 801230c:	81fb      	strh	r3, [r7, #14]
 801230e:	e025      	b.n	801235c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d00b      	beq.n	801232e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	2bff      	cmp	r3, #255	@ 0xff
 801231a:	d805      	bhi.n	8012328 <ff_convert+0x30>
 801231c:	88fb      	ldrh	r3, [r7, #6]
 801231e:	3b80      	subs	r3, #128	@ 0x80
 8012320:	4a12      	ldr	r2, [pc, #72]	@ (801236c <ff_convert+0x74>)
 8012322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012326:	e000      	b.n	801232a <ff_convert+0x32>
 8012328:	2300      	movs	r3, #0
 801232a:	81fb      	strh	r3, [r7, #14]
 801232c:	e016      	b.n	801235c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801232e:	2300      	movs	r3, #0
 8012330:	81fb      	strh	r3, [r7, #14]
 8012332:	e009      	b.n	8012348 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012334:	89fb      	ldrh	r3, [r7, #14]
 8012336:	4a0d      	ldr	r2, [pc, #52]	@ (801236c <ff_convert+0x74>)
 8012338:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801233c:	88fa      	ldrh	r2, [r7, #6]
 801233e:	429a      	cmp	r2, r3
 8012340:	d006      	beq.n	8012350 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012342:	89fb      	ldrh	r3, [r7, #14]
 8012344:	3301      	adds	r3, #1
 8012346:	81fb      	strh	r3, [r7, #14]
 8012348:	89fb      	ldrh	r3, [r7, #14]
 801234a:	2b7f      	cmp	r3, #127	@ 0x7f
 801234c:	d9f2      	bls.n	8012334 <ff_convert+0x3c>
 801234e:	e000      	b.n	8012352 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012350:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012352:	89fb      	ldrh	r3, [r7, #14]
 8012354:	3380      	adds	r3, #128	@ 0x80
 8012356:	b29b      	uxth	r3, r3
 8012358:	b2db      	uxtb	r3, r3
 801235a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801235c:	89fb      	ldrh	r3, [r7, #14]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3714      	adds	r7, #20
 8012362:	46bd      	mov	sp, r7
 8012364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012368:	4770      	bx	lr
 801236a:	bf00      	nop
 801236c:	08018ca0 	.word	0x08018ca0

08012370 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012370:	b480      	push	{r7}
 8012372:	b087      	sub	sp, #28
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801237a:	88fb      	ldrh	r3, [r7, #6]
 801237c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012380:	d201      	bcs.n	8012386 <ff_wtoupper+0x16>
 8012382:	4b3e      	ldr	r3, [pc, #248]	@ (801247c <ff_wtoupper+0x10c>)
 8012384:	e000      	b.n	8012388 <ff_wtoupper+0x18>
 8012386:	4b3e      	ldr	r3, [pc, #248]	@ (8012480 <ff_wtoupper+0x110>)
 8012388:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	1c9a      	adds	r2, r3, #2
 801238e:	617a      	str	r2, [r7, #20]
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012394:	8a7b      	ldrh	r3, [r7, #18]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d068      	beq.n	801246c <ff_wtoupper+0xfc>
 801239a:	88fa      	ldrh	r2, [r7, #6]
 801239c:	8a7b      	ldrh	r3, [r7, #18]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d364      	bcc.n	801246c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80123a2:	697b      	ldr	r3, [r7, #20]
 80123a4:	1c9a      	adds	r2, r3, #2
 80123a6:	617a      	str	r2, [r7, #20]
 80123a8:	881b      	ldrh	r3, [r3, #0]
 80123aa:	823b      	strh	r3, [r7, #16]
 80123ac:	8a3b      	ldrh	r3, [r7, #16]
 80123ae:	0a1b      	lsrs	r3, r3, #8
 80123b0:	81fb      	strh	r3, [r7, #14]
 80123b2:	8a3b      	ldrh	r3, [r7, #16]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80123b8:	88fa      	ldrh	r2, [r7, #6]
 80123ba:	8a79      	ldrh	r1, [r7, #18]
 80123bc:	8a3b      	ldrh	r3, [r7, #16]
 80123be:	440b      	add	r3, r1
 80123c0:	429a      	cmp	r2, r3
 80123c2:	da49      	bge.n	8012458 <ff_wtoupper+0xe8>
			switch (cmd) {
 80123c4:	89fb      	ldrh	r3, [r7, #14]
 80123c6:	2b08      	cmp	r3, #8
 80123c8:	d84f      	bhi.n	801246a <ff_wtoupper+0xfa>
 80123ca:	a201      	add	r2, pc, #4	@ (adr r2, 80123d0 <ff_wtoupper+0x60>)
 80123cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d0:	080123f5 	.word	0x080123f5
 80123d4:	08012407 	.word	0x08012407
 80123d8:	0801241d 	.word	0x0801241d
 80123dc:	08012425 	.word	0x08012425
 80123e0:	0801242d 	.word	0x0801242d
 80123e4:	08012435 	.word	0x08012435
 80123e8:	0801243d 	.word	0x0801243d
 80123ec:	08012445 	.word	0x08012445
 80123f0:	0801244d 	.word	0x0801244d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80123f4:	88fa      	ldrh	r2, [r7, #6]
 80123f6:	8a7b      	ldrh	r3, [r7, #18]
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	005b      	lsls	r3, r3, #1
 80123fc:	697a      	ldr	r2, [r7, #20]
 80123fe:	4413      	add	r3, r2
 8012400:	881b      	ldrh	r3, [r3, #0]
 8012402:	80fb      	strh	r3, [r7, #6]
 8012404:	e027      	b.n	8012456 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012406:	88fa      	ldrh	r2, [r7, #6]
 8012408:	8a7b      	ldrh	r3, [r7, #18]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	b29b      	uxth	r3, r3
 801240e:	f003 0301 	and.w	r3, r3, #1
 8012412:	b29b      	uxth	r3, r3
 8012414:	88fa      	ldrh	r2, [r7, #6]
 8012416:	1ad3      	subs	r3, r2, r3
 8012418:	80fb      	strh	r3, [r7, #6]
 801241a:	e01c      	b.n	8012456 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801241c:	88fb      	ldrh	r3, [r7, #6]
 801241e:	3b10      	subs	r3, #16
 8012420:	80fb      	strh	r3, [r7, #6]
 8012422:	e018      	b.n	8012456 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012424:	88fb      	ldrh	r3, [r7, #6]
 8012426:	3b20      	subs	r3, #32
 8012428:	80fb      	strh	r3, [r7, #6]
 801242a:	e014      	b.n	8012456 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801242c:	88fb      	ldrh	r3, [r7, #6]
 801242e:	3b30      	subs	r3, #48	@ 0x30
 8012430:	80fb      	strh	r3, [r7, #6]
 8012432:	e010      	b.n	8012456 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012434:	88fb      	ldrh	r3, [r7, #6]
 8012436:	3b1a      	subs	r3, #26
 8012438:	80fb      	strh	r3, [r7, #6]
 801243a:	e00c      	b.n	8012456 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801243c:	88fb      	ldrh	r3, [r7, #6]
 801243e:	3308      	adds	r3, #8
 8012440:	80fb      	strh	r3, [r7, #6]
 8012442:	e008      	b.n	8012456 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012444:	88fb      	ldrh	r3, [r7, #6]
 8012446:	3b50      	subs	r3, #80	@ 0x50
 8012448:	80fb      	strh	r3, [r7, #6]
 801244a:	e004      	b.n	8012456 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801244c:	88fb      	ldrh	r3, [r7, #6]
 801244e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012452:	80fb      	strh	r3, [r7, #6]
 8012454:	bf00      	nop
			}
			break;
 8012456:	e008      	b.n	801246a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012458:	89fb      	ldrh	r3, [r7, #14]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d195      	bne.n	801238a <ff_wtoupper+0x1a>
 801245e:	8a3b      	ldrh	r3, [r7, #16]
 8012460:	005b      	lsls	r3, r3, #1
 8012462:	697a      	ldr	r2, [r7, #20]
 8012464:	4413      	add	r3, r2
 8012466:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012468:	e78f      	b.n	801238a <ff_wtoupper+0x1a>
			break;
 801246a:	bf00      	nop
	}

	return chr;
 801246c:	88fb      	ldrh	r3, [r7, #6]
}
 801246e:	4618      	mov	r0, r3
 8012470:	371c      	adds	r7, #28
 8012472:	46bd      	mov	sp, r7
 8012474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop
 801247c:	08018da0 	.word	0x08018da0
 8012480:	08018f94 	.word	0x08018f94

08012484 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b086      	sub	sp, #24
 8012488:	af00      	add	r7, sp, #0
 801248a:	4603      	mov	r3, r0
 801248c:	6039      	str	r1, [r7, #0]
 801248e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8012490:	2300      	movs	r3, #0
 8012492:	60fb      	str	r3, [r7, #12]
 8012494:	2300      	movs	r3, #0
 8012496:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012498:	f107 030c 	add.w	r3, r7, #12
 801249c:	2101      	movs	r1, #1
 801249e:	4618      	mov	r0, r3
 80124a0:	f000 f869 	bl	8012576 <osSemaphoreCreate>
 80124a4:	4602      	mov	r2, r0
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	bf14      	ite	ne
 80124b2:	2301      	movne	r3, #1
 80124b4:	2300      	moveq	r3, #0
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	617b      	str	r3, [r7, #20]

    return ret;
 80124ba:	697b      	ldr	r3, [r7, #20]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b082      	sub	sp, #8
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 f909 	bl	80126e4 <osSemaphoreDelete>
#endif
    return 1;
 80124d2:	2301      	movs	r3, #1
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80124e4:	2300      	movs	r3, #0
 80124e6:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80124e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f000 f875 	bl	80125dc <osSemaphoreWait>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d101      	bne.n	80124fc <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80124f8:	2301      	movs	r3, #1
 80124fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80124fc:	68fb      	ldr	r3, [r7, #12]
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}

08012506 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012506:	b580      	push	{r7, lr}
 8012508:	b082      	sub	sp, #8
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801250e:	6878      	ldr	r0, [r7, #4]
 8012510:	f000 f8b2 	bl	8012678 <osSemaphoreRelease>
#endif
}
 8012514:	bf00      	nop
 8012516:	3708      	adds	r7, #8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}

0801251c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801251c:	b480      	push	{r7}
 801251e:	b083      	sub	sp, #12
 8012520:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012522:	f3ef 8305 	mrs	r3, IPSR
 8012526:	607b      	str	r3, [r7, #4]
  return(result);
 8012528:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801252a:	2b00      	cmp	r3, #0
 801252c:	bf14      	ite	ne
 801252e:	2301      	movne	r3, #1
 8012530:	2300      	moveq	r3, #0
 8012532:	b2db      	uxtb	r3, r3
}
 8012534:	4618      	mov	r0, r3
 8012536:	370c      	adds	r7, #12
 8012538:	46bd      	mov	sp, r7
 801253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253e:	4770      	bx	lr

08012540 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012540:	b580      	push	{r7, lr}
 8012542:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012544:	f001 fc50 	bl	8013de8 <vTaskStartScheduler>
  
  return osOK;
 8012548:	2300      	movs	r3, #0
}
 801254a:	4618      	mov	r0, r3
 801254c:	bd80      	pop	{r7, pc}

0801254e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801254e:	b580      	push	{r7, lr}
 8012550:	b084      	sub	sp, #16
 8012552:	af00      	add	r7, sp, #0
 8012554:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d001      	beq.n	8012564 <osDelay+0x16>
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	e000      	b.n	8012566 <osDelay+0x18>
 8012564:	2301      	movs	r3, #1
 8012566:	4618      	mov	r0, r3
 8012568:	f001 fc06 	bl	8013d78 <vTaskDelay>
  
  return osOK;
 801256c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801256e:	4618      	mov	r0, r3
 8012570:	3710      	adds	r7, #16
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8012576:	b580      	push	{r7, lr}
 8012578:	b086      	sub	sp, #24
 801257a:	af02      	add	r7, sp, #8
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00f      	beq.n	80125a8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d10a      	bne.n	80125a4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	2203      	movs	r2, #3
 8012594:	9200      	str	r2, [sp, #0]
 8012596:	2200      	movs	r2, #0
 8012598:	2100      	movs	r1, #0
 801259a:	2001      	movs	r0, #1
 801259c:	f000 fb7c 	bl	8012c98 <xQueueGenericCreateStatic>
 80125a0:	4603      	mov	r3, r0
 80125a2:	e016      	b.n	80125d2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80125a4:	2300      	movs	r3, #0
 80125a6:	e014      	b.n	80125d2 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80125a8:	683b      	ldr	r3, [r7, #0]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d110      	bne.n	80125d0 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80125ae:	2203      	movs	r2, #3
 80125b0:	2100      	movs	r1, #0
 80125b2:	2001      	movs	r0, #1
 80125b4:	f000 fbf7 	bl	8012da6 <xQueueGenericCreate>
 80125b8:	60f8      	str	r0, [r7, #12]
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d005      	beq.n	80125cc <osSemaphoreCreate+0x56>
 80125c0:	2300      	movs	r3, #0
 80125c2:	2200      	movs	r2, #0
 80125c4:	2100      	movs	r1, #0
 80125c6:	68f8      	ldr	r0, [r7, #12]
 80125c8:	f000 fc86 	bl	8012ed8 <xQueueGenericSend>
      return sema;
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	e000      	b.n	80125d2 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80125d0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3710      	adds	r7, #16
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}
	...

080125dc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80125e6:	2300      	movs	r3, #0
 80125e8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80125f0:	2380      	movs	r3, #128	@ 0x80
 80125f2:	e03a      	b.n	801266a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80125f4:	2300      	movs	r3, #0
 80125f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125fe:	d103      	bne.n	8012608 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012600:	f04f 33ff 	mov.w	r3, #4294967295
 8012604:	60fb      	str	r3, [r7, #12]
 8012606:	e009      	b.n	801261c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d006      	beq.n	801261c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d101      	bne.n	801261c <osSemaphoreWait+0x40>
      ticks = 1;
 8012618:	2301      	movs	r3, #1
 801261a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801261c:	f7ff ff7e 	bl	801251c <inHandlerMode>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d017      	beq.n	8012656 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012626:	f107 0308 	add.w	r3, r7, #8
 801262a:	461a      	mov	r2, r3
 801262c:	2100      	movs	r1, #0
 801262e:	6878      	ldr	r0, [r7, #4]
 8012630:	f000 fff4 	bl	801361c <xQueueReceiveFromISR>
 8012634:	4603      	mov	r3, r0
 8012636:	2b01      	cmp	r3, #1
 8012638:	d001      	beq.n	801263e <osSemaphoreWait+0x62>
      return osErrorOS;
 801263a:	23ff      	movs	r3, #255	@ 0xff
 801263c:	e015      	b.n	801266a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801263e:	68bb      	ldr	r3, [r7, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d011      	beq.n	8012668 <osSemaphoreWait+0x8c>
 8012644:	4b0b      	ldr	r3, [pc, #44]	@ (8012674 <osSemaphoreWait+0x98>)
 8012646:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801264a:	601a      	str	r2, [r3, #0]
 801264c:	f3bf 8f4f 	dsb	sy
 8012650:	f3bf 8f6f 	isb	sy
 8012654:	e008      	b.n	8012668 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012656:	68f9      	ldr	r1, [r7, #12]
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f000 fec7 	bl	80133ec <xQueueSemaphoreTake>
 801265e:	4603      	mov	r3, r0
 8012660:	2b01      	cmp	r3, #1
 8012662:	d001      	beq.n	8012668 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012664:	23ff      	movs	r3, #255	@ 0xff
 8012666:	e000      	b.n	801266a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012668:	2300      	movs	r3, #0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3710      	adds	r7, #16
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	e000ed04 	.word	0xe000ed04

08012678 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012680:	2300      	movs	r3, #0
 8012682:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8012684:	2300      	movs	r3, #0
 8012686:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012688:	f7ff ff48 	bl	801251c <inHandlerMode>
 801268c:	4603      	mov	r3, r0
 801268e:	2b00      	cmp	r3, #0
 8012690:	d016      	beq.n	80126c0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012692:	f107 0308 	add.w	r3, r7, #8
 8012696:	4619      	mov	r1, r3
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f000 fd27 	bl	80130ec <xQueueGiveFromISR>
 801269e:	4603      	mov	r3, r0
 80126a0:	2b01      	cmp	r3, #1
 80126a2:	d001      	beq.n	80126a8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80126a4:	23ff      	movs	r3, #255	@ 0xff
 80126a6:	e017      	b.n	80126d8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d013      	beq.n	80126d6 <osSemaphoreRelease+0x5e>
 80126ae:	4b0c      	ldr	r3, [pc, #48]	@ (80126e0 <osSemaphoreRelease+0x68>)
 80126b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126b4:	601a      	str	r2, [r3, #0]
 80126b6:	f3bf 8f4f 	dsb	sy
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	e00a      	b.n	80126d6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80126c0:	2300      	movs	r3, #0
 80126c2:	2200      	movs	r2, #0
 80126c4:	2100      	movs	r1, #0
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f000 fc06 	bl	8012ed8 <xQueueGenericSend>
 80126cc:	4603      	mov	r3, r0
 80126ce:	2b01      	cmp	r3, #1
 80126d0:	d001      	beq.n	80126d6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80126d2:	23ff      	movs	r3, #255	@ 0xff
 80126d4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80126d6:	68fb      	ldr	r3, [r7, #12]
}
 80126d8:	4618      	mov	r0, r3
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}
 80126e0:	e000ed04 	.word	0xe000ed04

080126e4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b082      	sub	sp, #8
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80126ec:	f7ff ff16 	bl	801251c <inHandlerMode>
 80126f0:	4603      	mov	r3, r0
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d001      	beq.n	80126fa <osSemaphoreDelete+0x16>
    return osErrorISR;
 80126f6:	2382      	movs	r3, #130	@ 0x82
 80126f8:	e003      	b.n	8012702 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f001 f816 	bl	801372c <vQueueDelete>

  return osOK; 
 8012700:	2300      	movs	r3, #0
}
 8012702:	4618      	mov	r0, r3
 8012704:	3708      	adds	r7, #8
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801270a:	b580      	push	{r7, lr}
 801270c:	b082      	sub	sp, #8
 801270e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012710:	2020      	movs	r0, #32
 8012712:	f002 fd21 	bl	8015158 <pvPortMalloc>
 8012716:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00a      	beq.n	8012734 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2200      	movs	r2, #0
 8012722:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	3304      	adds	r3, #4
 8012728:	4618      	mov	r0, r3
 801272a:	f000 f995 	bl	8012a58 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	2200      	movs	r2, #0
 8012732:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012734:	687b      	ldr	r3, [r7, #4]
	}
 8012736:	4618      	mov	r0, r3
 8012738:	3708      	adds	r7, #8
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
	...

08012740 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012740:	b580      	push	{r7, lr}
 8012742:	b090      	sub	sp, #64	@ 0x40
 8012744:	af00      	add	r7, sp, #0
 8012746:	60f8      	str	r0, [r7, #12]
 8012748:	60b9      	str	r1, [r7, #8]
 801274a:	607a      	str	r2, [r7, #4]
 801274c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012752:	2300      	movs	r3, #0
 8012754:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012756:	2300      	movs	r3, #0
 8012758:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	2b00      	cmp	r3, #0
 801275e:	d10d      	bne.n	801277c <xEventGroupWaitBits+0x3c>
	__asm volatile
 8012760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012764:	b672      	cpsid	i
 8012766:	f383 8811 	msr	BASEPRI, r3
 801276a:	f3bf 8f6f 	isb	sy
 801276e:	f3bf 8f4f 	dsb	sy
 8012772:	b662      	cpsie	i
 8012774:	623b      	str	r3, [r7, #32]
}
 8012776:	bf00      	nop
 8012778:	bf00      	nop
 801277a:	e7fd      	b.n	8012778 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012782:	d30d      	bcc.n	80127a0 <xEventGroupWaitBits+0x60>
	__asm volatile
 8012784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012788:	b672      	cpsid	i
 801278a:	f383 8811 	msr	BASEPRI, r3
 801278e:	f3bf 8f6f 	isb	sy
 8012792:	f3bf 8f4f 	dsb	sy
 8012796:	b662      	cpsie	i
 8012798:	61fb      	str	r3, [r7, #28]
}
 801279a:	bf00      	nop
 801279c:	bf00      	nop
 801279e:	e7fd      	b.n	801279c <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d10d      	bne.n	80127c2 <xEventGroupWaitBits+0x82>
	__asm volatile
 80127a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127aa:	b672      	cpsid	i
 80127ac:	f383 8811 	msr	BASEPRI, r3
 80127b0:	f3bf 8f6f 	isb	sy
 80127b4:	f3bf 8f4f 	dsb	sy
 80127b8:	b662      	cpsie	i
 80127ba:	61bb      	str	r3, [r7, #24]
}
 80127bc:	bf00      	nop
 80127be:	bf00      	nop
 80127c0:	e7fd      	b.n	80127be <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127c2:	f002 f82d 	bl	8014820 <xTaskGetSchedulerState>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d102      	bne.n	80127d2 <xEventGroupWaitBits+0x92>
 80127cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d101      	bne.n	80127d6 <xEventGroupWaitBits+0x96>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e000      	b.n	80127d8 <xEventGroupWaitBits+0x98>
 80127d6:	2300      	movs	r3, #0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d10d      	bne.n	80127f8 <xEventGroupWaitBits+0xb8>
	__asm volatile
 80127dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127e0:	b672      	cpsid	i
 80127e2:	f383 8811 	msr	BASEPRI, r3
 80127e6:	f3bf 8f6f 	isb	sy
 80127ea:	f3bf 8f4f 	dsb	sy
 80127ee:	b662      	cpsie	i
 80127f0:	617b      	str	r3, [r7, #20]
}
 80127f2:	bf00      	nop
 80127f4:	bf00      	nop
 80127f6:	e7fd      	b.n	80127f4 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 80127f8:	f001 fb5e 	bl	8013eb8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80127fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012802:	683a      	ldr	r2, [r7, #0]
 8012804:	68b9      	ldr	r1, [r7, #8]
 8012806:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012808:	f000 f904 	bl	8012a14 <prvTestWaitCondition>
 801280c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 801280e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00e      	beq.n	8012832 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012816:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012818:	2300      	movs	r3, #0
 801281a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d028      	beq.n	8012874 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	43db      	mvns	r3, r3
 801282a:	401a      	ands	r2, r3
 801282c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801282e:	601a      	str	r2, [r3, #0]
 8012830:	e020      	b.n	8012874 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012834:	2b00      	cmp	r3, #0
 8012836:	d104      	bne.n	8012842 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 801283c:	2301      	movs	r3, #1
 801283e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012840:	e018      	b.n	8012874 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d003      	beq.n	8012850 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801284a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801284e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d003      	beq.n	801285e <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012858:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801285c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012860:	1d18      	adds	r0, r3, #4
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012866:	4313      	orrs	r3, r2
 8012868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801286a:	4619      	mov	r1, r3
 801286c:	f001 fd66 	bl	801433c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8012870:	2300      	movs	r3, #0
 8012872:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8012874:	f001 fb2e 	bl	8013ed4 <xTaskResumeAll>
 8012878:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 801287a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801287c:	2b00      	cmp	r3, #0
 801287e:	d031      	beq.n	80128e4 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 8012880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012882:	2b00      	cmp	r3, #0
 8012884:	d107      	bne.n	8012896 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 8012886:	4b1a      	ldr	r3, [pc, #104]	@ (80128f0 <xEventGroupWaitBits+0x1b0>)
 8012888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801288c:	601a      	str	r2, [r3, #0]
 801288e:	f3bf 8f4f 	dsb	sy
 8012892:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8012896:	f002 f98d 	bl	8014bb4 <uxTaskResetEventItemValue>
 801289a:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 801289c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d11a      	bne.n	80128dc <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 80128a6:	f002 fb29 	bl	8014efc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80128aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	68b9      	ldr	r1, [r7, #8]
 80128b4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80128b6:	f000 f8ad 	bl	8012a14 <prvTestWaitCondition>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d009      	beq.n	80128d4 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d006      	beq.n	80128d4 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80128c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	43db      	mvns	r3, r3
 80128ce:	401a      	ands	r2, r3
 80128d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128d2:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80128d4:	2301      	movs	r3, #1
 80128d6:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 80128d8:	f002 fb46 	bl	8014f68 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80128dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80128e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80128e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80128e6:	4618      	mov	r0, r3
 80128e8:	3740      	adds	r7, #64	@ 0x40
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd80      	pop	{r7, pc}
 80128ee:	bf00      	nop
 80128f0:	e000ed04 	.word	0xe000ed04

080128f4 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b08e      	sub	sp, #56	@ 0x38
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80128fe:	2300      	movs	r3, #0
 8012900:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012906:	2300      	movs	r3, #0
 8012908:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	2b00      	cmp	r3, #0
 801290e:	d10d      	bne.n	801292c <xEventGroupSetBits+0x38>
	__asm volatile
 8012910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012914:	b672      	cpsid	i
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	b662      	cpsie	i
 8012924:	613b      	str	r3, [r7, #16]
}
 8012926:	bf00      	nop
 8012928:	bf00      	nop
 801292a:	e7fd      	b.n	8012928 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012932:	d30d      	bcc.n	8012950 <xEventGroupSetBits+0x5c>
	__asm volatile
 8012934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012938:	b672      	cpsid	i
 801293a:	f383 8811 	msr	BASEPRI, r3
 801293e:	f3bf 8f6f 	isb	sy
 8012942:	f3bf 8f4f 	dsb	sy
 8012946:	b662      	cpsie	i
 8012948:	60fb      	str	r3, [r7, #12]
}
 801294a:	bf00      	nop
 801294c:	bf00      	nop
 801294e:	e7fd      	b.n	801294c <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012952:	3304      	adds	r3, #4
 8012954:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012958:	3308      	adds	r3, #8
 801295a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801295c:	f001 faac 	bl	8013eb8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012962:	68db      	ldr	r3, [r3, #12]
 8012964:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012968:	681a      	ldr	r2, [r3, #0]
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	431a      	orrs	r2, r3
 801296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012970:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8012972:	e03c      	b.n	80129ee <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 8012974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801297a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8012980:	2300      	movs	r3, #0
 8012982:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8012984:	69bb      	ldr	r3, [r7, #24]
 8012986:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801298a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801298c:	69bb      	ldr	r3, [r7, #24]
 801298e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012992:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801299a:	2b00      	cmp	r3, #0
 801299c:	d108      	bne.n	80129b0 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 801299e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129a0:	681a      	ldr	r2, [r3, #0]
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	4013      	ands	r3, r2
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d00b      	beq.n	80129c2 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 80129aa:	2301      	movs	r3, #1
 80129ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80129ae:	e008      	b.n	80129c2 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80129b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129b2:	681a      	ldr	r2, [r3, #0]
 80129b4:	69bb      	ldr	r3, [r7, #24]
 80129b6:	4013      	ands	r3, r2
 80129b8:	69ba      	ldr	r2, [r7, #24]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d101      	bne.n	80129c2 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80129be:	2301      	movs	r3, #1
 80129c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80129c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d010      	beq.n	80129ea <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d003      	beq.n	80129da <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80129d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	4313      	orrs	r3, r2
 80129d8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80129da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80129e2:	4619      	mov	r1, r3
 80129e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80129e6:	f001 fd51 	bl	801448c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80129ea:	69fb      	ldr	r3, [r7, #28]
 80129ec:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 80129ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129f0:	6a3b      	ldr	r3, [r7, #32]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d1be      	bne.n	8012974 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80129f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f8:	681a      	ldr	r2, [r3, #0]
 80129fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129fc:	43db      	mvns	r3, r3
 80129fe:	401a      	ands	r2, r3
 8012a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a02:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012a04:	f001 fa66 	bl	8013ed4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a0a:	681b      	ldr	r3, [r3, #0]
}
 8012a0c:	4618      	mov	r0, r3
 8012a0e:	3738      	adds	r7, #56	@ 0x38
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b087      	sub	sp, #28
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	60f8      	str	r0, [r7, #12]
 8012a1c:	60b9      	str	r1, [r7, #8]
 8012a1e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012a20:	2300      	movs	r3, #0
 8012a22:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d107      	bne.n	8012a3a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8012a2a:	68fa      	ldr	r2, [r7, #12]
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	4013      	ands	r3, r2
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d00a      	beq.n	8012a4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012a34:	2301      	movs	r3, #1
 8012a36:	617b      	str	r3, [r7, #20]
 8012a38:	e007      	b.n	8012a4a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8012a3a:	68fa      	ldr	r2, [r7, #12]
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	4013      	ands	r3, r2
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d101      	bne.n	8012a4a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012a46:	2301      	movs	r3, #1
 8012a48:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8012a4a:	697b      	ldr	r3, [r7, #20]
}
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	371c      	adds	r7, #28
 8012a50:	46bd      	mov	sp, r7
 8012a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a56:	4770      	bx	lr

08012a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012a58:	b480      	push	{r7}
 8012a5a:	b083      	sub	sp, #12
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	f103 0208 	add.w	r2, r3, #8
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	f103 0208 	add.w	r2, r3, #8
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f103 0208 	add.w	r2, r3, #8
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2200      	movs	r2, #0
 8012a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012a8c:	bf00      	nop
 8012a8e:	370c      	adds	r7, #12
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr

08012a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012a98:	b480      	push	{r7}
 8012a9a:	b083      	sub	sp, #12
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012aa6:	bf00      	nop
 8012aa8:	370c      	adds	r7, #12
 8012aaa:	46bd      	mov	sp, r7
 8012aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab0:	4770      	bx	lr

08012ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012ab2:	b480      	push	{r7}
 8012ab4:	b085      	sub	sp, #20
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
 8012aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	685b      	ldr	r3, [r3, #4]
 8012ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	689a      	ldr	r2, [r3, #8]
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	689b      	ldr	r3, [r3, #8]
 8012ad4:	683a      	ldr	r2, [r7, #0]
 8012ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	683a      	ldr	r2, [r7, #0]
 8012adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	687a      	ldr	r2, [r7, #4]
 8012ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	681b      	ldr	r3, [r3, #0]
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	601a      	str	r2, [r3, #0]
}
 8012aee:	bf00      	nop
 8012af0:	3714      	adds	r7, #20
 8012af2:	46bd      	mov	sp, r7
 8012af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af8:	4770      	bx	lr

08012afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012afa:	b480      	push	{r7}
 8012afc:	b085      	sub	sp, #20
 8012afe:	af00      	add	r7, sp, #0
 8012b00:	6078      	str	r0, [r7, #4]
 8012b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b10:	d103      	bne.n	8012b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	691b      	ldr	r3, [r3, #16]
 8012b16:	60fb      	str	r3, [r7, #12]
 8012b18:	e00c      	b.n	8012b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	3308      	adds	r3, #8
 8012b1e:	60fb      	str	r3, [r7, #12]
 8012b20:	e002      	b.n	8012b28 <vListInsert+0x2e>
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	60fb      	str	r3, [r7, #12]
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	68ba      	ldr	r2, [r7, #8]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d2f6      	bcs.n	8012b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	685a      	ldr	r2, [r3, #4]
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	685b      	ldr	r3, [r3, #4]
 8012b40:	683a      	ldr	r2, [r7, #0]
 8012b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012b44:	683b      	ldr	r3, [r7, #0]
 8012b46:	68fa      	ldr	r2, [r7, #12]
 8012b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	683a      	ldr	r2, [r7, #0]
 8012b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	687a      	ldr	r2, [r7, #4]
 8012b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	1c5a      	adds	r2, r3, #1
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	601a      	str	r2, [r3, #0]
}
 8012b60:	bf00      	nop
 8012b62:	3714      	adds	r7, #20
 8012b64:	46bd      	mov	sp, r7
 8012b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6a:	4770      	bx	lr

08012b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b085      	sub	sp, #20
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	691b      	ldr	r3, [r3, #16]
 8012b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	6892      	ldr	r2, [r2, #8]
 8012b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	689b      	ldr	r3, [r3, #8]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	6852      	ldr	r2, [r2, #4]
 8012b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	687a      	ldr	r2, [r7, #4]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	d103      	bne.n	8012ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	689a      	ldr	r2, [r3, #8]
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	1e5a      	subs	r2, r3, #1
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	681b      	ldr	r3, [r3, #0]
}
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3714      	adds	r7, #20
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d10d      	bne.n	8012bf0 <xQueueGenericReset+0x30>
	__asm volatile
 8012bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bd8:	b672      	cpsid	i
 8012bda:	f383 8811 	msr	BASEPRI, r3
 8012bde:	f3bf 8f6f 	isb	sy
 8012be2:	f3bf 8f4f 	dsb	sy
 8012be6:	b662      	cpsie	i
 8012be8:	60bb      	str	r3, [r7, #8]
}
 8012bea:	bf00      	nop
 8012bec:	bf00      	nop
 8012bee:	e7fd      	b.n	8012bec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012bf0:	f002 f984 	bl	8014efc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	681a      	ldr	r2, [r3, #0]
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012bfc:	68f9      	ldr	r1, [r7, #12]
 8012bfe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012c00:	fb01 f303 	mul.w	r3, r1, r3
 8012c04:	441a      	add	r2, r3
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	681a      	ldr	r2, [r3, #0]
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c20:	3b01      	subs	r3, #1
 8012c22:	68f9      	ldr	r1, [r7, #12]
 8012c24:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012c26:	fb01 f303 	mul.w	r3, r1, r3
 8012c2a:	441a      	add	r2, r3
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	22ff      	movs	r2, #255	@ 0xff
 8012c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	22ff      	movs	r2, #255	@ 0xff
 8012c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d114      	bne.n	8012c70 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	691b      	ldr	r3, [r3, #16]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d01a      	beq.n	8012c84 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	3310      	adds	r3, #16
 8012c52:	4618      	mov	r0, r3
 8012c54:	f001 fbb4 	bl	80143c0 <xTaskRemoveFromEventList>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d012      	beq.n	8012c84 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8012c94 <xQueueGenericReset+0xd4>)
 8012c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012c64:	601a      	str	r2, [r3, #0]
 8012c66:	f3bf 8f4f 	dsb	sy
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	e009      	b.n	8012c84 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	3310      	adds	r3, #16
 8012c74:	4618      	mov	r0, r3
 8012c76:	f7ff feef 	bl	8012a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	3324      	adds	r3, #36	@ 0x24
 8012c7e:	4618      	mov	r0, r3
 8012c80:	f7ff feea 	bl	8012a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012c84:	f002 f970 	bl	8014f68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012c88:	2301      	movs	r3, #1
}
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}
 8012c92:	bf00      	nop
 8012c94:	e000ed04 	.word	0xe000ed04

08012c98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b08e      	sub	sp, #56	@ 0x38
 8012c9c:	af02      	add	r7, sp, #8
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	60b9      	str	r1, [r7, #8]
 8012ca2:	607a      	str	r2, [r7, #4]
 8012ca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d10d      	bne.n	8012cc8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cb0:	b672      	cpsid	i
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	b662      	cpsie	i
 8012cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012cc2:	bf00      	nop
 8012cc4:	bf00      	nop
 8012cc6:	e7fd      	b.n	8012cc4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d10d      	bne.n	8012cea <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cd2:	b672      	cpsid	i
 8012cd4:	f383 8811 	msr	BASEPRI, r3
 8012cd8:	f3bf 8f6f 	isb	sy
 8012cdc:	f3bf 8f4f 	dsb	sy
 8012ce0:	b662      	cpsie	i
 8012ce2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012ce4:	bf00      	nop
 8012ce6:	bf00      	nop
 8012ce8:	e7fd      	b.n	8012ce6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d002      	beq.n	8012cf6 <xQueueGenericCreateStatic+0x5e>
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <xQueueGenericCreateStatic+0x62>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e000      	b.n	8012cfc <xQueueGenericCreateStatic+0x64>
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d10d      	bne.n	8012d1c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d04:	b672      	cpsid	i
 8012d06:	f383 8811 	msr	BASEPRI, r3
 8012d0a:	f3bf 8f6f 	isb	sy
 8012d0e:	f3bf 8f4f 	dsb	sy
 8012d12:	b662      	cpsie	i
 8012d14:	623b      	str	r3, [r7, #32]
}
 8012d16:	bf00      	nop
 8012d18:	bf00      	nop
 8012d1a:	e7fd      	b.n	8012d18 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d102      	bne.n	8012d28 <xQueueGenericCreateStatic+0x90>
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d101      	bne.n	8012d2c <xQueueGenericCreateStatic+0x94>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	e000      	b.n	8012d2e <xQueueGenericCreateStatic+0x96>
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d10d      	bne.n	8012d4e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d36:	b672      	cpsid	i
 8012d38:	f383 8811 	msr	BASEPRI, r3
 8012d3c:	f3bf 8f6f 	isb	sy
 8012d40:	f3bf 8f4f 	dsb	sy
 8012d44:	b662      	cpsie	i
 8012d46:	61fb      	str	r3, [r7, #28]
}
 8012d48:	bf00      	nop
 8012d4a:	bf00      	nop
 8012d4c:	e7fd      	b.n	8012d4a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012d4e:	2350      	movs	r3, #80	@ 0x50
 8012d50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	2b50      	cmp	r3, #80	@ 0x50
 8012d56:	d00d      	beq.n	8012d74 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5c:	b672      	cpsid	i
 8012d5e:	f383 8811 	msr	BASEPRI, r3
 8012d62:	f3bf 8f6f 	isb	sy
 8012d66:	f3bf 8f4f 	dsb	sy
 8012d6a:	b662      	cpsie	i
 8012d6c:	61bb      	str	r3, [r7, #24]
}
 8012d6e:	bf00      	nop
 8012d70:	bf00      	nop
 8012d72:	e7fd      	b.n	8012d70 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012d74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d00d      	beq.n	8012d9c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d82:	2201      	movs	r2, #1
 8012d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012d88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8e:	9300      	str	r3, [sp, #0]
 8012d90:	4613      	mov	r3, r2
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	68b9      	ldr	r1, [r7, #8]
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f000 f848 	bl	8012e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3730      	adds	r7, #48	@ 0x30
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b08a      	sub	sp, #40	@ 0x28
 8012daa:	af02      	add	r7, sp, #8
 8012dac:	60f8      	str	r0, [r7, #12]
 8012dae:	60b9      	str	r1, [r7, #8]
 8012db0:	4613      	mov	r3, r2
 8012db2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d10d      	bne.n	8012dd6 <xQueueGenericCreate+0x30>
	__asm volatile
 8012dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dbe:	b672      	cpsid	i
 8012dc0:	f383 8811 	msr	BASEPRI, r3
 8012dc4:	f3bf 8f6f 	isb	sy
 8012dc8:	f3bf 8f4f 	dsb	sy
 8012dcc:	b662      	cpsie	i
 8012dce:	613b      	str	r3, [r7, #16]
}
 8012dd0:	bf00      	nop
 8012dd2:	bf00      	nop
 8012dd4:	e7fd      	b.n	8012dd2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012dd6:	68bb      	ldr	r3, [r7, #8]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d102      	bne.n	8012de2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	61fb      	str	r3, [r7, #28]
 8012de0:	e004      	b.n	8012dec <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	68ba      	ldr	r2, [r7, #8]
 8012de6:	fb02 f303 	mul.w	r3, r2, r3
 8012dea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	3350      	adds	r3, #80	@ 0x50
 8012df0:	4618      	mov	r0, r3
 8012df2:	f002 f9b1 	bl	8015158 <pvPortMalloc>
 8012df6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d011      	beq.n	8012e22 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012dfe:	69bb      	ldr	r3, [r7, #24]
 8012e00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e02:	697b      	ldr	r3, [r7, #20]
 8012e04:	3350      	adds	r3, #80	@ 0x50
 8012e06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012e10:	79fa      	ldrb	r2, [r7, #7]
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	4613      	mov	r3, r2
 8012e18:	697a      	ldr	r2, [r7, #20]
 8012e1a:	68b9      	ldr	r1, [r7, #8]
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 f805 	bl	8012e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012e22:	69bb      	ldr	r3, [r7, #24]
	}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3720      	adds	r7, #32
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
 8012e38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d103      	bne.n	8012e48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	69ba      	ldr	r2, [r7, #24]
 8012e44:	601a      	str	r2, [r3, #0]
 8012e46:	e002      	b.n	8012e4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012e48:	69bb      	ldr	r3, [r7, #24]
 8012e4a:	687a      	ldr	r2, [r7, #4]
 8012e4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012e5a:	2101      	movs	r1, #1
 8012e5c:	69b8      	ldr	r0, [r7, #24]
 8012e5e:	f7ff feaf 	bl	8012bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	78fa      	ldrb	r2, [r7, #3]
 8012e66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012e6a:	bf00      	nop
 8012e6c:	3710      	adds	r7, #16
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}

08012e72 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012e72:	b580      	push	{r7, lr}
 8012e74:	b082      	sub	sp, #8
 8012e76:	af00      	add	r7, sp, #0
 8012e78:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d00e      	beq.n	8012e9e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2200      	movs	r2, #0
 8012e84:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2200      	movs	r2, #0
 8012e8a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012e92:	2300      	movs	r3, #0
 8012e94:	2200      	movs	r2, #0
 8012e96:	2100      	movs	r1, #0
 8012e98:	6878      	ldr	r0, [r7, #4]
 8012e9a:	f000 f81d 	bl	8012ed8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012e9e:	bf00      	nop
 8012ea0:	3708      	adds	r7, #8
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}

08012ea6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012ea6:	b580      	push	{r7, lr}
 8012ea8:	b086      	sub	sp, #24
 8012eaa:	af00      	add	r7, sp, #0
 8012eac:	4603      	mov	r3, r0
 8012eae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	617b      	str	r3, [r7, #20]
 8012eb4:	2300      	movs	r3, #0
 8012eb6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012eb8:	79fb      	ldrb	r3, [r7, #7]
 8012eba:	461a      	mov	r2, r3
 8012ebc:	6939      	ldr	r1, [r7, #16]
 8012ebe:	6978      	ldr	r0, [r7, #20]
 8012ec0:	f7ff ff71 	bl	8012da6 <xQueueGenericCreate>
 8012ec4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012ec6:	68f8      	ldr	r0, [r7, #12]
 8012ec8:	f7ff ffd3 	bl	8012e72 <prvInitialiseMutex>

		return xNewQueue;
 8012ecc:	68fb      	ldr	r3, [r7, #12]
	}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3718      	adds	r7, #24
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
	...

08012ed8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b08e      	sub	sp, #56	@ 0x38
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
 8012ee4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d10d      	bne.n	8012f10 <xQueueGenericSend+0x38>
	__asm volatile
 8012ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ef8:	b672      	cpsid	i
 8012efa:	f383 8811 	msr	BASEPRI, r3
 8012efe:	f3bf 8f6f 	isb	sy
 8012f02:	f3bf 8f4f 	dsb	sy
 8012f06:	b662      	cpsie	i
 8012f08:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012f0a:	bf00      	nop
 8012f0c:	bf00      	nop
 8012f0e:	e7fd      	b.n	8012f0c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d103      	bne.n	8012f1e <xQueueGenericSend+0x46>
 8012f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d101      	bne.n	8012f22 <xQueueGenericSend+0x4a>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e000      	b.n	8012f24 <xQueueGenericSend+0x4c>
 8012f22:	2300      	movs	r3, #0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10d      	bne.n	8012f44 <xQueueGenericSend+0x6c>
	__asm volatile
 8012f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f2c:	b672      	cpsid	i
 8012f2e:	f383 8811 	msr	BASEPRI, r3
 8012f32:	f3bf 8f6f 	isb	sy
 8012f36:	f3bf 8f4f 	dsb	sy
 8012f3a:	b662      	cpsie	i
 8012f3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012f3e:	bf00      	nop
 8012f40:	bf00      	nop
 8012f42:	e7fd      	b.n	8012f40 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	2b02      	cmp	r3, #2
 8012f48:	d103      	bne.n	8012f52 <xQueueGenericSend+0x7a>
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012f4e:	2b01      	cmp	r3, #1
 8012f50:	d101      	bne.n	8012f56 <xQueueGenericSend+0x7e>
 8012f52:	2301      	movs	r3, #1
 8012f54:	e000      	b.n	8012f58 <xQueueGenericSend+0x80>
 8012f56:	2300      	movs	r3, #0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d10d      	bne.n	8012f78 <xQueueGenericSend+0xa0>
	__asm volatile
 8012f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f60:	b672      	cpsid	i
 8012f62:	f383 8811 	msr	BASEPRI, r3
 8012f66:	f3bf 8f6f 	isb	sy
 8012f6a:	f3bf 8f4f 	dsb	sy
 8012f6e:	b662      	cpsie	i
 8012f70:	623b      	str	r3, [r7, #32]
}
 8012f72:	bf00      	nop
 8012f74:	bf00      	nop
 8012f76:	e7fd      	b.n	8012f74 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012f78:	f001 fc52 	bl	8014820 <xTaskGetSchedulerState>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d102      	bne.n	8012f88 <xQueueGenericSend+0xb0>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d101      	bne.n	8012f8c <xQueueGenericSend+0xb4>
 8012f88:	2301      	movs	r3, #1
 8012f8a:	e000      	b.n	8012f8e <xQueueGenericSend+0xb6>
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10d      	bne.n	8012fae <xQueueGenericSend+0xd6>
	__asm volatile
 8012f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f96:	b672      	cpsid	i
 8012f98:	f383 8811 	msr	BASEPRI, r3
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	b662      	cpsie	i
 8012fa6:	61fb      	str	r3, [r7, #28]
}
 8012fa8:	bf00      	nop
 8012faa:	bf00      	nop
 8012fac:	e7fd      	b.n	8012faa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012fae:	f001 ffa5 	bl	8014efc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fba:	429a      	cmp	r2, r3
 8012fbc:	d302      	bcc.n	8012fc4 <xQueueGenericSend+0xec>
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	2b02      	cmp	r3, #2
 8012fc2:	d129      	bne.n	8013018 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012fc4:	683a      	ldr	r2, [r7, #0]
 8012fc6:	68b9      	ldr	r1, [r7, #8]
 8012fc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012fca:	f000 fbed 	bl	80137a8 <prvCopyDataToQueue>
 8012fce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d010      	beq.n	8012ffa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fda:	3324      	adds	r3, #36	@ 0x24
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f001 f9ef 	bl	80143c0 <xTaskRemoveFromEventList>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d013      	beq.n	8013010 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012fe8:	4b3f      	ldr	r3, [pc, #252]	@ (80130e8 <xQueueGenericSend+0x210>)
 8012fea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012fee:	601a      	str	r2, [r3, #0]
 8012ff0:	f3bf 8f4f 	dsb	sy
 8012ff4:	f3bf 8f6f 	isb	sy
 8012ff8:	e00a      	b.n	8013010 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012ffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d007      	beq.n	8013010 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013000:	4b39      	ldr	r3, [pc, #228]	@ (80130e8 <xQueueGenericSend+0x210>)
 8013002:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	f3bf 8f4f 	dsb	sy
 801300c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013010:	f001 ffaa 	bl	8014f68 <vPortExitCritical>
				return pdPASS;
 8013014:	2301      	movs	r3, #1
 8013016:	e063      	b.n	80130e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d103      	bne.n	8013026 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801301e:	f001 ffa3 	bl	8014f68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013022:	2300      	movs	r3, #0
 8013024:	e05c      	b.n	80130e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013028:	2b00      	cmp	r3, #0
 801302a:	d106      	bne.n	801303a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801302c:	f107 0314 	add.w	r3, r7, #20
 8013030:	4618      	mov	r0, r3
 8013032:	f001 fa93 	bl	801455c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013036:	2301      	movs	r3, #1
 8013038:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801303a:	f001 ff95 	bl	8014f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801303e:	f000 ff3b 	bl	8013eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013042:	f001 ff5b 	bl	8014efc <vPortEnterCritical>
 8013046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013048:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801304c:	b25b      	sxtb	r3, r3
 801304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013052:	d103      	bne.n	801305c <xQueueGenericSend+0x184>
 8013054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013056:	2200      	movs	r2, #0
 8013058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801305c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013062:	b25b      	sxtb	r3, r3
 8013064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013068:	d103      	bne.n	8013072 <xQueueGenericSend+0x19a>
 801306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801306c:	2200      	movs	r2, #0
 801306e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013072:	f001 ff79 	bl	8014f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013076:	1d3a      	adds	r2, r7, #4
 8013078:	f107 0314 	add.w	r3, r7, #20
 801307c:	4611      	mov	r1, r2
 801307e:	4618      	mov	r0, r3
 8013080:	f001 fa82 	bl	8014588 <xTaskCheckForTimeOut>
 8013084:	4603      	mov	r3, r0
 8013086:	2b00      	cmp	r3, #0
 8013088:	d124      	bne.n	80130d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801308a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801308c:	f000 fc84 	bl	8013998 <prvIsQueueFull>
 8013090:	4603      	mov	r3, r0
 8013092:	2b00      	cmp	r3, #0
 8013094:	d018      	beq.n	80130c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013098:	3310      	adds	r3, #16
 801309a:	687a      	ldr	r2, [r7, #4]
 801309c:	4611      	mov	r1, r2
 801309e:	4618      	mov	r0, r3
 80130a0:	f001 f924 	bl	80142ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80130a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130a6:	f000 fc0f 	bl	80138c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80130aa:	f000 ff13 	bl	8013ed4 <xTaskResumeAll>
 80130ae:	4603      	mov	r3, r0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	f47f af7c 	bne.w	8012fae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80130b6:	4b0c      	ldr	r3, [pc, #48]	@ (80130e8 <xQueueGenericSend+0x210>)
 80130b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80130bc:	601a      	str	r2, [r3, #0]
 80130be:	f3bf 8f4f 	dsb	sy
 80130c2:	f3bf 8f6f 	isb	sy
 80130c6:	e772      	b.n	8012fae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80130c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130ca:	f000 fbfd 	bl	80138c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80130ce:	f000 ff01 	bl	8013ed4 <xTaskResumeAll>
 80130d2:	e76c      	b.n	8012fae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80130d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80130d6:	f000 fbf7 	bl	80138c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80130da:	f000 fefb 	bl	8013ed4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80130de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	3738      	adds	r7, #56	@ 0x38
 80130e4:	46bd      	mov	sp, r7
 80130e6:	bd80      	pop	{r7, pc}
 80130e8:	e000ed04 	.word	0xe000ed04

080130ec <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b08e      	sub	sp, #56	@ 0x38
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80130fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d10d      	bne.n	801311c <xQueueGiveFromISR+0x30>
	__asm volatile
 8013100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013104:	b672      	cpsid	i
 8013106:	f383 8811 	msr	BASEPRI, r3
 801310a:	f3bf 8f6f 	isb	sy
 801310e:	f3bf 8f4f 	dsb	sy
 8013112:	b662      	cpsie	i
 8013114:	623b      	str	r3, [r7, #32]
}
 8013116:	bf00      	nop
 8013118:	bf00      	nop
 801311a:	e7fd      	b.n	8013118 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013120:	2b00      	cmp	r3, #0
 8013122:	d00d      	beq.n	8013140 <xQueueGiveFromISR+0x54>
	__asm volatile
 8013124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013128:	b672      	cpsid	i
 801312a:	f383 8811 	msr	BASEPRI, r3
 801312e:	f3bf 8f6f 	isb	sy
 8013132:	f3bf 8f4f 	dsb	sy
 8013136:	b662      	cpsie	i
 8013138:	61fb      	str	r3, [r7, #28]
}
 801313a:	bf00      	nop
 801313c:	bf00      	nop
 801313e:	e7fd      	b.n	801313c <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d103      	bne.n	8013150 <xQueueGiveFromISR+0x64>
 8013148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d101      	bne.n	8013154 <xQueueGiveFromISR+0x68>
 8013150:	2301      	movs	r3, #1
 8013152:	e000      	b.n	8013156 <xQueueGiveFromISR+0x6a>
 8013154:	2300      	movs	r3, #0
 8013156:	2b00      	cmp	r3, #0
 8013158:	d10d      	bne.n	8013176 <xQueueGiveFromISR+0x8a>
	__asm volatile
 801315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801315e:	b672      	cpsid	i
 8013160:	f383 8811 	msr	BASEPRI, r3
 8013164:	f3bf 8f6f 	isb	sy
 8013168:	f3bf 8f4f 	dsb	sy
 801316c:	b662      	cpsie	i
 801316e:	61bb      	str	r3, [r7, #24]
}
 8013170:	bf00      	nop
 8013172:	bf00      	nop
 8013174:	e7fd      	b.n	8013172 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013176:	f001 ffa9 	bl	80150cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801317a:	f3ef 8211 	mrs	r2, BASEPRI
 801317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013182:	b672      	cpsid	i
 8013184:	f383 8811 	msr	BASEPRI, r3
 8013188:	f3bf 8f6f 	isb	sy
 801318c:	f3bf 8f4f 	dsb	sy
 8013190:	b662      	cpsie	i
 8013192:	617a      	str	r2, [r7, #20]
 8013194:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013196:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013198:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801319e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80131a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80131a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d22b      	bcs.n	8013202 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80131aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80131b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80131b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131ba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80131bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80131c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131c4:	d112      	bne.n	80131ec <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d016      	beq.n	80131fc <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80131ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131d0:	3324      	adds	r3, #36	@ 0x24
 80131d2:	4618      	mov	r0, r3
 80131d4:	f001 f8f4 	bl	80143c0 <xTaskRemoveFromEventList>
 80131d8:	4603      	mov	r3, r0
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d00e      	beq.n	80131fc <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d00b      	beq.n	80131fc <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	2201      	movs	r2, #1
 80131e8:	601a      	str	r2, [r3, #0]
 80131ea:	e007      	b.n	80131fc <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80131ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80131f0:	3301      	adds	r3, #1
 80131f2:	b2db      	uxtb	r3, r3
 80131f4:	b25a      	sxtb	r2, r3
 80131f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80131f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80131fc:	2301      	movs	r3, #1
 80131fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8013200:	e001      	b.n	8013206 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013202:	2300      	movs	r3, #0
 8013204:	637b      	str	r3, [r7, #52]	@ 0x34
 8013206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013208:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013214:	4618      	mov	r0, r3
 8013216:	3738      	adds	r7, #56	@ 0x38
 8013218:	46bd      	mov	sp, r7
 801321a:	bd80      	pop	{r7, pc}

0801321c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b08c      	sub	sp, #48	@ 0x30
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013228:	2300      	movs	r3, #0
 801322a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013232:	2b00      	cmp	r3, #0
 8013234:	d10d      	bne.n	8013252 <xQueueReceive+0x36>
	__asm volatile
 8013236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323a:	b672      	cpsid	i
 801323c:	f383 8811 	msr	BASEPRI, r3
 8013240:	f3bf 8f6f 	isb	sy
 8013244:	f3bf 8f4f 	dsb	sy
 8013248:	b662      	cpsie	i
 801324a:	623b      	str	r3, [r7, #32]
}
 801324c:	bf00      	nop
 801324e:	bf00      	nop
 8013250:	e7fd      	b.n	801324e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d103      	bne.n	8013260 <xQueueReceive+0x44>
 8013258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801325c:	2b00      	cmp	r3, #0
 801325e:	d101      	bne.n	8013264 <xQueueReceive+0x48>
 8013260:	2301      	movs	r3, #1
 8013262:	e000      	b.n	8013266 <xQueueReceive+0x4a>
 8013264:	2300      	movs	r3, #0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d10d      	bne.n	8013286 <xQueueReceive+0x6a>
	__asm volatile
 801326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801326e:	b672      	cpsid	i
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	b662      	cpsie	i
 801327e:	61fb      	str	r3, [r7, #28]
}
 8013280:	bf00      	nop
 8013282:	bf00      	nop
 8013284:	e7fd      	b.n	8013282 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013286:	f001 facb 	bl	8014820 <xTaskGetSchedulerState>
 801328a:	4603      	mov	r3, r0
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <xQueueReceive+0x7a>
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d101      	bne.n	801329a <xQueueReceive+0x7e>
 8013296:	2301      	movs	r3, #1
 8013298:	e000      	b.n	801329c <xQueueReceive+0x80>
 801329a:	2300      	movs	r3, #0
 801329c:	2b00      	cmp	r3, #0
 801329e:	d10d      	bne.n	80132bc <xQueueReceive+0xa0>
	__asm volatile
 80132a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132a4:	b672      	cpsid	i
 80132a6:	f383 8811 	msr	BASEPRI, r3
 80132aa:	f3bf 8f6f 	isb	sy
 80132ae:	f3bf 8f4f 	dsb	sy
 80132b2:	b662      	cpsie	i
 80132b4:	61bb      	str	r3, [r7, #24]
}
 80132b6:	bf00      	nop
 80132b8:	bf00      	nop
 80132ba:	e7fd      	b.n	80132b8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80132bc:	f001 fe1e 	bl	8014efc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80132c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d01f      	beq.n	801330c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80132cc:	68b9      	ldr	r1, [r7, #8]
 80132ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80132d0:	f000 fad4 	bl	801387c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80132d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d6:	1e5a      	subs	r2, r3, #1
 80132d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132de:	691b      	ldr	r3, [r3, #16]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d00f      	beq.n	8013304 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e6:	3310      	adds	r3, #16
 80132e8:	4618      	mov	r0, r3
 80132ea:	f001 f869 	bl	80143c0 <xTaskRemoveFromEventList>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d007      	beq.n	8013304 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80132f4:	4b3c      	ldr	r3, [pc, #240]	@ (80133e8 <xQueueReceive+0x1cc>)
 80132f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132fa:	601a      	str	r2, [r3, #0]
 80132fc:	f3bf 8f4f 	dsb	sy
 8013300:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013304:	f001 fe30 	bl	8014f68 <vPortExitCritical>
				return pdPASS;
 8013308:	2301      	movs	r3, #1
 801330a:	e069      	b.n	80133e0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d103      	bne.n	801331a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013312:	f001 fe29 	bl	8014f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013316:	2300      	movs	r3, #0
 8013318:	e062      	b.n	80133e0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801331c:	2b00      	cmp	r3, #0
 801331e:	d106      	bne.n	801332e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013320:	f107 0310 	add.w	r3, r7, #16
 8013324:	4618      	mov	r0, r3
 8013326:	f001 f919 	bl	801455c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801332a:	2301      	movs	r3, #1
 801332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801332e:	f001 fe1b 	bl	8014f68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013332:	f000 fdc1 	bl	8013eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013336:	f001 fde1 	bl	8014efc <vPortEnterCritical>
 801333a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801333c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013340:	b25b      	sxtb	r3, r3
 8013342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013346:	d103      	bne.n	8013350 <xQueueReceive+0x134>
 8013348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801334a:	2200      	movs	r2, #0
 801334c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013352:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013356:	b25b      	sxtb	r3, r3
 8013358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335c:	d103      	bne.n	8013366 <xQueueReceive+0x14a>
 801335e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013360:	2200      	movs	r2, #0
 8013362:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013366:	f001 fdff 	bl	8014f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801336a:	1d3a      	adds	r2, r7, #4
 801336c:	f107 0310 	add.w	r3, r7, #16
 8013370:	4611      	mov	r1, r2
 8013372:	4618      	mov	r0, r3
 8013374:	f001 f908 	bl	8014588 <xTaskCheckForTimeOut>
 8013378:	4603      	mov	r3, r0
 801337a:	2b00      	cmp	r3, #0
 801337c:	d123      	bne.n	80133c6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801337e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013380:	f000 faf4 	bl	801396c <prvIsQueueEmpty>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d017      	beq.n	80133ba <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801338a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801338c:	3324      	adds	r3, #36	@ 0x24
 801338e:	687a      	ldr	r2, [r7, #4]
 8013390:	4611      	mov	r1, r2
 8013392:	4618      	mov	r0, r3
 8013394:	f000 ffaa 	bl	80142ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013398:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801339a:	f000 fa95 	bl	80138c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801339e:	f000 fd99 	bl	8013ed4 <xTaskResumeAll>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d189      	bne.n	80132bc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80133a8:	4b0f      	ldr	r3, [pc, #60]	@ (80133e8 <xQueueReceive+0x1cc>)
 80133aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133ae:	601a      	str	r2, [r3, #0]
 80133b0:	f3bf 8f4f 	dsb	sy
 80133b4:	f3bf 8f6f 	isb	sy
 80133b8:	e780      	b.n	80132bc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80133ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133bc:	f000 fa84 	bl	80138c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80133c0:	f000 fd88 	bl	8013ed4 <xTaskResumeAll>
 80133c4:	e77a      	b.n	80132bc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80133c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133c8:	f000 fa7e 	bl	80138c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80133cc:	f000 fd82 	bl	8013ed4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80133d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133d2:	f000 facb 	bl	801396c <prvIsQueueEmpty>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f43f af6f 	beq.w	80132bc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80133de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80133e0:	4618      	mov	r0, r3
 80133e2:	3730      	adds	r7, #48	@ 0x30
 80133e4:	46bd      	mov	sp, r7
 80133e6:	bd80      	pop	{r7, pc}
 80133e8:	e000ed04 	.word	0xe000ed04

080133ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b08e      	sub	sp, #56	@ 0x38
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80133f6:	2300      	movs	r3, #0
 80133f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80133fe:	2300      	movs	r3, #0
 8013400:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10d      	bne.n	8013424 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801340c:	b672      	cpsid	i
 801340e:	f383 8811 	msr	BASEPRI, r3
 8013412:	f3bf 8f6f 	isb	sy
 8013416:	f3bf 8f4f 	dsb	sy
 801341a:	b662      	cpsie	i
 801341c:	623b      	str	r3, [r7, #32]
}
 801341e:	bf00      	nop
 8013420:	bf00      	nop
 8013422:	e7fd      	b.n	8013420 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013428:	2b00      	cmp	r3, #0
 801342a:	d00d      	beq.n	8013448 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 801342c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013430:	b672      	cpsid	i
 8013432:	f383 8811 	msr	BASEPRI, r3
 8013436:	f3bf 8f6f 	isb	sy
 801343a:	f3bf 8f4f 	dsb	sy
 801343e:	b662      	cpsie	i
 8013440:	61fb      	str	r3, [r7, #28]
}
 8013442:	bf00      	nop
 8013444:	bf00      	nop
 8013446:	e7fd      	b.n	8013444 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013448:	f001 f9ea 	bl	8014820 <xTaskGetSchedulerState>
 801344c:	4603      	mov	r3, r0
 801344e:	2b00      	cmp	r3, #0
 8013450:	d102      	bne.n	8013458 <xQueueSemaphoreTake+0x6c>
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d101      	bne.n	801345c <xQueueSemaphoreTake+0x70>
 8013458:	2301      	movs	r3, #1
 801345a:	e000      	b.n	801345e <xQueueSemaphoreTake+0x72>
 801345c:	2300      	movs	r3, #0
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10d      	bne.n	801347e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013466:	b672      	cpsid	i
 8013468:	f383 8811 	msr	BASEPRI, r3
 801346c:	f3bf 8f6f 	isb	sy
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	b662      	cpsie	i
 8013476:	61bb      	str	r3, [r7, #24]
}
 8013478:	bf00      	nop
 801347a:	bf00      	nop
 801347c:	e7fd      	b.n	801347a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801347e:	f001 fd3d 	bl	8014efc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8013482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013486:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8013488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801348a:	2b00      	cmp	r3, #0
 801348c:	d024      	beq.n	80134d8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801348e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013490:	1e5a      	subs	r2, r3, #1
 8013492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013494:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d104      	bne.n	80134a8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801349e:	f001 fba1 	bl	8014be4 <pvTaskIncrementMutexHeldCount>
 80134a2:	4602      	mov	r2, r0
 80134a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134aa:	691b      	ldr	r3, [r3, #16]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00f      	beq.n	80134d0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134b2:	3310      	adds	r3, #16
 80134b4:	4618      	mov	r0, r3
 80134b6:	f000 ff83 	bl	80143c0 <xTaskRemoveFromEventList>
 80134ba:	4603      	mov	r3, r0
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d007      	beq.n	80134d0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80134c0:	4b55      	ldr	r3, [pc, #340]	@ (8013618 <xQueueSemaphoreTake+0x22c>)
 80134c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80134c6:	601a      	str	r2, [r3, #0]
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80134d0:	f001 fd4a 	bl	8014f68 <vPortExitCritical>
				return pdPASS;
 80134d4:	2301      	movs	r3, #1
 80134d6:	e09a      	b.n	801360e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d114      	bne.n	8013508 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80134de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d00d      	beq.n	8013500 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80134e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134e8:	b672      	cpsid	i
 80134ea:	f383 8811 	msr	BASEPRI, r3
 80134ee:	f3bf 8f6f 	isb	sy
 80134f2:	f3bf 8f4f 	dsb	sy
 80134f6:	b662      	cpsie	i
 80134f8:	617b      	str	r3, [r7, #20]
}
 80134fa:	bf00      	nop
 80134fc:	bf00      	nop
 80134fe:	e7fd      	b.n	80134fc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013500:	f001 fd32 	bl	8014f68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013504:	2300      	movs	r3, #0
 8013506:	e082      	b.n	801360e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801350a:	2b00      	cmp	r3, #0
 801350c:	d106      	bne.n	801351c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801350e:	f107 030c 	add.w	r3, r7, #12
 8013512:	4618      	mov	r0, r3
 8013514:	f001 f822 	bl	801455c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013518:	2301      	movs	r3, #1
 801351a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801351c:	f001 fd24 	bl	8014f68 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013520:	f000 fcca 	bl	8013eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013524:	f001 fcea 	bl	8014efc <vPortEnterCritical>
 8013528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801352a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801352e:	b25b      	sxtb	r3, r3
 8013530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013534:	d103      	bne.n	801353e <xQueueSemaphoreTake+0x152>
 8013536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013538:	2200      	movs	r2, #0
 801353a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013540:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013544:	b25b      	sxtb	r3, r3
 8013546:	f1b3 3fff 	cmp.w	r3, #4294967295
 801354a:	d103      	bne.n	8013554 <xQueueSemaphoreTake+0x168>
 801354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801354e:	2200      	movs	r2, #0
 8013550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013554:	f001 fd08 	bl	8014f68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013558:	463a      	mov	r2, r7
 801355a:	f107 030c 	add.w	r3, r7, #12
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f001 f811 	bl	8014588 <xTaskCheckForTimeOut>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d132      	bne.n	80135d2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801356c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801356e:	f000 f9fd 	bl	801396c <prvIsQueueEmpty>
 8013572:	4603      	mov	r3, r0
 8013574:	2b00      	cmp	r3, #0
 8013576:	d026      	beq.n	80135c6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d109      	bne.n	8013594 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8013580:	f001 fcbc 	bl	8014efc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013586:	689b      	ldr	r3, [r3, #8]
 8013588:	4618      	mov	r0, r3
 801358a:	f001 f967 	bl	801485c <xTaskPriorityInherit>
 801358e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8013590:	f001 fcea 	bl	8014f68 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013596:	3324      	adds	r3, #36	@ 0x24
 8013598:	683a      	ldr	r2, [r7, #0]
 801359a:	4611      	mov	r1, r2
 801359c:	4618      	mov	r0, r3
 801359e:	f000 fea5 	bl	80142ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80135a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135a4:	f000 f990 	bl	80138c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80135a8:	f000 fc94 	bl	8013ed4 <xTaskResumeAll>
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	f47f af65 	bne.w	801347e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80135b4:	4b18      	ldr	r3, [pc, #96]	@ (8013618 <xQueueSemaphoreTake+0x22c>)
 80135b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80135ba:	601a      	str	r2, [r3, #0]
 80135bc:	f3bf 8f4f 	dsb	sy
 80135c0:	f3bf 8f6f 	isb	sy
 80135c4:	e75b      	b.n	801347e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80135c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135c8:	f000 f97e 	bl	80138c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80135cc:	f000 fc82 	bl	8013ed4 <xTaskResumeAll>
 80135d0:	e755      	b.n	801347e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80135d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135d4:	f000 f978 	bl	80138c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80135d8:	f000 fc7c 	bl	8013ed4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80135dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135de:	f000 f9c5 	bl	801396c <prvIsQueueEmpty>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	f43f af4a 	beq.w	801347e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80135ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d00d      	beq.n	801360c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80135f0:	f001 fc84 	bl	8014efc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80135f4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80135f6:	f000 f8bf 	bl	8013778 <prvGetDisinheritPriorityAfterTimeout>
 80135fa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80135fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135fe:	689b      	ldr	r3, [r3, #8]
 8013600:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013602:	4618      	mov	r0, r3
 8013604:	f001 fa36 	bl	8014a74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013608:	f001 fcae 	bl	8014f68 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801360c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801360e:	4618      	mov	r0, r3
 8013610:	3738      	adds	r7, #56	@ 0x38
 8013612:	46bd      	mov	sp, r7
 8013614:	bd80      	pop	{r7, pc}
 8013616:	bf00      	nop
 8013618:	e000ed04 	.word	0xe000ed04

0801361c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08e      	sub	sp, #56	@ 0x38
 8013620:	af00      	add	r7, sp, #0
 8013622:	60f8      	str	r0, [r7, #12]
 8013624:	60b9      	str	r1, [r7, #8]
 8013626:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801362c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801362e:	2b00      	cmp	r3, #0
 8013630:	d10d      	bne.n	801364e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013636:	b672      	cpsid	i
 8013638:	f383 8811 	msr	BASEPRI, r3
 801363c:	f3bf 8f6f 	isb	sy
 8013640:	f3bf 8f4f 	dsb	sy
 8013644:	b662      	cpsie	i
 8013646:	623b      	str	r3, [r7, #32]
}
 8013648:	bf00      	nop
 801364a:	bf00      	nop
 801364c:	e7fd      	b.n	801364a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d103      	bne.n	801365c <xQueueReceiveFromISR+0x40>
 8013654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013658:	2b00      	cmp	r3, #0
 801365a:	d101      	bne.n	8013660 <xQueueReceiveFromISR+0x44>
 801365c:	2301      	movs	r3, #1
 801365e:	e000      	b.n	8013662 <xQueueReceiveFromISR+0x46>
 8013660:	2300      	movs	r3, #0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d10d      	bne.n	8013682 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801366a:	b672      	cpsid	i
 801366c:	f383 8811 	msr	BASEPRI, r3
 8013670:	f3bf 8f6f 	isb	sy
 8013674:	f3bf 8f4f 	dsb	sy
 8013678:	b662      	cpsie	i
 801367a:	61fb      	str	r3, [r7, #28]
}
 801367c:	bf00      	nop
 801367e:	bf00      	nop
 8013680:	e7fd      	b.n	801367e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013682:	f001 fd23 	bl	80150cc <vPortValidateInterruptPriority>
	__asm volatile
 8013686:	f3ef 8211 	mrs	r2, BASEPRI
 801368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801368e:	b672      	cpsid	i
 8013690:	f383 8811 	msr	BASEPRI, r3
 8013694:	f3bf 8f6f 	isb	sy
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	b662      	cpsie	i
 801369e:	61ba      	str	r2, [r7, #24]
 80136a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80136a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80136a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80136a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80136aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80136ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d02f      	beq.n	8013712 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80136b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80136b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80136bc:	68b9      	ldr	r1, [r7, #8]
 80136be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80136c0:	f000 f8dc 	bl	801387c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80136c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136c6:	1e5a      	subs	r2, r3, #1
 80136c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80136cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80136d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136d4:	d112      	bne.n	80136fc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136d8:	691b      	ldr	r3, [r3, #16]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d016      	beq.n	801370c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136e0:	3310      	adds	r3, #16
 80136e2:	4618      	mov	r0, r3
 80136e4:	f000 fe6c 	bl	80143c0 <xTaskRemoveFromEventList>
 80136e8:	4603      	mov	r3, r0
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d00e      	beq.n	801370c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00b      	beq.n	801370c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	2201      	movs	r2, #1
 80136f8:	601a      	str	r2, [r3, #0]
 80136fa:	e007      	b.n	801370c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80136fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013700:	3301      	adds	r3, #1
 8013702:	b2db      	uxtb	r3, r3
 8013704:	b25a      	sxtb	r2, r3
 8013706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801370c:	2301      	movs	r3, #1
 801370e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013710:	e001      	b.n	8013716 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013712:	2300      	movs	r3, #0
 8013714:	637b      	str	r3, [r7, #52]	@ 0x34
 8013716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013718:	613b      	str	r3, [r7, #16]
	__asm volatile
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	f383 8811 	msr	BASEPRI, r3
}
 8013720:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013724:	4618      	mov	r0, r3
 8013726:	3738      	adds	r7, #56	@ 0x38
 8013728:	46bd      	mov	sp, r7
 801372a:	bd80      	pop	{r7, pc}

0801372c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d10d      	bne.n	801375a <vQueueDelete+0x2e>
	__asm volatile
 801373e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013742:	b672      	cpsid	i
 8013744:	f383 8811 	msr	BASEPRI, r3
 8013748:	f3bf 8f6f 	isb	sy
 801374c:	f3bf 8f4f 	dsb	sy
 8013750:	b662      	cpsie	i
 8013752:	60bb      	str	r3, [r7, #8]
}
 8013754:	bf00      	nop
 8013756:	bf00      	nop
 8013758:	e7fd      	b.n	8013756 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801375a:	68f8      	ldr	r0, [r7, #12]
 801375c:	f000 f934 	bl	80139c8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013766:	2b00      	cmp	r3, #0
 8013768:	d102      	bne.n	8013770 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801376a:	68f8      	ldr	r0, [r7, #12]
 801376c:	f001 fdc2 	bl	80152f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013770:	bf00      	nop
 8013772:	3710      	adds	r7, #16
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013778:	b480      	push	{r7}
 801377a:	b085      	sub	sp, #20
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013784:	2b00      	cmp	r3, #0
 8013786:	d006      	beq.n	8013796 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	f1c3 030c 	rsb	r3, r3, #12
 8013792:	60fb      	str	r3, [r7, #12]
 8013794:	e001      	b.n	801379a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013796:	2300      	movs	r3, #0
 8013798:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801379a:	68fb      	ldr	r3, [r7, #12]
	}
 801379c:	4618      	mov	r0, r3
 801379e:	3714      	adds	r7, #20
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr

080137a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80137a8:	b580      	push	{r7, lr}
 80137aa:	b086      	sub	sp, #24
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80137b4:	2300      	movs	r3, #0
 80137b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d10d      	bne.n	80137e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d14d      	bne.n	801386a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	689b      	ldr	r3, [r3, #8]
 80137d2:	4618      	mov	r0, r3
 80137d4:	f001 f8c2 	bl	801495c <xTaskPriorityDisinherit>
 80137d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	2200      	movs	r2, #0
 80137de:	609a      	str	r2, [r3, #8]
 80137e0:	e043      	b.n	801386a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d119      	bne.n	801381c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	6858      	ldr	r0, [r3, #4]
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80137f0:	461a      	mov	r2, r3
 80137f2:	68b9      	ldr	r1, [r7, #8]
 80137f4:	f002 fed3 	bl	801659e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	685a      	ldr	r2, [r3, #4]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013800:	441a      	add	r2, r3
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	685a      	ldr	r2, [r3, #4]
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	689b      	ldr	r3, [r3, #8]
 801380e:	429a      	cmp	r2, r3
 8013810:	d32b      	bcc.n	801386a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	681a      	ldr	r2, [r3, #0]
 8013816:	68fb      	ldr	r3, [r7, #12]
 8013818:	605a      	str	r2, [r3, #4]
 801381a:	e026      	b.n	801386a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	68d8      	ldr	r0, [r3, #12]
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013824:	461a      	mov	r2, r3
 8013826:	68b9      	ldr	r1, [r7, #8]
 8013828:	f002 feb9 	bl	801659e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	68da      	ldr	r2, [r3, #12]
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013834:	425b      	negs	r3, r3
 8013836:	441a      	add	r2, r3
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	68da      	ldr	r2, [r3, #12]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	429a      	cmp	r2, r3
 8013846:	d207      	bcs.n	8013858 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	689a      	ldr	r2, [r3, #8]
 801384c:	68fb      	ldr	r3, [r7, #12]
 801384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013850:	425b      	negs	r3, r3
 8013852:	441a      	add	r2, r3
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2b02      	cmp	r3, #2
 801385c:	d105      	bne.n	801386a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801385e:	693b      	ldr	r3, [r7, #16]
 8013860:	2b00      	cmp	r3, #0
 8013862:	d002      	beq.n	801386a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013864:	693b      	ldr	r3, [r7, #16]
 8013866:	3b01      	subs	r3, #1
 8013868:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	1c5a      	adds	r2, r3, #1
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8013872:	697b      	ldr	r3, [r7, #20]
}
 8013874:	4618      	mov	r0, r3
 8013876:	3718      	adds	r7, #24
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
 8013884:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801388a:	2b00      	cmp	r3, #0
 801388c:	d018      	beq.n	80138c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	68da      	ldr	r2, [r3, #12]
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013896:	441a      	add	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	68da      	ldr	r2, [r3, #12]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	689b      	ldr	r3, [r3, #8]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d303      	bcc.n	80138b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681a      	ldr	r2, [r3, #0]
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	68d9      	ldr	r1, [r3, #12]
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80138b8:	461a      	mov	r2, r3
 80138ba:	6838      	ldr	r0, [r7, #0]
 80138bc:	f002 fe6f 	bl	801659e <memcpy>
	}
}
 80138c0:	bf00      	nop
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}

080138c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	b084      	sub	sp, #16
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80138d0:	f001 fb14 	bl	8014efc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80138da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80138dc:	e011      	b.n	8013902 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d012      	beq.n	801390c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	3324      	adds	r3, #36	@ 0x24
 80138ea:	4618      	mov	r0, r3
 80138ec:	f000 fd68 	bl	80143c0 <xTaskRemoveFromEventList>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d001      	beq.n	80138fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80138f6:	f000 feaf 	bl	8014658 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80138fa:	7bfb      	ldrb	r3, [r7, #15]
 80138fc:	3b01      	subs	r3, #1
 80138fe:	b2db      	uxtb	r3, r3
 8013900:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013906:	2b00      	cmp	r3, #0
 8013908:	dce9      	bgt.n	80138de <prvUnlockQueue+0x16>
 801390a:	e000      	b.n	801390e <prvUnlockQueue+0x46>
					break;
 801390c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	22ff      	movs	r2, #255	@ 0xff
 8013912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013916:	f001 fb27 	bl	8014f68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801391a:	f001 faef 	bl	8014efc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013924:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013926:	e011      	b.n	801394c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	691b      	ldr	r3, [r3, #16]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d012      	beq.n	8013956 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	3310      	adds	r3, #16
 8013934:	4618      	mov	r0, r3
 8013936:	f000 fd43 	bl	80143c0 <xTaskRemoveFromEventList>
 801393a:	4603      	mov	r3, r0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d001      	beq.n	8013944 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013940:	f000 fe8a 	bl	8014658 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013944:	7bbb      	ldrb	r3, [r7, #14]
 8013946:	3b01      	subs	r3, #1
 8013948:	b2db      	uxtb	r3, r3
 801394a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801394c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013950:	2b00      	cmp	r3, #0
 8013952:	dce9      	bgt.n	8013928 <prvUnlockQueue+0x60>
 8013954:	e000      	b.n	8013958 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013956:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	22ff      	movs	r2, #255	@ 0xff
 801395c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013960:	f001 fb02 	bl	8014f68 <vPortExitCritical>
}
 8013964:	bf00      	nop
 8013966:	3710      	adds	r7, #16
 8013968:	46bd      	mov	sp, r7
 801396a:	bd80      	pop	{r7, pc}

0801396c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b084      	sub	sp, #16
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013974:	f001 fac2 	bl	8014efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801397c:	2b00      	cmp	r3, #0
 801397e:	d102      	bne.n	8013986 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013980:	2301      	movs	r3, #1
 8013982:	60fb      	str	r3, [r7, #12]
 8013984:	e001      	b.n	801398a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013986:	2300      	movs	r3, #0
 8013988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801398a:	f001 faed 	bl	8014f68 <vPortExitCritical>

	return xReturn;
 801398e:	68fb      	ldr	r3, [r7, #12]
}
 8013990:	4618      	mov	r0, r3
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80139a0:	f001 faac 	bl	8014efc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d102      	bne.n	80139b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80139b0:	2301      	movs	r3, #1
 80139b2:	60fb      	str	r3, [r7, #12]
 80139b4:	e001      	b.n	80139ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80139b6:	2300      	movs	r3, #0
 80139b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80139ba:	f001 fad5 	bl	8014f68 <vPortExitCritical>

	return xReturn;
 80139be:	68fb      	ldr	r3, [r7, #12]
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3710      	adds	r7, #16
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}

080139c8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80139c8:	b480      	push	{r7}
 80139ca:	b085      	sub	sp, #20
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139d0:	2300      	movs	r3, #0
 80139d2:	60fb      	str	r3, [r7, #12]
 80139d4:	e016      	b.n	8013a04 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80139d6:	4a10      	ldr	r2, [pc, #64]	@ (8013a18 <vQueueUnregisterQueue+0x50>)
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	00db      	lsls	r3, r3, #3
 80139dc:	4413      	add	r3, r2
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d10b      	bne.n	80139fe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80139e6:	4a0c      	ldr	r2, [pc, #48]	@ (8013a18 <vQueueUnregisterQueue+0x50>)
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	2100      	movs	r1, #0
 80139ec:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80139f0:	4a09      	ldr	r2, [pc, #36]	@ (8013a18 <vQueueUnregisterQueue+0x50>)
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	00db      	lsls	r3, r3, #3
 80139f6:	4413      	add	r3, r2
 80139f8:	2200      	movs	r2, #0
 80139fa:	605a      	str	r2, [r3, #4]
				break;
 80139fc:	e006      	b.n	8013a0c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	3301      	adds	r3, #1
 8013a02:	60fb      	str	r3, [r7, #12]
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	2bfe      	cmp	r3, #254	@ 0xfe
 8013a08:	d9e5      	bls.n	80139d6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013a0a:	bf00      	nop
 8013a0c:	bf00      	nop
 8013a0e:	3714      	adds	r7, #20
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr
 8013a18:	2000c2fc 	.word	0x2000c2fc

08013a1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b08e      	sub	sp, #56	@ 0x38
 8013a20:	af04      	add	r7, sp, #16
 8013a22:	60f8      	str	r0, [r7, #12]
 8013a24:	60b9      	str	r1, [r7, #8]
 8013a26:	607a      	str	r2, [r7, #4]
 8013a28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d10d      	bne.n	8013a4c <xTaskCreateStatic+0x30>
	__asm volatile
 8013a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a34:	b672      	cpsid	i
 8013a36:	f383 8811 	msr	BASEPRI, r3
 8013a3a:	f3bf 8f6f 	isb	sy
 8013a3e:	f3bf 8f4f 	dsb	sy
 8013a42:	b662      	cpsie	i
 8013a44:	623b      	str	r3, [r7, #32]
}
 8013a46:	bf00      	nop
 8013a48:	bf00      	nop
 8013a4a:	e7fd      	b.n	8013a48 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8013a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10d      	bne.n	8013a6e <xTaskCreateStatic+0x52>
	__asm volatile
 8013a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a56:	b672      	cpsid	i
 8013a58:	f383 8811 	msr	BASEPRI, r3
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	b662      	cpsie	i
 8013a66:	61fb      	str	r3, [r7, #28]
}
 8013a68:	bf00      	nop
 8013a6a:	bf00      	nop
 8013a6c:	e7fd      	b.n	8013a6a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013a6e:	2360      	movs	r3, #96	@ 0x60
 8013a70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013a72:	693b      	ldr	r3, [r7, #16]
 8013a74:	2b60      	cmp	r3, #96	@ 0x60
 8013a76:	d00d      	beq.n	8013a94 <xTaskCreateStatic+0x78>
	__asm volatile
 8013a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013a7c:	b672      	cpsid	i
 8013a7e:	f383 8811 	msr	BASEPRI, r3
 8013a82:	f3bf 8f6f 	isb	sy
 8013a86:	f3bf 8f4f 	dsb	sy
 8013a8a:	b662      	cpsie	i
 8013a8c:	61bb      	str	r3, [r7, #24]
}
 8013a8e:	bf00      	nop
 8013a90:	bf00      	nop
 8013a92:	e7fd      	b.n	8013a90 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013a94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d01e      	beq.n	8013ada <xTaskCreateStatic+0xbe>
 8013a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d01b      	beq.n	8013ada <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013aaa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aae:	2202      	movs	r2, #2
 8013ab0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	9303      	str	r3, [sp, #12]
 8013ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aba:	9302      	str	r3, [sp, #8]
 8013abc:	f107 0314 	add.w	r3, r7, #20
 8013ac0:	9301      	str	r3, [sp, #4]
 8013ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ac4:	9300      	str	r3, [sp, #0]
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	687a      	ldr	r2, [r7, #4]
 8013aca:	68b9      	ldr	r1, [r7, #8]
 8013acc:	68f8      	ldr	r0, [r7, #12]
 8013ace:	f000 f850 	bl	8013b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ad2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013ad4:	f000 f8e2 	bl	8013c9c <prvAddNewTaskToReadyList>
 8013ad8:	e001      	b.n	8013ade <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013ade:	697b      	ldr	r3, [r7, #20]
	}
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	3728      	adds	r7, #40	@ 0x28
 8013ae4:	46bd      	mov	sp, r7
 8013ae6:	bd80      	pop	{r7, pc}

08013ae8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b08c      	sub	sp, #48	@ 0x30
 8013aec:	af04      	add	r7, sp, #16
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	603b      	str	r3, [r7, #0]
 8013af4:	4613      	mov	r3, r2
 8013af6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013af8:	88fb      	ldrh	r3, [r7, #6]
 8013afa:	009b      	lsls	r3, r3, #2
 8013afc:	4618      	mov	r0, r3
 8013afe:	f001 fb2b 	bl	8015158 <pvPortMalloc>
 8013b02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013b04:	697b      	ldr	r3, [r7, #20]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d00e      	beq.n	8013b28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013b0a:	2060      	movs	r0, #96	@ 0x60
 8013b0c:	f001 fb24 	bl	8015158 <pvPortMalloc>
 8013b10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013b12:	69fb      	ldr	r3, [r7, #28]
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d003      	beq.n	8013b20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	697a      	ldr	r2, [r7, #20]
 8013b1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8013b1e:	e005      	b.n	8013b2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013b20:	6978      	ldr	r0, [r7, #20]
 8013b22:	f001 fbe7 	bl	80152f4 <vPortFree>
 8013b26:	e001      	b.n	8013b2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013b2c:	69fb      	ldr	r3, [r7, #28]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d017      	beq.n	8013b62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013b32:	69fb      	ldr	r3, [r7, #28]
 8013b34:	2200      	movs	r2, #0
 8013b36:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013b3a:	88fa      	ldrh	r2, [r7, #6]
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	9303      	str	r3, [sp, #12]
 8013b40:	69fb      	ldr	r3, [r7, #28]
 8013b42:	9302      	str	r3, [sp, #8]
 8013b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b46:	9301      	str	r3, [sp, #4]
 8013b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b4a:	9300      	str	r3, [sp, #0]
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	68b9      	ldr	r1, [r7, #8]
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f000 f80e 	bl	8013b72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013b56:	69f8      	ldr	r0, [r7, #28]
 8013b58:	f000 f8a0 	bl	8013c9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013b5c:	2301      	movs	r3, #1
 8013b5e:	61bb      	str	r3, [r7, #24]
 8013b60:	e002      	b.n	8013b68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013b62:	f04f 33ff 	mov.w	r3, #4294967295
 8013b66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013b68:	69bb      	ldr	r3, [r7, #24]
	}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3720      	adds	r7, #32
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b088      	sub	sp, #32
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	60f8      	str	r0, [r7, #12]
 8013b7a:	60b9      	str	r1, [r7, #8]
 8013b7c:	607a      	str	r2, [r7, #4]
 8013b7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b82:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	009b      	lsls	r3, r3, #2
 8013b88:	461a      	mov	r2, r3
 8013b8a:	21a5      	movs	r1, #165	@ 0xa5
 8013b8c:	f002 fc33 	bl	80163f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013b94:	6879      	ldr	r1, [r7, #4]
 8013b96:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8013b9a:	440b      	add	r3, r1
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	4413      	add	r3, r2
 8013ba0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013ba2:	69bb      	ldr	r3, [r7, #24]
 8013ba4:	f023 0307 	bic.w	r3, r3, #7
 8013ba8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013baa:	69bb      	ldr	r3, [r7, #24]
 8013bac:	f003 0307 	and.w	r3, r3, #7
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00d      	beq.n	8013bd0 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8013bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bb8:	b672      	cpsid	i
 8013bba:	f383 8811 	msr	BASEPRI, r3
 8013bbe:	f3bf 8f6f 	isb	sy
 8013bc2:	f3bf 8f4f 	dsb	sy
 8013bc6:	b662      	cpsie	i
 8013bc8:	617b      	str	r3, [r7, #20]
}
 8013bca:	bf00      	nop
 8013bcc:	bf00      	nop
 8013bce:	e7fd      	b.n	8013bcc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d01f      	beq.n	8013c16 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	61fb      	str	r3, [r7, #28]
 8013bda:	e012      	b.n	8013c02 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013bdc:	68ba      	ldr	r2, [r7, #8]
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	4413      	add	r3, r2
 8013be2:	7819      	ldrb	r1, [r3, #0]
 8013be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013be6:	69fb      	ldr	r3, [r7, #28]
 8013be8:	4413      	add	r3, r2
 8013bea:	3334      	adds	r3, #52	@ 0x34
 8013bec:	460a      	mov	r2, r1
 8013bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013bf0:	68ba      	ldr	r2, [r7, #8]
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	781b      	ldrb	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d006      	beq.n	8013c0a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013bfc:	69fb      	ldr	r3, [r7, #28]
 8013bfe:	3301      	adds	r3, #1
 8013c00:	61fb      	str	r3, [r7, #28]
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	2b0f      	cmp	r3, #15
 8013c06:	d9e9      	bls.n	8013bdc <prvInitialiseNewTask+0x6a>
 8013c08:	e000      	b.n	8013c0c <prvInitialiseNewTask+0x9a>
			{
				break;
 8013c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c0e:	2200      	movs	r2, #0
 8013c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013c14:	e003      	b.n	8013c1e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c18:	2200      	movs	r2, #0
 8013c1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c20:	2b0b      	cmp	r3, #11
 8013c22:	d901      	bls.n	8013c28 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013c24:	230b      	movs	r3, #11
 8013c26:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c32:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c36:	2200      	movs	r2, #0
 8013c38:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fe ff2a 	bl	8012a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c46:	3318      	adds	r3, #24
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7fe ff25 	bl	8012a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c56:	f1c3 020c 	rsb	r2, r3, #12
 8013c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c62:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c66:	2200      	movs	r2, #0
 8013c68:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c72:	2200      	movs	r2, #0
 8013c74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	68f9      	ldr	r1, [r7, #12]
 8013c7c:	69b8      	ldr	r0, [r7, #24]
 8013c7e:	f001 f82b 	bl	8014cd8 <pxPortInitialiseStack>
 8013c82:	4602      	mov	r2, r0
 8013c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c86:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d002      	beq.n	8013c94 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013c92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013c94:	bf00      	nop
 8013c96:	3720      	adds	r7, #32
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b082      	sub	sp, #8
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013ca4:	f001 f92a 	bl	8014efc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013ca8:	4b2c      	ldr	r3, [pc, #176]	@ (8013d5c <prvAddNewTaskToReadyList+0xc0>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	3301      	adds	r3, #1
 8013cae:	4a2b      	ldr	r2, [pc, #172]	@ (8013d5c <prvAddNewTaskToReadyList+0xc0>)
 8013cb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8013d60 <prvAddNewTaskToReadyList+0xc4>)
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d109      	bne.n	8013cce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013cba:	4a29      	ldr	r2, [pc, #164]	@ (8013d60 <prvAddNewTaskToReadyList+0xc4>)
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013cc0:	4b26      	ldr	r3, [pc, #152]	@ (8013d5c <prvAddNewTaskToReadyList+0xc0>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	2b01      	cmp	r3, #1
 8013cc6:	d110      	bne.n	8013cea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013cc8:	f000 fcea 	bl	80146a0 <prvInitialiseTaskLists>
 8013ccc:	e00d      	b.n	8013cea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013cce:	4b25      	ldr	r3, [pc, #148]	@ (8013d64 <prvAddNewTaskToReadyList+0xc8>)
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d109      	bne.n	8013cea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013cd6:	4b22      	ldr	r3, [pc, #136]	@ (8013d60 <prvAddNewTaskToReadyList+0xc4>)
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d802      	bhi.n	8013cea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8013d60 <prvAddNewTaskToReadyList+0xc4>)
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013cea:	4b1f      	ldr	r3, [pc, #124]	@ (8013d68 <prvAddNewTaskToReadyList+0xcc>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8013d68 <prvAddNewTaskToReadyList+0xcc>)
 8013cf2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8013d68 <prvAddNewTaskToReadyList+0xcc>)
 8013cf6:	681a      	ldr	r2, [r3, #0]
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d00:	2201      	movs	r2, #1
 8013d02:	409a      	lsls	r2, r3
 8013d04:	4b19      	ldr	r3, [pc, #100]	@ (8013d6c <prvAddNewTaskToReadyList+0xd0>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4313      	orrs	r3, r2
 8013d0a:	4a18      	ldr	r2, [pc, #96]	@ (8013d6c <prvAddNewTaskToReadyList+0xd0>)
 8013d0c:	6013      	str	r3, [r2, #0]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d12:	4613      	mov	r3, r2
 8013d14:	009b      	lsls	r3, r3, #2
 8013d16:	4413      	add	r3, r2
 8013d18:	009b      	lsls	r3, r3, #2
 8013d1a:	4a15      	ldr	r2, [pc, #84]	@ (8013d70 <prvAddNewTaskToReadyList+0xd4>)
 8013d1c:	441a      	add	r2, r3
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	3304      	adds	r3, #4
 8013d22:	4619      	mov	r1, r3
 8013d24:	4610      	mov	r0, r2
 8013d26:	f7fe fec4 	bl	8012ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013d2a:	f001 f91d 	bl	8014f68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8013d64 <prvAddNewTaskToReadyList+0xc8>)
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00e      	beq.n	8013d54 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013d36:	4b0a      	ldr	r3, [pc, #40]	@ (8013d60 <prvAddNewTaskToReadyList+0xc4>)
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d207      	bcs.n	8013d54 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013d44:	4b0b      	ldr	r3, [pc, #44]	@ (8013d74 <prvAddNewTaskToReadyList+0xd8>)
 8013d46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013d4a:	601a      	str	r2, [r3, #0]
 8013d4c:	f3bf 8f4f 	dsb	sy
 8013d50:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d54:	bf00      	nop
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}
 8013d5c:	2000cc58 	.word	0x2000cc58
 8013d60:	2000caf4 	.word	0x2000caf4
 8013d64:	2000cc64 	.word	0x2000cc64
 8013d68:	2000cc74 	.word	0x2000cc74
 8013d6c:	2000cc60 	.word	0x2000cc60
 8013d70:	2000caf8 	.word	0x2000caf8
 8013d74:	e000ed04 	.word	0xe000ed04

08013d78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b084      	sub	sp, #16
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013d80:	2300      	movs	r3, #0
 8013d82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d01a      	beq.n	8013dc0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013d8a:	4b15      	ldr	r3, [pc, #84]	@ (8013de0 <vTaskDelay+0x68>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d00d      	beq.n	8013dae <vTaskDelay+0x36>
	__asm volatile
 8013d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d96:	b672      	cpsid	i
 8013d98:	f383 8811 	msr	BASEPRI, r3
 8013d9c:	f3bf 8f6f 	isb	sy
 8013da0:	f3bf 8f4f 	dsb	sy
 8013da4:	b662      	cpsie	i
 8013da6:	60bb      	str	r3, [r7, #8]
}
 8013da8:	bf00      	nop
 8013daa:	bf00      	nop
 8013dac:	e7fd      	b.n	8013daa <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013dae:	f000 f883 	bl	8013eb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013db2:	2100      	movs	r1, #0
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 ff29 	bl	8014c0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013dba:	f000 f88b 	bl	8013ed4 <xTaskResumeAll>
 8013dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d107      	bne.n	8013dd6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013dc6:	4b07      	ldr	r3, [pc, #28]	@ (8013de4 <vTaskDelay+0x6c>)
 8013dc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013dcc:	601a      	str	r2, [r3, #0]
 8013dce:	f3bf 8f4f 	dsb	sy
 8013dd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013dd6:	bf00      	nop
 8013dd8:	3710      	adds	r7, #16
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
 8013dde:	bf00      	nop
 8013de0:	2000cc80 	.word	0x2000cc80
 8013de4:	e000ed04 	.word	0xe000ed04

08013de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b08a      	sub	sp, #40	@ 0x28
 8013dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013dee:	2300      	movs	r3, #0
 8013df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013df6:	463a      	mov	r2, r7
 8013df8:	1d39      	adds	r1, r7, #4
 8013dfa:	f107 0308 	add.w	r3, r7, #8
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f1 f892 	bl	8004f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013e04:	6839      	ldr	r1, [r7, #0]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	68ba      	ldr	r2, [r7, #8]
 8013e0a:	9202      	str	r2, [sp, #8]
 8013e0c:	9301      	str	r3, [sp, #4]
 8013e0e:	2300      	movs	r3, #0
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	2300      	movs	r3, #0
 8013e14:	460a      	mov	r2, r1
 8013e16:	4922      	ldr	r1, [pc, #136]	@ (8013ea0 <vTaskStartScheduler+0xb8>)
 8013e18:	4822      	ldr	r0, [pc, #136]	@ (8013ea4 <vTaskStartScheduler+0xbc>)
 8013e1a:	f7ff fdff 	bl	8013a1c <xTaskCreateStatic>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	4a21      	ldr	r2, [pc, #132]	@ (8013ea8 <vTaskStartScheduler+0xc0>)
 8013e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013e24:	4b20      	ldr	r3, [pc, #128]	@ (8013ea8 <vTaskStartScheduler+0xc0>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d002      	beq.n	8013e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	617b      	str	r3, [r7, #20]
 8013e30:	e001      	b.n	8013e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013e32:	2300      	movs	r3, #0
 8013e34:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e36:	697b      	ldr	r3, [r7, #20]
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d11a      	bne.n	8013e72 <vTaskStartScheduler+0x8a>
	__asm volatile
 8013e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e40:	b672      	cpsid	i
 8013e42:	f383 8811 	msr	BASEPRI, r3
 8013e46:	f3bf 8f6f 	isb	sy
 8013e4a:	f3bf 8f4f 	dsb	sy
 8013e4e:	b662      	cpsie	i
 8013e50:	613b      	str	r3, [r7, #16]
}
 8013e52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e54:	4b15      	ldr	r3, [pc, #84]	@ (8013eac <vTaskStartScheduler+0xc4>)
 8013e56:	f04f 32ff 	mov.w	r2, #4294967295
 8013e5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e5c:	4b14      	ldr	r3, [pc, #80]	@ (8013eb0 <vTaskStartScheduler+0xc8>)
 8013e5e:	2201      	movs	r2, #1
 8013e60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e62:	4b14      	ldr	r3, [pc, #80]	@ (8013eb4 <vTaskStartScheduler+0xcc>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013e68:	f7f1 f844 	bl	8004ef4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e6c:	f000 ffc8 	bl	8014e00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e70:	e011      	b.n	8013e96 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e72:	697b      	ldr	r3, [r7, #20]
 8013e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e78:	d10d      	bne.n	8013e96 <vTaskStartScheduler+0xae>
	__asm volatile
 8013e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e7e:	b672      	cpsid	i
 8013e80:	f383 8811 	msr	BASEPRI, r3
 8013e84:	f3bf 8f6f 	isb	sy
 8013e88:	f3bf 8f4f 	dsb	sy
 8013e8c:	b662      	cpsie	i
 8013e8e:	60fb      	str	r3, [r7, #12]
}
 8013e90:	bf00      	nop
 8013e92:	bf00      	nop
 8013e94:	e7fd      	b.n	8013e92 <vTaskStartScheduler+0xaa>
}
 8013e96:	bf00      	nop
 8013e98:	3718      	adds	r7, #24
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	08018be4 	.word	0x08018be4
 8013ea4:	08014671 	.word	0x08014671
 8013ea8:	2000cc7c 	.word	0x2000cc7c
 8013eac:	2000cc78 	.word	0x2000cc78
 8013eb0:	2000cc64 	.word	0x2000cc64
 8013eb4:	2000cc5c 	.word	0x2000cc5c

08013eb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013eb8:	b480      	push	{r7}
 8013eba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013ebc:	4b04      	ldr	r3, [pc, #16]	@ (8013ed0 <vTaskSuspendAll+0x18>)
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	4a03      	ldr	r2, [pc, #12]	@ (8013ed0 <vTaskSuspendAll+0x18>)
 8013ec4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013ec6:	bf00      	nop
 8013ec8:	46bd      	mov	sp, r7
 8013eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ece:	4770      	bx	lr
 8013ed0:	2000cc80 	.word	0x2000cc80

08013ed4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013ede:	2300      	movs	r3, #0
 8013ee0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013ee2:	4b43      	ldr	r3, [pc, #268]	@ (8013ff0 <xTaskResumeAll+0x11c>)
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d10d      	bne.n	8013f06 <xTaskResumeAll+0x32>
	__asm volatile
 8013eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013eee:	b672      	cpsid	i
 8013ef0:	f383 8811 	msr	BASEPRI, r3
 8013ef4:	f3bf 8f6f 	isb	sy
 8013ef8:	f3bf 8f4f 	dsb	sy
 8013efc:	b662      	cpsie	i
 8013efe:	603b      	str	r3, [r7, #0]
}
 8013f00:	bf00      	nop
 8013f02:	bf00      	nop
 8013f04:	e7fd      	b.n	8013f02 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013f06:	f000 fff9 	bl	8014efc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013f0a:	4b39      	ldr	r3, [pc, #228]	@ (8013ff0 <xTaskResumeAll+0x11c>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	3b01      	subs	r3, #1
 8013f10:	4a37      	ldr	r2, [pc, #220]	@ (8013ff0 <xTaskResumeAll+0x11c>)
 8013f12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f14:	4b36      	ldr	r3, [pc, #216]	@ (8013ff0 <xTaskResumeAll+0x11c>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d161      	bne.n	8013fe0 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013f1c:	4b35      	ldr	r3, [pc, #212]	@ (8013ff4 <xTaskResumeAll+0x120>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d05d      	beq.n	8013fe0 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f24:	e02e      	b.n	8013f84 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f26:	4b34      	ldr	r3, [pc, #208]	@ (8013ff8 <xTaskResumeAll+0x124>)
 8013f28:	68db      	ldr	r3, [r3, #12]
 8013f2a:	68db      	ldr	r3, [r3, #12]
 8013f2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	3318      	adds	r3, #24
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7fe fe1a 	bl	8012b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	3304      	adds	r3, #4
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7fe fe15 	bl	8012b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f46:	2201      	movs	r2, #1
 8013f48:	409a      	lsls	r2, r3
 8013f4a:	4b2c      	ldr	r3, [pc, #176]	@ (8013ffc <xTaskResumeAll+0x128>)
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	4313      	orrs	r3, r2
 8013f50:	4a2a      	ldr	r2, [pc, #168]	@ (8013ffc <xTaskResumeAll+0x128>)
 8013f52:	6013      	str	r3, [r2, #0]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f58:	4613      	mov	r3, r2
 8013f5a:	009b      	lsls	r3, r3, #2
 8013f5c:	4413      	add	r3, r2
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	4a27      	ldr	r2, [pc, #156]	@ (8014000 <xTaskResumeAll+0x12c>)
 8013f62:	441a      	add	r2, r3
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	3304      	adds	r3, #4
 8013f68:	4619      	mov	r1, r3
 8013f6a:	4610      	mov	r0, r2
 8013f6c:	f7fe fda1 	bl	8012ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f74:	4b23      	ldr	r3, [pc, #140]	@ (8014004 <xTaskResumeAll+0x130>)
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d302      	bcc.n	8013f84 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013f7e:	4b22      	ldr	r3, [pc, #136]	@ (8014008 <xTaskResumeAll+0x134>)
 8013f80:	2201      	movs	r2, #1
 8013f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f84:	4b1c      	ldr	r3, [pc, #112]	@ (8013ff8 <xTaskResumeAll+0x124>)
 8013f86:	681b      	ldr	r3, [r3, #0]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d1cc      	bne.n	8013f26 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d001      	beq.n	8013f96 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f92:	f000 fc25 	bl	80147e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013f96:	4b1d      	ldr	r3, [pc, #116]	@ (801400c <xTaskResumeAll+0x138>)
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d010      	beq.n	8013fc4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013fa2:	f000 f847 	bl	8014034 <xTaskIncrementTick>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d002      	beq.n	8013fb2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013fac:	4b16      	ldr	r3, [pc, #88]	@ (8014008 <xTaskResumeAll+0x134>)
 8013fae:	2201      	movs	r2, #1
 8013fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	3b01      	subs	r3, #1
 8013fb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d1f1      	bne.n	8013fa2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013fbe:	4b13      	ldr	r3, [pc, #76]	@ (801400c <xTaskResumeAll+0x138>)
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013fc4:	4b10      	ldr	r3, [pc, #64]	@ (8014008 <xTaskResumeAll+0x134>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d009      	beq.n	8013fe0 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8014010 <xTaskResumeAll+0x13c>)
 8013fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013fd6:	601a      	str	r2, [r3, #0]
 8013fd8:	f3bf 8f4f 	dsb	sy
 8013fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fe0:	f000 ffc2 	bl	8014f68 <vPortExitCritical>

	return xAlreadyYielded;
 8013fe4:	68bb      	ldr	r3, [r7, #8]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3710      	adds	r7, #16
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	2000cc80 	.word	0x2000cc80
 8013ff4:	2000cc58 	.word	0x2000cc58
 8013ff8:	2000cc18 	.word	0x2000cc18
 8013ffc:	2000cc60 	.word	0x2000cc60
 8014000:	2000caf8 	.word	0x2000caf8
 8014004:	2000caf4 	.word	0x2000caf4
 8014008:	2000cc6c 	.word	0x2000cc6c
 801400c:	2000cc68 	.word	0x2000cc68
 8014010:	e000ed04 	.word	0xe000ed04

08014014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014014:	b480      	push	{r7}
 8014016:	b083      	sub	sp, #12
 8014018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801401a:	4b05      	ldr	r3, [pc, #20]	@ (8014030 <xTaskGetTickCount+0x1c>)
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014020:	687b      	ldr	r3, [r7, #4]
}
 8014022:	4618      	mov	r0, r3
 8014024:	370c      	adds	r7, #12
 8014026:	46bd      	mov	sp, r7
 8014028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801402c:	4770      	bx	lr
 801402e:	bf00      	nop
 8014030:	2000cc5c 	.word	0x2000cc5c

08014034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801403a:	2300      	movs	r3, #0
 801403c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801403e:	4b50      	ldr	r3, [pc, #320]	@ (8014180 <xTaskIncrementTick+0x14c>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	2b00      	cmp	r3, #0
 8014044:	f040 808b 	bne.w	801415e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014048:	4b4e      	ldr	r3, [pc, #312]	@ (8014184 <xTaskIncrementTick+0x150>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	3301      	adds	r3, #1
 801404e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014050:	4a4c      	ldr	r2, [pc, #304]	@ (8014184 <xTaskIncrementTick+0x150>)
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014056:	693b      	ldr	r3, [r7, #16]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d123      	bne.n	80140a4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 801405c:	4b4a      	ldr	r3, [pc, #296]	@ (8014188 <xTaskIncrementTick+0x154>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d00d      	beq.n	8014082 <xTaskIncrementTick+0x4e>
	__asm volatile
 8014066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801406a:	b672      	cpsid	i
 801406c:	f383 8811 	msr	BASEPRI, r3
 8014070:	f3bf 8f6f 	isb	sy
 8014074:	f3bf 8f4f 	dsb	sy
 8014078:	b662      	cpsie	i
 801407a:	603b      	str	r3, [r7, #0]
}
 801407c:	bf00      	nop
 801407e:	bf00      	nop
 8014080:	e7fd      	b.n	801407e <xTaskIncrementTick+0x4a>
 8014082:	4b41      	ldr	r3, [pc, #260]	@ (8014188 <xTaskIncrementTick+0x154>)
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	60fb      	str	r3, [r7, #12]
 8014088:	4b40      	ldr	r3, [pc, #256]	@ (801418c <xTaskIncrementTick+0x158>)
 801408a:	681b      	ldr	r3, [r3, #0]
 801408c:	4a3e      	ldr	r2, [pc, #248]	@ (8014188 <xTaskIncrementTick+0x154>)
 801408e:	6013      	str	r3, [r2, #0]
 8014090:	4a3e      	ldr	r2, [pc, #248]	@ (801418c <xTaskIncrementTick+0x158>)
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	6013      	str	r3, [r2, #0]
 8014096:	4b3e      	ldr	r3, [pc, #248]	@ (8014190 <xTaskIncrementTick+0x15c>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	3301      	adds	r3, #1
 801409c:	4a3c      	ldr	r2, [pc, #240]	@ (8014190 <xTaskIncrementTick+0x15c>)
 801409e:	6013      	str	r3, [r2, #0]
 80140a0:	f000 fb9e 	bl	80147e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80140a4:	4b3b      	ldr	r3, [pc, #236]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	693a      	ldr	r2, [r7, #16]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d348      	bcc.n	8014140 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80140ae:	4b36      	ldr	r3, [pc, #216]	@ (8014188 <xTaskIncrementTick+0x154>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d104      	bne.n	80140c2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140b8:	4b36      	ldr	r3, [pc, #216]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140ba:	f04f 32ff 	mov.w	r2, #4294967295
 80140be:	601a      	str	r2, [r3, #0]
					break;
 80140c0:	e03e      	b.n	8014140 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140c2:	4b31      	ldr	r3, [pc, #196]	@ (8014188 <xTaskIncrementTick+0x154>)
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	68db      	ldr	r3, [r3, #12]
 80140c8:	68db      	ldr	r3, [r3, #12]
 80140ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140d2:	693a      	ldr	r2, [r7, #16]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d203      	bcs.n	80140e2 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140da:	4a2e      	ldr	r2, [pc, #184]	@ (8014194 <xTaskIncrementTick+0x160>)
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140e0:	e02e      	b.n	8014140 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	3304      	adds	r3, #4
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7fe fd40 	bl	8012b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d004      	beq.n	80140fe <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	3318      	adds	r3, #24
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7fe fd37 	bl	8012b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140fe:	68bb      	ldr	r3, [r7, #8]
 8014100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014102:	2201      	movs	r2, #1
 8014104:	409a      	lsls	r2, r3
 8014106:	4b24      	ldr	r3, [pc, #144]	@ (8014198 <xTaskIncrementTick+0x164>)
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	4313      	orrs	r3, r2
 801410c:	4a22      	ldr	r2, [pc, #136]	@ (8014198 <xTaskIncrementTick+0x164>)
 801410e:	6013      	str	r3, [r2, #0]
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014114:	4613      	mov	r3, r2
 8014116:	009b      	lsls	r3, r3, #2
 8014118:	4413      	add	r3, r2
 801411a:	009b      	lsls	r3, r3, #2
 801411c:	4a1f      	ldr	r2, [pc, #124]	@ (801419c <xTaskIncrementTick+0x168>)
 801411e:	441a      	add	r2, r3
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	3304      	adds	r3, #4
 8014124:	4619      	mov	r1, r3
 8014126:	4610      	mov	r0, r2
 8014128:	f7fe fcc3 	bl	8012ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801412c:	68bb      	ldr	r3, [r7, #8]
 801412e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014130:	4b1b      	ldr	r3, [pc, #108]	@ (80141a0 <xTaskIncrementTick+0x16c>)
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014136:	429a      	cmp	r2, r3
 8014138:	d3b9      	bcc.n	80140ae <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801413a:	2301      	movs	r3, #1
 801413c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801413e:	e7b6      	b.n	80140ae <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014140:	4b17      	ldr	r3, [pc, #92]	@ (80141a0 <xTaskIncrementTick+0x16c>)
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014146:	4915      	ldr	r1, [pc, #84]	@ (801419c <xTaskIncrementTick+0x168>)
 8014148:	4613      	mov	r3, r2
 801414a:	009b      	lsls	r3, r3, #2
 801414c:	4413      	add	r3, r2
 801414e:	009b      	lsls	r3, r3, #2
 8014150:	440b      	add	r3, r1
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	2b01      	cmp	r3, #1
 8014156:	d907      	bls.n	8014168 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8014158:	2301      	movs	r3, #1
 801415a:	617b      	str	r3, [r7, #20]
 801415c:	e004      	b.n	8014168 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801415e:	4b11      	ldr	r3, [pc, #68]	@ (80141a4 <xTaskIncrementTick+0x170>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	3301      	adds	r3, #1
 8014164:	4a0f      	ldr	r2, [pc, #60]	@ (80141a4 <xTaskIncrementTick+0x170>)
 8014166:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8014168:	4b0f      	ldr	r3, [pc, #60]	@ (80141a8 <xTaskIncrementTick+0x174>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d001      	beq.n	8014174 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8014170:	2301      	movs	r3, #1
 8014172:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8014174:	697b      	ldr	r3, [r7, #20]
}
 8014176:	4618      	mov	r0, r3
 8014178:	3718      	adds	r7, #24
 801417a:	46bd      	mov	sp, r7
 801417c:	bd80      	pop	{r7, pc}
 801417e:	bf00      	nop
 8014180:	2000cc80 	.word	0x2000cc80
 8014184:	2000cc5c 	.word	0x2000cc5c
 8014188:	2000cc10 	.word	0x2000cc10
 801418c:	2000cc14 	.word	0x2000cc14
 8014190:	2000cc70 	.word	0x2000cc70
 8014194:	2000cc78 	.word	0x2000cc78
 8014198:	2000cc60 	.word	0x2000cc60
 801419c:	2000caf8 	.word	0x2000caf8
 80141a0:	2000caf4 	.word	0x2000caf4
 80141a4:	2000cc68 	.word	0x2000cc68
 80141a8:	2000cc6c 	.word	0x2000cc6c

080141ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b088      	sub	sp, #32
 80141b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80141b2:	4b47      	ldr	r3, [pc, #284]	@ (80142d0 <vTaskSwitchContext+0x124>)
 80141b4:	681b      	ldr	r3, [r3, #0]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d003      	beq.n	80141c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141ba:	4b46      	ldr	r3, [pc, #280]	@ (80142d4 <vTaskSwitchContext+0x128>)
 80141bc:	2201      	movs	r2, #1
 80141be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141c0:	e082      	b.n	80142c8 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 80141c2:	4b44      	ldr	r3, [pc, #272]	@ (80142d4 <vTaskSwitchContext+0x128>)
 80141c4:	2200      	movs	r2, #0
 80141c6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80141c8:	f7f0 fe9b 	bl	8004f02 <getRunTimeCounterValue>
 80141cc:	4603      	mov	r3, r0
 80141ce:	4a42      	ldr	r2, [pc, #264]	@ (80142d8 <vTaskSwitchContext+0x12c>)
 80141d0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80141d2:	4b41      	ldr	r3, [pc, #260]	@ (80142d8 <vTaskSwitchContext+0x12c>)
 80141d4:	681a      	ldr	r2, [r3, #0]
 80141d6:	4b41      	ldr	r3, [pc, #260]	@ (80142dc <vTaskSwitchContext+0x130>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d909      	bls.n	80141f2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80141de:	4b40      	ldr	r3, [pc, #256]	@ (80142e0 <vTaskSwitchContext+0x134>)
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80141e4:	4a3c      	ldr	r2, [pc, #240]	@ (80142d8 <vTaskSwitchContext+0x12c>)
 80141e6:	6810      	ldr	r0, [r2, #0]
 80141e8:	4a3c      	ldr	r2, [pc, #240]	@ (80142dc <vTaskSwitchContext+0x130>)
 80141ea:	6812      	ldr	r2, [r2, #0]
 80141ec:	1a82      	subs	r2, r0, r2
 80141ee:	440a      	add	r2, r1
 80141f0:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80141f2:	4b39      	ldr	r3, [pc, #228]	@ (80142d8 <vTaskSwitchContext+0x12c>)
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	4a39      	ldr	r2, [pc, #228]	@ (80142dc <vTaskSwitchContext+0x130>)
 80141f8:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80141fa:	4b39      	ldr	r3, [pc, #228]	@ (80142e0 <vTaskSwitchContext+0x134>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014200:	61fb      	str	r3, [r7, #28]
 8014202:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014206:	61bb      	str	r3, [r7, #24]
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	69ba      	ldr	r2, [r7, #24]
 801420e:	429a      	cmp	r2, r3
 8014210:	d111      	bne.n	8014236 <vTaskSwitchContext+0x8a>
 8014212:	69fb      	ldr	r3, [r7, #28]
 8014214:	3304      	adds	r3, #4
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	69ba      	ldr	r2, [r7, #24]
 801421a:	429a      	cmp	r2, r3
 801421c:	d10b      	bne.n	8014236 <vTaskSwitchContext+0x8a>
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	3308      	adds	r3, #8
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	69ba      	ldr	r2, [r7, #24]
 8014226:	429a      	cmp	r2, r3
 8014228:	d105      	bne.n	8014236 <vTaskSwitchContext+0x8a>
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	330c      	adds	r3, #12
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	69ba      	ldr	r2, [r7, #24]
 8014232:	429a      	cmp	r2, r3
 8014234:	d008      	beq.n	8014248 <vTaskSwitchContext+0x9c>
 8014236:	4b2a      	ldr	r3, [pc, #168]	@ (80142e0 <vTaskSwitchContext+0x134>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	4b29      	ldr	r3, [pc, #164]	@ (80142e0 <vTaskSwitchContext+0x134>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	3334      	adds	r3, #52	@ 0x34
 8014240:	4619      	mov	r1, r3
 8014242:	4610      	mov	r0, r2
 8014244:	f7f0 fe65 	bl	8004f12 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014248:	4b26      	ldr	r3, [pc, #152]	@ (80142e4 <vTaskSwitchContext+0x138>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	fab3 f383 	clz	r3, r3
 8014254:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014256:	7afb      	ldrb	r3, [r7, #11]
 8014258:	f1c3 031f 	rsb	r3, r3, #31
 801425c:	617b      	str	r3, [r7, #20]
 801425e:	4922      	ldr	r1, [pc, #136]	@ (80142e8 <vTaskSwitchContext+0x13c>)
 8014260:	697a      	ldr	r2, [r7, #20]
 8014262:	4613      	mov	r3, r2
 8014264:	009b      	lsls	r3, r3, #2
 8014266:	4413      	add	r3, r2
 8014268:	009b      	lsls	r3, r3, #2
 801426a:	440b      	add	r3, r1
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d10d      	bne.n	801428e <vTaskSwitchContext+0xe2>
	__asm volatile
 8014272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014276:	b672      	cpsid	i
 8014278:	f383 8811 	msr	BASEPRI, r3
 801427c:	f3bf 8f6f 	isb	sy
 8014280:	f3bf 8f4f 	dsb	sy
 8014284:	b662      	cpsie	i
 8014286:	607b      	str	r3, [r7, #4]
}
 8014288:	bf00      	nop
 801428a:	bf00      	nop
 801428c:	e7fd      	b.n	801428a <vTaskSwitchContext+0xde>
 801428e:	697a      	ldr	r2, [r7, #20]
 8014290:	4613      	mov	r3, r2
 8014292:	009b      	lsls	r3, r3, #2
 8014294:	4413      	add	r3, r2
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4a13      	ldr	r2, [pc, #76]	@ (80142e8 <vTaskSwitchContext+0x13c>)
 801429a:	4413      	add	r3, r2
 801429c:	613b      	str	r3, [r7, #16]
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	685b      	ldr	r3, [r3, #4]
 80142a2:	685a      	ldr	r2, [r3, #4]
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	605a      	str	r2, [r3, #4]
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	685a      	ldr	r2, [r3, #4]
 80142ac:	693b      	ldr	r3, [r7, #16]
 80142ae:	3308      	adds	r3, #8
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d104      	bne.n	80142be <vTaskSwitchContext+0x112>
 80142b4:	693b      	ldr	r3, [r7, #16]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	685a      	ldr	r2, [r3, #4]
 80142ba:	693b      	ldr	r3, [r7, #16]
 80142bc:	605a      	str	r2, [r3, #4]
 80142be:	693b      	ldr	r3, [r7, #16]
 80142c0:	685b      	ldr	r3, [r3, #4]
 80142c2:	68db      	ldr	r3, [r3, #12]
 80142c4:	4a06      	ldr	r2, [pc, #24]	@ (80142e0 <vTaskSwitchContext+0x134>)
 80142c6:	6013      	str	r3, [r2, #0]
}
 80142c8:	bf00      	nop
 80142ca:	3720      	adds	r7, #32
 80142cc:	46bd      	mov	sp, r7
 80142ce:	bd80      	pop	{r7, pc}
 80142d0:	2000cc80 	.word	0x2000cc80
 80142d4:	2000cc6c 	.word	0x2000cc6c
 80142d8:	2000cc88 	.word	0x2000cc88
 80142dc:	2000cc84 	.word	0x2000cc84
 80142e0:	2000caf4 	.word	0x2000caf4
 80142e4:	2000cc60 	.word	0x2000cc60
 80142e8:	2000caf8 	.word	0x2000caf8

080142ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d10d      	bne.n	8014318 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80142fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014300:	b672      	cpsid	i
 8014302:	f383 8811 	msr	BASEPRI, r3
 8014306:	f3bf 8f6f 	isb	sy
 801430a:	f3bf 8f4f 	dsb	sy
 801430e:	b662      	cpsie	i
 8014310:	60fb      	str	r3, [r7, #12]
}
 8014312:	bf00      	nop
 8014314:	bf00      	nop
 8014316:	e7fd      	b.n	8014314 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014318:	4b07      	ldr	r3, [pc, #28]	@ (8014338 <vTaskPlaceOnEventList+0x4c>)
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	3318      	adds	r3, #24
 801431e:	4619      	mov	r1, r3
 8014320:	6878      	ldr	r0, [r7, #4]
 8014322:	f7fe fbea 	bl	8012afa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014326:	2101      	movs	r1, #1
 8014328:	6838      	ldr	r0, [r7, #0]
 801432a:	f000 fc6f 	bl	8014c0c <prvAddCurrentTaskToDelayedList>
}
 801432e:	bf00      	nop
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	2000caf4 	.word	0x2000caf4

0801433c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b086      	sub	sp, #24
 8014340:	af00      	add	r7, sp, #0
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	60b9      	str	r1, [r7, #8]
 8014346:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d10d      	bne.n	801436a <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 801434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014352:	b672      	cpsid	i
 8014354:	f383 8811 	msr	BASEPRI, r3
 8014358:	f3bf 8f6f 	isb	sy
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	b662      	cpsie	i
 8014362:	617b      	str	r3, [r7, #20]
}
 8014364:	bf00      	nop
 8014366:	bf00      	nop
 8014368:	e7fd      	b.n	8014366 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801436a:	4b13      	ldr	r3, [pc, #76]	@ (80143b8 <vTaskPlaceOnUnorderedEventList+0x7c>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d10d      	bne.n	801438e <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 8014372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014376:	b672      	cpsid	i
 8014378:	f383 8811 	msr	BASEPRI, r3
 801437c:	f3bf 8f6f 	isb	sy
 8014380:	f3bf 8f4f 	dsb	sy
 8014384:	b662      	cpsie	i
 8014386:	613b      	str	r3, [r7, #16]
}
 8014388:	bf00      	nop
 801438a:	bf00      	nop
 801438c:	e7fd      	b.n	801438a <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801438e:	4b0b      	ldr	r3, [pc, #44]	@ (80143bc <vTaskPlaceOnUnorderedEventList+0x80>)
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	68ba      	ldr	r2, [r7, #8]
 8014394:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8014398:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801439a:	4b08      	ldr	r3, [pc, #32]	@ (80143bc <vTaskPlaceOnUnorderedEventList+0x80>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	3318      	adds	r3, #24
 80143a0:	4619      	mov	r1, r3
 80143a2:	68f8      	ldr	r0, [r7, #12]
 80143a4:	f7fe fb85 	bl	8012ab2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80143a8:	2101      	movs	r1, #1
 80143aa:	6878      	ldr	r0, [r7, #4]
 80143ac:	f000 fc2e 	bl	8014c0c <prvAddCurrentTaskToDelayedList>
}
 80143b0:	bf00      	nop
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}
 80143b8:	2000cc80 	.word	0x2000cc80
 80143bc:	2000caf4 	.word	0x2000caf4

080143c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80143c0:	b580      	push	{r7, lr}
 80143c2:	b086      	sub	sp, #24
 80143c4:	af00      	add	r7, sp, #0
 80143c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	68db      	ldr	r3, [r3, #12]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d10d      	bne.n	80143f2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80143d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143da:	b672      	cpsid	i
 80143dc:	f383 8811 	msr	BASEPRI, r3
 80143e0:	f3bf 8f6f 	isb	sy
 80143e4:	f3bf 8f4f 	dsb	sy
 80143e8:	b662      	cpsie	i
 80143ea:	60fb      	str	r3, [r7, #12]
}
 80143ec:	bf00      	nop
 80143ee:	bf00      	nop
 80143f0:	e7fd      	b.n	80143ee <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80143f2:	693b      	ldr	r3, [r7, #16]
 80143f4:	3318      	adds	r3, #24
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7fe fbb8 	bl	8012b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143fc:	4b1d      	ldr	r3, [pc, #116]	@ (8014474 <xTaskRemoveFromEventList+0xb4>)
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d11c      	bne.n	801443e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	3304      	adds	r3, #4
 8014408:	4618      	mov	r0, r3
 801440a:	f7fe fbaf 	bl	8012b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801440e:	693b      	ldr	r3, [r7, #16]
 8014410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014412:	2201      	movs	r2, #1
 8014414:	409a      	lsls	r2, r3
 8014416:	4b18      	ldr	r3, [pc, #96]	@ (8014478 <xTaskRemoveFromEventList+0xb8>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	4313      	orrs	r3, r2
 801441c:	4a16      	ldr	r2, [pc, #88]	@ (8014478 <xTaskRemoveFromEventList+0xb8>)
 801441e:	6013      	str	r3, [r2, #0]
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014424:	4613      	mov	r3, r2
 8014426:	009b      	lsls	r3, r3, #2
 8014428:	4413      	add	r3, r2
 801442a:	009b      	lsls	r3, r3, #2
 801442c:	4a13      	ldr	r2, [pc, #76]	@ (801447c <xTaskRemoveFromEventList+0xbc>)
 801442e:	441a      	add	r2, r3
 8014430:	693b      	ldr	r3, [r7, #16]
 8014432:	3304      	adds	r3, #4
 8014434:	4619      	mov	r1, r3
 8014436:	4610      	mov	r0, r2
 8014438:	f7fe fb3b 	bl	8012ab2 <vListInsertEnd>
 801443c:	e005      	b.n	801444a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	3318      	adds	r3, #24
 8014442:	4619      	mov	r1, r3
 8014444:	480e      	ldr	r0, [pc, #56]	@ (8014480 <xTaskRemoveFromEventList+0xc0>)
 8014446:	f7fe fb34 	bl	8012ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801444a:	693b      	ldr	r3, [r7, #16]
 801444c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801444e:	4b0d      	ldr	r3, [pc, #52]	@ (8014484 <xTaskRemoveFromEventList+0xc4>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014454:	429a      	cmp	r2, r3
 8014456:	d905      	bls.n	8014464 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014458:	2301      	movs	r3, #1
 801445a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801445c:	4b0a      	ldr	r3, [pc, #40]	@ (8014488 <xTaskRemoveFromEventList+0xc8>)
 801445e:	2201      	movs	r2, #1
 8014460:	601a      	str	r2, [r3, #0]
 8014462:	e001      	b.n	8014468 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014464:	2300      	movs	r3, #0
 8014466:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014468:	697b      	ldr	r3, [r7, #20]
}
 801446a:	4618      	mov	r0, r3
 801446c:	3718      	adds	r7, #24
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop
 8014474:	2000cc80 	.word	0x2000cc80
 8014478:	2000cc60 	.word	0x2000cc60
 801447c:	2000caf8 	.word	0x2000caf8
 8014480:	2000cc18 	.word	0x2000cc18
 8014484:	2000caf4 	.word	0x2000caf4
 8014488:	2000cc6c 	.word	0x2000cc6c

0801448c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
 8014494:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014496:	4b2c      	ldr	r3, [pc, #176]	@ (8014548 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d10d      	bne.n	80144ba <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 801449e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144a2:	b672      	cpsid	i
 80144a4:	f383 8811 	msr	BASEPRI, r3
 80144a8:	f3bf 8f6f 	isb	sy
 80144ac:	f3bf 8f4f 	dsb	sy
 80144b0:	b662      	cpsie	i
 80144b2:	613b      	str	r3, [r7, #16]
}
 80144b4:	bf00      	nop
 80144b6:	bf00      	nop
 80144b8:	e7fd      	b.n	80144b6 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d10d      	bne.n	80144ec <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 80144d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144d4:	b672      	cpsid	i
 80144d6:	f383 8811 	msr	BASEPRI, r3
 80144da:	f3bf 8f6f 	isb	sy
 80144de:	f3bf 8f4f 	dsb	sy
 80144e2:	b662      	cpsie	i
 80144e4:	60fb      	str	r3, [r7, #12]
}
 80144e6:	bf00      	nop
 80144e8:	bf00      	nop
 80144ea:	e7fd      	b.n	80144e8 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 80144ec:	6878      	ldr	r0, [r7, #4]
 80144ee:	f7fe fb3d 	bl	8012b6c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	3304      	adds	r3, #4
 80144f6:	4618      	mov	r0, r3
 80144f8:	f7fe fb38 	bl	8012b6c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014500:	2201      	movs	r2, #1
 8014502:	409a      	lsls	r2, r3
 8014504:	4b11      	ldr	r3, [pc, #68]	@ (801454c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4313      	orrs	r3, r2
 801450a:	4a10      	ldr	r2, [pc, #64]	@ (801454c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801450c:	6013      	str	r3, [r2, #0]
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014512:	4613      	mov	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4413      	add	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4a0d      	ldr	r2, [pc, #52]	@ (8014550 <vTaskRemoveFromUnorderedEventList+0xc4>)
 801451c:	441a      	add	r2, r3
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	3304      	adds	r3, #4
 8014522:	4619      	mov	r1, r3
 8014524:	4610      	mov	r0, r2
 8014526:	f7fe fac4 	bl	8012ab2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801452a:	697b      	ldr	r3, [r7, #20]
 801452c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801452e:	4b09      	ldr	r3, [pc, #36]	@ (8014554 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014534:	429a      	cmp	r2, r3
 8014536:	d902      	bls.n	801453e <vTaskRemoveFromUnorderedEventList+0xb2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014538:	4b07      	ldr	r3, [pc, #28]	@ (8014558 <vTaskRemoveFromUnorderedEventList+0xcc>)
 801453a:	2201      	movs	r2, #1
 801453c:	601a      	str	r2, [r3, #0]
	}
}
 801453e:	bf00      	nop
 8014540:	3718      	adds	r7, #24
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	2000cc80 	.word	0x2000cc80
 801454c:	2000cc60 	.word	0x2000cc60
 8014550:	2000caf8 	.word	0x2000caf8
 8014554:	2000caf4 	.word	0x2000caf4
 8014558:	2000cc6c 	.word	0x2000cc6c

0801455c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014564:	4b06      	ldr	r3, [pc, #24]	@ (8014580 <vTaskInternalSetTimeOutState+0x24>)
 8014566:	681a      	ldr	r2, [r3, #0]
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801456c:	4b05      	ldr	r3, [pc, #20]	@ (8014584 <vTaskInternalSetTimeOutState+0x28>)
 801456e:	681a      	ldr	r2, [r3, #0]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	605a      	str	r2, [r3, #4]
}
 8014574:	bf00      	nop
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr
 8014580:	2000cc70 	.word	0x2000cc70
 8014584:	2000cc5c 	.word	0x2000cc5c

08014588 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b088      	sub	sp, #32
 801458c:	af00      	add	r7, sp, #0
 801458e:	6078      	str	r0, [r7, #4]
 8014590:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d10d      	bne.n	80145b4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8014598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801459c:	b672      	cpsid	i
 801459e:	f383 8811 	msr	BASEPRI, r3
 80145a2:	f3bf 8f6f 	isb	sy
 80145a6:	f3bf 8f4f 	dsb	sy
 80145aa:	b662      	cpsie	i
 80145ac:	613b      	str	r3, [r7, #16]
}
 80145ae:	bf00      	nop
 80145b0:	bf00      	nop
 80145b2:	e7fd      	b.n	80145b0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80145b4:	683b      	ldr	r3, [r7, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d10d      	bne.n	80145d6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80145ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145be:	b672      	cpsid	i
 80145c0:	f383 8811 	msr	BASEPRI, r3
 80145c4:	f3bf 8f6f 	isb	sy
 80145c8:	f3bf 8f4f 	dsb	sy
 80145cc:	b662      	cpsie	i
 80145ce:	60fb      	str	r3, [r7, #12]
}
 80145d0:	bf00      	nop
 80145d2:	bf00      	nop
 80145d4:	e7fd      	b.n	80145d2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80145d6:	f000 fc91 	bl	8014efc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80145da:	4b1d      	ldr	r3, [pc, #116]	@ (8014650 <xTaskCheckForTimeOut+0xc8>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	685b      	ldr	r3, [r3, #4]
 80145e4:	69ba      	ldr	r2, [r7, #24]
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80145f2:	d102      	bne.n	80145fa <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80145f4:	2300      	movs	r3, #0
 80145f6:	61fb      	str	r3, [r7, #28]
 80145f8:	e023      	b.n	8014642 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681a      	ldr	r2, [r3, #0]
 80145fe:	4b15      	ldr	r3, [pc, #84]	@ (8014654 <xTaskCheckForTimeOut+0xcc>)
 8014600:	681b      	ldr	r3, [r3, #0]
 8014602:	429a      	cmp	r2, r3
 8014604:	d007      	beq.n	8014616 <xTaskCheckForTimeOut+0x8e>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	69ba      	ldr	r2, [r7, #24]
 801460c:	429a      	cmp	r2, r3
 801460e:	d302      	bcc.n	8014616 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014610:	2301      	movs	r3, #1
 8014612:	61fb      	str	r3, [r7, #28]
 8014614:	e015      	b.n	8014642 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	697a      	ldr	r2, [r7, #20]
 801461c:	429a      	cmp	r2, r3
 801461e:	d20b      	bcs.n	8014638 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	681a      	ldr	r2, [r3, #0]
 8014624:	697b      	ldr	r3, [r7, #20]
 8014626:	1ad2      	subs	r2, r2, r3
 8014628:	683b      	ldr	r3, [r7, #0]
 801462a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f7ff ff95 	bl	801455c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014632:	2300      	movs	r3, #0
 8014634:	61fb      	str	r3, [r7, #28]
 8014636:	e004      	b.n	8014642 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	2200      	movs	r2, #0
 801463c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801463e:	2301      	movs	r3, #1
 8014640:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014642:	f000 fc91 	bl	8014f68 <vPortExitCritical>

	return xReturn;
 8014646:	69fb      	ldr	r3, [r7, #28]
}
 8014648:	4618      	mov	r0, r3
 801464a:	3720      	adds	r7, #32
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	2000cc5c 	.word	0x2000cc5c
 8014654:	2000cc70 	.word	0x2000cc70

08014658 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014658:	b480      	push	{r7}
 801465a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801465c:	4b03      	ldr	r3, [pc, #12]	@ (801466c <vTaskMissedYield+0x14>)
 801465e:	2201      	movs	r2, #1
 8014660:	601a      	str	r2, [r3, #0]
}
 8014662:	bf00      	nop
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr
 801466c:	2000cc6c 	.word	0x2000cc6c

08014670 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014670:	b580      	push	{r7, lr}
 8014672:	b082      	sub	sp, #8
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014678:	f000 f852 	bl	8014720 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801467c:	4b06      	ldr	r3, [pc, #24]	@ (8014698 <prvIdleTask+0x28>)
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b01      	cmp	r3, #1
 8014682:	d9f9      	bls.n	8014678 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014684:	4b05      	ldr	r3, [pc, #20]	@ (801469c <prvIdleTask+0x2c>)
 8014686:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801468a:	601a      	str	r2, [r3, #0]
 801468c:	f3bf 8f4f 	dsb	sy
 8014690:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014694:	e7f0      	b.n	8014678 <prvIdleTask+0x8>
 8014696:	bf00      	nop
 8014698:	2000caf8 	.word	0x2000caf8
 801469c:	e000ed04 	.word	0xe000ed04

080146a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80146a0:	b580      	push	{r7, lr}
 80146a2:	b082      	sub	sp, #8
 80146a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80146a6:	2300      	movs	r3, #0
 80146a8:	607b      	str	r3, [r7, #4]
 80146aa:	e00c      	b.n	80146c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	4613      	mov	r3, r2
 80146b0:	009b      	lsls	r3, r3, #2
 80146b2:	4413      	add	r3, r2
 80146b4:	009b      	lsls	r3, r3, #2
 80146b6:	4a12      	ldr	r2, [pc, #72]	@ (8014700 <prvInitialiseTaskLists+0x60>)
 80146b8:	4413      	add	r3, r2
 80146ba:	4618      	mov	r0, r3
 80146bc:	f7fe f9cc 	bl	8012a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	3301      	adds	r3, #1
 80146c4:	607b      	str	r3, [r7, #4]
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2b0b      	cmp	r3, #11
 80146ca:	d9ef      	bls.n	80146ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80146cc:	480d      	ldr	r0, [pc, #52]	@ (8014704 <prvInitialiseTaskLists+0x64>)
 80146ce:	f7fe f9c3 	bl	8012a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80146d2:	480d      	ldr	r0, [pc, #52]	@ (8014708 <prvInitialiseTaskLists+0x68>)
 80146d4:	f7fe f9c0 	bl	8012a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80146d8:	480c      	ldr	r0, [pc, #48]	@ (801470c <prvInitialiseTaskLists+0x6c>)
 80146da:	f7fe f9bd 	bl	8012a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80146de:	480c      	ldr	r0, [pc, #48]	@ (8014710 <prvInitialiseTaskLists+0x70>)
 80146e0:	f7fe f9ba 	bl	8012a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80146e4:	480b      	ldr	r0, [pc, #44]	@ (8014714 <prvInitialiseTaskLists+0x74>)
 80146e6:	f7fe f9b7 	bl	8012a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80146ea:	4b0b      	ldr	r3, [pc, #44]	@ (8014718 <prvInitialiseTaskLists+0x78>)
 80146ec:	4a05      	ldr	r2, [pc, #20]	@ (8014704 <prvInitialiseTaskLists+0x64>)
 80146ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80146f0:	4b0a      	ldr	r3, [pc, #40]	@ (801471c <prvInitialiseTaskLists+0x7c>)
 80146f2:	4a05      	ldr	r2, [pc, #20]	@ (8014708 <prvInitialiseTaskLists+0x68>)
 80146f4:	601a      	str	r2, [r3, #0]
}
 80146f6:	bf00      	nop
 80146f8:	3708      	adds	r7, #8
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}
 80146fe:	bf00      	nop
 8014700:	2000caf8 	.word	0x2000caf8
 8014704:	2000cbe8 	.word	0x2000cbe8
 8014708:	2000cbfc 	.word	0x2000cbfc
 801470c:	2000cc18 	.word	0x2000cc18
 8014710:	2000cc2c 	.word	0x2000cc2c
 8014714:	2000cc44 	.word	0x2000cc44
 8014718:	2000cc10 	.word	0x2000cc10
 801471c:	2000cc14 	.word	0x2000cc14

08014720 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b082      	sub	sp, #8
 8014724:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014726:	e019      	b.n	801475c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014728:	f000 fbe8 	bl	8014efc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801472c:	4b10      	ldr	r3, [pc, #64]	@ (8014770 <prvCheckTasksWaitingTermination+0x50>)
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	3304      	adds	r3, #4
 8014738:	4618      	mov	r0, r3
 801473a:	f7fe fa17 	bl	8012b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801473e:	4b0d      	ldr	r3, [pc, #52]	@ (8014774 <prvCheckTasksWaitingTermination+0x54>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	3b01      	subs	r3, #1
 8014744:	4a0b      	ldr	r2, [pc, #44]	@ (8014774 <prvCheckTasksWaitingTermination+0x54>)
 8014746:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014748:	4b0b      	ldr	r3, [pc, #44]	@ (8014778 <prvCheckTasksWaitingTermination+0x58>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	3b01      	subs	r3, #1
 801474e:	4a0a      	ldr	r2, [pc, #40]	@ (8014778 <prvCheckTasksWaitingTermination+0x58>)
 8014750:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014752:	f000 fc09 	bl	8014f68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f000 f810 	bl	801477c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801475c:	4b06      	ldr	r3, [pc, #24]	@ (8014778 <prvCheckTasksWaitingTermination+0x58>)
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d1e1      	bne.n	8014728 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014764:	bf00      	nop
 8014766:	bf00      	nop
 8014768:	3708      	adds	r7, #8
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	2000cc2c 	.word	0x2000cc2c
 8014774:	2000cc58 	.word	0x2000cc58
 8014778:	2000cc40 	.word	0x2000cc40

0801477c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801477c:	b580      	push	{r7, lr}
 801477e:	b084      	sub	sp, #16
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801478a:	2b00      	cmp	r3, #0
 801478c:	d108      	bne.n	80147a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014792:	4618      	mov	r0, r3
 8014794:	f000 fdae 	bl	80152f4 <vPortFree>
				vPortFree( pxTCB );
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 fdab 	bl	80152f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801479e:	e01b      	b.n	80147d8 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80147a6:	2b01      	cmp	r3, #1
 80147a8:	d103      	bne.n	80147b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f000 fda2 	bl	80152f4 <vPortFree>
	}
 80147b0:	e012      	b.n	80147d8 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80147b8:	2b02      	cmp	r3, #2
 80147ba:	d00d      	beq.n	80147d8 <prvDeleteTCB+0x5c>
	__asm volatile
 80147bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147c0:	b672      	cpsid	i
 80147c2:	f383 8811 	msr	BASEPRI, r3
 80147c6:	f3bf 8f6f 	isb	sy
 80147ca:	f3bf 8f4f 	dsb	sy
 80147ce:	b662      	cpsie	i
 80147d0:	60fb      	str	r3, [r7, #12]
}
 80147d2:	bf00      	nop
 80147d4:	bf00      	nop
 80147d6:	e7fd      	b.n	80147d4 <prvDeleteTCB+0x58>
	}
 80147d8:	bf00      	nop
 80147da:	3710      	adds	r7, #16
 80147dc:	46bd      	mov	sp, r7
 80147de:	bd80      	pop	{r7, pc}

080147e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147e6:	4b0c      	ldr	r3, [pc, #48]	@ (8014818 <prvResetNextTaskUnblockTime+0x38>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d104      	bne.n	80147fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80147f0:	4b0a      	ldr	r3, [pc, #40]	@ (801481c <prvResetNextTaskUnblockTime+0x3c>)
 80147f2:	f04f 32ff 	mov.w	r2, #4294967295
 80147f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80147f8:	e008      	b.n	801480c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147fa:	4b07      	ldr	r3, [pc, #28]	@ (8014818 <prvResetNextTaskUnblockTime+0x38>)
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	68db      	ldr	r3, [r3, #12]
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	4a04      	ldr	r2, [pc, #16]	@ (801481c <prvResetNextTaskUnblockTime+0x3c>)
 801480a:	6013      	str	r3, [r2, #0]
}
 801480c:	bf00      	nop
 801480e:	370c      	adds	r7, #12
 8014810:	46bd      	mov	sp, r7
 8014812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014816:	4770      	bx	lr
 8014818:	2000cc10 	.word	0x2000cc10
 801481c:	2000cc78 	.word	0x2000cc78

08014820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014826:	4b0b      	ldr	r3, [pc, #44]	@ (8014854 <xTaskGetSchedulerState+0x34>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d102      	bne.n	8014834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801482e:	2301      	movs	r3, #1
 8014830:	607b      	str	r3, [r7, #4]
 8014832:	e008      	b.n	8014846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014834:	4b08      	ldr	r3, [pc, #32]	@ (8014858 <xTaskGetSchedulerState+0x38>)
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d102      	bne.n	8014842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801483c:	2302      	movs	r3, #2
 801483e:	607b      	str	r3, [r7, #4]
 8014840:	e001      	b.n	8014846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014842:	2300      	movs	r3, #0
 8014844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014846:	687b      	ldr	r3, [r7, #4]
	}
 8014848:	4618      	mov	r0, r3
 801484a:	370c      	adds	r7, #12
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr
 8014854:	2000cc64 	.word	0x2000cc64
 8014858:	2000cc80 	.word	0x2000cc80

0801485c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801485c:	b580      	push	{r7, lr}
 801485e:	b084      	sub	sp, #16
 8014860:	af00      	add	r7, sp, #0
 8014862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014868:	2300      	movs	r3, #0
 801486a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d069      	beq.n	8014946 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014872:	68bb      	ldr	r3, [r7, #8]
 8014874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014876:	4b36      	ldr	r3, [pc, #216]	@ (8014950 <xTaskPriorityInherit+0xf4>)
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801487c:	429a      	cmp	r2, r3
 801487e:	d259      	bcs.n	8014934 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014880:	68bb      	ldr	r3, [r7, #8]
 8014882:	699b      	ldr	r3, [r3, #24]
 8014884:	2b00      	cmp	r3, #0
 8014886:	db06      	blt.n	8014896 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014888:	4b31      	ldr	r3, [pc, #196]	@ (8014950 <xTaskPriorityInherit+0xf4>)
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801488e:	f1c3 020c 	rsb	r2, r3, #12
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014896:	68bb      	ldr	r3, [r7, #8]
 8014898:	6959      	ldr	r1, [r3, #20]
 801489a:	68bb      	ldr	r3, [r7, #8]
 801489c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801489e:	4613      	mov	r3, r2
 80148a0:	009b      	lsls	r3, r3, #2
 80148a2:	4413      	add	r3, r2
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	4a2b      	ldr	r2, [pc, #172]	@ (8014954 <xTaskPriorityInherit+0xf8>)
 80148a8:	4413      	add	r3, r2
 80148aa:	4299      	cmp	r1, r3
 80148ac:	d13a      	bne.n	8014924 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80148ae:	68bb      	ldr	r3, [r7, #8]
 80148b0:	3304      	adds	r3, #4
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe f95a 	bl	8012b6c <uxListRemove>
 80148b8:	4603      	mov	r3, r0
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d115      	bne.n	80148ea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148c2:	4924      	ldr	r1, [pc, #144]	@ (8014954 <xTaskPriorityInherit+0xf8>)
 80148c4:	4613      	mov	r3, r2
 80148c6:	009b      	lsls	r3, r3, #2
 80148c8:	4413      	add	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	440b      	add	r3, r1
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d10a      	bne.n	80148ea <xTaskPriorityInherit+0x8e>
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148d8:	2201      	movs	r2, #1
 80148da:	fa02 f303 	lsl.w	r3, r2, r3
 80148de:	43da      	mvns	r2, r3
 80148e0:	4b1d      	ldr	r3, [pc, #116]	@ (8014958 <xTaskPriorityInherit+0xfc>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	4013      	ands	r3, r2
 80148e6:	4a1c      	ldr	r2, [pc, #112]	@ (8014958 <xTaskPriorityInherit+0xfc>)
 80148e8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80148ea:	4b19      	ldr	r3, [pc, #100]	@ (8014950 <xTaskPriorityInherit+0xf4>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80148f0:	68bb      	ldr	r3, [r7, #8]
 80148f2:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148f8:	2201      	movs	r2, #1
 80148fa:	409a      	lsls	r2, r3
 80148fc:	4b16      	ldr	r3, [pc, #88]	@ (8014958 <xTaskPriorityInherit+0xfc>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	4313      	orrs	r3, r2
 8014902:	4a15      	ldr	r2, [pc, #84]	@ (8014958 <xTaskPriorityInherit+0xfc>)
 8014904:	6013      	str	r3, [r2, #0]
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801490a:	4613      	mov	r3, r2
 801490c:	009b      	lsls	r3, r3, #2
 801490e:	4413      	add	r3, r2
 8014910:	009b      	lsls	r3, r3, #2
 8014912:	4a10      	ldr	r2, [pc, #64]	@ (8014954 <xTaskPriorityInherit+0xf8>)
 8014914:	441a      	add	r2, r3
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	3304      	adds	r3, #4
 801491a:	4619      	mov	r1, r3
 801491c:	4610      	mov	r0, r2
 801491e:	f7fe f8c8 	bl	8012ab2 <vListInsertEnd>
 8014922:	e004      	b.n	801492e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014924:	4b0a      	ldr	r3, [pc, #40]	@ (8014950 <xTaskPriorityInherit+0xf4>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801492e:	2301      	movs	r3, #1
 8014930:	60fb      	str	r3, [r7, #12]
 8014932:	e008      	b.n	8014946 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014938:	4b05      	ldr	r3, [pc, #20]	@ (8014950 <xTaskPriorityInherit+0xf4>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801493e:	429a      	cmp	r2, r3
 8014940:	d201      	bcs.n	8014946 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014942:	2301      	movs	r3, #1
 8014944:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014946:	68fb      	ldr	r3, [r7, #12]
	}
 8014948:	4618      	mov	r0, r3
 801494a:	3710      	adds	r7, #16
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	2000caf4 	.word	0x2000caf4
 8014954:	2000caf8 	.word	0x2000caf8
 8014958:	2000cc60 	.word	0x2000cc60

0801495c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801495c:	b580      	push	{r7, lr}
 801495e:	b086      	sub	sp, #24
 8014960:	af00      	add	r7, sp, #0
 8014962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014968:	2300      	movs	r3, #0
 801496a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	2b00      	cmp	r3, #0
 8014970:	d074      	beq.n	8014a5c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014972:	4b3d      	ldr	r3, [pc, #244]	@ (8014a68 <xTaskPriorityDisinherit+0x10c>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	693a      	ldr	r2, [r7, #16]
 8014978:	429a      	cmp	r2, r3
 801497a:	d00d      	beq.n	8014998 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014980:	b672      	cpsid	i
 8014982:	f383 8811 	msr	BASEPRI, r3
 8014986:	f3bf 8f6f 	isb	sy
 801498a:	f3bf 8f4f 	dsb	sy
 801498e:	b662      	cpsie	i
 8014990:	60fb      	str	r3, [r7, #12]
}
 8014992:	bf00      	nop
 8014994:	bf00      	nop
 8014996:	e7fd      	b.n	8014994 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801499c:	2b00      	cmp	r3, #0
 801499e:	d10d      	bne.n	80149bc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80149a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80149a4:	b672      	cpsid	i
 80149a6:	f383 8811 	msr	BASEPRI, r3
 80149aa:	f3bf 8f6f 	isb	sy
 80149ae:	f3bf 8f4f 	dsb	sy
 80149b2:	b662      	cpsie	i
 80149b4:	60bb      	str	r3, [r7, #8]
}
 80149b6:	bf00      	nop
 80149b8:	bf00      	nop
 80149ba:	e7fd      	b.n	80149b8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149c0:	1e5a      	subs	r2, r3, #1
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d044      	beq.n	8014a5c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d140      	bne.n	8014a5c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	3304      	adds	r3, #4
 80149de:	4618      	mov	r0, r3
 80149e0:	f7fe f8c4 	bl	8012b6c <uxListRemove>
 80149e4:	4603      	mov	r3, r0
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d115      	bne.n	8014a16 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149ee:	491f      	ldr	r1, [pc, #124]	@ (8014a6c <xTaskPriorityDisinherit+0x110>)
 80149f0:	4613      	mov	r3, r2
 80149f2:	009b      	lsls	r3, r3, #2
 80149f4:	4413      	add	r3, r2
 80149f6:	009b      	lsls	r3, r3, #2
 80149f8:	440b      	add	r3, r1
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d10a      	bne.n	8014a16 <xTaskPriorityDisinherit+0xba>
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a04:	2201      	movs	r2, #1
 8014a06:	fa02 f303 	lsl.w	r3, r2, r3
 8014a0a:	43da      	mvns	r2, r3
 8014a0c:	4b18      	ldr	r3, [pc, #96]	@ (8014a70 <xTaskPriorityDisinherit+0x114>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4013      	ands	r3, r2
 8014a12:	4a17      	ldr	r2, [pc, #92]	@ (8014a70 <xTaskPriorityDisinherit+0x114>)
 8014a14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a22:	f1c3 020c 	rsb	r2, r3, #12
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a2e:	2201      	movs	r2, #1
 8014a30:	409a      	lsls	r2, r3
 8014a32:	4b0f      	ldr	r3, [pc, #60]	@ (8014a70 <xTaskPriorityDisinherit+0x114>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4313      	orrs	r3, r2
 8014a38:	4a0d      	ldr	r2, [pc, #52]	@ (8014a70 <xTaskPriorityDisinherit+0x114>)
 8014a3a:	6013      	str	r3, [r2, #0]
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014a40:	4613      	mov	r3, r2
 8014a42:	009b      	lsls	r3, r3, #2
 8014a44:	4413      	add	r3, r2
 8014a46:	009b      	lsls	r3, r3, #2
 8014a48:	4a08      	ldr	r2, [pc, #32]	@ (8014a6c <xTaskPriorityDisinherit+0x110>)
 8014a4a:	441a      	add	r2, r3
 8014a4c:	693b      	ldr	r3, [r7, #16]
 8014a4e:	3304      	adds	r3, #4
 8014a50:	4619      	mov	r1, r3
 8014a52:	4610      	mov	r0, r2
 8014a54:	f7fe f82d 	bl	8012ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014a58:	2301      	movs	r3, #1
 8014a5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014a5c:	697b      	ldr	r3, [r7, #20]
	}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	2000caf4 	.word	0x2000caf4
 8014a6c:	2000caf8 	.word	0x2000caf8
 8014a70:	2000cc60 	.word	0x2000cc60

08014a74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014a74:	b580      	push	{r7, lr}
 8014a76:	b088      	sub	sp, #32
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8014a82:	2301      	movs	r3, #1
 8014a84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	f000 8089 	beq.w	8014ba0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014a8e:	69bb      	ldr	r3, [r7, #24]
 8014a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10d      	bne.n	8014ab2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8014a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a9a:	b672      	cpsid	i
 8014a9c:	f383 8811 	msr	BASEPRI, r3
 8014aa0:	f3bf 8f6f 	isb	sy
 8014aa4:	f3bf 8f4f 	dsb	sy
 8014aa8:	b662      	cpsie	i
 8014aaa:	60fb      	str	r3, [r7, #12]
}
 8014aac:	bf00      	nop
 8014aae:	bf00      	nop
 8014ab0:	e7fd      	b.n	8014aae <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014ab2:	69bb      	ldr	r3, [r7, #24]
 8014ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ab6:	683a      	ldr	r2, [r7, #0]
 8014ab8:	429a      	cmp	r2, r3
 8014aba:	d902      	bls.n	8014ac2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	61fb      	str	r3, [r7, #28]
 8014ac0:	e002      	b.n	8014ac8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8014ac2:	69bb      	ldr	r3, [r7, #24]
 8014ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014ac6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014ac8:	69bb      	ldr	r3, [r7, #24]
 8014aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014acc:	69fa      	ldr	r2, [r7, #28]
 8014ace:	429a      	cmp	r2, r3
 8014ad0:	d066      	beq.n	8014ba0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ad6:	697a      	ldr	r2, [r7, #20]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d161      	bne.n	8014ba0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8014adc:	4b32      	ldr	r3, [pc, #200]	@ (8014ba8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	69ba      	ldr	r2, [r7, #24]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d10d      	bne.n	8014b02 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8014ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014aea:	b672      	cpsid	i
 8014aec:	f383 8811 	msr	BASEPRI, r3
 8014af0:	f3bf 8f6f 	isb	sy
 8014af4:	f3bf 8f4f 	dsb	sy
 8014af8:	b662      	cpsie	i
 8014afa:	60bb      	str	r3, [r7, #8]
}
 8014afc:	bf00      	nop
 8014afe:	bf00      	nop
 8014b00:	e7fd      	b.n	8014afe <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b06:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	69fa      	ldr	r2, [r7, #28]
 8014b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014b0e:	69bb      	ldr	r3, [r7, #24]
 8014b10:	699b      	ldr	r3, [r3, #24]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	db04      	blt.n	8014b20 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014b16:	69fb      	ldr	r3, [r7, #28]
 8014b18:	f1c3 020c 	rsb	r2, r3, #12
 8014b1c:	69bb      	ldr	r3, [r7, #24]
 8014b1e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014b20:	69bb      	ldr	r3, [r7, #24]
 8014b22:	6959      	ldr	r1, [r3, #20]
 8014b24:	693a      	ldr	r2, [r7, #16]
 8014b26:	4613      	mov	r3, r2
 8014b28:	009b      	lsls	r3, r3, #2
 8014b2a:	4413      	add	r3, r2
 8014b2c:	009b      	lsls	r3, r3, #2
 8014b2e:	4a1f      	ldr	r2, [pc, #124]	@ (8014bac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014b30:	4413      	add	r3, r2
 8014b32:	4299      	cmp	r1, r3
 8014b34:	d134      	bne.n	8014ba0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014b36:	69bb      	ldr	r3, [r7, #24]
 8014b38:	3304      	adds	r3, #4
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fe f816 	bl	8012b6c <uxListRemove>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d115      	bne.n	8014b72 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014b46:	69bb      	ldr	r3, [r7, #24]
 8014b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b4a:	4918      	ldr	r1, [pc, #96]	@ (8014bac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014b4c:	4613      	mov	r3, r2
 8014b4e:	009b      	lsls	r3, r3, #2
 8014b50:	4413      	add	r3, r2
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	440b      	add	r3, r1
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d10a      	bne.n	8014b72 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8014b5c:	69bb      	ldr	r3, [r7, #24]
 8014b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b60:	2201      	movs	r2, #1
 8014b62:	fa02 f303 	lsl.w	r3, r2, r3
 8014b66:	43da      	mvns	r2, r3
 8014b68:	4b11      	ldr	r3, [pc, #68]	@ (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	4013      	ands	r3, r2
 8014b6e:	4a10      	ldr	r2, [pc, #64]	@ (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b70:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014b76:	2201      	movs	r2, #1
 8014b78:	409a      	lsls	r2, r3
 8014b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	4313      	orrs	r3, r2
 8014b80:	4a0b      	ldr	r2, [pc, #44]	@ (8014bb0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8014b82:	6013      	str	r3, [r2, #0]
 8014b84:	69bb      	ldr	r3, [r7, #24]
 8014b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014b88:	4613      	mov	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4413      	add	r3, r2
 8014b8e:	009b      	lsls	r3, r3, #2
 8014b90:	4a06      	ldr	r2, [pc, #24]	@ (8014bac <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014b92:	441a      	add	r2, r3
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	3304      	adds	r3, #4
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	f7fd ff89 	bl	8012ab2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014ba0:	bf00      	nop
 8014ba2:	3720      	adds	r7, #32
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd80      	pop	{r7, pc}
 8014ba8:	2000caf4 	.word	0x2000caf4
 8014bac:	2000caf8 	.word	0x2000caf8
 8014bb0:	2000cc60 	.word	0x2000cc60

08014bb4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8014bba:	4b09      	ldr	r3, [pc, #36]	@ (8014be0 <uxTaskResetEventItemValue+0x2c>)
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	699b      	ldr	r3, [r3, #24]
 8014bc0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bc2:	4b07      	ldr	r3, [pc, #28]	@ (8014be0 <uxTaskResetEventItemValue+0x2c>)
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014bc8:	4b05      	ldr	r3, [pc, #20]	@ (8014be0 <uxTaskResetEventItemValue+0x2c>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	f1c2 020c 	rsb	r2, r2, #12
 8014bd0:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014bd2:	687b      	ldr	r3, [r7, #4]
}
 8014bd4:	4618      	mov	r0, r3
 8014bd6:	370c      	adds	r7, #12
 8014bd8:	46bd      	mov	sp, r7
 8014bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bde:	4770      	bx	lr
 8014be0:	2000caf4 	.word	0x2000caf4

08014be4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014be4:	b480      	push	{r7}
 8014be6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014be8:	4b07      	ldr	r3, [pc, #28]	@ (8014c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d004      	beq.n	8014bfa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014bf0:	4b05      	ldr	r3, [pc, #20]	@ (8014c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014bf6:	3201      	adds	r2, #1
 8014bf8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014bfa:	4b03      	ldr	r3, [pc, #12]	@ (8014c08 <pvTaskIncrementMutexHeldCount+0x24>)
 8014bfc:	681b      	ldr	r3, [r3, #0]
	}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	46bd      	mov	sp, r7
 8014c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c06:	4770      	bx	lr
 8014c08:	2000caf4 	.word	0x2000caf4

08014c0c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014c16:	4b29      	ldr	r3, [pc, #164]	@ (8014cbc <prvAddCurrentTaskToDelayedList+0xb0>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014c1c:	4b28      	ldr	r3, [pc, #160]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	3304      	adds	r3, #4
 8014c22:	4618      	mov	r0, r3
 8014c24:	f7fd ffa2 	bl	8012b6c <uxListRemove>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d10b      	bne.n	8014c46 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014c2e:	4b24      	ldr	r3, [pc, #144]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014c34:	2201      	movs	r2, #1
 8014c36:	fa02 f303 	lsl.w	r3, r2, r3
 8014c3a:	43da      	mvns	r2, r3
 8014c3c:	4b21      	ldr	r3, [pc, #132]	@ (8014cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	4013      	ands	r3, r2
 8014c42:	4a20      	ldr	r2, [pc, #128]	@ (8014cc4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014c44:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c4c:	d10a      	bne.n	8014c64 <prvAddCurrentTaskToDelayedList+0x58>
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d007      	beq.n	8014c64 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c54:	4b1a      	ldr	r3, [pc, #104]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	3304      	adds	r3, #4
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	481a      	ldr	r0, [pc, #104]	@ (8014cc8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014c5e:	f7fd ff28 	bl	8012ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014c62:	e026      	b.n	8014cb2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014c64:	68fa      	ldr	r2, [r7, #12]
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	4413      	add	r3, r2
 8014c6a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014c6c:	4b14      	ldr	r3, [pc, #80]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	68ba      	ldr	r2, [r7, #8]
 8014c72:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014c74:	68ba      	ldr	r2, [r7, #8]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	d209      	bcs.n	8014c90 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c7c:	4b13      	ldr	r3, [pc, #76]	@ (8014ccc <prvAddCurrentTaskToDelayedList+0xc0>)
 8014c7e:	681a      	ldr	r2, [r3, #0]
 8014c80:	4b0f      	ldr	r3, [pc, #60]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c82:	681b      	ldr	r3, [r3, #0]
 8014c84:	3304      	adds	r3, #4
 8014c86:	4619      	mov	r1, r3
 8014c88:	4610      	mov	r0, r2
 8014c8a:	f7fd ff36 	bl	8012afa <vListInsert>
}
 8014c8e:	e010      	b.n	8014cb2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014c90:	4b0f      	ldr	r3, [pc, #60]	@ (8014cd0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014c92:	681a      	ldr	r2, [r3, #0]
 8014c94:	4b0a      	ldr	r3, [pc, #40]	@ (8014cc0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	3304      	adds	r3, #4
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	f7fd ff2c 	bl	8012afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8014cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	68ba      	ldr	r2, [r7, #8]
 8014ca8:	429a      	cmp	r2, r3
 8014caa:	d202      	bcs.n	8014cb2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014cac:	4a09      	ldr	r2, [pc, #36]	@ (8014cd4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014cae:	68bb      	ldr	r3, [r7, #8]
 8014cb0:	6013      	str	r3, [r2, #0]
}
 8014cb2:	bf00      	nop
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	2000cc5c 	.word	0x2000cc5c
 8014cc0:	2000caf4 	.word	0x2000caf4
 8014cc4:	2000cc60 	.word	0x2000cc60
 8014cc8:	2000cc44 	.word	0x2000cc44
 8014ccc:	2000cc14 	.word	0x2000cc14
 8014cd0:	2000cc10 	.word	0x2000cc10
 8014cd4:	2000cc78 	.word	0x2000cc78

08014cd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	3b04      	subs	r3, #4
 8014ce8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	3b04      	subs	r3, #4
 8014cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	f023 0201 	bic.w	r2, r3, #1
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	3b04      	subs	r3, #4
 8014d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014d08:	4a0c      	ldr	r2, [pc, #48]	@ (8014d3c <pxPortInitialiseStack+0x64>)
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	3b14      	subs	r3, #20
 8014d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014d14:	687a      	ldr	r2, [r7, #4]
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	3b04      	subs	r3, #4
 8014d1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	f06f 0202 	mvn.w	r2, #2
 8014d26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	3b20      	subs	r3, #32
 8014d2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3714      	adds	r7, #20
 8014d34:	46bd      	mov	sp, r7
 8014d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3a:	4770      	bx	lr
 8014d3c:	08014d41 	.word	0x08014d41

08014d40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014d40:	b480      	push	{r7}
 8014d42:	b085      	sub	sp, #20
 8014d44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014d46:	2300      	movs	r3, #0
 8014d48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014d4a:	4b15      	ldr	r3, [pc, #84]	@ (8014da0 <prvTaskExitError+0x60>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014d52:	d00d      	beq.n	8014d70 <prvTaskExitError+0x30>
	__asm volatile
 8014d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d58:	b672      	cpsid	i
 8014d5a:	f383 8811 	msr	BASEPRI, r3
 8014d5e:	f3bf 8f6f 	isb	sy
 8014d62:	f3bf 8f4f 	dsb	sy
 8014d66:	b662      	cpsie	i
 8014d68:	60fb      	str	r3, [r7, #12]
}
 8014d6a:	bf00      	nop
 8014d6c:	bf00      	nop
 8014d6e:	e7fd      	b.n	8014d6c <prvTaskExitError+0x2c>
	__asm volatile
 8014d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d74:	b672      	cpsid	i
 8014d76:	f383 8811 	msr	BASEPRI, r3
 8014d7a:	f3bf 8f6f 	isb	sy
 8014d7e:	f3bf 8f4f 	dsb	sy
 8014d82:	b662      	cpsie	i
 8014d84:	60bb      	str	r3, [r7, #8]
}
 8014d86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014d88:	bf00      	nop
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d0fc      	beq.n	8014d8a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014d90:	bf00      	nop
 8014d92:	bf00      	nop
 8014d94:	3714      	adds	r7, #20
 8014d96:	46bd      	mov	sp, r7
 8014d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9c:	4770      	bx	lr
 8014d9e:	bf00      	nop
 8014da0:	20000078 	.word	0x20000078
	...

08014db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014db0:	4b07      	ldr	r3, [pc, #28]	@ (8014dd0 <pxCurrentTCBConst2>)
 8014db2:	6819      	ldr	r1, [r3, #0]
 8014db4:	6808      	ldr	r0, [r1, #0]
 8014db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dba:	f380 8809 	msr	PSP, r0
 8014dbe:	f3bf 8f6f 	isb	sy
 8014dc2:	f04f 0000 	mov.w	r0, #0
 8014dc6:	f380 8811 	msr	BASEPRI, r0
 8014dca:	4770      	bx	lr
 8014dcc:	f3af 8000 	nop.w

08014dd0 <pxCurrentTCBConst2>:
 8014dd0:	2000caf4 	.word	0x2000caf4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014dd4:	bf00      	nop
 8014dd6:	bf00      	nop

08014dd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014dd8:	4808      	ldr	r0, [pc, #32]	@ (8014dfc <prvPortStartFirstTask+0x24>)
 8014dda:	6800      	ldr	r0, [r0, #0]
 8014ddc:	6800      	ldr	r0, [r0, #0]
 8014dde:	f380 8808 	msr	MSP, r0
 8014de2:	f04f 0000 	mov.w	r0, #0
 8014de6:	f380 8814 	msr	CONTROL, r0
 8014dea:	b662      	cpsie	i
 8014dec:	b661      	cpsie	f
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	f3bf 8f6f 	isb	sy
 8014df6:	df00      	svc	0
 8014df8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014dfa:	bf00      	nop
 8014dfc:	e000ed08 	.word	0xe000ed08

08014e00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b084      	sub	sp, #16
 8014e04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014e06:	4b37      	ldr	r3, [pc, #220]	@ (8014ee4 <xPortStartScheduler+0xe4>)
 8014e08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	22ff      	movs	r2, #255	@ 0xff
 8014e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	781b      	ldrb	r3, [r3, #0]
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014e20:	78fb      	ldrb	r3, [r7, #3]
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014e28:	b2da      	uxtb	r2, r3
 8014e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8014ee8 <xPortStartScheduler+0xe8>)
 8014e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e30:	2207      	movs	r2, #7
 8014e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e34:	e009      	b.n	8014e4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014e36:	4b2d      	ldr	r3, [pc, #180]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	3b01      	subs	r3, #1
 8014e3c:	4a2b      	ldr	r2, [pc, #172]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014e40:	78fb      	ldrb	r3, [r7, #3]
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	005b      	lsls	r3, r3, #1
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014e4a:	78fb      	ldrb	r3, [r7, #3]
 8014e4c:	b2db      	uxtb	r3, r3
 8014e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014e52:	2b80      	cmp	r3, #128	@ 0x80
 8014e54:	d0ef      	beq.n	8014e36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014e56:	4b25      	ldr	r3, [pc, #148]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	f1c3 0307 	rsb	r3, r3, #7
 8014e5e:	2b04      	cmp	r3, #4
 8014e60:	d00d      	beq.n	8014e7e <xPortStartScheduler+0x7e>
	__asm volatile
 8014e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e66:	b672      	cpsid	i
 8014e68:	f383 8811 	msr	BASEPRI, r3
 8014e6c:	f3bf 8f6f 	isb	sy
 8014e70:	f3bf 8f4f 	dsb	sy
 8014e74:	b662      	cpsie	i
 8014e76:	60bb      	str	r3, [r7, #8]
}
 8014e78:	bf00      	nop
 8014e7a:	bf00      	nop
 8014e7c:	e7fd      	b.n	8014e7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	021b      	lsls	r3, r3, #8
 8014e84:	4a19      	ldr	r2, [pc, #100]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014e88:	4b18      	ldr	r3, [pc, #96]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014e90:	4a16      	ldr	r2, [pc, #88]	@ (8014eec <xPortStartScheduler+0xec>)
 8014e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	b2da      	uxtb	r2, r3
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014e9c:	4b14      	ldr	r3, [pc, #80]	@ (8014ef0 <xPortStartScheduler+0xf0>)
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	4a13      	ldr	r2, [pc, #76]	@ (8014ef0 <xPortStartScheduler+0xf0>)
 8014ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014ea8:	4b11      	ldr	r3, [pc, #68]	@ (8014ef0 <xPortStartScheduler+0xf0>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	4a10      	ldr	r2, [pc, #64]	@ (8014ef0 <xPortStartScheduler+0xf0>)
 8014eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014eb4:	f000 f8dc 	bl	8015070 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8014ef4 <xPortStartScheduler+0xf4>)
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014ebe:	f000 f8fb 	bl	80150b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8014ef8 <xPortStartScheduler+0xf8>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4a0c      	ldr	r2, [pc, #48]	@ (8014ef8 <xPortStartScheduler+0xf8>)
 8014ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014ece:	f7ff ff83 	bl	8014dd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014ed2:	f7ff f96b 	bl	80141ac <vTaskSwitchContext>
	prvTaskExitError();
 8014ed6:	f7ff ff33 	bl	8014d40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014eda:	2300      	movs	r3, #0
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3710      	adds	r7, #16
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	e000e400 	.word	0xe000e400
 8014ee8:	2000cc8c 	.word	0x2000cc8c
 8014eec:	2000cc90 	.word	0x2000cc90
 8014ef0:	e000ed20 	.word	0xe000ed20
 8014ef4:	20000078 	.word	0x20000078
 8014ef8:	e000ef34 	.word	0xe000ef34

08014efc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
	__asm volatile
 8014f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f06:	b672      	cpsid	i
 8014f08:	f383 8811 	msr	BASEPRI, r3
 8014f0c:	f3bf 8f6f 	isb	sy
 8014f10:	f3bf 8f4f 	dsb	sy
 8014f14:	b662      	cpsie	i
 8014f16:	607b      	str	r3, [r7, #4]
}
 8014f18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014f1a:	4b11      	ldr	r3, [pc, #68]	@ (8014f60 <vPortEnterCritical+0x64>)
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	3301      	adds	r3, #1
 8014f20:	4a0f      	ldr	r2, [pc, #60]	@ (8014f60 <vPortEnterCritical+0x64>)
 8014f22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014f24:	4b0e      	ldr	r3, [pc, #56]	@ (8014f60 <vPortEnterCritical+0x64>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	2b01      	cmp	r3, #1
 8014f2a:	d112      	bne.n	8014f52 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8014f64 <vPortEnterCritical+0x68>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	b2db      	uxtb	r3, r3
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d00d      	beq.n	8014f52 <vPortEnterCritical+0x56>
	__asm volatile
 8014f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f3a:	b672      	cpsid	i
 8014f3c:	f383 8811 	msr	BASEPRI, r3
 8014f40:	f3bf 8f6f 	isb	sy
 8014f44:	f3bf 8f4f 	dsb	sy
 8014f48:	b662      	cpsie	i
 8014f4a:	603b      	str	r3, [r7, #0]
}
 8014f4c:	bf00      	nop
 8014f4e:	bf00      	nop
 8014f50:	e7fd      	b.n	8014f4e <vPortEnterCritical+0x52>
	}
}
 8014f52:	bf00      	nop
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	20000078 	.word	0x20000078
 8014f64:	e000ed04 	.word	0xe000ed04

08014f68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014f68:	b480      	push	{r7}
 8014f6a:	b083      	sub	sp, #12
 8014f6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014f6e:	4b13      	ldr	r3, [pc, #76]	@ (8014fbc <vPortExitCritical+0x54>)
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d10d      	bne.n	8014f92 <vPortExitCritical+0x2a>
	__asm volatile
 8014f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f7a:	b672      	cpsid	i
 8014f7c:	f383 8811 	msr	BASEPRI, r3
 8014f80:	f3bf 8f6f 	isb	sy
 8014f84:	f3bf 8f4f 	dsb	sy
 8014f88:	b662      	cpsie	i
 8014f8a:	607b      	str	r3, [r7, #4]
}
 8014f8c:	bf00      	nop
 8014f8e:	bf00      	nop
 8014f90:	e7fd      	b.n	8014f8e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014f92:	4b0a      	ldr	r3, [pc, #40]	@ (8014fbc <vPortExitCritical+0x54>)
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	3b01      	subs	r3, #1
 8014f98:	4a08      	ldr	r2, [pc, #32]	@ (8014fbc <vPortExitCritical+0x54>)
 8014f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014f9c:	4b07      	ldr	r3, [pc, #28]	@ (8014fbc <vPortExitCritical+0x54>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d105      	bne.n	8014fb0 <vPortExitCritical+0x48>
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	f383 8811 	msr	BASEPRI, r3
}
 8014fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014fb0:	bf00      	nop
 8014fb2:	370c      	adds	r7, #12
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fba:	4770      	bx	lr
 8014fbc:	20000078 	.word	0x20000078

08014fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014fc0:	f3ef 8009 	mrs	r0, PSP
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	4b15      	ldr	r3, [pc, #84]	@ (8015020 <pxCurrentTCBConst>)
 8014fca:	681a      	ldr	r2, [r3, #0]
 8014fcc:	f01e 0f10 	tst.w	lr, #16
 8014fd0:	bf08      	it	eq
 8014fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fda:	6010      	str	r0, [r2, #0]
 8014fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014fe4:	b672      	cpsid	i
 8014fe6:	f380 8811 	msr	BASEPRI, r0
 8014fea:	f3bf 8f4f 	dsb	sy
 8014fee:	f3bf 8f6f 	isb	sy
 8014ff2:	b662      	cpsie	i
 8014ff4:	f7ff f8da 	bl	80141ac <vTaskSwitchContext>
 8014ff8:	f04f 0000 	mov.w	r0, #0
 8014ffc:	f380 8811 	msr	BASEPRI, r0
 8015000:	bc09      	pop	{r0, r3}
 8015002:	6819      	ldr	r1, [r3, #0]
 8015004:	6808      	ldr	r0, [r1, #0]
 8015006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801500a:	f01e 0f10 	tst.w	lr, #16
 801500e:	bf08      	it	eq
 8015010:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015014:	f380 8809 	msr	PSP, r0
 8015018:	f3bf 8f6f 	isb	sy
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop

08015020 <pxCurrentTCBConst>:
 8015020:	2000caf4 	.word	0x2000caf4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015024:	bf00      	nop
 8015026:	bf00      	nop

08015028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
	__asm volatile
 801502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015032:	b672      	cpsid	i
 8015034:	f383 8811 	msr	BASEPRI, r3
 8015038:	f3bf 8f6f 	isb	sy
 801503c:	f3bf 8f4f 	dsb	sy
 8015040:	b662      	cpsie	i
 8015042:	607b      	str	r3, [r7, #4]
}
 8015044:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015046:	f7fe fff5 	bl	8014034 <xTaskIncrementTick>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d003      	beq.n	8015058 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015050:	4b06      	ldr	r3, [pc, #24]	@ (801506c <SysTick_Handler+0x44>)
 8015052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015056:	601a      	str	r2, [r3, #0]
 8015058:	2300      	movs	r3, #0
 801505a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	f383 8811 	msr	BASEPRI, r3
}
 8015062:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015064:	bf00      	nop
 8015066:	3708      	adds	r7, #8
 8015068:	46bd      	mov	sp, r7
 801506a:	bd80      	pop	{r7, pc}
 801506c:	e000ed04 	.word	0xe000ed04

08015070 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015070:	b480      	push	{r7}
 8015072:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015074:	4b0b      	ldr	r3, [pc, #44]	@ (80150a4 <vPortSetupTimerInterrupt+0x34>)
 8015076:	2200      	movs	r2, #0
 8015078:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801507a:	4b0b      	ldr	r3, [pc, #44]	@ (80150a8 <vPortSetupTimerInterrupt+0x38>)
 801507c:	2200      	movs	r2, #0
 801507e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015080:	4b0a      	ldr	r3, [pc, #40]	@ (80150ac <vPortSetupTimerInterrupt+0x3c>)
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	4a0a      	ldr	r2, [pc, #40]	@ (80150b0 <vPortSetupTimerInterrupt+0x40>)
 8015086:	fba2 2303 	umull	r2, r3, r2, r3
 801508a:	099b      	lsrs	r3, r3, #6
 801508c:	4a09      	ldr	r2, [pc, #36]	@ (80150b4 <vPortSetupTimerInterrupt+0x44>)
 801508e:	3b01      	subs	r3, #1
 8015090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015092:	4b04      	ldr	r3, [pc, #16]	@ (80150a4 <vPortSetupTimerInterrupt+0x34>)
 8015094:	2207      	movs	r2, #7
 8015096:	601a      	str	r2, [r3, #0]
}
 8015098:	bf00      	nop
 801509a:	46bd      	mov	sp, r7
 801509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a0:	4770      	bx	lr
 80150a2:	bf00      	nop
 80150a4:	e000e010 	.word	0xe000e010
 80150a8:	e000e018 	.word	0xe000e018
 80150ac:	20000054 	.word	0x20000054
 80150b0:	10624dd3 	.word	0x10624dd3
 80150b4:	e000e014 	.word	0xe000e014

080150b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80150b8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80150c8 <vPortEnableVFP+0x10>
 80150bc:	6801      	ldr	r1, [r0, #0]
 80150be:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80150c2:	6001      	str	r1, [r0, #0]
 80150c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80150c6:	bf00      	nop
 80150c8:	e000ed88 	.word	0xe000ed88

080150cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80150cc:	b480      	push	{r7}
 80150ce:	b085      	sub	sp, #20
 80150d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80150d2:	f3ef 8305 	mrs	r3, IPSR
 80150d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	2b0f      	cmp	r3, #15
 80150dc:	d917      	bls.n	801510e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80150de:	4a1a      	ldr	r2, [pc, #104]	@ (8015148 <vPortValidateInterruptPriority+0x7c>)
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	4413      	add	r3, r2
 80150e4:	781b      	ldrb	r3, [r3, #0]
 80150e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80150e8:	4b18      	ldr	r3, [pc, #96]	@ (801514c <vPortValidateInterruptPriority+0x80>)
 80150ea:	781b      	ldrb	r3, [r3, #0]
 80150ec:	7afa      	ldrb	r2, [r7, #11]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d20d      	bcs.n	801510e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80150f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150f6:	b672      	cpsid	i
 80150f8:	f383 8811 	msr	BASEPRI, r3
 80150fc:	f3bf 8f6f 	isb	sy
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	b662      	cpsie	i
 8015106:	607b      	str	r3, [r7, #4]
}
 8015108:	bf00      	nop
 801510a:	bf00      	nop
 801510c:	e7fd      	b.n	801510a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801510e:	4b10      	ldr	r3, [pc, #64]	@ (8015150 <vPortValidateInterruptPriority+0x84>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8015116:	4b0f      	ldr	r3, [pc, #60]	@ (8015154 <vPortValidateInterruptPriority+0x88>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	429a      	cmp	r2, r3
 801511c:	d90d      	bls.n	801513a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801511e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015122:	b672      	cpsid	i
 8015124:	f383 8811 	msr	BASEPRI, r3
 8015128:	f3bf 8f6f 	isb	sy
 801512c:	f3bf 8f4f 	dsb	sy
 8015130:	b662      	cpsie	i
 8015132:	603b      	str	r3, [r7, #0]
}
 8015134:	bf00      	nop
 8015136:	bf00      	nop
 8015138:	e7fd      	b.n	8015136 <vPortValidateInterruptPriority+0x6a>
	}
 801513a:	bf00      	nop
 801513c:	3714      	adds	r7, #20
 801513e:	46bd      	mov	sp, r7
 8015140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015144:	4770      	bx	lr
 8015146:	bf00      	nop
 8015148:	e000e3f0 	.word	0xe000e3f0
 801514c:	2000cc8c 	.word	0x2000cc8c
 8015150:	e000ed0c 	.word	0xe000ed0c
 8015154:	2000cc90 	.word	0x2000cc90

08015158 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	b08a      	sub	sp, #40	@ 0x28
 801515c:	af00      	add	r7, sp, #0
 801515e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015160:	2300      	movs	r3, #0
 8015162:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015164:	f7fe fea8 	bl	8013eb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015168:	4b5d      	ldr	r3, [pc, #372]	@ (80152e0 <pvPortMalloc+0x188>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d101      	bne.n	8015174 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015170:	f000 f920 	bl	80153b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015174:	4b5b      	ldr	r3, [pc, #364]	@ (80152e4 <pvPortMalloc+0x18c>)
 8015176:	681a      	ldr	r2, [r3, #0]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	4013      	ands	r3, r2
 801517c:	2b00      	cmp	r3, #0
 801517e:	f040 8094 	bne.w	80152aa <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d020      	beq.n	80151ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8015188:	2208      	movs	r2, #8
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4413      	add	r3, r2
 801518e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	f003 0307 	and.w	r3, r3, #7
 8015196:	2b00      	cmp	r3, #0
 8015198:	d017      	beq.n	80151ca <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	f023 0307 	bic.w	r3, r3, #7
 80151a0:	3308      	adds	r3, #8
 80151a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	f003 0307 	and.w	r3, r3, #7
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d00d      	beq.n	80151ca <pvPortMalloc+0x72>
	__asm volatile
 80151ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151b2:	b672      	cpsid	i
 80151b4:	f383 8811 	msr	BASEPRI, r3
 80151b8:	f3bf 8f6f 	isb	sy
 80151bc:	f3bf 8f4f 	dsb	sy
 80151c0:	b662      	cpsie	i
 80151c2:	617b      	str	r3, [r7, #20]
}
 80151c4:	bf00      	nop
 80151c6:	bf00      	nop
 80151c8:	e7fd      	b.n	80151c6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d06c      	beq.n	80152aa <pvPortMalloc+0x152>
 80151d0:	4b45      	ldr	r3, [pc, #276]	@ (80152e8 <pvPortMalloc+0x190>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	d867      	bhi.n	80152aa <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80151da:	4b44      	ldr	r3, [pc, #272]	@ (80152ec <pvPortMalloc+0x194>)
 80151dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80151de:	4b43      	ldr	r3, [pc, #268]	@ (80152ec <pvPortMalloc+0x194>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151e4:	e004      	b.n	80151f0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80151e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80151ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80151f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d903      	bls.n	8015202 <pvPortMalloc+0xaa>
 80151fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d1f1      	bne.n	80151e6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015202:	4b37      	ldr	r3, [pc, #220]	@ (80152e0 <pvPortMalloc+0x188>)
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015208:	429a      	cmp	r2, r3
 801520a:	d04e      	beq.n	80152aa <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801520c:	6a3b      	ldr	r3, [r7, #32]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	2208      	movs	r2, #8
 8015212:	4413      	add	r3, r2
 8015214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015218:	681a      	ldr	r2, [r3, #0]
 801521a:	6a3b      	ldr	r3, [r7, #32]
 801521c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015220:	685a      	ldr	r2, [r3, #4]
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	1ad2      	subs	r2, r2, r3
 8015226:	2308      	movs	r3, #8
 8015228:	005b      	lsls	r3, r3, #1
 801522a:	429a      	cmp	r2, r3
 801522c:	d922      	bls.n	8015274 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801522e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	4413      	add	r3, r2
 8015234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	f003 0307 	and.w	r3, r3, #7
 801523c:	2b00      	cmp	r3, #0
 801523e:	d00d      	beq.n	801525c <pvPortMalloc+0x104>
	__asm volatile
 8015240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015244:	b672      	cpsid	i
 8015246:	f383 8811 	msr	BASEPRI, r3
 801524a:	f3bf 8f6f 	isb	sy
 801524e:	f3bf 8f4f 	dsb	sy
 8015252:	b662      	cpsie	i
 8015254:	613b      	str	r3, [r7, #16]
}
 8015256:	bf00      	nop
 8015258:	bf00      	nop
 801525a:	e7fd      	b.n	8015258 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801525c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801525e:	685a      	ldr	r2, [r3, #4]
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	1ad2      	subs	r2, r2, r3
 8015264:	69bb      	ldr	r3, [r7, #24]
 8015266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801526e:	69b8      	ldr	r0, [r7, #24]
 8015270:	f000 f902 	bl	8015478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015274:	4b1c      	ldr	r3, [pc, #112]	@ (80152e8 <pvPortMalloc+0x190>)
 8015276:	681a      	ldr	r2, [r3, #0]
 8015278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	4a1a      	ldr	r2, [pc, #104]	@ (80152e8 <pvPortMalloc+0x190>)
 8015280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015282:	4b19      	ldr	r3, [pc, #100]	@ (80152e8 <pvPortMalloc+0x190>)
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	4b1a      	ldr	r3, [pc, #104]	@ (80152f0 <pvPortMalloc+0x198>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	429a      	cmp	r2, r3
 801528c:	d203      	bcs.n	8015296 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801528e:	4b16      	ldr	r3, [pc, #88]	@ (80152e8 <pvPortMalloc+0x190>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	4a17      	ldr	r2, [pc, #92]	@ (80152f0 <pvPortMalloc+0x198>)
 8015294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015298:	685a      	ldr	r2, [r3, #4]
 801529a:	4b12      	ldr	r3, [pc, #72]	@ (80152e4 <pvPortMalloc+0x18c>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	431a      	orrs	r2, r3
 80152a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80152a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80152a6:	2200      	movs	r2, #0
 80152a8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80152aa:	f7fe fe13 	bl	8013ed4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80152ae:	69fb      	ldr	r3, [r7, #28]
 80152b0:	f003 0307 	and.w	r3, r3, #7
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d00d      	beq.n	80152d4 <pvPortMalloc+0x17c>
	__asm volatile
 80152b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152bc:	b672      	cpsid	i
 80152be:	f383 8811 	msr	BASEPRI, r3
 80152c2:	f3bf 8f6f 	isb	sy
 80152c6:	f3bf 8f4f 	dsb	sy
 80152ca:	b662      	cpsie	i
 80152cc:	60fb      	str	r3, [r7, #12]
}
 80152ce:	bf00      	nop
 80152d0:	bf00      	nop
 80152d2:	e7fd      	b.n	80152d0 <pvPortMalloc+0x178>
	return pvReturn;
 80152d4:	69fb      	ldr	r3, [r7, #28]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3728      	adds	r7, #40	@ 0x28
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	20014c9c 	.word	0x20014c9c
 80152e4:	20014ca8 	.word	0x20014ca8
 80152e8:	20014ca0 	.word	0x20014ca0
 80152ec:	20014c94 	.word	0x20014c94
 80152f0:	20014ca4 	.word	0x20014ca4

080152f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80152f4:	b580      	push	{r7, lr}
 80152f6:	b086      	sub	sp, #24
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d04e      	beq.n	80153a4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015306:	2308      	movs	r3, #8
 8015308:	425b      	negs	r3, r3
 801530a:	697a      	ldr	r2, [r7, #20]
 801530c:	4413      	add	r3, r2
 801530e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015310:	697b      	ldr	r3, [r7, #20]
 8015312:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	685a      	ldr	r2, [r3, #4]
 8015318:	4b24      	ldr	r3, [pc, #144]	@ (80153ac <vPortFree+0xb8>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4013      	ands	r3, r2
 801531e:	2b00      	cmp	r3, #0
 8015320:	d10d      	bne.n	801533e <vPortFree+0x4a>
	__asm volatile
 8015322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015326:	b672      	cpsid	i
 8015328:	f383 8811 	msr	BASEPRI, r3
 801532c:	f3bf 8f6f 	isb	sy
 8015330:	f3bf 8f4f 	dsb	sy
 8015334:	b662      	cpsie	i
 8015336:	60fb      	str	r3, [r7, #12]
}
 8015338:	bf00      	nop
 801533a:	bf00      	nop
 801533c:	e7fd      	b.n	801533a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801533e:	693b      	ldr	r3, [r7, #16]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	2b00      	cmp	r3, #0
 8015344:	d00d      	beq.n	8015362 <vPortFree+0x6e>
	__asm volatile
 8015346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801534a:	b672      	cpsid	i
 801534c:	f383 8811 	msr	BASEPRI, r3
 8015350:	f3bf 8f6f 	isb	sy
 8015354:	f3bf 8f4f 	dsb	sy
 8015358:	b662      	cpsie	i
 801535a:	60bb      	str	r3, [r7, #8]
}
 801535c:	bf00      	nop
 801535e:	bf00      	nop
 8015360:	e7fd      	b.n	801535e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015362:	693b      	ldr	r3, [r7, #16]
 8015364:	685a      	ldr	r2, [r3, #4]
 8015366:	4b11      	ldr	r3, [pc, #68]	@ (80153ac <vPortFree+0xb8>)
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	4013      	ands	r3, r2
 801536c:	2b00      	cmp	r3, #0
 801536e:	d019      	beq.n	80153a4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015370:	693b      	ldr	r3, [r7, #16]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d115      	bne.n	80153a4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	685a      	ldr	r2, [r3, #4]
 801537c:	4b0b      	ldr	r3, [pc, #44]	@ (80153ac <vPortFree+0xb8>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	43db      	mvns	r3, r3
 8015382:	401a      	ands	r2, r3
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015388:	f7fe fd96 	bl	8013eb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801538c:	693b      	ldr	r3, [r7, #16]
 801538e:	685a      	ldr	r2, [r3, #4]
 8015390:	4b07      	ldr	r3, [pc, #28]	@ (80153b0 <vPortFree+0xbc>)
 8015392:	681b      	ldr	r3, [r3, #0]
 8015394:	4413      	add	r3, r2
 8015396:	4a06      	ldr	r2, [pc, #24]	@ (80153b0 <vPortFree+0xbc>)
 8015398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801539a:	6938      	ldr	r0, [r7, #16]
 801539c:	f000 f86c 	bl	8015478 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80153a0:	f7fe fd98 	bl	8013ed4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80153a4:	bf00      	nop
 80153a6:	3718      	adds	r7, #24
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	20014ca8 	.word	0x20014ca8
 80153b0:	20014ca0 	.word	0x20014ca0

080153b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80153b4:	b480      	push	{r7}
 80153b6:	b085      	sub	sp, #20
 80153b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80153ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80153be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80153c0:	4b27      	ldr	r3, [pc, #156]	@ (8015460 <prvHeapInit+0xac>)
 80153c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	f003 0307 	and.w	r3, r3, #7
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00c      	beq.n	80153e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	3307      	adds	r3, #7
 80153d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	f023 0307 	bic.w	r3, r3, #7
 80153da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80153dc:	68ba      	ldr	r2, [r7, #8]
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	1ad3      	subs	r3, r2, r3
 80153e2:	4a1f      	ldr	r2, [pc, #124]	@ (8015460 <prvHeapInit+0xac>)
 80153e4:	4413      	add	r3, r2
 80153e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80153ec:	4a1d      	ldr	r2, [pc, #116]	@ (8015464 <prvHeapInit+0xb0>)
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80153f2:	4b1c      	ldr	r3, [pc, #112]	@ (8015464 <prvHeapInit+0xb0>)
 80153f4:	2200      	movs	r2, #0
 80153f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	68ba      	ldr	r2, [r7, #8]
 80153fc:	4413      	add	r3, r2
 80153fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015400:	2208      	movs	r2, #8
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	1a9b      	subs	r3, r3, r2
 8015406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f023 0307 	bic.w	r3, r3, #7
 801540e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	4a15      	ldr	r2, [pc, #84]	@ (8015468 <prvHeapInit+0xb4>)
 8015414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015416:	4b14      	ldr	r3, [pc, #80]	@ (8015468 <prvHeapInit+0xb4>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	2200      	movs	r2, #0
 801541c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801541e:	4b12      	ldr	r3, [pc, #72]	@ (8015468 <prvHeapInit+0xb4>)
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	2200      	movs	r2, #0
 8015424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	68fa      	ldr	r2, [r7, #12]
 801542e:	1ad2      	subs	r2, r2, r3
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015434:	4b0c      	ldr	r3, [pc, #48]	@ (8015468 <prvHeapInit+0xb4>)
 8015436:	681a      	ldr	r2, [r3, #0]
 8015438:	683b      	ldr	r3, [r7, #0]
 801543a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	4a0a      	ldr	r2, [pc, #40]	@ (801546c <prvHeapInit+0xb8>)
 8015442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	685b      	ldr	r3, [r3, #4]
 8015448:	4a09      	ldr	r2, [pc, #36]	@ (8015470 <prvHeapInit+0xbc>)
 801544a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801544c:	4b09      	ldr	r3, [pc, #36]	@ (8015474 <prvHeapInit+0xc0>)
 801544e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015452:	601a      	str	r2, [r3, #0]
}
 8015454:	bf00      	nop
 8015456:	3714      	adds	r7, #20
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr
 8015460:	2000cc94 	.word	0x2000cc94
 8015464:	20014c94 	.word	0x20014c94
 8015468:	20014c9c 	.word	0x20014c9c
 801546c:	20014ca4 	.word	0x20014ca4
 8015470:	20014ca0 	.word	0x20014ca0
 8015474:	20014ca8 	.word	0x20014ca8

08015478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015478:	b480      	push	{r7}
 801547a:	b085      	sub	sp, #20
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015480:	4b28      	ldr	r3, [pc, #160]	@ (8015524 <prvInsertBlockIntoFreeList+0xac>)
 8015482:	60fb      	str	r3, [r7, #12]
 8015484:	e002      	b.n	801548c <prvInsertBlockIntoFreeList+0x14>
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	60fb      	str	r3, [r7, #12]
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	687a      	ldr	r2, [r7, #4]
 8015492:	429a      	cmp	r2, r3
 8015494:	d8f7      	bhi.n	8015486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	68ba      	ldr	r2, [r7, #8]
 80154a0:	4413      	add	r3, r2
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d108      	bne.n	80154ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	685a      	ldr	r2, [r3, #4]
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	685b      	ldr	r3, [r3, #4]
 80154b0:	441a      	add	r2, r3
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	68ba      	ldr	r2, [r7, #8]
 80154c4:	441a      	add	r2, r3
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	681b      	ldr	r3, [r3, #0]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d118      	bne.n	8015500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	681a      	ldr	r2, [r3, #0]
 80154d2:	4b15      	ldr	r3, [pc, #84]	@ (8015528 <prvInsertBlockIntoFreeList+0xb0>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d00d      	beq.n	80154f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685a      	ldr	r2, [r3, #4]
 80154de:	68fb      	ldr	r3, [r7, #12]
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	441a      	add	r2, r3
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	681a      	ldr	r2, [r3, #0]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	601a      	str	r2, [r3, #0]
 80154f4:	e008      	b.n	8015508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80154f6:	4b0c      	ldr	r3, [pc, #48]	@ (8015528 <prvInsertBlockIntoFreeList+0xb0>)
 80154f8:	681a      	ldr	r2, [r3, #0]
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	601a      	str	r2, [r3, #0]
 80154fe:	e003      	b.n	8015508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015508:	68fa      	ldr	r2, [r7, #12]
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	429a      	cmp	r2, r3
 801550e:	d002      	beq.n	8015516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015516:	bf00      	nop
 8015518:	3714      	adds	r7, #20
 801551a:	46bd      	mov	sp, r7
 801551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015520:	4770      	bx	lr
 8015522:	bf00      	nop
 8015524:	20014c94 	.word	0x20014c94
 8015528:	20014c9c 	.word	0x20014c9c

0801552c <atof>:
 801552c:	2100      	movs	r1, #0
 801552e:	f000 be03 	b.w	8016138 <strtod>

08015532 <sulp>:
 8015532:	b570      	push	{r4, r5, r6, lr}
 8015534:	4604      	mov	r4, r0
 8015536:	460d      	mov	r5, r1
 8015538:	ec45 4b10 	vmov	d0, r4, r5
 801553c:	4616      	mov	r6, r2
 801553e:	f001 ffff 	bl	8017540 <__ulp>
 8015542:	ec51 0b10 	vmov	r0, r1, d0
 8015546:	b17e      	cbz	r6, 8015568 <sulp+0x36>
 8015548:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801554c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015550:	2b00      	cmp	r3, #0
 8015552:	dd09      	ble.n	8015568 <sulp+0x36>
 8015554:	051b      	lsls	r3, r3, #20
 8015556:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801555a:	2400      	movs	r4, #0
 801555c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015560:	4622      	mov	r2, r4
 8015562:	462b      	mov	r3, r5
 8015564:	f7eb f868 	bl	8000638 <__aeabi_dmul>
 8015568:	ec41 0b10 	vmov	d0, r0, r1
 801556c:	bd70      	pop	{r4, r5, r6, pc}
	...

08015570 <_strtod_l>:
 8015570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015574:	b09f      	sub	sp, #124	@ 0x7c
 8015576:	460c      	mov	r4, r1
 8015578:	9217      	str	r2, [sp, #92]	@ 0x5c
 801557a:	2200      	movs	r2, #0
 801557c:	921a      	str	r2, [sp, #104]	@ 0x68
 801557e:	9005      	str	r0, [sp, #20]
 8015580:	f04f 0a00 	mov.w	sl, #0
 8015584:	f04f 0b00 	mov.w	fp, #0
 8015588:	460a      	mov	r2, r1
 801558a:	9219      	str	r2, [sp, #100]	@ 0x64
 801558c:	7811      	ldrb	r1, [r2, #0]
 801558e:	292b      	cmp	r1, #43	@ 0x2b
 8015590:	d04a      	beq.n	8015628 <_strtod_l+0xb8>
 8015592:	d838      	bhi.n	8015606 <_strtod_l+0x96>
 8015594:	290d      	cmp	r1, #13
 8015596:	d832      	bhi.n	80155fe <_strtod_l+0x8e>
 8015598:	2908      	cmp	r1, #8
 801559a:	d832      	bhi.n	8015602 <_strtod_l+0x92>
 801559c:	2900      	cmp	r1, #0
 801559e:	d03b      	beq.n	8015618 <_strtod_l+0xa8>
 80155a0:	2200      	movs	r2, #0
 80155a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80155a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80155a6:	782a      	ldrb	r2, [r5, #0]
 80155a8:	2a30      	cmp	r2, #48	@ 0x30
 80155aa:	f040 80b3 	bne.w	8015714 <_strtod_l+0x1a4>
 80155ae:	786a      	ldrb	r2, [r5, #1]
 80155b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80155b4:	2a58      	cmp	r2, #88	@ 0x58
 80155b6:	d16e      	bne.n	8015696 <_strtod_l+0x126>
 80155b8:	9302      	str	r3, [sp, #8]
 80155ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155bc:	9301      	str	r3, [sp, #4]
 80155be:	ab1a      	add	r3, sp, #104	@ 0x68
 80155c0:	9300      	str	r3, [sp, #0]
 80155c2:	4a8e      	ldr	r2, [pc, #568]	@ (80157fc <_strtod_l+0x28c>)
 80155c4:	9805      	ldr	r0, [sp, #20]
 80155c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80155c8:	a919      	add	r1, sp, #100	@ 0x64
 80155ca:	f001 f8b3 	bl	8016734 <__gethex>
 80155ce:	f010 060f 	ands.w	r6, r0, #15
 80155d2:	4604      	mov	r4, r0
 80155d4:	d005      	beq.n	80155e2 <_strtod_l+0x72>
 80155d6:	2e06      	cmp	r6, #6
 80155d8:	d128      	bne.n	801562c <_strtod_l+0xbc>
 80155da:	3501      	adds	r5, #1
 80155dc:	2300      	movs	r3, #0
 80155de:	9519      	str	r5, [sp, #100]	@ 0x64
 80155e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80155e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	f040 858e 	bne.w	8016106 <_strtod_l+0xb96>
 80155ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155ec:	b1cb      	cbz	r3, 8015622 <_strtod_l+0xb2>
 80155ee:	4652      	mov	r2, sl
 80155f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80155f4:	ec43 2b10 	vmov	d0, r2, r3
 80155f8:	b01f      	add	sp, #124	@ 0x7c
 80155fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80155fe:	2920      	cmp	r1, #32
 8015600:	d1ce      	bne.n	80155a0 <_strtod_l+0x30>
 8015602:	3201      	adds	r2, #1
 8015604:	e7c1      	b.n	801558a <_strtod_l+0x1a>
 8015606:	292d      	cmp	r1, #45	@ 0x2d
 8015608:	d1ca      	bne.n	80155a0 <_strtod_l+0x30>
 801560a:	2101      	movs	r1, #1
 801560c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801560e:	1c51      	adds	r1, r2, #1
 8015610:	9119      	str	r1, [sp, #100]	@ 0x64
 8015612:	7852      	ldrb	r2, [r2, #1]
 8015614:	2a00      	cmp	r2, #0
 8015616:	d1c5      	bne.n	80155a4 <_strtod_l+0x34>
 8015618:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801561a:	9419      	str	r4, [sp, #100]	@ 0x64
 801561c:	2b00      	cmp	r3, #0
 801561e:	f040 8570 	bne.w	8016102 <_strtod_l+0xb92>
 8015622:	4652      	mov	r2, sl
 8015624:	465b      	mov	r3, fp
 8015626:	e7e5      	b.n	80155f4 <_strtod_l+0x84>
 8015628:	2100      	movs	r1, #0
 801562a:	e7ef      	b.n	801560c <_strtod_l+0x9c>
 801562c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801562e:	b13a      	cbz	r2, 8015640 <_strtod_l+0xd0>
 8015630:	2135      	movs	r1, #53	@ 0x35
 8015632:	a81c      	add	r0, sp, #112	@ 0x70
 8015634:	f002 f87e 	bl	8017734 <__copybits>
 8015638:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801563a:	9805      	ldr	r0, [sp, #20]
 801563c:	f001 fc4c 	bl	8016ed8 <_Bfree>
 8015640:	3e01      	subs	r6, #1
 8015642:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015644:	2e04      	cmp	r6, #4
 8015646:	d806      	bhi.n	8015656 <_strtod_l+0xe6>
 8015648:	e8df f006 	tbb	[pc, r6]
 801564c:	201d0314 	.word	0x201d0314
 8015650:	14          	.byte	0x14
 8015651:	00          	.byte	0x00
 8015652:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015656:	05e1      	lsls	r1, r4, #23
 8015658:	bf48      	it	mi
 801565a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801565e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015662:	0d1b      	lsrs	r3, r3, #20
 8015664:	051b      	lsls	r3, r3, #20
 8015666:	2b00      	cmp	r3, #0
 8015668:	d1bb      	bne.n	80155e2 <_strtod_l+0x72>
 801566a:	f000 ff6b 	bl	8016544 <__errno>
 801566e:	2322      	movs	r3, #34	@ 0x22
 8015670:	6003      	str	r3, [r0, #0]
 8015672:	e7b6      	b.n	80155e2 <_strtod_l+0x72>
 8015674:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015678:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801567c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015680:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015684:	e7e7      	b.n	8015656 <_strtod_l+0xe6>
 8015686:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8015804 <_strtod_l+0x294>
 801568a:	e7e4      	b.n	8015656 <_strtod_l+0xe6>
 801568c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015690:	f04f 3aff 	mov.w	sl, #4294967295
 8015694:	e7df      	b.n	8015656 <_strtod_l+0xe6>
 8015696:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015698:	1c5a      	adds	r2, r3, #1
 801569a:	9219      	str	r2, [sp, #100]	@ 0x64
 801569c:	785b      	ldrb	r3, [r3, #1]
 801569e:	2b30      	cmp	r3, #48	@ 0x30
 80156a0:	d0f9      	beq.n	8015696 <_strtod_l+0x126>
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d09d      	beq.n	80155e2 <_strtod_l+0x72>
 80156a6:	2301      	movs	r3, #1
 80156a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80156aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80156ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80156ae:	2300      	movs	r3, #0
 80156b0:	9308      	str	r3, [sp, #32]
 80156b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80156b4:	461f      	mov	r7, r3
 80156b6:	220a      	movs	r2, #10
 80156b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80156ba:	7805      	ldrb	r5, [r0, #0]
 80156bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80156c0:	b2d9      	uxtb	r1, r3
 80156c2:	2909      	cmp	r1, #9
 80156c4:	d928      	bls.n	8015718 <_strtod_l+0x1a8>
 80156c6:	494e      	ldr	r1, [pc, #312]	@ (8015800 <_strtod_l+0x290>)
 80156c8:	2201      	movs	r2, #1
 80156ca:	f000 feba 	bl	8016442 <strncmp>
 80156ce:	2800      	cmp	r0, #0
 80156d0:	d032      	beq.n	8015738 <_strtod_l+0x1c8>
 80156d2:	2000      	movs	r0, #0
 80156d4:	462a      	mov	r2, r5
 80156d6:	4681      	mov	r9, r0
 80156d8:	463d      	mov	r5, r7
 80156da:	4603      	mov	r3, r0
 80156dc:	2a65      	cmp	r2, #101	@ 0x65
 80156de:	d001      	beq.n	80156e4 <_strtod_l+0x174>
 80156e0:	2a45      	cmp	r2, #69	@ 0x45
 80156e2:	d114      	bne.n	801570e <_strtod_l+0x19e>
 80156e4:	b91d      	cbnz	r5, 80156ee <_strtod_l+0x17e>
 80156e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80156e8:	4302      	orrs	r2, r0
 80156ea:	d095      	beq.n	8015618 <_strtod_l+0xa8>
 80156ec:	2500      	movs	r5, #0
 80156ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80156f0:	1c62      	adds	r2, r4, #1
 80156f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80156f4:	7862      	ldrb	r2, [r4, #1]
 80156f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80156f8:	d077      	beq.n	80157ea <_strtod_l+0x27a>
 80156fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80156fc:	d07b      	beq.n	80157f6 <_strtod_l+0x286>
 80156fe:	f04f 0c00 	mov.w	ip, #0
 8015702:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015706:	2909      	cmp	r1, #9
 8015708:	f240 8082 	bls.w	8015810 <_strtod_l+0x2a0>
 801570c:	9419      	str	r4, [sp, #100]	@ 0x64
 801570e:	f04f 0800 	mov.w	r8, #0
 8015712:	e0a2      	b.n	801585a <_strtod_l+0x2ea>
 8015714:	2300      	movs	r3, #0
 8015716:	e7c7      	b.n	80156a8 <_strtod_l+0x138>
 8015718:	2f08      	cmp	r7, #8
 801571a:	bfd5      	itete	le
 801571c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801571e:	9908      	ldrgt	r1, [sp, #32]
 8015720:	fb02 3301 	mlale	r3, r2, r1, r3
 8015724:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015728:	f100 0001 	add.w	r0, r0, #1
 801572c:	bfd4      	ite	le
 801572e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8015730:	9308      	strgt	r3, [sp, #32]
 8015732:	3701      	adds	r7, #1
 8015734:	9019      	str	r0, [sp, #100]	@ 0x64
 8015736:	e7bf      	b.n	80156b8 <_strtod_l+0x148>
 8015738:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801573a:	1c5a      	adds	r2, r3, #1
 801573c:	9219      	str	r2, [sp, #100]	@ 0x64
 801573e:	785a      	ldrb	r2, [r3, #1]
 8015740:	b37f      	cbz	r7, 80157a2 <_strtod_l+0x232>
 8015742:	4681      	mov	r9, r0
 8015744:	463d      	mov	r5, r7
 8015746:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801574a:	2b09      	cmp	r3, #9
 801574c:	d912      	bls.n	8015774 <_strtod_l+0x204>
 801574e:	2301      	movs	r3, #1
 8015750:	e7c4      	b.n	80156dc <_strtod_l+0x16c>
 8015752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015754:	1c5a      	adds	r2, r3, #1
 8015756:	9219      	str	r2, [sp, #100]	@ 0x64
 8015758:	785a      	ldrb	r2, [r3, #1]
 801575a:	3001      	adds	r0, #1
 801575c:	2a30      	cmp	r2, #48	@ 0x30
 801575e:	d0f8      	beq.n	8015752 <_strtod_l+0x1e2>
 8015760:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015764:	2b08      	cmp	r3, #8
 8015766:	f200 84d3 	bhi.w	8016110 <_strtod_l+0xba0>
 801576a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801576c:	930c      	str	r3, [sp, #48]	@ 0x30
 801576e:	4681      	mov	r9, r0
 8015770:	2000      	movs	r0, #0
 8015772:	4605      	mov	r5, r0
 8015774:	3a30      	subs	r2, #48	@ 0x30
 8015776:	f100 0301 	add.w	r3, r0, #1
 801577a:	d02a      	beq.n	80157d2 <_strtod_l+0x262>
 801577c:	4499      	add	r9, r3
 801577e:	eb00 0c05 	add.w	ip, r0, r5
 8015782:	462b      	mov	r3, r5
 8015784:	210a      	movs	r1, #10
 8015786:	4563      	cmp	r3, ip
 8015788:	d10d      	bne.n	80157a6 <_strtod_l+0x236>
 801578a:	1c69      	adds	r1, r5, #1
 801578c:	4401      	add	r1, r0
 801578e:	4428      	add	r0, r5
 8015790:	2808      	cmp	r0, #8
 8015792:	dc16      	bgt.n	80157c2 <_strtod_l+0x252>
 8015794:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015796:	230a      	movs	r3, #10
 8015798:	fb03 2300 	mla	r3, r3, r0, r2
 801579c:	930a      	str	r3, [sp, #40]	@ 0x28
 801579e:	2300      	movs	r3, #0
 80157a0:	e018      	b.n	80157d4 <_strtod_l+0x264>
 80157a2:	4638      	mov	r0, r7
 80157a4:	e7da      	b.n	801575c <_strtod_l+0x1ec>
 80157a6:	2b08      	cmp	r3, #8
 80157a8:	f103 0301 	add.w	r3, r3, #1
 80157ac:	dc03      	bgt.n	80157b6 <_strtod_l+0x246>
 80157ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80157b0:	434e      	muls	r6, r1
 80157b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80157b4:	e7e7      	b.n	8015786 <_strtod_l+0x216>
 80157b6:	2b10      	cmp	r3, #16
 80157b8:	bfde      	ittt	le
 80157ba:	9e08      	ldrle	r6, [sp, #32]
 80157bc:	434e      	mulle	r6, r1
 80157be:	9608      	strle	r6, [sp, #32]
 80157c0:	e7e1      	b.n	8015786 <_strtod_l+0x216>
 80157c2:	280f      	cmp	r0, #15
 80157c4:	dceb      	bgt.n	801579e <_strtod_l+0x22e>
 80157c6:	9808      	ldr	r0, [sp, #32]
 80157c8:	230a      	movs	r3, #10
 80157ca:	fb03 2300 	mla	r3, r3, r0, r2
 80157ce:	9308      	str	r3, [sp, #32]
 80157d0:	e7e5      	b.n	801579e <_strtod_l+0x22e>
 80157d2:	4629      	mov	r1, r5
 80157d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80157d6:	1c50      	adds	r0, r2, #1
 80157d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80157da:	7852      	ldrb	r2, [r2, #1]
 80157dc:	4618      	mov	r0, r3
 80157de:	460d      	mov	r5, r1
 80157e0:	e7b1      	b.n	8015746 <_strtod_l+0x1d6>
 80157e2:	f04f 0900 	mov.w	r9, #0
 80157e6:	2301      	movs	r3, #1
 80157e8:	e77d      	b.n	80156e6 <_strtod_l+0x176>
 80157ea:	f04f 0c00 	mov.w	ip, #0
 80157ee:	1ca2      	adds	r2, r4, #2
 80157f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80157f2:	78a2      	ldrb	r2, [r4, #2]
 80157f4:	e785      	b.n	8015702 <_strtod_l+0x192>
 80157f6:	f04f 0c01 	mov.w	ip, #1
 80157fa:	e7f8      	b.n	80157ee <_strtod_l+0x27e>
 80157fc:	08019074 	.word	0x08019074
 8015800:	08019050 	.word	0x08019050
 8015804:	7ff00000 	.word	0x7ff00000
 8015808:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801580a:	1c51      	adds	r1, r2, #1
 801580c:	9119      	str	r1, [sp, #100]	@ 0x64
 801580e:	7852      	ldrb	r2, [r2, #1]
 8015810:	2a30      	cmp	r2, #48	@ 0x30
 8015812:	d0f9      	beq.n	8015808 <_strtod_l+0x298>
 8015814:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015818:	2908      	cmp	r1, #8
 801581a:	f63f af78 	bhi.w	801570e <_strtod_l+0x19e>
 801581e:	3a30      	subs	r2, #48	@ 0x30
 8015820:	920e      	str	r2, [sp, #56]	@ 0x38
 8015822:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015824:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015826:	f04f 080a 	mov.w	r8, #10
 801582a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801582c:	1c56      	adds	r6, r2, #1
 801582e:	9619      	str	r6, [sp, #100]	@ 0x64
 8015830:	7852      	ldrb	r2, [r2, #1]
 8015832:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015836:	f1be 0f09 	cmp.w	lr, #9
 801583a:	d939      	bls.n	80158b0 <_strtod_l+0x340>
 801583c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801583e:	1a76      	subs	r6, r6, r1
 8015840:	2e08      	cmp	r6, #8
 8015842:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015846:	dc03      	bgt.n	8015850 <_strtod_l+0x2e0>
 8015848:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801584a:	4588      	cmp	r8, r1
 801584c:	bfa8      	it	ge
 801584e:	4688      	movge	r8, r1
 8015850:	f1bc 0f00 	cmp.w	ip, #0
 8015854:	d001      	beq.n	801585a <_strtod_l+0x2ea>
 8015856:	f1c8 0800 	rsb	r8, r8, #0
 801585a:	2d00      	cmp	r5, #0
 801585c:	d14e      	bne.n	80158fc <_strtod_l+0x38c>
 801585e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015860:	4308      	orrs	r0, r1
 8015862:	f47f aebe 	bne.w	80155e2 <_strtod_l+0x72>
 8015866:	2b00      	cmp	r3, #0
 8015868:	f47f aed6 	bne.w	8015618 <_strtod_l+0xa8>
 801586c:	2a69      	cmp	r2, #105	@ 0x69
 801586e:	d028      	beq.n	80158c2 <_strtod_l+0x352>
 8015870:	dc25      	bgt.n	80158be <_strtod_l+0x34e>
 8015872:	2a49      	cmp	r2, #73	@ 0x49
 8015874:	d025      	beq.n	80158c2 <_strtod_l+0x352>
 8015876:	2a4e      	cmp	r2, #78	@ 0x4e
 8015878:	f47f aece 	bne.w	8015618 <_strtod_l+0xa8>
 801587c:	499b      	ldr	r1, [pc, #620]	@ (8015aec <_strtod_l+0x57c>)
 801587e:	a819      	add	r0, sp, #100	@ 0x64
 8015880:	f001 f97a 	bl	8016b78 <__match>
 8015884:	2800      	cmp	r0, #0
 8015886:	f43f aec7 	beq.w	8015618 <_strtod_l+0xa8>
 801588a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	2b28      	cmp	r3, #40	@ 0x28
 8015890:	d12e      	bne.n	80158f0 <_strtod_l+0x380>
 8015892:	4997      	ldr	r1, [pc, #604]	@ (8015af0 <_strtod_l+0x580>)
 8015894:	aa1c      	add	r2, sp, #112	@ 0x70
 8015896:	a819      	add	r0, sp, #100	@ 0x64
 8015898:	f001 f982 	bl	8016ba0 <__hexnan>
 801589c:	2805      	cmp	r0, #5
 801589e:	d127      	bne.n	80158f0 <_strtod_l+0x380>
 80158a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80158a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80158a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80158aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80158ae:	e698      	b.n	80155e2 <_strtod_l+0x72>
 80158b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80158b2:	fb08 2101 	mla	r1, r8, r1, r2
 80158b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80158ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80158bc:	e7b5      	b.n	801582a <_strtod_l+0x2ba>
 80158be:	2a6e      	cmp	r2, #110	@ 0x6e
 80158c0:	e7da      	b.n	8015878 <_strtod_l+0x308>
 80158c2:	498c      	ldr	r1, [pc, #560]	@ (8015af4 <_strtod_l+0x584>)
 80158c4:	a819      	add	r0, sp, #100	@ 0x64
 80158c6:	f001 f957 	bl	8016b78 <__match>
 80158ca:	2800      	cmp	r0, #0
 80158cc:	f43f aea4 	beq.w	8015618 <_strtod_l+0xa8>
 80158d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80158d2:	4989      	ldr	r1, [pc, #548]	@ (8015af8 <_strtod_l+0x588>)
 80158d4:	3b01      	subs	r3, #1
 80158d6:	a819      	add	r0, sp, #100	@ 0x64
 80158d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80158da:	f001 f94d 	bl	8016b78 <__match>
 80158de:	b910      	cbnz	r0, 80158e6 <_strtod_l+0x376>
 80158e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80158e2:	3301      	adds	r3, #1
 80158e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80158e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015b08 <_strtod_l+0x598>
 80158ea:	f04f 0a00 	mov.w	sl, #0
 80158ee:	e678      	b.n	80155e2 <_strtod_l+0x72>
 80158f0:	4882      	ldr	r0, [pc, #520]	@ (8015afc <_strtod_l+0x58c>)
 80158f2:	f000 fe65 	bl	80165c0 <nan>
 80158f6:	ec5b ab10 	vmov	sl, fp, d0
 80158fa:	e672      	b.n	80155e2 <_strtod_l+0x72>
 80158fc:	eba8 0309 	sub.w	r3, r8, r9
 8015900:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015902:	9309      	str	r3, [sp, #36]	@ 0x24
 8015904:	2f00      	cmp	r7, #0
 8015906:	bf08      	it	eq
 8015908:	462f      	moveq	r7, r5
 801590a:	2d10      	cmp	r5, #16
 801590c:	462c      	mov	r4, r5
 801590e:	bfa8      	it	ge
 8015910:	2410      	movge	r4, #16
 8015912:	f7ea fe17 	bl	8000544 <__aeabi_ui2d>
 8015916:	2d09      	cmp	r5, #9
 8015918:	4682      	mov	sl, r0
 801591a:	468b      	mov	fp, r1
 801591c:	dc13      	bgt.n	8015946 <_strtod_l+0x3d6>
 801591e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015920:	2b00      	cmp	r3, #0
 8015922:	f43f ae5e 	beq.w	80155e2 <_strtod_l+0x72>
 8015926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015928:	dd78      	ble.n	8015a1c <_strtod_l+0x4ac>
 801592a:	2b16      	cmp	r3, #22
 801592c:	dc5f      	bgt.n	80159ee <_strtod_l+0x47e>
 801592e:	4974      	ldr	r1, [pc, #464]	@ (8015b00 <_strtod_l+0x590>)
 8015930:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015934:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015938:	4652      	mov	r2, sl
 801593a:	465b      	mov	r3, fp
 801593c:	f7ea fe7c 	bl	8000638 <__aeabi_dmul>
 8015940:	4682      	mov	sl, r0
 8015942:	468b      	mov	fp, r1
 8015944:	e64d      	b.n	80155e2 <_strtod_l+0x72>
 8015946:	4b6e      	ldr	r3, [pc, #440]	@ (8015b00 <_strtod_l+0x590>)
 8015948:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801594c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015950:	f7ea fe72 	bl	8000638 <__aeabi_dmul>
 8015954:	4682      	mov	sl, r0
 8015956:	9808      	ldr	r0, [sp, #32]
 8015958:	468b      	mov	fp, r1
 801595a:	f7ea fdf3 	bl	8000544 <__aeabi_ui2d>
 801595e:	4602      	mov	r2, r0
 8015960:	460b      	mov	r3, r1
 8015962:	4650      	mov	r0, sl
 8015964:	4659      	mov	r1, fp
 8015966:	f7ea fcb1 	bl	80002cc <__adddf3>
 801596a:	2d0f      	cmp	r5, #15
 801596c:	4682      	mov	sl, r0
 801596e:	468b      	mov	fp, r1
 8015970:	ddd5      	ble.n	801591e <_strtod_l+0x3ae>
 8015972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015974:	1b2c      	subs	r4, r5, r4
 8015976:	441c      	add	r4, r3
 8015978:	2c00      	cmp	r4, #0
 801597a:	f340 8096 	ble.w	8015aaa <_strtod_l+0x53a>
 801597e:	f014 030f 	ands.w	r3, r4, #15
 8015982:	d00a      	beq.n	801599a <_strtod_l+0x42a>
 8015984:	495e      	ldr	r1, [pc, #376]	@ (8015b00 <_strtod_l+0x590>)
 8015986:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801598a:	4652      	mov	r2, sl
 801598c:	465b      	mov	r3, fp
 801598e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015992:	f7ea fe51 	bl	8000638 <__aeabi_dmul>
 8015996:	4682      	mov	sl, r0
 8015998:	468b      	mov	fp, r1
 801599a:	f034 040f 	bics.w	r4, r4, #15
 801599e:	d073      	beq.n	8015a88 <_strtod_l+0x518>
 80159a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80159a4:	dd48      	ble.n	8015a38 <_strtod_l+0x4c8>
 80159a6:	2400      	movs	r4, #0
 80159a8:	46a0      	mov	r8, r4
 80159aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80159ac:	46a1      	mov	r9, r4
 80159ae:	9a05      	ldr	r2, [sp, #20]
 80159b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015b08 <_strtod_l+0x598>
 80159b4:	2322      	movs	r3, #34	@ 0x22
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	f04f 0a00 	mov.w	sl, #0
 80159bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159be:	2b00      	cmp	r3, #0
 80159c0:	f43f ae0f 	beq.w	80155e2 <_strtod_l+0x72>
 80159c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80159c6:	9805      	ldr	r0, [sp, #20]
 80159c8:	f001 fa86 	bl	8016ed8 <_Bfree>
 80159cc:	9805      	ldr	r0, [sp, #20]
 80159ce:	4649      	mov	r1, r9
 80159d0:	f001 fa82 	bl	8016ed8 <_Bfree>
 80159d4:	9805      	ldr	r0, [sp, #20]
 80159d6:	4641      	mov	r1, r8
 80159d8:	f001 fa7e 	bl	8016ed8 <_Bfree>
 80159dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80159de:	9805      	ldr	r0, [sp, #20]
 80159e0:	f001 fa7a 	bl	8016ed8 <_Bfree>
 80159e4:	9805      	ldr	r0, [sp, #20]
 80159e6:	4621      	mov	r1, r4
 80159e8:	f001 fa76 	bl	8016ed8 <_Bfree>
 80159ec:	e5f9      	b.n	80155e2 <_strtod_l+0x72>
 80159ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80159f4:	4293      	cmp	r3, r2
 80159f6:	dbbc      	blt.n	8015972 <_strtod_l+0x402>
 80159f8:	4c41      	ldr	r4, [pc, #260]	@ (8015b00 <_strtod_l+0x590>)
 80159fa:	f1c5 050f 	rsb	r5, r5, #15
 80159fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015a02:	4652      	mov	r2, sl
 8015a04:	465b      	mov	r3, fp
 8015a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a0a:	f7ea fe15 	bl	8000638 <__aeabi_dmul>
 8015a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a10:	1b5d      	subs	r5, r3, r5
 8015a12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015a16:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a1a:	e78f      	b.n	801593c <_strtod_l+0x3cc>
 8015a1c:	3316      	adds	r3, #22
 8015a1e:	dba8      	blt.n	8015972 <_strtod_l+0x402>
 8015a20:	4b37      	ldr	r3, [pc, #220]	@ (8015b00 <_strtod_l+0x590>)
 8015a22:	eba9 0808 	sub.w	r8, r9, r8
 8015a26:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8015a2a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8015a2e:	4650      	mov	r0, sl
 8015a30:	4659      	mov	r1, fp
 8015a32:	f7ea ff2b 	bl	800088c <__aeabi_ddiv>
 8015a36:	e783      	b.n	8015940 <_strtod_l+0x3d0>
 8015a38:	4b32      	ldr	r3, [pc, #200]	@ (8015b04 <_strtod_l+0x594>)
 8015a3a:	9308      	str	r3, [sp, #32]
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	1124      	asrs	r4, r4, #4
 8015a40:	4650      	mov	r0, sl
 8015a42:	4659      	mov	r1, fp
 8015a44:	461e      	mov	r6, r3
 8015a46:	2c01      	cmp	r4, #1
 8015a48:	dc21      	bgt.n	8015a8e <_strtod_l+0x51e>
 8015a4a:	b10b      	cbz	r3, 8015a50 <_strtod_l+0x4e0>
 8015a4c:	4682      	mov	sl, r0
 8015a4e:	468b      	mov	fp, r1
 8015a50:	492c      	ldr	r1, [pc, #176]	@ (8015b04 <_strtod_l+0x594>)
 8015a52:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015a56:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8015a5a:	4652      	mov	r2, sl
 8015a5c:	465b      	mov	r3, fp
 8015a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a62:	f7ea fde9 	bl	8000638 <__aeabi_dmul>
 8015a66:	4b28      	ldr	r3, [pc, #160]	@ (8015b08 <_strtod_l+0x598>)
 8015a68:	460a      	mov	r2, r1
 8015a6a:	400b      	ands	r3, r1
 8015a6c:	4927      	ldr	r1, [pc, #156]	@ (8015b0c <_strtod_l+0x59c>)
 8015a6e:	428b      	cmp	r3, r1
 8015a70:	4682      	mov	sl, r0
 8015a72:	d898      	bhi.n	80159a6 <_strtod_l+0x436>
 8015a74:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015a78:	428b      	cmp	r3, r1
 8015a7a:	bf86      	itte	hi
 8015a7c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015b10 <_strtod_l+0x5a0>
 8015a80:	f04f 3aff 	movhi.w	sl, #4294967295
 8015a84:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015a88:	2300      	movs	r3, #0
 8015a8a:	9308      	str	r3, [sp, #32]
 8015a8c:	e07a      	b.n	8015b84 <_strtod_l+0x614>
 8015a8e:	07e2      	lsls	r2, r4, #31
 8015a90:	d505      	bpl.n	8015a9e <_strtod_l+0x52e>
 8015a92:	9b08      	ldr	r3, [sp, #32]
 8015a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a98:	f7ea fdce 	bl	8000638 <__aeabi_dmul>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	9a08      	ldr	r2, [sp, #32]
 8015aa0:	3208      	adds	r2, #8
 8015aa2:	3601      	adds	r6, #1
 8015aa4:	1064      	asrs	r4, r4, #1
 8015aa6:	9208      	str	r2, [sp, #32]
 8015aa8:	e7cd      	b.n	8015a46 <_strtod_l+0x4d6>
 8015aaa:	d0ed      	beq.n	8015a88 <_strtod_l+0x518>
 8015aac:	4264      	negs	r4, r4
 8015aae:	f014 020f 	ands.w	r2, r4, #15
 8015ab2:	d00a      	beq.n	8015aca <_strtod_l+0x55a>
 8015ab4:	4b12      	ldr	r3, [pc, #72]	@ (8015b00 <_strtod_l+0x590>)
 8015ab6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015aba:	4650      	mov	r0, sl
 8015abc:	4659      	mov	r1, fp
 8015abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac2:	f7ea fee3 	bl	800088c <__aeabi_ddiv>
 8015ac6:	4682      	mov	sl, r0
 8015ac8:	468b      	mov	fp, r1
 8015aca:	1124      	asrs	r4, r4, #4
 8015acc:	d0dc      	beq.n	8015a88 <_strtod_l+0x518>
 8015ace:	2c1f      	cmp	r4, #31
 8015ad0:	dd20      	ble.n	8015b14 <_strtod_l+0x5a4>
 8015ad2:	2400      	movs	r4, #0
 8015ad4:	46a0      	mov	r8, r4
 8015ad6:	940a      	str	r4, [sp, #40]	@ 0x28
 8015ad8:	46a1      	mov	r9, r4
 8015ada:	9a05      	ldr	r2, [sp, #20]
 8015adc:	2322      	movs	r3, #34	@ 0x22
 8015ade:	f04f 0a00 	mov.w	sl, #0
 8015ae2:	f04f 0b00 	mov.w	fp, #0
 8015ae6:	6013      	str	r3, [r2, #0]
 8015ae8:	e768      	b.n	80159bc <_strtod_l+0x44c>
 8015aea:	bf00      	nop
 8015aec:	0801905b 	.word	0x0801905b
 8015af0:	08019060 	.word	0x08019060
 8015af4:	08019052 	.word	0x08019052
 8015af8:	08019055 	.word	0x08019055
 8015afc:	08019406 	.word	0x08019406
 8015b00:	080192d0 	.word	0x080192d0
 8015b04:	080192a8 	.word	0x080192a8
 8015b08:	7ff00000 	.word	0x7ff00000
 8015b0c:	7ca00000 	.word	0x7ca00000
 8015b10:	7fefffff 	.word	0x7fefffff
 8015b14:	f014 0310 	ands.w	r3, r4, #16
 8015b18:	bf18      	it	ne
 8015b1a:	236a      	movne	r3, #106	@ 0x6a
 8015b1c:	4ea9      	ldr	r6, [pc, #676]	@ (8015dc4 <_strtod_l+0x854>)
 8015b1e:	9308      	str	r3, [sp, #32]
 8015b20:	4650      	mov	r0, sl
 8015b22:	4659      	mov	r1, fp
 8015b24:	2300      	movs	r3, #0
 8015b26:	07e2      	lsls	r2, r4, #31
 8015b28:	d504      	bpl.n	8015b34 <_strtod_l+0x5c4>
 8015b2a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015b2e:	f7ea fd83 	bl	8000638 <__aeabi_dmul>
 8015b32:	2301      	movs	r3, #1
 8015b34:	1064      	asrs	r4, r4, #1
 8015b36:	f106 0608 	add.w	r6, r6, #8
 8015b3a:	d1f4      	bne.n	8015b26 <_strtod_l+0x5b6>
 8015b3c:	b10b      	cbz	r3, 8015b42 <_strtod_l+0x5d2>
 8015b3e:	4682      	mov	sl, r0
 8015b40:	468b      	mov	fp, r1
 8015b42:	9b08      	ldr	r3, [sp, #32]
 8015b44:	b1b3      	cbz	r3, 8015b74 <_strtod_l+0x604>
 8015b46:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8015b4a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	4659      	mov	r1, fp
 8015b52:	dd0f      	ble.n	8015b74 <_strtod_l+0x604>
 8015b54:	2b1f      	cmp	r3, #31
 8015b56:	dd55      	ble.n	8015c04 <_strtod_l+0x694>
 8015b58:	2b34      	cmp	r3, #52	@ 0x34
 8015b5a:	bfde      	ittt	le
 8015b5c:	f04f 33ff 	movle.w	r3, #4294967295
 8015b60:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015b64:	4093      	lslle	r3, r2
 8015b66:	f04f 0a00 	mov.w	sl, #0
 8015b6a:	bfcc      	ite	gt
 8015b6c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015b70:	ea03 0b01 	andle.w	fp, r3, r1
 8015b74:	2200      	movs	r2, #0
 8015b76:	2300      	movs	r3, #0
 8015b78:	4650      	mov	r0, sl
 8015b7a:	4659      	mov	r1, fp
 8015b7c:	f7ea ffc4 	bl	8000b08 <__aeabi_dcmpeq>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	d1a6      	bne.n	8015ad2 <_strtod_l+0x562>
 8015b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b86:	9300      	str	r3, [sp, #0]
 8015b88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015b8a:	9805      	ldr	r0, [sp, #20]
 8015b8c:	462b      	mov	r3, r5
 8015b8e:	463a      	mov	r2, r7
 8015b90:	f001 fa0a 	bl	8016fa8 <__s2b>
 8015b94:	900a      	str	r0, [sp, #40]	@ 0x28
 8015b96:	2800      	cmp	r0, #0
 8015b98:	f43f af05 	beq.w	80159a6 <_strtod_l+0x436>
 8015b9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015b9e:	2a00      	cmp	r2, #0
 8015ba0:	eba9 0308 	sub.w	r3, r9, r8
 8015ba4:	bfa8      	it	ge
 8015ba6:	2300      	movge	r3, #0
 8015ba8:	9312      	str	r3, [sp, #72]	@ 0x48
 8015baa:	2400      	movs	r4, #0
 8015bac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015bb0:	9316      	str	r3, [sp, #88]	@ 0x58
 8015bb2:	46a0      	mov	r8, r4
 8015bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bb6:	9805      	ldr	r0, [sp, #20]
 8015bb8:	6859      	ldr	r1, [r3, #4]
 8015bba:	f001 f94d 	bl	8016e58 <_Balloc>
 8015bbe:	4681      	mov	r9, r0
 8015bc0:	2800      	cmp	r0, #0
 8015bc2:	f43f aef4 	beq.w	80159ae <_strtod_l+0x43e>
 8015bc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015bc8:	691a      	ldr	r2, [r3, #16]
 8015bca:	3202      	adds	r2, #2
 8015bcc:	f103 010c 	add.w	r1, r3, #12
 8015bd0:	0092      	lsls	r2, r2, #2
 8015bd2:	300c      	adds	r0, #12
 8015bd4:	f000 fce3 	bl	801659e <memcpy>
 8015bd8:	ec4b ab10 	vmov	d0, sl, fp
 8015bdc:	9805      	ldr	r0, [sp, #20]
 8015bde:	aa1c      	add	r2, sp, #112	@ 0x70
 8015be0:	a91b      	add	r1, sp, #108	@ 0x6c
 8015be2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015be6:	f001 fd1b 	bl	8017620 <__d2b>
 8015bea:	901a      	str	r0, [sp, #104]	@ 0x68
 8015bec:	2800      	cmp	r0, #0
 8015bee:	f43f aede 	beq.w	80159ae <_strtod_l+0x43e>
 8015bf2:	9805      	ldr	r0, [sp, #20]
 8015bf4:	2101      	movs	r1, #1
 8015bf6:	f001 fa6d 	bl	80170d4 <__i2b>
 8015bfa:	4680      	mov	r8, r0
 8015bfc:	b948      	cbnz	r0, 8015c12 <_strtod_l+0x6a2>
 8015bfe:	f04f 0800 	mov.w	r8, #0
 8015c02:	e6d4      	b.n	80159ae <_strtod_l+0x43e>
 8015c04:	f04f 32ff 	mov.w	r2, #4294967295
 8015c08:	fa02 f303 	lsl.w	r3, r2, r3
 8015c0c:	ea03 0a0a 	and.w	sl, r3, sl
 8015c10:	e7b0      	b.n	8015b74 <_strtod_l+0x604>
 8015c12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015c14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015c16:	2d00      	cmp	r5, #0
 8015c18:	bfab      	itete	ge
 8015c1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015c1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015c1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015c20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015c22:	bfac      	ite	ge
 8015c24:	18ef      	addge	r7, r5, r3
 8015c26:	1b5e      	sublt	r6, r3, r5
 8015c28:	9b08      	ldr	r3, [sp, #32]
 8015c2a:	1aed      	subs	r5, r5, r3
 8015c2c:	4415      	add	r5, r2
 8015c2e:	4b66      	ldr	r3, [pc, #408]	@ (8015dc8 <_strtod_l+0x858>)
 8015c30:	3d01      	subs	r5, #1
 8015c32:	429d      	cmp	r5, r3
 8015c34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015c38:	da50      	bge.n	8015cdc <_strtod_l+0x76c>
 8015c3a:	1b5b      	subs	r3, r3, r5
 8015c3c:	2b1f      	cmp	r3, #31
 8015c3e:	eba2 0203 	sub.w	r2, r2, r3
 8015c42:	f04f 0101 	mov.w	r1, #1
 8015c46:	dc3d      	bgt.n	8015cc4 <_strtod_l+0x754>
 8015c48:	fa01 f303 	lsl.w	r3, r1, r3
 8015c4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015c4e:	2300      	movs	r3, #0
 8015c50:	9310      	str	r3, [sp, #64]	@ 0x40
 8015c52:	18bd      	adds	r5, r7, r2
 8015c54:	9b08      	ldr	r3, [sp, #32]
 8015c56:	42af      	cmp	r7, r5
 8015c58:	4416      	add	r6, r2
 8015c5a:	441e      	add	r6, r3
 8015c5c:	463b      	mov	r3, r7
 8015c5e:	bfa8      	it	ge
 8015c60:	462b      	movge	r3, r5
 8015c62:	42b3      	cmp	r3, r6
 8015c64:	bfa8      	it	ge
 8015c66:	4633      	movge	r3, r6
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	bfc2      	ittt	gt
 8015c6c:	1aed      	subgt	r5, r5, r3
 8015c6e:	1af6      	subgt	r6, r6, r3
 8015c70:	1aff      	subgt	r7, r7, r3
 8015c72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	dd16      	ble.n	8015ca6 <_strtod_l+0x736>
 8015c78:	4641      	mov	r1, r8
 8015c7a:	9805      	ldr	r0, [sp, #20]
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	f001 fae9 	bl	8017254 <__pow5mult>
 8015c82:	4680      	mov	r8, r0
 8015c84:	2800      	cmp	r0, #0
 8015c86:	d0ba      	beq.n	8015bfe <_strtod_l+0x68e>
 8015c88:	4601      	mov	r1, r0
 8015c8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015c8c:	9805      	ldr	r0, [sp, #20]
 8015c8e:	f001 fa37 	bl	8017100 <__multiply>
 8015c92:	900e      	str	r0, [sp, #56]	@ 0x38
 8015c94:	2800      	cmp	r0, #0
 8015c96:	f43f ae8a 	beq.w	80159ae <_strtod_l+0x43e>
 8015c9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015c9c:	9805      	ldr	r0, [sp, #20]
 8015c9e:	f001 f91b 	bl	8016ed8 <_Bfree>
 8015ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ca6:	2d00      	cmp	r5, #0
 8015ca8:	dc1d      	bgt.n	8015ce6 <_strtod_l+0x776>
 8015caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015cac:	2b00      	cmp	r3, #0
 8015cae:	dd23      	ble.n	8015cf8 <_strtod_l+0x788>
 8015cb0:	4649      	mov	r1, r9
 8015cb2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015cb4:	9805      	ldr	r0, [sp, #20]
 8015cb6:	f001 facd 	bl	8017254 <__pow5mult>
 8015cba:	4681      	mov	r9, r0
 8015cbc:	b9e0      	cbnz	r0, 8015cf8 <_strtod_l+0x788>
 8015cbe:	f04f 0900 	mov.w	r9, #0
 8015cc2:	e674      	b.n	80159ae <_strtod_l+0x43e>
 8015cc4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015cc8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015ccc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015cd0:	35e2      	adds	r5, #226	@ 0xe2
 8015cd2:	fa01 f305 	lsl.w	r3, r1, r5
 8015cd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8015cd8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015cda:	e7ba      	b.n	8015c52 <_strtod_l+0x6e2>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	9310      	str	r3, [sp, #64]	@ 0x40
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015ce4:	e7b5      	b.n	8015c52 <_strtod_l+0x6e2>
 8015ce6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015ce8:	9805      	ldr	r0, [sp, #20]
 8015cea:	462a      	mov	r2, r5
 8015cec:	f001 fb0c 	bl	8017308 <__lshift>
 8015cf0:	901a      	str	r0, [sp, #104]	@ 0x68
 8015cf2:	2800      	cmp	r0, #0
 8015cf4:	d1d9      	bne.n	8015caa <_strtod_l+0x73a>
 8015cf6:	e65a      	b.n	80159ae <_strtod_l+0x43e>
 8015cf8:	2e00      	cmp	r6, #0
 8015cfa:	dd07      	ble.n	8015d0c <_strtod_l+0x79c>
 8015cfc:	4649      	mov	r1, r9
 8015cfe:	9805      	ldr	r0, [sp, #20]
 8015d00:	4632      	mov	r2, r6
 8015d02:	f001 fb01 	bl	8017308 <__lshift>
 8015d06:	4681      	mov	r9, r0
 8015d08:	2800      	cmp	r0, #0
 8015d0a:	d0d8      	beq.n	8015cbe <_strtod_l+0x74e>
 8015d0c:	2f00      	cmp	r7, #0
 8015d0e:	dd08      	ble.n	8015d22 <_strtod_l+0x7b2>
 8015d10:	4641      	mov	r1, r8
 8015d12:	9805      	ldr	r0, [sp, #20]
 8015d14:	463a      	mov	r2, r7
 8015d16:	f001 faf7 	bl	8017308 <__lshift>
 8015d1a:	4680      	mov	r8, r0
 8015d1c:	2800      	cmp	r0, #0
 8015d1e:	f43f ae46 	beq.w	80159ae <_strtod_l+0x43e>
 8015d22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015d24:	9805      	ldr	r0, [sp, #20]
 8015d26:	464a      	mov	r2, r9
 8015d28:	f001 fb76 	bl	8017418 <__mdiff>
 8015d2c:	4604      	mov	r4, r0
 8015d2e:	2800      	cmp	r0, #0
 8015d30:	f43f ae3d 	beq.w	80159ae <_strtod_l+0x43e>
 8015d34:	68c3      	ldr	r3, [r0, #12]
 8015d36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015d38:	2300      	movs	r3, #0
 8015d3a:	60c3      	str	r3, [r0, #12]
 8015d3c:	4641      	mov	r1, r8
 8015d3e:	f001 fb4f 	bl	80173e0 <__mcmp>
 8015d42:	2800      	cmp	r0, #0
 8015d44:	da46      	bge.n	8015dd4 <_strtod_l+0x864>
 8015d46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d48:	ea53 030a 	orrs.w	r3, r3, sl
 8015d4c:	d16c      	bne.n	8015e28 <_strtod_l+0x8b8>
 8015d4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d168      	bne.n	8015e28 <_strtod_l+0x8b8>
 8015d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d5a:	0d1b      	lsrs	r3, r3, #20
 8015d5c:	051b      	lsls	r3, r3, #20
 8015d5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d62:	d961      	bls.n	8015e28 <_strtod_l+0x8b8>
 8015d64:	6963      	ldr	r3, [r4, #20]
 8015d66:	b913      	cbnz	r3, 8015d6e <_strtod_l+0x7fe>
 8015d68:	6923      	ldr	r3, [r4, #16]
 8015d6a:	2b01      	cmp	r3, #1
 8015d6c:	dd5c      	ble.n	8015e28 <_strtod_l+0x8b8>
 8015d6e:	4621      	mov	r1, r4
 8015d70:	2201      	movs	r2, #1
 8015d72:	9805      	ldr	r0, [sp, #20]
 8015d74:	f001 fac8 	bl	8017308 <__lshift>
 8015d78:	4641      	mov	r1, r8
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	f001 fb30 	bl	80173e0 <__mcmp>
 8015d80:	2800      	cmp	r0, #0
 8015d82:	dd51      	ble.n	8015e28 <_strtod_l+0x8b8>
 8015d84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015d88:	9a08      	ldr	r2, [sp, #32]
 8015d8a:	0d1b      	lsrs	r3, r3, #20
 8015d8c:	051b      	lsls	r3, r3, #20
 8015d8e:	2a00      	cmp	r2, #0
 8015d90:	d06b      	beq.n	8015e6a <_strtod_l+0x8fa>
 8015d92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015d96:	d868      	bhi.n	8015e6a <_strtod_l+0x8fa>
 8015d98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015d9c:	f67f ae9d 	bls.w	8015ada <_strtod_l+0x56a>
 8015da0:	4b0a      	ldr	r3, [pc, #40]	@ (8015dcc <_strtod_l+0x85c>)
 8015da2:	4650      	mov	r0, sl
 8015da4:	4659      	mov	r1, fp
 8015da6:	2200      	movs	r2, #0
 8015da8:	f7ea fc46 	bl	8000638 <__aeabi_dmul>
 8015dac:	4b08      	ldr	r3, [pc, #32]	@ (8015dd0 <_strtod_l+0x860>)
 8015dae:	400b      	ands	r3, r1
 8015db0:	4682      	mov	sl, r0
 8015db2:	468b      	mov	fp, r1
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	f47f ae05 	bne.w	80159c4 <_strtod_l+0x454>
 8015dba:	9a05      	ldr	r2, [sp, #20]
 8015dbc:	2322      	movs	r3, #34	@ 0x22
 8015dbe:	6013      	str	r3, [r2, #0]
 8015dc0:	e600      	b.n	80159c4 <_strtod_l+0x454>
 8015dc2:	bf00      	nop
 8015dc4:	08019088 	.word	0x08019088
 8015dc8:	fffffc02 	.word	0xfffffc02
 8015dcc:	39500000 	.word	0x39500000
 8015dd0:	7ff00000 	.word	0x7ff00000
 8015dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015dd8:	d165      	bne.n	8015ea6 <_strtod_l+0x936>
 8015dda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015ddc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015de0:	b35a      	cbz	r2, 8015e3a <_strtod_l+0x8ca>
 8015de2:	4a9f      	ldr	r2, [pc, #636]	@ (8016060 <_strtod_l+0xaf0>)
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d12b      	bne.n	8015e40 <_strtod_l+0x8d0>
 8015de8:	9b08      	ldr	r3, [sp, #32]
 8015dea:	4651      	mov	r1, sl
 8015dec:	b303      	cbz	r3, 8015e30 <_strtod_l+0x8c0>
 8015dee:	4b9d      	ldr	r3, [pc, #628]	@ (8016064 <_strtod_l+0xaf4>)
 8015df0:	465a      	mov	r2, fp
 8015df2:	4013      	ands	r3, r2
 8015df4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015df8:	f04f 32ff 	mov.w	r2, #4294967295
 8015dfc:	d81b      	bhi.n	8015e36 <_strtod_l+0x8c6>
 8015dfe:	0d1b      	lsrs	r3, r3, #20
 8015e00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015e04:	fa02 f303 	lsl.w	r3, r2, r3
 8015e08:	4299      	cmp	r1, r3
 8015e0a:	d119      	bne.n	8015e40 <_strtod_l+0x8d0>
 8015e0c:	4b96      	ldr	r3, [pc, #600]	@ (8016068 <_strtod_l+0xaf8>)
 8015e0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d102      	bne.n	8015e1a <_strtod_l+0x8aa>
 8015e14:	3101      	adds	r1, #1
 8015e16:	f43f adca 	beq.w	80159ae <_strtod_l+0x43e>
 8015e1a:	4b92      	ldr	r3, [pc, #584]	@ (8016064 <_strtod_l+0xaf4>)
 8015e1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e1e:	401a      	ands	r2, r3
 8015e20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015e24:	f04f 0a00 	mov.w	sl, #0
 8015e28:	9b08      	ldr	r3, [sp, #32]
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1b8      	bne.n	8015da0 <_strtod_l+0x830>
 8015e2e:	e5c9      	b.n	80159c4 <_strtod_l+0x454>
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295
 8015e34:	e7e8      	b.n	8015e08 <_strtod_l+0x898>
 8015e36:	4613      	mov	r3, r2
 8015e38:	e7e6      	b.n	8015e08 <_strtod_l+0x898>
 8015e3a:	ea53 030a 	orrs.w	r3, r3, sl
 8015e3e:	d0a1      	beq.n	8015d84 <_strtod_l+0x814>
 8015e40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015e42:	b1db      	cbz	r3, 8015e7c <_strtod_l+0x90c>
 8015e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015e46:	4213      	tst	r3, r2
 8015e48:	d0ee      	beq.n	8015e28 <_strtod_l+0x8b8>
 8015e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e4c:	9a08      	ldr	r2, [sp, #32]
 8015e4e:	4650      	mov	r0, sl
 8015e50:	4659      	mov	r1, fp
 8015e52:	b1bb      	cbz	r3, 8015e84 <_strtod_l+0x914>
 8015e54:	f7ff fb6d 	bl	8015532 <sulp>
 8015e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e5c:	ec53 2b10 	vmov	r2, r3, d0
 8015e60:	f7ea fa34 	bl	80002cc <__adddf3>
 8015e64:	4682      	mov	sl, r0
 8015e66:	468b      	mov	fp, r1
 8015e68:	e7de      	b.n	8015e28 <_strtod_l+0x8b8>
 8015e6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015e6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015e72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015e76:	f04f 3aff 	mov.w	sl, #4294967295
 8015e7a:	e7d5      	b.n	8015e28 <_strtod_l+0x8b8>
 8015e7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015e7e:	ea13 0f0a 	tst.w	r3, sl
 8015e82:	e7e1      	b.n	8015e48 <_strtod_l+0x8d8>
 8015e84:	f7ff fb55 	bl	8015532 <sulp>
 8015e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e8c:	ec53 2b10 	vmov	r2, r3, d0
 8015e90:	f7ea fa1a 	bl	80002c8 <__aeabi_dsub>
 8015e94:	2200      	movs	r2, #0
 8015e96:	2300      	movs	r3, #0
 8015e98:	4682      	mov	sl, r0
 8015e9a:	468b      	mov	fp, r1
 8015e9c:	f7ea fe34 	bl	8000b08 <__aeabi_dcmpeq>
 8015ea0:	2800      	cmp	r0, #0
 8015ea2:	d0c1      	beq.n	8015e28 <_strtod_l+0x8b8>
 8015ea4:	e619      	b.n	8015ada <_strtod_l+0x56a>
 8015ea6:	4641      	mov	r1, r8
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f001 fc11 	bl	80176d0 <__ratio>
 8015eae:	ec57 6b10 	vmov	r6, r7, d0
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015eb8:	4630      	mov	r0, r6
 8015eba:	4639      	mov	r1, r7
 8015ebc:	f7ea fe38 	bl	8000b30 <__aeabi_dcmple>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	d06f      	beq.n	8015fa4 <_strtod_l+0xa34>
 8015ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d17a      	bne.n	8015fc0 <_strtod_l+0xa50>
 8015eca:	f1ba 0f00 	cmp.w	sl, #0
 8015ece:	d158      	bne.n	8015f82 <_strtod_l+0xa12>
 8015ed0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ed2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d15a      	bne.n	8015f90 <_strtod_l+0xa20>
 8015eda:	4b64      	ldr	r3, [pc, #400]	@ (801606c <_strtod_l+0xafc>)
 8015edc:	2200      	movs	r2, #0
 8015ede:	4630      	mov	r0, r6
 8015ee0:	4639      	mov	r1, r7
 8015ee2:	f7ea fe1b 	bl	8000b1c <__aeabi_dcmplt>
 8015ee6:	2800      	cmp	r0, #0
 8015ee8:	d159      	bne.n	8015f9e <_strtod_l+0xa2e>
 8015eea:	4630      	mov	r0, r6
 8015eec:	4639      	mov	r1, r7
 8015eee:	4b60      	ldr	r3, [pc, #384]	@ (8016070 <_strtod_l+0xb00>)
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	f7ea fba1 	bl	8000638 <__aeabi_dmul>
 8015ef6:	4606      	mov	r6, r0
 8015ef8:	460f      	mov	r7, r1
 8015efa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015efe:	9606      	str	r6, [sp, #24]
 8015f00:	9307      	str	r3, [sp, #28]
 8015f02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f06:	4d57      	ldr	r5, [pc, #348]	@ (8016064 <_strtod_l+0xaf4>)
 8015f08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015f0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f0e:	401d      	ands	r5, r3
 8015f10:	4b58      	ldr	r3, [pc, #352]	@ (8016074 <_strtod_l+0xb04>)
 8015f12:	429d      	cmp	r5, r3
 8015f14:	f040 80b2 	bne.w	801607c <_strtod_l+0xb0c>
 8015f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015f1e:	ec4b ab10 	vmov	d0, sl, fp
 8015f22:	f001 fb0d 	bl	8017540 <__ulp>
 8015f26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015f2a:	ec51 0b10 	vmov	r0, r1, d0
 8015f2e:	f7ea fb83 	bl	8000638 <__aeabi_dmul>
 8015f32:	4652      	mov	r2, sl
 8015f34:	465b      	mov	r3, fp
 8015f36:	f7ea f9c9 	bl	80002cc <__adddf3>
 8015f3a:	460b      	mov	r3, r1
 8015f3c:	4949      	ldr	r1, [pc, #292]	@ (8016064 <_strtod_l+0xaf4>)
 8015f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8016078 <_strtod_l+0xb08>)
 8015f40:	4019      	ands	r1, r3
 8015f42:	4291      	cmp	r1, r2
 8015f44:	4682      	mov	sl, r0
 8015f46:	d942      	bls.n	8015fce <_strtod_l+0xa5e>
 8015f48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015f4a:	4b47      	ldr	r3, [pc, #284]	@ (8016068 <_strtod_l+0xaf8>)
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d103      	bne.n	8015f58 <_strtod_l+0x9e8>
 8015f50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f52:	3301      	adds	r3, #1
 8015f54:	f43f ad2b 	beq.w	80159ae <_strtod_l+0x43e>
 8015f58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016068 <_strtod_l+0xaf8>
 8015f5c:	f04f 3aff 	mov.w	sl, #4294967295
 8015f60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015f62:	9805      	ldr	r0, [sp, #20]
 8015f64:	f000 ffb8 	bl	8016ed8 <_Bfree>
 8015f68:	9805      	ldr	r0, [sp, #20]
 8015f6a:	4649      	mov	r1, r9
 8015f6c:	f000 ffb4 	bl	8016ed8 <_Bfree>
 8015f70:	9805      	ldr	r0, [sp, #20]
 8015f72:	4641      	mov	r1, r8
 8015f74:	f000 ffb0 	bl	8016ed8 <_Bfree>
 8015f78:	9805      	ldr	r0, [sp, #20]
 8015f7a:	4621      	mov	r1, r4
 8015f7c:	f000 ffac 	bl	8016ed8 <_Bfree>
 8015f80:	e618      	b.n	8015bb4 <_strtod_l+0x644>
 8015f82:	f1ba 0f01 	cmp.w	sl, #1
 8015f86:	d103      	bne.n	8015f90 <_strtod_l+0xa20>
 8015f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	f43f ada5 	beq.w	8015ada <_strtod_l+0x56a>
 8015f90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016040 <_strtod_l+0xad0>
 8015f94:	4f35      	ldr	r7, [pc, #212]	@ (801606c <_strtod_l+0xafc>)
 8015f96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015f9a:	2600      	movs	r6, #0
 8015f9c:	e7b1      	b.n	8015f02 <_strtod_l+0x992>
 8015f9e:	4f34      	ldr	r7, [pc, #208]	@ (8016070 <_strtod_l+0xb00>)
 8015fa0:	2600      	movs	r6, #0
 8015fa2:	e7aa      	b.n	8015efa <_strtod_l+0x98a>
 8015fa4:	4b32      	ldr	r3, [pc, #200]	@ (8016070 <_strtod_l+0xb00>)
 8015fa6:	4630      	mov	r0, r6
 8015fa8:	4639      	mov	r1, r7
 8015faa:	2200      	movs	r2, #0
 8015fac:	f7ea fb44 	bl	8000638 <__aeabi_dmul>
 8015fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015fb2:	4606      	mov	r6, r0
 8015fb4:	460f      	mov	r7, r1
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d09f      	beq.n	8015efa <_strtod_l+0x98a>
 8015fba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015fbe:	e7a0      	b.n	8015f02 <_strtod_l+0x992>
 8015fc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016048 <_strtod_l+0xad8>
 8015fc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015fc8:	ec57 6b17 	vmov	r6, r7, d7
 8015fcc:	e799      	b.n	8015f02 <_strtod_l+0x992>
 8015fce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015fd2:	9b08      	ldr	r3, [sp, #32]
 8015fd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d1c1      	bne.n	8015f60 <_strtod_l+0x9f0>
 8015fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015fe0:	0d1b      	lsrs	r3, r3, #20
 8015fe2:	051b      	lsls	r3, r3, #20
 8015fe4:	429d      	cmp	r5, r3
 8015fe6:	d1bb      	bne.n	8015f60 <_strtod_l+0x9f0>
 8015fe8:	4630      	mov	r0, r6
 8015fea:	4639      	mov	r1, r7
 8015fec:	f7ea fe46 	bl	8000c7c <__aeabi_d2lz>
 8015ff0:	f7ea faf4 	bl	80005dc <__aeabi_l2d>
 8015ff4:	4602      	mov	r2, r0
 8015ff6:	460b      	mov	r3, r1
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	4639      	mov	r1, r7
 8015ffc:	f7ea f964 	bl	80002c8 <__aeabi_dsub>
 8016000:	460b      	mov	r3, r1
 8016002:	4602      	mov	r2, r0
 8016004:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016008:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801600c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801600e:	ea46 060a 	orr.w	r6, r6, sl
 8016012:	431e      	orrs	r6, r3
 8016014:	d06f      	beq.n	80160f6 <_strtod_l+0xb86>
 8016016:	a30e      	add	r3, pc, #56	@ (adr r3, 8016050 <_strtod_l+0xae0>)
 8016018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801601c:	f7ea fd7e 	bl	8000b1c <__aeabi_dcmplt>
 8016020:	2800      	cmp	r0, #0
 8016022:	f47f accf 	bne.w	80159c4 <_strtod_l+0x454>
 8016026:	a30c      	add	r3, pc, #48	@ (adr r3, 8016058 <_strtod_l+0xae8>)
 8016028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801602c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016030:	f7ea fd92 	bl	8000b58 <__aeabi_dcmpgt>
 8016034:	2800      	cmp	r0, #0
 8016036:	d093      	beq.n	8015f60 <_strtod_l+0x9f0>
 8016038:	e4c4      	b.n	80159c4 <_strtod_l+0x454>
 801603a:	bf00      	nop
 801603c:	f3af 8000 	nop.w
 8016040:	00000000 	.word	0x00000000
 8016044:	bff00000 	.word	0xbff00000
 8016048:	00000000 	.word	0x00000000
 801604c:	3ff00000 	.word	0x3ff00000
 8016050:	94a03595 	.word	0x94a03595
 8016054:	3fdfffff 	.word	0x3fdfffff
 8016058:	35afe535 	.word	0x35afe535
 801605c:	3fe00000 	.word	0x3fe00000
 8016060:	000fffff 	.word	0x000fffff
 8016064:	7ff00000 	.word	0x7ff00000
 8016068:	7fefffff 	.word	0x7fefffff
 801606c:	3ff00000 	.word	0x3ff00000
 8016070:	3fe00000 	.word	0x3fe00000
 8016074:	7fe00000 	.word	0x7fe00000
 8016078:	7c9fffff 	.word	0x7c9fffff
 801607c:	9b08      	ldr	r3, [sp, #32]
 801607e:	b323      	cbz	r3, 80160ca <_strtod_l+0xb5a>
 8016080:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016084:	d821      	bhi.n	80160ca <_strtod_l+0xb5a>
 8016086:	a328      	add	r3, pc, #160	@ (adr r3, 8016128 <_strtod_l+0xbb8>)
 8016088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801608c:	4630      	mov	r0, r6
 801608e:	4639      	mov	r1, r7
 8016090:	f7ea fd4e 	bl	8000b30 <__aeabi_dcmple>
 8016094:	b1a0      	cbz	r0, 80160c0 <_strtod_l+0xb50>
 8016096:	4639      	mov	r1, r7
 8016098:	4630      	mov	r0, r6
 801609a:	f7ea fd67 	bl	8000b6c <__aeabi_d2uiz>
 801609e:	2801      	cmp	r0, #1
 80160a0:	bf38      	it	cc
 80160a2:	2001      	movcc	r0, #1
 80160a4:	f7ea fa4e 	bl	8000544 <__aeabi_ui2d>
 80160a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80160aa:	4606      	mov	r6, r0
 80160ac:	460f      	mov	r7, r1
 80160ae:	b9fb      	cbnz	r3, 80160f0 <_strtod_l+0xb80>
 80160b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80160b4:	9014      	str	r0, [sp, #80]	@ 0x50
 80160b6:	9315      	str	r3, [sp, #84]	@ 0x54
 80160b8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80160bc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80160c0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80160c2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80160c6:	1b5b      	subs	r3, r3, r5
 80160c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80160ca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80160ce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80160d2:	f001 fa35 	bl	8017540 <__ulp>
 80160d6:	4650      	mov	r0, sl
 80160d8:	ec53 2b10 	vmov	r2, r3, d0
 80160dc:	4659      	mov	r1, fp
 80160de:	f7ea faab 	bl	8000638 <__aeabi_dmul>
 80160e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80160e6:	f7ea f8f1 	bl	80002cc <__adddf3>
 80160ea:	4682      	mov	sl, r0
 80160ec:	468b      	mov	fp, r1
 80160ee:	e770      	b.n	8015fd2 <_strtod_l+0xa62>
 80160f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80160f4:	e7e0      	b.n	80160b8 <_strtod_l+0xb48>
 80160f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8016130 <_strtod_l+0xbc0>)
 80160f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160fc:	f7ea fd0e 	bl	8000b1c <__aeabi_dcmplt>
 8016100:	e798      	b.n	8016034 <_strtod_l+0xac4>
 8016102:	2300      	movs	r3, #0
 8016104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016106:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016108:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801610a:	6013      	str	r3, [r2, #0]
 801610c:	f7ff ba6d 	b.w	80155ea <_strtod_l+0x7a>
 8016110:	2a65      	cmp	r2, #101	@ 0x65
 8016112:	f43f ab66 	beq.w	80157e2 <_strtod_l+0x272>
 8016116:	2a45      	cmp	r2, #69	@ 0x45
 8016118:	f43f ab63 	beq.w	80157e2 <_strtod_l+0x272>
 801611c:	2301      	movs	r3, #1
 801611e:	f7ff bb9e 	b.w	801585e <_strtod_l+0x2ee>
 8016122:	bf00      	nop
 8016124:	f3af 8000 	nop.w
 8016128:	ffc00000 	.word	0xffc00000
 801612c:	41dfffff 	.word	0x41dfffff
 8016130:	94a03595 	.word	0x94a03595
 8016134:	3fcfffff 	.word	0x3fcfffff

08016138 <strtod>:
 8016138:	460a      	mov	r2, r1
 801613a:	4601      	mov	r1, r0
 801613c:	4802      	ldr	r0, [pc, #8]	@ (8016148 <strtod+0x10>)
 801613e:	4b03      	ldr	r3, [pc, #12]	@ (801614c <strtod+0x14>)
 8016140:	6800      	ldr	r0, [r0, #0]
 8016142:	f7ff ba15 	b.w	8015570 <_strtod_l>
 8016146:	bf00      	nop
 8016148:	200001f4 	.word	0x200001f4
 801614c:	20000088 	.word	0x20000088

08016150 <std>:
 8016150:	2300      	movs	r3, #0
 8016152:	b510      	push	{r4, lr}
 8016154:	4604      	mov	r4, r0
 8016156:	e9c0 3300 	strd	r3, r3, [r0]
 801615a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801615e:	6083      	str	r3, [r0, #8]
 8016160:	8181      	strh	r1, [r0, #12]
 8016162:	6643      	str	r3, [r0, #100]	@ 0x64
 8016164:	81c2      	strh	r2, [r0, #14]
 8016166:	6183      	str	r3, [r0, #24]
 8016168:	4619      	mov	r1, r3
 801616a:	2208      	movs	r2, #8
 801616c:	305c      	adds	r0, #92	@ 0x5c
 801616e:	f000 f942 	bl	80163f6 <memset>
 8016172:	4b0d      	ldr	r3, [pc, #52]	@ (80161a8 <std+0x58>)
 8016174:	6263      	str	r3, [r4, #36]	@ 0x24
 8016176:	4b0d      	ldr	r3, [pc, #52]	@ (80161ac <std+0x5c>)
 8016178:	62a3      	str	r3, [r4, #40]	@ 0x28
 801617a:	4b0d      	ldr	r3, [pc, #52]	@ (80161b0 <std+0x60>)
 801617c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801617e:	4b0d      	ldr	r3, [pc, #52]	@ (80161b4 <std+0x64>)
 8016180:	6323      	str	r3, [r4, #48]	@ 0x30
 8016182:	4b0d      	ldr	r3, [pc, #52]	@ (80161b8 <std+0x68>)
 8016184:	6224      	str	r4, [r4, #32]
 8016186:	429c      	cmp	r4, r3
 8016188:	d006      	beq.n	8016198 <std+0x48>
 801618a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801618e:	4294      	cmp	r4, r2
 8016190:	d002      	beq.n	8016198 <std+0x48>
 8016192:	33d0      	adds	r3, #208	@ 0xd0
 8016194:	429c      	cmp	r4, r3
 8016196:	d105      	bne.n	80161a4 <std+0x54>
 8016198:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801619c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161a0:	f000 b9fa 	b.w	8016598 <__retarget_lock_init_recursive>
 80161a4:	bd10      	pop	{r4, pc}
 80161a6:	bf00      	nop
 80161a8:	0801633d 	.word	0x0801633d
 80161ac:	0801635f 	.word	0x0801635f
 80161b0:	08016397 	.word	0x08016397
 80161b4:	080163bb 	.word	0x080163bb
 80161b8:	20014cac 	.word	0x20014cac

080161bc <stdio_exit_handler>:
 80161bc:	4a02      	ldr	r2, [pc, #8]	@ (80161c8 <stdio_exit_handler+0xc>)
 80161be:	4903      	ldr	r1, [pc, #12]	@ (80161cc <stdio_exit_handler+0x10>)
 80161c0:	4803      	ldr	r0, [pc, #12]	@ (80161d0 <stdio_exit_handler+0x14>)
 80161c2:	f000 b869 	b.w	8016298 <_fwalk_sglue>
 80161c6:	bf00      	nop
 80161c8:	2000007c 	.word	0x2000007c
 80161cc:	08017ea9 	.word	0x08017ea9
 80161d0:	200001f8 	.word	0x200001f8

080161d4 <cleanup_stdio>:
 80161d4:	6841      	ldr	r1, [r0, #4]
 80161d6:	4b0c      	ldr	r3, [pc, #48]	@ (8016208 <cleanup_stdio+0x34>)
 80161d8:	4299      	cmp	r1, r3
 80161da:	b510      	push	{r4, lr}
 80161dc:	4604      	mov	r4, r0
 80161de:	d001      	beq.n	80161e4 <cleanup_stdio+0x10>
 80161e0:	f001 fe62 	bl	8017ea8 <_fflush_r>
 80161e4:	68a1      	ldr	r1, [r4, #8]
 80161e6:	4b09      	ldr	r3, [pc, #36]	@ (801620c <cleanup_stdio+0x38>)
 80161e8:	4299      	cmp	r1, r3
 80161ea:	d002      	beq.n	80161f2 <cleanup_stdio+0x1e>
 80161ec:	4620      	mov	r0, r4
 80161ee:	f001 fe5b 	bl	8017ea8 <_fflush_r>
 80161f2:	68e1      	ldr	r1, [r4, #12]
 80161f4:	4b06      	ldr	r3, [pc, #24]	@ (8016210 <cleanup_stdio+0x3c>)
 80161f6:	4299      	cmp	r1, r3
 80161f8:	d004      	beq.n	8016204 <cleanup_stdio+0x30>
 80161fa:	4620      	mov	r0, r4
 80161fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016200:	f001 be52 	b.w	8017ea8 <_fflush_r>
 8016204:	bd10      	pop	{r4, pc}
 8016206:	bf00      	nop
 8016208:	20014cac 	.word	0x20014cac
 801620c:	20014d14 	.word	0x20014d14
 8016210:	20014d7c 	.word	0x20014d7c

08016214 <global_stdio_init.part.0>:
 8016214:	b510      	push	{r4, lr}
 8016216:	4b0b      	ldr	r3, [pc, #44]	@ (8016244 <global_stdio_init.part.0+0x30>)
 8016218:	4c0b      	ldr	r4, [pc, #44]	@ (8016248 <global_stdio_init.part.0+0x34>)
 801621a:	4a0c      	ldr	r2, [pc, #48]	@ (801624c <global_stdio_init.part.0+0x38>)
 801621c:	601a      	str	r2, [r3, #0]
 801621e:	4620      	mov	r0, r4
 8016220:	2200      	movs	r2, #0
 8016222:	2104      	movs	r1, #4
 8016224:	f7ff ff94 	bl	8016150 <std>
 8016228:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801622c:	2201      	movs	r2, #1
 801622e:	2109      	movs	r1, #9
 8016230:	f7ff ff8e 	bl	8016150 <std>
 8016234:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016238:	2202      	movs	r2, #2
 801623a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801623e:	2112      	movs	r1, #18
 8016240:	f7ff bf86 	b.w	8016150 <std>
 8016244:	20014de4 	.word	0x20014de4
 8016248:	20014cac 	.word	0x20014cac
 801624c:	080161bd 	.word	0x080161bd

08016250 <__sfp_lock_acquire>:
 8016250:	4801      	ldr	r0, [pc, #4]	@ (8016258 <__sfp_lock_acquire+0x8>)
 8016252:	f000 b9a2 	b.w	801659a <__retarget_lock_acquire_recursive>
 8016256:	bf00      	nop
 8016258:	20014ded 	.word	0x20014ded

0801625c <__sfp_lock_release>:
 801625c:	4801      	ldr	r0, [pc, #4]	@ (8016264 <__sfp_lock_release+0x8>)
 801625e:	f000 b99d 	b.w	801659c <__retarget_lock_release_recursive>
 8016262:	bf00      	nop
 8016264:	20014ded 	.word	0x20014ded

08016268 <__sinit>:
 8016268:	b510      	push	{r4, lr}
 801626a:	4604      	mov	r4, r0
 801626c:	f7ff fff0 	bl	8016250 <__sfp_lock_acquire>
 8016270:	6a23      	ldr	r3, [r4, #32]
 8016272:	b11b      	cbz	r3, 801627c <__sinit+0x14>
 8016274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016278:	f7ff bff0 	b.w	801625c <__sfp_lock_release>
 801627c:	4b04      	ldr	r3, [pc, #16]	@ (8016290 <__sinit+0x28>)
 801627e:	6223      	str	r3, [r4, #32]
 8016280:	4b04      	ldr	r3, [pc, #16]	@ (8016294 <__sinit+0x2c>)
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d1f5      	bne.n	8016274 <__sinit+0xc>
 8016288:	f7ff ffc4 	bl	8016214 <global_stdio_init.part.0>
 801628c:	e7f2      	b.n	8016274 <__sinit+0xc>
 801628e:	bf00      	nop
 8016290:	080161d5 	.word	0x080161d5
 8016294:	20014de4 	.word	0x20014de4

08016298 <_fwalk_sglue>:
 8016298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801629c:	4607      	mov	r7, r0
 801629e:	4688      	mov	r8, r1
 80162a0:	4614      	mov	r4, r2
 80162a2:	2600      	movs	r6, #0
 80162a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80162a8:	f1b9 0901 	subs.w	r9, r9, #1
 80162ac:	d505      	bpl.n	80162ba <_fwalk_sglue+0x22>
 80162ae:	6824      	ldr	r4, [r4, #0]
 80162b0:	2c00      	cmp	r4, #0
 80162b2:	d1f7      	bne.n	80162a4 <_fwalk_sglue+0xc>
 80162b4:	4630      	mov	r0, r6
 80162b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162ba:	89ab      	ldrh	r3, [r5, #12]
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d907      	bls.n	80162d0 <_fwalk_sglue+0x38>
 80162c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80162c4:	3301      	adds	r3, #1
 80162c6:	d003      	beq.n	80162d0 <_fwalk_sglue+0x38>
 80162c8:	4629      	mov	r1, r5
 80162ca:	4638      	mov	r0, r7
 80162cc:	47c0      	blx	r8
 80162ce:	4306      	orrs	r6, r0
 80162d0:	3568      	adds	r5, #104	@ 0x68
 80162d2:	e7e9      	b.n	80162a8 <_fwalk_sglue+0x10>

080162d4 <sniprintf>:
 80162d4:	b40c      	push	{r2, r3}
 80162d6:	b530      	push	{r4, r5, lr}
 80162d8:	4b17      	ldr	r3, [pc, #92]	@ (8016338 <sniprintf+0x64>)
 80162da:	1e0c      	subs	r4, r1, #0
 80162dc:	681d      	ldr	r5, [r3, #0]
 80162de:	b09d      	sub	sp, #116	@ 0x74
 80162e0:	da08      	bge.n	80162f4 <sniprintf+0x20>
 80162e2:	238b      	movs	r3, #139	@ 0x8b
 80162e4:	602b      	str	r3, [r5, #0]
 80162e6:	f04f 30ff 	mov.w	r0, #4294967295
 80162ea:	b01d      	add	sp, #116	@ 0x74
 80162ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80162f0:	b002      	add	sp, #8
 80162f2:	4770      	bx	lr
 80162f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80162f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80162fc:	bf14      	ite	ne
 80162fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016302:	4623      	moveq	r3, r4
 8016304:	9304      	str	r3, [sp, #16]
 8016306:	9307      	str	r3, [sp, #28]
 8016308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801630c:	9002      	str	r0, [sp, #8]
 801630e:	9006      	str	r0, [sp, #24]
 8016310:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016314:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016316:	ab21      	add	r3, sp, #132	@ 0x84
 8016318:	a902      	add	r1, sp, #8
 801631a:	4628      	mov	r0, r5
 801631c:	9301      	str	r3, [sp, #4]
 801631e:	f001 fab5 	bl	801788c <_svfiprintf_r>
 8016322:	1c43      	adds	r3, r0, #1
 8016324:	bfbc      	itt	lt
 8016326:	238b      	movlt	r3, #139	@ 0x8b
 8016328:	602b      	strlt	r3, [r5, #0]
 801632a:	2c00      	cmp	r4, #0
 801632c:	d0dd      	beq.n	80162ea <sniprintf+0x16>
 801632e:	9b02      	ldr	r3, [sp, #8]
 8016330:	2200      	movs	r2, #0
 8016332:	701a      	strb	r2, [r3, #0]
 8016334:	e7d9      	b.n	80162ea <sniprintf+0x16>
 8016336:	bf00      	nop
 8016338:	200001f4 	.word	0x200001f4

0801633c <__sread>:
 801633c:	b510      	push	{r4, lr}
 801633e:	460c      	mov	r4, r1
 8016340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016344:	f000 f8da 	bl	80164fc <_read_r>
 8016348:	2800      	cmp	r0, #0
 801634a:	bfab      	itete	ge
 801634c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801634e:	89a3      	ldrhlt	r3, [r4, #12]
 8016350:	181b      	addge	r3, r3, r0
 8016352:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016356:	bfac      	ite	ge
 8016358:	6563      	strge	r3, [r4, #84]	@ 0x54
 801635a:	81a3      	strhlt	r3, [r4, #12]
 801635c:	bd10      	pop	{r4, pc}

0801635e <__swrite>:
 801635e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016362:	461f      	mov	r7, r3
 8016364:	898b      	ldrh	r3, [r1, #12]
 8016366:	05db      	lsls	r3, r3, #23
 8016368:	4605      	mov	r5, r0
 801636a:	460c      	mov	r4, r1
 801636c:	4616      	mov	r6, r2
 801636e:	d505      	bpl.n	801637c <__swrite+0x1e>
 8016370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016374:	2302      	movs	r3, #2
 8016376:	2200      	movs	r2, #0
 8016378:	f000 f8ae 	bl	80164d8 <_lseek_r>
 801637c:	89a3      	ldrh	r3, [r4, #12]
 801637e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016382:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016386:	81a3      	strh	r3, [r4, #12]
 8016388:	4632      	mov	r2, r6
 801638a:	463b      	mov	r3, r7
 801638c:	4628      	mov	r0, r5
 801638e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016392:	f000 b8c5 	b.w	8016520 <_write_r>

08016396 <__sseek>:
 8016396:	b510      	push	{r4, lr}
 8016398:	460c      	mov	r4, r1
 801639a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801639e:	f000 f89b 	bl	80164d8 <_lseek_r>
 80163a2:	1c43      	adds	r3, r0, #1
 80163a4:	89a3      	ldrh	r3, [r4, #12]
 80163a6:	bf15      	itete	ne
 80163a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80163aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80163ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80163b2:	81a3      	strheq	r3, [r4, #12]
 80163b4:	bf18      	it	ne
 80163b6:	81a3      	strhne	r3, [r4, #12]
 80163b8:	bd10      	pop	{r4, pc}

080163ba <__sclose>:
 80163ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163be:	f000 b87b 	b.w	80164b8 <_close_r>

080163c2 <memmove>:
 80163c2:	4288      	cmp	r0, r1
 80163c4:	b510      	push	{r4, lr}
 80163c6:	eb01 0402 	add.w	r4, r1, r2
 80163ca:	d902      	bls.n	80163d2 <memmove+0x10>
 80163cc:	4284      	cmp	r4, r0
 80163ce:	4623      	mov	r3, r4
 80163d0:	d807      	bhi.n	80163e2 <memmove+0x20>
 80163d2:	1e43      	subs	r3, r0, #1
 80163d4:	42a1      	cmp	r1, r4
 80163d6:	d008      	beq.n	80163ea <memmove+0x28>
 80163d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80163e0:	e7f8      	b.n	80163d4 <memmove+0x12>
 80163e2:	4402      	add	r2, r0
 80163e4:	4601      	mov	r1, r0
 80163e6:	428a      	cmp	r2, r1
 80163e8:	d100      	bne.n	80163ec <memmove+0x2a>
 80163ea:	bd10      	pop	{r4, pc}
 80163ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80163f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80163f4:	e7f7      	b.n	80163e6 <memmove+0x24>

080163f6 <memset>:
 80163f6:	4402      	add	r2, r0
 80163f8:	4603      	mov	r3, r0
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d100      	bne.n	8016400 <memset+0xa>
 80163fe:	4770      	bx	lr
 8016400:	f803 1b01 	strb.w	r1, [r3], #1
 8016404:	e7f9      	b.n	80163fa <memset+0x4>

08016406 <strchr>:
 8016406:	b2c9      	uxtb	r1, r1
 8016408:	4603      	mov	r3, r0
 801640a:	4618      	mov	r0, r3
 801640c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016410:	b112      	cbz	r2, 8016418 <strchr+0x12>
 8016412:	428a      	cmp	r2, r1
 8016414:	d1f9      	bne.n	801640a <strchr+0x4>
 8016416:	4770      	bx	lr
 8016418:	2900      	cmp	r1, #0
 801641a:	bf18      	it	ne
 801641c:	2000      	movne	r0, #0
 801641e:	4770      	bx	lr

08016420 <strcspn>:
 8016420:	b570      	push	{r4, r5, r6, lr}
 8016422:	4603      	mov	r3, r0
 8016424:	461e      	mov	r6, r3
 8016426:	f813 4b01 	ldrb.w	r4, [r3], #1
 801642a:	b144      	cbz	r4, 801643e <strcspn+0x1e>
 801642c:	1e4a      	subs	r2, r1, #1
 801642e:	e001      	b.n	8016434 <strcspn+0x14>
 8016430:	42a5      	cmp	r5, r4
 8016432:	d004      	beq.n	801643e <strcspn+0x1e>
 8016434:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016438:	2d00      	cmp	r5, #0
 801643a:	d1f9      	bne.n	8016430 <strcspn+0x10>
 801643c:	e7f2      	b.n	8016424 <strcspn+0x4>
 801643e:	1a30      	subs	r0, r6, r0
 8016440:	bd70      	pop	{r4, r5, r6, pc}

08016442 <strncmp>:
 8016442:	b510      	push	{r4, lr}
 8016444:	b16a      	cbz	r2, 8016462 <strncmp+0x20>
 8016446:	3901      	subs	r1, #1
 8016448:	1884      	adds	r4, r0, r2
 801644a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801644e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016452:	429a      	cmp	r2, r3
 8016454:	d103      	bne.n	801645e <strncmp+0x1c>
 8016456:	42a0      	cmp	r0, r4
 8016458:	d001      	beq.n	801645e <strncmp+0x1c>
 801645a:	2a00      	cmp	r2, #0
 801645c:	d1f5      	bne.n	801644a <strncmp+0x8>
 801645e:	1ad0      	subs	r0, r2, r3
 8016460:	bd10      	pop	{r4, pc}
 8016462:	4610      	mov	r0, r2
 8016464:	e7fc      	b.n	8016460 <strncmp+0x1e>

08016466 <strncpy>:
 8016466:	b510      	push	{r4, lr}
 8016468:	3901      	subs	r1, #1
 801646a:	4603      	mov	r3, r0
 801646c:	b132      	cbz	r2, 801647c <strncpy+0x16>
 801646e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016472:	f803 4b01 	strb.w	r4, [r3], #1
 8016476:	3a01      	subs	r2, #1
 8016478:	2c00      	cmp	r4, #0
 801647a:	d1f7      	bne.n	801646c <strncpy+0x6>
 801647c:	441a      	add	r2, r3
 801647e:	2100      	movs	r1, #0
 8016480:	4293      	cmp	r3, r2
 8016482:	d100      	bne.n	8016486 <strncpy+0x20>
 8016484:	bd10      	pop	{r4, pc}
 8016486:	f803 1b01 	strb.w	r1, [r3], #1
 801648a:	e7f9      	b.n	8016480 <strncpy+0x1a>

0801648c <strstr>:
 801648c:	780a      	ldrb	r2, [r1, #0]
 801648e:	b570      	push	{r4, r5, r6, lr}
 8016490:	b96a      	cbnz	r2, 80164ae <strstr+0x22>
 8016492:	bd70      	pop	{r4, r5, r6, pc}
 8016494:	429a      	cmp	r2, r3
 8016496:	d109      	bne.n	80164ac <strstr+0x20>
 8016498:	460c      	mov	r4, r1
 801649a:	4605      	mov	r5, r0
 801649c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d0f6      	beq.n	8016492 <strstr+0x6>
 80164a4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80164a8:	429e      	cmp	r6, r3
 80164aa:	d0f7      	beq.n	801649c <strstr+0x10>
 80164ac:	3001      	adds	r0, #1
 80164ae:	7803      	ldrb	r3, [r0, #0]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d1ef      	bne.n	8016494 <strstr+0x8>
 80164b4:	4618      	mov	r0, r3
 80164b6:	e7ec      	b.n	8016492 <strstr+0x6>

080164b8 <_close_r>:
 80164b8:	b538      	push	{r3, r4, r5, lr}
 80164ba:	4d06      	ldr	r5, [pc, #24]	@ (80164d4 <_close_r+0x1c>)
 80164bc:	2300      	movs	r3, #0
 80164be:	4604      	mov	r4, r0
 80164c0:	4608      	mov	r0, r1
 80164c2:	602b      	str	r3, [r5, #0]
 80164c4:	f7f0 fd00 	bl	8006ec8 <_close>
 80164c8:	1c43      	adds	r3, r0, #1
 80164ca:	d102      	bne.n	80164d2 <_close_r+0x1a>
 80164cc:	682b      	ldr	r3, [r5, #0]
 80164ce:	b103      	cbz	r3, 80164d2 <_close_r+0x1a>
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	bd38      	pop	{r3, r4, r5, pc}
 80164d4:	20014de8 	.word	0x20014de8

080164d8 <_lseek_r>:
 80164d8:	b538      	push	{r3, r4, r5, lr}
 80164da:	4d07      	ldr	r5, [pc, #28]	@ (80164f8 <_lseek_r+0x20>)
 80164dc:	4604      	mov	r4, r0
 80164de:	4608      	mov	r0, r1
 80164e0:	4611      	mov	r1, r2
 80164e2:	2200      	movs	r2, #0
 80164e4:	602a      	str	r2, [r5, #0]
 80164e6:	461a      	mov	r2, r3
 80164e8:	f7f0 fd15 	bl	8006f16 <_lseek>
 80164ec:	1c43      	adds	r3, r0, #1
 80164ee:	d102      	bne.n	80164f6 <_lseek_r+0x1e>
 80164f0:	682b      	ldr	r3, [r5, #0]
 80164f2:	b103      	cbz	r3, 80164f6 <_lseek_r+0x1e>
 80164f4:	6023      	str	r3, [r4, #0]
 80164f6:	bd38      	pop	{r3, r4, r5, pc}
 80164f8:	20014de8 	.word	0x20014de8

080164fc <_read_r>:
 80164fc:	b538      	push	{r3, r4, r5, lr}
 80164fe:	4d07      	ldr	r5, [pc, #28]	@ (801651c <_read_r+0x20>)
 8016500:	4604      	mov	r4, r0
 8016502:	4608      	mov	r0, r1
 8016504:	4611      	mov	r1, r2
 8016506:	2200      	movs	r2, #0
 8016508:	602a      	str	r2, [r5, #0]
 801650a:	461a      	mov	r2, r3
 801650c:	f7f0 fca3 	bl	8006e56 <_read>
 8016510:	1c43      	adds	r3, r0, #1
 8016512:	d102      	bne.n	801651a <_read_r+0x1e>
 8016514:	682b      	ldr	r3, [r5, #0]
 8016516:	b103      	cbz	r3, 801651a <_read_r+0x1e>
 8016518:	6023      	str	r3, [r4, #0]
 801651a:	bd38      	pop	{r3, r4, r5, pc}
 801651c:	20014de8 	.word	0x20014de8

08016520 <_write_r>:
 8016520:	b538      	push	{r3, r4, r5, lr}
 8016522:	4d07      	ldr	r5, [pc, #28]	@ (8016540 <_write_r+0x20>)
 8016524:	4604      	mov	r4, r0
 8016526:	4608      	mov	r0, r1
 8016528:	4611      	mov	r1, r2
 801652a:	2200      	movs	r2, #0
 801652c:	602a      	str	r2, [r5, #0]
 801652e:	461a      	mov	r2, r3
 8016530:	f7f0 fcae 	bl	8006e90 <_write>
 8016534:	1c43      	adds	r3, r0, #1
 8016536:	d102      	bne.n	801653e <_write_r+0x1e>
 8016538:	682b      	ldr	r3, [r5, #0]
 801653a:	b103      	cbz	r3, 801653e <_write_r+0x1e>
 801653c:	6023      	str	r3, [r4, #0]
 801653e:	bd38      	pop	{r3, r4, r5, pc}
 8016540:	20014de8 	.word	0x20014de8

08016544 <__errno>:
 8016544:	4b01      	ldr	r3, [pc, #4]	@ (801654c <__errno+0x8>)
 8016546:	6818      	ldr	r0, [r3, #0]
 8016548:	4770      	bx	lr
 801654a:	bf00      	nop
 801654c:	200001f4 	.word	0x200001f4

08016550 <__libc_init_array>:
 8016550:	b570      	push	{r4, r5, r6, lr}
 8016552:	4d0d      	ldr	r5, [pc, #52]	@ (8016588 <__libc_init_array+0x38>)
 8016554:	4c0d      	ldr	r4, [pc, #52]	@ (801658c <__libc_init_array+0x3c>)
 8016556:	1b64      	subs	r4, r4, r5
 8016558:	10a4      	asrs	r4, r4, #2
 801655a:	2600      	movs	r6, #0
 801655c:	42a6      	cmp	r6, r4
 801655e:	d109      	bne.n	8016574 <__libc_init_array+0x24>
 8016560:	4d0b      	ldr	r5, [pc, #44]	@ (8016590 <__libc_init_array+0x40>)
 8016562:	4c0c      	ldr	r4, [pc, #48]	@ (8016594 <__libc_init_array+0x44>)
 8016564:	f002 f878 	bl	8018658 <_init>
 8016568:	1b64      	subs	r4, r4, r5
 801656a:	10a4      	asrs	r4, r4, #2
 801656c:	2600      	movs	r6, #0
 801656e:	42a6      	cmp	r6, r4
 8016570:	d105      	bne.n	801657e <__libc_init_array+0x2e>
 8016572:	bd70      	pop	{r4, r5, r6, pc}
 8016574:	f855 3b04 	ldr.w	r3, [r5], #4
 8016578:	4798      	blx	r3
 801657a:	3601      	adds	r6, #1
 801657c:	e7ee      	b.n	801655c <__libc_init_array+0xc>
 801657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016582:	4798      	blx	r3
 8016584:	3601      	adds	r6, #1
 8016586:	e7f2      	b.n	801656e <__libc_init_array+0x1e>
 8016588:	08019410 	.word	0x08019410
 801658c:	08019410 	.word	0x08019410
 8016590:	08019410 	.word	0x08019410
 8016594:	08019414 	.word	0x08019414

08016598 <__retarget_lock_init_recursive>:
 8016598:	4770      	bx	lr

0801659a <__retarget_lock_acquire_recursive>:
 801659a:	4770      	bx	lr

0801659c <__retarget_lock_release_recursive>:
 801659c:	4770      	bx	lr

0801659e <memcpy>:
 801659e:	440a      	add	r2, r1
 80165a0:	4291      	cmp	r1, r2
 80165a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80165a6:	d100      	bne.n	80165aa <memcpy+0xc>
 80165a8:	4770      	bx	lr
 80165aa:	b510      	push	{r4, lr}
 80165ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80165b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80165b4:	4291      	cmp	r1, r2
 80165b6:	d1f9      	bne.n	80165ac <memcpy+0xe>
 80165b8:	bd10      	pop	{r4, pc}
 80165ba:	0000      	movs	r0, r0
 80165bc:	0000      	movs	r0, r0
	...

080165c0 <nan>:
 80165c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80165c8 <nan+0x8>
 80165c4:	4770      	bx	lr
 80165c6:	bf00      	nop
 80165c8:	00000000 	.word	0x00000000
 80165cc:	7ff80000 	.word	0x7ff80000

080165d0 <_free_r>:
 80165d0:	b538      	push	{r3, r4, r5, lr}
 80165d2:	4605      	mov	r5, r0
 80165d4:	2900      	cmp	r1, #0
 80165d6:	d041      	beq.n	801665c <_free_r+0x8c>
 80165d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80165dc:	1f0c      	subs	r4, r1, #4
 80165de:	2b00      	cmp	r3, #0
 80165e0:	bfb8      	it	lt
 80165e2:	18e4      	addlt	r4, r4, r3
 80165e4:	f000 fc2c 	bl	8016e40 <__malloc_lock>
 80165e8:	4a1d      	ldr	r2, [pc, #116]	@ (8016660 <_free_r+0x90>)
 80165ea:	6813      	ldr	r3, [r2, #0]
 80165ec:	b933      	cbnz	r3, 80165fc <_free_r+0x2c>
 80165ee:	6063      	str	r3, [r4, #4]
 80165f0:	6014      	str	r4, [r2, #0]
 80165f2:	4628      	mov	r0, r5
 80165f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80165f8:	f000 bc28 	b.w	8016e4c <__malloc_unlock>
 80165fc:	42a3      	cmp	r3, r4
 80165fe:	d908      	bls.n	8016612 <_free_r+0x42>
 8016600:	6820      	ldr	r0, [r4, #0]
 8016602:	1821      	adds	r1, r4, r0
 8016604:	428b      	cmp	r3, r1
 8016606:	bf01      	itttt	eq
 8016608:	6819      	ldreq	r1, [r3, #0]
 801660a:	685b      	ldreq	r3, [r3, #4]
 801660c:	1809      	addeq	r1, r1, r0
 801660e:	6021      	streq	r1, [r4, #0]
 8016610:	e7ed      	b.n	80165ee <_free_r+0x1e>
 8016612:	461a      	mov	r2, r3
 8016614:	685b      	ldr	r3, [r3, #4]
 8016616:	b10b      	cbz	r3, 801661c <_free_r+0x4c>
 8016618:	42a3      	cmp	r3, r4
 801661a:	d9fa      	bls.n	8016612 <_free_r+0x42>
 801661c:	6811      	ldr	r1, [r2, #0]
 801661e:	1850      	adds	r0, r2, r1
 8016620:	42a0      	cmp	r0, r4
 8016622:	d10b      	bne.n	801663c <_free_r+0x6c>
 8016624:	6820      	ldr	r0, [r4, #0]
 8016626:	4401      	add	r1, r0
 8016628:	1850      	adds	r0, r2, r1
 801662a:	4283      	cmp	r3, r0
 801662c:	6011      	str	r1, [r2, #0]
 801662e:	d1e0      	bne.n	80165f2 <_free_r+0x22>
 8016630:	6818      	ldr	r0, [r3, #0]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	6053      	str	r3, [r2, #4]
 8016636:	4408      	add	r0, r1
 8016638:	6010      	str	r0, [r2, #0]
 801663a:	e7da      	b.n	80165f2 <_free_r+0x22>
 801663c:	d902      	bls.n	8016644 <_free_r+0x74>
 801663e:	230c      	movs	r3, #12
 8016640:	602b      	str	r3, [r5, #0]
 8016642:	e7d6      	b.n	80165f2 <_free_r+0x22>
 8016644:	6820      	ldr	r0, [r4, #0]
 8016646:	1821      	adds	r1, r4, r0
 8016648:	428b      	cmp	r3, r1
 801664a:	bf04      	itt	eq
 801664c:	6819      	ldreq	r1, [r3, #0]
 801664e:	685b      	ldreq	r3, [r3, #4]
 8016650:	6063      	str	r3, [r4, #4]
 8016652:	bf04      	itt	eq
 8016654:	1809      	addeq	r1, r1, r0
 8016656:	6021      	streq	r1, [r4, #0]
 8016658:	6054      	str	r4, [r2, #4]
 801665a:	e7ca      	b.n	80165f2 <_free_r+0x22>
 801665c:	bd38      	pop	{r3, r4, r5, pc}
 801665e:	bf00      	nop
 8016660:	20014df4 	.word	0x20014df4

08016664 <rshift>:
 8016664:	6903      	ldr	r3, [r0, #16]
 8016666:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801666a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801666e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016672:	f100 0414 	add.w	r4, r0, #20
 8016676:	dd45      	ble.n	8016704 <rshift+0xa0>
 8016678:	f011 011f 	ands.w	r1, r1, #31
 801667c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016680:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016684:	d10c      	bne.n	80166a0 <rshift+0x3c>
 8016686:	f100 0710 	add.w	r7, r0, #16
 801668a:	4629      	mov	r1, r5
 801668c:	42b1      	cmp	r1, r6
 801668e:	d334      	bcc.n	80166fa <rshift+0x96>
 8016690:	1a9b      	subs	r3, r3, r2
 8016692:	009b      	lsls	r3, r3, #2
 8016694:	1eea      	subs	r2, r5, #3
 8016696:	4296      	cmp	r6, r2
 8016698:	bf38      	it	cc
 801669a:	2300      	movcc	r3, #0
 801669c:	4423      	add	r3, r4
 801669e:	e015      	b.n	80166cc <rshift+0x68>
 80166a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80166a4:	f1c1 0820 	rsb	r8, r1, #32
 80166a8:	40cf      	lsrs	r7, r1
 80166aa:	f105 0e04 	add.w	lr, r5, #4
 80166ae:	46a1      	mov	r9, r4
 80166b0:	4576      	cmp	r6, lr
 80166b2:	46f4      	mov	ip, lr
 80166b4:	d815      	bhi.n	80166e2 <rshift+0x7e>
 80166b6:	1a9a      	subs	r2, r3, r2
 80166b8:	0092      	lsls	r2, r2, #2
 80166ba:	3a04      	subs	r2, #4
 80166bc:	3501      	adds	r5, #1
 80166be:	42ae      	cmp	r6, r5
 80166c0:	bf38      	it	cc
 80166c2:	2200      	movcc	r2, #0
 80166c4:	18a3      	adds	r3, r4, r2
 80166c6:	50a7      	str	r7, [r4, r2]
 80166c8:	b107      	cbz	r7, 80166cc <rshift+0x68>
 80166ca:	3304      	adds	r3, #4
 80166cc:	1b1a      	subs	r2, r3, r4
 80166ce:	42a3      	cmp	r3, r4
 80166d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80166d4:	bf08      	it	eq
 80166d6:	2300      	moveq	r3, #0
 80166d8:	6102      	str	r2, [r0, #16]
 80166da:	bf08      	it	eq
 80166dc:	6143      	streq	r3, [r0, #20]
 80166de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80166e2:	f8dc c000 	ldr.w	ip, [ip]
 80166e6:	fa0c fc08 	lsl.w	ip, ip, r8
 80166ea:	ea4c 0707 	orr.w	r7, ip, r7
 80166ee:	f849 7b04 	str.w	r7, [r9], #4
 80166f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80166f6:	40cf      	lsrs	r7, r1
 80166f8:	e7da      	b.n	80166b0 <rshift+0x4c>
 80166fa:	f851 cb04 	ldr.w	ip, [r1], #4
 80166fe:	f847 cf04 	str.w	ip, [r7, #4]!
 8016702:	e7c3      	b.n	801668c <rshift+0x28>
 8016704:	4623      	mov	r3, r4
 8016706:	e7e1      	b.n	80166cc <rshift+0x68>

08016708 <__hexdig_fun>:
 8016708:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801670c:	2b09      	cmp	r3, #9
 801670e:	d802      	bhi.n	8016716 <__hexdig_fun+0xe>
 8016710:	3820      	subs	r0, #32
 8016712:	b2c0      	uxtb	r0, r0
 8016714:	4770      	bx	lr
 8016716:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801671a:	2b05      	cmp	r3, #5
 801671c:	d801      	bhi.n	8016722 <__hexdig_fun+0x1a>
 801671e:	3847      	subs	r0, #71	@ 0x47
 8016720:	e7f7      	b.n	8016712 <__hexdig_fun+0xa>
 8016722:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016726:	2b05      	cmp	r3, #5
 8016728:	d801      	bhi.n	801672e <__hexdig_fun+0x26>
 801672a:	3827      	subs	r0, #39	@ 0x27
 801672c:	e7f1      	b.n	8016712 <__hexdig_fun+0xa>
 801672e:	2000      	movs	r0, #0
 8016730:	4770      	bx	lr
	...

08016734 <__gethex>:
 8016734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016738:	b085      	sub	sp, #20
 801673a:	468a      	mov	sl, r1
 801673c:	9302      	str	r3, [sp, #8]
 801673e:	680b      	ldr	r3, [r1, #0]
 8016740:	9001      	str	r0, [sp, #4]
 8016742:	4690      	mov	r8, r2
 8016744:	1c9c      	adds	r4, r3, #2
 8016746:	46a1      	mov	r9, r4
 8016748:	f814 0b01 	ldrb.w	r0, [r4], #1
 801674c:	2830      	cmp	r0, #48	@ 0x30
 801674e:	d0fa      	beq.n	8016746 <__gethex+0x12>
 8016750:	eba9 0303 	sub.w	r3, r9, r3
 8016754:	f1a3 0b02 	sub.w	fp, r3, #2
 8016758:	f7ff ffd6 	bl	8016708 <__hexdig_fun>
 801675c:	4605      	mov	r5, r0
 801675e:	2800      	cmp	r0, #0
 8016760:	d168      	bne.n	8016834 <__gethex+0x100>
 8016762:	49a0      	ldr	r1, [pc, #640]	@ (80169e4 <__gethex+0x2b0>)
 8016764:	2201      	movs	r2, #1
 8016766:	4648      	mov	r0, r9
 8016768:	f7ff fe6b 	bl	8016442 <strncmp>
 801676c:	4607      	mov	r7, r0
 801676e:	2800      	cmp	r0, #0
 8016770:	d167      	bne.n	8016842 <__gethex+0x10e>
 8016772:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016776:	4626      	mov	r6, r4
 8016778:	f7ff ffc6 	bl	8016708 <__hexdig_fun>
 801677c:	2800      	cmp	r0, #0
 801677e:	d062      	beq.n	8016846 <__gethex+0x112>
 8016780:	4623      	mov	r3, r4
 8016782:	7818      	ldrb	r0, [r3, #0]
 8016784:	2830      	cmp	r0, #48	@ 0x30
 8016786:	4699      	mov	r9, r3
 8016788:	f103 0301 	add.w	r3, r3, #1
 801678c:	d0f9      	beq.n	8016782 <__gethex+0x4e>
 801678e:	f7ff ffbb 	bl	8016708 <__hexdig_fun>
 8016792:	fab0 f580 	clz	r5, r0
 8016796:	096d      	lsrs	r5, r5, #5
 8016798:	f04f 0b01 	mov.w	fp, #1
 801679c:	464a      	mov	r2, r9
 801679e:	4616      	mov	r6, r2
 80167a0:	3201      	adds	r2, #1
 80167a2:	7830      	ldrb	r0, [r6, #0]
 80167a4:	f7ff ffb0 	bl	8016708 <__hexdig_fun>
 80167a8:	2800      	cmp	r0, #0
 80167aa:	d1f8      	bne.n	801679e <__gethex+0x6a>
 80167ac:	498d      	ldr	r1, [pc, #564]	@ (80169e4 <__gethex+0x2b0>)
 80167ae:	2201      	movs	r2, #1
 80167b0:	4630      	mov	r0, r6
 80167b2:	f7ff fe46 	bl	8016442 <strncmp>
 80167b6:	2800      	cmp	r0, #0
 80167b8:	d13f      	bne.n	801683a <__gethex+0x106>
 80167ba:	b944      	cbnz	r4, 80167ce <__gethex+0x9a>
 80167bc:	1c74      	adds	r4, r6, #1
 80167be:	4622      	mov	r2, r4
 80167c0:	4616      	mov	r6, r2
 80167c2:	3201      	adds	r2, #1
 80167c4:	7830      	ldrb	r0, [r6, #0]
 80167c6:	f7ff ff9f 	bl	8016708 <__hexdig_fun>
 80167ca:	2800      	cmp	r0, #0
 80167cc:	d1f8      	bne.n	80167c0 <__gethex+0x8c>
 80167ce:	1ba4      	subs	r4, r4, r6
 80167d0:	00a7      	lsls	r7, r4, #2
 80167d2:	7833      	ldrb	r3, [r6, #0]
 80167d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80167d8:	2b50      	cmp	r3, #80	@ 0x50
 80167da:	d13e      	bne.n	801685a <__gethex+0x126>
 80167dc:	7873      	ldrb	r3, [r6, #1]
 80167de:	2b2b      	cmp	r3, #43	@ 0x2b
 80167e0:	d033      	beq.n	801684a <__gethex+0x116>
 80167e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80167e4:	d034      	beq.n	8016850 <__gethex+0x11c>
 80167e6:	1c71      	adds	r1, r6, #1
 80167e8:	2400      	movs	r4, #0
 80167ea:	7808      	ldrb	r0, [r1, #0]
 80167ec:	f7ff ff8c 	bl	8016708 <__hexdig_fun>
 80167f0:	1e43      	subs	r3, r0, #1
 80167f2:	b2db      	uxtb	r3, r3
 80167f4:	2b18      	cmp	r3, #24
 80167f6:	d830      	bhi.n	801685a <__gethex+0x126>
 80167f8:	f1a0 0210 	sub.w	r2, r0, #16
 80167fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016800:	f7ff ff82 	bl	8016708 <__hexdig_fun>
 8016804:	f100 3cff 	add.w	ip, r0, #4294967295
 8016808:	fa5f fc8c 	uxtb.w	ip, ip
 801680c:	f1bc 0f18 	cmp.w	ip, #24
 8016810:	f04f 030a 	mov.w	r3, #10
 8016814:	d91e      	bls.n	8016854 <__gethex+0x120>
 8016816:	b104      	cbz	r4, 801681a <__gethex+0xe6>
 8016818:	4252      	negs	r2, r2
 801681a:	4417      	add	r7, r2
 801681c:	f8ca 1000 	str.w	r1, [sl]
 8016820:	b1ed      	cbz	r5, 801685e <__gethex+0x12a>
 8016822:	f1bb 0f00 	cmp.w	fp, #0
 8016826:	bf0c      	ite	eq
 8016828:	2506      	moveq	r5, #6
 801682a:	2500      	movne	r5, #0
 801682c:	4628      	mov	r0, r5
 801682e:	b005      	add	sp, #20
 8016830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016834:	2500      	movs	r5, #0
 8016836:	462c      	mov	r4, r5
 8016838:	e7b0      	b.n	801679c <__gethex+0x68>
 801683a:	2c00      	cmp	r4, #0
 801683c:	d1c7      	bne.n	80167ce <__gethex+0x9a>
 801683e:	4627      	mov	r7, r4
 8016840:	e7c7      	b.n	80167d2 <__gethex+0x9e>
 8016842:	464e      	mov	r6, r9
 8016844:	462f      	mov	r7, r5
 8016846:	2501      	movs	r5, #1
 8016848:	e7c3      	b.n	80167d2 <__gethex+0x9e>
 801684a:	2400      	movs	r4, #0
 801684c:	1cb1      	adds	r1, r6, #2
 801684e:	e7cc      	b.n	80167ea <__gethex+0xb6>
 8016850:	2401      	movs	r4, #1
 8016852:	e7fb      	b.n	801684c <__gethex+0x118>
 8016854:	fb03 0002 	mla	r0, r3, r2, r0
 8016858:	e7ce      	b.n	80167f8 <__gethex+0xc4>
 801685a:	4631      	mov	r1, r6
 801685c:	e7de      	b.n	801681c <__gethex+0xe8>
 801685e:	eba6 0309 	sub.w	r3, r6, r9
 8016862:	3b01      	subs	r3, #1
 8016864:	4629      	mov	r1, r5
 8016866:	2b07      	cmp	r3, #7
 8016868:	dc0a      	bgt.n	8016880 <__gethex+0x14c>
 801686a:	9801      	ldr	r0, [sp, #4]
 801686c:	f000 faf4 	bl	8016e58 <_Balloc>
 8016870:	4604      	mov	r4, r0
 8016872:	b940      	cbnz	r0, 8016886 <__gethex+0x152>
 8016874:	4b5c      	ldr	r3, [pc, #368]	@ (80169e8 <__gethex+0x2b4>)
 8016876:	4602      	mov	r2, r0
 8016878:	21e4      	movs	r1, #228	@ 0xe4
 801687a:	485c      	ldr	r0, [pc, #368]	@ (80169ec <__gethex+0x2b8>)
 801687c:	f001 fb4c 	bl	8017f18 <__assert_func>
 8016880:	3101      	adds	r1, #1
 8016882:	105b      	asrs	r3, r3, #1
 8016884:	e7ef      	b.n	8016866 <__gethex+0x132>
 8016886:	f100 0a14 	add.w	sl, r0, #20
 801688a:	2300      	movs	r3, #0
 801688c:	4655      	mov	r5, sl
 801688e:	469b      	mov	fp, r3
 8016890:	45b1      	cmp	r9, r6
 8016892:	d337      	bcc.n	8016904 <__gethex+0x1d0>
 8016894:	f845 bb04 	str.w	fp, [r5], #4
 8016898:	eba5 050a 	sub.w	r5, r5, sl
 801689c:	10ad      	asrs	r5, r5, #2
 801689e:	6125      	str	r5, [r4, #16]
 80168a0:	4658      	mov	r0, fp
 80168a2:	f000 fbcb 	bl	801703c <__hi0bits>
 80168a6:	016d      	lsls	r5, r5, #5
 80168a8:	f8d8 6000 	ldr.w	r6, [r8]
 80168ac:	1a2d      	subs	r5, r5, r0
 80168ae:	42b5      	cmp	r5, r6
 80168b0:	dd54      	ble.n	801695c <__gethex+0x228>
 80168b2:	1bad      	subs	r5, r5, r6
 80168b4:	4629      	mov	r1, r5
 80168b6:	4620      	mov	r0, r4
 80168b8:	f000 ff5f 	bl	801777a <__any_on>
 80168bc:	4681      	mov	r9, r0
 80168be:	b178      	cbz	r0, 80168e0 <__gethex+0x1ac>
 80168c0:	1e6b      	subs	r3, r5, #1
 80168c2:	1159      	asrs	r1, r3, #5
 80168c4:	f003 021f 	and.w	r2, r3, #31
 80168c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80168cc:	f04f 0901 	mov.w	r9, #1
 80168d0:	fa09 f202 	lsl.w	r2, r9, r2
 80168d4:	420a      	tst	r2, r1
 80168d6:	d003      	beq.n	80168e0 <__gethex+0x1ac>
 80168d8:	454b      	cmp	r3, r9
 80168da:	dc36      	bgt.n	801694a <__gethex+0x216>
 80168dc:	f04f 0902 	mov.w	r9, #2
 80168e0:	4629      	mov	r1, r5
 80168e2:	4620      	mov	r0, r4
 80168e4:	f7ff febe 	bl	8016664 <rshift>
 80168e8:	442f      	add	r7, r5
 80168ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80168ee:	42bb      	cmp	r3, r7
 80168f0:	da42      	bge.n	8016978 <__gethex+0x244>
 80168f2:	9801      	ldr	r0, [sp, #4]
 80168f4:	4621      	mov	r1, r4
 80168f6:	f000 faef 	bl	8016ed8 <_Bfree>
 80168fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80168fc:	2300      	movs	r3, #0
 80168fe:	6013      	str	r3, [r2, #0]
 8016900:	25a3      	movs	r5, #163	@ 0xa3
 8016902:	e793      	b.n	801682c <__gethex+0xf8>
 8016904:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016908:	2a2e      	cmp	r2, #46	@ 0x2e
 801690a:	d012      	beq.n	8016932 <__gethex+0x1fe>
 801690c:	2b20      	cmp	r3, #32
 801690e:	d104      	bne.n	801691a <__gethex+0x1e6>
 8016910:	f845 bb04 	str.w	fp, [r5], #4
 8016914:	f04f 0b00 	mov.w	fp, #0
 8016918:	465b      	mov	r3, fp
 801691a:	7830      	ldrb	r0, [r6, #0]
 801691c:	9303      	str	r3, [sp, #12]
 801691e:	f7ff fef3 	bl	8016708 <__hexdig_fun>
 8016922:	9b03      	ldr	r3, [sp, #12]
 8016924:	f000 000f 	and.w	r0, r0, #15
 8016928:	4098      	lsls	r0, r3
 801692a:	ea4b 0b00 	orr.w	fp, fp, r0
 801692e:	3304      	adds	r3, #4
 8016930:	e7ae      	b.n	8016890 <__gethex+0x15c>
 8016932:	45b1      	cmp	r9, r6
 8016934:	d8ea      	bhi.n	801690c <__gethex+0x1d8>
 8016936:	492b      	ldr	r1, [pc, #172]	@ (80169e4 <__gethex+0x2b0>)
 8016938:	9303      	str	r3, [sp, #12]
 801693a:	2201      	movs	r2, #1
 801693c:	4630      	mov	r0, r6
 801693e:	f7ff fd80 	bl	8016442 <strncmp>
 8016942:	9b03      	ldr	r3, [sp, #12]
 8016944:	2800      	cmp	r0, #0
 8016946:	d1e1      	bne.n	801690c <__gethex+0x1d8>
 8016948:	e7a2      	b.n	8016890 <__gethex+0x15c>
 801694a:	1ea9      	subs	r1, r5, #2
 801694c:	4620      	mov	r0, r4
 801694e:	f000 ff14 	bl	801777a <__any_on>
 8016952:	2800      	cmp	r0, #0
 8016954:	d0c2      	beq.n	80168dc <__gethex+0x1a8>
 8016956:	f04f 0903 	mov.w	r9, #3
 801695a:	e7c1      	b.n	80168e0 <__gethex+0x1ac>
 801695c:	da09      	bge.n	8016972 <__gethex+0x23e>
 801695e:	1b75      	subs	r5, r6, r5
 8016960:	4621      	mov	r1, r4
 8016962:	9801      	ldr	r0, [sp, #4]
 8016964:	462a      	mov	r2, r5
 8016966:	f000 fccf 	bl	8017308 <__lshift>
 801696a:	1b7f      	subs	r7, r7, r5
 801696c:	4604      	mov	r4, r0
 801696e:	f100 0a14 	add.w	sl, r0, #20
 8016972:	f04f 0900 	mov.w	r9, #0
 8016976:	e7b8      	b.n	80168ea <__gethex+0x1b6>
 8016978:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801697c:	42bd      	cmp	r5, r7
 801697e:	dd6f      	ble.n	8016a60 <__gethex+0x32c>
 8016980:	1bed      	subs	r5, r5, r7
 8016982:	42ae      	cmp	r6, r5
 8016984:	dc34      	bgt.n	80169f0 <__gethex+0x2bc>
 8016986:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801698a:	2b02      	cmp	r3, #2
 801698c:	d022      	beq.n	80169d4 <__gethex+0x2a0>
 801698e:	2b03      	cmp	r3, #3
 8016990:	d024      	beq.n	80169dc <__gethex+0x2a8>
 8016992:	2b01      	cmp	r3, #1
 8016994:	d115      	bne.n	80169c2 <__gethex+0x28e>
 8016996:	42ae      	cmp	r6, r5
 8016998:	d113      	bne.n	80169c2 <__gethex+0x28e>
 801699a:	2e01      	cmp	r6, #1
 801699c:	d10b      	bne.n	80169b6 <__gethex+0x282>
 801699e:	9a02      	ldr	r2, [sp, #8]
 80169a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80169a4:	6013      	str	r3, [r2, #0]
 80169a6:	2301      	movs	r3, #1
 80169a8:	6123      	str	r3, [r4, #16]
 80169aa:	f8ca 3000 	str.w	r3, [sl]
 80169ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169b0:	2562      	movs	r5, #98	@ 0x62
 80169b2:	601c      	str	r4, [r3, #0]
 80169b4:	e73a      	b.n	801682c <__gethex+0xf8>
 80169b6:	1e71      	subs	r1, r6, #1
 80169b8:	4620      	mov	r0, r4
 80169ba:	f000 fede 	bl	801777a <__any_on>
 80169be:	2800      	cmp	r0, #0
 80169c0:	d1ed      	bne.n	801699e <__gethex+0x26a>
 80169c2:	9801      	ldr	r0, [sp, #4]
 80169c4:	4621      	mov	r1, r4
 80169c6:	f000 fa87 	bl	8016ed8 <_Bfree>
 80169ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169cc:	2300      	movs	r3, #0
 80169ce:	6013      	str	r3, [r2, #0]
 80169d0:	2550      	movs	r5, #80	@ 0x50
 80169d2:	e72b      	b.n	801682c <__gethex+0xf8>
 80169d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1f3      	bne.n	80169c2 <__gethex+0x28e>
 80169da:	e7e0      	b.n	801699e <__gethex+0x26a>
 80169dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d1dd      	bne.n	801699e <__gethex+0x26a>
 80169e2:	e7ee      	b.n	80169c2 <__gethex+0x28e>
 80169e4:	08019050 	.word	0x08019050
 80169e8:	080191b9 	.word	0x080191b9
 80169ec:	080191ca 	.word	0x080191ca
 80169f0:	1e6f      	subs	r7, r5, #1
 80169f2:	f1b9 0f00 	cmp.w	r9, #0
 80169f6:	d130      	bne.n	8016a5a <__gethex+0x326>
 80169f8:	b127      	cbz	r7, 8016a04 <__gethex+0x2d0>
 80169fa:	4639      	mov	r1, r7
 80169fc:	4620      	mov	r0, r4
 80169fe:	f000 febc 	bl	801777a <__any_on>
 8016a02:	4681      	mov	r9, r0
 8016a04:	117a      	asrs	r2, r7, #5
 8016a06:	2301      	movs	r3, #1
 8016a08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8016a0c:	f007 071f 	and.w	r7, r7, #31
 8016a10:	40bb      	lsls	r3, r7
 8016a12:	4213      	tst	r3, r2
 8016a14:	4629      	mov	r1, r5
 8016a16:	4620      	mov	r0, r4
 8016a18:	bf18      	it	ne
 8016a1a:	f049 0902 	orrne.w	r9, r9, #2
 8016a1e:	f7ff fe21 	bl	8016664 <rshift>
 8016a22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016a26:	1b76      	subs	r6, r6, r5
 8016a28:	2502      	movs	r5, #2
 8016a2a:	f1b9 0f00 	cmp.w	r9, #0
 8016a2e:	d047      	beq.n	8016ac0 <__gethex+0x38c>
 8016a30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a34:	2b02      	cmp	r3, #2
 8016a36:	d015      	beq.n	8016a64 <__gethex+0x330>
 8016a38:	2b03      	cmp	r3, #3
 8016a3a:	d017      	beq.n	8016a6c <__gethex+0x338>
 8016a3c:	2b01      	cmp	r3, #1
 8016a3e:	d109      	bne.n	8016a54 <__gethex+0x320>
 8016a40:	f019 0f02 	tst.w	r9, #2
 8016a44:	d006      	beq.n	8016a54 <__gethex+0x320>
 8016a46:	f8da 3000 	ldr.w	r3, [sl]
 8016a4a:	ea49 0903 	orr.w	r9, r9, r3
 8016a4e:	f019 0f01 	tst.w	r9, #1
 8016a52:	d10e      	bne.n	8016a72 <__gethex+0x33e>
 8016a54:	f045 0510 	orr.w	r5, r5, #16
 8016a58:	e032      	b.n	8016ac0 <__gethex+0x38c>
 8016a5a:	f04f 0901 	mov.w	r9, #1
 8016a5e:	e7d1      	b.n	8016a04 <__gethex+0x2d0>
 8016a60:	2501      	movs	r5, #1
 8016a62:	e7e2      	b.n	8016a2a <__gethex+0x2f6>
 8016a64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a66:	f1c3 0301 	rsb	r3, r3, #1
 8016a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d0f0      	beq.n	8016a54 <__gethex+0x320>
 8016a72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8016a76:	f104 0314 	add.w	r3, r4, #20
 8016a7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016a7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016a82:	f04f 0c00 	mov.w	ip, #0
 8016a86:	4618      	mov	r0, r3
 8016a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016a90:	d01b      	beq.n	8016aca <__gethex+0x396>
 8016a92:	3201      	adds	r2, #1
 8016a94:	6002      	str	r2, [r0, #0]
 8016a96:	2d02      	cmp	r5, #2
 8016a98:	f104 0314 	add.w	r3, r4, #20
 8016a9c:	d13c      	bne.n	8016b18 <__gethex+0x3e4>
 8016a9e:	f8d8 2000 	ldr.w	r2, [r8]
 8016aa2:	3a01      	subs	r2, #1
 8016aa4:	42b2      	cmp	r2, r6
 8016aa6:	d109      	bne.n	8016abc <__gethex+0x388>
 8016aa8:	1171      	asrs	r1, r6, #5
 8016aaa:	2201      	movs	r2, #1
 8016aac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016ab0:	f006 061f 	and.w	r6, r6, #31
 8016ab4:	fa02 f606 	lsl.w	r6, r2, r6
 8016ab8:	421e      	tst	r6, r3
 8016aba:	d13a      	bne.n	8016b32 <__gethex+0x3fe>
 8016abc:	f045 0520 	orr.w	r5, r5, #32
 8016ac0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016ac2:	601c      	str	r4, [r3, #0]
 8016ac4:	9b02      	ldr	r3, [sp, #8]
 8016ac6:	601f      	str	r7, [r3, #0]
 8016ac8:	e6b0      	b.n	801682c <__gethex+0xf8>
 8016aca:	4299      	cmp	r1, r3
 8016acc:	f843 cc04 	str.w	ip, [r3, #-4]
 8016ad0:	d8d9      	bhi.n	8016a86 <__gethex+0x352>
 8016ad2:	68a3      	ldr	r3, [r4, #8]
 8016ad4:	459b      	cmp	fp, r3
 8016ad6:	db17      	blt.n	8016b08 <__gethex+0x3d4>
 8016ad8:	6861      	ldr	r1, [r4, #4]
 8016ada:	9801      	ldr	r0, [sp, #4]
 8016adc:	3101      	adds	r1, #1
 8016ade:	f000 f9bb 	bl	8016e58 <_Balloc>
 8016ae2:	4681      	mov	r9, r0
 8016ae4:	b918      	cbnz	r0, 8016aee <__gethex+0x3ba>
 8016ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8016b50 <__gethex+0x41c>)
 8016ae8:	4602      	mov	r2, r0
 8016aea:	2184      	movs	r1, #132	@ 0x84
 8016aec:	e6c5      	b.n	801687a <__gethex+0x146>
 8016aee:	6922      	ldr	r2, [r4, #16]
 8016af0:	3202      	adds	r2, #2
 8016af2:	f104 010c 	add.w	r1, r4, #12
 8016af6:	0092      	lsls	r2, r2, #2
 8016af8:	300c      	adds	r0, #12
 8016afa:	f7ff fd50 	bl	801659e <memcpy>
 8016afe:	4621      	mov	r1, r4
 8016b00:	9801      	ldr	r0, [sp, #4]
 8016b02:	f000 f9e9 	bl	8016ed8 <_Bfree>
 8016b06:	464c      	mov	r4, r9
 8016b08:	6923      	ldr	r3, [r4, #16]
 8016b0a:	1c5a      	adds	r2, r3, #1
 8016b0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016b10:	6122      	str	r2, [r4, #16]
 8016b12:	2201      	movs	r2, #1
 8016b14:	615a      	str	r2, [r3, #20]
 8016b16:	e7be      	b.n	8016a96 <__gethex+0x362>
 8016b18:	6922      	ldr	r2, [r4, #16]
 8016b1a:	455a      	cmp	r2, fp
 8016b1c:	dd0b      	ble.n	8016b36 <__gethex+0x402>
 8016b1e:	2101      	movs	r1, #1
 8016b20:	4620      	mov	r0, r4
 8016b22:	f7ff fd9f 	bl	8016664 <rshift>
 8016b26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b2a:	3701      	adds	r7, #1
 8016b2c:	42bb      	cmp	r3, r7
 8016b2e:	f6ff aee0 	blt.w	80168f2 <__gethex+0x1be>
 8016b32:	2501      	movs	r5, #1
 8016b34:	e7c2      	b.n	8016abc <__gethex+0x388>
 8016b36:	f016 061f 	ands.w	r6, r6, #31
 8016b3a:	d0fa      	beq.n	8016b32 <__gethex+0x3fe>
 8016b3c:	4453      	add	r3, sl
 8016b3e:	f1c6 0620 	rsb	r6, r6, #32
 8016b42:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016b46:	f000 fa79 	bl	801703c <__hi0bits>
 8016b4a:	42b0      	cmp	r0, r6
 8016b4c:	dbe7      	blt.n	8016b1e <__gethex+0x3ea>
 8016b4e:	e7f0      	b.n	8016b32 <__gethex+0x3fe>
 8016b50:	080191b9 	.word	0x080191b9

08016b54 <L_shift>:
 8016b54:	f1c2 0208 	rsb	r2, r2, #8
 8016b58:	0092      	lsls	r2, r2, #2
 8016b5a:	b570      	push	{r4, r5, r6, lr}
 8016b5c:	f1c2 0620 	rsb	r6, r2, #32
 8016b60:	6843      	ldr	r3, [r0, #4]
 8016b62:	6804      	ldr	r4, [r0, #0]
 8016b64:	fa03 f506 	lsl.w	r5, r3, r6
 8016b68:	432c      	orrs	r4, r5
 8016b6a:	40d3      	lsrs	r3, r2
 8016b6c:	6004      	str	r4, [r0, #0]
 8016b6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8016b72:	4288      	cmp	r0, r1
 8016b74:	d3f4      	bcc.n	8016b60 <L_shift+0xc>
 8016b76:	bd70      	pop	{r4, r5, r6, pc}

08016b78 <__match>:
 8016b78:	b530      	push	{r4, r5, lr}
 8016b7a:	6803      	ldr	r3, [r0, #0]
 8016b7c:	3301      	adds	r3, #1
 8016b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b82:	b914      	cbnz	r4, 8016b8a <__match+0x12>
 8016b84:	6003      	str	r3, [r0, #0]
 8016b86:	2001      	movs	r0, #1
 8016b88:	bd30      	pop	{r4, r5, pc}
 8016b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b8e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8016b92:	2d19      	cmp	r5, #25
 8016b94:	bf98      	it	ls
 8016b96:	3220      	addls	r2, #32
 8016b98:	42a2      	cmp	r2, r4
 8016b9a:	d0f0      	beq.n	8016b7e <__match+0x6>
 8016b9c:	2000      	movs	r0, #0
 8016b9e:	e7f3      	b.n	8016b88 <__match+0x10>

08016ba0 <__hexnan>:
 8016ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ba4:	680b      	ldr	r3, [r1, #0]
 8016ba6:	6801      	ldr	r1, [r0, #0]
 8016ba8:	115e      	asrs	r6, r3, #5
 8016baa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016bae:	f013 031f 	ands.w	r3, r3, #31
 8016bb2:	b087      	sub	sp, #28
 8016bb4:	bf18      	it	ne
 8016bb6:	3604      	addne	r6, #4
 8016bb8:	2500      	movs	r5, #0
 8016bba:	1f37      	subs	r7, r6, #4
 8016bbc:	4682      	mov	sl, r0
 8016bbe:	4690      	mov	r8, r2
 8016bc0:	9301      	str	r3, [sp, #4]
 8016bc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8016bc6:	46b9      	mov	r9, r7
 8016bc8:	463c      	mov	r4, r7
 8016bca:	9502      	str	r5, [sp, #8]
 8016bcc:	46ab      	mov	fp, r5
 8016bce:	784a      	ldrb	r2, [r1, #1]
 8016bd0:	1c4b      	adds	r3, r1, #1
 8016bd2:	9303      	str	r3, [sp, #12]
 8016bd4:	b342      	cbz	r2, 8016c28 <__hexnan+0x88>
 8016bd6:	4610      	mov	r0, r2
 8016bd8:	9105      	str	r1, [sp, #20]
 8016bda:	9204      	str	r2, [sp, #16]
 8016bdc:	f7ff fd94 	bl	8016708 <__hexdig_fun>
 8016be0:	2800      	cmp	r0, #0
 8016be2:	d151      	bne.n	8016c88 <__hexnan+0xe8>
 8016be4:	9a04      	ldr	r2, [sp, #16]
 8016be6:	9905      	ldr	r1, [sp, #20]
 8016be8:	2a20      	cmp	r2, #32
 8016bea:	d818      	bhi.n	8016c1e <__hexnan+0x7e>
 8016bec:	9b02      	ldr	r3, [sp, #8]
 8016bee:	459b      	cmp	fp, r3
 8016bf0:	dd13      	ble.n	8016c1a <__hexnan+0x7a>
 8016bf2:	454c      	cmp	r4, r9
 8016bf4:	d206      	bcs.n	8016c04 <__hexnan+0x64>
 8016bf6:	2d07      	cmp	r5, #7
 8016bf8:	dc04      	bgt.n	8016c04 <__hexnan+0x64>
 8016bfa:	462a      	mov	r2, r5
 8016bfc:	4649      	mov	r1, r9
 8016bfe:	4620      	mov	r0, r4
 8016c00:	f7ff ffa8 	bl	8016b54 <L_shift>
 8016c04:	4544      	cmp	r4, r8
 8016c06:	d952      	bls.n	8016cae <__hexnan+0x10e>
 8016c08:	2300      	movs	r3, #0
 8016c0a:	f1a4 0904 	sub.w	r9, r4, #4
 8016c0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c12:	f8cd b008 	str.w	fp, [sp, #8]
 8016c16:	464c      	mov	r4, r9
 8016c18:	461d      	mov	r5, r3
 8016c1a:	9903      	ldr	r1, [sp, #12]
 8016c1c:	e7d7      	b.n	8016bce <__hexnan+0x2e>
 8016c1e:	2a29      	cmp	r2, #41	@ 0x29
 8016c20:	d157      	bne.n	8016cd2 <__hexnan+0x132>
 8016c22:	3102      	adds	r1, #2
 8016c24:	f8ca 1000 	str.w	r1, [sl]
 8016c28:	f1bb 0f00 	cmp.w	fp, #0
 8016c2c:	d051      	beq.n	8016cd2 <__hexnan+0x132>
 8016c2e:	454c      	cmp	r4, r9
 8016c30:	d206      	bcs.n	8016c40 <__hexnan+0xa0>
 8016c32:	2d07      	cmp	r5, #7
 8016c34:	dc04      	bgt.n	8016c40 <__hexnan+0xa0>
 8016c36:	462a      	mov	r2, r5
 8016c38:	4649      	mov	r1, r9
 8016c3a:	4620      	mov	r0, r4
 8016c3c:	f7ff ff8a 	bl	8016b54 <L_shift>
 8016c40:	4544      	cmp	r4, r8
 8016c42:	d936      	bls.n	8016cb2 <__hexnan+0x112>
 8016c44:	f1a8 0204 	sub.w	r2, r8, #4
 8016c48:	4623      	mov	r3, r4
 8016c4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8016c4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016c52:	429f      	cmp	r7, r3
 8016c54:	d2f9      	bcs.n	8016c4a <__hexnan+0xaa>
 8016c56:	1b3b      	subs	r3, r7, r4
 8016c58:	f023 0303 	bic.w	r3, r3, #3
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	3401      	adds	r4, #1
 8016c60:	3e03      	subs	r6, #3
 8016c62:	42b4      	cmp	r4, r6
 8016c64:	bf88      	it	hi
 8016c66:	2304      	movhi	r3, #4
 8016c68:	4443      	add	r3, r8
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	f843 2b04 	str.w	r2, [r3], #4
 8016c70:	429f      	cmp	r7, r3
 8016c72:	d2fb      	bcs.n	8016c6c <__hexnan+0xcc>
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	b91b      	cbnz	r3, 8016c80 <__hexnan+0xe0>
 8016c78:	4547      	cmp	r7, r8
 8016c7a:	d128      	bne.n	8016cce <__hexnan+0x12e>
 8016c7c:	2301      	movs	r3, #1
 8016c7e:	603b      	str	r3, [r7, #0]
 8016c80:	2005      	movs	r0, #5
 8016c82:	b007      	add	sp, #28
 8016c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c88:	3501      	adds	r5, #1
 8016c8a:	2d08      	cmp	r5, #8
 8016c8c:	f10b 0b01 	add.w	fp, fp, #1
 8016c90:	dd06      	ble.n	8016ca0 <__hexnan+0x100>
 8016c92:	4544      	cmp	r4, r8
 8016c94:	d9c1      	bls.n	8016c1a <__hexnan+0x7a>
 8016c96:	2300      	movs	r3, #0
 8016c98:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c9c:	2501      	movs	r5, #1
 8016c9e:	3c04      	subs	r4, #4
 8016ca0:	6822      	ldr	r2, [r4, #0]
 8016ca2:	f000 000f 	and.w	r0, r0, #15
 8016ca6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016caa:	6020      	str	r0, [r4, #0]
 8016cac:	e7b5      	b.n	8016c1a <__hexnan+0x7a>
 8016cae:	2508      	movs	r5, #8
 8016cb0:	e7b3      	b.n	8016c1a <__hexnan+0x7a>
 8016cb2:	9b01      	ldr	r3, [sp, #4]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d0dd      	beq.n	8016c74 <__hexnan+0xd4>
 8016cb8:	f1c3 0320 	rsb	r3, r3, #32
 8016cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8016cc0:	40da      	lsrs	r2, r3
 8016cc2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016cc6:	4013      	ands	r3, r2
 8016cc8:	f846 3c04 	str.w	r3, [r6, #-4]
 8016ccc:	e7d2      	b.n	8016c74 <__hexnan+0xd4>
 8016cce:	3f04      	subs	r7, #4
 8016cd0:	e7d0      	b.n	8016c74 <__hexnan+0xd4>
 8016cd2:	2004      	movs	r0, #4
 8016cd4:	e7d5      	b.n	8016c82 <__hexnan+0xe2>
	...

08016cd8 <sbrk_aligned>:
 8016cd8:	b570      	push	{r4, r5, r6, lr}
 8016cda:	4e0f      	ldr	r6, [pc, #60]	@ (8016d18 <sbrk_aligned+0x40>)
 8016cdc:	460c      	mov	r4, r1
 8016cde:	6831      	ldr	r1, [r6, #0]
 8016ce0:	4605      	mov	r5, r0
 8016ce2:	b911      	cbnz	r1, 8016cea <sbrk_aligned+0x12>
 8016ce4:	f001 f908 	bl	8017ef8 <_sbrk_r>
 8016ce8:	6030      	str	r0, [r6, #0]
 8016cea:	4621      	mov	r1, r4
 8016cec:	4628      	mov	r0, r5
 8016cee:	f001 f903 	bl	8017ef8 <_sbrk_r>
 8016cf2:	1c43      	adds	r3, r0, #1
 8016cf4:	d103      	bne.n	8016cfe <sbrk_aligned+0x26>
 8016cf6:	f04f 34ff 	mov.w	r4, #4294967295
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	bd70      	pop	{r4, r5, r6, pc}
 8016cfe:	1cc4      	adds	r4, r0, #3
 8016d00:	f024 0403 	bic.w	r4, r4, #3
 8016d04:	42a0      	cmp	r0, r4
 8016d06:	d0f8      	beq.n	8016cfa <sbrk_aligned+0x22>
 8016d08:	1a21      	subs	r1, r4, r0
 8016d0a:	4628      	mov	r0, r5
 8016d0c:	f001 f8f4 	bl	8017ef8 <_sbrk_r>
 8016d10:	3001      	adds	r0, #1
 8016d12:	d1f2      	bne.n	8016cfa <sbrk_aligned+0x22>
 8016d14:	e7ef      	b.n	8016cf6 <sbrk_aligned+0x1e>
 8016d16:	bf00      	nop
 8016d18:	20014df0 	.word	0x20014df0

08016d1c <_malloc_r>:
 8016d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d20:	1ccd      	adds	r5, r1, #3
 8016d22:	f025 0503 	bic.w	r5, r5, #3
 8016d26:	3508      	adds	r5, #8
 8016d28:	2d0c      	cmp	r5, #12
 8016d2a:	bf38      	it	cc
 8016d2c:	250c      	movcc	r5, #12
 8016d2e:	2d00      	cmp	r5, #0
 8016d30:	4606      	mov	r6, r0
 8016d32:	db01      	blt.n	8016d38 <_malloc_r+0x1c>
 8016d34:	42a9      	cmp	r1, r5
 8016d36:	d904      	bls.n	8016d42 <_malloc_r+0x26>
 8016d38:	230c      	movs	r3, #12
 8016d3a:	6033      	str	r3, [r6, #0]
 8016d3c:	2000      	movs	r0, #0
 8016d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016e18 <_malloc_r+0xfc>
 8016d46:	f000 f87b 	bl	8016e40 <__malloc_lock>
 8016d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8016d4e:	461c      	mov	r4, r3
 8016d50:	bb44      	cbnz	r4, 8016da4 <_malloc_r+0x88>
 8016d52:	4629      	mov	r1, r5
 8016d54:	4630      	mov	r0, r6
 8016d56:	f7ff ffbf 	bl	8016cd8 <sbrk_aligned>
 8016d5a:	1c43      	adds	r3, r0, #1
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	d158      	bne.n	8016e12 <_malloc_r+0xf6>
 8016d60:	f8d8 4000 	ldr.w	r4, [r8]
 8016d64:	4627      	mov	r7, r4
 8016d66:	2f00      	cmp	r7, #0
 8016d68:	d143      	bne.n	8016df2 <_malloc_r+0xd6>
 8016d6a:	2c00      	cmp	r4, #0
 8016d6c:	d04b      	beq.n	8016e06 <_malloc_r+0xea>
 8016d6e:	6823      	ldr	r3, [r4, #0]
 8016d70:	4639      	mov	r1, r7
 8016d72:	4630      	mov	r0, r6
 8016d74:	eb04 0903 	add.w	r9, r4, r3
 8016d78:	f001 f8be 	bl	8017ef8 <_sbrk_r>
 8016d7c:	4581      	cmp	r9, r0
 8016d7e:	d142      	bne.n	8016e06 <_malloc_r+0xea>
 8016d80:	6821      	ldr	r1, [r4, #0]
 8016d82:	1a6d      	subs	r5, r5, r1
 8016d84:	4629      	mov	r1, r5
 8016d86:	4630      	mov	r0, r6
 8016d88:	f7ff ffa6 	bl	8016cd8 <sbrk_aligned>
 8016d8c:	3001      	adds	r0, #1
 8016d8e:	d03a      	beq.n	8016e06 <_malloc_r+0xea>
 8016d90:	6823      	ldr	r3, [r4, #0]
 8016d92:	442b      	add	r3, r5
 8016d94:	6023      	str	r3, [r4, #0]
 8016d96:	f8d8 3000 	ldr.w	r3, [r8]
 8016d9a:	685a      	ldr	r2, [r3, #4]
 8016d9c:	bb62      	cbnz	r2, 8016df8 <_malloc_r+0xdc>
 8016d9e:	f8c8 7000 	str.w	r7, [r8]
 8016da2:	e00f      	b.n	8016dc4 <_malloc_r+0xa8>
 8016da4:	6822      	ldr	r2, [r4, #0]
 8016da6:	1b52      	subs	r2, r2, r5
 8016da8:	d420      	bmi.n	8016dec <_malloc_r+0xd0>
 8016daa:	2a0b      	cmp	r2, #11
 8016dac:	d917      	bls.n	8016dde <_malloc_r+0xc2>
 8016dae:	1961      	adds	r1, r4, r5
 8016db0:	42a3      	cmp	r3, r4
 8016db2:	6025      	str	r5, [r4, #0]
 8016db4:	bf18      	it	ne
 8016db6:	6059      	strne	r1, [r3, #4]
 8016db8:	6863      	ldr	r3, [r4, #4]
 8016dba:	bf08      	it	eq
 8016dbc:	f8c8 1000 	streq.w	r1, [r8]
 8016dc0:	5162      	str	r2, [r4, r5]
 8016dc2:	604b      	str	r3, [r1, #4]
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f000 f841 	bl	8016e4c <__malloc_unlock>
 8016dca:	f104 000b 	add.w	r0, r4, #11
 8016dce:	1d23      	adds	r3, r4, #4
 8016dd0:	f020 0007 	bic.w	r0, r0, #7
 8016dd4:	1ac2      	subs	r2, r0, r3
 8016dd6:	bf1c      	itt	ne
 8016dd8:	1a1b      	subne	r3, r3, r0
 8016dda:	50a3      	strne	r3, [r4, r2]
 8016ddc:	e7af      	b.n	8016d3e <_malloc_r+0x22>
 8016dde:	6862      	ldr	r2, [r4, #4]
 8016de0:	42a3      	cmp	r3, r4
 8016de2:	bf0c      	ite	eq
 8016de4:	f8c8 2000 	streq.w	r2, [r8]
 8016de8:	605a      	strne	r2, [r3, #4]
 8016dea:	e7eb      	b.n	8016dc4 <_malloc_r+0xa8>
 8016dec:	4623      	mov	r3, r4
 8016dee:	6864      	ldr	r4, [r4, #4]
 8016df0:	e7ae      	b.n	8016d50 <_malloc_r+0x34>
 8016df2:	463c      	mov	r4, r7
 8016df4:	687f      	ldr	r7, [r7, #4]
 8016df6:	e7b6      	b.n	8016d66 <_malloc_r+0x4a>
 8016df8:	461a      	mov	r2, r3
 8016dfa:	685b      	ldr	r3, [r3, #4]
 8016dfc:	42a3      	cmp	r3, r4
 8016dfe:	d1fb      	bne.n	8016df8 <_malloc_r+0xdc>
 8016e00:	2300      	movs	r3, #0
 8016e02:	6053      	str	r3, [r2, #4]
 8016e04:	e7de      	b.n	8016dc4 <_malloc_r+0xa8>
 8016e06:	230c      	movs	r3, #12
 8016e08:	6033      	str	r3, [r6, #0]
 8016e0a:	4630      	mov	r0, r6
 8016e0c:	f000 f81e 	bl	8016e4c <__malloc_unlock>
 8016e10:	e794      	b.n	8016d3c <_malloc_r+0x20>
 8016e12:	6005      	str	r5, [r0, #0]
 8016e14:	e7d6      	b.n	8016dc4 <_malloc_r+0xa8>
 8016e16:	bf00      	nop
 8016e18:	20014df4 	.word	0x20014df4

08016e1c <__ascii_mbtowc>:
 8016e1c:	b082      	sub	sp, #8
 8016e1e:	b901      	cbnz	r1, 8016e22 <__ascii_mbtowc+0x6>
 8016e20:	a901      	add	r1, sp, #4
 8016e22:	b142      	cbz	r2, 8016e36 <__ascii_mbtowc+0x1a>
 8016e24:	b14b      	cbz	r3, 8016e3a <__ascii_mbtowc+0x1e>
 8016e26:	7813      	ldrb	r3, [r2, #0]
 8016e28:	600b      	str	r3, [r1, #0]
 8016e2a:	7812      	ldrb	r2, [r2, #0]
 8016e2c:	1e10      	subs	r0, r2, #0
 8016e2e:	bf18      	it	ne
 8016e30:	2001      	movne	r0, #1
 8016e32:	b002      	add	sp, #8
 8016e34:	4770      	bx	lr
 8016e36:	4610      	mov	r0, r2
 8016e38:	e7fb      	b.n	8016e32 <__ascii_mbtowc+0x16>
 8016e3a:	f06f 0001 	mvn.w	r0, #1
 8016e3e:	e7f8      	b.n	8016e32 <__ascii_mbtowc+0x16>

08016e40 <__malloc_lock>:
 8016e40:	4801      	ldr	r0, [pc, #4]	@ (8016e48 <__malloc_lock+0x8>)
 8016e42:	f7ff bbaa 	b.w	801659a <__retarget_lock_acquire_recursive>
 8016e46:	bf00      	nop
 8016e48:	20014dec 	.word	0x20014dec

08016e4c <__malloc_unlock>:
 8016e4c:	4801      	ldr	r0, [pc, #4]	@ (8016e54 <__malloc_unlock+0x8>)
 8016e4e:	f7ff bba5 	b.w	801659c <__retarget_lock_release_recursive>
 8016e52:	bf00      	nop
 8016e54:	20014dec 	.word	0x20014dec

08016e58 <_Balloc>:
 8016e58:	b570      	push	{r4, r5, r6, lr}
 8016e5a:	69c6      	ldr	r6, [r0, #28]
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	460d      	mov	r5, r1
 8016e60:	b976      	cbnz	r6, 8016e80 <_Balloc+0x28>
 8016e62:	2010      	movs	r0, #16
 8016e64:	f001 f88a 	bl	8017f7c <malloc>
 8016e68:	4602      	mov	r2, r0
 8016e6a:	61e0      	str	r0, [r4, #28]
 8016e6c:	b920      	cbnz	r0, 8016e78 <_Balloc+0x20>
 8016e6e:	4b18      	ldr	r3, [pc, #96]	@ (8016ed0 <_Balloc+0x78>)
 8016e70:	4818      	ldr	r0, [pc, #96]	@ (8016ed4 <_Balloc+0x7c>)
 8016e72:	216b      	movs	r1, #107	@ 0x6b
 8016e74:	f001 f850 	bl	8017f18 <__assert_func>
 8016e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016e7c:	6006      	str	r6, [r0, #0]
 8016e7e:	60c6      	str	r6, [r0, #12]
 8016e80:	69e6      	ldr	r6, [r4, #28]
 8016e82:	68f3      	ldr	r3, [r6, #12]
 8016e84:	b183      	cbz	r3, 8016ea8 <_Balloc+0x50>
 8016e86:	69e3      	ldr	r3, [r4, #28]
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016e8e:	b9b8      	cbnz	r0, 8016ec0 <_Balloc+0x68>
 8016e90:	2101      	movs	r1, #1
 8016e92:	fa01 f605 	lsl.w	r6, r1, r5
 8016e96:	1d72      	adds	r2, r6, #5
 8016e98:	0092      	lsls	r2, r2, #2
 8016e9a:	4620      	mov	r0, r4
 8016e9c:	f001 f85a 	bl	8017f54 <_calloc_r>
 8016ea0:	b160      	cbz	r0, 8016ebc <_Balloc+0x64>
 8016ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ea6:	e00e      	b.n	8016ec6 <_Balloc+0x6e>
 8016ea8:	2221      	movs	r2, #33	@ 0x21
 8016eaa:	2104      	movs	r1, #4
 8016eac:	4620      	mov	r0, r4
 8016eae:	f001 f851 	bl	8017f54 <_calloc_r>
 8016eb2:	69e3      	ldr	r3, [r4, #28]
 8016eb4:	60f0      	str	r0, [r6, #12]
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d1e4      	bne.n	8016e86 <_Balloc+0x2e>
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	bd70      	pop	{r4, r5, r6, pc}
 8016ec0:	6802      	ldr	r2, [r0, #0]
 8016ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ecc:	e7f7      	b.n	8016ebe <_Balloc+0x66>
 8016ece:	bf00      	nop
 8016ed0:	0801922a 	.word	0x0801922a
 8016ed4:	08019241 	.word	0x08019241

08016ed8 <_Bfree>:
 8016ed8:	b570      	push	{r4, r5, r6, lr}
 8016eda:	69c6      	ldr	r6, [r0, #28]
 8016edc:	4605      	mov	r5, r0
 8016ede:	460c      	mov	r4, r1
 8016ee0:	b976      	cbnz	r6, 8016f00 <_Bfree+0x28>
 8016ee2:	2010      	movs	r0, #16
 8016ee4:	f001 f84a 	bl	8017f7c <malloc>
 8016ee8:	4602      	mov	r2, r0
 8016eea:	61e8      	str	r0, [r5, #28]
 8016eec:	b920      	cbnz	r0, 8016ef8 <_Bfree+0x20>
 8016eee:	4b09      	ldr	r3, [pc, #36]	@ (8016f14 <_Bfree+0x3c>)
 8016ef0:	4809      	ldr	r0, [pc, #36]	@ (8016f18 <_Bfree+0x40>)
 8016ef2:	218f      	movs	r1, #143	@ 0x8f
 8016ef4:	f001 f810 	bl	8017f18 <__assert_func>
 8016ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016efc:	6006      	str	r6, [r0, #0]
 8016efe:	60c6      	str	r6, [r0, #12]
 8016f00:	b13c      	cbz	r4, 8016f12 <_Bfree+0x3a>
 8016f02:	69eb      	ldr	r3, [r5, #28]
 8016f04:	6862      	ldr	r2, [r4, #4]
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016f0c:	6021      	str	r1, [r4, #0]
 8016f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016f12:	bd70      	pop	{r4, r5, r6, pc}
 8016f14:	0801922a 	.word	0x0801922a
 8016f18:	08019241 	.word	0x08019241

08016f1c <__multadd>:
 8016f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f20:	690d      	ldr	r5, [r1, #16]
 8016f22:	4607      	mov	r7, r0
 8016f24:	460c      	mov	r4, r1
 8016f26:	461e      	mov	r6, r3
 8016f28:	f101 0c14 	add.w	ip, r1, #20
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8016f32:	b299      	uxth	r1, r3
 8016f34:	fb02 6101 	mla	r1, r2, r1, r6
 8016f38:	0c1e      	lsrs	r6, r3, #16
 8016f3a:	0c0b      	lsrs	r3, r1, #16
 8016f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8016f40:	b289      	uxth	r1, r1
 8016f42:	3001      	adds	r0, #1
 8016f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016f48:	4285      	cmp	r5, r0
 8016f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8016f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016f52:	dcec      	bgt.n	8016f2e <__multadd+0x12>
 8016f54:	b30e      	cbz	r6, 8016f9a <__multadd+0x7e>
 8016f56:	68a3      	ldr	r3, [r4, #8]
 8016f58:	42ab      	cmp	r3, r5
 8016f5a:	dc19      	bgt.n	8016f90 <__multadd+0x74>
 8016f5c:	6861      	ldr	r1, [r4, #4]
 8016f5e:	4638      	mov	r0, r7
 8016f60:	3101      	adds	r1, #1
 8016f62:	f7ff ff79 	bl	8016e58 <_Balloc>
 8016f66:	4680      	mov	r8, r0
 8016f68:	b928      	cbnz	r0, 8016f76 <__multadd+0x5a>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8016fa0 <__multadd+0x84>)
 8016f6e:	480d      	ldr	r0, [pc, #52]	@ (8016fa4 <__multadd+0x88>)
 8016f70:	21ba      	movs	r1, #186	@ 0xba
 8016f72:	f000 ffd1 	bl	8017f18 <__assert_func>
 8016f76:	6922      	ldr	r2, [r4, #16]
 8016f78:	3202      	adds	r2, #2
 8016f7a:	f104 010c 	add.w	r1, r4, #12
 8016f7e:	0092      	lsls	r2, r2, #2
 8016f80:	300c      	adds	r0, #12
 8016f82:	f7ff fb0c 	bl	801659e <memcpy>
 8016f86:	4621      	mov	r1, r4
 8016f88:	4638      	mov	r0, r7
 8016f8a:	f7ff ffa5 	bl	8016ed8 <_Bfree>
 8016f8e:	4644      	mov	r4, r8
 8016f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f94:	3501      	adds	r5, #1
 8016f96:	615e      	str	r6, [r3, #20]
 8016f98:	6125      	str	r5, [r4, #16]
 8016f9a:	4620      	mov	r0, r4
 8016f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fa0:	080191b9 	.word	0x080191b9
 8016fa4:	08019241 	.word	0x08019241

08016fa8 <__s2b>:
 8016fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fac:	460c      	mov	r4, r1
 8016fae:	4615      	mov	r5, r2
 8016fb0:	461f      	mov	r7, r3
 8016fb2:	2209      	movs	r2, #9
 8016fb4:	3308      	adds	r3, #8
 8016fb6:	4606      	mov	r6, r0
 8016fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016fbc:	2100      	movs	r1, #0
 8016fbe:	2201      	movs	r2, #1
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	db09      	blt.n	8016fd8 <__s2b+0x30>
 8016fc4:	4630      	mov	r0, r6
 8016fc6:	f7ff ff47 	bl	8016e58 <_Balloc>
 8016fca:	b940      	cbnz	r0, 8016fde <__s2b+0x36>
 8016fcc:	4602      	mov	r2, r0
 8016fce:	4b19      	ldr	r3, [pc, #100]	@ (8017034 <__s2b+0x8c>)
 8016fd0:	4819      	ldr	r0, [pc, #100]	@ (8017038 <__s2b+0x90>)
 8016fd2:	21d3      	movs	r1, #211	@ 0xd3
 8016fd4:	f000 ffa0 	bl	8017f18 <__assert_func>
 8016fd8:	0052      	lsls	r2, r2, #1
 8016fda:	3101      	adds	r1, #1
 8016fdc:	e7f0      	b.n	8016fc0 <__s2b+0x18>
 8016fde:	9b08      	ldr	r3, [sp, #32]
 8016fe0:	6143      	str	r3, [r0, #20]
 8016fe2:	2d09      	cmp	r5, #9
 8016fe4:	f04f 0301 	mov.w	r3, #1
 8016fe8:	6103      	str	r3, [r0, #16]
 8016fea:	dd16      	ble.n	801701a <__s2b+0x72>
 8016fec:	f104 0909 	add.w	r9, r4, #9
 8016ff0:	46c8      	mov	r8, r9
 8016ff2:	442c      	add	r4, r5
 8016ff4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016ff8:	4601      	mov	r1, r0
 8016ffa:	3b30      	subs	r3, #48	@ 0x30
 8016ffc:	220a      	movs	r2, #10
 8016ffe:	4630      	mov	r0, r6
 8017000:	f7ff ff8c 	bl	8016f1c <__multadd>
 8017004:	45a0      	cmp	r8, r4
 8017006:	d1f5      	bne.n	8016ff4 <__s2b+0x4c>
 8017008:	f1a5 0408 	sub.w	r4, r5, #8
 801700c:	444c      	add	r4, r9
 801700e:	1b2d      	subs	r5, r5, r4
 8017010:	1963      	adds	r3, r4, r5
 8017012:	42bb      	cmp	r3, r7
 8017014:	db04      	blt.n	8017020 <__s2b+0x78>
 8017016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801701a:	340a      	adds	r4, #10
 801701c:	2509      	movs	r5, #9
 801701e:	e7f6      	b.n	801700e <__s2b+0x66>
 8017020:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017024:	4601      	mov	r1, r0
 8017026:	3b30      	subs	r3, #48	@ 0x30
 8017028:	220a      	movs	r2, #10
 801702a:	4630      	mov	r0, r6
 801702c:	f7ff ff76 	bl	8016f1c <__multadd>
 8017030:	e7ee      	b.n	8017010 <__s2b+0x68>
 8017032:	bf00      	nop
 8017034:	080191b9 	.word	0x080191b9
 8017038:	08019241 	.word	0x08019241

0801703c <__hi0bits>:
 801703c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017040:	4603      	mov	r3, r0
 8017042:	bf36      	itet	cc
 8017044:	0403      	lslcc	r3, r0, #16
 8017046:	2000      	movcs	r0, #0
 8017048:	2010      	movcc	r0, #16
 801704a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801704e:	bf3c      	itt	cc
 8017050:	021b      	lslcc	r3, r3, #8
 8017052:	3008      	addcc	r0, #8
 8017054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017058:	bf3c      	itt	cc
 801705a:	011b      	lslcc	r3, r3, #4
 801705c:	3004      	addcc	r0, #4
 801705e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017062:	bf3c      	itt	cc
 8017064:	009b      	lslcc	r3, r3, #2
 8017066:	3002      	addcc	r0, #2
 8017068:	2b00      	cmp	r3, #0
 801706a:	db05      	blt.n	8017078 <__hi0bits+0x3c>
 801706c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017070:	f100 0001 	add.w	r0, r0, #1
 8017074:	bf08      	it	eq
 8017076:	2020      	moveq	r0, #32
 8017078:	4770      	bx	lr

0801707a <__lo0bits>:
 801707a:	6803      	ldr	r3, [r0, #0]
 801707c:	4602      	mov	r2, r0
 801707e:	f013 0007 	ands.w	r0, r3, #7
 8017082:	d00b      	beq.n	801709c <__lo0bits+0x22>
 8017084:	07d9      	lsls	r1, r3, #31
 8017086:	d421      	bmi.n	80170cc <__lo0bits+0x52>
 8017088:	0798      	lsls	r0, r3, #30
 801708a:	bf49      	itett	mi
 801708c:	085b      	lsrmi	r3, r3, #1
 801708e:	089b      	lsrpl	r3, r3, #2
 8017090:	2001      	movmi	r0, #1
 8017092:	6013      	strmi	r3, [r2, #0]
 8017094:	bf5c      	itt	pl
 8017096:	6013      	strpl	r3, [r2, #0]
 8017098:	2002      	movpl	r0, #2
 801709a:	4770      	bx	lr
 801709c:	b299      	uxth	r1, r3
 801709e:	b909      	cbnz	r1, 80170a4 <__lo0bits+0x2a>
 80170a0:	0c1b      	lsrs	r3, r3, #16
 80170a2:	2010      	movs	r0, #16
 80170a4:	b2d9      	uxtb	r1, r3
 80170a6:	b909      	cbnz	r1, 80170ac <__lo0bits+0x32>
 80170a8:	3008      	adds	r0, #8
 80170aa:	0a1b      	lsrs	r3, r3, #8
 80170ac:	0719      	lsls	r1, r3, #28
 80170ae:	bf04      	itt	eq
 80170b0:	091b      	lsreq	r3, r3, #4
 80170b2:	3004      	addeq	r0, #4
 80170b4:	0799      	lsls	r1, r3, #30
 80170b6:	bf04      	itt	eq
 80170b8:	089b      	lsreq	r3, r3, #2
 80170ba:	3002      	addeq	r0, #2
 80170bc:	07d9      	lsls	r1, r3, #31
 80170be:	d403      	bmi.n	80170c8 <__lo0bits+0x4e>
 80170c0:	085b      	lsrs	r3, r3, #1
 80170c2:	f100 0001 	add.w	r0, r0, #1
 80170c6:	d003      	beq.n	80170d0 <__lo0bits+0x56>
 80170c8:	6013      	str	r3, [r2, #0]
 80170ca:	4770      	bx	lr
 80170cc:	2000      	movs	r0, #0
 80170ce:	4770      	bx	lr
 80170d0:	2020      	movs	r0, #32
 80170d2:	4770      	bx	lr

080170d4 <__i2b>:
 80170d4:	b510      	push	{r4, lr}
 80170d6:	460c      	mov	r4, r1
 80170d8:	2101      	movs	r1, #1
 80170da:	f7ff febd 	bl	8016e58 <_Balloc>
 80170de:	4602      	mov	r2, r0
 80170e0:	b928      	cbnz	r0, 80170ee <__i2b+0x1a>
 80170e2:	4b05      	ldr	r3, [pc, #20]	@ (80170f8 <__i2b+0x24>)
 80170e4:	4805      	ldr	r0, [pc, #20]	@ (80170fc <__i2b+0x28>)
 80170e6:	f240 1145 	movw	r1, #325	@ 0x145
 80170ea:	f000 ff15 	bl	8017f18 <__assert_func>
 80170ee:	2301      	movs	r3, #1
 80170f0:	6144      	str	r4, [r0, #20]
 80170f2:	6103      	str	r3, [r0, #16]
 80170f4:	bd10      	pop	{r4, pc}
 80170f6:	bf00      	nop
 80170f8:	080191b9 	.word	0x080191b9
 80170fc:	08019241 	.word	0x08019241

08017100 <__multiply>:
 8017100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017104:	4614      	mov	r4, r2
 8017106:	690a      	ldr	r2, [r1, #16]
 8017108:	6923      	ldr	r3, [r4, #16]
 801710a:	429a      	cmp	r2, r3
 801710c:	bfa8      	it	ge
 801710e:	4623      	movge	r3, r4
 8017110:	460f      	mov	r7, r1
 8017112:	bfa4      	itt	ge
 8017114:	460c      	movge	r4, r1
 8017116:	461f      	movge	r7, r3
 8017118:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801711c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8017120:	68a3      	ldr	r3, [r4, #8]
 8017122:	6861      	ldr	r1, [r4, #4]
 8017124:	eb0a 0609 	add.w	r6, sl, r9
 8017128:	42b3      	cmp	r3, r6
 801712a:	b085      	sub	sp, #20
 801712c:	bfb8      	it	lt
 801712e:	3101      	addlt	r1, #1
 8017130:	f7ff fe92 	bl	8016e58 <_Balloc>
 8017134:	b930      	cbnz	r0, 8017144 <__multiply+0x44>
 8017136:	4602      	mov	r2, r0
 8017138:	4b44      	ldr	r3, [pc, #272]	@ (801724c <__multiply+0x14c>)
 801713a:	4845      	ldr	r0, [pc, #276]	@ (8017250 <__multiply+0x150>)
 801713c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017140:	f000 feea 	bl	8017f18 <__assert_func>
 8017144:	f100 0514 	add.w	r5, r0, #20
 8017148:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801714c:	462b      	mov	r3, r5
 801714e:	2200      	movs	r2, #0
 8017150:	4543      	cmp	r3, r8
 8017152:	d321      	bcc.n	8017198 <__multiply+0x98>
 8017154:	f107 0114 	add.w	r1, r7, #20
 8017158:	f104 0214 	add.w	r2, r4, #20
 801715c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8017160:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8017164:	9302      	str	r3, [sp, #8]
 8017166:	1b13      	subs	r3, r2, r4
 8017168:	3b15      	subs	r3, #21
 801716a:	f023 0303 	bic.w	r3, r3, #3
 801716e:	3304      	adds	r3, #4
 8017170:	f104 0715 	add.w	r7, r4, #21
 8017174:	42ba      	cmp	r2, r7
 8017176:	bf38      	it	cc
 8017178:	2304      	movcc	r3, #4
 801717a:	9301      	str	r3, [sp, #4]
 801717c:	9b02      	ldr	r3, [sp, #8]
 801717e:	9103      	str	r1, [sp, #12]
 8017180:	428b      	cmp	r3, r1
 8017182:	d80c      	bhi.n	801719e <__multiply+0x9e>
 8017184:	2e00      	cmp	r6, #0
 8017186:	dd03      	ble.n	8017190 <__multiply+0x90>
 8017188:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801718c:	2b00      	cmp	r3, #0
 801718e:	d05b      	beq.n	8017248 <__multiply+0x148>
 8017190:	6106      	str	r6, [r0, #16]
 8017192:	b005      	add	sp, #20
 8017194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017198:	f843 2b04 	str.w	r2, [r3], #4
 801719c:	e7d8      	b.n	8017150 <__multiply+0x50>
 801719e:	f8b1 a000 	ldrh.w	sl, [r1]
 80171a2:	f1ba 0f00 	cmp.w	sl, #0
 80171a6:	d024      	beq.n	80171f2 <__multiply+0xf2>
 80171a8:	f104 0e14 	add.w	lr, r4, #20
 80171ac:	46a9      	mov	r9, r5
 80171ae:	f04f 0c00 	mov.w	ip, #0
 80171b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80171b6:	f8d9 3000 	ldr.w	r3, [r9]
 80171ba:	fa1f fb87 	uxth.w	fp, r7
 80171be:	b29b      	uxth	r3, r3
 80171c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80171c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80171c8:	f8d9 7000 	ldr.w	r7, [r9]
 80171cc:	4463      	add	r3, ip
 80171ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80171d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80171d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80171da:	b29b      	uxth	r3, r3
 80171dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80171e0:	4572      	cmp	r2, lr
 80171e2:	f849 3b04 	str.w	r3, [r9], #4
 80171e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80171ea:	d8e2      	bhi.n	80171b2 <__multiply+0xb2>
 80171ec:	9b01      	ldr	r3, [sp, #4]
 80171ee:	f845 c003 	str.w	ip, [r5, r3]
 80171f2:	9b03      	ldr	r3, [sp, #12]
 80171f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80171f8:	3104      	adds	r1, #4
 80171fa:	f1b9 0f00 	cmp.w	r9, #0
 80171fe:	d021      	beq.n	8017244 <__multiply+0x144>
 8017200:	682b      	ldr	r3, [r5, #0]
 8017202:	f104 0c14 	add.w	ip, r4, #20
 8017206:	46ae      	mov	lr, r5
 8017208:	f04f 0a00 	mov.w	sl, #0
 801720c:	f8bc b000 	ldrh.w	fp, [ip]
 8017210:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017214:	fb09 770b 	mla	r7, r9, fp, r7
 8017218:	4457      	add	r7, sl
 801721a:	b29b      	uxth	r3, r3
 801721c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017220:	f84e 3b04 	str.w	r3, [lr], #4
 8017224:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801722c:	f8be 3000 	ldrh.w	r3, [lr]
 8017230:	fb09 330a 	mla	r3, r9, sl, r3
 8017234:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017238:	4562      	cmp	r2, ip
 801723a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801723e:	d8e5      	bhi.n	801720c <__multiply+0x10c>
 8017240:	9f01      	ldr	r7, [sp, #4]
 8017242:	51eb      	str	r3, [r5, r7]
 8017244:	3504      	adds	r5, #4
 8017246:	e799      	b.n	801717c <__multiply+0x7c>
 8017248:	3e01      	subs	r6, #1
 801724a:	e79b      	b.n	8017184 <__multiply+0x84>
 801724c:	080191b9 	.word	0x080191b9
 8017250:	08019241 	.word	0x08019241

08017254 <__pow5mult>:
 8017254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017258:	4615      	mov	r5, r2
 801725a:	f012 0203 	ands.w	r2, r2, #3
 801725e:	4607      	mov	r7, r0
 8017260:	460e      	mov	r6, r1
 8017262:	d007      	beq.n	8017274 <__pow5mult+0x20>
 8017264:	4c25      	ldr	r4, [pc, #148]	@ (80172fc <__pow5mult+0xa8>)
 8017266:	3a01      	subs	r2, #1
 8017268:	2300      	movs	r3, #0
 801726a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801726e:	f7ff fe55 	bl	8016f1c <__multadd>
 8017272:	4606      	mov	r6, r0
 8017274:	10ad      	asrs	r5, r5, #2
 8017276:	d03d      	beq.n	80172f4 <__pow5mult+0xa0>
 8017278:	69fc      	ldr	r4, [r7, #28]
 801727a:	b97c      	cbnz	r4, 801729c <__pow5mult+0x48>
 801727c:	2010      	movs	r0, #16
 801727e:	f000 fe7d 	bl	8017f7c <malloc>
 8017282:	4602      	mov	r2, r0
 8017284:	61f8      	str	r0, [r7, #28]
 8017286:	b928      	cbnz	r0, 8017294 <__pow5mult+0x40>
 8017288:	4b1d      	ldr	r3, [pc, #116]	@ (8017300 <__pow5mult+0xac>)
 801728a:	481e      	ldr	r0, [pc, #120]	@ (8017304 <__pow5mult+0xb0>)
 801728c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017290:	f000 fe42 	bl	8017f18 <__assert_func>
 8017294:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017298:	6004      	str	r4, [r0, #0]
 801729a:	60c4      	str	r4, [r0, #12]
 801729c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80172a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80172a4:	b94c      	cbnz	r4, 80172ba <__pow5mult+0x66>
 80172a6:	f240 2171 	movw	r1, #625	@ 0x271
 80172aa:	4638      	mov	r0, r7
 80172ac:	f7ff ff12 	bl	80170d4 <__i2b>
 80172b0:	2300      	movs	r3, #0
 80172b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80172b6:	4604      	mov	r4, r0
 80172b8:	6003      	str	r3, [r0, #0]
 80172ba:	f04f 0900 	mov.w	r9, #0
 80172be:	07eb      	lsls	r3, r5, #31
 80172c0:	d50a      	bpl.n	80172d8 <__pow5mult+0x84>
 80172c2:	4631      	mov	r1, r6
 80172c4:	4622      	mov	r2, r4
 80172c6:	4638      	mov	r0, r7
 80172c8:	f7ff ff1a 	bl	8017100 <__multiply>
 80172cc:	4631      	mov	r1, r6
 80172ce:	4680      	mov	r8, r0
 80172d0:	4638      	mov	r0, r7
 80172d2:	f7ff fe01 	bl	8016ed8 <_Bfree>
 80172d6:	4646      	mov	r6, r8
 80172d8:	106d      	asrs	r5, r5, #1
 80172da:	d00b      	beq.n	80172f4 <__pow5mult+0xa0>
 80172dc:	6820      	ldr	r0, [r4, #0]
 80172de:	b938      	cbnz	r0, 80172f0 <__pow5mult+0x9c>
 80172e0:	4622      	mov	r2, r4
 80172e2:	4621      	mov	r1, r4
 80172e4:	4638      	mov	r0, r7
 80172e6:	f7ff ff0b 	bl	8017100 <__multiply>
 80172ea:	6020      	str	r0, [r4, #0]
 80172ec:	f8c0 9000 	str.w	r9, [r0]
 80172f0:	4604      	mov	r4, r0
 80172f2:	e7e4      	b.n	80172be <__pow5mult+0x6a>
 80172f4:	4630      	mov	r0, r6
 80172f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80172fa:	bf00      	nop
 80172fc:	0801929c 	.word	0x0801929c
 8017300:	0801922a 	.word	0x0801922a
 8017304:	08019241 	.word	0x08019241

08017308 <__lshift>:
 8017308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801730c:	460c      	mov	r4, r1
 801730e:	6849      	ldr	r1, [r1, #4]
 8017310:	6923      	ldr	r3, [r4, #16]
 8017312:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017316:	68a3      	ldr	r3, [r4, #8]
 8017318:	4607      	mov	r7, r0
 801731a:	4691      	mov	r9, r2
 801731c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017320:	f108 0601 	add.w	r6, r8, #1
 8017324:	42b3      	cmp	r3, r6
 8017326:	db0b      	blt.n	8017340 <__lshift+0x38>
 8017328:	4638      	mov	r0, r7
 801732a:	f7ff fd95 	bl	8016e58 <_Balloc>
 801732e:	4605      	mov	r5, r0
 8017330:	b948      	cbnz	r0, 8017346 <__lshift+0x3e>
 8017332:	4602      	mov	r2, r0
 8017334:	4b28      	ldr	r3, [pc, #160]	@ (80173d8 <__lshift+0xd0>)
 8017336:	4829      	ldr	r0, [pc, #164]	@ (80173dc <__lshift+0xd4>)
 8017338:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801733c:	f000 fdec 	bl	8017f18 <__assert_func>
 8017340:	3101      	adds	r1, #1
 8017342:	005b      	lsls	r3, r3, #1
 8017344:	e7ee      	b.n	8017324 <__lshift+0x1c>
 8017346:	2300      	movs	r3, #0
 8017348:	f100 0114 	add.w	r1, r0, #20
 801734c:	f100 0210 	add.w	r2, r0, #16
 8017350:	4618      	mov	r0, r3
 8017352:	4553      	cmp	r3, sl
 8017354:	db33      	blt.n	80173be <__lshift+0xb6>
 8017356:	6920      	ldr	r0, [r4, #16]
 8017358:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801735c:	f104 0314 	add.w	r3, r4, #20
 8017360:	f019 091f 	ands.w	r9, r9, #31
 8017364:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017368:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801736c:	d02b      	beq.n	80173c6 <__lshift+0xbe>
 801736e:	f1c9 0e20 	rsb	lr, r9, #32
 8017372:	468a      	mov	sl, r1
 8017374:	2200      	movs	r2, #0
 8017376:	6818      	ldr	r0, [r3, #0]
 8017378:	fa00 f009 	lsl.w	r0, r0, r9
 801737c:	4310      	orrs	r0, r2
 801737e:	f84a 0b04 	str.w	r0, [sl], #4
 8017382:	f853 2b04 	ldr.w	r2, [r3], #4
 8017386:	459c      	cmp	ip, r3
 8017388:	fa22 f20e 	lsr.w	r2, r2, lr
 801738c:	d8f3      	bhi.n	8017376 <__lshift+0x6e>
 801738e:	ebac 0304 	sub.w	r3, ip, r4
 8017392:	3b15      	subs	r3, #21
 8017394:	f023 0303 	bic.w	r3, r3, #3
 8017398:	3304      	adds	r3, #4
 801739a:	f104 0015 	add.w	r0, r4, #21
 801739e:	4584      	cmp	ip, r0
 80173a0:	bf38      	it	cc
 80173a2:	2304      	movcc	r3, #4
 80173a4:	50ca      	str	r2, [r1, r3]
 80173a6:	b10a      	cbz	r2, 80173ac <__lshift+0xa4>
 80173a8:	f108 0602 	add.w	r6, r8, #2
 80173ac:	3e01      	subs	r6, #1
 80173ae:	4638      	mov	r0, r7
 80173b0:	612e      	str	r6, [r5, #16]
 80173b2:	4621      	mov	r1, r4
 80173b4:	f7ff fd90 	bl	8016ed8 <_Bfree>
 80173b8:	4628      	mov	r0, r5
 80173ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173be:	f842 0f04 	str.w	r0, [r2, #4]!
 80173c2:	3301      	adds	r3, #1
 80173c4:	e7c5      	b.n	8017352 <__lshift+0x4a>
 80173c6:	3904      	subs	r1, #4
 80173c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80173cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80173d0:	459c      	cmp	ip, r3
 80173d2:	d8f9      	bhi.n	80173c8 <__lshift+0xc0>
 80173d4:	e7ea      	b.n	80173ac <__lshift+0xa4>
 80173d6:	bf00      	nop
 80173d8:	080191b9 	.word	0x080191b9
 80173dc:	08019241 	.word	0x08019241

080173e0 <__mcmp>:
 80173e0:	690a      	ldr	r2, [r1, #16]
 80173e2:	4603      	mov	r3, r0
 80173e4:	6900      	ldr	r0, [r0, #16]
 80173e6:	1a80      	subs	r0, r0, r2
 80173e8:	b530      	push	{r4, r5, lr}
 80173ea:	d10e      	bne.n	801740a <__mcmp+0x2a>
 80173ec:	3314      	adds	r3, #20
 80173ee:	3114      	adds	r1, #20
 80173f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80173f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80173f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80173fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017400:	4295      	cmp	r5, r2
 8017402:	d003      	beq.n	801740c <__mcmp+0x2c>
 8017404:	d205      	bcs.n	8017412 <__mcmp+0x32>
 8017406:	f04f 30ff 	mov.w	r0, #4294967295
 801740a:	bd30      	pop	{r4, r5, pc}
 801740c:	42a3      	cmp	r3, r4
 801740e:	d3f3      	bcc.n	80173f8 <__mcmp+0x18>
 8017410:	e7fb      	b.n	801740a <__mcmp+0x2a>
 8017412:	2001      	movs	r0, #1
 8017414:	e7f9      	b.n	801740a <__mcmp+0x2a>
	...

08017418 <__mdiff>:
 8017418:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801741c:	4689      	mov	r9, r1
 801741e:	4606      	mov	r6, r0
 8017420:	4611      	mov	r1, r2
 8017422:	4648      	mov	r0, r9
 8017424:	4614      	mov	r4, r2
 8017426:	f7ff ffdb 	bl	80173e0 <__mcmp>
 801742a:	1e05      	subs	r5, r0, #0
 801742c:	d112      	bne.n	8017454 <__mdiff+0x3c>
 801742e:	4629      	mov	r1, r5
 8017430:	4630      	mov	r0, r6
 8017432:	f7ff fd11 	bl	8016e58 <_Balloc>
 8017436:	4602      	mov	r2, r0
 8017438:	b928      	cbnz	r0, 8017446 <__mdiff+0x2e>
 801743a:	4b3f      	ldr	r3, [pc, #252]	@ (8017538 <__mdiff+0x120>)
 801743c:	f240 2137 	movw	r1, #567	@ 0x237
 8017440:	483e      	ldr	r0, [pc, #248]	@ (801753c <__mdiff+0x124>)
 8017442:	f000 fd69 	bl	8017f18 <__assert_func>
 8017446:	2301      	movs	r3, #1
 8017448:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801744c:	4610      	mov	r0, r2
 801744e:	b003      	add	sp, #12
 8017450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017454:	bfbc      	itt	lt
 8017456:	464b      	movlt	r3, r9
 8017458:	46a1      	movlt	r9, r4
 801745a:	4630      	mov	r0, r6
 801745c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017460:	bfba      	itte	lt
 8017462:	461c      	movlt	r4, r3
 8017464:	2501      	movlt	r5, #1
 8017466:	2500      	movge	r5, #0
 8017468:	f7ff fcf6 	bl	8016e58 <_Balloc>
 801746c:	4602      	mov	r2, r0
 801746e:	b918      	cbnz	r0, 8017478 <__mdiff+0x60>
 8017470:	4b31      	ldr	r3, [pc, #196]	@ (8017538 <__mdiff+0x120>)
 8017472:	f240 2145 	movw	r1, #581	@ 0x245
 8017476:	e7e3      	b.n	8017440 <__mdiff+0x28>
 8017478:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801747c:	6926      	ldr	r6, [r4, #16]
 801747e:	60c5      	str	r5, [r0, #12]
 8017480:	f109 0310 	add.w	r3, r9, #16
 8017484:	f109 0514 	add.w	r5, r9, #20
 8017488:	f104 0e14 	add.w	lr, r4, #20
 801748c:	f100 0b14 	add.w	fp, r0, #20
 8017490:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017494:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8017498:	9301      	str	r3, [sp, #4]
 801749a:	46d9      	mov	r9, fp
 801749c:	f04f 0c00 	mov.w	ip, #0
 80174a0:	9b01      	ldr	r3, [sp, #4]
 80174a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80174a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80174aa:	9301      	str	r3, [sp, #4]
 80174ac:	fa1f f38a 	uxth.w	r3, sl
 80174b0:	4619      	mov	r1, r3
 80174b2:	b283      	uxth	r3, r0
 80174b4:	1acb      	subs	r3, r1, r3
 80174b6:	0c00      	lsrs	r0, r0, #16
 80174b8:	4463      	add	r3, ip
 80174ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80174be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80174c2:	b29b      	uxth	r3, r3
 80174c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80174c8:	4576      	cmp	r6, lr
 80174ca:	f849 3b04 	str.w	r3, [r9], #4
 80174ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80174d2:	d8e5      	bhi.n	80174a0 <__mdiff+0x88>
 80174d4:	1b33      	subs	r3, r6, r4
 80174d6:	3b15      	subs	r3, #21
 80174d8:	f023 0303 	bic.w	r3, r3, #3
 80174dc:	3415      	adds	r4, #21
 80174de:	3304      	adds	r3, #4
 80174e0:	42a6      	cmp	r6, r4
 80174e2:	bf38      	it	cc
 80174e4:	2304      	movcc	r3, #4
 80174e6:	441d      	add	r5, r3
 80174e8:	445b      	add	r3, fp
 80174ea:	461e      	mov	r6, r3
 80174ec:	462c      	mov	r4, r5
 80174ee:	4544      	cmp	r4, r8
 80174f0:	d30e      	bcc.n	8017510 <__mdiff+0xf8>
 80174f2:	f108 0103 	add.w	r1, r8, #3
 80174f6:	1b49      	subs	r1, r1, r5
 80174f8:	f021 0103 	bic.w	r1, r1, #3
 80174fc:	3d03      	subs	r5, #3
 80174fe:	45a8      	cmp	r8, r5
 8017500:	bf38      	it	cc
 8017502:	2100      	movcc	r1, #0
 8017504:	440b      	add	r3, r1
 8017506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801750a:	b191      	cbz	r1, 8017532 <__mdiff+0x11a>
 801750c:	6117      	str	r7, [r2, #16]
 801750e:	e79d      	b.n	801744c <__mdiff+0x34>
 8017510:	f854 1b04 	ldr.w	r1, [r4], #4
 8017514:	46e6      	mov	lr, ip
 8017516:	0c08      	lsrs	r0, r1, #16
 8017518:	fa1c fc81 	uxtah	ip, ip, r1
 801751c:	4471      	add	r1, lr
 801751e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017522:	b289      	uxth	r1, r1
 8017524:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017528:	f846 1b04 	str.w	r1, [r6], #4
 801752c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017530:	e7dd      	b.n	80174ee <__mdiff+0xd6>
 8017532:	3f01      	subs	r7, #1
 8017534:	e7e7      	b.n	8017506 <__mdiff+0xee>
 8017536:	bf00      	nop
 8017538:	080191b9 	.word	0x080191b9
 801753c:	08019241 	.word	0x08019241

08017540 <__ulp>:
 8017540:	b082      	sub	sp, #8
 8017542:	ed8d 0b00 	vstr	d0, [sp]
 8017546:	9a01      	ldr	r2, [sp, #4]
 8017548:	4b0f      	ldr	r3, [pc, #60]	@ (8017588 <__ulp+0x48>)
 801754a:	4013      	ands	r3, r2
 801754c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017550:	2b00      	cmp	r3, #0
 8017552:	dc08      	bgt.n	8017566 <__ulp+0x26>
 8017554:	425b      	negs	r3, r3
 8017556:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801755a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801755e:	da04      	bge.n	801756a <__ulp+0x2a>
 8017560:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8017564:	4113      	asrs	r3, r2
 8017566:	2200      	movs	r2, #0
 8017568:	e008      	b.n	801757c <__ulp+0x3c>
 801756a:	f1a2 0314 	sub.w	r3, r2, #20
 801756e:	2b1e      	cmp	r3, #30
 8017570:	bfda      	itte	le
 8017572:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8017576:	40da      	lsrle	r2, r3
 8017578:	2201      	movgt	r2, #1
 801757a:	2300      	movs	r3, #0
 801757c:	4619      	mov	r1, r3
 801757e:	4610      	mov	r0, r2
 8017580:	ec41 0b10 	vmov	d0, r0, r1
 8017584:	b002      	add	sp, #8
 8017586:	4770      	bx	lr
 8017588:	7ff00000 	.word	0x7ff00000

0801758c <__b2d>:
 801758c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017590:	6906      	ldr	r6, [r0, #16]
 8017592:	f100 0814 	add.w	r8, r0, #20
 8017596:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801759a:	1f37      	subs	r7, r6, #4
 801759c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80175a0:	4610      	mov	r0, r2
 80175a2:	f7ff fd4b 	bl	801703c <__hi0bits>
 80175a6:	f1c0 0320 	rsb	r3, r0, #32
 80175aa:	280a      	cmp	r0, #10
 80175ac:	600b      	str	r3, [r1, #0]
 80175ae:	491b      	ldr	r1, [pc, #108]	@ (801761c <__b2d+0x90>)
 80175b0:	dc15      	bgt.n	80175de <__b2d+0x52>
 80175b2:	f1c0 0c0b 	rsb	ip, r0, #11
 80175b6:	fa22 f30c 	lsr.w	r3, r2, ip
 80175ba:	45b8      	cmp	r8, r7
 80175bc:	ea43 0501 	orr.w	r5, r3, r1
 80175c0:	bf34      	ite	cc
 80175c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80175c6:	2300      	movcs	r3, #0
 80175c8:	3015      	adds	r0, #21
 80175ca:	fa02 f000 	lsl.w	r0, r2, r0
 80175ce:	fa23 f30c 	lsr.w	r3, r3, ip
 80175d2:	4303      	orrs	r3, r0
 80175d4:	461c      	mov	r4, r3
 80175d6:	ec45 4b10 	vmov	d0, r4, r5
 80175da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175de:	45b8      	cmp	r8, r7
 80175e0:	bf3a      	itte	cc
 80175e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80175e6:	f1a6 0708 	subcc.w	r7, r6, #8
 80175ea:	2300      	movcs	r3, #0
 80175ec:	380b      	subs	r0, #11
 80175ee:	d012      	beq.n	8017616 <__b2d+0x8a>
 80175f0:	f1c0 0120 	rsb	r1, r0, #32
 80175f4:	fa23 f401 	lsr.w	r4, r3, r1
 80175f8:	4082      	lsls	r2, r0
 80175fa:	4322      	orrs	r2, r4
 80175fc:	4547      	cmp	r7, r8
 80175fe:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017602:	bf8c      	ite	hi
 8017604:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017608:	2200      	movls	r2, #0
 801760a:	4083      	lsls	r3, r0
 801760c:	40ca      	lsrs	r2, r1
 801760e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017612:	4313      	orrs	r3, r2
 8017614:	e7de      	b.n	80175d4 <__b2d+0x48>
 8017616:	ea42 0501 	orr.w	r5, r2, r1
 801761a:	e7db      	b.n	80175d4 <__b2d+0x48>
 801761c:	3ff00000 	.word	0x3ff00000

08017620 <__d2b>:
 8017620:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017624:	460f      	mov	r7, r1
 8017626:	2101      	movs	r1, #1
 8017628:	ec59 8b10 	vmov	r8, r9, d0
 801762c:	4616      	mov	r6, r2
 801762e:	f7ff fc13 	bl	8016e58 <_Balloc>
 8017632:	4604      	mov	r4, r0
 8017634:	b930      	cbnz	r0, 8017644 <__d2b+0x24>
 8017636:	4602      	mov	r2, r0
 8017638:	4b23      	ldr	r3, [pc, #140]	@ (80176c8 <__d2b+0xa8>)
 801763a:	4824      	ldr	r0, [pc, #144]	@ (80176cc <__d2b+0xac>)
 801763c:	f240 310f 	movw	r1, #783	@ 0x30f
 8017640:	f000 fc6a 	bl	8017f18 <__assert_func>
 8017644:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801764c:	b10d      	cbz	r5, 8017652 <__d2b+0x32>
 801764e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017652:	9301      	str	r3, [sp, #4]
 8017654:	f1b8 0300 	subs.w	r3, r8, #0
 8017658:	d023      	beq.n	80176a2 <__d2b+0x82>
 801765a:	4668      	mov	r0, sp
 801765c:	9300      	str	r3, [sp, #0]
 801765e:	f7ff fd0c 	bl	801707a <__lo0bits>
 8017662:	e9dd 1200 	ldrd	r1, r2, [sp]
 8017666:	b1d0      	cbz	r0, 801769e <__d2b+0x7e>
 8017668:	f1c0 0320 	rsb	r3, r0, #32
 801766c:	fa02 f303 	lsl.w	r3, r2, r3
 8017670:	430b      	orrs	r3, r1
 8017672:	40c2      	lsrs	r2, r0
 8017674:	6163      	str	r3, [r4, #20]
 8017676:	9201      	str	r2, [sp, #4]
 8017678:	9b01      	ldr	r3, [sp, #4]
 801767a:	61a3      	str	r3, [r4, #24]
 801767c:	2b00      	cmp	r3, #0
 801767e:	bf0c      	ite	eq
 8017680:	2201      	moveq	r2, #1
 8017682:	2202      	movne	r2, #2
 8017684:	6122      	str	r2, [r4, #16]
 8017686:	b1a5      	cbz	r5, 80176b2 <__d2b+0x92>
 8017688:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801768c:	4405      	add	r5, r0
 801768e:	603d      	str	r5, [r7, #0]
 8017690:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8017694:	6030      	str	r0, [r6, #0]
 8017696:	4620      	mov	r0, r4
 8017698:	b003      	add	sp, #12
 801769a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801769e:	6161      	str	r1, [r4, #20]
 80176a0:	e7ea      	b.n	8017678 <__d2b+0x58>
 80176a2:	a801      	add	r0, sp, #4
 80176a4:	f7ff fce9 	bl	801707a <__lo0bits>
 80176a8:	9b01      	ldr	r3, [sp, #4]
 80176aa:	6163      	str	r3, [r4, #20]
 80176ac:	3020      	adds	r0, #32
 80176ae:	2201      	movs	r2, #1
 80176b0:	e7e8      	b.n	8017684 <__d2b+0x64>
 80176b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80176ba:	6038      	str	r0, [r7, #0]
 80176bc:	6918      	ldr	r0, [r3, #16]
 80176be:	f7ff fcbd 	bl	801703c <__hi0bits>
 80176c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176c6:	e7e5      	b.n	8017694 <__d2b+0x74>
 80176c8:	080191b9 	.word	0x080191b9
 80176cc:	08019241 	.word	0x08019241

080176d0 <__ratio>:
 80176d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d4:	b085      	sub	sp, #20
 80176d6:	e9cd 1000 	strd	r1, r0, [sp]
 80176da:	a902      	add	r1, sp, #8
 80176dc:	f7ff ff56 	bl	801758c <__b2d>
 80176e0:	9800      	ldr	r0, [sp, #0]
 80176e2:	a903      	add	r1, sp, #12
 80176e4:	ec55 4b10 	vmov	r4, r5, d0
 80176e8:	f7ff ff50 	bl	801758c <__b2d>
 80176ec:	9b01      	ldr	r3, [sp, #4]
 80176ee:	6919      	ldr	r1, [r3, #16]
 80176f0:	9b00      	ldr	r3, [sp, #0]
 80176f2:	691b      	ldr	r3, [r3, #16]
 80176f4:	1ac9      	subs	r1, r1, r3
 80176f6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80176fa:	1a9b      	subs	r3, r3, r2
 80176fc:	ec5b ab10 	vmov	sl, fp, d0
 8017700:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8017704:	2b00      	cmp	r3, #0
 8017706:	bfce      	itee	gt
 8017708:	462a      	movgt	r2, r5
 801770a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801770e:	465a      	movle	r2, fp
 8017710:	462f      	mov	r7, r5
 8017712:	46d9      	mov	r9, fp
 8017714:	bfcc      	ite	gt
 8017716:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801771a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801771e:	464b      	mov	r3, r9
 8017720:	4652      	mov	r2, sl
 8017722:	4620      	mov	r0, r4
 8017724:	4639      	mov	r1, r7
 8017726:	f7e9 f8b1 	bl	800088c <__aeabi_ddiv>
 801772a:	ec41 0b10 	vmov	d0, r0, r1
 801772e:	b005      	add	sp, #20
 8017730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017734 <__copybits>:
 8017734:	3901      	subs	r1, #1
 8017736:	b570      	push	{r4, r5, r6, lr}
 8017738:	1149      	asrs	r1, r1, #5
 801773a:	6914      	ldr	r4, [r2, #16]
 801773c:	3101      	adds	r1, #1
 801773e:	f102 0314 	add.w	r3, r2, #20
 8017742:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017746:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801774a:	1f05      	subs	r5, r0, #4
 801774c:	42a3      	cmp	r3, r4
 801774e:	d30c      	bcc.n	801776a <__copybits+0x36>
 8017750:	1aa3      	subs	r3, r4, r2
 8017752:	3b11      	subs	r3, #17
 8017754:	f023 0303 	bic.w	r3, r3, #3
 8017758:	3211      	adds	r2, #17
 801775a:	42a2      	cmp	r2, r4
 801775c:	bf88      	it	hi
 801775e:	2300      	movhi	r3, #0
 8017760:	4418      	add	r0, r3
 8017762:	2300      	movs	r3, #0
 8017764:	4288      	cmp	r0, r1
 8017766:	d305      	bcc.n	8017774 <__copybits+0x40>
 8017768:	bd70      	pop	{r4, r5, r6, pc}
 801776a:	f853 6b04 	ldr.w	r6, [r3], #4
 801776e:	f845 6f04 	str.w	r6, [r5, #4]!
 8017772:	e7eb      	b.n	801774c <__copybits+0x18>
 8017774:	f840 3b04 	str.w	r3, [r0], #4
 8017778:	e7f4      	b.n	8017764 <__copybits+0x30>

0801777a <__any_on>:
 801777a:	f100 0214 	add.w	r2, r0, #20
 801777e:	6900      	ldr	r0, [r0, #16]
 8017780:	114b      	asrs	r3, r1, #5
 8017782:	4298      	cmp	r0, r3
 8017784:	b510      	push	{r4, lr}
 8017786:	db11      	blt.n	80177ac <__any_on+0x32>
 8017788:	dd0a      	ble.n	80177a0 <__any_on+0x26>
 801778a:	f011 011f 	ands.w	r1, r1, #31
 801778e:	d007      	beq.n	80177a0 <__any_on+0x26>
 8017790:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017794:	fa24 f001 	lsr.w	r0, r4, r1
 8017798:	fa00 f101 	lsl.w	r1, r0, r1
 801779c:	428c      	cmp	r4, r1
 801779e:	d10b      	bne.n	80177b8 <__any_on+0x3e>
 80177a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80177a4:	4293      	cmp	r3, r2
 80177a6:	d803      	bhi.n	80177b0 <__any_on+0x36>
 80177a8:	2000      	movs	r0, #0
 80177aa:	bd10      	pop	{r4, pc}
 80177ac:	4603      	mov	r3, r0
 80177ae:	e7f7      	b.n	80177a0 <__any_on+0x26>
 80177b0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80177b4:	2900      	cmp	r1, #0
 80177b6:	d0f5      	beq.n	80177a4 <__any_on+0x2a>
 80177b8:	2001      	movs	r0, #1
 80177ba:	e7f6      	b.n	80177aa <__any_on+0x30>

080177bc <__ascii_wctomb>:
 80177bc:	4603      	mov	r3, r0
 80177be:	4608      	mov	r0, r1
 80177c0:	b141      	cbz	r1, 80177d4 <__ascii_wctomb+0x18>
 80177c2:	2aff      	cmp	r2, #255	@ 0xff
 80177c4:	d904      	bls.n	80177d0 <__ascii_wctomb+0x14>
 80177c6:	228a      	movs	r2, #138	@ 0x8a
 80177c8:	601a      	str	r2, [r3, #0]
 80177ca:	f04f 30ff 	mov.w	r0, #4294967295
 80177ce:	4770      	bx	lr
 80177d0:	700a      	strb	r2, [r1, #0]
 80177d2:	2001      	movs	r0, #1
 80177d4:	4770      	bx	lr

080177d6 <__ssputs_r>:
 80177d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177da:	688e      	ldr	r6, [r1, #8]
 80177dc:	461f      	mov	r7, r3
 80177de:	42be      	cmp	r6, r7
 80177e0:	680b      	ldr	r3, [r1, #0]
 80177e2:	4682      	mov	sl, r0
 80177e4:	460c      	mov	r4, r1
 80177e6:	4690      	mov	r8, r2
 80177e8:	d82d      	bhi.n	8017846 <__ssputs_r+0x70>
 80177ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80177ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80177f2:	d026      	beq.n	8017842 <__ssputs_r+0x6c>
 80177f4:	6965      	ldr	r5, [r4, #20]
 80177f6:	6909      	ldr	r1, [r1, #16]
 80177f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80177fc:	eba3 0901 	sub.w	r9, r3, r1
 8017800:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017804:	1c7b      	adds	r3, r7, #1
 8017806:	444b      	add	r3, r9
 8017808:	106d      	asrs	r5, r5, #1
 801780a:	429d      	cmp	r5, r3
 801780c:	bf38      	it	cc
 801780e:	461d      	movcc	r5, r3
 8017810:	0553      	lsls	r3, r2, #21
 8017812:	d527      	bpl.n	8017864 <__ssputs_r+0x8e>
 8017814:	4629      	mov	r1, r5
 8017816:	f7ff fa81 	bl	8016d1c <_malloc_r>
 801781a:	4606      	mov	r6, r0
 801781c:	b360      	cbz	r0, 8017878 <__ssputs_r+0xa2>
 801781e:	6921      	ldr	r1, [r4, #16]
 8017820:	464a      	mov	r2, r9
 8017822:	f7fe febc 	bl	801659e <memcpy>
 8017826:	89a3      	ldrh	r3, [r4, #12]
 8017828:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801782c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017830:	81a3      	strh	r3, [r4, #12]
 8017832:	6126      	str	r6, [r4, #16]
 8017834:	6165      	str	r5, [r4, #20]
 8017836:	444e      	add	r6, r9
 8017838:	eba5 0509 	sub.w	r5, r5, r9
 801783c:	6026      	str	r6, [r4, #0]
 801783e:	60a5      	str	r5, [r4, #8]
 8017840:	463e      	mov	r6, r7
 8017842:	42be      	cmp	r6, r7
 8017844:	d900      	bls.n	8017848 <__ssputs_r+0x72>
 8017846:	463e      	mov	r6, r7
 8017848:	6820      	ldr	r0, [r4, #0]
 801784a:	4632      	mov	r2, r6
 801784c:	4641      	mov	r1, r8
 801784e:	f7fe fdb8 	bl	80163c2 <memmove>
 8017852:	68a3      	ldr	r3, [r4, #8]
 8017854:	1b9b      	subs	r3, r3, r6
 8017856:	60a3      	str	r3, [r4, #8]
 8017858:	6823      	ldr	r3, [r4, #0]
 801785a:	4433      	add	r3, r6
 801785c:	6023      	str	r3, [r4, #0]
 801785e:	2000      	movs	r0, #0
 8017860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017864:	462a      	mov	r2, r5
 8017866:	f000 fb91 	bl	8017f8c <_realloc_r>
 801786a:	4606      	mov	r6, r0
 801786c:	2800      	cmp	r0, #0
 801786e:	d1e0      	bne.n	8017832 <__ssputs_r+0x5c>
 8017870:	6921      	ldr	r1, [r4, #16]
 8017872:	4650      	mov	r0, sl
 8017874:	f7fe feac 	bl	80165d0 <_free_r>
 8017878:	230c      	movs	r3, #12
 801787a:	f8ca 3000 	str.w	r3, [sl]
 801787e:	89a3      	ldrh	r3, [r4, #12]
 8017880:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017884:	81a3      	strh	r3, [r4, #12]
 8017886:	f04f 30ff 	mov.w	r0, #4294967295
 801788a:	e7e9      	b.n	8017860 <__ssputs_r+0x8a>

0801788c <_svfiprintf_r>:
 801788c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017890:	4698      	mov	r8, r3
 8017892:	898b      	ldrh	r3, [r1, #12]
 8017894:	061b      	lsls	r3, r3, #24
 8017896:	b09d      	sub	sp, #116	@ 0x74
 8017898:	4607      	mov	r7, r0
 801789a:	460d      	mov	r5, r1
 801789c:	4614      	mov	r4, r2
 801789e:	d510      	bpl.n	80178c2 <_svfiprintf_r+0x36>
 80178a0:	690b      	ldr	r3, [r1, #16]
 80178a2:	b973      	cbnz	r3, 80178c2 <_svfiprintf_r+0x36>
 80178a4:	2140      	movs	r1, #64	@ 0x40
 80178a6:	f7ff fa39 	bl	8016d1c <_malloc_r>
 80178aa:	6028      	str	r0, [r5, #0]
 80178ac:	6128      	str	r0, [r5, #16]
 80178ae:	b930      	cbnz	r0, 80178be <_svfiprintf_r+0x32>
 80178b0:	230c      	movs	r3, #12
 80178b2:	603b      	str	r3, [r7, #0]
 80178b4:	f04f 30ff 	mov.w	r0, #4294967295
 80178b8:	b01d      	add	sp, #116	@ 0x74
 80178ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178be:	2340      	movs	r3, #64	@ 0x40
 80178c0:	616b      	str	r3, [r5, #20]
 80178c2:	2300      	movs	r3, #0
 80178c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80178c6:	2320      	movs	r3, #32
 80178c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80178cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80178d0:	2330      	movs	r3, #48	@ 0x30
 80178d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017a70 <_svfiprintf_r+0x1e4>
 80178d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80178da:	f04f 0901 	mov.w	r9, #1
 80178de:	4623      	mov	r3, r4
 80178e0:	469a      	mov	sl, r3
 80178e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178e6:	b10a      	cbz	r2, 80178ec <_svfiprintf_r+0x60>
 80178e8:	2a25      	cmp	r2, #37	@ 0x25
 80178ea:	d1f9      	bne.n	80178e0 <_svfiprintf_r+0x54>
 80178ec:	ebba 0b04 	subs.w	fp, sl, r4
 80178f0:	d00b      	beq.n	801790a <_svfiprintf_r+0x7e>
 80178f2:	465b      	mov	r3, fp
 80178f4:	4622      	mov	r2, r4
 80178f6:	4629      	mov	r1, r5
 80178f8:	4638      	mov	r0, r7
 80178fa:	f7ff ff6c 	bl	80177d6 <__ssputs_r>
 80178fe:	3001      	adds	r0, #1
 8017900:	f000 80a7 	beq.w	8017a52 <_svfiprintf_r+0x1c6>
 8017904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017906:	445a      	add	r2, fp
 8017908:	9209      	str	r2, [sp, #36]	@ 0x24
 801790a:	f89a 3000 	ldrb.w	r3, [sl]
 801790e:	2b00      	cmp	r3, #0
 8017910:	f000 809f 	beq.w	8017a52 <_svfiprintf_r+0x1c6>
 8017914:	2300      	movs	r3, #0
 8017916:	f04f 32ff 	mov.w	r2, #4294967295
 801791a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801791e:	f10a 0a01 	add.w	sl, sl, #1
 8017922:	9304      	str	r3, [sp, #16]
 8017924:	9307      	str	r3, [sp, #28]
 8017926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801792a:	931a      	str	r3, [sp, #104]	@ 0x68
 801792c:	4654      	mov	r4, sl
 801792e:	2205      	movs	r2, #5
 8017930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017934:	484e      	ldr	r0, [pc, #312]	@ (8017a70 <_svfiprintf_r+0x1e4>)
 8017936:	f7e8 fc73 	bl	8000220 <memchr>
 801793a:	9a04      	ldr	r2, [sp, #16]
 801793c:	b9d8      	cbnz	r0, 8017976 <_svfiprintf_r+0xea>
 801793e:	06d0      	lsls	r0, r2, #27
 8017940:	bf44      	itt	mi
 8017942:	2320      	movmi	r3, #32
 8017944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017948:	0711      	lsls	r1, r2, #28
 801794a:	bf44      	itt	mi
 801794c:	232b      	movmi	r3, #43	@ 0x2b
 801794e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017952:	f89a 3000 	ldrb.w	r3, [sl]
 8017956:	2b2a      	cmp	r3, #42	@ 0x2a
 8017958:	d015      	beq.n	8017986 <_svfiprintf_r+0xfa>
 801795a:	9a07      	ldr	r2, [sp, #28]
 801795c:	4654      	mov	r4, sl
 801795e:	2000      	movs	r0, #0
 8017960:	f04f 0c0a 	mov.w	ip, #10
 8017964:	4621      	mov	r1, r4
 8017966:	f811 3b01 	ldrb.w	r3, [r1], #1
 801796a:	3b30      	subs	r3, #48	@ 0x30
 801796c:	2b09      	cmp	r3, #9
 801796e:	d94b      	bls.n	8017a08 <_svfiprintf_r+0x17c>
 8017970:	b1b0      	cbz	r0, 80179a0 <_svfiprintf_r+0x114>
 8017972:	9207      	str	r2, [sp, #28]
 8017974:	e014      	b.n	80179a0 <_svfiprintf_r+0x114>
 8017976:	eba0 0308 	sub.w	r3, r0, r8
 801797a:	fa09 f303 	lsl.w	r3, r9, r3
 801797e:	4313      	orrs	r3, r2
 8017980:	9304      	str	r3, [sp, #16]
 8017982:	46a2      	mov	sl, r4
 8017984:	e7d2      	b.n	801792c <_svfiprintf_r+0xa0>
 8017986:	9b03      	ldr	r3, [sp, #12]
 8017988:	1d19      	adds	r1, r3, #4
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	9103      	str	r1, [sp, #12]
 801798e:	2b00      	cmp	r3, #0
 8017990:	bfbb      	ittet	lt
 8017992:	425b      	neglt	r3, r3
 8017994:	f042 0202 	orrlt.w	r2, r2, #2
 8017998:	9307      	strge	r3, [sp, #28]
 801799a:	9307      	strlt	r3, [sp, #28]
 801799c:	bfb8      	it	lt
 801799e:	9204      	strlt	r2, [sp, #16]
 80179a0:	7823      	ldrb	r3, [r4, #0]
 80179a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80179a4:	d10a      	bne.n	80179bc <_svfiprintf_r+0x130>
 80179a6:	7863      	ldrb	r3, [r4, #1]
 80179a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80179aa:	d132      	bne.n	8017a12 <_svfiprintf_r+0x186>
 80179ac:	9b03      	ldr	r3, [sp, #12]
 80179ae:	1d1a      	adds	r2, r3, #4
 80179b0:	681b      	ldr	r3, [r3, #0]
 80179b2:	9203      	str	r2, [sp, #12]
 80179b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80179b8:	3402      	adds	r4, #2
 80179ba:	9305      	str	r3, [sp, #20]
 80179bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017a80 <_svfiprintf_r+0x1f4>
 80179c0:	7821      	ldrb	r1, [r4, #0]
 80179c2:	2203      	movs	r2, #3
 80179c4:	4650      	mov	r0, sl
 80179c6:	f7e8 fc2b 	bl	8000220 <memchr>
 80179ca:	b138      	cbz	r0, 80179dc <_svfiprintf_r+0x150>
 80179cc:	9b04      	ldr	r3, [sp, #16]
 80179ce:	eba0 000a 	sub.w	r0, r0, sl
 80179d2:	2240      	movs	r2, #64	@ 0x40
 80179d4:	4082      	lsls	r2, r0
 80179d6:	4313      	orrs	r3, r2
 80179d8:	3401      	adds	r4, #1
 80179da:	9304      	str	r3, [sp, #16]
 80179dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179e0:	4824      	ldr	r0, [pc, #144]	@ (8017a74 <_svfiprintf_r+0x1e8>)
 80179e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80179e6:	2206      	movs	r2, #6
 80179e8:	f7e8 fc1a 	bl	8000220 <memchr>
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d036      	beq.n	8017a5e <_svfiprintf_r+0x1d2>
 80179f0:	4b21      	ldr	r3, [pc, #132]	@ (8017a78 <_svfiprintf_r+0x1ec>)
 80179f2:	bb1b      	cbnz	r3, 8017a3c <_svfiprintf_r+0x1b0>
 80179f4:	9b03      	ldr	r3, [sp, #12]
 80179f6:	3307      	adds	r3, #7
 80179f8:	f023 0307 	bic.w	r3, r3, #7
 80179fc:	3308      	adds	r3, #8
 80179fe:	9303      	str	r3, [sp, #12]
 8017a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a02:	4433      	add	r3, r6
 8017a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8017a06:	e76a      	b.n	80178de <_svfiprintf_r+0x52>
 8017a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a0c:	460c      	mov	r4, r1
 8017a0e:	2001      	movs	r0, #1
 8017a10:	e7a8      	b.n	8017964 <_svfiprintf_r+0xd8>
 8017a12:	2300      	movs	r3, #0
 8017a14:	3401      	adds	r4, #1
 8017a16:	9305      	str	r3, [sp, #20]
 8017a18:	4619      	mov	r1, r3
 8017a1a:	f04f 0c0a 	mov.w	ip, #10
 8017a1e:	4620      	mov	r0, r4
 8017a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a24:	3a30      	subs	r2, #48	@ 0x30
 8017a26:	2a09      	cmp	r2, #9
 8017a28:	d903      	bls.n	8017a32 <_svfiprintf_r+0x1a6>
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d0c6      	beq.n	80179bc <_svfiprintf_r+0x130>
 8017a2e:	9105      	str	r1, [sp, #20]
 8017a30:	e7c4      	b.n	80179bc <_svfiprintf_r+0x130>
 8017a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a36:	4604      	mov	r4, r0
 8017a38:	2301      	movs	r3, #1
 8017a3a:	e7f0      	b.n	8017a1e <_svfiprintf_r+0x192>
 8017a3c:	ab03      	add	r3, sp, #12
 8017a3e:	9300      	str	r3, [sp, #0]
 8017a40:	462a      	mov	r2, r5
 8017a42:	4b0e      	ldr	r3, [pc, #56]	@ (8017a7c <_svfiprintf_r+0x1f0>)
 8017a44:	a904      	add	r1, sp, #16
 8017a46:	4638      	mov	r0, r7
 8017a48:	f3af 8000 	nop.w
 8017a4c:	1c42      	adds	r2, r0, #1
 8017a4e:	4606      	mov	r6, r0
 8017a50:	d1d6      	bne.n	8017a00 <_svfiprintf_r+0x174>
 8017a52:	89ab      	ldrh	r3, [r5, #12]
 8017a54:	065b      	lsls	r3, r3, #25
 8017a56:	f53f af2d 	bmi.w	80178b4 <_svfiprintf_r+0x28>
 8017a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017a5c:	e72c      	b.n	80178b8 <_svfiprintf_r+0x2c>
 8017a5e:	ab03      	add	r3, sp, #12
 8017a60:	9300      	str	r3, [sp, #0]
 8017a62:	462a      	mov	r2, r5
 8017a64:	4b05      	ldr	r3, [pc, #20]	@ (8017a7c <_svfiprintf_r+0x1f0>)
 8017a66:	a904      	add	r1, sp, #16
 8017a68:	4638      	mov	r0, r7
 8017a6a:	f000 f879 	bl	8017b60 <_printf_i>
 8017a6e:	e7ed      	b.n	8017a4c <_svfiprintf_r+0x1c0>
 8017a70:	08019398 	.word	0x08019398
 8017a74:	080193a2 	.word	0x080193a2
 8017a78:	00000000 	.word	0x00000000
 8017a7c:	080177d7 	.word	0x080177d7
 8017a80:	0801939e 	.word	0x0801939e

08017a84 <_printf_common>:
 8017a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a88:	4616      	mov	r6, r2
 8017a8a:	4698      	mov	r8, r3
 8017a8c:	688a      	ldr	r2, [r1, #8]
 8017a8e:	690b      	ldr	r3, [r1, #16]
 8017a90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017a94:	4293      	cmp	r3, r2
 8017a96:	bfb8      	it	lt
 8017a98:	4613      	movlt	r3, r2
 8017a9a:	6033      	str	r3, [r6, #0]
 8017a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017aa0:	4607      	mov	r7, r0
 8017aa2:	460c      	mov	r4, r1
 8017aa4:	b10a      	cbz	r2, 8017aaa <_printf_common+0x26>
 8017aa6:	3301      	adds	r3, #1
 8017aa8:	6033      	str	r3, [r6, #0]
 8017aaa:	6823      	ldr	r3, [r4, #0]
 8017aac:	0699      	lsls	r1, r3, #26
 8017aae:	bf42      	ittt	mi
 8017ab0:	6833      	ldrmi	r3, [r6, #0]
 8017ab2:	3302      	addmi	r3, #2
 8017ab4:	6033      	strmi	r3, [r6, #0]
 8017ab6:	6825      	ldr	r5, [r4, #0]
 8017ab8:	f015 0506 	ands.w	r5, r5, #6
 8017abc:	d106      	bne.n	8017acc <_printf_common+0x48>
 8017abe:	f104 0a19 	add.w	sl, r4, #25
 8017ac2:	68e3      	ldr	r3, [r4, #12]
 8017ac4:	6832      	ldr	r2, [r6, #0]
 8017ac6:	1a9b      	subs	r3, r3, r2
 8017ac8:	42ab      	cmp	r3, r5
 8017aca:	dc26      	bgt.n	8017b1a <_printf_common+0x96>
 8017acc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017ad0:	6822      	ldr	r2, [r4, #0]
 8017ad2:	3b00      	subs	r3, #0
 8017ad4:	bf18      	it	ne
 8017ad6:	2301      	movne	r3, #1
 8017ad8:	0692      	lsls	r2, r2, #26
 8017ada:	d42b      	bmi.n	8017b34 <_printf_common+0xb0>
 8017adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017ae0:	4641      	mov	r1, r8
 8017ae2:	4638      	mov	r0, r7
 8017ae4:	47c8      	blx	r9
 8017ae6:	3001      	adds	r0, #1
 8017ae8:	d01e      	beq.n	8017b28 <_printf_common+0xa4>
 8017aea:	6823      	ldr	r3, [r4, #0]
 8017aec:	6922      	ldr	r2, [r4, #16]
 8017aee:	f003 0306 	and.w	r3, r3, #6
 8017af2:	2b04      	cmp	r3, #4
 8017af4:	bf02      	ittt	eq
 8017af6:	68e5      	ldreq	r5, [r4, #12]
 8017af8:	6833      	ldreq	r3, [r6, #0]
 8017afa:	1aed      	subeq	r5, r5, r3
 8017afc:	68a3      	ldr	r3, [r4, #8]
 8017afe:	bf0c      	ite	eq
 8017b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b04:	2500      	movne	r5, #0
 8017b06:	4293      	cmp	r3, r2
 8017b08:	bfc4      	itt	gt
 8017b0a:	1a9b      	subgt	r3, r3, r2
 8017b0c:	18ed      	addgt	r5, r5, r3
 8017b0e:	2600      	movs	r6, #0
 8017b10:	341a      	adds	r4, #26
 8017b12:	42b5      	cmp	r5, r6
 8017b14:	d11a      	bne.n	8017b4c <_printf_common+0xc8>
 8017b16:	2000      	movs	r0, #0
 8017b18:	e008      	b.n	8017b2c <_printf_common+0xa8>
 8017b1a:	2301      	movs	r3, #1
 8017b1c:	4652      	mov	r2, sl
 8017b1e:	4641      	mov	r1, r8
 8017b20:	4638      	mov	r0, r7
 8017b22:	47c8      	blx	r9
 8017b24:	3001      	adds	r0, #1
 8017b26:	d103      	bne.n	8017b30 <_printf_common+0xac>
 8017b28:	f04f 30ff 	mov.w	r0, #4294967295
 8017b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b30:	3501      	adds	r5, #1
 8017b32:	e7c6      	b.n	8017ac2 <_printf_common+0x3e>
 8017b34:	18e1      	adds	r1, r4, r3
 8017b36:	1c5a      	adds	r2, r3, #1
 8017b38:	2030      	movs	r0, #48	@ 0x30
 8017b3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017b3e:	4422      	add	r2, r4
 8017b40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017b44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017b48:	3302      	adds	r3, #2
 8017b4a:	e7c7      	b.n	8017adc <_printf_common+0x58>
 8017b4c:	2301      	movs	r3, #1
 8017b4e:	4622      	mov	r2, r4
 8017b50:	4641      	mov	r1, r8
 8017b52:	4638      	mov	r0, r7
 8017b54:	47c8      	blx	r9
 8017b56:	3001      	adds	r0, #1
 8017b58:	d0e6      	beq.n	8017b28 <_printf_common+0xa4>
 8017b5a:	3601      	adds	r6, #1
 8017b5c:	e7d9      	b.n	8017b12 <_printf_common+0x8e>
	...

08017b60 <_printf_i>:
 8017b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b64:	7e0f      	ldrb	r7, [r1, #24]
 8017b66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017b68:	2f78      	cmp	r7, #120	@ 0x78
 8017b6a:	4691      	mov	r9, r2
 8017b6c:	4680      	mov	r8, r0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	469a      	mov	sl, r3
 8017b72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017b76:	d807      	bhi.n	8017b88 <_printf_i+0x28>
 8017b78:	2f62      	cmp	r7, #98	@ 0x62
 8017b7a:	d80a      	bhi.n	8017b92 <_printf_i+0x32>
 8017b7c:	2f00      	cmp	r7, #0
 8017b7e:	f000 80d2 	beq.w	8017d26 <_printf_i+0x1c6>
 8017b82:	2f58      	cmp	r7, #88	@ 0x58
 8017b84:	f000 80b9 	beq.w	8017cfa <_printf_i+0x19a>
 8017b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017b8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017b90:	e03a      	b.n	8017c08 <_printf_i+0xa8>
 8017b92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017b96:	2b15      	cmp	r3, #21
 8017b98:	d8f6      	bhi.n	8017b88 <_printf_i+0x28>
 8017b9a:	a101      	add	r1, pc, #4	@ (adr r1, 8017ba0 <_printf_i+0x40>)
 8017b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017ba0:	08017bf9 	.word	0x08017bf9
 8017ba4:	08017c0d 	.word	0x08017c0d
 8017ba8:	08017b89 	.word	0x08017b89
 8017bac:	08017b89 	.word	0x08017b89
 8017bb0:	08017b89 	.word	0x08017b89
 8017bb4:	08017b89 	.word	0x08017b89
 8017bb8:	08017c0d 	.word	0x08017c0d
 8017bbc:	08017b89 	.word	0x08017b89
 8017bc0:	08017b89 	.word	0x08017b89
 8017bc4:	08017b89 	.word	0x08017b89
 8017bc8:	08017b89 	.word	0x08017b89
 8017bcc:	08017d0d 	.word	0x08017d0d
 8017bd0:	08017c37 	.word	0x08017c37
 8017bd4:	08017cc7 	.word	0x08017cc7
 8017bd8:	08017b89 	.word	0x08017b89
 8017bdc:	08017b89 	.word	0x08017b89
 8017be0:	08017d2f 	.word	0x08017d2f
 8017be4:	08017b89 	.word	0x08017b89
 8017be8:	08017c37 	.word	0x08017c37
 8017bec:	08017b89 	.word	0x08017b89
 8017bf0:	08017b89 	.word	0x08017b89
 8017bf4:	08017ccf 	.word	0x08017ccf
 8017bf8:	6833      	ldr	r3, [r6, #0]
 8017bfa:	1d1a      	adds	r2, r3, #4
 8017bfc:	681b      	ldr	r3, [r3, #0]
 8017bfe:	6032      	str	r2, [r6, #0]
 8017c00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017c04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017c08:	2301      	movs	r3, #1
 8017c0a:	e09d      	b.n	8017d48 <_printf_i+0x1e8>
 8017c0c:	6833      	ldr	r3, [r6, #0]
 8017c0e:	6820      	ldr	r0, [r4, #0]
 8017c10:	1d19      	adds	r1, r3, #4
 8017c12:	6031      	str	r1, [r6, #0]
 8017c14:	0606      	lsls	r6, r0, #24
 8017c16:	d501      	bpl.n	8017c1c <_printf_i+0xbc>
 8017c18:	681d      	ldr	r5, [r3, #0]
 8017c1a:	e003      	b.n	8017c24 <_printf_i+0xc4>
 8017c1c:	0645      	lsls	r5, r0, #25
 8017c1e:	d5fb      	bpl.n	8017c18 <_printf_i+0xb8>
 8017c20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017c24:	2d00      	cmp	r5, #0
 8017c26:	da03      	bge.n	8017c30 <_printf_i+0xd0>
 8017c28:	232d      	movs	r3, #45	@ 0x2d
 8017c2a:	426d      	negs	r5, r5
 8017c2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017c30:	4859      	ldr	r0, [pc, #356]	@ (8017d98 <_printf_i+0x238>)
 8017c32:	230a      	movs	r3, #10
 8017c34:	e011      	b.n	8017c5a <_printf_i+0xfa>
 8017c36:	6821      	ldr	r1, [r4, #0]
 8017c38:	6833      	ldr	r3, [r6, #0]
 8017c3a:	0608      	lsls	r0, r1, #24
 8017c3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c40:	d402      	bmi.n	8017c48 <_printf_i+0xe8>
 8017c42:	0649      	lsls	r1, r1, #25
 8017c44:	bf48      	it	mi
 8017c46:	b2ad      	uxthmi	r5, r5
 8017c48:	2f6f      	cmp	r7, #111	@ 0x6f
 8017c4a:	4853      	ldr	r0, [pc, #332]	@ (8017d98 <_printf_i+0x238>)
 8017c4c:	6033      	str	r3, [r6, #0]
 8017c4e:	bf14      	ite	ne
 8017c50:	230a      	movne	r3, #10
 8017c52:	2308      	moveq	r3, #8
 8017c54:	2100      	movs	r1, #0
 8017c56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017c5a:	6866      	ldr	r6, [r4, #4]
 8017c5c:	60a6      	str	r6, [r4, #8]
 8017c5e:	2e00      	cmp	r6, #0
 8017c60:	bfa2      	ittt	ge
 8017c62:	6821      	ldrge	r1, [r4, #0]
 8017c64:	f021 0104 	bicge.w	r1, r1, #4
 8017c68:	6021      	strge	r1, [r4, #0]
 8017c6a:	b90d      	cbnz	r5, 8017c70 <_printf_i+0x110>
 8017c6c:	2e00      	cmp	r6, #0
 8017c6e:	d04b      	beq.n	8017d08 <_printf_i+0x1a8>
 8017c70:	4616      	mov	r6, r2
 8017c72:	fbb5 f1f3 	udiv	r1, r5, r3
 8017c76:	fb03 5711 	mls	r7, r3, r1, r5
 8017c7a:	5dc7      	ldrb	r7, [r0, r7]
 8017c7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017c80:	462f      	mov	r7, r5
 8017c82:	42bb      	cmp	r3, r7
 8017c84:	460d      	mov	r5, r1
 8017c86:	d9f4      	bls.n	8017c72 <_printf_i+0x112>
 8017c88:	2b08      	cmp	r3, #8
 8017c8a:	d10b      	bne.n	8017ca4 <_printf_i+0x144>
 8017c8c:	6823      	ldr	r3, [r4, #0]
 8017c8e:	07df      	lsls	r7, r3, #31
 8017c90:	d508      	bpl.n	8017ca4 <_printf_i+0x144>
 8017c92:	6923      	ldr	r3, [r4, #16]
 8017c94:	6861      	ldr	r1, [r4, #4]
 8017c96:	4299      	cmp	r1, r3
 8017c98:	bfde      	ittt	le
 8017c9a:	2330      	movle	r3, #48	@ 0x30
 8017c9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017ca0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017ca4:	1b92      	subs	r2, r2, r6
 8017ca6:	6122      	str	r2, [r4, #16]
 8017ca8:	f8cd a000 	str.w	sl, [sp]
 8017cac:	464b      	mov	r3, r9
 8017cae:	aa03      	add	r2, sp, #12
 8017cb0:	4621      	mov	r1, r4
 8017cb2:	4640      	mov	r0, r8
 8017cb4:	f7ff fee6 	bl	8017a84 <_printf_common>
 8017cb8:	3001      	adds	r0, #1
 8017cba:	d14a      	bne.n	8017d52 <_printf_i+0x1f2>
 8017cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8017cc0:	b004      	add	sp, #16
 8017cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cc6:	6823      	ldr	r3, [r4, #0]
 8017cc8:	f043 0320 	orr.w	r3, r3, #32
 8017ccc:	6023      	str	r3, [r4, #0]
 8017cce:	4833      	ldr	r0, [pc, #204]	@ (8017d9c <_printf_i+0x23c>)
 8017cd0:	2778      	movs	r7, #120	@ 0x78
 8017cd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017cd6:	6823      	ldr	r3, [r4, #0]
 8017cd8:	6831      	ldr	r1, [r6, #0]
 8017cda:	061f      	lsls	r7, r3, #24
 8017cdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8017ce0:	d402      	bmi.n	8017ce8 <_printf_i+0x188>
 8017ce2:	065f      	lsls	r7, r3, #25
 8017ce4:	bf48      	it	mi
 8017ce6:	b2ad      	uxthmi	r5, r5
 8017ce8:	6031      	str	r1, [r6, #0]
 8017cea:	07d9      	lsls	r1, r3, #31
 8017cec:	bf44      	itt	mi
 8017cee:	f043 0320 	orrmi.w	r3, r3, #32
 8017cf2:	6023      	strmi	r3, [r4, #0]
 8017cf4:	b11d      	cbz	r5, 8017cfe <_printf_i+0x19e>
 8017cf6:	2310      	movs	r3, #16
 8017cf8:	e7ac      	b.n	8017c54 <_printf_i+0xf4>
 8017cfa:	4827      	ldr	r0, [pc, #156]	@ (8017d98 <_printf_i+0x238>)
 8017cfc:	e7e9      	b.n	8017cd2 <_printf_i+0x172>
 8017cfe:	6823      	ldr	r3, [r4, #0]
 8017d00:	f023 0320 	bic.w	r3, r3, #32
 8017d04:	6023      	str	r3, [r4, #0]
 8017d06:	e7f6      	b.n	8017cf6 <_printf_i+0x196>
 8017d08:	4616      	mov	r6, r2
 8017d0a:	e7bd      	b.n	8017c88 <_printf_i+0x128>
 8017d0c:	6833      	ldr	r3, [r6, #0]
 8017d0e:	6825      	ldr	r5, [r4, #0]
 8017d10:	6961      	ldr	r1, [r4, #20]
 8017d12:	1d18      	adds	r0, r3, #4
 8017d14:	6030      	str	r0, [r6, #0]
 8017d16:	062e      	lsls	r6, r5, #24
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	d501      	bpl.n	8017d20 <_printf_i+0x1c0>
 8017d1c:	6019      	str	r1, [r3, #0]
 8017d1e:	e002      	b.n	8017d26 <_printf_i+0x1c6>
 8017d20:	0668      	lsls	r0, r5, #25
 8017d22:	d5fb      	bpl.n	8017d1c <_printf_i+0x1bc>
 8017d24:	8019      	strh	r1, [r3, #0]
 8017d26:	2300      	movs	r3, #0
 8017d28:	6123      	str	r3, [r4, #16]
 8017d2a:	4616      	mov	r6, r2
 8017d2c:	e7bc      	b.n	8017ca8 <_printf_i+0x148>
 8017d2e:	6833      	ldr	r3, [r6, #0]
 8017d30:	1d1a      	adds	r2, r3, #4
 8017d32:	6032      	str	r2, [r6, #0]
 8017d34:	681e      	ldr	r6, [r3, #0]
 8017d36:	6862      	ldr	r2, [r4, #4]
 8017d38:	2100      	movs	r1, #0
 8017d3a:	4630      	mov	r0, r6
 8017d3c:	f7e8 fa70 	bl	8000220 <memchr>
 8017d40:	b108      	cbz	r0, 8017d46 <_printf_i+0x1e6>
 8017d42:	1b80      	subs	r0, r0, r6
 8017d44:	6060      	str	r0, [r4, #4]
 8017d46:	6863      	ldr	r3, [r4, #4]
 8017d48:	6123      	str	r3, [r4, #16]
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017d50:	e7aa      	b.n	8017ca8 <_printf_i+0x148>
 8017d52:	6923      	ldr	r3, [r4, #16]
 8017d54:	4632      	mov	r2, r6
 8017d56:	4649      	mov	r1, r9
 8017d58:	4640      	mov	r0, r8
 8017d5a:	47d0      	blx	sl
 8017d5c:	3001      	adds	r0, #1
 8017d5e:	d0ad      	beq.n	8017cbc <_printf_i+0x15c>
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	079b      	lsls	r3, r3, #30
 8017d64:	d413      	bmi.n	8017d8e <_printf_i+0x22e>
 8017d66:	68e0      	ldr	r0, [r4, #12]
 8017d68:	9b03      	ldr	r3, [sp, #12]
 8017d6a:	4298      	cmp	r0, r3
 8017d6c:	bfb8      	it	lt
 8017d6e:	4618      	movlt	r0, r3
 8017d70:	e7a6      	b.n	8017cc0 <_printf_i+0x160>
 8017d72:	2301      	movs	r3, #1
 8017d74:	4632      	mov	r2, r6
 8017d76:	4649      	mov	r1, r9
 8017d78:	4640      	mov	r0, r8
 8017d7a:	47d0      	blx	sl
 8017d7c:	3001      	adds	r0, #1
 8017d7e:	d09d      	beq.n	8017cbc <_printf_i+0x15c>
 8017d80:	3501      	adds	r5, #1
 8017d82:	68e3      	ldr	r3, [r4, #12]
 8017d84:	9903      	ldr	r1, [sp, #12]
 8017d86:	1a5b      	subs	r3, r3, r1
 8017d88:	42ab      	cmp	r3, r5
 8017d8a:	dcf2      	bgt.n	8017d72 <_printf_i+0x212>
 8017d8c:	e7eb      	b.n	8017d66 <_printf_i+0x206>
 8017d8e:	2500      	movs	r5, #0
 8017d90:	f104 0619 	add.w	r6, r4, #25
 8017d94:	e7f5      	b.n	8017d82 <_printf_i+0x222>
 8017d96:	bf00      	nop
 8017d98:	080193a9 	.word	0x080193a9
 8017d9c:	080193ba 	.word	0x080193ba

08017da0 <__sflush_r>:
 8017da0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017da8:	0716      	lsls	r6, r2, #28
 8017daa:	4605      	mov	r5, r0
 8017dac:	460c      	mov	r4, r1
 8017dae:	d454      	bmi.n	8017e5a <__sflush_r+0xba>
 8017db0:	684b      	ldr	r3, [r1, #4]
 8017db2:	2b00      	cmp	r3, #0
 8017db4:	dc02      	bgt.n	8017dbc <__sflush_r+0x1c>
 8017db6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	dd48      	ble.n	8017e4e <__sflush_r+0xae>
 8017dbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017dbe:	2e00      	cmp	r6, #0
 8017dc0:	d045      	beq.n	8017e4e <__sflush_r+0xae>
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017dc8:	682f      	ldr	r7, [r5, #0]
 8017dca:	6a21      	ldr	r1, [r4, #32]
 8017dcc:	602b      	str	r3, [r5, #0]
 8017dce:	d030      	beq.n	8017e32 <__sflush_r+0x92>
 8017dd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017dd2:	89a3      	ldrh	r3, [r4, #12]
 8017dd4:	0759      	lsls	r1, r3, #29
 8017dd6:	d505      	bpl.n	8017de4 <__sflush_r+0x44>
 8017dd8:	6863      	ldr	r3, [r4, #4]
 8017dda:	1ad2      	subs	r2, r2, r3
 8017ddc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017dde:	b10b      	cbz	r3, 8017de4 <__sflush_r+0x44>
 8017de0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017de2:	1ad2      	subs	r2, r2, r3
 8017de4:	2300      	movs	r3, #0
 8017de6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017de8:	6a21      	ldr	r1, [r4, #32]
 8017dea:	4628      	mov	r0, r5
 8017dec:	47b0      	blx	r6
 8017dee:	1c43      	adds	r3, r0, #1
 8017df0:	89a3      	ldrh	r3, [r4, #12]
 8017df2:	d106      	bne.n	8017e02 <__sflush_r+0x62>
 8017df4:	6829      	ldr	r1, [r5, #0]
 8017df6:	291d      	cmp	r1, #29
 8017df8:	d82b      	bhi.n	8017e52 <__sflush_r+0xb2>
 8017dfa:	4a2a      	ldr	r2, [pc, #168]	@ (8017ea4 <__sflush_r+0x104>)
 8017dfc:	410a      	asrs	r2, r1
 8017dfe:	07d6      	lsls	r6, r2, #31
 8017e00:	d427      	bmi.n	8017e52 <__sflush_r+0xb2>
 8017e02:	2200      	movs	r2, #0
 8017e04:	6062      	str	r2, [r4, #4]
 8017e06:	04d9      	lsls	r1, r3, #19
 8017e08:	6922      	ldr	r2, [r4, #16]
 8017e0a:	6022      	str	r2, [r4, #0]
 8017e0c:	d504      	bpl.n	8017e18 <__sflush_r+0x78>
 8017e0e:	1c42      	adds	r2, r0, #1
 8017e10:	d101      	bne.n	8017e16 <__sflush_r+0x76>
 8017e12:	682b      	ldr	r3, [r5, #0]
 8017e14:	b903      	cbnz	r3, 8017e18 <__sflush_r+0x78>
 8017e16:	6560      	str	r0, [r4, #84]	@ 0x54
 8017e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017e1a:	602f      	str	r7, [r5, #0]
 8017e1c:	b1b9      	cbz	r1, 8017e4e <__sflush_r+0xae>
 8017e1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017e22:	4299      	cmp	r1, r3
 8017e24:	d002      	beq.n	8017e2c <__sflush_r+0x8c>
 8017e26:	4628      	mov	r0, r5
 8017e28:	f7fe fbd2 	bl	80165d0 <_free_r>
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017e30:	e00d      	b.n	8017e4e <__sflush_r+0xae>
 8017e32:	2301      	movs	r3, #1
 8017e34:	4628      	mov	r0, r5
 8017e36:	47b0      	blx	r6
 8017e38:	4602      	mov	r2, r0
 8017e3a:	1c50      	adds	r0, r2, #1
 8017e3c:	d1c9      	bne.n	8017dd2 <__sflush_r+0x32>
 8017e3e:	682b      	ldr	r3, [r5, #0]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d0c6      	beq.n	8017dd2 <__sflush_r+0x32>
 8017e44:	2b1d      	cmp	r3, #29
 8017e46:	d001      	beq.n	8017e4c <__sflush_r+0xac>
 8017e48:	2b16      	cmp	r3, #22
 8017e4a:	d11e      	bne.n	8017e8a <__sflush_r+0xea>
 8017e4c:	602f      	str	r7, [r5, #0]
 8017e4e:	2000      	movs	r0, #0
 8017e50:	e022      	b.n	8017e98 <__sflush_r+0xf8>
 8017e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e56:	b21b      	sxth	r3, r3
 8017e58:	e01b      	b.n	8017e92 <__sflush_r+0xf2>
 8017e5a:	690f      	ldr	r7, [r1, #16]
 8017e5c:	2f00      	cmp	r7, #0
 8017e5e:	d0f6      	beq.n	8017e4e <__sflush_r+0xae>
 8017e60:	0793      	lsls	r3, r2, #30
 8017e62:	680e      	ldr	r6, [r1, #0]
 8017e64:	bf08      	it	eq
 8017e66:	694b      	ldreq	r3, [r1, #20]
 8017e68:	600f      	str	r7, [r1, #0]
 8017e6a:	bf18      	it	ne
 8017e6c:	2300      	movne	r3, #0
 8017e6e:	eba6 0807 	sub.w	r8, r6, r7
 8017e72:	608b      	str	r3, [r1, #8]
 8017e74:	f1b8 0f00 	cmp.w	r8, #0
 8017e78:	dde9      	ble.n	8017e4e <__sflush_r+0xae>
 8017e7a:	6a21      	ldr	r1, [r4, #32]
 8017e7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017e7e:	4643      	mov	r3, r8
 8017e80:	463a      	mov	r2, r7
 8017e82:	4628      	mov	r0, r5
 8017e84:	47b0      	blx	r6
 8017e86:	2800      	cmp	r0, #0
 8017e88:	dc08      	bgt.n	8017e9c <__sflush_r+0xfc>
 8017e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e92:	81a3      	strh	r3, [r4, #12]
 8017e94:	f04f 30ff 	mov.w	r0, #4294967295
 8017e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e9c:	4407      	add	r7, r0
 8017e9e:	eba8 0800 	sub.w	r8, r8, r0
 8017ea2:	e7e7      	b.n	8017e74 <__sflush_r+0xd4>
 8017ea4:	dfbffffe 	.word	0xdfbffffe

08017ea8 <_fflush_r>:
 8017ea8:	b538      	push	{r3, r4, r5, lr}
 8017eaa:	690b      	ldr	r3, [r1, #16]
 8017eac:	4605      	mov	r5, r0
 8017eae:	460c      	mov	r4, r1
 8017eb0:	b913      	cbnz	r3, 8017eb8 <_fflush_r+0x10>
 8017eb2:	2500      	movs	r5, #0
 8017eb4:	4628      	mov	r0, r5
 8017eb6:	bd38      	pop	{r3, r4, r5, pc}
 8017eb8:	b118      	cbz	r0, 8017ec2 <_fflush_r+0x1a>
 8017eba:	6a03      	ldr	r3, [r0, #32]
 8017ebc:	b90b      	cbnz	r3, 8017ec2 <_fflush_r+0x1a>
 8017ebe:	f7fe f9d3 	bl	8016268 <__sinit>
 8017ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d0f3      	beq.n	8017eb2 <_fflush_r+0xa>
 8017eca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ecc:	07d0      	lsls	r0, r2, #31
 8017ece:	d404      	bmi.n	8017eda <_fflush_r+0x32>
 8017ed0:	0599      	lsls	r1, r3, #22
 8017ed2:	d402      	bmi.n	8017eda <_fflush_r+0x32>
 8017ed4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ed6:	f7fe fb60 	bl	801659a <__retarget_lock_acquire_recursive>
 8017eda:	4628      	mov	r0, r5
 8017edc:	4621      	mov	r1, r4
 8017ede:	f7ff ff5f 	bl	8017da0 <__sflush_r>
 8017ee2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ee4:	07da      	lsls	r2, r3, #31
 8017ee6:	4605      	mov	r5, r0
 8017ee8:	d4e4      	bmi.n	8017eb4 <_fflush_r+0xc>
 8017eea:	89a3      	ldrh	r3, [r4, #12]
 8017eec:	059b      	lsls	r3, r3, #22
 8017eee:	d4e1      	bmi.n	8017eb4 <_fflush_r+0xc>
 8017ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ef2:	f7fe fb53 	bl	801659c <__retarget_lock_release_recursive>
 8017ef6:	e7dd      	b.n	8017eb4 <_fflush_r+0xc>

08017ef8 <_sbrk_r>:
 8017ef8:	b538      	push	{r3, r4, r5, lr}
 8017efa:	4d06      	ldr	r5, [pc, #24]	@ (8017f14 <_sbrk_r+0x1c>)
 8017efc:	2300      	movs	r3, #0
 8017efe:	4604      	mov	r4, r0
 8017f00:	4608      	mov	r0, r1
 8017f02:	602b      	str	r3, [r5, #0]
 8017f04:	f7ef f814 	bl	8006f30 <_sbrk>
 8017f08:	1c43      	adds	r3, r0, #1
 8017f0a:	d102      	bne.n	8017f12 <_sbrk_r+0x1a>
 8017f0c:	682b      	ldr	r3, [r5, #0]
 8017f0e:	b103      	cbz	r3, 8017f12 <_sbrk_r+0x1a>
 8017f10:	6023      	str	r3, [r4, #0]
 8017f12:	bd38      	pop	{r3, r4, r5, pc}
 8017f14:	20014de8 	.word	0x20014de8

08017f18 <__assert_func>:
 8017f18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017f1a:	4614      	mov	r4, r2
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	4b09      	ldr	r3, [pc, #36]	@ (8017f44 <__assert_func+0x2c>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	4605      	mov	r5, r0
 8017f24:	68d8      	ldr	r0, [r3, #12]
 8017f26:	b954      	cbnz	r4, 8017f3e <__assert_func+0x26>
 8017f28:	4b07      	ldr	r3, [pc, #28]	@ (8017f48 <__assert_func+0x30>)
 8017f2a:	461c      	mov	r4, r3
 8017f2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017f30:	9100      	str	r1, [sp, #0]
 8017f32:	462b      	mov	r3, r5
 8017f34:	4905      	ldr	r1, [pc, #20]	@ (8017f4c <__assert_func+0x34>)
 8017f36:	f000 f857 	bl	8017fe8 <fiprintf>
 8017f3a:	f000 f867 	bl	801800c <abort>
 8017f3e:	4b04      	ldr	r3, [pc, #16]	@ (8017f50 <__assert_func+0x38>)
 8017f40:	e7f4      	b.n	8017f2c <__assert_func+0x14>
 8017f42:	bf00      	nop
 8017f44:	200001f4 	.word	0x200001f4
 8017f48:	08019406 	.word	0x08019406
 8017f4c:	080193d8 	.word	0x080193d8
 8017f50:	080193cb 	.word	0x080193cb

08017f54 <_calloc_r>:
 8017f54:	b570      	push	{r4, r5, r6, lr}
 8017f56:	fba1 5402 	umull	r5, r4, r1, r2
 8017f5a:	b93c      	cbnz	r4, 8017f6c <_calloc_r+0x18>
 8017f5c:	4629      	mov	r1, r5
 8017f5e:	f7fe fedd 	bl	8016d1c <_malloc_r>
 8017f62:	4606      	mov	r6, r0
 8017f64:	b928      	cbnz	r0, 8017f72 <_calloc_r+0x1e>
 8017f66:	2600      	movs	r6, #0
 8017f68:	4630      	mov	r0, r6
 8017f6a:	bd70      	pop	{r4, r5, r6, pc}
 8017f6c:	220c      	movs	r2, #12
 8017f6e:	6002      	str	r2, [r0, #0]
 8017f70:	e7f9      	b.n	8017f66 <_calloc_r+0x12>
 8017f72:	462a      	mov	r2, r5
 8017f74:	4621      	mov	r1, r4
 8017f76:	f7fe fa3e 	bl	80163f6 <memset>
 8017f7a:	e7f5      	b.n	8017f68 <_calloc_r+0x14>

08017f7c <malloc>:
 8017f7c:	4b02      	ldr	r3, [pc, #8]	@ (8017f88 <malloc+0xc>)
 8017f7e:	4601      	mov	r1, r0
 8017f80:	6818      	ldr	r0, [r3, #0]
 8017f82:	f7fe becb 	b.w	8016d1c <_malloc_r>
 8017f86:	bf00      	nop
 8017f88:	200001f4 	.word	0x200001f4

08017f8c <_realloc_r>:
 8017f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f90:	4680      	mov	r8, r0
 8017f92:	4615      	mov	r5, r2
 8017f94:	460c      	mov	r4, r1
 8017f96:	b921      	cbnz	r1, 8017fa2 <_realloc_r+0x16>
 8017f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f9c:	4611      	mov	r1, r2
 8017f9e:	f7fe bebd 	b.w	8016d1c <_malloc_r>
 8017fa2:	b92a      	cbnz	r2, 8017fb0 <_realloc_r+0x24>
 8017fa4:	f7fe fb14 	bl	80165d0 <_free_r>
 8017fa8:	2400      	movs	r4, #0
 8017faa:	4620      	mov	r0, r4
 8017fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fb0:	f000 f833 	bl	801801a <_malloc_usable_size_r>
 8017fb4:	4285      	cmp	r5, r0
 8017fb6:	4606      	mov	r6, r0
 8017fb8:	d802      	bhi.n	8017fc0 <_realloc_r+0x34>
 8017fba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017fbe:	d8f4      	bhi.n	8017faa <_realloc_r+0x1e>
 8017fc0:	4629      	mov	r1, r5
 8017fc2:	4640      	mov	r0, r8
 8017fc4:	f7fe feaa 	bl	8016d1c <_malloc_r>
 8017fc8:	4607      	mov	r7, r0
 8017fca:	2800      	cmp	r0, #0
 8017fcc:	d0ec      	beq.n	8017fa8 <_realloc_r+0x1c>
 8017fce:	42b5      	cmp	r5, r6
 8017fd0:	462a      	mov	r2, r5
 8017fd2:	4621      	mov	r1, r4
 8017fd4:	bf28      	it	cs
 8017fd6:	4632      	movcs	r2, r6
 8017fd8:	f7fe fae1 	bl	801659e <memcpy>
 8017fdc:	4621      	mov	r1, r4
 8017fde:	4640      	mov	r0, r8
 8017fe0:	f7fe faf6 	bl	80165d0 <_free_r>
 8017fe4:	463c      	mov	r4, r7
 8017fe6:	e7e0      	b.n	8017faa <_realloc_r+0x1e>

08017fe8 <fiprintf>:
 8017fe8:	b40e      	push	{r1, r2, r3}
 8017fea:	b503      	push	{r0, r1, lr}
 8017fec:	4601      	mov	r1, r0
 8017fee:	ab03      	add	r3, sp, #12
 8017ff0:	4805      	ldr	r0, [pc, #20]	@ (8018008 <fiprintf+0x20>)
 8017ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8017ff6:	6800      	ldr	r0, [r0, #0]
 8017ff8:	9301      	str	r3, [sp, #4]
 8017ffa:	f000 f83f 	bl	801807c <_vfiprintf_r>
 8017ffe:	b002      	add	sp, #8
 8018000:	f85d eb04 	ldr.w	lr, [sp], #4
 8018004:	b003      	add	sp, #12
 8018006:	4770      	bx	lr
 8018008:	200001f4 	.word	0x200001f4

0801800c <abort>:
 801800c:	b508      	push	{r3, lr}
 801800e:	2006      	movs	r0, #6
 8018010:	f000 fa08 	bl	8018424 <raise>
 8018014:	2001      	movs	r0, #1
 8018016:	f7ee ff13 	bl	8006e40 <_exit>

0801801a <_malloc_usable_size_r>:
 801801a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801801e:	1f18      	subs	r0, r3, #4
 8018020:	2b00      	cmp	r3, #0
 8018022:	bfbc      	itt	lt
 8018024:	580b      	ldrlt	r3, [r1, r0]
 8018026:	18c0      	addlt	r0, r0, r3
 8018028:	4770      	bx	lr

0801802a <__sfputc_r>:
 801802a:	6893      	ldr	r3, [r2, #8]
 801802c:	3b01      	subs	r3, #1
 801802e:	2b00      	cmp	r3, #0
 8018030:	b410      	push	{r4}
 8018032:	6093      	str	r3, [r2, #8]
 8018034:	da08      	bge.n	8018048 <__sfputc_r+0x1e>
 8018036:	6994      	ldr	r4, [r2, #24]
 8018038:	42a3      	cmp	r3, r4
 801803a:	db01      	blt.n	8018040 <__sfputc_r+0x16>
 801803c:	290a      	cmp	r1, #10
 801803e:	d103      	bne.n	8018048 <__sfputc_r+0x1e>
 8018040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018044:	f000 b932 	b.w	80182ac <__swbuf_r>
 8018048:	6813      	ldr	r3, [r2, #0]
 801804a:	1c58      	adds	r0, r3, #1
 801804c:	6010      	str	r0, [r2, #0]
 801804e:	7019      	strb	r1, [r3, #0]
 8018050:	4608      	mov	r0, r1
 8018052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018056:	4770      	bx	lr

08018058 <__sfputs_r>:
 8018058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801805a:	4606      	mov	r6, r0
 801805c:	460f      	mov	r7, r1
 801805e:	4614      	mov	r4, r2
 8018060:	18d5      	adds	r5, r2, r3
 8018062:	42ac      	cmp	r4, r5
 8018064:	d101      	bne.n	801806a <__sfputs_r+0x12>
 8018066:	2000      	movs	r0, #0
 8018068:	e007      	b.n	801807a <__sfputs_r+0x22>
 801806a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801806e:	463a      	mov	r2, r7
 8018070:	4630      	mov	r0, r6
 8018072:	f7ff ffda 	bl	801802a <__sfputc_r>
 8018076:	1c43      	adds	r3, r0, #1
 8018078:	d1f3      	bne.n	8018062 <__sfputs_r+0xa>
 801807a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801807c <_vfiprintf_r>:
 801807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018080:	460d      	mov	r5, r1
 8018082:	b09d      	sub	sp, #116	@ 0x74
 8018084:	4614      	mov	r4, r2
 8018086:	4698      	mov	r8, r3
 8018088:	4606      	mov	r6, r0
 801808a:	b118      	cbz	r0, 8018094 <_vfiprintf_r+0x18>
 801808c:	6a03      	ldr	r3, [r0, #32]
 801808e:	b90b      	cbnz	r3, 8018094 <_vfiprintf_r+0x18>
 8018090:	f7fe f8ea 	bl	8016268 <__sinit>
 8018094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018096:	07d9      	lsls	r1, r3, #31
 8018098:	d405      	bmi.n	80180a6 <_vfiprintf_r+0x2a>
 801809a:	89ab      	ldrh	r3, [r5, #12]
 801809c:	059a      	lsls	r2, r3, #22
 801809e:	d402      	bmi.n	80180a6 <_vfiprintf_r+0x2a>
 80180a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180a2:	f7fe fa7a 	bl	801659a <__retarget_lock_acquire_recursive>
 80180a6:	89ab      	ldrh	r3, [r5, #12]
 80180a8:	071b      	lsls	r3, r3, #28
 80180aa:	d501      	bpl.n	80180b0 <_vfiprintf_r+0x34>
 80180ac:	692b      	ldr	r3, [r5, #16]
 80180ae:	b99b      	cbnz	r3, 80180d8 <_vfiprintf_r+0x5c>
 80180b0:	4629      	mov	r1, r5
 80180b2:	4630      	mov	r0, r6
 80180b4:	f000 f938 	bl	8018328 <__swsetup_r>
 80180b8:	b170      	cbz	r0, 80180d8 <_vfiprintf_r+0x5c>
 80180ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80180bc:	07dc      	lsls	r4, r3, #31
 80180be:	d504      	bpl.n	80180ca <_vfiprintf_r+0x4e>
 80180c0:	f04f 30ff 	mov.w	r0, #4294967295
 80180c4:	b01d      	add	sp, #116	@ 0x74
 80180c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180ca:	89ab      	ldrh	r3, [r5, #12]
 80180cc:	0598      	lsls	r0, r3, #22
 80180ce:	d4f7      	bmi.n	80180c0 <_vfiprintf_r+0x44>
 80180d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180d2:	f7fe fa63 	bl	801659c <__retarget_lock_release_recursive>
 80180d6:	e7f3      	b.n	80180c0 <_vfiprintf_r+0x44>
 80180d8:	2300      	movs	r3, #0
 80180da:	9309      	str	r3, [sp, #36]	@ 0x24
 80180dc:	2320      	movs	r3, #32
 80180de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80180e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80180e6:	2330      	movs	r3, #48	@ 0x30
 80180e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018298 <_vfiprintf_r+0x21c>
 80180ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80180f0:	f04f 0901 	mov.w	r9, #1
 80180f4:	4623      	mov	r3, r4
 80180f6:	469a      	mov	sl, r3
 80180f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180fc:	b10a      	cbz	r2, 8018102 <_vfiprintf_r+0x86>
 80180fe:	2a25      	cmp	r2, #37	@ 0x25
 8018100:	d1f9      	bne.n	80180f6 <_vfiprintf_r+0x7a>
 8018102:	ebba 0b04 	subs.w	fp, sl, r4
 8018106:	d00b      	beq.n	8018120 <_vfiprintf_r+0xa4>
 8018108:	465b      	mov	r3, fp
 801810a:	4622      	mov	r2, r4
 801810c:	4629      	mov	r1, r5
 801810e:	4630      	mov	r0, r6
 8018110:	f7ff ffa2 	bl	8018058 <__sfputs_r>
 8018114:	3001      	adds	r0, #1
 8018116:	f000 80a7 	beq.w	8018268 <_vfiprintf_r+0x1ec>
 801811a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801811c:	445a      	add	r2, fp
 801811e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018120:	f89a 3000 	ldrb.w	r3, [sl]
 8018124:	2b00      	cmp	r3, #0
 8018126:	f000 809f 	beq.w	8018268 <_vfiprintf_r+0x1ec>
 801812a:	2300      	movs	r3, #0
 801812c:	f04f 32ff 	mov.w	r2, #4294967295
 8018130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018134:	f10a 0a01 	add.w	sl, sl, #1
 8018138:	9304      	str	r3, [sp, #16]
 801813a:	9307      	str	r3, [sp, #28]
 801813c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018140:	931a      	str	r3, [sp, #104]	@ 0x68
 8018142:	4654      	mov	r4, sl
 8018144:	2205      	movs	r2, #5
 8018146:	f814 1b01 	ldrb.w	r1, [r4], #1
 801814a:	4853      	ldr	r0, [pc, #332]	@ (8018298 <_vfiprintf_r+0x21c>)
 801814c:	f7e8 f868 	bl	8000220 <memchr>
 8018150:	9a04      	ldr	r2, [sp, #16]
 8018152:	b9d8      	cbnz	r0, 801818c <_vfiprintf_r+0x110>
 8018154:	06d1      	lsls	r1, r2, #27
 8018156:	bf44      	itt	mi
 8018158:	2320      	movmi	r3, #32
 801815a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801815e:	0713      	lsls	r3, r2, #28
 8018160:	bf44      	itt	mi
 8018162:	232b      	movmi	r3, #43	@ 0x2b
 8018164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018168:	f89a 3000 	ldrb.w	r3, [sl]
 801816c:	2b2a      	cmp	r3, #42	@ 0x2a
 801816e:	d015      	beq.n	801819c <_vfiprintf_r+0x120>
 8018170:	9a07      	ldr	r2, [sp, #28]
 8018172:	4654      	mov	r4, sl
 8018174:	2000      	movs	r0, #0
 8018176:	f04f 0c0a 	mov.w	ip, #10
 801817a:	4621      	mov	r1, r4
 801817c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018180:	3b30      	subs	r3, #48	@ 0x30
 8018182:	2b09      	cmp	r3, #9
 8018184:	d94b      	bls.n	801821e <_vfiprintf_r+0x1a2>
 8018186:	b1b0      	cbz	r0, 80181b6 <_vfiprintf_r+0x13a>
 8018188:	9207      	str	r2, [sp, #28]
 801818a:	e014      	b.n	80181b6 <_vfiprintf_r+0x13a>
 801818c:	eba0 0308 	sub.w	r3, r0, r8
 8018190:	fa09 f303 	lsl.w	r3, r9, r3
 8018194:	4313      	orrs	r3, r2
 8018196:	9304      	str	r3, [sp, #16]
 8018198:	46a2      	mov	sl, r4
 801819a:	e7d2      	b.n	8018142 <_vfiprintf_r+0xc6>
 801819c:	9b03      	ldr	r3, [sp, #12]
 801819e:	1d19      	adds	r1, r3, #4
 80181a0:	681b      	ldr	r3, [r3, #0]
 80181a2:	9103      	str	r1, [sp, #12]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	bfbb      	ittet	lt
 80181a8:	425b      	neglt	r3, r3
 80181aa:	f042 0202 	orrlt.w	r2, r2, #2
 80181ae:	9307      	strge	r3, [sp, #28]
 80181b0:	9307      	strlt	r3, [sp, #28]
 80181b2:	bfb8      	it	lt
 80181b4:	9204      	strlt	r2, [sp, #16]
 80181b6:	7823      	ldrb	r3, [r4, #0]
 80181b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80181ba:	d10a      	bne.n	80181d2 <_vfiprintf_r+0x156>
 80181bc:	7863      	ldrb	r3, [r4, #1]
 80181be:	2b2a      	cmp	r3, #42	@ 0x2a
 80181c0:	d132      	bne.n	8018228 <_vfiprintf_r+0x1ac>
 80181c2:	9b03      	ldr	r3, [sp, #12]
 80181c4:	1d1a      	adds	r2, r3, #4
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	9203      	str	r2, [sp, #12]
 80181ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80181ce:	3402      	adds	r4, #2
 80181d0:	9305      	str	r3, [sp, #20]
 80181d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80182a8 <_vfiprintf_r+0x22c>
 80181d6:	7821      	ldrb	r1, [r4, #0]
 80181d8:	2203      	movs	r2, #3
 80181da:	4650      	mov	r0, sl
 80181dc:	f7e8 f820 	bl	8000220 <memchr>
 80181e0:	b138      	cbz	r0, 80181f2 <_vfiprintf_r+0x176>
 80181e2:	9b04      	ldr	r3, [sp, #16]
 80181e4:	eba0 000a 	sub.w	r0, r0, sl
 80181e8:	2240      	movs	r2, #64	@ 0x40
 80181ea:	4082      	lsls	r2, r0
 80181ec:	4313      	orrs	r3, r2
 80181ee:	3401      	adds	r4, #1
 80181f0:	9304      	str	r3, [sp, #16]
 80181f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181f6:	4829      	ldr	r0, [pc, #164]	@ (801829c <_vfiprintf_r+0x220>)
 80181f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80181fc:	2206      	movs	r2, #6
 80181fe:	f7e8 f80f 	bl	8000220 <memchr>
 8018202:	2800      	cmp	r0, #0
 8018204:	d03f      	beq.n	8018286 <_vfiprintf_r+0x20a>
 8018206:	4b26      	ldr	r3, [pc, #152]	@ (80182a0 <_vfiprintf_r+0x224>)
 8018208:	bb1b      	cbnz	r3, 8018252 <_vfiprintf_r+0x1d6>
 801820a:	9b03      	ldr	r3, [sp, #12]
 801820c:	3307      	adds	r3, #7
 801820e:	f023 0307 	bic.w	r3, r3, #7
 8018212:	3308      	adds	r3, #8
 8018214:	9303      	str	r3, [sp, #12]
 8018216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018218:	443b      	add	r3, r7
 801821a:	9309      	str	r3, [sp, #36]	@ 0x24
 801821c:	e76a      	b.n	80180f4 <_vfiprintf_r+0x78>
 801821e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018222:	460c      	mov	r4, r1
 8018224:	2001      	movs	r0, #1
 8018226:	e7a8      	b.n	801817a <_vfiprintf_r+0xfe>
 8018228:	2300      	movs	r3, #0
 801822a:	3401      	adds	r4, #1
 801822c:	9305      	str	r3, [sp, #20]
 801822e:	4619      	mov	r1, r3
 8018230:	f04f 0c0a 	mov.w	ip, #10
 8018234:	4620      	mov	r0, r4
 8018236:	f810 2b01 	ldrb.w	r2, [r0], #1
 801823a:	3a30      	subs	r2, #48	@ 0x30
 801823c:	2a09      	cmp	r2, #9
 801823e:	d903      	bls.n	8018248 <_vfiprintf_r+0x1cc>
 8018240:	2b00      	cmp	r3, #0
 8018242:	d0c6      	beq.n	80181d2 <_vfiprintf_r+0x156>
 8018244:	9105      	str	r1, [sp, #20]
 8018246:	e7c4      	b.n	80181d2 <_vfiprintf_r+0x156>
 8018248:	fb0c 2101 	mla	r1, ip, r1, r2
 801824c:	4604      	mov	r4, r0
 801824e:	2301      	movs	r3, #1
 8018250:	e7f0      	b.n	8018234 <_vfiprintf_r+0x1b8>
 8018252:	ab03      	add	r3, sp, #12
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	462a      	mov	r2, r5
 8018258:	4b12      	ldr	r3, [pc, #72]	@ (80182a4 <_vfiprintf_r+0x228>)
 801825a:	a904      	add	r1, sp, #16
 801825c:	4630      	mov	r0, r6
 801825e:	f3af 8000 	nop.w
 8018262:	4607      	mov	r7, r0
 8018264:	1c78      	adds	r0, r7, #1
 8018266:	d1d6      	bne.n	8018216 <_vfiprintf_r+0x19a>
 8018268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801826a:	07d9      	lsls	r1, r3, #31
 801826c:	d405      	bmi.n	801827a <_vfiprintf_r+0x1fe>
 801826e:	89ab      	ldrh	r3, [r5, #12]
 8018270:	059a      	lsls	r2, r3, #22
 8018272:	d402      	bmi.n	801827a <_vfiprintf_r+0x1fe>
 8018274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018276:	f7fe f991 	bl	801659c <__retarget_lock_release_recursive>
 801827a:	89ab      	ldrh	r3, [r5, #12]
 801827c:	065b      	lsls	r3, r3, #25
 801827e:	f53f af1f 	bmi.w	80180c0 <_vfiprintf_r+0x44>
 8018282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018284:	e71e      	b.n	80180c4 <_vfiprintf_r+0x48>
 8018286:	ab03      	add	r3, sp, #12
 8018288:	9300      	str	r3, [sp, #0]
 801828a:	462a      	mov	r2, r5
 801828c:	4b05      	ldr	r3, [pc, #20]	@ (80182a4 <_vfiprintf_r+0x228>)
 801828e:	a904      	add	r1, sp, #16
 8018290:	4630      	mov	r0, r6
 8018292:	f7ff fc65 	bl	8017b60 <_printf_i>
 8018296:	e7e4      	b.n	8018262 <_vfiprintf_r+0x1e6>
 8018298:	08019398 	.word	0x08019398
 801829c:	080193a2 	.word	0x080193a2
 80182a0:	00000000 	.word	0x00000000
 80182a4:	08018059 	.word	0x08018059
 80182a8:	0801939e 	.word	0x0801939e

080182ac <__swbuf_r>:
 80182ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182ae:	460e      	mov	r6, r1
 80182b0:	4614      	mov	r4, r2
 80182b2:	4605      	mov	r5, r0
 80182b4:	b118      	cbz	r0, 80182be <__swbuf_r+0x12>
 80182b6:	6a03      	ldr	r3, [r0, #32]
 80182b8:	b90b      	cbnz	r3, 80182be <__swbuf_r+0x12>
 80182ba:	f7fd ffd5 	bl	8016268 <__sinit>
 80182be:	69a3      	ldr	r3, [r4, #24]
 80182c0:	60a3      	str	r3, [r4, #8]
 80182c2:	89a3      	ldrh	r3, [r4, #12]
 80182c4:	071a      	lsls	r2, r3, #28
 80182c6:	d501      	bpl.n	80182cc <__swbuf_r+0x20>
 80182c8:	6923      	ldr	r3, [r4, #16]
 80182ca:	b943      	cbnz	r3, 80182de <__swbuf_r+0x32>
 80182cc:	4621      	mov	r1, r4
 80182ce:	4628      	mov	r0, r5
 80182d0:	f000 f82a 	bl	8018328 <__swsetup_r>
 80182d4:	b118      	cbz	r0, 80182de <__swbuf_r+0x32>
 80182d6:	f04f 37ff 	mov.w	r7, #4294967295
 80182da:	4638      	mov	r0, r7
 80182dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	6922      	ldr	r2, [r4, #16]
 80182e2:	1a98      	subs	r0, r3, r2
 80182e4:	6963      	ldr	r3, [r4, #20]
 80182e6:	b2f6      	uxtb	r6, r6
 80182e8:	4283      	cmp	r3, r0
 80182ea:	4637      	mov	r7, r6
 80182ec:	dc05      	bgt.n	80182fa <__swbuf_r+0x4e>
 80182ee:	4621      	mov	r1, r4
 80182f0:	4628      	mov	r0, r5
 80182f2:	f7ff fdd9 	bl	8017ea8 <_fflush_r>
 80182f6:	2800      	cmp	r0, #0
 80182f8:	d1ed      	bne.n	80182d6 <__swbuf_r+0x2a>
 80182fa:	68a3      	ldr	r3, [r4, #8]
 80182fc:	3b01      	subs	r3, #1
 80182fe:	60a3      	str	r3, [r4, #8]
 8018300:	6823      	ldr	r3, [r4, #0]
 8018302:	1c5a      	adds	r2, r3, #1
 8018304:	6022      	str	r2, [r4, #0]
 8018306:	701e      	strb	r6, [r3, #0]
 8018308:	6962      	ldr	r2, [r4, #20]
 801830a:	1c43      	adds	r3, r0, #1
 801830c:	429a      	cmp	r2, r3
 801830e:	d004      	beq.n	801831a <__swbuf_r+0x6e>
 8018310:	89a3      	ldrh	r3, [r4, #12]
 8018312:	07db      	lsls	r3, r3, #31
 8018314:	d5e1      	bpl.n	80182da <__swbuf_r+0x2e>
 8018316:	2e0a      	cmp	r6, #10
 8018318:	d1df      	bne.n	80182da <__swbuf_r+0x2e>
 801831a:	4621      	mov	r1, r4
 801831c:	4628      	mov	r0, r5
 801831e:	f7ff fdc3 	bl	8017ea8 <_fflush_r>
 8018322:	2800      	cmp	r0, #0
 8018324:	d0d9      	beq.n	80182da <__swbuf_r+0x2e>
 8018326:	e7d6      	b.n	80182d6 <__swbuf_r+0x2a>

08018328 <__swsetup_r>:
 8018328:	b538      	push	{r3, r4, r5, lr}
 801832a:	4b29      	ldr	r3, [pc, #164]	@ (80183d0 <__swsetup_r+0xa8>)
 801832c:	4605      	mov	r5, r0
 801832e:	6818      	ldr	r0, [r3, #0]
 8018330:	460c      	mov	r4, r1
 8018332:	b118      	cbz	r0, 801833c <__swsetup_r+0x14>
 8018334:	6a03      	ldr	r3, [r0, #32]
 8018336:	b90b      	cbnz	r3, 801833c <__swsetup_r+0x14>
 8018338:	f7fd ff96 	bl	8016268 <__sinit>
 801833c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018340:	0719      	lsls	r1, r3, #28
 8018342:	d422      	bmi.n	801838a <__swsetup_r+0x62>
 8018344:	06da      	lsls	r2, r3, #27
 8018346:	d407      	bmi.n	8018358 <__swsetup_r+0x30>
 8018348:	2209      	movs	r2, #9
 801834a:	602a      	str	r2, [r5, #0]
 801834c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018350:	81a3      	strh	r3, [r4, #12]
 8018352:	f04f 30ff 	mov.w	r0, #4294967295
 8018356:	e033      	b.n	80183c0 <__swsetup_r+0x98>
 8018358:	0758      	lsls	r0, r3, #29
 801835a:	d512      	bpl.n	8018382 <__swsetup_r+0x5a>
 801835c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801835e:	b141      	cbz	r1, 8018372 <__swsetup_r+0x4a>
 8018360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018364:	4299      	cmp	r1, r3
 8018366:	d002      	beq.n	801836e <__swsetup_r+0x46>
 8018368:	4628      	mov	r0, r5
 801836a:	f7fe f931 	bl	80165d0 <_free_r>
 801836e:	2300      	movs	r3, #0
 8018370:	6363      	str	r3, [r4, #52]	@ 0x34
 8018372:	89a3      	ldrh	r3, [r4, #12]
 8018374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018378:	81a3      	strh	r3, [r4, #12]
 801837a:	2300      	movs	r3, #0
 801837c:	6063      	str	r3, [r4, #4]
 801837e:	6923      	ldr	r3, [r4, #16]
 8018380:	6023      	str	r3, [r4, #0]
 8018382:	89a3      	ldrh	r3, [r4, #12]
 8018384:	f043 0308 	orr.w	r3, r3, #8
 8018388:	81a3      	strh	r3, [r4, #12]
 801838a:	6923      	ldr	r3, [r4, #16]
 801838c:	b94b      	cbnz	r3, 80183a2 <__swsetup_r+0x7a>
 801838e:	89a3      	ldrh	r3, [r4, #12]
 8018390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018398:	d003      	beq.n	80183a2 <__swsetup_r+0x7a>
 801839a:	4621      	mov	r1, r4
 801839c:	4628      	mov	r0, r5
 801839e:	f000 f883 	bl	80184a8 <__smakebuf_r>
 80183a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183a6:	f013 0201 	ands.w	r2, r3, #1
 80183aa:	d00a      	beq.n	80183c2 <__swsetup_r+0x9a>
 80183ac:	2200      	movs	r2, #0
 80183ae:	60a2      	str	r2, [r4, #8]
 80183b0:	6962      	ldr	r2, [r4, #20]
 80183b2:	4252      	negs	r2, r2
 80183b4:	61a2      	str	r2, [r4, #24]
 80183b6:	6922      	ldr	r2, [r4, #16]
 80183b8:	b942      	cbnz	r2, 80183cc <__swsetup_r+0xa4>
 80183ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80183be:	d1c5      	bne.n	801834c <__swsetup_r+0x24>
 80183c0:	bd38      	pop	{r3, r4, r5, pc}
 80183c2:	0799      	lsls	r1, r3, #30
 80183c4:	bf58      	it	pl
 80183c6:	6962      	ldrpl	r2, [r4, #20]
 80183c8:	60a2      	str	r2, [r4, #8]
 80183ca:	e7f4      	b.n	80183b6 <__swsetup_r+0x8e>
 80183cc:	2000      	movs	r0, #0
 80183ce:	e7f7      	b.n	80183c0 <__swsetup_r+0x98>
 80183d0:	200001f4 	.word	0x200001f4

080183d4 <_raise_r>:
 80183d4:	291f      	cmp	r1, #31
 80183d6:	b538      	push	{r3, r4, r5, lr}
 80183d8:	4605      	mov	r5, r0
 80183da:	460c      	mov	r4, r1
 80183dc:	d904      	bls.n	80183e8 <_raise_r+0x14>
 80183de:	2316      	movs	r3, #22
 80183e0:	6003      	str	r3, [r0, #0]
 80183e2:	f04f 30ff 	mov.w	r0, #4294967295
 80183e6:	bd38      	pop	{r3, r4, r5, pc}
 80183e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80183ea:	b112      	cbz	r2, 80183f2 <_raise_r+0x1e>
 80183ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80183f0:	b94b      	cbnz	r3, 8018406 <_raise_r+0x32>
 80183f2:	4628      	mov	r0, r5
 80183f4:	f000 f830 	bl	8018458 <_getpid_r>
 80183f8:	4622      	mov	r2, r4
 80183fa:	4601      	mov	r1, r0
 80183fc:	4628      	mov	r0, r5
 80183fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018402:	f000 b817 	b.w	8018434 <_kill_r>
 8018406:	2b01      	cmp	r3, #1
 8018408:	d00a      	beq.n	8018420 <_raise_r+0x4c>
 801840a:	1c59      	adds	r1, r3, #1
 801840c:	d103      	bne.n	8018416 <_raise_r+0x42>
 801840e:	2316      	movs	r3, #22
 8018410:	6003      	str	r3, [r0, #0]
 8018412:	2001      	movs	r0, #1
 8018414:	e7e7      	b.n	80183e6 <_raise_r+0x12>
 8018416:	2100      	movs	r1, #0
 8018418:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801841c:	4620      	mov	r0, r4
 801841e:	4798      	blx	r3
 8018420:	2000      	movs	r0, #0
 8018422:	e7e0      	b.n	80183e6 <_raise_r+0x12>

08018424 <raise>:
 8018424:	4b02      	ldr	r3, [pc, #8]	@ (8018430 <raise+0xc>)
 8018426:	4601      	mov	r1, r0
 8018428:	6818      	ldr	r0, [r3, #0]
 801842a:	f7ff bfd3 	b.w	80183d4 <_raise_r>
 801842e:	bf00      	nop
 8018430:	200001f4 	.word	0x200001f4

08018434 <_kill_r>:
 8018434:	b538      	push	{r3, r4, r5, lr}
 8018436:	4d07      	ldr	r5, [pc, #28]	@ (8018454 <_kill_r+0x20>)
 8018438:	2300      	movs	r3, #0
 801843a:	4604      	mov	r4, r0
 801843c:	4608      	mov	r0, r1
 801843e:	4611      	mov	r1, r2
 8018440:	602b      	str	r3, [r5, #0]
 8018442:	f7ee fced 	bl	8006e20 <_kill>
 8018446:	1c43      	adds	r3, r0, #1
 8018448:	d102      	bne.n	8018450 <_kill_r+0x1c>
 801844a:	682b      	ldr	r3, [r5, #0]
 801844c:	b103      	cbz	r3, 8018450 <_kill_r+0x1c>
 801844e:	6023      	str	r3, [r4, #0]
 8018450:	bd38      	pop	{r3, r4, r5, pc}
 8018452:	bf00      	nop
 8018454:	20014de8 	.word	0x20014de8

08018458 <_getpid_r>:
 8018458:	f7ee bcda 	b.w	8006e10 <_getpid>

0801845c <__swhatbuf_r>:
 801845c:	b570      	push	{r4, r5, r6, lr}
 801845e:	460c      	mov	r4, r1
 8018460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018464:	2900      	cmp	r1, #0
 8018466:	b096      	sub	sp, #88	@ 0x58
 8018468:	4615      	mov	r5, r2
 801846a:	461e      	mov	r6, r3
 801846c:	da0d      	bge.n	801848a <__swhatbuf_r+0x2e>
 801846e:	89a3      	ldrh	r3, [r4, #12]
 8018470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018474:	f04f 0100 	mov.w	r1, #0
 8018478:	bf14      	ite	ne
 801847a:	2340      	movne	r3, #64	@ 0x40
 801847c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018480:	2000      	movs	r0, #0
 8018482:	6031      	str	r1, [r6, #0]
 8018484:	602b      	str	r3, [r5, #0]
 8018486:	b016      	add	sp, #88	@ 0x58
 8018488:	bd70      	pop	{r4, r5, r6, pc}
 801848a:	466a      	mov	r2, sp
 801848c:	f000 f848 	bl	8018520 <_fstat_r>
 8018490:	2800      	cmp	r0, #0
 8018492:	dbec      	blt.n	801846e <__swhatbuf_r+0x12>
 8018494:	9901      	ldr	r1, [sp, #4]
 8018496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801849a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801849e:	4259      	negs	r1, r3
 80184a0:	4159      	adcs	r1, r3
 80184a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80184a6:	e7eb      	b.n	8018480 <__swhatbuf_r+0x24>

080184a8 <__smakebuf_r>:
 80184a8:	898b      	ldrh	r3, [r1, #12]
 80184aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80184ac:	079d      	lsls	r5, r3, #30
 80184ae:	4606      	mov	r6, r0
 80184b0:	460c      	mov	r4, r1
 80184b2:	d507      	bpl.n	80184c4 <__smakebuf_r+0x1c>
 80184b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80184b8:	6023      	str	r3, [r4, #0]
 80184ba:	6123      	str	r3, [r4, #16]
 80184bc:	2301      	movs	r3, #1
 80184be:	6163      	str	r3, [r4, #20]
 80184c0:	b003      	add	sp, #12
 80184c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184c4:	ab01      	add	r3, sp, #4
 80184c6:	466a      	mov	r2, sp
 80184c8:	f7ff ffc8 	bl	801845c <__swhatbuf_r>
 80184cc:	9f00      	ldr	r7, [sp, #0]
 80184ce:	4605      	mov	r5, r0
 80184d0:	4639      	mov	r1, r7
 80184d2:	4630      	mov	r0, r6
 80184d4:	f7fe fc22 	bl	8016d1c <_malloc_r>
 80184d8:	b948      	cbnz	r0, 80184ee <__smakebuf_r+0x46>
 80184da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80184de:	059a      	lsls	r2, r3, #22
 80184e0:	d4ee      	bmi.n	80184c0 <__smakebuf_r+0x18>
 80184e2:	f023 0303 	bic.w	r3, r3, #3
 80184e6:	f043 0302 	orr.w	r3, r3, #2
 80184ea:	81a3      	strh	r3, [r4, #12]
 80184ec:	e7e2      	b.n	80184b4 <__smakebuf_r+0xc>
 80184ee:	89a3      	ldrh	r3, [r4, #12]
 80184f0:	6020      	str	r0, [r4, #0]
 80184f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80184f6:	81a3      	strh	r3, [r4, #12]
 80184f8:	9b01      	ldr	r3, [sp, #4]
 80184fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80184fe:	b15b      	cbz	r3, 8018518 <__smakebuf_r+0x70>
 8018500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018504:	4630      	mov	r0, r6
 8018506:	f000 f81d 	bl	8018544 <_isatty_r>
 801850a:	b128      	cbz	r0, 8018518 <__smakebuf_r+0x70>
 801850c:	89a3      	ldrh	r3, [r4, #12]
 801850e:	f023 0303 	bic.w	r3, r3, #3
 8018512:	f043 0301 	orr.w	r3, r3, #1
 8018516:	81a3      	strh	r3, [r4, #12]
 8018518:	89a3      	ldrh	r3, [r4, #12]
 801851a:	431d      	orrs	r5, r3
 801851c:	81a5      	strh	r5, [r4, #12]
 801851e:	e7cf      	b.n	80184c0 <__smakebuf_r+0x18>

08018520 <_fstat_r>:
 8018520:	b538      	push	{r3, r4, r5, lr}
 8018522:	4d07      	ldr	r5, [pc, #28]	@ (8018540 <_fstat_r+0x20>)
 8018524:	2300      	movs	r3, #0
 8018526:	4604      	mov	r4, r0
 8018528:	4608      	mov	r0, r1
 801852a:	4611      	mov	r1, r2
 801852c:	602b      	str	r3, [r5, #0]
 801852e:	f7ee fcd7 	bl	8006ee0 <_fstat>
 8018532:	1c43      	adds	r3, r0, #1
 8018534:	d102      	bne.n	801853c <_fstat_r+0x1c>
 8018536:	682b      	ldr	r3, [r5, #0]
 8018538:	b103      	cbz	r3, 801853c <_fstat_r+0x1c>
 801853a:	6023      	str	r3, [r4, #0]
 801853c:	bd38      	pop	{r3, r4, r5, pc}
 801853e:	bf00      	nop
 8018540:	20014de8 	.word	0x20014de8

08018544 <_isatty_r>:
 8018544:	b538      	push	{r3, r4, r5, lr}
 8018546:	4d06      	ldr	r5, [pc, #24]	@ (8018560 <_isatty_r+0x1c>)
 8018548:	2300      	movs	r3, #0
 801854a:	4604      	mov	r4, r0
 801854c:	4608      	mov	r0, r1
 801854e:	602b      	str	r3, [r5, #0]
 8018550:	f7ee fcd6 	bl	8006f00 <_isatty>
 8018554:	1c43      	adds	r3, r0, #1
 8018556:	d102      	bne.n	801855e <_isatty_r+0x1a>
 8018558:	682b      	ldr	r3, [r5, #0]
 801855a:	b103      	cbz	r3, 801855e <_isatty_r+0x1a>
 801855c:	6023      	str	r3, [r4, #0]
 801855e:	bd38      	pop	{r3, r4, r5, pc}
 8018560:	20014de8 	.word	0x20014de8

08018564 <fmaxf>:
 8018564:	b508      	push	{r3, lr}
 8018566:	ed2d 8b02 	vpush	{d8}
 801856a:	eeb0 8a40 	vmov.f32	s16, s0
 801856e:	eef0 8a60 	vmov.f32	s17, s1
 8018572:	f000 f831 	bl	80185d8 <__fpclassifyf>
 8018576:	b930      	cbnz	r0, 8018586 <fmaxf+0x22>
 8018578:	eeb0 8a68 	vmov.f32	s16, s17
 801857c:	eeb0 0a48 	vmov.f32	s0, s16
 8018580:	ecbd 8b02 	vpop	{d8}
 8018584:	bd08      	pop	{r3, pc}
 8018586:	eeb0 0a68 	vmov.f32	s0, s17
 801858a:	f000 f825 	bl	80185d8 <__fpclassifyf>
 801858e:	2800      	cmp	r0, #0
 8018590:	d0f4      	beq.n	801857c <fmaxf+0x18>
 8018592:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801859a:	dded      	ble.n	8018578 <fmaxf+0x14>
 801859c:	e7ee      	b.n	801857c <fmaxf+0x18>

0801859e <fminf>:
 801859e:	b508      	push	{r3, lr}
 80185a0:	ed2d 8b02 	vpush	{d8}
 80185a4:	eeb0 8a40 	vmov.f32	s16, s0
 80185a8:	eef0 8a60 	vmov.f32	s17, s1
 80185ac:	f000 f814 	bl	80185d8 <__fpclassifyf>
 80185b0:	b930      	cbnz	r0, 80185c0 <fminf+0x22>
 80185b2:	eeb0 8a68 	vmov.f32	s16, s17
 80185b6:	eeb0 0a48 	vmov.f32	s0, s16
 80185ba:	ecbd 8b02 	vpop	{d8}
 80185be:	bd08      	pop	{r3, pc}
 80185c0:	eeb0 0a68 	vmov.f32	s0, s17
 80185c4:	f000 f808 	bl	80185d8 <__fpclassifyf>
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d0f4      	beq.n	80185b6 <fminf+0x18>
 80185cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80185d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d4:	d5ed      	bpl.n	80185b2 <fminf+0x14>
 80185d6:	e7ee      	b.n	80185b6 <fminf+0x18>

080185d8 <__fpclassifyf>:
 80185d8:	ee10 3a10 	vmov	r3, s0
 80185dc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80185e0:	d00d      	beq.n	80185fe <__fpclassifyf+0x26>
 80185e2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80185e6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80185ea:	d30a      	bcc.n	8018602 <__fpclassifyf+0x2a>
 80185ec:	4b07      	ldr	r3, [pc, #28]	@ (801860c <__fpclassifyf+0x34>)
 80185ee:	1e42      	subs	r2, r0, #1
 80185f0:	429a      	cmp	r2, r3
 80185f2:	d908      	bls.n	8018606 <__fpclassifyf+0x2e>
 80185f4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80185f8:	4258      	negs	r0, r3
 80185fa:	4158      	adcs	r0, r3
 80185fc:	4770      	bx	lr
 80185fe:	2002      	movs	r0, #2
 8018600:	4770      	bx	lr
 8018602:	2004      	movs	r0, #4
 8018604:	4770      	bx	lr
 8018606:	2003      	movs	r0, #3
 8018608:	4770      	bx	lr
 801860a:	bf00      	nop
 801860c:	007ffffe 	.word	0x007ffffe

08018610 <roundf>:
 8018610:	ee10 0a10 	vmov	r0, s0
 8018614:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8018618:	3a7f      	subs	r2, #127	@ 0x7f
 801861a:	2a16      	cmp	r2, #22
 801861c:	dc15      	bgt.n	801864a <roundf+0x3a>
 801861e:	2a00      	cmp	r2, #0
 8018620:	da08      	bge.n	8018634 <roundf+0x24>
 8018622:	3201      	adds	r2, #1
 8018624:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8018628:	d101      	bne.n	801862e <roundf+0x1e>
 801862a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801862e:	ee00 3a10 	vmov	s0, r3
 8018632:	4770      	bx	lr
 8018634:	4907      	ldr	r1, [pc, #28]	@ (8018654 <roundf+0x44>)
 8018636:	4111      	asrs	r1, r2
 8018638:	4201      	tst	r1, r0
 801863a:	d0fa      	beq.n	8018632 <roundf+0x22>
 801863c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8018640:	4113      	asrs	r3, r2
 8018642:	4403      	add	r3, r0
 8018644:	ea23 0301 	bic.w	r3, r3, r1
 8018648:	e7f1      	b.n	801862e <roundf+0x1e>
 801864a:	2a80      	cmp	r2, #128	@ 0x80
 801864c:	d1f1      	bne.n	8018632 <roundf+0x22>
 801864e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018652:	4770      	bx	lr
 8018654:	007fffff 	.word	0x007fffff

08018658 <_init>:
 8018658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801865a:	bf00      	nop
 801865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801865e:	bc08      	pop	{r3}
 8018660:	469e      	mov	lr, r3
 8018662:	4770      	bx	lr

08018664 <_fini>:
 8018664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018666:	bf00      	nop
 8018668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801866a:	bc08      	pop	{r3}
 801866c:	469e      	mov	lr, r3
 801866e:	4770      	bx	lr
