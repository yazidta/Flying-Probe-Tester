
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08009578  08009578  0000a578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b30  08009b30  0000b1cc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b30  08009b30  0000ab30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b38  08009b38  0000b1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b38  08009b38  0000ab38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b3c  08009b3c  0000ab3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08009b40  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08009bcc  0000b08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  08009c6c  0000b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000a8c  200001cc  08009d0c  0000b1cc  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c58  08009d0c  0000bc58  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b1cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   000204aa  00000000  00000000  0000b1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ef2  00000000  00000000  0002b6a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000018f8  00000000  00000000  0002f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000135e  00000000  00000000  00030e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029def  00000000  00000000  000321ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022664  00000000  00000000  0005bfdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb439  00000000  00000000  0007e641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00179a7a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006f8c  00000000  00000000  00179ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005f  00000000  00000000  00180a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009560 	.word	0x08009560

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08009560 	.word	0x08009560

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f005 fb71 	bl	8005cac <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f005 fbd7 	bl	8005d8c <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f003 fca1 	bl	8003fc0 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200001e8 	.word	0x200001e8

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
 80007ac:	4613      	mov	r3, r2
 80007ae:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	4a07      	ldr	r2, [pc, #28]	@ (80007d0 <LCD_I2C_SetCursor+0x30>)
 80007b4:	5cd2      	ldrb	r2, [r2, r3]
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	4413      	add	r3, r2
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	3b80      	subs	r3, #128	@ 0x80
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4619      	mov	r1, r3
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f7ff ff68 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08009ad8 	.word	0x08009ad8

080007d4 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 80007dc:	2101      	movs	r1, #1
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff ff5a 	bl	8000698 <__lcd_i2c_write_command>
}
 80007e4:	bf00      	nop
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	460b      	mov	r3, r1
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80007fa:	7afb      	ldrb	r3, [r7, #11]
 80007fc:	00db      	lsls	r3, r3, #3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	3340      	adds	r3, #64	@ 0x40
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff ff46 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800080c:	2300      	movs	r3, #0
 800080e:	75fb      	strb	r3, [r7, #23]
 8000810:	e00a      	b.n	8000828 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	4413      	add	r3, r2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	4619      	mov	r1, r3
 800081c:	68f8      	ldr	r0, [r7, #12]
 800081e:	f7ff ff4b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000822:	7dfb      	ldrb	r3, [r7, #23]
 8000824:	3301      	adds	r3, #1
 8000826:	75fb      	strb	r3, [r7, #23]
 8000828:	7dfb      	ldrb	r3, [r7, #23]
 800082a:	2b07      	cmp	r3, #7
 800082c:	d9f1      	bls.n	8000812 <LCD_I2C_DefineChar+0x26>
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	460b      	mov	r3, r1
 8000842:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000844:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000846:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000848:	69b8      	ldr	r0, [r7, #24]
 800084a:	f7ff fce1 	bl	8000210 <strlen>
 800084e:	4603      	mov	r3, r0
 8000850:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000852:	4a21      	ldr	r2, [pc, #132]	@ (80008d8 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	e892 0003 	ldmia.w	r2, {r0, r1}
 800085c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	461a      	mov	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f7ff ffbf 	bl	80007ec <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	77fb      	strb	r3, [r7, #31]
 8000872:	e025      	b.n	80008c0 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8000874:	7ffb      	ldrb	r3, [r7, #31]
 8000876:	3303      	adds	r3, #3
 8000878:	b2da      	uxtb	r2, r3
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	4619      	mov	r1, r3
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f7ff ff8e 	bl	80007a0 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ff7b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe8b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800089a:	7ffb      	ldrb	r3, [r7, #31]
 800089c:	3303      	adds	r3, #3
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	4619      	mov	r1, r3
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff ff7b 	bl	80007a0 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008aa:	7ffb      	ldrb	r3, [r7, #31]
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff feff 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008ba:	7ffb      	ldrb	r3, [r7, #31]
 80008bc:	3301      	adds	r3, #1
 80008be:	77fb      	strb	r3, [r7, #31]
 80008c0:	7ffa      	ldrb	r2, [r7, #31]
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d3d5      	bcc.n	8000874 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08009584 	.word	0x08009584
 80008d8:	08009590 	.word	0x08009590

080008dc <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t stepsTaken;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	e02a      	b.n	8000940 <HAL_TIM_PWM_PulseFinishedCallback+0x64>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	4919      	ldr	r1, [pc, #100]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2058      	movs	r0, #88	@ 0x58
 80008f4:	fb00 f303 	mul.w	r3, r0, r3
 80008f8:	440b      	add	r3, r1
 80008fa:	330c      	adds	r3, #12
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d11a      	bne.n	800093a <HAL_TIM_PWM_PulseFinishedCallback+0x5e>
		  motors[i].stepsTaken++;
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2158      	movs	r1, #88	@ 0x58
 800090a:	fb01 f303 	mul.w	r3, r1, r3
 800090e:	4413      	add	r3, r2
 8000910:	3344      	adds	r3, #68	@ 0x44
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	1c5a      	adds	r2, r3, #1
 8000916:	490f      	ldr	r1, [pc, #60]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2058      	movs	r0, #88	@ 0x58
 800091c:	fb00 f303 	mul.w	r3, r0, r3
 8000920:	440b      	add	r3, r1
 8000922:	3344      	adds	r3, #68	@ 0x44
 8000924:	601a      	str	r2, [r3, #0]
		  stepsTaken = motors[i].stepsTaken;  // increment counter
 8000926:	4a0b      	ldr	r2, [pc, #44]	@ (8000954 <HAL_TIM_PWM_PulseFinishedCallback+0x78>)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2158      	movs	r1, #88	@ 0x58
 800092c:	fb01 f303 	mul.w	r3, r1, r3
 8000930:	4413      	add	r3, r2
 8000932:	3344      	adds	r3, #68	@ 0x44
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8000938:	6013      	str	r3, [r2, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	ddd1      	ble.n	80008ea <HAL_TIM_PWM_PulseFinishedCallback+0xe>
	  }
  }

}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	2000020c 	.word	0x2000020c
 8000958:	20000208 	.word	0x20000208

0800095c <HAL_UART_RxCpltCallback>:

// UART callback for read from TMC2209
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <HAL_UART_RxCpltCallback+0x44>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d112      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x38>
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]
 8000972:	e009      	b.n	8000988 <HAL_UART_RxCpltCallback+0x2c>
            rxBuffer[i] = rxData[i + 1];
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	490a      	ldr	r1, [pc, #40]	@ (80009a4 <HAL_UART_RxCpltCallback+0x48>)
 800097c:	5c89      	ldrb	r1, [r1, r2]
 800097e:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_UART_RxCpltCallback+0x4c>)
 8000980:	54d1      	strb	r1, [r2, r3]
        for (uint8_t i = 0; i < TMC_REPLY_SIZE + 1 ; i++) {
 8000982:	7bfb      	ldrb	r3, [r7, #15]
 8000984:	3301      	adds	r3, #1
 8000986:	73fb      	strb	r3, [r7, #15]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	2b08      	cmp	r3, #8
 800098c:	d9f2      	bls.n	8000974 <HAL_UART_RxCpltCallback+0x18>
        }
        rxBufferReady = 1;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <HAL_UART_RxCpltCallback+0x50>)
 8000990:	2201      	movs	r2, #1
 8000992:	701a      	strb	r2, [r3, #0]
    }
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	40004400 	.word	0x40004400
 80009a4:	200001f0 	.word	0x200001f0
 80009a8:	200001fc 	.word	0x200001fc
 80009ac:	20000204 	.word	0x20000204

080009b0 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	69d8      	ldr	r0, [r3, #28]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8c1b      	ldrh	r3, [r3, #32]
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	4619      	mov	r1, r3
 80009c8:	f003 fa2c 	bl	8003e24 <HAL_GPIO_WritePin>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80009e8:	78fa      	ldrb	r2, [r7, #3]
 80009ea:	4619      	mov	r1, r3
 80009ec:	f003 fa1a 	bl	8003e24 <HAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 8000a0a:	f004 fcd3 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	3b01      	subs	r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	691b      	ldr	r3, [r3, #16]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d106      	bne.n	8000a4c <TMC2209_SetSpeed+0x54>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68db      	ldr	r3, [r3, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	0852      	lsrs	r2, r2, #1
 8000a48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a4a:	e031      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	691b      	ldr	r3, [r3, #16]
 8000a50:	2b04      	cmp	r3, #4
 8000a52:	d106      	bne.n	8000a62 <TMC2209_SetSpeed+0x6a>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a60:	e026      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d106      	bne.n	8000a78 <TMC2209_SetSpeed+0x80>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	085b      	lsrs	r3, r3, #1
 8000a74:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000a76:	e01b      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	2b0c      	cmp	r3, #12
 8000a7e:	d106      	bne.n	8000a8e <TMC2209_SetSpeed+0x96>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	085b      	lsrs	r3, r3, #1
 8000a8a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a8c:	e010      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	691b      	ldr	r3, [r3, #16]
 8000a92:	2b10      	cmp	r3, #16
 8000a94:	d106      	bne.n	8000aa4 <TMC2209_SetSpeed+0xac>
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000aa2:	e005      	b.n	8000ab0 <TMC2209_SetSpeed+0xb8>
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000ab0:	bf00      	nop
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	691b      	ldr	r3, [r3, #16]
 8000aca:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8000acc:	2101      	movs	r1, #1
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ff80 	bl	80009d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f005 fb1e 	bl	8006118 <HAL_TIM_PWM_Stop_IT>
}
 8000adc:	bf00      	nop
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	691b      	ldr	r3, [r3, #16]
 8000af6:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8000af8:	2100      	movs	r1, #0
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f7ff ff6a 	bl	80009d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8000b00:	68b9      	ldr	r1, [r7, #8]
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	f005 f9c0 	bl	8005e88 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <TMC2209_CountSteps>:




static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	649a      	str	r2, [r3, #72]	@ 0x48
	motor->stepsTaken = 0;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	645a      	str	r2, [r3, #68]	@ 0x44
	while (motor->stepsTaken < motor->nextTotalSteps); // Wait until we reach required steps
 8000b2e:	bf00      	nop
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3f9      	bcc.n	8000b30 <TMC2209_CountSteps+0x18>
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY
	motor->nextTotalSteps = 0;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <TMC2209_Step>:

void TMC2209_Step(Motor *motor, uint32_t steps){ // This doesn't work anymore since we have MoveTo
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]
	TMC2209_Start(motor);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ffc3 	bl	8000ae4 <TMC2209_Start>
	TMC2209_CountSteps(motor, steps);
 8000b5e:	6839      	ldr	r1, [r7, #0]
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ffd9 	bl	8000b18 <TMC2209_CountSteps>
	TMC2209_Stop(motor);
 8000b66:	6878      	ldr	r0, [r7, #4]
 8000b68:	f7ff ffa6 	bl	8000ab8 <TMC2209_Stop>

}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <debug_print>:
    }
}



 void debug_print(const char* msg) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 200);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff fb47 	bl	8000210 <strlen>
 8000b82:	4603      	mov	r3, r0
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	23c8      	movs	r3, #200	@ 0xc8
 8000b88:	6879      	ldr	r1, [r7, #4]
 8000b8a:	4803      	ldr	r0, [pc, #12]	@ (8000b98 <debug_print+0x24>)
 8000b8c:	f006 fb34 	bl	80071f8 <HAL_UART_Transmit>
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000534 	.word	0x20000534

08000b9c <debug_print_hex>:

 void debug_print_hex(uint8_t* data, uint8_t length) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b09e      	sub	sp, #120	@ 0x78
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
    char buffer[100];
    char* ptr = buffer;
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	677b      	str	r3, [r7, #116]	@ 0x74

    ptr += sprintf(ptr, "[");
 8000bae:	491c      	ldr	r1, [pc, #112]	@ (8000c20 <debug_print_hex+0x84>)
 8000bb0:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000bb2:	f008 f835 	bl	8008c20 <siprintf>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	461a      	mov	r2, r3
 8000bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bbc:	4413      	add	r3, r2
 8000bbe:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000bc6:	e013      	b.n	8000bf0 <debug_print_hex+0x54>
        ptr += sprintf(ptr, "%02X ", data[i]);
 8000bc8:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	4413      	add	r3, r2
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4913      	ldr	r1, [pc, #76]	@ (8000c24 <debug_print_hex+0x88>)
 8000bd6:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000bd8:	f008 f822 	bl	8008c20 <siprintf>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	461a      	mov	r2, r3
 8000be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000be2:	4413      	add	r3, r2
 8000be4:	677b      	str	r3, [r7, #116]	@ 0x74
    for(uint8_t i = 0; i < length; i++) {
 8000be6:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000bea:	3301      	adds	r3, #1
 8000bec:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8000bf0:	f897 2073 	ldrb.w	r2, [r7, #115]	@ 0x73
 8000bf4:	78fb      	ldrb	r3, [r7, #3]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d3e6      	bcc.n	8000bc8 <debug_print_hex+0x2c>
    }
    ptr += sprintf(ptr, "]\r\n");
 8000bfa:	490b      	ldr	r1, [pc, #44]	@ (8000c28 <debug_print_hex+0x8c>)
 8000bfc:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000bfe:	f008 f80f 	bl	8008c20 <siprintf>
 8000c02:	4603      	mov	r3, r0
 8000c04:	461a      	mov	r2, r3
 8000c06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c08:	4413      	add	r3, r2
 8000c0a:	677b      	str	r3, [r7, #116]	@ 0x74

    debug_print(buffer);
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff ffaf 	bl	8000b74 <debug_print>
}
 8000c16:	bf00      	nop
 8000c18:	3778      	adds	r7, #120	@ 0x78
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	08009658 	.word	0x08009658
 8000c24:	0800965c 	.word	0x0800965c
 8000c28:	08009664 	.word	0x08009664

08000c2c <calculate_CRC>:

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	e027      	b.n	8000c92 <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	687a      	ldr	r2, [r7, #4]
 8000c46:	4413      	add	r3, r2
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	733b      	strb	r3, [r7, #12]
 8000c50:	e019      	b.n	8000c86 <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	09db      	lsrs	r3, r3, #7
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	7b7b      	ldrb	r3, [r7, #13]
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d007      	beq.n	8000c74 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8000c64:	7bfb      	ldrb	r3, [r7, #15]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	f083 0307 	eor.w	r3, r3, #7
 8000c6e:	b25b      	sxtb	r3, r3
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e002      	b.n	8000c7a <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 8000c7a:	7b7b      	ldrb	r3, [r7, #13]
 8000c7c:	085b      	lsrs	r3, r3, #1
 8000c7e:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8000c80:	7b3b      	ldrb	r3, [r7, #12]
 8000c82:	3301      	adds	r3, #1
 8000c84:	733b      	strb	r3, [r7, #12]
 8000c86:	7b3b      	ldrb	r3, [r7, #12]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d9e2      	bls.n	8000c52 <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73bb      	strb	r3, [r7, #14]
 8000c92:	7bba      	ldrb	r2, [r7, #14]
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3d3      	bcc.n	8000c42 <calculate_CRC+0x16>
        }
    }
    return crc;
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <TMC2209_WaitForReply>:
}




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8000cb0:	f001 fe72 	bl	8002998 <HAL_GetTick>
 8000cb4:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 8000cb6:	e00c      	b.n	8000cd2 <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 8000cb8:	f001 fe6e 	bl	8002998 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d204      	bcs.n	8000cd2 <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 8000cc8:	4808      	ldr	r0, [pc, #32]	@ (8000cec <TMC2209_WaitForReply+0x44>)
 8000cca:	f7ff ff53 	bl	8000b74 <debug_print>
             return 0; // Timeout
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e008      	b.n	8000ce4 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <TMC2209_WaitForReply+0x48>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0ed      	beq.n	8000cb8 <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8000cdc:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <TMC2209_WaitForReply+0x48>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8000ce2:	2301      	movs	r3, #1
 }
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	08009684 	.word	0x08009684
 8000cf0:	20000204 	.word	0x20000204

08000cf4 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
	uint8_t flag = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	75fb      	strb	r3, [r7, #23]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(&huart2, command, writeLength, 10) != HAL_OK) {
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	b29a      	uxth	r2, r3
 8000d08:	230a      	movs	r3, #10
 8000d0a:	68f9      	ldr	r1, [r7, #12]
 8000d0c:	481c      	ldr	r0, [pc, #112]	@ (8000d80 <TMC2209_sendCommand+0x8c>)
 8000d0e:	f006 fa73 	bl	80071f8 <HAL_UART_Transmit>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d004      	beq.n	8000d22 <TMC2209_sendCommand+0x2e>
         debug_print("Failed to send command.\r\n");
 8000d18:	481a      	ldr	r0, [pc, #104]	@ (8000d84 <TMC2209_sendCommand+0x90>)
 8000d1a:	f7ff ff2b 	bl	8000b74 <debug_print>
         return 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e029      	b.n	8000d76 <TMC2209_sendCommand+0x82>
     }


     if(readLength){
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d025      	beq.n	8000d74 <TMC2209_sendCommand+0x80>

     // Wait for reply
     HAL_UART_Receive_DMA(&huart2, rxData, readLength + 1);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	461a      	mov	r2, r3
 8000d32:	4915      	ldr	r1, [pc, #84]	@ (8000d88 <TMC2209_sendCommand+0x94>)
 8000d34:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <TMC2209_sendCommand+0x8c>)
 8000d36:	f006 fae8 	bl	800730a <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 8000d3a:	20c8      	movs	r0, #200	@ 0xc8
 8000d3c:	f7ff ffb4 	bl	8000ca8 <TMC2209_WaitForReply>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d104      	bne.n	8000d50 <TMC2209_sendCommand+0x5c>
         debug_print("No reply received.\r\n");
 8000d46:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <TMC2209_sendCommand+0x98>)
 8000d48:	f7ff ff14 	bl	8000b74 <debug_print>
         return 0; // command failed
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e012      	b.n	8000d76 <TMC2209_sendCommand+0x82>
     }
     // Send transmitted data -- Note: this can't be called before receiving or else it will interfere with huart2
     debug_print("Data Transmitted: ");
 8000d50:	480f      	ldr	r0, [pc, #60]	@ (8000d90 <TMC2209_sendCommand+0x9c>)
 8000d52:	f7ff ff0f 	bl	8000b74 <debug_print>
     debug_print_hex(command, writeLength);
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff ff1d 	bl	8000b9c <debug_print_hex>
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
 8000d62:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <TMC2209_sendCommand+0xa0>)
 8000d64:	f7ff ff06 	bl	8000b74 <debug_print>
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
 8000d68:	2108      	movs	r1, #8
 8000d6a:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <TMC2209_sendCommand+0xa4>)
 8000d6c:	f7ff ff16 	bl	8000b9c <debug_print_hex>

     return rxBuffer; // Success
 8000d70:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <TMC2209_sendCommand+0xa4>)
 8000d72:	e000      	b.n	8000d76 <TMC2209_sendCommand+0x82>
     }

     return flag;
 8000d74:	7dfb      	ldrb	r3, [r7, #23]
 }
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200004ac 	.word	0x200004ac
 8000d84:	080096a4 	.word	0x080096a4
 8000d88:	200001f0 	.word	0x200001f0
 8000d8c:	080096c0 	.word	0x080096c0
 8000d90:	080096d8 	.word	0x080096d8
 8000d94:	080096ec 	.word	0x080096ec
 8000d98:	200001fc 	.word	0x200001fc

08000d9c <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	460b      	mov	r3, r1
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8000daa:	2305      	movs	r3, #5
 8000dac:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	7a1b      	ldrb	r3, [r3, #8]
 8000db2:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8000db4:	7afb      	ldrb	r3, [r7, #11]
 8000db6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	0e1b      	lsrs	r3, r3, #24
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	141b      	asrs	r3, r3, #16
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	121b      	asrs	r3, r3, #8
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	2107      	movs	r1, #7
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ff22 	bl	8000c2c <calculate_CRC>
 8000de8:	4603      	mov	r3, r0
 8000dea:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	2200      	movs	r2, #0
 8000df2:	2108      	movs	r1, #8
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff7d 	bl	8000cf4 <TMC2209_sendCommand>
 	HAL_Delay(2);
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f001 fdd8 	bl	80029b0 <HAL_Delay>

 }
 8000e00:	bf00      	nop
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b087      	sub	sp, #28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	70fb      	strb	r3, [r7, #3]
 	uint8_t read_request_command[8] = { 0 };
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]

// 	if (!TMC_IS_READABLE(tmc2209->registerAccess[address]))
// 		return tmc2209->config->shadowRegister[address];

 	read_request_command[0] = SYNC;
 8000e1c:	2305      	movs	r3, #5
 8000e1e:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	7a1b      	ldrb	r3, [r3, #8]
 8000e24:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 8000e26:	78fb      	ldrb	r3, [r7, #3]
 8000e28:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2103      	movs	r1, #3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fefb 	bl	8000c2c <calculate_CRC>
 8000e36:	4603      	mov	r3, r0
 8000e38:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	2208      	movs	r2, #8
 8000e40:	2104      	movs	r1, #4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff56 	bl	8000cf4 <TMC2209_sendCommand>
 8000e48:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d00c      	beq.n	8000e6c <TMC2209_readInit+0x64>
 		// If first byte equals 0 then it means no reply so return
 		if (verifyBuffer[0] == 0)
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d102      	bne.n	8000e60 <TMC2209_readInit+0x58>
 			return -1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e041      	b.n	8000ee4 <TMC2209_readInit+0xdc>
 		debug_print("Invalid data received!(SYNC Byte)\r\n");
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <TMC2209_readInit+0xe4>)
 8000e62:	f7ff fe87 	bl	8000b74 <debug_print>
 		return -1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e03b      	b.n	8000ee4 <TMC2209_readInit+0xdc>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2bff      	cmp	r3, #255	@ 0xff
 8000e74:	d005      	beq.n	8000e82 <TMC2209_readInit+0x7a>
 		debug_print("Invalid data received!(MCU Address)\r\n");
 8000e76:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <TMC2209_readInit+0xe8>)
 8000e78:	f7ff fe7c 	bl	8000b74 <debug_print>
 		return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	e030      	b.n	8000ee4 <TMC2209_readInit+0xdc>
 	}
 	// Byte 2: Register ddress correct?
 	if (verifyBuffer[2] != regAddress){
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3302      	adds	r3, #2
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	78fa      	ldrb	r2, [r7, #3]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d005      	beq.n	8000e9a <TMC2209_readInit+0x92>
 		debug_print("Invalid data received!(Register Address)\r\n");
 8000e8e:	4819      	ldr	r0, [pc, #100]	@ (8000ef4 <TMC2209_readInit+0xec>)
 8000e90:	f7ff fe70 	bl	8000b74 <debug_print>
 		return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295
 8000e98:	e024      	b.n	8000ee4 <TMC2209_readInit+0xdc>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3307      	adds	r3, #7
 8000e9e:	781c      	ldrb	r4, [r3, #0]
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	6978      	ldr	r0, [r7, #20]
 8000ea4:	f7ff fec2 	bl	8000c2c <calculate_CRC>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	429c      	cmp	r4, r3
 8000eac:	d005      	beq.n	8000eba <TMC2209_readInit+0xb2>
 		debug_print("Invalid data received!(CRC)\r\n");
 8000eae:	4812      	ldr	r0, [pc, #72]	@ (8000ef8 <TMC2209_readInit+0xf0>)
 8000eb0:	f7ff fe60 	bl	8000b74 <debug_print>
 		return -1;
 8000eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb8:	e014      	b.n	8000ee4 <TMC2209_readInit+0xdc>
 	}
 	HAL_Delay(2);
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f001 fd78 	bl	80029b0 <HAL_Delay>
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	061a      	lsls	r2, r3, #24
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3304      	adds	r3, #4
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	041b      	lsls	r3, r3, #16
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3305      	adds	r3, #5
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	4313      	orrs	r3, r2
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	3206      	adds	r2, #6
 8000ee0:	7812      	ldrb	r2, [r2, #0]
 8000ee2:	4313      	orrs	r3, r2
 }
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd90      	pop	{r4, r7, pc}
 8000eec:	08009700 	.word	0x08009700
 8000ef0:	08009724 	.word	0x08009724
 8000ef4:	0800974c 	.word	0x0800974c
 8000ef8:	08009778 	.word	0x08009778

08000efc <TMC2209_SetSpreadCycle>:


uint8_t TMC2209_SetSpreadCycle(Motor *motor, uint8_t enable) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;

	debug_print("Read current SpreadCycle value...");
 8000f08:	4821      	ldr	r0, [pc, #132]	@ (8000f90 <TMC2209_SetSpreadCycle+0x94>)
 8000f0a:	f7ff fe33 	bl	8000b74 <debug_print>
	gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff79 	bl	8000e08 <TMC2209_readInit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	60fb      	str	r3, [r7, #12]

    if(gconf == TMC_ERROR){
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f20:	d105      	bne.n	8000f2e <TMC2209_SetSpreadCycle+0x32>
    	debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
 8000f22:	481c      	ldr	r0, [pc, #112]	@ (8000f94 <TMC2209_SetSpreadCycle+0x98>)
 8000f24:	f7ff fe26 	bl	8000b74 <debug_print>
    	return gconf;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	e02b      	b.n	8000f86 <TMC2209_SetSpreadCycle+0x8a>
    }

    check_gconf = gconf;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
    if(enable) {
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <TMC2209_SetSpreadCycle+0x46>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e003      	b.n	8000f4a <TMC2209_SetSpreadCycle+0x4e>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	60fb      	str	r3, [r7, #12]
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d104      	bne.n	8000f5c <TMC2209_SetSpreadCycle+0x60>
    	debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
 8000f52:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <TMC2209_SetSpreadCycle+0x9c>)
 8000f54:	f7ff fe0e 	bl	8000b74 <debug_print>
    	return enable;
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	e014      	b.n	8000f86 <TMC2209_SetSpreadCycle+0x8a>
    }

    TMC2209_writeInit(motor, TMC2209_REG_GCONF, gconf);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	2100      	movs	r1, #0
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff1a 	bl	8000d9c <TMC2209_writeInit>

    check_gconf = TMC2209_readInit(motor, TMC2209_REG_GCONF);
 8000f68:	2100      	movs	r1, #0
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff4c 	bl	8000e08 <TMC2209_readInit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	60bb      	str	r3, [r7, #8]
    if(check_gconf != gconf){
 8000f74:	68ba      	ldr	r2, [r7, #8]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d002      	beq.n	8000f82 <TMC2209_SetSpreadCycle+0x86>
    	debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	@ (8000f9c <TMC2209_SetSpreadCycle+0xa0>)
 8000f7e:	f7ff fdf9 	bl	8000b74 <debug_print>
    }
    return check_gconf;
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	b2db      	uxtb	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	08009798 	.word	0x08009798
 8000f94:	080097bc 	.word	0x080097bc
 8000f98:	080097f0 	.word	0x080097f0
 8000f9c:	08009834 	.word	0x08009834

08000fa0 <TMC2209_read_ifcnt>:
void TMC2209_enable_PDNuart(Motor *tmc2209){
	  // Enable the driver by writing to the GCONF register
	  debug_print("Enabling driver via GCONF register...\r\n");
	  TMC2209_writeInit(tmc2209, 0x00, 0x00000040); // Set `pdn_disable = 1` in GCONF
}
uint8_t TMC2209_read_ifcnt(Motor *tmc2209) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	@ 0x40
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

     debug_print("Reading IFCNT register...\r\n");
 8000fa8:	4810      	ldr	r0, [pc, #64]	@ (8000fec <TMC2209_read_ifcnt+0x4c>)
 8000faa:	f7ff fde3 	bl	8000b74 <debug_print>
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 8000fae:	2102      	movs	r1, #2
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff29 	bl	8000e08 <TMC2209_readInit>
 8000fb6:	63f8      	str	r0, [r7, #60]	@ 0x3c

     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8000fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	db0e      	blt.n	8000fdc <TMC2209_read_ifcnt+0x3c>
         char debug_msg[50];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fc4:	490a      	ldr	r1, [pc, #40]	@ (8000ff0 <TMC2209_read_ifcnt+0x50>)
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f007 fe2a 	bl	8008c20 <siprintf>
         debug_print(debug_msg);
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fdcf 	bl	8000b74 <debug_print>
         return ifcnt_value;
 8000fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	e003      	b.n	8000fe4 <TMC2209_read_ifcnt+0x44>
     } else {
         debug_print("Failed to read IFCNT register!\r\n");
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <TMC2209_read_ifcnt+0x54>)
 8000fde:	f7ff fdc9 	bl	8000b74 <debug_print>
         return 0;
 8000fe2:	2300      	movs	r3, #0
     }

 }
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3740      	adds	r7, #64	@ 0x40
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	080098e0 	.word	0x080098e0
 8000ff0:	080098fc 	.word	0x080098fc
 8000ff4:	08009910 	.word	0x08009910

08000ff8 <setMicrosteppingResolution>:


// Function to set the microstepping resolution through UART
void setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	@ 0x50
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8001004:	2380      	movs	r3, #128	@ 0x80
 8001006:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 800100a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800100e:	461a      	mov	r2, r3
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fec2 	bl	8000d9c <TMC2209_writeInit>


    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001018:	216c      	movs	r1, #108	@ 0x6c
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fef4 	bl	8000e08 <TMC2209_readInit>
 8001020:	4603      	mov	r3, r0
 8001022:	64bb      	str	r3, [r7, #72]	@ 0x48


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8001024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001026:	0e1b      	lsrs	r3, r3, #24
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001038:	d053      	beq.n	80010e2 <setMicrosteppingResolution+0xea>
 800103a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800103e:	dc74      	bgt.n	800112a <setMicrosteppingResolution+0x132>
 8001040:	2b80      	cmp	r3, #128	@ 0x80
 8001042:	d052      	beq.n	80010ea <setMicrosteppingResolution+0xf2>
 8001044:	2b80      	cmp	r3, #128	@ 0x80
 8001046:	dc70      	bgt.n	800112a <setMicrosteppingResolution+0x132>
 8001048:	2b20      	cmp	r3, #32
 800104a:	dc47      	bgt.n	80010dc <setMicrosteppingResolution+0xe4>
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd6c      	ble.n	800112a <setMicrosteppingResolution+0x132>
 8001050:	3b01      	subs	r3, #1
 8001052:	2b1f      	cmp	r3, #31
 8001054:	d869      	bhi.n	800112a <setMicrosteppingResolution+0x132>
 8001056:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <setMicrosteppingResolution+0x64>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	08001123 	.word	0x08001123
 8001060:	0800111b 	.word	0x0800111b
 8001064:	0800112b 	.word	0x0800112b
 8001068:	08001113 	.word	0x08001113
 800106c:	0800112b 	.word	0x0800112b
 8001070:	0800112b 	.word	0x0800112b
 8001074:	0800112b 	.word	0x0800112b
 8001078:	0800110b 	.word	0x0800110b
 800107c:	0800112b 	.word	0x0800112b
 8001080:	0800112b 	.word	0x0800112b
 8001084:	0800112b 	.word	0x0800112b
 8001088:	0800112b 	.word	0x0800112b
 800108c:	0800112b 	.word	0x0800112b
 8001090:	0800112b 	.word	0x0800112b
 8001094:	0800112b 	.word	0x0800112b
 8001098:	08001103 	.word	0x08001103
 800109c:	0800112b 	.word	0x0800112b
 80010a0:	0800112b 	.word	0x0800112b
 80010a4:	0800112b 	.word	0x0800112b
 80010a8:	0800112b 	.word	0x0800112b
 80010ac:	0800112b 	.word	0x0800112b
 80010b0:	0800112b 	.word	0x0800112b
 80010b4:	0800112b 	.word	0x0800112b
 80010b8:	0800112b 	.word	0x0800112b
 80010bc:	0800112b 	.word	0x0800112b
 80010c0:	0800112b 	.word	0x0800112b
 80010c4:	0800112b 	.word	0x0800112b
 80010c8:	0800112b 	.word	0x0800112b
 80010cc:	0800112b 	.word	0x0800112b
 80010d0:	0800112b 	.word	0x0800112b
 80010d4:	0800112b 	.word	0x0800112b
 80010d8:	080010fb 	.word	0x080010fb
 80010dc:	2b40      	cmp	r3, #64	@ 0x40
 80010de:	d008      	beq.n	80010f2 <setMicrosteppingResolution+0xfa>
 80010e0:	e023      	b.n	800112a <setMicrosteppingResolution+0x132>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010e8:	e024      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 80010ea:	2301      	movs	r3, #1
 80010ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010f0:	e020      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 80010f2:	2302      	movs	r3, #2
 80010f4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 80010f8:	e01c      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 80010fa:	2303      	movs	r3, #3
 80010fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001100:	e018      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8001102:	2304      	movs	r3, #4
 8001104:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001108:	e014      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 800110a:	2305      	movs	r3, #5
 800110c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001110:	e010      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8001112:	2306      	movs	r3, #6
 8001114:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001118:	e00c      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 800111a:	2307      	movs	r3, #7
 800111c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001120:	e008      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8001122:	2308      	movs	r3, #8
 8001124:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001128:	e004      	b.n	8001134 <setMicrosteppingResolution+0x13c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 800112a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800112e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            break;
 8001132:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8001134:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001138:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800113c:	429a      	cmp	r2, r3
 800113e:	d103      	bne.n	8001148 <setMicrosteppingResolution+0x150>
        debug_print("Resolution unchanged, no update needed.\n");
 8001140:	4810      	ldr	r0, [pc, #64]	@ (8001184 <setMicrosteppingResolution+0x18c>)
 8001142:	f7ff fd17 	bl	8000b74 <debug_print>
 8001146:	e019      	b.n	800117c <setMicrosteppingResolution+0x184>
        return;
    }

    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800114a:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800114e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001152:	061b      	lsls	r3, r3, #24
 8001154:	4313      	orrs	r3, r2
 8001156:	643b      	str	r3, [r7, #64]	@ 0x40
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8001158:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800115a:	461a      	mov	r2, r3
 800115c:	216c      	movs	r1, #108	@ 0x6c
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fe1c 	bl	8000d9c <TMC2209_writeInit>

    // Debug
    char debug_msg[50];
    sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
 8001164:	887a      	ldrh	r2, [r7, #2]
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	4907      	ldr	r1, [pc, #28]	@ (8001188 <setMicrosteppingResolution+0x190>)
 800116c:	4618      	mov	r0, r3
 800116e:	f007 fd57 	bl	8008c20 <siprintf>
    debug_print(debug_msg);
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fcfc 	bl	8000b74 <debug_print>

}
 800117c:	3750      	adds	r7, #80	@ 0x50
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	08009934 	.word	0x08009934
 8001188:	08009960 	.word	0x08009960

0800118c <checkMicrosteppingResolution>:


uint16_t checkMicrosteppingResolution(Motor *tmc2209) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b092      	sub	sp, #72	@ 0x48
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    // Read the CHOPCONF register
    uint32_t chopconf = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001194:	216c      	movs	r1, #108	@ 0x6c
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fe36 	bl	8000e08 <TMC2209_readInit>
 800119c:	4603      	mov	r3, r0
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
    // Extract the MRES bits (bits 24–27 in CHOPCONF)
    uint8_t mres = (chopconf >> 24) & 0x0F;
 80011a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011a2:	0e1b      	lsrs	r3, r3, #24
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // Calculate the current microstepping resolution
    uint16_t resolution;
    switch (mres) {
 80011ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011b2:	2b08      	cmp	r3, #8
 80011b4:	d839      	bhi.n	800122a <checkMicrosteppingResolution+0x9e>
 80011b6:	a201      	add	r2, pc, #4	@ (adr r2, 80011bc <checkMicrosteppingResolution+0x30>)
 80011b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011eb 	.word	0x080011eb
 80011c4:	080011f3 	.word	0x080011f3
 80011c8:	080011fb 	.word	0x080011fb
 80011cc:	08001203 	.word	0x08001203
 80011d0:	0800120b 	.word	0x0800120b
 80011d4:	08001213 	.word	0x08001213
 80011d8:	0800121b 	.word	0x0800121b
 80011dc:	08001223 	.word	0x08001223
        case 0x00: resolution = 256; break;
 80011e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011e4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011e8:	e022      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x01: resolution = 128; break;
 80011ea:	2380      	movs	r3, #128	@ 0x80
 80011ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011f0:	e01e      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x02: resolution = 64; break;
 80011f2:	2340      	movs	r3, #64	@ 0x40
 80011f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80011f8:	e01a      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x03: resolution = 32; break;
 80011fa:	2320      	movs	r3, #32
 80011fc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001200:	e016      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x04: resolution = 16; break;
 8001202:	2310      	movs	r3, #16
 8001204:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001208:	e012      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x05: resolution = 8; break;
 800120a:	2308      	movs	r3, #8
 800120c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001210:	e00e      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x06: resolution = 4; break;
 8001212:	2304      	movs	r3, #4
 8001214:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001218:	e00a      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x07: resolution = 2; break;
 800121a:	2302      	movs	r3, #2
 800121c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001220:	e006      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        case 0x08: resolution = 1; break;
 8001222:	2301      	movs	r3, #1
 8001224:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001228:	e002      	b.n	8001230 <checkMicrosteppingResolution+0xa4>
        default: resolution = 0; // Unknown value
 800122a:	2300      	movs	r3, #0
 800122c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    }

    // Debug
    char debug_msg[50];
    sprintf(debug_msg, "Current microstepping resolution: %u\n", resolution);
 8001230:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	4907      	ldr	r1, [pc, #28]	@ (8001258 <checkMicrosteppingResolution+0xcc>)
 800123a:	4618      	mov	r0, r3
 800123c:	f007 fcf0 	bl	8008c20 <siprintf>
    debug_print(debug_msg);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fc95 	bl	8000b74 <debug_print>

    return resolution;
 800124a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
}
 800124e:	4618      	mov	r0, r3
 8001250:	3748      	adds	r7, #72	@ 0x48
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	0800998c 	.word	0x0800998c

0800125c <configureGCONF>:
    debug_print(debug_msg);

    return irun_value;
}

void configureGCONF(Motor *tmc2209) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 8001264:	23c0      	movs	r3, #192	@ 0xc0
 8001266:	60fb      	str	r3, [r7, #12]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	461a      	mov	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fd94 	bl	8000d9c <TMC2209_writeInit>
    HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f001 fb9b 	bl	80029b0 <HAL_Delay>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <initializeMotors>:
// Motors & axis
Motor motors[MAX_MOTORS];
Axis axes[MAX_MOTORS_PER_AXIS - 1];


void initializeMotors() {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	e251      	b.n	8001734 <initializeMotors+0x4b0>
    	// Setting all for all drivers/motors
    	motors[i].driver.huart = &huart2; // UART handler
 8001290:	4aa3      	ldr	r2, [pc, #652]	@ (8001520 <initializeMotors+0x29c>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2158      	movs	r1, #88	@ 0x58
 8001296:	fb01 f303 	mul.w	r3, r1, r3
 800129a:	4413      	add	r3, r2
 800129c:	3304      	adds	r3, #4
 800129e:	4aa1      	ldr	r2, [pc, #644]	@ (8001524 <initializeMotors+0x2a0>)
 80012a0:	601a      	str	r2, [r3, #0]
    	motors[i].driver.address = 0x00+i; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	b2d8      	uxtb	r0, r3
 80012a6:	4a9e      	ldr	r2, [pc, #632]	@ (8001520 <initializeMotors+0x29c>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2158      	movs	r1, #88	@ 0x58
 80012ac:	fb01 f303 	mul.w	r3, r1, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	3308      	adds	r3, #8
 80012b4:	4602      	mov	r2, r0
 80012b6:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i + 1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b2d8      	uxtb	r0, r3
 80012c0:	4a97      	ldr	r2, [pc, #604]	@ (8001520 <initializeMotors+0x29c>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2158      	movs	r1, #88	@ 0x58
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	4413      	add	r3, r2
 80012cc:	4602      	mov	r2, r0
 80012ce:	701a      	strb	r2, [r3, #0]

        motors[i].stepsTaken = 0;
 80012d0:	4a93      	ldr	r2, [pc, #588]	@ (8001520 <initializeMotors+0x29c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2158      	movs	r1, #88	@ 0x58
 80012d6:	fb01 f303 	mul.w	r3, r1, r3
 80012da:	4413      	add	r3, r2
 80012dc:	3344      	adds	r3, #68	@ 0x44
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 80012e2:	4a8f      	ldr	r2, [pc, #572]	@ (8001520 <initializeMotors+0x29c>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2158      	movs	r1, #88	@ 0x58
 80012e8:	fb01 f303 	mul.w	r3, r1, r3
 80012ec:	4413      	add	r3, r2
 80012ee:	3348      	adds	r3, #72	@ 0x48
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 80012f4:	4a8a      	ldr	r2, [pc, #552]	@ (8001520 <initializeMotors+0x29c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2158      	movs	r1, #88	@ 0x58
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	4413      	add	r3, r2
 8001300:	334c      	adds	r3, #76	@ 0x4c
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8001306:	4a86      	ldr	r2, [pc, #536]	@ (8001520 <initializeMotors+0x29c>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2158      	movs	r1, #88	@ 0x58
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	4413      	add	r3, r2
 8001312:	3350      	adds	r3, #80	@ 0x50
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8001318:	4a81      	ldr	r2, [pc, #516]	@ (8001520 <initializeMotors+0x29c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2158      	movs	r1, #88	@ 0x58
 800131e:	fb01 f303 	mul.w	r3, r1, r3
 8001322:	4413      	add	r3, r2
 8001324:	3354      	adds	r3, #84	@ 0x54
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]



        if(i == 0){
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 8083 	bne.w	8001438 <initializeMotors+0x1b4>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001332:	4a7b      	ldr	r2, [pc, #492]	@ (8001520 <initializeMotors+0x29c>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2158      	movs	r1, #88	@ 0x58
 8001338:	fb01 f303 	mul.w	r3, r1, r3
 800133c:	4413      	add	r3, r2
 800133e:	330c      	adds	r3, #12
 8001340:	4a79      	ldr	r2, [pc, #484]	@ (8001528 <initializeMotors+0x2a4>)
 8001342:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001344:	4a76      	ldr	r2, [pc, #472]	@ (8001520 <initializeMotors+0x29c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2158      	movs	r1, #88	@ 0x58
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	4413      	add	r3, r2
 8001350:	3310      	adds	r3, #16
 8001352:	2208      	movs	r2, #8
 8001354:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 8;
 8001356:	4a72      	ldr	r2, [pc, #456]	@ (8001520 <initializeMotors+0x29c>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2158      	movs	r1, #88	@ 0x58
 800135c:	fb01 f303 	mul.w	r3, r1, r3
 8001360:	4413      	add	r3, r2
 8001362:	3301      	adds	r3, #1
 8001364:	2208      	movs	r2, #8
 8001366:	701a      	strb	r2, [r3, #0]
        motors[i].stepsPerRevolution = 400;
 8001368:	4a6d      	ldr	r2, [pc, #436]	@ (8001520 <initializeMotors+0x29c>)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2158      	movs	r1, #88	@ 0x58
 800136e:	fb01 f303 	mul.w	r3, r1, r3
 8001372:	4413      	add	r3, r2
 8001374:	333c      	adds	r3, #60	@ 0x3c
 8001376:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800137a:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = GPIOB;
 800137c:	4a68      	ldr	r2, [pc, #416]	@ (8001520 <initializeMotors+0x29c>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2158      	movs	r1, #88	@ 0x58
 8001382:	fb01 f303 	mul.w	r3, r1, r3
 8001386:	4413      	add	r3, r2
 8001388:	3314      	adds	r3, #20
 800138a:	4a68      	ldr	r2, [pc, #416]	@ (800152c <initializeMotors+0x2a8>)
 800138c:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = GPIO_PIN_10;
 800138e:	4a64      	ldr	r2, [pc, #400]	@ (8001520 <initializeMotors+0x29c>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2158      	movs	r1, #88	@ 0x58
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	4413      	add	r3, r2
 800139a:	3318      	adds	r3, #24
 800139c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013a0:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = GPIOF;
 80013a2:	4a5f      	ldr	r2, [pc, #380]	@ (8001520 <initializeMotors+0x29c>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2158      	movs	r1, #88	@ 0x58
 80013a8:	fb01 f303 	mul.w	r3, r1, r3
 80013ac:	4413      	add	r3, r2
 80013ae:	331c      	adds	r3, #28
 80013b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001530 <initializeMotors+0x2ac>)
 80013b2:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = GPIO_PIN_9;
 80013b4:	4a5a      	ldr	r2, [pc, #360]	@ (8001520 <initializeMotors+0x29c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2158      	movs	r1, #88	@ 0x58
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	3320      	adds	r3, #32
 80013c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013c6:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = GPIOB;
 80013c8:	4a55      	ldr	r2, [pc, #340]	@ (8001520 <initializeMotors+0x29c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2158      	movs	r1, #88	@ 0x58
 80013ce:	fb01 f303 	mul.w	r3, r1, r3
 80013d2:	4413      	add	r3, r2
 80013d4:	3324      	adds	r3, #36	@ 0x24
 80013d6:	4a55      	ldr	r2, [pc, #340]	@ (800152c <initializeMotors+0x2a8>)
 80013d8:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = GPIO_PIN_11;
 80013da:	4a51      	ldr	r2, [pc, #324]	@ (8001520 <initializeMotors+0x29c>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2158      	movs	r1, #88	@ 0x58
 80013e0:	fb01 f303 	mul.w	r3, r1, r3
 80013e4:	4413      	add	r3, r2
 80013e6:	3328      	adds	r3, #40	@ 0x28
 80013e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80013ec:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = GPIOD;
 80013ee:	4a4c      	ldr	r2, [pc, #304]	@ (8001520 <initializeMotors+0x29c>)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2158      	movs	r1, #88	@ 0x58
 80013f4:	fb01 f303 	mul.w	r3, r1, r3
 80013f8:	4413      	add	r3, r2
 80013fa:	332c      	adds	r3, #44	@ 0x2c
 80013fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001534 <initializeMotors+0x2b0>)
 80013fe:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = GPIO_PIN_1;
 8001400:	4a47      	ldr	r2, [pc, #284]	@ (8001520 <initializeMotors+0x29c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2158      	movs	r1, #88	@ 0x58
 8001406:	fb01 f303 	mul.w	r3, r1, r3
 800140a:	4413      	add	r3, r2
 800140c:	3330      	adds	r3, #48	@ 0x30
 800140e:	2202      	movs	r2, #2
 8001410:	801a      	strh	r2, [r3, #0]
        motors[i].driver.index_port = GPIOA;
 8001412:	4a43      	ldr	r2, [pc, #268]	@ (8001520 <initializeMotors+0x29c>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2158      	movs	r1, #88	@ 0x58
 8001418:	fb01 f303 	mul.w	r3, r1, r3
 800141c:	4413      	add	r3, r2
 800141e:	3334      	adds	r3, #52	@ 0x34
 8001420:	4a45      	ldr	r2, [pc, #276]	@ (8001538 <initializeMotors+0x2b4>)
 8001422:	601a      	str	r2, [r3, #0]
        motors[i].driver.index_pin = GPIO_PIN_5;
 8001424:	4a3e      	ldr	r2, [pc, #248]	@ (8001520 <initializeMotors+0x29c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2158      	movs	r1, #88	@ 0x58
 800142a:	fb01 f303 	mul.w	r3, r1, r3
 800142e:	4413      	add	r3, r2
 8001430:	3338      	adds	r3, #56	@ 0x38
 8001432:	2220      	movs	r2, #32
 8001434:	801a      	strh	r2, [r3, #0]
 8001436:	e17a      	b.n	800172e <initializeMotors+0x4aa>
        }


        else if(i == 1){
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d17e      	bne.n	800153c <initializeMotors+0x2b8>
        	// Configure motor 2 X-axis
            // TIMER configurations
            //motors[i].driver.htim = &htim3;				 // TIMER HANDLER
           // motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
            motors[i].driver.mstep = 2;
 800143e:	4a38      	ldr	r2, [pc, #224]	@ (8001520 <initializeMotors+0x29c>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2158      	movs	r1, #88	@ 0x58
 8001444:	fb01 f303 	mul.w	r3, r1, r3
 8001448:	4413      	add	r3, r2
 800144a:	3301      	adds	r3, #1
 800144c:	2202      	movs	r2, #2
 800144e:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 8001450:	4a33      	ldr	r2, [pc, #204]	@ (8001520 <initializeMotors+0x29c>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2158      	movs	r1, #88	@ 0x58
 8001456:	fb01 f303 	mul.w	r3, r1, r3
 800145a:	4413      	add	r3, r2
 800145c:	333c      	adds	r3, #60	@ 0x3c
 800145e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001462:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8001464:	4a2e      	ldr	r2, [pc, #184]	@ (8001520 <initializeMotors+0x29c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2158      	movs	r1, #88	@ 0x58
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	4413      	add	r3, r2
 8001470:	3314      	adds	r3, #20
 8001472:	4a2e      	ldr	r2, [pc, #184]	@ (800152c <initializeMotors+0x2a8>)
 8001474:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 8001476:	4a2a      	ldr	r2, [pc, #168]	@ (8001520 <initializeMotors+0x29c>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2158      	movs	r1, #88	@ 0x58
 800147c:	fb01 f303 	mul.w	r3, r1, r3
 8001480:	4413      	add	r3, r2
 8001482:	3318      	adds	r3, #24
 8001484:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001488:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 800148a:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <initializeMotors+0x29c>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2158      	movs	r1, #88	@ 0x58
 8001490:	fb01 f303 	mul.w	r3, r1, r3
 8001494:	4413      	add	r3, r2
 8001496:	331c      	adds	r3, #28
 8001498:	4a25      	ldr	r2, [pc, #148]	@ (8001530 <initializeMotors+0x2ac>)
 800149a:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 800149c:	4a20      	ldr	r2, [pc, #128]	@ (8001520 <initializeMotors+0x29c>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2158      	movs	r1, #88	@ 0x58
 80014a2:	fb01 f303 	mul.w	r3, r1, r3
 80014a6:	4413      	add	r3, r2
 80014a8:	3320      	adds	r3, #32
 80014aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ae:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 80014b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001520 <initializeMotors+0x29c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2158      	movs	r1, #88	@ 0x58
 80014b6:	fb01 f303 	mul.w	r3, r1, r3
 80014ba:	4413      	add	r3, r2
 80014bc:	3324      	adds	r3, #36	@ 0x24
 80014be:	4a1b      	ldr	r2, [pc, #108]	@ (800152c <initializeMotors+0x2a8>)
 80014c0:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80014c2:	4a17      	ldr	r2, [pc, #92]	@ (8001520 <initializeMotors+0x29c>)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2158      	movs	r1, #88	@ 0x58
 80014c8:	fb01 f303 	mul.w	r3, r1, r3
 80014cc:	4413      	add	r3, r2
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80014d6:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <initializeMotors+0x29c>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2158      	movs	r1, #88	@ 0x58
 80014dc:	fb01 f303 	mul.w	r3, r1, r3
 80014e0:	4413      	add	r3, r2
 80014e2:	332c      	adds	r3, #44	@ 0x2c
 80014e4:	4a13      	ldr	r2, [pc, #76]	@ (8001534 <initializeMotors+0x2b0>)
 80014e6:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 80014e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001520 <initializeMotors+0x29c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2158      	movs	r1, #88	@ 0x58
 80014ee:	fb01 f303 	mul.w	r3, r1, r3
 80014f2:	4413      	add	r3, r2
 80014f4:	3330      	adds	r3, #48	@ 0x30
 80014f6:	2202      	movs	r2, #2
 80014f8:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 80014fa:	4a09      	ldr	r2, [pc, #36]	@ (8001520 <initializeMotors+0x29c>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2158      	movs	r1, #88	@ 0x58
 8001500:	fb01 f303 	mul.w	r3, r1, r3
 8001504:	4413      	add	r3, r2
 8001506:	3334      	adds	r3, #52	@ 0x34
 8001508:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <initializeMotors+0x2b4>)
 800150a:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 800150c:	4a04      	ldr	r2, [pc, #16]	@ (8001520 <initializeMotors+0x29c>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2158      	movs	r1, #88	@ 0x58
 8001512:	fb01 f303 	mul.w	r3, r1, r3
 8001516:	4413      	add	r3, r2
 8001518:	3338      	adds	r3, #56	@ 0x38
 800151a:	2220      	movs	r2, #32
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e106      	b.n	800172e <initializeMotors+0x4aa>
 8001520:	2000020c 	.word	0x2000020c
 8001524:	200004ac 	.word	0x200004ac
 8001528:	200003c8 	.word	0x200003c8
 800152c:	40020400 	.word	0x40020400
 8001530:	40021400 	.word	0x40021400
 8001534:	40020c00 	.word	0x40020c00
 8001538:	40020000 	.word	0x40020000

        }


        else if(i == 2){
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d179      	bne.n	8001636 <initializeMotors+0x3b2>
        	// Configure motor 3 Y-axis
            // TIMER configurations
           // motors[i].driver.htim = &htim3;				 // TIMER HANDLER
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8001542:	4a82      	ldr	r2, [pc, #520]	@ (800174c <initializeMotors+0x4c8>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2158      	movs	r1, #88	@ 0x58
 8001548:	fb01 f303 	mul.w	r3, r1, r3
 800154c:	4413      	add	r3, r2
 800154e:	3310      	adds	r3, #16
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 2;
 8001554:	4a7d      	ldr	r2, [pc, #500]	@ (800174c <initializeMotors+0x4c8>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2158      	movs	r1, #88	@ 0x58
 800155a:	fb01 f303 	mul.w	r3, r1, r3
 800155e:	4413      	add	r3, r2
 8001560:	3301      	adds	r3, #1
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 8001566:	4a79      	ldr	r2, [pc, #484]	@ (800174c <initializeMotors+0x4c8>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2158      	movs	r1, #88	@ 0x58
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	4413      	add	r3, r2
 8001572:	333c      	adds	r3, #60	@ 0x3c
 8001574:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001578:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 800157a:	4a74      	ldr	r2, [pc, #464]	@ (800174c <initializeMotors+0x4c8>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2158      	movs	r1, #88	@ 0x58
 8001580:	fb01 f303 	mul.w	r3, r1, r3
 8001584:	4413      	add	r3, r2
 8001586:	3314      	adds	r3, #20
 8001588:	4a71      	ldr	r2, [pc, #452]	@ (8001750 <initializeMotors+0x4cc>)
 800158a:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 800158c:	4a6f      	ldr	r2, [pc, #444]	@ (800174c <initializeMotors+0x4c8>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2158      	movs	r1, #88	@ 0x58
 8001592:	fb01 f303 	mul.w	r3, r1, r3
 8001596:	4413      	add	r3, r2
 8001598:	3318      	adds	r3, #24
 800159a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 80015a0:	4a6a      	ldr	r2, [pc, #424]	@ (800174c <initializeMotors+0x4c8>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2158      	movs	r1, #88	@ 0x58
 80015a6:	fb01 f303 	mul.w	r3, r1, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	331c      	adds	r3, #28
 80015ae:	4a69      	ldr	r2, [pc, #420]	@ (8001754 <initializeMotors+0x4d0>)
 80015b0:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 80015b2:	4a66      	ldr	r2, [pc, #408]	@ (800174c <initializeMotors+0x4c8>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2158      	movs	r1, #88	@ 0x58
 80015b8:	fb01 f303 	mul.w	r3, r1, r3
 80015bc:	4413      	add	r3, r2
 80015be:	3320      	adds	r3, #32
 80015c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015c4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 80015c6:	4a61      	ldr	r2, [pc, #388]	@ (800174c <initializeMotors+0x4c8>)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2158      	movs	r1, #88	@ 0x58
 80015cc:	fb01 f303 	mul.w	r3, r1, r3
 80015d0:	4413      	add	r3, r2
 80015d2:	3324      	adds	r3, #36	@ 0x24
 80015d4:	4a5e      	ldr	r2, [pc, #376]	@ (8001750 <initializeMotors+0x4cc>)
 80015d6:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80015d8:	4a5c      	ldr	r2, [pc, #368]	@ (800174c <initializeMotors+0x4c8>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2158      	movs	r1, #88	@ 0x58
 80015de:	fb01 f303 	mul.w	r3, r1, r3
 80015e2:	4413      	add	r3, r2
 80015e4:	3328      	adds	r3, #40	@ 0x28
 80015e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015ea:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80015ec:	4a57      	ldr	r2, [pc, #348]	@ (800174c <initializeMotors+0x4c8>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2158      	movs	r1, #88	@ 0x58
 80015f2:	fb01 f303 	mul.w	r3, r1, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	332c      	adds	r3, #44	@ 0x2c
 80015fa:	4a57      	ldr	r2, [pc, #348]	@ (8001758 <initializeMotors+0x4d4>)
 80015fc:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 80015fe:	4a53      	ldr	r2, [pc, #332]	@ (800174c <initializeMotors+0x4c8>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2158      	movs	r1, #88	@ 0x58
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	4413      	add	r3, r2
 800160a:	3330      	adds	r3, #48	@ 0x30
 800160c:	2202      	movs	r2, #2
 800160e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 8001610:	4a4e      	ldr	r2, [pc, #312]	@ (800174c <initializeMotors+0x4c8>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2158      	movs	r1, #88	@ 0x58
 8001616:	fb01 f303 	mul.w	r3, r1, r3
 800161a:	4413      	add	r3, r2
 800161c:	3334      	adds	r3, #52	@ 0x34
 800161e:	4a4f      	ldr	r2, [pc, #316]	@ (800175c <initializeMotors+0x4d8>)
 8001620:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 8001622:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <initializeMotors+0x4c8>)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2158      	movs	r1, #88	@ 0x58
 8001628:	fb01 f303 	mul.w	r3, r1, r3
 800162c:	4413      	add	r3, r2
 800162e:	3338      	adds	r3, #56	@ 0x38
 8001630:	2220      	movs	r2, #32
 8001632:	801a      	strh	r2, [r3, #0]
 8001634:	e07b      	b.n	800172e <initializeMotors+0x4aa>

        }

        else if(i == 3){
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d178      	bne.n	800172e <initializeMotors+0x4aa>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            //motors[i].driver.htim = &htim3;				 // TIMER HANDLER
            motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 800163c:	4a43      	ldr	r2, [pc, #268]	@ (800174c <initializeMotors+0x4c8>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2158      	movs	r1, #88	@ 0x58
 8001642:	fb01 f303 	mul.w	r3, r1, r3
 8001646:	4413      	add	r3, r2
 8001648:	3310      	adds	r3, #16
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 2;
 800164e:	4a3f      	ldr	r2, [pc, #252]	@ (800174c <initializeMotors+0x4c8>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2158      	movs	r1, #88	@ 0x58
 8001654:	fb01 f303 	mul.w	r3, r1, r3
 8001658:	4413      	add	r3, r2
 800165a:	3301      	adds	r3, #1
 800165c:	2202      	movs	r2, #2
 800165e:	701a      	strb	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 8001660:	4a3a      	ldr	r2, [pc, #232]	@ (800174c <initializeMotors+0x4c8>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2158      	movs	r1, #88	@ 0x58
 8001666:	fb01 f303 	mul.w	r3, r1, r3
 800166a:	4413      	add	r3, r2
 800166c:	333c      	adds	r3, #60	@ 0x3c
 800166e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001672:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = GPIOB;
 8001674:	4a35      	ldr	r2, [pc, #212]	@ (800174c <initializeMotors+0x4c8>)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2158      	movs	r1, #88	@ 0x58
 800167a:	fb01 f303 	mul.w	r3, r1, r3
 800167e:	4413      	add	r3, r2
 8001680:	3314      	adds	r3, #20
 8001682:	4a33      	ldr	r2, [pc, #204]	@ (8001750 <initializeMotors+0x4cc>)
 8001684:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = GPIO_PIN_10;
 8001686:	4a31      	ldr	r2, [pc, #196]	@ (800174c <initializeMotors+0x4c8>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2158      	movs	r1, #88	@ 0x58
 800168c:	fb01 f303 	mul.w	r3, r1, r3
 8001690:	4413      	add	r3, r2
 8001692:	3318      	adds	r3, #24
 8001694:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001698:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = GPIOF;
 800169a:	4a2c      	ldr	r2, [pc, #176]	@ (800174c <initializeMotors+0x4c8>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2158      	movs	r1, #88	@ 0x58
 80016a0:	fb01 f303 	mul.w	r3, r1, r3
 80016a4:	4413      	add	r3, r2
 80016a6:	331c      	adds	r3, #28
 80016a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001754 <initializeMotors+0x4d0>)
 80016aa:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = GPIO_PIN_9;
 80016ac:	4a27      	ldr	r2, [pc, #156]	@ (800174c <initializeMotors+0x4c8>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2158      	movs	r1, #88	@ 0x58
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	3320      	adds	r3, #32
 80016ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016be:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = GPIOB;
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <initializeMotors+0x4c8>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2158      	movs	r1, #88	@ 0x58
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	3324      	adds	r3, #36	@ 0x24
 80016ce:	4a20      	ldr	r2, [pc, #128]	@ (8001750 <initializeMotors+0x4cc>)
 80016d0:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = GPIO_PIN_11;
 80016d2:	4a1e      	ldr	r2, [pc, #120]	@ (800174c <initializeMotors+0x4c8>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2158      	movs	r1, #88	@ 0x58
 80016d8:	fb01 f303 	mul.w	r3, r1, r3
 80016dc:	4413      	add	r3, r2
 80016de:	3328      	adds	r3, #40	@ 0x28
 80016e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016e4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = GPIOD;
 80016e6:	4a19      	ldr	r2, [pc, #100]	@ (800174c <initializeMotors+0x4c8>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2158      	movs	r1, #88	@ 0x58
 80016ec:	fb01 f303 	mul.w	r3, r1, r3
 80016f0:	4413      	add	r3, r2
 80016f2:	332c      	adds	r3, #44	@ 0x2c
 80016f4:	4a18      	ldr	r2, [pc, #96]	@ (8001758 <initializeMotors+0x4d4>)
 80016f6:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = GPIO_PIN_1;
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <initializeMotors+0x4c8>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2158      	movs	r1, #88	@ 0x58
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3330      	adds	r3, #48	@ 0x30
 8001706:	2202      	movs	r2, #2
 8001708:	801a      	strh	r2, [r3, #0]
            motors[i].driver.index_port = GPIOA;
 800170a:	4a10      	ldr	r2, [pc, #64]	@ (800174c <initializeMotors+0x4c8>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2158      	movs	r1, #88	@ 0x58
 8001710:	fb01 f303 	mul.w	r3, r1, r3
 8001714:	4413      	add	r3, r2
 8001716:	3334      	adds	r3, #52	@ 0x34
 8001718:	4a10      	ldr	r2, [pc, #64]	@ (800175c <initializeMotors+0x4d8>)
 800171a:	601a      	str	r2, [r3, #0]
            motors[i].driver.index_pin = GPIO_PIN_5;
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <initializeMotors+0x4c8>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2158      	movs	r1, #88	@ 0x58
 8001722:	fb01 f303 	mul.w	r3, r1, r3
 8001726:	4413      	add	r3, r2
 8001728:	3338      	adds	r3, #56	@ 0x38
 800172a:	2220      	movs	r2, #32
 800172c:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	f77f adaa 	ble.w	8001290 <initializeMotors+0xc>


    }


}
 800173c:	bf00      	nop
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	2000020c 	.word	0x2000020c
 8001750:	40020400 	.word	0x40020400
 8001754:	40021400 	.word	0x40021400
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40020000 	.word	0x40020000

08001760 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, float lengthMM, const char *axisName) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af02      	add	r7, sp, #8
 8001766:	6178      	str	r0, [r7, #20]
 8001768:	6139      	str	r1, [r7, #16]
 800176a:	60fa      	str	r2, [r7, #12]
 800176c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001770:	607b      	str	r3, [r7, #4]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	605a      	str	r2, [r3, #4]
    const float pulleyCircumference = 40.0f; // GT2 20-tooth pulley with 2mm pitch(Pulley Circumference	= Number of Teeth * Belt Pitch)
 800177e:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <initializeAxis+0x94>)
 8001780:	61fb      	str	r3, [r7, #28]

    // Axis dimensions and step calculations
    axis->lengthMM = lengthMM;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	7852      	ldrb	r2, [r2, #1]
 8001790:	fb02 f303 	mul.w	r3, r2, r3
 8001794:	61bb      	str	r3, [r7, #24]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	641a      	str	r2, [r3, #64]	@ 0x40
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	641a      	str	r2, [r3, #64]	@ 0x40
    axis->stepPerUnit = totalStepsPerRevolution / pulleyCircumference;;
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80017b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f103 0014 	add.w	r0, r3, #20
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0b      	ldr	r2, [pc, #44]	@ (80017f8 <initializeAxis+0x98>)
 80017ca:	210a      	movs	r1, #10
 80017cc:	f007 f9f4 	bl	8008bb8 <sniprintf>
    if (motor2 != NULL) {
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00a      	beq.n	80017ec <initializeAxis+0x8c>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f103 001e 	add.w	r0, r3, #30
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	9300      	str	r3, [sp, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a04      	ldr	r2, [pc, #16]	@ (80017f8 <initializeAxis+0x98>)
 80017e6:	210a      	movs	r1, #10
 80017e8:	f007 f9e6 	bl	8008bb8 <sniprintf>
    }
}
 80017ec:	bf00      	nop
 80017ee:	3720      	adds	r7, #32
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	42200000 	.word	0x42200000
 80017f8:	08009acc 	.word	0x08009acc

080017fc <initializeSystem>:

void initializeSystem(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
    // X-axis
    initializeAxis(&axes[0], &motors[0], NULL, X_AXIS_LENGTH, "X");
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <initializeSystem+0x18>)
 8001802:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001818 <initializeSystem+0x1c>
 8001806:	2200      	movs	r2, #0
 8001808:	4904      	ldr	r1, [pc, #16]	@ (800181c <initializeSystem+0x20>)
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <initializeSystem+0x24>)
 800180c:	f7ff ffa8 	bl	8001760 <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[0], &motors[2], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	08009ad4 	.word	0x08009ad4
 8001818:	43eaad91 	.word	0x43eaad91
 800181c:	2000020c 	.word	0x2000020c
 8001820:	20000264 	.word	0x20000264

08001824 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	213c      	movs	r1, #60	@ 0x3c
 8001832:	4618      	mov	r0, r3
 8001834:	f004 fde4 	bl	8006400 <HAL_TIM_Encoder_Start>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 800184a:	88fb      	ldrh	r3, [r7, #6]
 800184c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 8001852:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <HAL_GPIO_EXTI_Callback+0x24>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000afc 	.word	0x20000afc

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186c:	f001 f843 	bl	80028f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001870:	f000 f876 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001874:	f000 fb02 	bl	8001e7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001878:	f000 fae2 	bl	8001e40 <MX_DMA_Init>
  MX_ETH_Init();
 800187c:	f000 f8de 	bl	8001a3c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001880:	f000 fa80 	bl	8001d84 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001884:	f000 faae 	bl	8001de4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8001888:	f000 fa16 	bl	8001cb8 <MX_TIM7_Init>
  MX_I2C1_Init();
 800188c:	f000 f924 	bl	8001ad8 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001890:	f000 f9bc 	bl	8001c0c <MX_TIM4_Init>
  MX_TIM2_Init();
 8001894:	f000 f960 	bl	8001b58 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001898:	f000 fa44 	bl	8001d24 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initializeMotors();
 800189c:	f7ff fcf2 	bl	8001284 <initializeMotors>
  initializeSystem();
 80018a0:	f7ff ffac 	bl	80017fc <initializeSystem>
   ENC_Init(&henc1);
 80018a4:	4828      	ldr	r0, [pc, #160]	@ (8001948 <main+0xe0>)
 80018a6:	f7ff ffbd 	bl	8001824 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);

    //TMC2209_enable_PDNuart(&motors[0]);

    //TMC2209_read_ifcnt(&motors[0]);
    configureGCONF(&motors[0]);
 80018aa:	4828      	ldr	r0, [pc, #160]	@ (800194c <main+0xe4>)
 80018ac:	f7ff fcd6 	bl	800125c <configureGCONF>
    TMC2209_SetSpreadCycle(&motors[0], 1);
 80018b0:	2101      	movs	r1, #1
 80018b2:	4826      	ldr	r0, [pc, #152]	@ (800194c <main+0xe4>)
 80018b4:	f7ff fb22 	bl	8000efc <TMC2209_SetSpreadCycle>
    //TMC2209_read_ifcnt(&motors[0]);
    //TMC2209_EnableDriver(&motors[0], 1);
    HAL_Delay(2);
 80018b8:	2002      	movs	r0, #2
 80018ba:	f001 f879 	bl	80029b0 <HAL_Delay>
    //TMC2209_configureSpreadCycle(&motors[0], 5, 2, 10, 13);

   TMC2209_read_ifcnt(&motors[0]);
 80018be:	4823      	ldr	r0, [pc, #140]	@ (800194c <main+0xe4>)
 80018c0:	f7ff fb6e 	bl	8000fa0 <TMC2209_read_ifcnt>
    HAL_Delay(2);
 80018c4:	2002      	movs	r0, #2
 80018c6:	f001 f873 	bl	80029b0 <HAL_Delay>
    setMicrosteppingResolution(&motors[0], 8);
 80018ca:	2108      	movs	r1, #8
 80018cc:	481f      	ldr	r0, [pc, #124]	@ (800194c <main+0xe4>)
 80018ce:	f7ff fb93 	bl	8000ff8 <setMicrosteppingResolution>
    HAL_Delay(2);
 80018d2:	2002      	movs	r0, #2
 80018d4:	f001 f86c 	bl	80029b0 <HAL_Delay>

    checkMicrosteppingResolution(&motors[0]);
 80018d8:	481c      	ldr	r0, [pc, #112]	@ (800194c <main+0xe4>)
 80018da:	f7ff fc57 	bl	800118c <checkMicrosteppingResolution>
    HAL_Delay(2);
 80018de:	2002      	movs	r0, #2
 80018e0:	f001 f866 	bl	80029b0 <HAL_Delay>
  //  TMC2209_SetSpreadCycle(&motors[0], 1);
   // HAL_Delay(2);
   // TMC2209_setStallGuardThreshold(&motors[0], 10);
    HAL_Delay(2);
 80018e4:	2002      	movs	r0, #2
 80018e6:	f001 f863 	bl	80029b0 <HAL_Delay>
    TMC2209_SetDirection(&motors[0], dir);
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <main+0xe8>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	4816      	ldr	r0, [pc, #88]	@ (800194c <main+0xe4>)
 80018f2:	f7ff f85d 	bl	80009b0 <TMC2209_SetDirection>
    TMC2209_SetSpeed(&motors[0], 2500);
 80018f6:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 80018fa:	4814      	ldr	r0, [pc, #80]	@ (800194c <main+0xe4>)
 80018fc:	f7ff f87c 	bl	80009f8 <TMC2209_SetSpeed>
  //  testIHOLDIRUN(&motors[0], 31, 16, 8);
  //  HAL_Delay(2);



   LCD_I2C_Clear(&hlcd3);
 8001900:	4814      	ldr	r0, [pc, #80]	@ (8001954 <main+0xec>)
 8001902:	f7fe ff67 	bl	80007d4 <LCD_I2C_Clear>
   LCD_I2C_Init(&hlcd3);
 8001906:	4813      	ldr	r0, [pc, #76]	@ (8001954 <main+0xec>)
 8001908:	f7fe fee6 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_SetCursor(&hlcd3, 3, 3);
 800190c:	2203      	movs	r2, #3
 800190e:	2103      	movs	r1, #3
 8001910:	4810      	ldr	r0, [pc, #64]	@ (8001954 <main+0xec>)
 8001912:	f7fe ff45 	bl	80007a0 <LCD_I2C_SetCursor>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,1);
 8001916:	2101      	movs	r1, #1
 8001918:	480e      	ldr	r0, [pc, #56]	@ (8001954 <main+0xec>)
 800191a:	f7fe ff8d 	bl	8000838 <LCD_I2C_DisplaySequentialGlossyText>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){

      if (Flag) // Adjust based on button state
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <main+0xf0>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0fa      	beq.n	800191e <main+0xb6>
      {
    	         HAL_Delay(200);
 8001928:	20c8      	movs	r0, #200	@ 0xc8
 800192a:	f001 f841 	bl	80029b0 <HAL_Delay>

    	         TMC2209_Step(&motors[0], 100000);
 800192e:	490b      	ldr	r1, [pc, #44]	@ (800195c <main+0xf4>)
 8001930:	4806      	ldr	r0, [pc, #24]	@ (800194c <main+0xe4>)
 8001932:	f7ff f90c 	bl	8000b4e <TMC2209_Step>
    	         HAL_Delay(2000);
 8001936:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800193a:	f001 f839 	bl	80029b0 <HAL_Delay>

    	  	  	 Flag = 0;
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <main+0xf0>)
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
      if (Flag) // Adjust based on button state
 8001944:	e7eb      	b.n	800191e <main+0xb6>
 8001946:	bf00      	nop
 8001948:	20000000 	.word	0x20000000
 800194c:	2000020c 	.word	0x2000020c
 8001950:	2000002c 	.word	0x2000002c
 8001954:	20000018 	.word	0x20000018
 8001958:	20000afc 	.word	0x20000afc
 800195c:	000186a0 	.word	0x000186a0

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 0320 	add.w	r3, r7, #32
 800196a:	2230      	movs	r2, #48	@ 0x30
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f007 f976 	bl	8008c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001984:	f003 f820 	bl	80049c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001988:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <SystemClock_Config+0xd4>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	4a29      	ldr	r2, [pc, #164]	@ (8001a34 <SystemClock_Config+0xd4>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	@ 0x40
 8001994:	4b27      	ldr	r3, [pc, #156]	@ (8001a34 <SystemClock_Config+0xd4>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	4b25      	ldr	r3, [pc, #148]	@ (8001a38 <SystemClock_Config+0xd8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a24      	ldr	r2, [pc, #144]	@ (8001a38 <SystemClock_Config+0xd8>)
 80019a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b22      	ldr	r3, [pc, #136]	@ (8001a38 <SystemClock_Config+0xd8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019b8:	2301      	movs	r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80019c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c2:	2302      	movs	r3, #2
 80019c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019cc:	2304      	movs	r3, #4
 80019ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019d0:	23d8      	movs	r3, #216	@ 0xd8
 80019d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80019d8:	2309      	movs	r3, #9
 80019da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 f851 	bl	8004a88 <HAL_RCC_OscConfig>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80019ec:	f000 fb54 	bl	8002098 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019f0:	f002 fffa 	bl	80049e8 <HAL_PWREx_EnableOverDrive>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80019fa:	f000 fb4d 	bl	8002098 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fe:	230f      	movs	r3, #15
 8001a00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a02:	2302      	movs	r3, #2
 8001a04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a0a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	2107      	movs	r1, #7
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fad7 	bl	8004fd0 <HAL_RCC_ClockConfig>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001a28:	f000 fb36 	bl	8002098 <Error_Handler>
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	3750      	adds	r7, #80	@ 0x50
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40007000 	.word	0x40007000

08001a3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a42:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <MX_ETH_Init+0x88>)
 8001a44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a46:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a54:	22e1      	movs	r2, #225	@ 0xe1
 8001a56:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a64:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <MX_ETH_Init+0x8c>)
 8001a6e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a70:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001a76:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <MX_ETH_Init+0x90>)
 8001a7c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a80:	4a13      	ldr	r2, [pc, #76]	@ (8001ad0 <MX_ETH_Init+0x94>)
 8001a82:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a86:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001a8a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001a8c:	480c      	ldr	r0, [pc, #48]	@ (8001ac0 <MX_ETH_Init+0x84>)
 8001a8e:	f001 fccf 	bl	8003430 <HAL_ETH_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001a98:	f000 fafe 	bl	8002098 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001a9c:	2238      	movs	r2, #56	@ 0x38
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480c      	ldr	r0, [pc, #48]	@ (8001ad4 <MX_ETH_Init+0x98>)
 8001aa2:	f007 f8dd 	bl	8008c60 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <MX_ETH_Init+0x98>)
 8001aa8:	2221      	movs	r2, #33	@ 0x21
 8001aaa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001aac:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <MX_ETH_Init+0x98>)
 8001aae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001ab2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <MX_ETH_Init+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200002c4 	.word	0x200002c4
 8001ac4:	40028000 	.word	0x40028000
 8001ac8:	20000b00 	.word	0x20000b00
 8001acc:	2000012c 	.word	0x2000012c
 8001ad0:	2000008c 	.word	0x2000008c
 8001ad4:	2000028c 	.word	0x2000028c

08001ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ade:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <MX_I2C1_Init+0x78>)
 8001ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b54 <MX_I2C1_Init+0x7c>)
 8001ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aee:	4b17      	ldr	r3, [pc, #92]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001afa:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b00:	4b12      	ldr	r3, [pc, #72]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b12:	480e      	ldr	r0, [pc, #56]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b14:	f002 f9b8 	bl	8003e88 <HAL_I2C_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b1e:	f000 fabb 	bl	8002098 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4809      	ldr	r0, [pc, #36]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b26:	f002 fd7d 	bl	8004624 <HAL_I2CEx_ConfigAnalogFilter>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b30:	f000 fab2 	bl	8002098 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_I2C1_Init+0x74>)
 8001b38:	f002 fdbf 	bl	80046ba <HAL_I2CEx_ConfigDigitalFilter>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b42:	f000 faa9 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000374 	.word	0x20000374
 8001b50:	40005400 	.word	0x40005400
 8001b54:	6000030d 	.word	0x6000030d

08001b58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	2200      	movs	r2, #0
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	605a      	str	r2, [r3, #4]
 8001b68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	615a      	str	r2, [r3, #20]
 8001b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001b7e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001b86:	22d7      	movs	r2, #215	@ 0xd7
 8001b88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001b92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ba4:	4818      	ldr	r0, [pc, #96]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001ba6:	f004 f918 	bl	8005dda <HAL_TIM_PWM_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001bb0:	f000 fa72 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bbc:	f107 031c 	add.w	r3, r7, #28
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4811      	ldr	r0, [pc, #68]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001bc4:	f005 fa1e 	bl	8007004 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001bce:	f000 fa63 	bl	8002098 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	@ 0x60
 8001bd4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001bd6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001bda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be4:	463b      	mov	r3, r7
 8001be6:	2208      	movs	r2, #8
 8001be8:	4619      	mov	r1, r3
 8001bea:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001bec:	f004 fd9e 	bl	800672c <HAL_TIM_PWM_ConfigChannel>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001bf6:	f000 fa4f 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bfa:	4803      	ldr	r0, [pc, #12]	@ (8001c08 <MX_TIM2_Init+0xb0>)
 8001bfc:	f000 fc1e 	bl	800243c <HAL_TIM_MspPostInit>

}
 8001c00:	bf00      	nop
 8001c02:	3728      	adds	r7, #40	@ 0x28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200003c8 	.word	0x200003c8

08001c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	@ 0x30
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c12:	f107 030c 	add.w	r3, r7, #12
 8001c16:	2224      	movs	r2, #36	@ 0x24
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f007 f820 	bl	8008c60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	463b      	mov	r3, r7
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c2c:	4a21      	ldr	r2, [pc, #132]	@ (8001cb4 <MX_TIM4_Init+0xa8>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c30:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8001c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c3e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001c42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c4a:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c50:	2303      	movs	r3, #3
 8001c52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001c60:	230f      	movs	r3, #15
 8001c62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c64:	2300      	movs	r3, #0
 8001c66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001c70:	230f      	movs	r3, #15
 8001c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4619      	mov	r1, r3
 8001c7a:	480d      	ldr	r0, [pc, #52]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c7c:	f004 fb1a 	bl	80062b4 <HAL_TIM_Encoder_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c86:	f000 fa07 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c92:	463b      	mov	r3, r7
 8001c94:	4619      	mov	r1, r3
 8001c96:	4806      	ldr	r0, [pc, #24]	@ (8001cb0 <MX_TIM4_Init+0xa4>)
 8001c98:	f005 f9b4 	bl	8007004 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001ca2:	f000 f9f9 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3730      	adds	r7, #48	@ 0x30
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000414 	.word	0x20000414
 8001cb4:	40000800 	.word	0x40000800

08001cb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001cca:	4a15      	ldr	r2, [pc, #84]	@ (8001d20 <MX_TIM7_Init+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8001cce:	4b13      	ldr	r3, [pc, #76]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001cd0:	22d7      	movs	r2, #215	@ 0xd7
 8001cd2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cda:	4b10      	ldr	r3, [pc, #64]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001cdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ce8:	480c      	ldr	r0, [pc, #48]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001cea:	f003 ff87 	bl	8005bfc <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cf4:	f000 f9d0 	bl	8002098 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_TIM7_Init+0x64>)
 8001d06:	f005 f97d 	bl	8007004 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f000 f9c2 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000460 	.word	0x20000460
 8001d20:	40001400 	.word	0x40001400

08001d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d2a:	4a15      	ldr	r2, [pc, #84]	@ (8001d80 <MX_USART2_UART_Init+0x5c>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b11      	ldr	r3, [pc, #68]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b09      	ldr	r3, [pc, #36]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d60:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	@ (8001d7c <MX_USART2_UART_Init+0x58>)
 8001d68:	f005 f9f8 	bl	800715c <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d72:	f000 f991 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	200004ac 	.word	0x200004ac
 8001d80:	40004400 	.word	0x40004400

08001d84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d88:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d8a:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <MX_USART3_UART_Init+0x5c>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <MX_USART3_UART_Init+0x58>)
 8001dc8:	f005 f9c8 	bl	800715c <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001dd2:	f000 f961 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000534 	.word	0x20000534
 8001de0:	40004800 	.word	0x40004800

08001de4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001dee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df2:	2206      	movs	r2, #6
 8001df4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001df8:	2202      	movs	r2, #2
 8001dfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e04:	2202      	movs	r2, #2
 8001e06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e08:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e28:	f002 fc93 	bl	8004752 <HAL_PCD_Init>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e32:	f000 f931 	bl	8002098 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	2000061c 	.word	0x2000061c

08001e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <MX_DMA_Init+0x38>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <MX_DMA_Init+0x38>)
 8001e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_DMA_Init+0x38>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	2010      	movs	r0, #16
 8001e64:	f000 fea3 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e68:	2010      	movs	r0, #16
 8001e6a:	f000 febc 	bl	8002be6 <HAL_NVIC_EnableIRQ>

}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	@ 0x30
 8001e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e92:	4b7a      	ldr	r3, [pc, #488]	@ (800207c <MX_GPIO_Init+0x200>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a79      	ldr	r2, [pc, #484]	@ (800207c <MX_GPIO_Init+0x200>)
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b77      	ldr	r3, [pc, #476]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eaa:	4b74      	ldr	r3, [pc, #464]	@ (800207c <MX_GPIO_Init+0x200>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a73      	ldr	r2, [pc, #460]	@ (800207c <MX_GPIO_Init+0x200>)
 8001eb0:	f043 0320 	orr.w	r3, r3, #32
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b71      	ldr	r3, [pc, #452]	@ (800207c <MX_GPIO_Init+0x200>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0320 	and.w	r3, r3, #32
 8001ebe:	617b      	str	r3, [r7, #20]
 8001ec0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a6d      	ldr	r2, [pc, #436]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b6b      	ldr	r3, [pc, #428]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	4b68      	ldr	r3, [pc, #416]	@ (800207c <MX_GPIO_Init+0x200>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a67      	ldr	r2, [pc, #412]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b65      	ldr	r3, [pc, #404]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef2:	4b62      	ldr	r3, [pc, #392]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	4a61      	ldr	r2, [pc, #388]	@ (800207c <MX_GPIO_Init+0x200>)
 8001ef8:	f043 0302 	orr.w	r3, r3, #2
 8001efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efe:	4b5f      	ldr	r3, [pc, #380]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a5b      	ldr	r2, [pc, #364]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f10:	f043 0308 	orr.w	r3, r3, #8
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b59      	ldr	r3, [pc, #356]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f22:	4b56      	ldr	r3, [pc, #344]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	4a55      	ldr	r2, [pc, #340]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2e:	4b53      	ldr	r3, [pc, #332]	@ (800207c <MX_GPIO_Init+0x200>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f40:	484f      	ldr	r0, [pc, #316]	@ (8002080 <MX_GPIO_Init+0x204>)
 8001f42:	f001 ff6f 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|GPIO_PIN_4
 8001f46:	2200      	movs	r2, #0
 8001f48:	f644 0191 	movw	r1, #18577	@ 0x4891
 8001f4c:	484d      	ldr	r0, [pc, #308]	@ (8002084 <MX_GPIO_Init+0x208>)
 8001f4e:	f001 ff69 	bl	8003e24 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2140      	movs	r1, #64	@ 0x40
 8001f56:	484c      	ldr	r0, [pc, #304]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8001f58:	f001 ff64 	bl	8003e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f62:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001f66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 031c 	add.w	r3, r7, #28
 8001f70:	4619      	mov	r1, r3
 8001f72:	4846      	ldr	r0, [pc, #280]	@ (800208c <MX_GPIO_Init+0x210>)
 8001f74:	f001 fdaa 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f78:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f8a:	f107 031c 	add.w	r3, r7, #28
 8001f8e:	4619      	mov	r1, r3
 8001f90:	483b      	ldr	r0, [pc, #236]	@ (8002080 <MX_GPIO_Init+0x204>)
 8001f92:	f001 fd9b 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f96:	2308      	movs	r3, #8
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4839      	ldr	r0, [pc, #228]	@ (8002090 <MX_GPIO_Init+0x214>)
 8001faa:	f001 fd8f 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4833      	ldr	r0, [pc, #204]	@ (8002090 <MX_GPIO_Init+0x214>)
 8001fc2:	f001 fd83 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin PB11 LD3_Pin PB4
                           LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|GPIO_PIN_4
 8001fc6:	f644 0391 	movw	r3, #18577	@ 0x4891
 8001fca:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4829      	ldr	r0, [pc, #164]	@ (8002084 <MX_GPIO_Init+0x208>)
 8001fe0:	f001 fd74 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001fe4:	230e      	movs	r3, #14
 8001fe6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4823      	ldr	r0, [pc, #140]	@ (8002084 <MX_GPIO_Init+0x208>)
 8001ff8:	f001 fd68 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800200a:	f107 031c 	add.w	r3, r7, #28
 800200e:	4619      	mov	r1, r3
 8002010:	481b      	ldr	r0, [pc, #108]	@ (8002080 <MX_GPIO_Init+0x204>)
 8002012:	f001 fd5b 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8002016:	2340      	movs	r3, #64	@ 0x40
 8002018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4816      	ldr	r0, [pc, #88]	@ (8002088 <MX_GPIO_Init+0x20c>)
 800202e:	f001 fd4d 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002032:	2380      	movs	r3, #128	@ 0x80
 8002034:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4810      	ldr	r0, [pc, #64]	@ (8002088 <MX_GPIO_Init+0x20c>)
 8002046:	f001 fd41 	bl	8003acc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800204a:	2302      	movs	r3, #2
 800204c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800204e:	2300      	movs	r3, #0
 8002050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002056:	f107 031c 	add.w	r3, r7, #28
 800205a:	4619      	mov	r1, r3
 800205c:	480d      	ldr	r0, [pc, #52]	@ (8002094 <MX_GPIO_Init+0x218>)
 800205e:	f001 fd35 	bl	8003acc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002062:	2200      	movs	r2, #0
 8002064:	2100      	movs	r1, #0
 8002066:	2028      	movs	r0, #40	@ 0x28
 8002068:	f000 fda1 	bl	8002bae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800206c:	2028      	movs	r0, #40	@ 0x28
 800206e:	f000 fdba 	bl	8002be6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002072:	bf00      	nop
 8002074:	3730      	adds	r7, #48	@ 0x30
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40021400 	.word	0x40021400
 8002084:	40020400 	.word	0x40020400
 8002088:	40021800 	.word	0x40021800
 800208c:	40020800 	.word	0x40020800
 8002090:	40020000 	.word	0x40020000
 8002094:	40020c00 	.word	0x40020c00

08002098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800209c:	b672      	cpsid	i
}
 800209e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <Error_Handler+0x8>

080020a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020aa:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_MspInit+0x44>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_MspInit+0x44>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	4a08      	ldr	r2, [pc, #32]	@ (80020e8 <HAL_MspInit+0x44>)
 80020c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ce:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <HAL_MspInit+0x44>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800

080020ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08e      	sub	sp, #56	@ 0x38
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a4e      	ldr	r2, [pc, #312]	@ (8002244 <HAL_ETH_MspInit+0x158>)
 800210a:	4293      	cmp	r3, r2
 800210c:	f040 8096 	bne.w	800223c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002110:	4b4d      	ldr	r3, [pc, #308]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002114:	4a4c      	ldr	r2, [pc, #304]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002116:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800211a:	6313      	str	r3, [r2, #48]	@ 0x30
 800211c:	4b4a      	ldr	r3, [pc, #296]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212c:	4a46      	ldr	r2, [pc, #280]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800212e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002132:	6313      	str	r3, [r2, #48]	@ 0x30
 8002134:	4b44      	ldr	r3, [pc, #272]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4b41      	ldr	r3, [pc, #260]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	4a40      	ldr	r2, [pc, #256]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002146:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800214a:	6313      	str	r3, [r2, #48]	@ 0x30
 800214c:	4b3e      	ldr	r3, [pc, #248]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	4b3b      	ldr	r3, [pc, #236]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215c:	4a3a      	ldr	r2, [pc, #232]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	6313      	str	r3, [r2, #48]	@ 0x30
 8002164:	4b38      	ldr	r3, [pc, #224]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b35      	ldr	r3, [pc, #212]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	4a34      	ldr	r2, [pc, #208]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6313      	str	r3, [r2, #48]	@ 0x30
 800217c:	4b32      	ldr	r3, [pc, #200]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002188:	4b2f      	ldr	r3, [pc, #188]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800218a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218c:	4a2e      	ldr	r2, [pc, #184]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6313      	str	r3, [r2, #48]	@ 0x30
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 8002196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80021a0:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 80021a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a4:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 80021a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ac:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <HAL_ETH_MspInit+0x15c>)
 80021ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80021b8:	2332      	movs	r3, #50	@ 0x32
 80021ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c4:	2303      	movs	r3, #3
 80021c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021c8:	230b      	movs	r3, #11
 80021ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021d0:	4619      	mov	r1, r3
 80021d2:	481e      	ldr	r0, [pc, #120]	@ (800224c <HAL_ETH_MspInit+0x160>)
 80021d4:	f001 fc7a 	bl	8003acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80021d8:	2386      	movs	r3, #134	@ 0x86
 80021da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021e8:	230b      	movs	r3, #11
 80021ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021f0:	4619      	mov	r1, r3
 80021f2:	4817      	ldr	r0, [pc, #92]	@ (8002250 <HAL_ETH_MspInit+0x164>)
 80021f4:	f001 fc6a 	bl	8003acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002206:	2303      	movs	r3, #3
 8002208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800220a:	230b      	movs	r3, #11
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800220e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002212:	4619      	mov	r1, r3
 8002214:	480f      	ldr	r0, [pc, #60]	@ (8002254 <HAL_ETH_MspInit+0x168>)
 8002216:	f001 fc59 	bl	8003acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800221a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800221e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002228:	2303      	movs	r3, #3
 800222a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800222c:	230b      	movs	r3, #11
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002234:	4619      	mov	r1, r3
 8002236:	4808      	ldr	r0, [pc, #32]	@ (8002258 <HAL_ETH_MspInit+0x16c>)
 8002238:	f001 fc48 	bl	8003acc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 800223c:	bf00      	nop
 800223e:	3738      	adds	r7, #56	@ 0x38
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40028000 	.word	0x40028000
 8002248:	40023800 	.word	0x40023800
 800224c:	40020800 	.word	0x40020800
 8002250:	40020000 	.word	0x40020000
 8002254:	40020400 	.word	0x40020400
 8002258:	40021800 	.word	0x40021800

0800225c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0aa      	sub	sp, #168	@ 0xa8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	2284      	movs	r2, #132	@ 0x84
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f006 fcef 	bl	8008c60 <memset>
  if(hi2c->Instance==I2C1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a22      	ldr	r2, [pc, #136]	@ (8002310 <HAL_I2C_MspInit+0xb4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d13c      	bne.n	8002306 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800228c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002290:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002292:	2300      	movs	r3, #0
 8002294:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002296:	f107 0310 	add.w	r3, r7, #16
 800229a:	4618      	mov	r0, r3
 800229c:	f003 f8be 	bl	800541c <HAL_RCCEx_PeriphCLKConfig>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022a6:	f7ff fef7 	bl	8002098 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d6:	2303      	movs	r3, #3
 80022d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022dc:	2304      	movs	r3, #4
 80022de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022e6:	4619      	mov	r1, r3
 80022e8:	480b      	ldr	r0, [pc, #44]	@ (8002318 <HAL_I2C_MspInit+0xbc>)
 80022ea:	f001 fbef 	bl	8003acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f2:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80022f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_I2C_MspInit+0xb8>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002306:	bf00      	nop
 8002308:	37a8      	adds	r7, #168	@ 0xa8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40005400 	.word	0x40005400
 8002314:	40023800 	.word	0x40023800
 8002318:	40020400 	.word	0x40020400

0800231c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232c:	d113      	bne.n	8002356 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_TIM_PWM_MspInit+0x44>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a0b      	ldr	r2, [pc, #44]	@ (8002360 <HAL_TIM_PWM_MspInit+0x44>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b09      	ldr	r3, [pc, #36]	@ (8002360 <HAL_TIM_PWM_MspInit+0x44>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201c      	movs	r0, #28
 800234c:	f000 fc2f 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002350:	201c      	movs	r0, #28
 8002352:	f000 fc48 	bl	8002be6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800

08002364 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	@ 0x28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	60da      	str	r2, [r3, #12]
 800237a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d130      	bne.n	80023e8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002386:	4b1b      	ldr	r3, [pc, #108]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a1a      	ldr	r2, [pc, #104]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b18      	ldr	r3, [pc, #96]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80023a4:	f043 0308 	orr.w	r3, r3, #8
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x90>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 80023b6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023c8:	2302      	movs	r3, #2
 80023ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <HAL_TIM_Encoder_MspInit+0x94>)
 80023d4:	f001 fb7a 	bl	8003acc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80023d8:	2200      	movs	r2, #0
 80023da:	2100      	movs	r1, #0
 80023dc:	201e      	movs	r0, #30
 80023de:	f000 fbe6 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80023e2:	201e      	movs	r0, #30
 80023e4:	f000 fbff 	bl	8002be6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80023e8:	bf00      	nop
 80023ea:	3728      	adds	r7, #40	@ 0x28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40000800 	.word	0x40000800
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020c00 	.word	0x40020c00

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0a      	ldr	r2, [pc, #40]	@ (8002434 <HAL_TIM_Base_MspInit+0x38>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10b      	bne.n	8002426 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	4a09      	ldr	r2, [pc, #36]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 8002414:	f043 0320 	orr.w	r3, r3, #32
 8002418:	6413      	str	r3, [r2, #64]	@ 0x40
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_TIM_Base_MspInit+0x3c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 0320 	and.w	r3, r3, #32
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40001400 	.word	0x40001400
 8002438:	40023800 	.word	0x40023800

0800243c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b088      	sub	sp, #32
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 030c 	add.w	r3, r7, #12
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245c:	d11c      	bne.n	8002498 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	4b10      	ldr	r3, [pc, #64]	@ (80024a0 <HAL_TIM_MspPostInit+0x64>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a0f      	ldr	r2, [pc, #60]	@ (80024a0 <HAL_TIM_MspPostInit+0x64>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_TIM_MspPostInit+0x64>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002488:	2301      	movs	r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	4804      	ldr	r0, [pc, #16]	@ (80024a4 <HAL_TIM_MspPostInit+0x68>)
 8002494:	f001 fb1a 	bl	8003acc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40020400 	.word	0x40020400

080024a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b0ac      	sub	sp, #176	@ 0xb0
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024c0:	f107 0318 	add.w	r3, r7, #24
 80024c4:	2284      	movs	r2, #132	@ 0x84
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f006 fbc9 	bl	8008c60 <memset>
  if(huart->Instance==USART2)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5d      	ldr	r2, [pc, #372]	@ (8002648 <HAL_UART_MspInit+0x1a0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d171      	bne.n	80025bc <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024d8:	2380      	movs	r3, #128	@ 0x80
 80024da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024dc:	2300      	movs	r3, #0
 80024de:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e0:	f107 0318 	add.w	r3, r7, #24
 80024e4:	4618      	mov	r0, r3
 80024e6:	f002 ff99 	bl	800541c <HAL_RCCEx_PeriphCLKConfig>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024f0:	f7ff fdd2 	bl	8002098 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f4:	4b55      	ldr	r3, [pc, #340]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f8:	4a54      	ldr	r2, [pc, #336]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002500:	4b52      	ldr	r3, [pc, #328]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800250c:	4b4f      	ldr	r3, [pc, #316]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002510:	4a4e      	ldr	r2, [pc, #312]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6313      	str	r3, [r2, #48]	@ 0x30
 8002518:	4b4c      	ldr	r3, [pc, #304]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002524:	2360      	movs	r3, #96	@ 0x60
 8002526:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002536:	2303      	movs	r3, #3
 8002538:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800253c:	2307      	movs	r3, #7
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002542:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002546:	4619      	mov	r1, r3
 8002548:	4841      	ldr	r0, [pc, #260]	@ (8002650 <HAL_UART_MspInit+0x1a8>)
 800254a:	f001 fabf 	bl	8003acc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800254e:	4b41      	ldr	r3, [pc, #260]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002550:	4a41      	ldr	r2, [pc, #260]	@ (8002658 <HAL_UART_MspInit+0x1b0>)
 8002552:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002554:	4b3f      	ldr	r3, [pc, #252]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002556:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800255a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800255c:	4b3d      	ldr	r3, [pc, #244]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 800255e:	2200      	movs	r2, #0
 8002560:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002562:	4b3c      	ldr	r3, [pc, #240]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002564:	2200      	movs	r2, #0
 8002566:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 800256a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800256e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002572:	2200      	movs	r2, #0
 8002574:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002576:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800257c:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002582:	4b34      	ldr	r3, [pc, #208]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002584:	2200      	movs	r2, #0
 8002586:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002588:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 800258a:	2200      	movs	r2, #0
 800258c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800258e:	4831      	ldr	r0, [pc, #196]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 8002590:	f000 fb44 	bl	8002c1c <HAL_DMA_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 800259a:	f7ff fd7d 	bl	8002098 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 80025a2:	675a      	str	r2, [r3, #116]	@ 0x74
 80025a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002654 <HAL_UART_MspInit+0x1ac>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2026      	movs	r0, #38	@ 0x26
 80025b0:	f000 fafd 	bl	8002bae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025b4:	2026      	movs	r0, #38	@ 0x26
 80025b6:	f000 fb16 	bl	8002be6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025ba:	e041      	b.n	8002640 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a26      	ldr	r2, [pc, #152]	@ (800265c <HAL_UART_MspInit+0x1b4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13c      	bne.n	8002640 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 ff21 	bl	800541c <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 80025e0:	f7ff fd5a 	bl	8002098 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80025f0:	4b16      	ldr	r3, [pc, #88]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fc:	4b13      	ldr	r3, [pc, #76]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002600:	4a12      	ldr	r2, [pc, #72]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6313      	str	r3, [r2, #48]	@ 0x30
 8002608:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_UART_MspInit+0x1a4>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002614:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002618:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002622:	2301      	movs	r3, #1
 8002624:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800262e:	2307      	movs	r3, #7
 8002630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002634:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002638:	4619      	mov	r1, r3
 800263a:	4805      	ldr	r0, [pc, #20]	@ (8002650 <HAL_UART_MspInit+0x1a8>)
 800263c:	f001 fa46 	bl	8003acc <HAL_GPIO_Init>
}
 8002640:	bf00      	nop
 8002642:	37b0      	adds	r7, #176	@ 0xb0
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40004400 	.word	0x40004400
 800264c:	40023800 	.word	0x40023800
 8002650:	40020c00 	.word	0x40020c00
 8002654:	200005bc 	.word	0x200005bc
 8002658:	40026088 	.word	0x40026088
 800265c:	40004800 	.word	0x40004800

08002660 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0ac      	sub	sp, #176	@ 0xb0
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	2284      	movs	r2, #132	@ 0x84
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f006 faed 	bl	8008c60 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800268e:	d159      	bne.n	8002744 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002690:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002694:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002696:	2300      	movs	r3, #0
 8002698:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f002 febb 	bl	800541c <HAL_RCCEx_PeriphCLKConfig>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80026ac:	f7ff fcf4 	bl	8002098 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b0:	4b26      	ldr	r3, [pc, #152]	@ (800274c <HAL_PCD_MspInit+0xec>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	4a25      	ldr	r2, [pc, #148]	@ (800274c <HAL_PCD_MspInit+0xec>)
 80026b6:	f043 0301 	orr.w	r3, r3, #1
 80026ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80026bc:	4b23      	ldr	r3, [pc, #140]	@ (800274c <HAL_PCD_MspInit+0xec>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80026c8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80026cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026dc:	2303      	movs	r3, #3
 80026de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80026e2:	230a      	movs	r3, #10
 80026e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80026ec:	4619      	mov	r1, r3
 80026ee:	4818      	ldr	r0, [pc, #96]	@ (8002750 <HAL_PCD_MspInit+0xf0>)
 80026f0:	f001 f9ec 	bl	8003acc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80026f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002708:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800270c:	4619      	mov	r1, r3
 800270e:	4810      	ldr	r0, [pc, #64]	@ (8002750 <HAL_PCD_MspInit+0xf0>)
 8002710:	f001 f9dc 	bl	8003acc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_PCD_MspInit+0xec>)
 8002716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002718:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <HAL_PCD_MspInit+0xec>)
 800271a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800271e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <HAL_PCD_MspInit+0xec>)
 8002722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4b07      	ldr	r3, [pc, #28]	@ (800274c <HAL_PCD_MspInit+0xec>)
 800272e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002730:	4a06      	ldr	r2, [pc, #24]	@ (800274c <HAL_PCD_MspInit+0xec>)
 8002732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002736:	6453      	str	r3, [r2, #68]	@ 0x44
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <HAL_PCD_MspInit+0xec>)
 800273a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002744:	bf00      	nop
 8002746:	37b0      	adds	r7, #176	@ 0xb0
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40023800 	.word	0x40023800
 8002750:	40020000 	.word	0x40020000

08002754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <NMI_Handler+0x4>

0800275c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <HardFault_Handler+0x4>

08002764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <MemManage_Handler+0x4>

0800276c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <BusFault_Handler+0x4>

08002774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <UsageFault_Handler+0x4>

0800277c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800279c:	bf00      	nop
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027aa:	f000 f8e1 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027b8:	4802      	ldr	r0, [pc, #8]	@ (80027c4 <DMA1_Stream5_IRQHandler+0x10>)
 80027ba:	f000 fbcf 	bl	8002f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200005bc 	.word	0x200005bc

080027c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027cc:	4802      	ldr	r0, [pc, #8]	@ (80027d8 <TIM2_IRQHandler+0x10>)
 80027ce:	f003 fea5 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200003c8 	.word	0x200003c8

080027dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80027e0:	4802      	ldr	r0, [pc, #8]	@ (80027ec <TIM4_IRQHandler+0x10>)
 80027e2:	f003 fe9b 	bl	800651c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20000414 	.word	0x20000414

080027f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80027f4:	4802      	ldr	r0, [pc, #8]	@ (8002800 <USART2_IRQHandler+0x10>)
 80027f6:	f004 fdcd 	bl	8007394 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	200004ac 	.word	0x200004ac

08002804 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8002808:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800280c:	f001 fb24 	bl	8003e58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800281c:	4a14      	ldr	r2, [pc, #80]	@ (8002870 <_sbrk+0x5c>)
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <_sbrk+0x60>)
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002828:	4b13      	ldr	r3, [pc, #76]	@ (8002878 <_sbrk+0x64>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d102      	bne.n	8002836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <_sbrk+0x64>)
 8002832:	4a12      	ldr	r2, [pc, #72]	@ (800287c <_sbrk+0x68>)
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002836:	4b10      	ldr	r3, [pc, #64]	@ (8002878 <_sbrk+0x64>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002844:	f006 fa14 	bl	8008c70 <__errno>
 8002848:	4603      	mov	r3, r0
 800284a:	220c      	movs	r2, #12
 800284c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800284e:	f04f 33ff 	mov.w	r3, #4294967295
 8002852:	e009      	b.n	8002868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <_sbrk+0x64>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <_sbrk+0x64>)
 8002864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20050000 	.word	0x20050000
 8002874:	00000400 	.word	0x00000400
 8002878:	20000b08 	.word	0x20000b08
 800287c:	20000c58 	.word	0x20000c58

08002880 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002884:	4b06      	ldr	r3, [pc, #24]	@ (80028a0 <SystemInit+0x20>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288a:	4a05      	ldr	r2, [pc, #20]	@ (80028a0 <SystemInit+0x20>)
 800288c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002890:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028a8:	f7ff ffea 	bl	8002880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028ac:	480c      	ldr	r0, [pc, #48]	@ (80028e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ae:	490d      	ldr	r1, [pc, #52]	@ (80028e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028b0:	4a0d      	ldr	r2, [pc, #52]	@ (80028e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b4:	e002      	b.n	80028bc <LoopCopyDataInit>

080028b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ba:	3304      	adds	r3, #4

080028bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c0:	d3f9      	bcc.n	80028b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c2:	4a0a      	ldr	r2, [pc, #40]	@ (80028ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028c4:	4c0a      	ldr	r4, [pc, #40]	@ (80028f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c8:	e001      	b.n	80028ce <LoopFillZerobss>

080028ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028cc:	3204      	adds	r2, #4

080028ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d0:	d3fb      	bcc.n	80028ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80028d2:	f006 f9d3 	bl	8008c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028d6:	f7fe ffc7 	bl	8001868 <main>
  bx  lr    
 80028da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80028e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80028e8:	08009b40 	.word	0x08009b40
  ldr r2, =_sbss
 80028ec:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 80028f0:	20000c58 	.word	0x20000c58

080028f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028f4:	e7fe      	b.n	80028f4 <ADC_IRQHandler>

080028f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fa:	2003      	movs	r0, #3
 80028fc:	f000 f94c 	bl	8002b98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002900:	2000      	movs	r0, #0
 8002902:	f000 f805 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002906:	f7ff fbcd 	bl	80020a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	@ (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	@ (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f967 	bl	8002c02 <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f000 f92f 	bl	8002bae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	@ (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000030 	.word	0x20000030
 8002968:	20000038 	.word	0x20000038
 800296c:	20000034 	.word	0x20000034

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	@ (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000038 	.word	0x20000038
 8002994:	20000b0c 	.word	0x20000b0c

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	@ (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000b0c 	.word	0x20000b0c

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000038 	.word	0x20000038

080029f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a14:	4013      	ands	r3, r2
 8002a16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a20:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <__NVIC_SetPriorityGrouping+0x44>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a26:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <__NVIC_SetPriorityGrouping+0x40>)
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	60d3      	str	r3, [r2, #12]
}
 8002a2c:	bf00      	nop
 8002a2e:	3714      	adds	r7, #20
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00
 8002a3c:	05fa0000 	.word	0x05fa0000

08002a40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a44:	4b04      	ldr	r3, [pc, #16]	@ (8002a58 <__NVIC_GetPriorityGrouping+0x18>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	f003 0307 	and.w	r3, r3, #7
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	db0b      	blt.n	8002a86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	f003 021f 	and.w	r2, r3, #31
 8002a74:	4907      	ldr	r1, [pc, #28]	@ (8002a94 <__NVIC_EnableIRQ+0x38>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2001      	movs	r0, #1
 8002a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	e000e100 	.word	0xe000e100

08002a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	db0a      	blt.n	8002ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	490c      	ldr	r1, [pc, #48]	@ (8002ae4 <__NVIC_SetPriority+0x4c>)
 8002ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab6:	0112      	lsls	r2, r2, #4
 8002ab8:	b2d2      	uxtb	r2, r2
 8002aba:	440b      	add	r3, r1
 8002abc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac0:	e00a      	b.n	8002ad8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4908      	ldr	r1, [pc, #32]	@ (8002ae8 <__NVIC_SetPriority+0x50>)
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	f003 030f 	and.w	r3, r3, #15
 8002ace:	3b04      	subs	r3, #4
 8002ad0:	0112      	lsls	r2, r2, #4
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	761a      	strb	r2, [r3, #24]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	e000e100 	.word	0xe000e100
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b089      	sub	sp, #36	@ 0x24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	f1c3 0307 	rsb	r3, r3, #7
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	bf28      	it	cs
 8002b0a:	2304      	movcs	r3, #4
 8002b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3304      	adds	r3, #4
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d902      	bls.n	8002b1c <NVIC_EncodePriority+0x30>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3b03      	subs	r3, #3
 8002b1a:	e000      	b.n	8002b1e <NVIC_EncodePriority+0x32>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	f04f 32ff 	mov.w	r2, #4294967295
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	401a      	ands	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b34:	f04f 31ff 	mov.w	r1, #4294967295
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3e:	43d9      	mvns	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	4313      	orrs	r3, r2
         );
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3724      	adds	r7, #36	@ 0x24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b64:	d301      	bcc.n	8002b6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00f      	b.n	8002b8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002b94 <SysTick_Config+0x40>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b72:	210f      	movs	r1, #15
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f7ff ff8e 	bl	8002a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b7c:	4b05      	ldr	r3, [pc, #20]	@ (8002b94 <SysTick_Config+0x40>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b82:	4b04      	ldr	r3, [pc, #16]	@ (8002b94 <SysTick_Config+0x40>)
 8002b84:	2207      	movs	r2, #7
 8002b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	e000e010 	.word	0xe000e010

08002b98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7ff ff29 	bl	80029f8 <__NVIC_SetPriorityGrouping>
}
 8002ba6:	bf00      	nop
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
 8002bba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc0:	f7ff ff3e 	bl	8002a40 <__NVIC_GetPriorityGrouping>
 8002bc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f7ff ff8e 	bl	8002aec <NVIC_EncodePriority>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff ff5d 	bl	8002a98 <__NVIC_SetPriority>
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	4603      	mov	r3, r0
 8002bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff31 	bl	8002a5c <__NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff ffa2 	bl	8002b54 <SysTick_Config>
 8002c10:	4603      	mov	r3, r0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
	...

08002c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c28:	f7ff feb6 	bl	8002998 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e099      	b.n	8002d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c58:	e00f      	b.n	8002c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c5a:	f7ff fe9d 	bl	8002998 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d908      	bls.n	8002c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2203      	movs	r2, #3
 8002c72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e078      	b.n	8002d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e8      	bne.n	8002c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4b38      	ldr	r3, [pc, #224]	@ (8002d74 <HAL_DMA_Init+0x158>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a1b      	ldr	r3, [r3, #32]
 8002cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f023 0307 	bic.w	r3, r3, #7
 8002cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d117      	bne.n	8002d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00e      	beq.n	8002d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 fb09 	bl	8003338 <DMA_CheckFifoParam>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e016      	b.n	8002d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 fac0 	bl	80032cc <DMA_CalcBaseAndBitshift>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d54:	223f      	movs	r2, #63	@ 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	f010803f 	.word	0xf010803f

08002d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_DMA_Start_IT+0x26>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e048      	b.n	8002e30 <HAL_DMA_Start_IT+0xb8>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d137      	bne.n	8002e22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fa52 	bl	8003270 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd0:	223f      	movs	r2, #63	@ 0x3f
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0216 	orr.w	r2, r2, #22
 8002de6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002df6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0201 	orr.w	r2, r2, #1
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	e005      	b.n	8002e2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3718      	adds	r7, #24
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e46:	f7ff fda7 	bl	8002998 <HAL_GetTick>
 8002e4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d008      	beq.n	8002e6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2280      	movs	r2, #128	@ 0x80
 8002e5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e052      	b.n	8002f10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0216 	bic.w	r2, r2, #22
 8002e78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d103      	bne.n	8002e9a <HAL_DMA_Abort+0x62>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0208 	bic.w	r2, r2, #8
 8002ea8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0201 	bic.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eba:	e013      	b.n	8002ee4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ebc:	f7ff fd6c 	bl	8002998 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b05      	cmp	r3, #5
 8002ec8:	d90c      	bls.n	8002ee4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2220      	movs	r2, #32
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e015      	b.n	8002f10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e4      	bne.n	8002ebc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	223f      	movs	r2, #63	@ 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d004      	beq.n	8002f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2280      	movs	r2, #128	@ 0x80
 8002f30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00c      	b.n	8002f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2205      	movs	r2, #5
 8002f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0201 	bic.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002f68:	4b8e      	ldr	r3, [pc, #568]	@ (80031a4 <HAL_DMA_IRQHandler+0x248>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80031a8 <HAL_DMA_IRQHandler+0x24c>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f86:	2208      	movs	r2, #8
 8002f88:	409a      	lsls	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01a      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d013      	beq.n	8002fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0204 	bic.w	r2, r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	2208      	movs	r2, #8
 8002fb6:	409a      	lsls	r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fcc:	2201      	movs	r2, #1
 8002fce:	409a      	lsls	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d012      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fea:	2201      	movs	r2, #1
 8002fec:	409a      	lsls	r2, r3
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff6:	f043 0202 	orr.w	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003002:	2204      	movs	r2, #4
 8003004:	409a      	lsls	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4013      	ands	r3, r2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d012      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00b      	beq.n	8003034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003020:	2204      	movs	r2, #4
 8003022:	409a      	lsls	r2, r3
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	2210      	movs	r2, #16
 800303a:	409a      	lsls	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d043      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d03c      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003056:	2210      	movs	r2, #16
 8003058:	409a      	lsls	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d018      	beq.n	800309e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d024      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	4798      	blx	r3
 800308a:	e01f      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01b      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	4798      	blx	r3
 800309c:	e016      	b.n	80030cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d107      	bne.n	80030bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0208 	bic.w	r2, r2, #8
 80030ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d0:	2220      	movs	r2, #32
 80030d2:	409a      	lsls	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 808f 	beq.w	80031fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8087 	beq.w	80031fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f2:	2220      	movs	r2, #32
 80030f4:	409a      	lsls	r2, r3
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b05      	cmp	r3, #5
 8003104:	d136      	bne.n	8003174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0216 	bic.w	r2, r2, #22
 8003114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695a      	ldr	r2, [r3, #20]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <HAL_DMA_IRQHandler+0x1da>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	2b00      	cmp	r3, #0
 8003134:	d007      	beq.n	8003146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0208 	bic.w	r2, r2, #8
 8003144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	223f      	movs	r2, #63	@ 0x3f
 800314c:	409a      	lsls	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003166:	2b00      	cmp	r3, #0
 8003168:	d07e      	beq.n	8003268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
        }
        return;
 8003172:	e079      	b.n	8003268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d01d      	beq.n	80031be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003194:	2b00      	cmp	r3, #0
 8003196:	d031      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	4798      	blx	r3
 80031a0:	e02c      	b.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
 80031a2:	bf00      	nop
 80031a4:	20000030 	.word	0x20000030
 80031a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
 80031bc:	e01e      	b.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10f      	bne.n	80031ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0210 	bic.w	r2, r2, #16
 80031da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	2b00      	cmp	r3, #0
 8003202:	d032      	beq.n	800326a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d022      	beq.n	8003256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2205      	movs	r2, #5
 8003214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	3301      	adds	r3, #1
 800322c:	60bb      	str	r3, [r7, #8]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	d307      	bcc.n	8003244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f2      	bne.n	8003228 <HAL_DMA_IRQHandler+0x2cc>
 8003242:	e000      	b.n	8003246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
 8003266:	e000      	b.n	800326a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003268:	bf00      	nop
    }
  }
}
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800328c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b40      	cmp	r3, #64	@ 0x40
 800329c:	d108      	bne.n	80032b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68ba      	ldr	r2, [r7, #8]
 80032ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032ae:	e007      	b.n	80032c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	60da      	str	r2, [r3, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3b10      	subs	r3, #16
 80032dc:	4a13      	ldr	r2, [pc, #76]	@ (800332c <DMA_CalcBaseAndBitshift+0x60>)
 80032de:	fba2 2303 	umull	r2, r3, r2, r3
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032e6:	4a12      	ldr	r2, [pc, #72]	@ (8003330 <DMA_CalcBaseAndBitshift+0x64>)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4413      	add	r3, r2
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d908      	bls.n	800330c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <DMA_CalcBaseAndBitshift+0x68>)
 8003302:	4013      	ands	r3, r2
 8003304:	1d1a      	adds	r2, r3, #4
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	659a      	str	r2, [r3, #88]	@ 0x58
 800330a:	e006      	b.n	800331a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	461a      	mov	r2, r3
 8003312:	4b08      	ldr	r3, [pc, #32]	@ (8003334 <DMA_CalcBaseAndBitshift+0x68>)
 8003314:	4013      	ands	r3, r2
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	aaaaaaab 	.word	0xaaaaaaab
 8003330:	08009af4 	.word	0x08009af4
 8003334:	fffffc00 	.word	0xfffffc00

08003338 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003348:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11f      	bne.n	8003392 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d856      	bhi.n	8003406 <DMA_CheckFifoParam+0xce>
 8003358:	a201      	add	r2, pc, #4	@ (adr r2, 8003360 <DMA_CheckFifoParam+0x28>)
 800335a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335e:	bf00      	nop
 8003360:	08003371 	.word	0x08003371
 8003364:	08003383 	.word	0x08003383
 8003368:	08003371 	.word	0x08003371
 800336c:	08003407 	.word	0x08003407
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d046      	beq.n	800340a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003380:	e043      	b.n	800340a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003386:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800338a:	d140      	bne.n	800340e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e03d      	b.n	800340e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800339a:	d121      	bne.n	80033e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d837      	bhi.n	8003412 <DMA_CheckFifoParam+0xda>
 80033a2:	a201      	add	r2, pc, #4	@ (adr r2, 80033a8 <DMA_CheckFifoParam+0x70>)
 80033a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a8:	080033b9 	.word	0x080033b9
 80033ac:	080033bf 	.word	0x080033bf
 80033b0:	080033b9 	.word	0x080033b9
 80033b4:	080033d1 	.word	0x080033d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e030      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d025      	beq.n	8003416 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ce:	e022      	b.n	8003416 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033d8:	d11f      	bne.n	800341a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033de:	e01c      	b.n	800341a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d903      	bls.n	80033ee <DMA_CheckFifoParam+0xb6>
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b03      	cmp	r3, #3
 80033ea:	d003      	beq.n	80033f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033ec:	e018      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      break;
 80033f2:	e015      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00e      	beq.n	800341e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      break;
 8003404:	e00b      	b.n	800341e <DMA_CheckFifoParam+0xe6>
      break;
 8003406:	bf00      	nop
 8003408:	e00a      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
 800340c:	e008      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800340e:	bf00      	nop
 8003410:	e006      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e004      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e002      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;   
 800341a:	bf00      	nop
 800341c:	e000      	b.n	8003420 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
    }
  } 
  
  return status; 
 8003420:	7bfb      	ldrb	r3, [r7, #15]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop

08003430 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e086      	b.n	8003550 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003448:	2b00      	cmp	r3, #0
 800344a:	d106      	bne.n	800345a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2223      	movs	r2, #35	@ 0x23
 8003450:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe fe49 	bl	80020ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345a:	4b3f      	ldr	r3, [pc, #252]	@ (8003558 <HAL_ETH_Init+0x128>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	4a3e      	ldr	r2, [pc, #248]	@ (8003558 <HAL_ETH_Init+0x128>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003464:	6453      	str	r3, [r2, #68]	@ 0x44
 8003466:	4b3c      	ldr	r3, [pc, #240]	@ (8003558 <HAL_ETH_Init+0x128>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003472:	4b3a      	ldr	r3, [pc, #232]	@ (800355c <HAL_ETH_Init+0x12c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a39      	ldr	r2, [pc, #228]	@ (800355c <HAL_ETH_Init+0x12c>)
 8003478:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800347c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800347e:	4b37      	ldr	r3, [pc, #220]	@ (800355c <HAL_ETH_Init+0x12c>)
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	4935      	ldr	r1, [pc, #212]	@ (800355c <HAL_ETH_Init+0x12c>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800348c:	4b33      	ldr	r3, [pc, #204]	@ (800355c <HAL_ETH_Init+0x12c>)
 800348e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034a8:	f7ff fa76 	bl	8002998 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034ae:	e011      	b.n	80034d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80034b0:	f7ff fa72 	bl	8002998 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80034be:	d909      	bls.n	80034d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2204      	movs	r2, #4
 80034c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	22e0      	movs	r2, #224	@ 0xe0
 80034cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e03d      	b.n	8003550 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e4      	bne.n	80034b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f97a 	bl	80037e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa25 	bl	800393c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa7b 	bl	80039ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	461a      	mov	r2, r3
 80034fe:	2100      	movs	r1, #0
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f9e3 	bl	80038cc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003514:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0f      	ldr	r3, [pc, #60]	@ (8003560 <HAL_ETH_Init+0x130>)
 8003524:	430b      	orrs	r3, r1
 8003526:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800353a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2210      	movs	r2, #16
 800354a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40023800 	.word	0x40023800
 800355c:	40013800 	.word	0x40013800
 8003560:	00020060 	.word	0x00020060

08003564 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <ETH_SetMACConfig+0x164>)
 800357a:	4013      	ands	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	7b9b      	ldrb	r3, [r3, #14]
 8003582:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	7c12      	ldrb	r2, [r2, #16]
 8003588:	2a00      	cmp	r2, #0
 800358a:	d102      	bne.n	8003592 <ETH_SetMACConfig+0x2e>
 800358c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003590:	e000      	b.n	8003594 <ETH_SetMACConfig+0x30>
 8003592:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003594:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	7c52      	ldrb	r2, [r2, #17]
 800359a:	2a00      	cmp	r2, #0
 800359c:	d102      	bne.n	80035a4 <ETH_SetMACConfig+0x40>
 800359e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80035a2:	e000      	b.n	80035a6 <ETH_SetMACConfig+0x42>
 80035a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80035a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80035ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	7fdb      	ldrb	r3, [r3, #31]
 80035b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80035b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80035ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	7f92      	ldrb	r2, [r2, #30]
 80035c0:	2a00      	cmp	r2, #0
 80035c2:	d102      	bne.n	80035ca <ETH_SetMACConfig+0x66>
 80035c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035c8:	e000      	b.n	80035cc <ETH_SetMACConfig+0x68>
 80035ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80035cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	7f1b      	ldrb	r3, [r3, #28]
 80035d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80035d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80035da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	791b      	ldrb	r3, [r3, #4]
 80035e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80035e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d102      	bne.n	80035f4 <ETH_SetMACConfig+0x90>
 80035ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035f2:	e000      	b.n	80035f6 <ETH_SetMACConfig+0x92>
 80035f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80035f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	7bdb      	ldrb	r3, [r3, #15]
 80035fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003604:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800360c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800360e:	4313      	orrs	r3, r2
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4313      	orrs	r3, r2
 8003614:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003626:	2001      	movs	r0, #1
 8003628:	f7ff f9c2 	bl	80029b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003642:	4013      	ands	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003652:	2a00      	cmp	r2, #0
 8003654:	d101      	bne.n	800365a <ETH_SetMACConfig+0xf6>
 8003656:	2280      	movs	r2, #128	@ 0x80
 8003658:	e000      	b.n	800365c <ETH_SetMACConfig+0xf8>
 800365a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800365c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003662:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800366a:	2a01      	cmp	r2, #1
 800366c:	d101      	bne.n	8003672 <ETH_SetMACConfig+0x10e>
 800366e:	2208      	movs	r2, #8
 8003670:	e000      	b.n	8003674 <ETH_SetMACConfig+0x110>
 8003672:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003674:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800367c:	2a01      	cmp	r2, #1
 800367e:	d101      	bne.n	8003684 <ETH_SetMACConfig+0x120>
 8003680:	2204      	movs	r2, #4
 8003682:	e000      	b.n	8003686 <ETH_SetMACConfig+0x122>
 8003684:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003686:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800368e:	2a01      	cmp	r2, #1
 8003690:	d101      	bne.n	8003696 <ETH_SetMACConfig+0x132>
 8003692:	2202      	movs	r2, #2
 8003694:	e000      	b.n	8003698 <ETH_SetMACConfig+0x134>
 8003696:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003698:	4313      	orrs	r3, r2
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80036b0:	2001      	movs	r0, #1
 80036b2:	f7ff f97d 	bl	80029b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	619a      	str	r2, [r3, #24]
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	fd20810f 	.word	0xfd20810f

080036cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4b3d      	ldr	r3, [pc, #244]	@ (80037dc <ETH_SetDMAConfig+0x110>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	7b1b      	ldrb	r3, [r3, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <ETH_SetDMAConfig+0x2c>
 80036f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80036f6:	e000      	b.n	80036fa <ETH_SetDMAConfig+0x2e>
 80036f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	7b5b      	ldrb	r3, [r3, #13]
 80036fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003700:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	7f52      	ldrb	r2, [r2, #29]
 8003706:	2a00      	cmp	r2, #0
 8003708:	d102      	bne.n	8003710 <ETH_SetDMAConfig+0x44>
 800370a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800370e:	e000      	b.n	8003712 <ETH_SetDMAConfig+0x46>
 8003710:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003712:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	7b9b      	ldrb	r3, [r3, #14]
 8003718:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800371a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003720:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	7f1b      	ldrb	r3, [r3, #28]
 8003726:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003728:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	7f9b      	ldrb	r3, [r3, #30]
 800372e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003730:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003736:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800373e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003740:	4313      	orrs	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003750:	461a      	mov	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003762:	2001      	movs	r0, #1
 8003764:	f7ff f924 	bl	80029b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003770:	461a      	mov	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	791b      	ldrb	r3, [r3, #4]
 800377a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003780:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003786:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800378c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003794:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003796:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800379e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80037a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	6812      	ldr	r2, [r2, #0]
 80037aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80037ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80037b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80037c0:	2001      	movs	r0, #1
 80037c2:	f7ff f8f5 	bl	80029b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80037ce:	461a      	mov	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3710      	adds	r7, #16
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	f8de3f23 	.word	0xf8de3f23

080037e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b0a6      	sub	sp, #152	@ 0x98
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80037f4:	2300      	movs	r3, #0
 80037f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037fe:	2301      	movs	r3, #1
 8003800:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003810:	2301      	movs	r3, #1
 8003812:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003822:	2300      	movs	r3, #0
 8003824:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003826:	2300      	movs	r3, #0
 8003828:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800382c:	2300      	movs	r3, #0
 800382e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003848:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800384c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800384e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003854:	2300      	movs	r3, #0
 8003856:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800385a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800385e:	4619      	mov	r1, r3
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7ff fe7f 	bl	8003564 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003866:	2301      	movs	r3, #1
 8003868:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800386a:	2301      	movs	r3, #1
 800386c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003874:	2301      	movs	r3, #1
 8003876:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003878:	2300      	movs	r3, #0
 800387a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800387c:	2300      	movs	r3, #0
 800387e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003888:	2300      	movs	r3, #0
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800388c:	2301      	movs	r3, #1
 800388e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003892:	2301      	movs	r3, #1
 8003894:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800389a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800389c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80038a0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80038a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038a6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80038b6:	f107 0308 	add.w	r3, r7, #8
 80038ba:	4619      	mov	r1, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ff05 	bl	80036cc <ETH_SetDMAConfig>
}
 80038c2:	bf00      	nop
 80038c4:	3798      	adds	r7, #152	@ 0x98
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3305      	adds	r3, #5
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	021b      	lsls	r3, r3, #8
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	3204      	adds	r2, #4
 80038e4:	7812      	ldrb	r2, [r2, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4b11      	ldr	r3, [pc, #68]	@ (8003934 <ETH_MACAddressConfig+0x68>)
 80038ee:	4413      	add	r3, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3303      	adds	r3, #3
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	061a      	lsls	r2, r3, #24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3302      	adds	r3, #2
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	041b      	lsls	r3, r3, #16
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3301      	adds	r3, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	4313      	orrs	r3, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	4b06      	ldr	r3, [pc, #24]	@ (8003938 <ETH_MACAddressConfig+0x6c>)
 800391e:	4413      	add	r3, r2
 8003920:	461a      	mov	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	6013      	str	r3, [r2, #0]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40028040 	.word	0x40028040
 8003938:	40028044 	.word	0x40028044

0800393c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	e03e      	b.n	80039c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2200      	movs	r2, #0
 8003972:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003974:	68b9      	ldr	r1, [r7, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	3206      	adds	r2, #6
 800397c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d80c      	bhi.n	80039ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	440b      	add	r3, r1
 80039a4:	461a      	mov	r2, r3
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	e004      	b.n	80039b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	461a      	mov	r2, r3
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3301      	adds	r3, #1
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d9bd      	bls.n	800394a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68da      	ldr	r2, [r3, #12]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039e0:	611a      	str	r2, [r3, #16]
}
 80039e2:	bf00      	nop
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b085      	sub	sp, #20
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e048      	b.n	8003a8e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6919      	ldr	r1, [r3, #16]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	440b      	add	r3, r1
 8003a0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003a38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	3212      	adds	r2, #18
 8003a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d80c      	bhi.n	8003a7e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6919      	ldr	r1, [r3, #16]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	440b      	add	r3, r1
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
 8003a7c:	e004      	b.n	8003a88 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d9b3      	bls.n	80039fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003abe:	60da      	str	r2, [r3, #12]
}
 8003ac0:	bf00      	nop
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b089      	sub	sp, #36	@ 0x24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e175      	b.n	8003dd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003aec:	2201      	movs	r2, #1
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	f040 8164 	bne.w	8003dd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d005      	beq.n	8003b22 <HAL_GPIO_Init+0x56>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d130      	bne.n	8003b84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b58:	2201      	movs	r2, #1
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 0201 	and.w	r2, r3, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d017      	beq.n	8003bc0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d123      	bne.n	8003c14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	08da      	lsrs	r2, r3, #3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3208      	adds	r2, #8
 8003bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	220f      	movs	r2, #15
 8003be4:	fa02 f303 	lsl.w	r3, r2, r3
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	08da      	lsrs	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3208      	adds	r2, #8
 8003c0e:	69b9      	ldr	r1, [r7, #24]
 8003c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	2203      	movs	r2, #3
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69ba      	ldr	r2, [r7, #24]
 8003c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80be 	beq.w	8003dd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c56:	4b66      	ldr	r3, [pc, #408]	@ (8003df0 <HAL_GPIO_Init+0x324>)
 8003c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5a:	4a65      	ldr	r2, [pc, #404]	@ (8003df0 <HAL_GPIO_Init+0x324>)
 8003c5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c62:	4b63      	ldr	r3, [pc, #396]	@ (8003df0 <HAL_GPIO_Init+0x324>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c6e:	4a61      	ldr	r2, [pc, #388]	@ (8003df4 <HAL_GPIO_Init+0x328>)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	3302      	adds	r3, #2
 8003c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	220f      	movs	r2, #15
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a58      	ldr	r2, [pc, #352]	@ (8003df8 <HAL_GPIO_Init+0x32c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d037      	beq.n	8003d0a <HAL_GPIO_Init+0x23e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a57      	ldr	r2, [pc, #348]	@ (8003dfc <HAL_GPIO_Init+0x330>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_GPIO_Init+0x23a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a56      	ldr	r2, [pc, #344]	@ (8003e00 <HAL_GPIO_Init+0x334>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d02b      	beq.n	8003d02 <HAL_GPIO_Init+0x236>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a55      	ldr	r2, [pc, #340]	@ (8003e04 <HAL_GPIO_Init+0x338>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d025      	beq.n	8003cfe <HAL_GPIO_Init+0x232>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	@ (8003e08 <HAL_GPIO_Init+0x33c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01f      	beq.n	8003cfa <HAL_GPIO_Init+0x22e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a53      	ldr	r2, [pc, #332]	@ (8003e0c <HAL_GPIO_Init+0x340>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d019      	beq.n	8003cf6 <HAL_GPIO_Init+0x22a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_GPIO_Init+0x344>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d013      	beq.n	8003cf2 <HAL_GPIO_Init+0x226>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a51      	ldr	r2, [pc, #324]	@ (8003e14 <HAL_GPIO_Init+0x348>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00d      	beq.n	8003cee <HAL_GPIO_Init+0x222>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a50      	ldr	r2, [pc, #320]	@ (8003e18 <HAL_GPIO_Init+0x34c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <HAL_GPIO_Init+0x21e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8003e1c <HAL_GPIO_Init+0x350>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <HAL_GPIO_Init+0x21a>
 8003ce2:	2309      	movs	r3, #9
 8003ce4:	e012      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003ce6:	230a      	movs	r3, #10
 8003ce8:	e010      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cea:	2308      	movs	r3, #8
 8003cec:	e00e      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cee:	2307      	movs	r3, #7
 8003cf0:	e00c      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cf2:	2306      	movs	r3, #6
 8003cf4:	e00a      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cf6:	2305      	movs	r3, #5
 8003cf8:	e008      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	e006      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e004      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e002      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_GPIO_Init+0x240>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	69fa      	ldr	r2, [r7, #28]
 8003d0e:	f002 0203 	and.w	r2, r2, #3
 8003d12:	0092      	lsls	r2, r2, #2
 8003d14:	4093      	lsls	r3, r2
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d1c:	4935      	ldr	r1, [pc, #212]	@ (8003df4 <HAL_GPIO_Init+0x328>)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	089b      	lsrs	r3, r3, #2
 8003d22:	3302      	adds	r3, #2
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d4e:	4a34      	ldr	r2, [pc, #208]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d54:	4b32      	ldr	r3, [pc, #200]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d78:	4a29      	ldr	r2, [pc, #164]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d7e:	4b28      	ldr	r3, [pc, #160]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003da2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003da8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	43db      	mvns	r3, r3
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	4013      	ands	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dcc:	4a14      	ldr	r2, [pc, #80]	@ (8003e20 <HAL_GPIO_Init+0x354>)
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	2b0f      	cmp	r3, #15
 8003ddc:	f67f ae86 	bls.w	8003aec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3724      	adds	r7, #36	@ 0x24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40023800 	.word	0x40023800
 8003df4:	40013800 	.word	0x40013800
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	40020400 	.word	0x40020400
 8003e00:	40020800 	.word	0x40020800
 8003e04:	40020c00 	.word	0x40020c00
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	40021400 	.word	0x40021400
 8003e10:	40021800 	.word	0x40021800
 8003e14:	40021c00 	.word	0x40021c00
 8003e18:	40022000 	.word	0x40022000
 8003e1c:	40022400 	.word	0x40022400
 8003e20:	40013c00 	.word	0x40013c00

08003e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	807b      	strh	r3, [r7, #2]
 8003e30:	4613      	mov	r3, r2
 8003e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e34:	787b      	ldrb	r3, [r7, #1]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e3a:	887a      	ldrh	r2, [r7, #2]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e40:	e003      	b.n	8003e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	041a      	lsls	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	619a      	str	r2, [r3, #24]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e62:	4b08      	ldr	r3, [pc, #32]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	88fb      	ldrh	r3, [r7, #6]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e6e:	4a05      	ldr	r2, [pc, #20]	@ (8003e84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e74:	88fb      	ldrh	r3, [r7, #6]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fd fce2 	bl	8001840 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40013c00 	.word	0x40013c00

08003e88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e08b      	b.n	8003fb2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fe f9d4 	bl	800225c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ed8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ee8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d107      	bne.n	8003f02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e006      	b.n	8003f10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d108      	bne.n	8003f2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f26:	605a      	str	r2, [r3, #4]
 8003f28:	e007      	b.n	8003f3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b1d      	ldr	r3, [pc, #116]	@ (8003fbc <HAL_I2C_Init+0x134>)
 8003f46:	430b      	orrs	r3, r1
 8003f48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69d9      	ldr	r1, [r3, #28]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f042 0201 	orr.w	r2, r2, #1
 8003f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	02008000 	.word	0x02008000

08003fc0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	460b      	mov	r3, r1
 8003fce:	817b      	strh	r3, [r7, #10]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b20      	cmp	r3, #32
 8003fde:	f040 80fd 	bne.w	80041dc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2C_Master_Transmit+0x30>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e0f6      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ff8:	f7fe fcce 	bl	8002998 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	2319      	movs	r3, #25
 8004004:	2201      	movs	r2, #1
 8004006:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f914 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e0e1      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2221      	movs	r2, #33	@ 0x21
 800401e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2210      	movs	r2, #16
 8004026:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	893a      	ldrh	r2, [r7, #8]
 800403a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29b      	uxth	r3, r3
 8004048:	2bff      	cmp	r3, #255	@ 0xff
 800404a:	d906      	bls.n	800405a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	22ff      	movs	r2, #255	@ 0xff
 8004050:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004052:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	e007      	b.n	800406a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004064:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004068:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800406e:	2b00      	cmp	r3, #0
 8004070:	d024      	beq.n	80040bc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	8979      	ldrh	r1, [r7, #10]
 80040ae:	4b4e      	ldr	r3, [pc, #312]	@ (80041e8 <HAL_I2C_Master_Transmit+0x228>)
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fa83 	bl	80045c0 <I2C_TransferConfig>
 80040ba:	e066      	b.n	800418a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	8979      	ldrh	r1, [r7, #10]
 80040c4:	4b48      	ldr	r3, [pc, #288]	@ (80041e8 <HAL_I2C_Master_Transmit+0x228>)
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 fa78 	bl	80045c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80040d0:	e05b      	b.n	800418a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	6a39      	ldr	r1, [r7, #32]
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f907 	bl	80042ea <I2C_WaitOnTXISFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e07b      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	781a      	ldrb	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d034      	beq.n	800418a <HAL_I2C_Master_Transmit+0x1ca>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004124:	2b00      	cmp	r3, #0
 8004126:	d130      	bne.n	800418a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	6a3b      	ldr	r3, [r7, #32]
 800412e:	2200      	movs	r2, #0
 8004130:	2180      	movs	r1, #128	@ 0x80
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f880 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e04d      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004146:	b29b      	uxth	r3, r3
 8004148:	2bff      	cmp	r3, #255	@ 0xff
 800414a:	d90e      	bls.n	800416a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	22ff      	movs	r2, #255	@ 0xff
 8004150:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	b2da      	uxtb	r2, r3
 8004158:	8979      	ldrh	r1, [r7, #10]
 800415a:	2300      	movs	r3, #0
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 fa2c 	bl	80045c0 <I2C_TransferConfig>
 8004168:	e00f      	b.n	800418a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	b2da      	uxtb	r2, r3
 800417a:	8979      	ldrh	r1, [r7, #10]
 800417c:	2300      	movs	r3, #0
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fa1b 	bl	80045c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d19e      	bne.n	80040d2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	6a39      	ldr	r1, [r7, #32]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f8ed 	bl	8004378 <I2C_WaitOnSTOPFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e01a      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2220      	movs	r2, #32
 80041ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b0c      	ldr	r3, [pc, #48]	@ (80041ec <HAL_I2C_Master_Transmit+0x22c>)
 80041bc:	400b      	ands	r3, r1
 80041be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	80002000 	.word	0x80002000
 80041ec:	fe00e800 	.word	0xfe00e800

080041f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d007      	beq.n	800422c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	619a      	str	r2, [r3, #24]
  }
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	e03b      	b.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 f8d6 	bl	8004400 <I2C_IsErrorOccurred>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e041      	b.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d02d      	beq.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fb97 	bl	8002998 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	683a      	ldr	r2, [r7, #0]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d122      	bne.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	429a      	cmp	r2, r3
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	461a      	mov	r2, r3
 8004294:	79fb      	ldrb	r3, [r7, #7]
 8004296:	429a      	cmp	r2, r3
 8004298:	d113      	bne.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2220      	movs	r2, #32
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e00f      	b.n	80042e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d0b4      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f6:	e033      	b.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	68b9      	ldr	r1, [r7, #8]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f87f 	bl	8004400 <I2C_IsErrorOccurred>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e031      	b.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004312:	d025      	beq.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004314:	f7fe fb40 	bl	8002998 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d11a      	bne.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d013      	beq.n	8004360 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433c:	f043 0220 	orr.w	r2, r3, #32
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e007      	b.n	8004370 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b02      	cmp	r3, #2
 800436c:	d1c4      	bne.n	80042f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3710      	adds	r7, #16
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004384:	e02f      	b.n	80043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f000 f838 	bl	8004400 <I2C_IsErrorOccurred>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e02d      	b.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fe fafd 	bl	8002998 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11a      	bne.n	80043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d013      	beq.n	80043e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	f043 0220 	orr.w	r2, r3, #32
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e007      	b.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d1c8      	bne.n	8004386 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
	...

08004400 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d068      	beq.n	80044fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2210      	movs	r2, #16
 8004432:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004434:	e049      	b.n	80044ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d045      	beq.n	80044ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800443e:	f7fe faab 	bl	8002998 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	429a      	cmp	r2, r3
 800444c:	d302      	bcc.n	8004454 <I2C_IsErrorOccurred+0x54>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d13a      	bne.n	80044ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004466:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004476:	d121      	bne.n	80044bc <I2C_IsErrorOccurred+0xbc>
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800447e:	d01d      	beq.n	80044bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004480:	7cfb      	ldrb	r3, [r7, #19]
 8004482:	2b20      	cmp	r3, #32
 8004484:	d01a      	beq.n	80044bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004494:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004496:	f7fe fa7f 	bl	8002998 <HAL_GetTick>
 800449a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800449c:	e00e      	b.n	80044bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800449e:	f7fe fa7b 	bl	8002998 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b19      	cmp	r3, #25
 80044aa:	d907      	bls.n	80044bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	f043 0320 	orr.w	r3, r3, #32
 80044b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80044ba:	e006      	b.n	80044ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d1e9      	bne.n	800449e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d003      	beq.n	80044e0 <I2C_IsErrorOccurred+0xe0>
 80044d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0aa      	beq.n	8004436 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d103      	bne.n	80044f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2220      	movs	r2, #32
 80044ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80044f0:	6a3b      	ldr	r3, [r7, #32]
 80044f2:	f043 0304 	orr.w	r3, r3, #4
 80044f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00b      	beq.n	8004528 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	f043 0301 	orr.w	r3, r3, #1
 8004516:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004520:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00b      	beq.n	800454a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004542:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00b      	beq.n	800456c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004554:	6a3b      	ldr	r3, [r7, #32]
 8004556:	f043 0302 	orr.w	r3, r3, #2
 800455a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004564:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800456c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff fe3b 	bl	80041f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b0d      	ldr	r3, [pc, #52]	@ (80045bc <I2C_IsErrorOccurred+0x1bc>)
 8004586:	400b      	ands	r3, r1
 8004588:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80045ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3728      	adds	r7, #40	@ 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	fe00e800 	.word	0xfe00e800

080045c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	607b      	str	r3, [r7, #4]
 80045ca:	460b      	mov	r3, r1
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	4613      	mov	r3, r2
 80045d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045d2:	897b      	ldrh	r3, [r7, #10]
 80045d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045d8:	7a7b      	ldrb	r3, [r7, #9]
 80045da:	041b      	lsls	r3, r3, #16
 80045dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	0d5b      	lsrs	r3, r3, #21
 80045fa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80045fe:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <I2C_TransferConfig+0x60>)
 8004600:	430b      	orrs	r3, r1
 8004602:	43db      	mvns	r3, r3
 8004604:	ea02 0103 	and.w	r1, r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004612:	bf00      	nop
 8004614:	371c      	adds	r7, #28
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	03ff63ff 	.word	0x03ff63ff

08004624 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	d138      	bne.n	80046ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004644:	2302      	movs	r3, #2
 8004646:	e032      	b.n	80046ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	@ 0x24
 8004654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004676:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6819      	ldr	r1, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046ac:	2302      	movs	r3, #2
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b085      	sub	sp, #20
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d139      	bne.n	8004744 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d101      	bne.n	80046de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046da:	2302      	movs	r3, #2
 80046dc:	e033      	b.n	8004746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	@ 0x24
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800470c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	021b      	lsls	r3, r3, #8
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f042 0201 	orr.w	r2, r2, #1
 800472e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af02      	add	r7, sp, #8
 8004758:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e108      	b.n	8004976 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d106      	bne.n	8004784 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fd ff6e 	bl	8002660 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2203      	movs	r2, #3
 8004788:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004792:	d102      	bne.n	800479a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f003 ff74 	bl	800868c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7c1a      	ldrb	r2, [r3, #16]
 80047ac:	f88d 2000 	strb.w	r2, [sp]
 80047b0:	3304      	adds	r3, #4
 80047b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b4:	f003 ff10 	bl	80085d8 <USB_CoreInit>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d005      	beq.n	80047ca <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2202      	movs	r2, #2
 80047c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e0d5      	b.n	8004976 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f003 ff6c 	bl	80086ae <USB_SetCurrentMode>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0c6      	b.n	8004976 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e04a      	b.n	8004884 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80047ee:	7bfa      	ldrb	r2, [r7, #15]
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	4613      	mov	r3, r2
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3315      	adds	r3, #21
 80047fe:	2201      	movs	r2, #1
 8004800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	00db      	lsls	r3, r3, #3
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3314      	adds	r3, #20
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	b298      	uxth	r0, r3
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	332e      	adds	r3, #46	@ 0x2e
 800482a:	4602      	mov	r2, r0
 800482c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800482e:	7bfa      	ldrb	r2, [r7, #15]
 8004830:	6879      	ldr	r1, [r7, #4]
 8004832:	4613      	mov	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	440b      	add	r3, r1
 800483c:	3318      	adds	r3, #24
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	331c      	adds	r3, #28
 8004852:	2200      	movs	r2, #0
 8004854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	4413      	add	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	3320      	adds	r3, #32
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800486a:	7bfa      	ldrb	r2, [r7, #15]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	00db      	lsls	r3, r3, #3
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3324      	adds	r3, #36	@ 0x24
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800487e:	7bfb      	ldrb	r3, [r7, #15]
 8004880:	3301      	adds	r3, #1
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	7bfa      	ldrb	r2, [r7, #15]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3af      	bcc.n	80047ee <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800488e:	2300      	movs	r3, #0
 8004890:	73fb      	strb	r3, [r7, #15]
 8004892:	e044      	b.n	800491e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004894:	7bfa      	ldrb	r2, [r7, #15]
 8004896:	6879      	ldr	r1, [r7, #4]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	4413      	add	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80048aa:	7bfa      	ldrb	r2, [r7, #15]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80048bc:	7bfa      	ldrb	r2, [r7, #15]
 80048be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80048c0:	7bfa      	ldrb	r2, [r7, #15]
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	4413      	add	r3, r2
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	440b      	add	r3, r1
 80048ce:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80048ec:	7bfa      	ldrb	r2, [r7, #15]
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	4613      	mov	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80048fe:	2200      	movs	r2, #0
 8004900:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004902:	7bfa      	ldrb	r2, [r7, #15]
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004918:	7bfb      	ldrb	r3, [r7, #15]
 800491a:	3301      	adds	r3, #1
 800491c:	73fb      	strb	r3, [r7, #15]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	791b      	ldrb	r3, [r3, #4]
 8004922:	7bfa      	ldrb	r2, [r7, #15]
 8004924:	429a      	cmp	r2, r3
 8004926:	d3b5      	bcc.n	8004894 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7c1a      	ldrb	r2, [r3, #16]
 8004930:	f88d 2000 	strb.w	r2, [sp]
 8004934:	3304      	adds	r3, #4
 8004936:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004938:	f003 ff06 	bl	8008748 <USB_DevInit>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e013      	b.n	8004976 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7b1b      	ldrb	r3, [r3, #12]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 f80b 	bl	8004980 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f004 f8c1 	bl	8008af6 <USB_DevDisconnect>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ae:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_PCDEx_ActivateLPM+0x44>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3714      	adds	r7, #20
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	10000003 	.word	0x10000003

080049c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80049d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d6:	6013      	str	r3, [r2, #0]
}
 80049d8:	bf00      	nop
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40007000 	.word	0x40007000

080049e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	4a22      	ldr	r2, [pc, #136]	@ (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80049fe:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a14:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a16:	f7fd ffbf 	bl	8002998 <HAL_GetTick>
 8004a1a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a1c:	e009      	b.n	8004a32 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a1e:	f7fd ffbb 	bl	8002998 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a2c:	d901      	bls.n	8004a32 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e022      	b.n	8004a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a3e:	d1ee      	bne.n	8004a1e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a40:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a0f      	ldr	r2, [pc, #60]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a4c:	f7fd ffa4 	bl	8002998 <HAL_GetTick>
 8004a50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a52:	e009      	b.n	8004a68 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a54:	f7fd ffa0 	bl	8002998 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a62:	d901      	bls.n	8004a68 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e007      	b.n	8004a78 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004a74:	d1ee      	bne.n	8004a54 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40007000 	.word	0x40007000

08004a88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a90:	2300      	movs	r3, #0
 8004a92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d101      	bne.n	8004a9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e291      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8087 	beq.w	8004bba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004aac:	4b96      	ldr	r3, [pc, #600]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d00c      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ab8:	4b93      	ldr	r3, [pc, #588]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 030c 	and.w	r3, r3, #12
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d112      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
 8004ac4:	4b90      	ldr	r3, [pc, #576]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004acc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ad0:	d10b      	bne.n	8004aea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d06c      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x130>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d168      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e26b      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af2:	d106      	bne.n	8004b02 <HAL_RCC_OscConfig+0x7a>
 8004af4:	4b84      	ldr	r3, [pc, #528]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a83      	ldr	r2, [pc, #524]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e02e      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10c      	bne.n	8004b24 <HAL_RCC_OscConfig+0x9c>
 8004b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a7e      	ldr	r2, [pc, #504]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b7c      	ldr	r3, [pc, #496]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	e01d      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0xc0>
 8004b2e:	4b76      	ldr	r3, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a75      	ldr	r2, [pc, #468]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	4b73      	ldr	r3, [pc, #460]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a72      	ldr	r2, [pc, #456]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0xd8>
 8004b48:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	4b6c      	ldr	r3, [pc, #432]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a6b      	ldr	r2, [pc, #428]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d013      	beq.n	8004b90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b68:	f7fd ff16 	bl	8002998 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7fd ff12 	bl	8002998 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e21f      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	4b61      	ldr	r3, [pc, #388]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0f0      	beq.n	8004b70 <HAL_RCC_OscConfig+0xe8>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fd ff02 	bl	8002998 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b98:	f7fd fefe 	bl	8002998 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	@ 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e20b      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	4b57      	ldr	r3, [pc, #348]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1f0      	bne.n	8004b98 <HAL_RCC_OscConfig+0x110>
 8004bb6:	e000      	b.n	8004bba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d069      	beq.n	8004c9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bc6:	4b50      	ldr	r3, [pc, #320]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00b      	beq.n	8004bea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b08      	cmp	r3, #8
 8004bdc:	d11c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
 8004bde:	4b4a      	ldr	r3, [pc, #296]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d116      	bne.n	8004c18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	4b47      	ldr	r3, [pc, #284]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d001      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e1df      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c02:	4b41      	ldr	r3, [pc, #260]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	493d      	ldr	r1, [pc, #244]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c16:	e040      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d023      	beq.n	8004c68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c20:	4b39      	ldr	r3, [pc, #228]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a38      	ldr	r2, [pc, #224]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fd feb4 	bl	8002998 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fd feb0 	bl	8002998 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1bd      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b30      	ldr	r3, [pc, #192]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c52:	4b2d      	ldr	r3, [pc, #180]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	4929      	ldr	r1, [pc, #164]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	600b      	str	r3, [r1, #0]
 8004c66:	e018      	b.n	8004c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c68:	4b27      	ldr	r3, [pc, #156]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c74:	f7fd fe90 	bl	8002998 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c7c:	f7fd fe8c 	bl	8002998 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e199      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d038      	beq.n	8004d18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cae:	4b16      	ldr	r3, [pc, #88]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb2:	4a15      	ldr	r2, [pc, #84]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cba:	f7fd fe6d 	bl	8002998 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cc2:	f7fd fe69 	bl	8002998 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e176      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x23a>
 8004ce0:	e01a      	b.n	8004d18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce2:	4b09      	ldr	r3, [pc, #36]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce6:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f023 0301 	bic.w	r3, r3, #1
 8004cec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cee:	f7fd fe53 	bl	8002998 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf4:	e00a      	b.n	8004d0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cf6:	f7fd fe4f 	bl	8002998 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d903      	bls.n	8004d0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e15c      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
 8004d08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	4b91      	ldr	r3, [pc, #580]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1ee      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80a4 	beq.w	8004e6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d26:	4b8b      	ldr	r3, [pc, #556]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b88      	ldr	r3, [pc, #544]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4a87      	ldr	r2, [pc, #540]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3e:	4b85      	ldr	r3, [pc, #532]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d4e:	4b82      	ldr	r3, [pc, #520]	@ (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d5a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fd fe17 	bl	8002998 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fd fe13 	bl	8002998 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b64      	cmp	r3, #100	@ 0x64
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e120      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d80:	4b75      	ldr	r3, [pc, #468]	@ (8004f58 <HAL_RCC_OscConfig+0x4d0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x31a>
 8004d94:	4b6f      	ldr	r3, [pc, #444]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	4a6e      	ldr	r2, [pc, #440]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da0:	e02d      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x33c>
 8004daa:	4b6a      	ldr	r3, [pc, #424]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	4a69      	ldr	r2, [pc, #420]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db6:	4b67      	ldr	r3, [pc, #412]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	4a66      	ldr	r2, [pc, #408]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc2:	e01c      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	2b05      	cmp	r3, #5
 8004dca:	d10c      	bne.n	8004de6 <HAL_RCC_OscConfig+0x35e>
 8004dcc:	4b61      	ldr	r3, [pc, #388]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd0:	4a60      	ldr	r2, [pc, #384]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dd2:	f043 0304 	orr.w	r3, r3, #4
 8004dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004de4:	e00b      	b.n	8004dfe <HAL_RCC_OscConfig+0x376>
 8004de6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dea:	4a5a      	ldr	r2, [pc, #360]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004dec:	f023 0301 	bic.w	r3, r3, #1
 8004df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004df2:	4b58      	ldr	r3, [pc, #352]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df6:	4a57      	ldr	r2, [pc, #348]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d015      	beq.n	8004e32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e06:	f7fd fdc7 	bl	8002998 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fd fdc3 	bl	8002998 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e0ce      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	4b4b      	ldr	r3, [pc, #300]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ee      	beq.n	8004e0e <HAL_RCC_OscConfig+0x386>
 8004e30:	e014      	b.n	8004e5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e32:	f7fd fdb1 	bl	8002998 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fd fdad 	bl	8002998 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0b8      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	4b40      	ldr	r3, [pc, #256]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1ee      	bne.n	8004e3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e62:	4b3c      	ldr	r3, [pc, #240]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e66:	4a3b      	ldr	r2, [pc, #236]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 80a4 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e78:	4b36      	ldr	r3, [pc, #216]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d06b      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d149      	bne.n	8004f20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e8c:	4b31      	ldr	r3, [pc, #196]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004e92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e98:	f7fd fd7e 	bl	8002998 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fd7a 	bl	8002998 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e087      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb2:	4b28      	ldr	r3, [pc, #160]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	431a      	orrs	r2, r3
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	019b      	lsls	r3, r3, #6
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee0:	061b      	lsls	r3, r3, #24
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eec:	4b19      	ldr	r3, [pc, #100]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef8:	f7fd fd4e 	bl	8002998 <HAL_GetTick>
 8004efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004efe:	e008      	b.n	8004f12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f00:	f7fd fd4a 	bl	8002998 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e057      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f12:	4b10      	ldr	r3, [pc, #64]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d0f0      	beq.n	8004f00 <HAL_RCC_OscConfig+0x478>
 8004f1e:	e04f      	b.n	8004fc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f20:	4b0c      	ldr	r3, [pc, #48]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a0b      	ldr	r2, [pc, #44]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004f26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2c:	f7fd fd34 	bl	8002998 <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fd fd30 	bl	8002998 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e03d      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	4b03      	ldr	r3, [pc, #12]	@ (8004f54 <HAL_RCC_OscConfig+0x4cc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1f0      	bne.n	8004f34 <HAL_RCC_OscConfig+0x4ac>
 8004f52:	e035      	b.n	8004fc0 <HAL_RCC_OscConfig+0x538>
 8004f54:	40023800 	.word	0x40023800
 8004f58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004fcc <HAL_RCC_OscConfig+0x544>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d028      	beq.n	8004fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d121      	bne.n	8004fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d11a      	bne.n	8004fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d111      	bne.n	8004fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa2:	085b      	lsrs	r3, r3, #1
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d107      	bne.n	8004fbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3718      	adds	r7, #24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	40023800 	.word	0x40023800

08004fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e0d0      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe8:	4b6a      	ldr	r3, [pc, #424]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d910      	bls.n	8005018 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff6:	4b67      	ldr	r3, [pc, #412]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 020f 	bic.w	r2, r3, #15
 8004ffe:	4965      	ldr	r1, [pc, #404]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4313      	orrs	r3, r2
 8005004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005006:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	683a      	ldr	r2, [r7, #0]
 8005010:	429a      	cmp	r2, r3
 8005012:	d001      	beq.n	8005018 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0b8      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d020      	beq.n	8005066 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005030:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4a58      	ldr	r2, [pc, #352]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005036:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800503a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0308 	and.w	r3, r3, #8
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005048:	4b53      	ldr	r3, [pc, #332]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a52      	ldr	r2, [pc, #328]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800504e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005054:	4b50      	ldr	r3, [pc, #320]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	494d      	ldr	r1, [pc, #308]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b00      	cmp	r3, #0
 8005070:	d040      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507a:	4b47      	ldr	r3, [pc, #284]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d115      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e07f      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005092:	4b41      	ldr	r3, [pc, #260]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e073      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e06b      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4b39      	ldr	r3, [pc, #228]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f023 0203 	bic.w	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4936      	ldr	r1, [pc, #216]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050c4:	f7fd fc68 	bl	8002998 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	e00a      	b.n	80050e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050cc:	f7fd fc64 	bl	8002998 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050da:	4293      	cmp	r3, r2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e053      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 020c 	and.w	r2, r3, #12
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d1eb      	bne.n	80050cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b27      	ldr	r3, [pc, #156]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d210      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b24      	ldr	r3, [pc, #144]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 020f 	bic.w	r2, r3, #15
 800510a:	4922      	ldr	r1, [pc, #136]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b20      	ldr	r3, [pc, #128]	@ (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e032      	b.n	800518a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005130:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	4916      	ldr	r1, [pc, #88]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800513e:	4313      	orrs	r3, r2
 8005140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	2b00      	cmp	r3, #0
 800514c:	d009      	beq.n	8005162 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800514e:	4b12      	ldr	r3, [pc, #72]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	490e      	ldr	r1, [pc, #56]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005162:	f000 f821 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8005166:	4602      	mov	r2, r0
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	490a      	ldr	r1, [pc, #40]	@ (800519c <HAL_RCC_ClockConfig+0x1cc>)
 8005174:	5ccb      	ldrb	r3, [r1, r3]
 8005176:	fa22 f303 	lsr.w	r3, r2, r3
 800517a:	4a09      	ldr	r2, [pc, #36]	@ (80051a0 <HAL_RCC_ClockConfig+0x1d0>)
 800517c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <HAL_RCC_ClockConfig+0x1d4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4618      	mov	r0, r3
 8005184:	f7fd fbc4 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	40023c00 	.word	0x40023c00
 8005198:	40023800 	.word	0x40023800
 800519c:	08009adc 	.word	0x08009adc
 80051a0:	20000030 	.word	0x20000030
 80051a4:	20000034 	.word	0x20000034

080051a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051ac:	b094      	sub	sp, #80	@ 0x50
 80051ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051b0:	2300      	movs	r3, #0
 80051b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80051b4:	2300      	movs	r3, #0
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b8:	2300      	movs	r3, #0
 80051ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80051bc:	2300      	movs	r3, #0
 80051be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c0:	4b79      	ldr	r3, [pc, #484]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d00d      	beq.n	80051e8 <HAL_RCC_GetSysClockFreq+0x40>
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	f200 80e1 	bhi.w	8005394 <HAL_RCC_GetSysClockFreq+0x1ec>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_RCC_GetSysClockFreq+0x34>
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d003      	beq.n	80051e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80051da:	e0db      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b73      	ldr	r3, [pc, #460]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x204>)
 80051de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e0:	e0db      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051e2:	4b73      	ldr	r3, [pc, #460]	@ (80053b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80051e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e6:	e0d8      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051e8:	4b6f      	ldr	r3, [pc, #444]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80051f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051f2:	4b6d      	ldr	r3, [pc, #436]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d063      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fe:	4b6a      	ldr	r3, [pc, #424]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	2200      	movs	r2, #0
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005208:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005210:	633b      	str	r3, [r7, #48]	@ 0x30
 8005212:	2300      	movs	r3, #0
 8005214:	637b      	str	r3, [r7, #52]	@ 0x34
 8005216:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800521a:	4622      	mov	r2, r4
 800521c:	462b      	mov	r3, r5
 800521e:	f04f 0000 	mov.w	r0, #0
 8005222:	f04f 0100 	mov.w	r1, #0
 8005226:	0159      	lsls	r1, r3, #5
 8005228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800522c:	0150      	lsls	r0, r2, #5
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4621      	mov	r1, r4
 8005234:	1a51      	subs	r1, r2, r1
 8005236:	6139      	str	r1, [r7, #16]
 8005238:	4629      	mov	r1, r5
 800523a:	eb63 0301 	sbc.w	r3, r3, r1
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800524c:	4659      	mov	r1, fp
 800524e:	018b      	lsls	r3, r1, #6
 8005250:	4651      	mov	r1, sl
 8005252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005256:	4651      	mov	r1, sl
 8005258:	018a      	lsls	r2, r1, #6
 800525a:	4651      	mov	r1, sl
 800525c:	ebb2 0801 	subs.w	r8, r2, r1
 8005260:	4659      	mov	r1, fp
 8005262:	eb63 0901 	sbc.w	r9, r3, r1
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005272:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005276:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527a:	4690      	mov	r8, r2
 800527c:	4699      	mov	r9, r3
 800527e:	4623      	mov	r3, r4
 8005280:	eb18 0303 	adds.w	r3, r8, r3
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	462b      	mov	r3, r5
 8005288:	eb49 0303 	adc.w	r3, r9, r3
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800529a:	4629      	mov	r1, r5
 800529c:	024b      	lsls	r3, r1, #9
 800529e:	4621      	mov	r1, r4
 80052a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052a4:	4621      	mov	r1, r4
 80052a6:	024a      	lsls	r2, r1, #9
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ae:	2200      	movs	r2, #0
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80052b8:	f7fb f802 	bl	80002c0 <__aeabi_uldivmod>
 80052bc:	4602      	mov	r2, r0
 80052be:	460b      	mov	r3, r1
 80052c0:	4613      	mov	r3, r2
 80052c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052c4:	e058      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052c6:	4b38      	ldr	r3, [pc, #224]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	099b      	lsrs	r3, r3, #6
 80052cc:	2200      	movs	r2, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	4611      	mov	r1, r2
 80052d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052d6:	623b      	str	r3, [r7, #32]
 80052d8:	2300      	movs	r3, #0
 80052da:	627b      	str	r3, [r7, #36]	@ 0x24
 80052dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	0159      	lsls	r1, r3, #5
 80052ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052f2:	0150      	lsls	r0, r2, #5
 80052f4:	4602      	mov	r2, r0
 80052f6:	460b      	mov	r3, r1
 80052f8:	4641      	mov	r1, r8
 80052fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80052fe:	4649      	mov	r1, r9
 8005300:	eb63 0b01 	sbc.w	fp, r3, r1
 8005304:	f04f 0200 	mov.w	r2, #0
 8005308:	f04f 0300 	mov.w	r3, #0
 800530c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005310:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005314:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005318:	ebb2 040a 	subs.w	r4, r2, sl
 800531c:	eb63 050b 	sbc.w	r5, r3, fp
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	00eb      	lsls	r3, r5, #3
 800532a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800532e:	00e2      	lsls	r2, r4, #3
 8005330:	4614      	mov	r4, r2
 8005332:	461d      	mov	r5, r3
 8005334:	4643      	mov	r3, r8
 8005336:	18e3      	adds	r3, r4, r3
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	464b      	mov	r3, r9
 800533c:	eb45 0303 	adc.w	r3, r5, r3
 8005340:	607b      	str	r3, [r7, #4]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	f04f 0300 	mov.w	r3, #0
 800534a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800534e:	4629      	mov	r1, r5
 8005350:	028b      	lsls	r3, r1, #10
 8005352:	4621      	mov	r1, r4
 8005354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005358:	4621      	mov	r1, r4
 800535a:	028a      	lsls	r2, r1, #10
 800535c:	4610      	mov	r0, r2
 800535e:	4619      	mov	r1, r3
 8005360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005362:	2200      	movs	r2, #0
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	61fa      	str	r2, [r7, #28]
 8005368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800536c:	f7fa ffa8 	bl	80002c0 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005378:	4b0b      	ldr	r3, [pc, #44]	@ (80053a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	3301      	adds	r3, #1
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005388:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800538a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005392:	e002      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b05      	ldr	r3, [pc, #20]	@ (80053ac <HAL_RCC_GetSysClockFreq+0x204>)
 8005396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800539a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800539c:	4618      	mov	r0, r3
 800539e:	3750      	adds	r7, #80	@ 0x50
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a6:	bf00      	nop
 80053a8:	40023800 	.word	0x40023800
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	007a1200 	.word	0x007a1200

080053b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b8:	4b03      	ldr	r3, [pc, #12]	@ (80053c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000030 	.word	0x20000030

080053cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053d0:	f7ff fff0 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b05      	ldr	r3, [pc, #20]	@ (80053ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0a9b      	lsrs	r3, r3, #10
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4903      	ldr	r1, [pc, #12]	@ (80053f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023800 	.word	0x40023800
 80053f0:	08009aec 	.word	0x08009aec

080053f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053f8:	f7ff ffdc 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80053fc:	4602      	mov	r2, r0
 80053fe:	4b05      	ldr	r3, [pc, #20]	@ (8005414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	0b5b      	lsrs	r3, r3, #13
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	4903      	ldr	r1, [pc, #12]	@ (8005418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800540a:	5ccb      	ldrb	r3, [r1, r3]
 800540c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005410:	4618      	mov	r0, r3
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40023800 	.word	0x40023800
 8005418:	08009aec 	.word	0x08009aec

0800541c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b088      	sub	sp, #32
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005434:	2300      	movs	r3, #0
 8005436:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b00      	cmp	r3, #0
 8005442:	d012      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005444:	4b69      	ldr	r3, [pc, #420]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a68      	ldr	r2, [pc, #416]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800544e:	6093      	str	r3, [r2, #8]
 8005450:	4b66      	ldr	r3, [pc, #408]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005458:	4964      	ldr	r1, [pc, #400]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d017      	beq.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005476:	4b5d      	ldr	r3, [pc, #372]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800547c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005484:	4959      	ldr	r1, [pc, #356]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005490:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005494:	d101      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005496:	2301      	movs	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054a2:	2301      	movs	r3, #1
 80054a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d017      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054b2:	4b4e      	ldr	r3, [pc, #312]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	494a      	ldr	r1, [pc, #296]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054d0:	d101      	bne.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054d2:	2301      	movs	r3, #1
 80054d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0320 	and.w	r3, r3, #32
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 808b 	beq.w	8005616 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005500:	4b3a      	ldr	r3, [pc, #232]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005504:	4a39      	ldr	r2, [pc, #228]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800550a:	6413      	str	r3, [r2, #64]	@ 0x40
 800550c:	4b37      	ldr	r3, [pc, #220]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005518:	4b35      	ldr	r3, [pc, #212]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800551e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005524:	f7fd fa38 	bl	8002998 <HAL_GetTick>
 8005528:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800552a:	e008      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800552c:	f7fd fa34 	bl	8002998 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b64      	cmp	r3, #100	@ 0x64
 8005538:	d901      	bls.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e357      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800553e:	4b2c      	ldr	r3, [pc, #176]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800554a:	4b28      	ldr	r3, [pc, #160]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800554e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005552:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d035      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d02e      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005568:	4b20      	ldr	r3, [pc, #128]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800556c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005570:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005572:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005576:	4a1d      	ldr	r2, [pc, #116]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005578:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800557c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800557e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a1a      	ldr	r2, [pc, #104]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005584:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005588:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800558a:	4a18      	ldr	r2, [pc, #96]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005590:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b01      	cmp	r3, #1
 800559a:	d114      	bne.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd f9fc 	bl	8002998 <HAL_GetTick>
 80055a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a2:	e00a      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055a4:	f7fd f9f8 	bl	8002998 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d901      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e319      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ee      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055d2:	d111      	bne.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055d4:	4b05      	ldr	r3, [pc, #20]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80055e0:	4b04      	ldr	r3, [pc, #16]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055e2:	400b      	ands	r3, r1
 80055e4:	4901      	ldr	r1, [pc, #4]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	608b      	str	r3, [r1, #8]
 80055ea:	e00b      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055ec:	40023800 	.word	0x40023800
 80055f0:	40007000 	.word	0x40007000
 80055f4:	0ffffcff 	.word	0x0ffffcff
 80055f8:	4baa      	ldr	r3, [pc, #680]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4aa9      	ldr	r2, [pc, #676]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005602:	6093      	str	r3, [r2, #8]
 8005604:	4ba7      	ldr	r3, [pc, #668]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005606:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005610:	49a4      	ldr	r1, [pc, #656]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	4313      	orrs	r3, r2
 8005614:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0310 	and.w	r3, r3, #16
 800561e:	2b00      	cmp	r3, #0
 8005620:	d010      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005622:	4ba0      	ldr	r3, [pc, #640]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005624:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005628:	4a9e      	ldr	r2, [pc, #632]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800562e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005632:	4b9c      	ldr	r3, [pc, #624]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005634:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800563c:	4999      	ldr	r1, [pc, #612]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005650:	4b94      	ldr	r3, [pc, #592]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005652:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005656:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800565e:	4991      	ldr	r1, [pc, #580]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005672:	4b8c      	ldr	r3, [pc, #560]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005678:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005680:	4988      	ldr	r1, [pc, #544]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005694:	4b83      	ldr	r3, [pc, #524]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80056a2:	4980      	ldr	r1, [pc, #512]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056b6:	4b7b      	ldr	r3, [pc, #492]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056bc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	4977      	ldr	r1, [pc, #476]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056d8:	4b72      	ldr	r3, [pc, #456]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056de:	f023 0203 	bic.w	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e6:	496f      	ldr	r1, [pc, #444]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056fa:	4b6a      	ldr	r3, [pc, #424]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005700:	f023 020c 	bic.w	r2, r3, #12
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005708:	4966      	ldr	r1, [pc, #408]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800571c:	4b61      	ldr	r3, [pc, #388]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005722:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572a:	495e      	ldr	r1, [pc, #376]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800573e:	4b59      	ldr	r3, [pc, #356]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005744:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800574c:	4955      	ldr	r1, [pc, #340]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005760:	4b50      	ldr	r3, [pc, #320]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005766:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	494d      	ldr	r1, [pc, #308]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005782:	4b48      	ldr	r3, [pc, #288]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005788:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005790:	4944      	ldr	r1, [pc, #272]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057a4:	4b3f      	ldr	r3, [pc, #252]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057aa:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b2:	493c      	ldr	r1, [pc, #240]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057c6:	4b37      	ldr	r3, [pc, #220]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d4:	4933      	ldr	r1, [pc, #204]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057e8:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057f6:	492b      	ldr	r1, [pc, #172]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d011      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800580a:	4b26      	ldr	r3, [pc, #152]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005810:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005818:	4922      	ldr	r1, [pc, #136]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005824:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005828:	d101      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800582a:	2301      	movs	r3, #1
 800582c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d001      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800583a:	2301      	movs	r3, #1
 800583c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800584a:	4b16      	ldr	r3, [pc, #88]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005850:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005858:	4912      	ldr	r1, [pc, #72]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800586c:	4b0d      	ldr	r3, [pc, #52]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800586e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005872:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587c:	4909      	ldr	r1, [pc, #36]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d006      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 80d9 	beq.w	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005898:	4b02      	ldr	r3, [pc, #8]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a01      	ldr	r2, [pc, #4]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800589e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80058a2:	e001      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80058a4:	40023800 	.word	0x40023800
 80058a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058aa:	f7fd f875 	bl	8002998 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058b2:	f7fd f871 	bl	8002998 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b64      	cmp	r3, #100	@ 0x64
 80058be:	d901      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e194      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c4:	4b6c      	ldr	r3, [pc, #432]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d021      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11d      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058e4:	4b64      	ldr	r3, [pc, #400]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ea:	0c1b      	lsrs	r3, r3, #16
 80058ec:	f003 0303 	and.w	r3, r3, #3
 80058f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058f2:	4b61      	ldr	r3, [pc, #388]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f8:	0e1b      	lsrs	r3, r3, #24
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	019a      	lsls	r2, r3, #6
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	061b      	lsls	r3, r3, #24
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	071b      	lsls	r3, r3, #28
 8005918:	4957      	ldr	r1, [pc, #348]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005930:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005934:	d00a      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02e      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594a:	d129      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800594c:	4b4a      	ldr	r3, [pc, #296]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800594e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005952:	0c1b      	lsrs	r3, r3, #16
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800595a:	4b47      	ldr	r3, [pc, #284]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800595c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005960:	0f1b      	lsrs	r3, r3, #28
 8005962:	f003 0307 	and.w	r3, r3, #7
 8005966:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	019a      	lsls	r2, r3, #6
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	041b      	lsls	r3, r3, #16
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	061b      	lsls	r3, r3, #24
 800597a:	431a      	orrs	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	071b      	lsls	r3, r3, #28
 8005980:	493d      	ldr	r1, [pc, #244]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005988:	4b3b      	ldr	r3, [pc, #236]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800598a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800598e:	f023 021f 	bic.w	r2, r3, #31
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	3b01      	subs	r3, #1
 8005998:	4937      	ldr	r1, [pc, #220]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01d      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059ac:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b2:	0e1b      	lsrs	r3, r3, #24
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059c0:	0f1b      	lsrs	r3, r3, #28
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	019a      	lsls	r2, r3, #6
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	041b      	lsls	r3, r3, #16
 80059d4:	431a      	orrs	r2, r3
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	061b      	lsls	r3, r3, #24
 80059da:	431a      	orrs	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	071b      	lsls	r3, r3, #28
 80059e0:	4925      	ldr	r1, [pc, #148]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d011      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	019a      	lsls	r2, r3, #6
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	431a      	orrs	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	061b      	lsls	r3, r3, #24
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	071b      	lsls	r3, r3, #28
 8005a10:	4919      	ldr	r1, [pc, #100]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a18:	4b17      	ldr	r3, [pc, #92]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a16      	ldr	r2, [pc, #88]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005a22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a24:	f7fc ffb8 	bl	8002998 <HAL_GetTick>
 8005a28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a2c:	f7fc ffb4 	bl	8002998 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	@ 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e0d7      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	f040 80cd 	bne.w	8005bec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a52:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a08      	ldr	r2, [pc, #32]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a5e:	f7fc ff9b 	bl	8002998 <HAL_GetTick>
 8005a62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a64:	e00a      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a66:	f7fc ff97 	bl	8002998 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b64      	cmp	r3, #100	@ 0x64
 8005a72:	d903      	bls.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0ba      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a78:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a7c:	4b5e      	ldr	r3, [pc, #376]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a88:	d0ed      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d02e      	beq.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d12a      	bne.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ab2:	4b51      	ldr	r3, [pc, #324]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ab8:	0c1b      	lsrs	r3, r3, #16
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac6:	0f1b      	lsrs	r3, r3, #28
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	019a      	lsls	r2, r3, #6
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	041b      	lsls	r3, r3, #16
 8005ad8:	431a      	orrs	r2, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	061b      	lsls	r3, r3, #24
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	071b      	lsls	r3, r3, #28
 8005ae6:	4944      	ldr	r1, [pc, #272]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005aee:	4b42      	ldr	r3, [pc, #264]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005af4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afc:	3b01      	subs	r3, #1
 8005afe:	021b      	lsls	r3, r3, #8
 8005b00:	493d      	ldr	r1, [pc, #244]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d022      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1c:	d11d      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b1e:	4b36      	ldr	r3, [pc, #216]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b24:	0e1b      	lsrs	r3, r3, #24
 8005b26:	f003 030f 	and.w	r3, r3, #15
 8005b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b2c:	4b32      	ldr	r3, [pc, #200]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b32:	0f1b      	lsrs	r3, r3, #28
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	695b      	ldr	r3, [r3, #20]
 8005b3e:	019a      	lsls	r2, r3, #6
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	041b      	lsls	r3, r3, #16
 8005b46:	431a      	orrs	r2, r3
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	061b      	lsls	r3, r3, #24
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	071b      	lsls	r3, r3, #28
 8005b52:	4929      	ldr	r1, [pc, #164]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d028      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b66:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b74:	4b20      	ldr	r3, [pc, #128]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b7a:	0c1b      	lsrs	r3, r3, #16
 8005b7c:	f003 0303 	and.w	r3, r3, #3
 8005b80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	019a      	lsls	r2, r3, #6
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	431a      	orrs	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	69db      	ldr	r3, [r3, #28]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	4917      	ldr	r1, [pc, #92]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ba2:	4b15      	ldr	r3, [pc, #84]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	4911      	ldr	r1, [pc, #68]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc4:	f7fc fee8 	bl	8002998 <HAL_GetTick>
 8005bc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bca:	e008      	b.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bcc:	f7fc fee4 	bl	8002998 <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b64      	cmp	r3, #100	@ 0x64
 8005bd8:	d901      	bls.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bda:	2303      	movs	r3, #3
 8005bdc:	e007      	b.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bde:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bea:	d1ef      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3720      	adds	r7, #32
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800

08005bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e049      	b.n	8005ca2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fc fbea 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	f000 feb2 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d001      	beq.n	8005cc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e04c      	b.n	8005d5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	@ (8005d6c <HAL_TIM_Base_Start+0xc0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d022      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cde:	d01d      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a22      	ldr	r2, [pc, #136]	@ (8005d70 <HAL_TIM_Base_Start+0xc4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a21      	ldr	r2, [pc, #132]	@ (8005d74 <HAL_TIM_Base_Start+0xc8>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <HAL_TIM_Base_Start+0xcc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1e      	ldr	r2, [pc, #120]	@ (8005d7c <HAL_TIM_Base_Start+0xd0>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <HAL_TIM_Base_Start+0xd4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_Base_Start+0x70>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1b      	ldr	r2, [pc, #108]	@ (8005d84 <HAL_TIM_Base_Start+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d115      	bne.n	8005d48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689a      	ldr	r2, [r3, #8]
 8005d22:	4b19      	ldr	r3, [pc, #100]	@ (8005d88 <HAL_TIM_Base_Start+0xdc>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b06      	cmp	r3, #6
 8005d2c:	d015      	beq.n	8005d5a <HAL_TIM_Base_Start+0xae>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d34:	d011      	beq.n	8005d5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0201 	orr.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d46:	e008      	b.n	8005d5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	e000      	b.n	8005d5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40001800 	.word	0x40001800
 8005d88:	00010007 	.word	0x00010007

08005d8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10f      	bne.n	8005dc4 <HAL_TIM_Base_Stop+0x38>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	f240 4344 	movw	r3, #1092	@ 0x444
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d107      	bne.n	8005dc4 <HAL_TIM_Base_Stop+0x38>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e049      	b.n	8005e80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fc fa8b 	bl	800231c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3304      	adds	r3, #4
 8005e16:	4619      	mov	r1, r3
 8005e18:	4610      	mov	r0, r2
 8005e1a:	f000 fdc3 	bl	80069a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <HAL_TIM_PWM_Start_IT+0x28>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	bf14      	ite	ne
 8005ea8:	2301      	movne	r3, #1
 8005eaa:	2300      	moveq	r3, #0
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	e03c      	b.n	8005f2a <HAL_TIM_PWM_Start_IT+0xa2>
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	2b04      	cmp	r3, #4
 8005eb4:	d109      	bne.n	8005eca <HAL_TIM_PWM_Start_IT+0x42>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	bf14      	ite	ne
 8005ec2:	2301      	movne	r3, #1
 8005ec4:	2300      	moveq	r3, #0
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	e02f      	b.n	8005f2a <HAL_TIM_PWM_Start_IT+0xa2>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d109      	bne.n	8005ee4 <HAL_TIM_PWM_Start_IT+0x5c>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e022      	b.n	8005f2a <HAL_TIM_PWM_Start_IT+0xa2>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	2b0c      	cmp	r3, #12
 8005ee8:	d109      	bne.n	8005efe <HAL_TIM_PWM_Start_IT+0x76>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	e015      	b.n	8005f2a <HAL_TIM_PWM_Start_IT+0xa2>
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d109      	bne.n	8005f18 <HAL_TIM_PWM_Start_IT+0x90>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	bf14      	ite	ne
 8005f10:	2301      	movne	r3, #1
 8005f12:	2300      	moveq	r3, #0
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	e008      	b.n	8005f2a <HAL_TIM_PWM_Start_IT+0xa2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	bf14      	ite	ne
 8005f24:	2301      	movne	r3, #1
 8005f26:	2300      	moveq	r3, #0
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d001      	beq.n	8005f32 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0dd      	b.n	80060ee <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start_IT+0xba>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f40:	e023      	b.n	8005f8a <HAL_TIM_PWM_Start_IT+0x102>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d104      	bne.n	8005f52 <HAL_TIM_PWM_Start_IT+0xca>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f50:	e01b      	b.n	8005f8a <HAL_TIM_PWM_Start_IT+0x102>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d104      	bne.n	8005f62 <HAL_TIM_PWM_Start_IT+0xda>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f60:	e013      	b.n	8005f8a <HAL_TIM_PWM_Start_IT+0x102>
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b0c      	cmp	r3, #12
 8005f66:	d104      	bne.n	8005f72 <HAL_TIM_PWM_Start_IT+0xea>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2202      	movs	r2, #2
 8005f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f70:	e00b      	b.n	8005f8a <HAL_TIM_PWM_Start_IT+0x102>
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d104      	bne.n	8005f82 <HAL_TIM_PWM_Start_IT+0xfa>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f80:	e003      	b.n	8005f8a <HAL_TIM_PWM_Start_IT+0x102>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2202      	movs	r2, #2
 8005f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b0c      	cmp	r3, #12
 8005f8e:	d841      	bhi.n	8006014 <HAL_TIM_PWM_Start_IT+0x18c>
 8005f90:	a201      	add	r2, pc, #4	@ (adr r2, 8005f98 <HAL_TIM_PWM_Start_IT+0x110>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fcd 	.word	0x08005fcd
 8005f9c:	08006015 	.word	0x08006015
 8005fa0:	08006015 	.word	0x08006015
 8005fa4:	08006015 	.word	0x08006015
 8005fa8:	08005fdf 	.word	0x08005fdf
 8005fac:	08006015 	.word	0x08006015
 8005fb0:	08006015 	.word	0x08006015
 8005fb4:	08006015 	.word	0x08006015
 8005fb8:	08005ff1 	.word	0x08005ff1
 8005fbc:	08006015 	.word	0x08006015
 8005fc0:	08006015 	.word	0x08006015
 8005fc4:	08006015 	.word	0x08006015
 8005fc8:	08006003 	.word	0x08006003
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68da      	ldr	r2, [r3, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0202 	orr.w	r2, r2, #2
 8005fda:	60da      	str	r2, [r3, #12]
      break;
 8005fdc:	e01d      	b.n	800601a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0204 	orr.w	r2, r2, #4
 8005fec:	60da      	str	r2, [r3, #12]
      break;
 8005fee:	e014      	b.n	800601a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0208 	orr.w	r2, r2, #8
 8005ffe:	60da      	str	r2, [r3, #12]
      break;
 8006000:	e00b      	b.n	800601a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0210 	orr.w	r2, r2, #16
 8006010:	60da      	str	r2, [r3, #12]
      break;
 8006012:	e002      	b.n	800601a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	73fb      	strb	r3, [r7, #15]
      break;
 8006018:	bf00      	nop
  }

  if (status == HAL_OK)
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d165      	bne.n	80060ec <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2201      	movs	r2, #1
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f000 ffc5 	bl	8006fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a31      	ldr	r2, [pc, #196]	@ (80060f8 <HAL_TIM_PWM_Start_IT+0x270>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d004      	beq.n	8006042 <HAL_TIM_PWM_Start_IT+0x1ba>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a2f      	ldr	r2, [pc, #188]	@ (80060fc <HAL_TIM_PWM_Start_IT+0x274>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d101      	bne.n	8006046 <HAL_TIM_PWM_Start_IT+0x1be>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <HAL_TIM_PWM_Start_IT+0x1c0>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d007      	beq.n	800605c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800605a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a25      	ldr	r2, [pc, #148]	@ (80060f8 <HAL_TIM_PWM_Start_IT+0x270>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d022      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606e:	d01d      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a22      	ldr	r2, [pc, #136]	@ (8006100 <HAL_TIM_PWM_Start_IT+0x278>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d018      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a21      	ldr	r2, [pc, #132]	@ (8006104 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d013      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a1f      	ldr	r2, [pc, #124]	@ (8006108 <HAL_TIM_PWM_Start_IT+0x280>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00e      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a1a      	ldr	r2, [pc, #104]	@ (80060fc <HAL_TIM_PWM_Start_IT+0x274>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d009      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_TIM_PWM_Start_IT+0x284>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d004      	beq.n	80060ac <HAL_TIM_PWM_Start_IT+0x224>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006110 <HAL_TIM_PWM_Start_IT+0x288>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d115      	bne.n	80060d8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	4b18      	ldr	r3, [pc, #96]	@ (8006114 <HAL_TIM_PWM_Start_IT+0x28c>)
 80060b4:	4013      	ands	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b06      	cmp	r3, #6
 80060bc:	d015      	beq.n	80060ea <HAL_TIM_PWM_Start_IT+0x262>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060c4:	d011      	beq.n	80060ea <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060d6:	e008      	b.n	80060ea <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	e000      	b.n	80060ec <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40010000 	.word	0x40010000
 80060fc:	40010400 	.word	0x40010400
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40001800 	.word	0x40001800
 8006114:	00010007 	.word	0x00010007

08006118 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b0c      	cmp	r3, #12
 800612a:	d841      	bhi.n	80061b0 <HAL_TIM_PWM_Stop_IT+0x98>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006169 	.word	0x08006169
 8006138:	080061b1 	.word	0x080061b1
 800613c:	080061b1 	.word	0x080061b1
 8006140:	080061b1 	.word	0x080061b1
 8006144:	0800617b 	.word	0x0800617b
 8006148:	080061b1 	.word	0x080061b1
 800614c:	080061b1 	.word	0x080061b1
 8006150:	080061b1 	.word	0x080061b1
 8006154:	0800618d 	.word	0x0800618d
 8006158:	080061b1 	.word	0x080061b1
 800615c:	080061b1 	.word	0x080061b1
 8006160:	080061b1 	.word	0x080061b1
 8006164:	0800619f 	.word	0x0800619f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0202 	bic.w	r2, r2, #2
 8006176:	60da      	str	r2, [r3, #12]
      break;
 8006178:	e01d      	b.n	80061b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0204 	bic.w	r2, r2, #4
 8006188:	60da      	str	r2, [r3, #12]
      break;
 800618a:	e014      	b.n	80061b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0208 	bic.w	r2, r2, #8
 800619a:	60da      	str	r2, [r3, #12]
      break;
 800619c:	e00b      	b.n	80061b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0210 	bic.w	r2, r2, #16
 80061ac:	60da      	str	r2, [r3, #12]
      break;
 80061ae:	e002      	b.n	80061b6 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	73fb      	strb	r3, [r7, #15]
      break;
 80061b4:	bf00      	nop
  }

  if (status == HAL_OK)
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d171      	bne.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2200      	movs	r2, #0
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fef7 	bl	8006fb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a37      	ldr	r2, [pc, #220]	@ (80062ac <HAL_TIM_PWM_Stop_IT+0x194>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d004      	beq.n	80061de <HAL_TIM_PWM_Stop_IT+0xc6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a35      	ldr	r2, [pc, #212]	@ (80062b0 <HAL_TIM_PWM_Stop_IT+0x198>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_PWM_Stop_IT+0xca>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <HAL_TIM_PWM_Stop_IT+0xcc>
 80061e2:	2300      	movs	r3, #0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d017      	beq.n	8006218 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6a1a      	ldr	r2, [r3, #32]
 80061ee:	f241 1311 	movw	r3, #4369	@ 0x1111
 80061f2:	4013      	ands	r3, r2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10f      	bne.n	8006218 <HAL_TIM_PWM_Stop_IT+0x100>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6a1a      	ldr	r2, [r3, #32]
 80061fe:	f240 4344 	movw	r3, #1092	@ 0x444
 8006202:	4013      	ands	r3, r2
 8006204:	2b00      	cmp	r3, #0
 8006206:	d107      	bne.n	8006218 <HAL_TIM_PWM_Stop_IT+0x100>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006216:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006222:	4013      	ands	r3, r2
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10f      	bne.n	8006248 <HAL_TIM_PWM_Stop_IT+0x130>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006232:	4013      	ands	r3, r2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d107      	bne.n	8006248 <HAL_TIM_PWM_Stop_IT+0x130>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0201 	bic.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d104      	bne.n	8006258 <HAL_TIM_PWM_Stop_IT+0x140>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006256:	e023      	b.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b04      	cmp	r3, #4
 800625c:	d104      	bne.n	8006268 <HAL_TIM_PWM_Stop_IT+0x150>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006266:	e01b      	b.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b08      	cmp	r3, #8
 800626c:	d104      	bne.n	8006278 <HAL_TIM_PWM_Stop_IT+0x160>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006276:	e013      	b.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b0c      	cmp	r3, #12
 800627c:	d104      	bne.n	8006288 <HAL_TIM_PWM_Stop_IT+0x170>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006286:	e00b      	b.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b10      	cmp	r3, #16
 800628c:	d104      	bne.n	8006298 <HAL_TIM_PWM_Stop_IT+0x180>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006296:	e003      	b.n	80062a0 <HAL_TIM_PWM_Stop_IT+0x188>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d101      	bne.n	80062c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e08f      	b.n	80063e8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d106      	bne.n	80062e2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f7fc f841 	bl	8002364 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6899      	ldr	r1, [r3, #8]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	4b3e      	ldr	r3, [pc, #248]	@ (80063f0 <HAL_TIM_Encoder_Init+0x13c>)
 80062f6:	400b      	ands	r3, r1
 80062f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 fb4d 	bl	80069a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4b31      	ldr	r3, [pc, #196]	@ (80063f4 <HAL_TIM_Encoder_Init+0x140>)
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	689a      	ldr	r2, [r3, #8]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	699b      	ldr	r3, [r3, #24]
 800633c:	021b      	lsls	r3, r3, #8
 800633e:	4313      	orrs	r3, r2
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	4b2b      	ldr	r3, [pc, #172]	@ (80063f8 <HAL_TIM_Encoder_Init+0x144>)
 800634a:	4013      	ands	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4b2a      	ldr	r3, [pc, #168]	@ (80063fc <HAL_TIM_Encoder_Init+0x148>)
 8006352:	4013      	ands	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	021b      	lsls	r3, r3, #8
 8006360:	4313      	orrs	r3, r2
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	011a      	lsls	r2, r3, #4
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	031b      	lsls	r3, r3, #12
 8006374:	4313      	orrs	r3, r2
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006382:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800638a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	4313      	orrs	r3, r2
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	fffebff8 	.word	0xfffebff8
 80063f4:	fffffcfc 	.word	0xfffffcfc
 80063f8:	fffff3f3 	.word	0xfffff3f3
 80063fc:	ffff0f0f 	.word	0xffff0f0f

08006400 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006410:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006418:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006420:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006428:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d110      	bne.n	8006452 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d102      	bne.n	800643c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006436:	7b7b      	ldrb	r3, [r7, #13]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d001      	beq.n	8006440 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e069      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006450:	e031      	b.n	80064b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d110      	bne.n	800647a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d102      	bne.n	8006464 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800645e:	7b3b      	ldrb	r3, [r7, #12]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d001      	beq.n	8006468 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e055      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006478:	e01d      	b.n	80064b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800647a:	7bfb      	ldrb	r3, [r7, #15]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d108      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006480:	7bbb      	ldrb	r3, [r7, #14]
 8006482:	2b01      	cmp	r3, #1
 8006484:	d105      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d102      	bne.n	8006492 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800648c:	7b3b      	ldrb	r3, [r7, #12]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d001      	beq.n	8006496 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e03e      	b.n	8006514 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2202      	movs	r2, #2
 80064aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2202      	movs	r2, #2
 80064b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_TIM_Encoder_Start+0xc4>
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d008      	beq.n	80064d4 <HAL_TIM_Encoder_Start+0xd4>
 80064c2:	e00f      	b.n	80064e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2201      	movs	r2, #1
 80064ca:	2100      	movs	r1, #0
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fd73 	bl	8006fb8 <TIM_CCxChannelCmd>
      break;
 80064d2:	e016      	b.n	8006502 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2201      	movs	r2, #1
 80064da:	2104      	movs	r1, #4
 80064dc:	4618      	mov	r0, r3
 80064de:	f000 fd6b 	bl	8006fb8 <TIM_CCxChannelCmd>
      break;
 80064e2:	e00e      	b.n	8006502 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2201      	movs	r2, #1
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fd63 	bl	8006fb8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2201      	movs	r2, #1
 80064f8:	2104      	movs	r1, #4
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fd5c 	bl	8006fb8 <TIM_CCxChannelCmd>
      break;
 8006500:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d020      	beq.n	8006580 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d01b      	beq.n	8006580 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f06f 0202 	mvn.w	r2, #2
 8006550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f003 0303 	and.w	r3, r3, #3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d003      	beq.n	800656e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fa08 	bl	800697c <HAL_TIM_IC_CaptureCallback>
 800656c:	e005      	b.n	800657a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f9fa 	bl	8006968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fa f9b1 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	2b00      	cmp	r3, #0
 8006588:	d020      	beq.n	80065cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f003 0304 	and.w	r3, r3, #4
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f06f 0204 	mvn.w	r2, #4
 800659c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9e2 	bl	800697c <HAL_TIM_IC_CaptureCallback>
 80065b8:	e005      	b.n	80065c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9d4 	bl	8006968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7fa f98b 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f003 0308 	and.w	r3, r3, #8
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d020      	beq.n	8006618 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01b      	beq.n	8006618 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0208 	mvn.w	r2, #8
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2204      	movs	r2, #4
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f9bc 	bl	800697c <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f9ae 	bl	8006968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7fa f965 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0310 	and.w	r3, r3, #16
 800661e:	2b00      	cmp	r3, #0
 8006620:	d020      	beq.n	8006664 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01b      	beq.n	8006664 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f996 	bl	800697c <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f988 	bl	8006968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fa f93f 	bl	80008dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00c      	beq.n	8006688 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0201 	mvn.w	r2, #1
 8006680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f966 	bl	8006954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800668e:	2b00      	cmp	r3, #0
 8006690:	d104      	bne.n	800669c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00c      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d007      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80066ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fd3f 	bl	8007134 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00c      	beq.n	80066da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80066d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fd37 	bl	8007148 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00c      	beq.n	80066fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d007      	beq.n	80066fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f949 	bl	8006990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00c      	beq.n	8006722 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d007      	beq.n	8006722 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f06f 0220 	mvn.w	r2, #32
 800671a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fcff 	bl	8007120 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006746:	2302      	movs	r3, #2
 8006748:	e0ff      	b.n	800694a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b14      	cmp	r3, #20
 8006756:	f200 80f0 	bhi.w	800693a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800675a:	a201      	add	r2, pc, #4	@ (adr r2, 8006760 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800675c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006760:	080067b5 	.word	0x080067b5
 8006764:	0800693b 	.word	0x0800693b
 8006768:	0800693b 	.word	0x0800693b
 800676c:	0800693b 	.word	0x0800693b
 8006770:	080067f5 	.word	0x080067f5
 8006774:	0800693b 	.word	0x0800693b
 8006778:	0800693b 	.word	0x0800693b
 800677c:	0800693b 	.word	0x0800693b
 8006780:	08006837 	.word	0x08006837
 8006784:	0800693b 	.word	0x0800693b
 8006788:	0800693b 	.word	0x0800693b
 800678c:	0800693b 	.word	0x0800693b
 8006790:	08006877 	.word	0x08006877
 8006794:	0800693b 	.word	0x0800693b
 8006798:	0800693b 	.word	0x0800693b
 800679c:	0800693b 	.word	0x0800693b
 80067a0:	080068b9 	.word	0x080068b9
 80067a4:	0800693b 	.word	0x0800693b
 80067a8:	0800693b 	.word	0x0800693b
 80067ac:	0800693b 	.word	0x0800693b
 80067b0:	080068f9 	.word	0x080068f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68b9      	ldr	r1, [r7, #8]
 80067ba:	4618      	mov	r0, r3
 80067bc:	f000 f99e 	bl	8006afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0208 	orr.w	r2, r2, #8
 80067ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0204 	bic.w	r2, r2, #4
 80067de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6999      	ldr	r1, [r3, #24]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	691a      	ldr	r2, [r3, #16]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	619a      	str	r2, [r3, #24]
      break;
 80067f2:	e0a5      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f000 f9f0 	bl	8006be0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699a      	ldr	r2, [r3, #24]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800680e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	699a      	ldr	r2, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800681e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6999      	ldr	r1, [r3, #24]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	021a      	lsls	r2, r3, #8
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	619a      	str	r2, [r3, #24]
      break;
 8006834:	e084      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 fa47 	bl	8006cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f042 0208 	orr.w	r2, r2, #8
 8006850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	69da      	ldr	r2, [r3, #28]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f022 0204 	bic.w	r2, r2, #4
 8006860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	69d9      	ldr	r1, [r3, #28]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	61da      	str	r2, [r3, #28]
      break;
 8006874:	e064      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	4618      	mov	r0, r3
 800687e:	f000 fa9d 	bl	8006dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	69da      	ldr	r2, [r3, #28]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	69da      	ldr	r2, [r3, #28]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69d9      	ldr	r1, [r3, #28]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	021a      	lsls	r2, r3, #8
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	61da      	str	r2, [r3, #28]
      break;
 80068b6:	e043      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fad4 	bl	8006e6c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0208 	orr.w	r2, r2, #8
 80068d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0204 	bic.w	r2, r2, #4
 80068e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	691a      	ldr	r2, [r3, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80068f6:	e023      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fb06 	bl	8006f10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006912:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006922:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	021a      	lsls	r2, r3, #8
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006938:	e002      	b.n	8006940 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
      break;
 800693e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop

08006954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006970:	bf00      	nop
 8006972:	370c      	adds	r7, #12
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr

08006990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a46      	ldr	r2, [pc, #280]	@ (8006ad0 <TIM_Base_SetConfig+0x12c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d013      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069c2:	d00f      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a43      	ldr	r2, [pc, #268]	@ (8006ad4 <TIM_Base_SetConfig+0x130>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00b      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a42      	ldr	r2, [pc, #264]	@ (8006ad8 <TIM_Base_SetConfig+0x134>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d007      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a41      	ldr	r2, [pc, #260]	@ (8006adc <TIM_Base_SetConfig+0x138>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d003      	beq.n	80069e4 <TIM_Base_SetConfig+0x40>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a40      	ldr	r2, [pc, #256]	@ (8006ae0 <TIM_Base_SetConfig+0x13c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d108      	bne.n	80069f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a35      	ldr	r2, [pc, #212]	@ (8006ad0 <TIM_Base_SetConfig+0x12c>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d02b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a04:	d027      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a32      	ldr	r2, [pc, #200]	@ (8006ad4 <TIM_Base_SetConfig+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d023      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a31      	ldr	r2, [pc, #196]	@ (8006ad8 <TIM_Base_SetConfig+0x134>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01f      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a30      	ldr	r2, [pc, #192]	@ (8006adc <TIM_Base_SetConfig+0x138>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a2f      	ldr	r2, [pc, #188]	@ (8006ae0 <TIM_Base_SetConfig+0x13c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a2e      	ldr	r2, [pc, #184]	@ (8006ae4 <TIM_Base_SetConfig+0x140>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d013      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a2d      	ldr	r2, [pc, #180]	@ (8006ae8 <TIM_Base_SetConfig+0x144>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d00f      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a2c      	ldr	r2, [pc, #176]	@ (8006aec <TIM_Base_SetConfig+0x148>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00b      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a2b      	ldr	r2, [pc, #172]	@ (8006af0 <TIM_Base_SetConfig+0x14c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d007      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a2a      	ldr	r2, [pc, #168]	@ (8006af4 <TIM_Base_SetConfig+0x150>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a29      	ldr	r2, [pc, #164]	@ (8006af8 <TIM_Base_SetConfig+0x154>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d108      	bne.n	8006a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a10      	ldr	r2, [pc, #64]	@ (8006ad0 <TIM_Base_SetConfig+0x12c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d003      	beq.n	8006a9c <TIM_Base_SetConfig+0xf8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a12      	ldr	r2, [pc, #72]	@ (8006ae0 <TIM_Base_SetConfig+0x13c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d103      	bne.n	8006aa4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	691a      	ldr	r2, [r3, #16]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0301 	and.w	r3, r3, #1
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d105      	bne.n	8006ac2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f023 0201 	bic.w	r2, r3, #1
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	611a      	str	r2, [r3, #16]
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40010400 	.word	0x40010400
 8006ae4:	40014000 	.word	0x40014000
 8006ae8:	40014400 	.word	0x40014400
 8006aec:	40014800 	.word	0x40014800
 8006af0:	40001800 	.word	0x40001800
 8006af4:	40001c00 	.word	0x40001c00
 8006af8:	40002000 	.word	0x40002000

08006afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6a1b      	ldr	r3, [r3, #32]
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	f023 0201 	bic.w	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd4 <TIM_OC1_SetConfig+0xd8>)
 8006b28:	4013      	ands	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0303 	bic.w	r3, r3, #3
 8006b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f023 0302 	bic.w	r3, r3, #2
 8006b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a21      	ldr	r2, [pc, #132]	@ (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC1_SetConfig+0x64>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a20      	ldr	r2, [pc, #128]	@ (8006bdc <TIM_OC1_SetConfig+0xe0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10c      	bne.n	8006b7a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0308 	bic.w	r3, r3, #8
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	f023 0304 	bic.w	r3, r3, #4
 8006b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a16      	ldr	r2, [pc, #88]	@ (8006bd8 <TIM_OC1_SetConfig+0xdc>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_OC1_SetConfig+0x8e>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a15      	ldr	r2, [pc, #84]	@ (8006bdc <TIM_OC1_SetConfig+0xe0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d111      	bne.n	8006bae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	693a      	ldr	r2, [r7, #16]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	697a      	ldr	r2, [r7, #20]
 8006bc6:	621a      	str	r2, [r3, #32]
}
 8006bc8:	bf00      	nop
 8006bca:	371c      	adds	r7, #28
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	fffeff8f 	.word	0xfffeff8f
 8006bd8:	40010000 	.word	0x40010000
 8006bdc:	40010400 	.word	0x40010400

08006be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b087      	sub	sp, #28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	f023 0210 	bic.w	r2, r3, #16
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8006cc4 <TIM_OC2_SetConfig+0xe4>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	021b      	lsls	r3, r3, #8
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0320 	bic.w	r3, r3, #32
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	697a      	ldr	r2, [r7, #20]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a23      	ldr	r2, [pc, #140]	@ (8006cc8 <TIM_OC2_SetConfig+0xe8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d003      	beq.n	8006c48 <TIM_OC2_SetConfig+0x68>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4a22      	ldr	r2, [pc, #136]	@ (8006ccc <TIM_OC2_SetConfig+0xec>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d10d      	bne.n	8006c64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a18      	ldr	r2, [pc, #96]	@ (8006cc8 <TIM_OC2_SetConfig+0xe8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d003      	beq.n	8006c74 <TIM_OC2_SetConfig+0x94>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <TIM_OC2_SetConfig+0xec>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d113      	bne.n	8006c9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	feff8fff 	.word	0xfeff8fff
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400

08006cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a1b      	ldr	r3, [r3, #32]
 8006ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8006db0 <TIM_OC3_SetConfig+0xe0>)
 8006cfc:	4013      	ands	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	021b      	lsls	r3, r3, #8
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a22      	ldr	r2, [pc, #136]	@ (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_OC3_SetConfig+0x66>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a21      	ldr	r2, [pc, #132]	@ (8006db8 <TIM_OC3_SetConfig+0xe8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d10d      	bne.n	8006d52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	021b      	lsls	r3, r3, #8
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a17      	ldr	r2, [pc, #92]	@ (8006db4 <TIM_OC3_SetConfig+0xe4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d003      	beq.n	8006d62 <TIM_OC3_SetConfig+0x92>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a16      	ldr	r2, [pc, #88]	@ (8006db8 <TIM_OC3_SetConfig+0xe8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d113      	bne.n	8006d8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	011b      	lsls	r3, r3, #4
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685a      	ldr	r2, [r3, #4]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	621a      	str	r2, [r3, #32]
}
 8006da4:	bf00      	nop
 8006da6:	371c      	adds	r7, #28
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	fffeff8f 	.word	0xfffeff8f
 8006db4:	40010000 	.word	0x40010000
 8006db8:	40010400 	.word	0x40010400

08006dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b087      	sub	sp, #28
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4b1e      	ldr	r3, [pc, #120]	@ (8006e60 <TIM_OC4_SetConfig+0xa4>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	021b      	lsls	r3, r3, #8
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	031b      	lsls	r3, r3, #12
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a13      	ldr	r2, [pc, #76]	@ (8006e64 <TIM_OC4_SetConfig+0xa8>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_OC4_SetConfig+0x68>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a12      	ldr	r2, [pc, #72]	@ (8006e68 <TIM_OC4_SetConfig+0xac>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d109      	bne.n	8006e38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	695b      	ldr	r3, [r3, #20]
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	693a      	ldr	r2, [r7, #16]
 8006e50:	621a      	str	r2, [r3, #32]
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	feff8fff 	.word	0xfeff8fff
 8006e64:	40010000 	.word	0x40010000
 8006e68:	40010400 	.word	0x40010400

08006e6c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <TIM_OC5_SetConfig+0x98>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006eac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a12      	ldr	r2, [pc, #72]	@ (8006f08 <TIM_OC5_SetConfig+0x9c>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC5_SetConfig+0x5e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a11      	ldr	r2, [pc, #68]	@ (8006f0c <TIM_OC5_SetConfig+0xa0>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d109      	bne.n	8006ede <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	021b      	lsls	r3, r3, #8
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	697a      	ldr	r2, [r7, #20]
 8006ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	fffeff8f 	.word	0xfffeff8f
 8006f08:	40010000 	.word	0x40010000
 8006f0c:	40010400 	.word	0x40010400

08006f10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006fac <TIM_OC6_SetConfig+0x9c>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	051b      	lsls	r3, r3, #20
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a13      	ldr	r2, [pc, #76]	@ (8006fb0 <TIM_OC6_SetConfig+0xa0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC6_SetConfig+0x60>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a12      	ldr	r2, [pc, #72]	@ (8006fb4 <TIM_OC6_SetConfig+0xa4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d109      	bne.n	8006f84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	029b      	lsls	r3, r3, #10
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	621a      	str	r2, [r3, #32]
}
 8006f9e:	bf00      	nop
 8006fa0:	371c      	adds	r7, #28
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	feff8fff 	.word	0xfeff8fff
 8006fb0:	40010000 	.word	0x40010000
 8006fb4:	40010400 	.word	0x40010400

08006fb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b087      	sub	sp, #28
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	f003 031f 	and.w	r3, r3, #31
 8006fca:	2201      	movs	r2, #1
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1a      	ldr	r2, [r3, #32]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	43db      	mvns	r3, r3
 8006fda:	401a      	ands	r2, r3
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6a1a      	ldr	r2, [r3, #32]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d101      	bne.n	800701c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007018:	2302      	movs	r3, #2
 800701a:	e06d      	b.n	80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a30      	ldr	r2, [pc, #192]	@ (8007104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a2f      	ldr	r2, [pc, #188]	@ (8007108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d108      	bne.n	8007062 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007056:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007068:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a20      	ldr	r2, [pc, #128]	@ (8007104 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d022      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800708e:	d01d      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a1d      	ldr	r2, [pc, #116]	@ (800710c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d018      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a1c      	ldr	r2, [pc, #112]	@ (8007110 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d013      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1a      	ldr	r2, [pc, #104]	@ (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d00e      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a15      	ldr	r2, [pc, #84]	@ (8007108 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d009      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a16      	ldr	r2, [pc, #88]	@ (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d004      	beq.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a15      	ldr	r2, [pc, #84]	@ (800711c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d10c      	bne.n	80070e6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40010000 	.word	0x40010000
 8007108:	40010400 	.word	0x40010400
 800710c:	40000400 	.word	0x40000400
 8007110:	40000800 	.word	0x40000800
 8007114:	40000c00 	.word	0x40000c00
 8007118:	40014000 	.word	0x40014000
 800711c:	40001800 	.word	0x40001800

08007120 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007128:	bf00      	nop
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr

08007134 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e040      	b.n	80071f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7fb f992 	bl	80024a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2224      	movs	r2, #36	@ 0x24
 8007188:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0201 	bic.w	r2, r2, #1
 8007198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fe56 	bl	8007e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fbef 	bl	800798c <UART_SetConfig>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e01b      	b.n	80071f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685a      	ldr	r2, [r3, #4]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fed5 	bl	8007f98 <UART_CheckIdleState>
 80071ee:	4603      	mov	r3, r0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	@ 0x28
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	4613      	mov	r3, r2
 8007206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800720c:	2b20      	cmp	r3, #32
 800720e:	d177      	bne.n	8007300 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Transmit+0x24>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e070      	b.n	8007302 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2221      	movs	r2, #33	@ 0x21
 800722c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fb fbb3 	bl	8002998 <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800724c:	d108      	bne.n	8007260 <HAL_UART_Transmit+0x68>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e003      	b.n	8007268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007268:	e02f      	b.n	80072ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	@ 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fee6 	bl	8008046 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d004      	beq.n	800728a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e03b      	b.n	8007302 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10b      	bne.n	80072a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800729e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	3302      	adds	r3, #2
 80072a4:	61bb      	str	r3, [r7, #24]
 80072a6:	e007      	b.n	80072b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	781a      	ldrb	r2, [r3, #0]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	3301      	adds	r3, #1
 80072b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1c9      	bne.n	800726a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	9300      	str	r3, [sp, #0]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	2140      	movs	r1, #64	@ 0x40
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 feb0 	bl	8008046 <UART_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d004      	beq.n	80072f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2220      	movs	r2, #32
 80072f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e005      	b.n	8007302 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2220      	movs	r2, #32
 80072fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	e000      	b.n	8007302 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007300:	2302      	movs	r3, #2
  }
}
 8007302:	4618      	mov	r0, r3
 8007304:	3720      	adds	r7, #32
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b08a      	sub	sp, #40	@ 0x28
 800730e:	af00      	add	r7, sp, #0
 8007310:	60f8      	str	r0, [r7, #12]
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800731e:	2b20      	cmp	r3, #32
 8007320:	d132      	bne.n	8007388 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d002      	beq.n	800732e <HAL_UART_Receive_DMA+0x24>
 8007328:	88fb      	ldrh	r3, [r7, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d101      	bne.n	8007332 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800732e:	2301      	movs	r3, #1
 8007330:	e02b      	b.n	800738a <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	613b      	str	r3, [r7, #16]
   return(result);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800735a:	627b      	str	r3, [r7, #36]	@ 0x24
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	623b      	str	r3, [r7, #32]
 8007366:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	69f9      	ldr	r1, [r7, #28]
 800736a:	6a3a      	ldr	r2, [r7, #32]
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	61bb      	str	r3, [r7, #24]
   return(result);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007378:	88fb      	ldrh	r3, [r7, #6]
 800737a:	461a      	mov	r2, r3
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f000 fece 	bl	8008120 <UART_Start_Receive_DMA>
 8007384:	4603      	mov	r3, r0
 8007386:	e000      	b.n	800738a <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007388:	2302      	movs	r3, #2
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3728      	adds	r7, #40	@ 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b0ba      	sub	sp, #232	@ 0xe8
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80073be:	f640 030f 	movw	r3, #2063	@ 0x80f
 80073c2:	4013      	ands	r3, r2
 80073c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80073c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d115      	bne.n	80073fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073d4:	f003 0320 	and.w	r3, r3, #32
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00f      	beq.n	80073fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 8297 	beq.w	8007920 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
      }
      return;
 80073fa:	e291      	b.n	8007920 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 8117 	beq.w	8007634 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007412:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007416:	4b85      	ldr	r3, [pc, #532]	@ (800762c <HAL_UART_IRQHandler+0x298>)
 8007418:	4013      	ands	r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	f000 810a 	beq.w	8007634 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d011      	beq.n	8007450 <HAL_UART_IRQHandler+0xbc>
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2201      	movs	r2, #1
 800743e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007446:	f043 0201 	orr.w	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d011      	beq.n	8007480 <HAL_UART_IRQHandler+0xec>
 800745c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2202      	movs	r2, #2
 800746e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007476:	f043 0204 	orr.w	r2, r3, #4
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d011      	beq.n	80074b0 <HAL_UART_IRQHandler+0x11c>
 800748c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00b      	beq.n	80074b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2204      	movs	r2, #4
 800749e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074a6:	f043 0202 	orr.w	r2, r3, #2
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b4:	f003 0308 	and.w	r3, r3, #8
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d017      	beq.n	80074ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d105      	bne.n	80074d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2208      	movs	r2, #8
 80074da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074e2:	f043 0208 	orr.w	r2, r3, #8
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d012      	beq.n	800751e <HAL_UART_IRQHandler+0x18a>
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00c      	beq.n	800751e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800750c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007514:	f043 0220 	orr.w	r2, r3, #32
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 81fd 	beq.w	8007924 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800752a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00d      	beq.n	8007552 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b00      	cmp	r3, #0
 8007540:	d007      	beq.n	8007552 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007558:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d005      	beq.n	8007576 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800756a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800756e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007572:	2b00      	cmp	r3, #0
 8007574:	d04f      	beq.n	8007616 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fe98 	bl	80082ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007586:	2b40      	cmp	r3, #64	@ 0x40
 8007588:	d141      	bne.n	800760e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	3308      	adds	r3, #8
 80075b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d1d9      	bne.n	800758a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d013      	beq.n	8007606 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075e2:	4a13      	ldr	r2, [pc, #76]	@ (8007630 <HAL_UART_IRQHandler+0x29c>)
 80075e4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fb fc94 	bl	8002f18 <HAL_DMA_Abort_IT>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d017      	beq.n	8007626 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	e00f      	b.n	8007626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f9aa 	bl	8007960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	e00b      	b.n	8007626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 f9a6 	bl	8007960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	e007      	b.n	8007626 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9a2 	bl	8007960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007624:	e17e      	b.n	8007924 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007626:	bf00      	nop
    return;
 8007628:	e17c      	b.n	8007924 <HAL_UART_IRQHandler+0x590>
 800762a:	bf00      	nop
 800762c:	04000120 	.word	0x04000120
 8007630:	08008559 	.word	0x08008559

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007638:	2b01      	cmp	r3, #1
 800763a:	f040 814c 	bne.w	80078d6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800763e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007642:	f003 0310 	and.w	r3, r3, #16
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8145 	beq.w	80078d6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007650:	f003 0310 	and.w	r3, r3, #16
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 813e 	beq.w	80078d6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2210      	movs	r2, #16
 8007660:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800766c:	2b40      	cmp	r3, #64	@ 0x40
 800766e:	f040 80b6 	bne.w	80077de <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800767e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8150 	beq.w	8007928 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800768e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007692:	429a      	cmp	r2, r3
 8007694:	f080 8148 	bcs.w	8007928 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800769e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	69db      	ldr	r3, [r3, #28]
 80076a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ac:	f000 8086 	beq.w	80077bc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	461a      	mov	r2, r3
 80076d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076de:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d1da      	bne.n	80076b0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3308      	adds	r3, #8
 8007700:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800770a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800770c:	f023 0301 	bic.w	r3, r3, #1
 8007710:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	3308      	adds	r3, #8
 800771a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800771e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007722:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007724:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007726:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e1      	bne.n	80076fa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3308      	adds	r3, #8
 800773c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007746:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007748:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800774c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	3308      	adds	r3, #8
 8007756:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800775a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800775c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007760:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007762:	e841 2300 	strex	r3, r2, [r1]
 8007766:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800776a:	2b00      	cmp	r3, #0
 800776c:	d1e3      	bne.n	8007736 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007784:	e853 3f00 	ldrex	r3, [r3]
 8007788:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800778a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800778c:	f023 0310 	bic.w	r3, r3, #16
 8007790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800779e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e4      	bne.n	800777c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fb fb3e 	bl	8002e38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f8cc 	bl	8007974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077dc:	e0a4      	b.n	8007928 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	f000 8096 	beq.w	800792c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007804:	2b00      	cmp	r3, #0
 8007806:	f000 8091 	beq.w	800792c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007812:	e853 3f00 	ldrex	r3, [r3]
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800781a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800781e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800782c:	647b      	str	r3, [r7, #68]	@ 0x44
 800782e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800783a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e4      	bne.n	800780a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3308      	adds	r3, #8
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	e853 3f00 	ldrex	r3, [r3]
 800784e:	623b      	str	r3, [r7, #32]
   return(result);
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007864:	633a      	str	r2, [r7, #48]	@ 0x30
 8007866:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007868:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800786a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800786c:	e841 2300 	strex	r3, r2, [r1]
 8007870:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e3      	bne.n	8007840 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2220      	movs	r2, #32
 800787c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	60fb      	str	r3, [r7, #12]
   return(result);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f023 0310 	bic.w	r3, r3, #16
 80078a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	69b9      	ldr	r1, [r7, #24]
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	617b      	str	r3, [r7, #20]
   return(result);
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e4      	bne.n	800788c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 f850 	bl	8007974 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078d4:	e02a      	b.n	800792c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00e      	beq.n	8007900 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d008      	beq.n	8007900 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d01c      	beq.n	8007930 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
    }
    return;
 80078fe:	e017      	b.n	8007930 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007908:	2b00      	cmp	r3, #0
 800790a:	d012      	beq.n	8007932 <HAL_UART_IRQHandler+0x59e>
 800790c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00c      	beq.n	8007932 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fe33 	bl	8008584 <UART_EndTransmit_IT>
    return;
 800791e:	e008      	b.n	8007932 <HAL_UART_IRQHandler+0x59e>
      return;
 8007920:	bf00      	nop
 8007922:	e006      	b.n	8007932 <HAL_UART_IRQHandler+0x59e>
    return;
 8007924:	bf00      	nop
 8007926:	e004      	b.n	8007932 <HAL_UART_IRQHandler+0x59e>
      return;
 8007928:	bf00      	nop
 800792a:	e002      	b.n	8007932 <HAL_UART_IRQHandler+0x59e>
      return;
 800792c:	bf00      	nop
 800792e:	e000      	b.n	8007932 <HAL_UART_IRQHandler+0x59e>
    return;
 8007930:	bf00      	nop
  }

}
 8007932:	37e8      	adds	r7, #232	@ 0xe8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007954:	bf00      	nop
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007994:	2300      	movs	r3, #0
 8007996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	4ba6      	ldr	r3, [pc, #664]	@ (8007c50 <UART_SetConfig+0x2c4>)
 80079b8:	4013      	ands	r3, r2
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	6979      	ldr	r1, [r7, #20]
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a1b      	ldr	r3, [r3, #32]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a94      	ldr	r2, [pc, #592]	@ (8007c54 <UART_SetConfig+0x2c8>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d120      	bne.n	8007a4a <UART_SetConfig+0xbe>
 8007a08:	4b93      	ldr	r3, [pc, #588]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d816      	bhi.n	8007a44 <UART_SetConfig+0xb8>
 8007a16:	a201      	add	r2, pc, #4	@ (adr r2, 8007a1c <UART_SetConfig+0x90>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a39 	.word	0x08007a39
 8007a24:	08007a33 	.word	0x08007a33
 8007a28:	08007a3f 	.word	0x08007a3f
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	77fb      	strb	r3, [r7, #31]
 8007a30:	e150      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007a32:	2302      	movs	r3, #2
 8007a34:	77fb      	strb	r3, [r7, #31]
 8007a36:	e14d      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	77fb      	strb	r3, [r7, #31]
 8007a3c:	e14a      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007a3e:	2308      	movs	r3, #8
 8007a40:	77fb      	strb	r3, [r7, #31]
 8007a42:	e147      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007a44:	2310      	movs	r3, #16
 8007a46:	77fb      	strb	r3, [r7, #31]
 8007a48:	e144      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a83      	ldr	r2, [pc, #524]	@ (8007c5c <UART_SetConfig+0x2d0>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d132      	bne.n	8007aba <UART_SetConfig+0x12e>
 8007a54:	4b80      	ldr	r3, [pc, #512]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a5a:	f003 030c 	and.w	r3, r3, #12
 8007a5e:	2b0c      	cmp	r3, #12
 8007a60:	d828      	bhi.n	8007ab4 <UART_SetConfig+0x128>
 8007a62:	a201      	add	r2, pc, #4	@ (adr r2, 8007a68 <UART_SetConfig+0xdc>)
 8007a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007ab5 	.word	0x08007ab5
 8007a70:	08007ab5 	.word	0x08007ab5
 8007a74:	08007ab5 	.word	0x08007ab5
 8007a78:	08007aa9 	.word	0x08007aa9
 8007a7c:	08007ab5 	.word	0x08007ab5
 8007a80:	08007ab5 	.word	0x08007ab5
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007aa3 	.word	0x08007aa3
 8007a8c:	08007ab5 	.word	0x08007ab5
 8007a90:	08007ab5 	.word	0x08007ab5
 8007a94:	08007ab5 	.word	0x08007ab5
 8007a98:	08007aaf 	.word	0x08007aaf
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	77fb      	strb	r3, [r7, #31]
 8007aa0:	e118      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007aa2:	2302      	movs	r3, #2
 8007aa4:	77fb      	strb	r3, [r7, #31]
 8007aa6:	e115      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007aa8:	2304      	movs	r3, #4
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e112      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007aae:	2308      	movs	r3, #8
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e10f      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e10c      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a68      	ldr	r2, [pc, #416]	@ (8007c60 <UART_SetConfig+0x2d4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d120      	bne.n	8007b06 <UART_SetConfig+0x17a>
 8007ac4:	4b64      	ldr	r3, [pc, #400]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aca:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007ace:	2b30      	cmp	r3, #48	@ 0x30
 8007ad0:	d013      	beq.n	8007afa <UART_SetConfig+0x16e>
 8007ad2:	2b30      	cmp	r3, #48	@ 0x30
 8007ad4:	d814      	bhi.n	8007b00 <UART_SetConfig+0x174>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d009      	beq.n	8007aee <UART_SetConfig+0x162>
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d810      	bhi.n	8007b00 <UART_SetConfig+0x174>
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <UART_SetConfig+0x15c>
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d006      	beq.n	8007af4 <UART_SetConfig+0x168>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x174>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e0f2      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e0ef      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e0ec      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e0e9      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e0e6      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a56      	ldr	r2, [pc, #344]	@ (8007c64 <UART_SetConfig+0x2d8>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d120      	bne.n	8007b52 <UART_SetConfig+0x1c6>
 8007b10:	4b51      	ldr	r3, [pc, #324]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b16:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007b1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b1c:	d013      	beq.n	8007b46 <UART_SetConfig+0x1ba>
 8007b1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007b20:	d814      	bhi.n	8007b4c <UART_SetConfig+0x1c0>
 8007b22:	2b80      	cmp	r3, #128	@ 0x80
 8007b24:	d009      	beq.n	8007b3a <UART_SetConfig+0x1ae>
 8007b26:	2b80      	cmp	r3, #128	@ 0x80
 8007b28:	d810      	bhi.n	8007b4c <UART_SetConfig+0x1c0>
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <UART_SetConfig+0x1a8>
 8007b2e:	2b40      	cmp	r3, #64	@ 0x40
 8007b30:	d006      	beq.n	8007b40 <UART_SetConfig+0x1b4>
 8007b32:	e00b      	b.n	8007b4c <UART_SetConfig+0x1c0>
 8007b34:	2300      	movs	r3, #0
 8007b36:	77fb      	strb	r3, [r7, #31]
 8007b38:	e0cc      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b3a:	2302      	movs	r3, #2
 8007b3c:	77fb      	strb	r3, [r7, #31]
 8007b3e:	e0c9      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b40:	2304      	movs	r3, #4
 8007b42:	77fb      	strb	r3, [r7, #31]
 8007b44:	e0c6      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b46:	2308      	movs	r3, #8
 8007b48:	77fb      	strb	r3, [r7, #31]
 8007b4a:	e0c3      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b4c:	2310      	movs	r3, #16
 8007b4e:	77fb      	strb	r3, [r7, #31]
 8007b50:	e0c0      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a44      	ldr	r2, [pc, #272]	@ (8007c68 <UART_SetConfig+0x2dc>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d125      	bne.n	8007ba8 <UART_SetConfig+0x21c>
 8007b5c:	4b3e      	ldr	r3, [pc, #248]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b6a:	d017      	beq.n	8007b9c <UART_SetConfig+0x210>
 8007b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b70:	d817      	bhi.n	8007ba2 <UART_SetConfig+0x216>
 8007b72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b76:	d00b      	beq.n	8007b90 <UART_SetConfig+0x204>
 8007b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b7c:	d811      	bhi.n	8007ba2 <UART_SetConfig+0x216>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d003      	beq.n	8007b8a <UART_SetConfig+0x1fe>
 8007b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b86:	d006      	beq.n	8007b96 <UART_SetConfig+0x20a>
 8007b88:	e00b      	b.n	8007ba2 <UART_SetConfig+0x216>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	77fb      	strb	r3, [r7, #31]
 8007b8e:	e0a1      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b90:	2302      	movs	r3, #2
 8007b92:	77fb      	strb	r3, [r7, #31]
 8007b94:	e09e      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b96:	2304      	movs	r3, #4
 8007b98:	77fb      	strb	r3, [r7, #31]
 8007b9a:	e09b      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007b9c:	2308      	movs	r3, #8
 8007b9e:	77fb      	strb	r3, [r7, #31]
 8007ba0:	e098      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007ba2:	2310      	movs	r3, #16
 8007ba4:	77fb      	strb	r3, [r7, #31]
 8007ba6:	e095      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a2f      	ldr	r2, [pc, #188]	@ (8007c6c <UART_SetConfig+0x2e0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d125      	bne.n	8007bfe <UART_SetConfig+0x272>
 8007bb2:	4b29      	ldr	r3, [pc, #164]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007bbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bc0:	d017      	beq.n	8007bf2 <UART_SetConfig+0x266>
 8007bc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007bc6:	d817      	bhi.n	8007bf8 <UART_SetConfig+0x26c>
 8007bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bcc:	d00b      	beq.n	8007be6 <UART_SetConfig+0x25a>
 8007bce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007bd2:	d811      	bhi.n	8007bf8 <UART_SetConfig+0x26c>
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d003      	beq.n	8007be0 <UART_SetConfig+0x254>
 8007bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bdc:	d006      	beq.n	8007bec <UART_SetConfig+0x260>
 8007bde:	e00b      	b.n	8007bf8 <UART_SetConfig+0x26c>
 8007be0:	2301      	movs	r3, #1
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e076      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007be6:	2302      	movs	r3, #2
 8007be8:	77fb      	strb	r3, [r7, #31]
 8007bea:	e073      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007bec:	2304      	movs	r3, #4
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e070      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e06d      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e06a      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a1b      	ldr	r2, [pc, #108]	@ (8007c70 <UART_SetConfig+0x2e4>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d138      	bne.n	8007c7a <UART_SetConfig+0x2ee>
 8007c08:	4b13      	ldr	r3, [pc, #76]	@ (8007c58 <UART_SetConfig+0x2cc>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c0e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c16:	d017      	beq.n	8007c48 <UART_SetConfig+0x2bc>
 8007c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007c1c:	d82a      	bhi.n	8007c74 <UART_SetConfig+0x2e8>
 8007c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c22:	d00b      	beq.n	8007c3c <UART_SetConfig+0x2b0>
 8007c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c28:	d824      	bhi.n	8007c74 <UART_SetConfig+0x2e8>
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <UART_SetConfig+0x2aa>
 8007c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c32:	d006      	beq.n	8007c42 <UART_SetConfig+0x2b6>
 8007c34:	e01e      	b.n	8007c74 <UART_SetConfig+0x2e8>
 8007c36:	2300      	movs	r3, #0
 8007c38:	77fb      	strb	r3, [r7, #31]
 8007c3a:	e04b      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007c3c:	2302      	movs	r3, #2
 8007c3e:	77fb      	strb	r3, [r7, #31]
 8007c40:	e048      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007c42:	2304      	movs	r3, #4
 8007c44:	77fb      	strb	r3, [r7, #31]
 8007c46:	e045      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	77fb      	strb	r3, [r7, #31]
 8007c4c:	e042      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007c4e:	bf00      	nop
 8007c50:	efff69f3 	.word	0xefff69f3
 8007c54:	40011000 	.word	0x40011000
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	40004400 	.word	0x40004400
 8007c60:	40004800 	.word	0x40004800
 8007c64:	40004c00 	.word	0x40004c00
 8007c68:	40005000 	.word	0x40005000
 8007c6c:	40011400 	.word	0x40011400
 8007c70:	40007800 	.word	0x40007800
 8007c74:	2310      	movs	r3, #16
 8007c76:	77fb      	strb	r3, [r7, #31]
 8007c78:	e02c      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a72      	ldr	r2, [pc, #456]	@ (8007e48 <UART_SetConfig+0x4bc>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d125      	bne.n	8007cd0 <UART_SetConfig+0x344>
 8007c84:	4b71      	ldr	r3, [pc, #452]	@ (8007e4c <UART_SetConfig+0x4c0>)
 8007c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007c8e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c92:	d017      	beq.n	8007cc4 <UART_SetConfig+0x338>
 8007c94:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007c98:	d817      	bhi.n	8007cca <UART_SetConfig+0x33e>
 8007c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c9e:	d00b      	beq.n	8007cb8 <UART_SetConfig+0x32c>
 8007ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ca4:	d811      	bhi.n	8007cca <UART_SetConfig+0x33e>
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <UART_SetConfig+0x326>
 8007caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007cae:	d006      	beq.n	8007cbe <UART_SetConfig+0x332>
 8007cb0:	e00b      	b.n	8007cca <UART_SetConfig+0x33e>
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	77fb      	strb	r3, [r7, #31]
 8007cb6:	e00d      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	77fb      	strb	r3, [r7, #31]
 8007cbc:	e00a      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007cbe:	2304      	movs	r3, #4
 8007cc0:	77fb      	strb	r3, [r7, #31]
 8007cc2:	e007      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007cc4:	2308      	movs	r3, #8
 8007cc6:	77fb      	strb	r3, [r7, #31]
 8007cc8:	e004      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007cca:	2310      	movs	r3, #16
 8007ccc:	77fb      	strb	r3, [r7, #31]
 8007cce:	e001      	b.n	8007cd4 <UART_SetConfig+0x348>
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cdc:	d15b      	bne.n	8007d96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007cde:	7ffb      	ldrb	r3, [r7, #31]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d828      	bhi.n	8007d36 <UART_SetConfig+0x3aa>
 8007ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cec <UART_SetConfig+0x360>)
 8007ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cea:	bf00      	nop
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	08007d37 	.word	0x08007d37
 8007cfc:	08007d27 	.word	0x08007d27
 8007d00:	08007d37 	.word	0x08007d37
 8007d04:	08007d37 	.word	0x08007d37
 8007d08:	08007d37 	.word	0x08007d37
 8007d0c:	08007d2f 	.word	0x08007d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d10:	f7fd fb5c 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8007d14:	61b8      	str	r0, [r7, #24]
        break;
 8007d16:	e013      	b.n	8007d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d18:	f7fd fb6c 	bl	80053f4 <HAL_RCC_GetPCLK2Freq>
 8007d1c:	61b8      	str	r0, [r7, #24]
        break;
 8007d1e:	e00f      	b.n	8007d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d20:	4b4b      	ldr	r3, [pc, #300]	@ (8007e50 <UART_SetConfig+0x4c4>)
 8007d22:	61bb      	str	r3, [r7, #24]
        break;
 8007d24:	e00c      	b.n	8007d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d26:	f7fd fa3f 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8007d2a:	61b8      	str	r0, [r7, #24]
        break;
 8007d2c:	e008      	b.n	8007d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d32:	61bb      	str	r3, [r7, #24]
        break;
 8007d34:	e004      	b.n	8007d40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d074      	beq.n	8007e30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	005a      	lsls	r2, r3, #1
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	441a      	add	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2b0f      	cmp	r3, #15
 8007d60:	d916      	bls.n	8007d90 <UART_SetConfig+0x404>
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d68:	d212      	bcs.n	8007d90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	f023 030f 	bic.w	r3, r3, #15
 8007d72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	f003 0307 	and.w	r3, r3, #7
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	89fb      	ldrh	r3, [r7, #14]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	89fa      	ldrh	r2, [r7, #14]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	e04f      	b.n	8007e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	77bb      	strb	r3, [r7, #30]
 8007d94:	e04c      	b.n	8007e30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d96:	7ffb      	ldrb	r3, [r7, #31]
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d828      	bhi.n	8007dee <UART_SetConfig+0x462>
 8007d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0x418>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007dd1 	.word	0x08007dd1
 8007dac:	08007dd9 	.word	0x08007dd9
 8007db0:	08007def 	.word	0x08007def
 8007db4:	08007ddf 	.word	0x08007ddf
 8007db8:	08007def 	.word	0x08007def
 8007dbc:	08007def 	.word	0x08007def
 8007dc0:	08007def 	.word	0x08007def
 8007dc4:	08007de7 	.word	0x08007de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dc8:	f7fd fb00 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8007dcc:	61b8      	str	r0, [r7, #24]
        break;
 8007dce:	e013      	b.n	8007df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd0:	f7fd fb10 	bl	80053f4 <HAL_RCC_GetPCLK2Freq>
 8007dd4:	61b8      	str	r0, [r7, #24]
        break;
 8007dd6:	e00f      	b.n	8007df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e50 <UART_SetConfig+0x4c4>)
 8007dda:	61bb      	str	r3, [r7, #24]
        break;
 8007ddc:	e00c      	b.n	8007df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dde:	f7fd f9e3 	bl	80051a8 <HAL_RCC_GetSysClockFreq>
 8007de2:	61b8      	str	r0, [r7, #24]
        break;
 8007de4:	e008      	b.n	8007df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007de6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dea:	61bb      	str	r3, [r7, #24]
        break;
 8007dec:	e004      	b.n	8007df8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007dee:	2300      	movs	r3, #0
 8007df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007df2:	2301      	movs	r3, #1
 8007df4:	77bb      	strb	r3, [r7, #30]
        break;
 8007df6:	bf00      	nop
    }

    if (pclk != 0U)
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d018      	beq.n	8007e30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	085a      	lsrs	r2, r3, #1
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	441a      	add	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	2b0f      	cmp	r3, #15
 8007e16:	d909      	bls.n	8007e2c <UART_SetConfig+0x4a0>
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e1e:	d205      	bcs.n	8007e2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	e001      	b.n	8007e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3720      	adds	r7, #32
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	40007c00 	.word	0x40007c00
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	00f42400 	.word	0x00f42400

08007e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00a      	beq.n	8007e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	430a      	orrs	r2, r1
 8007e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00a      	beq.n	8007ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	430a      	orrs	r2, r1
 8007ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	f003 0304 	and.w	r3, r3, #4
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00a      	beq.n	8007ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ee8:	f003 0310 	and.w	r3, r3, #16
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00a      	beq.n	8007f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	430a      	orrs	r2, r1
 8007f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	f003 0320 	and.w	r3, r3, #32
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d00a      	beq.n	8007f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01a      	beq.n	8007f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	430a      	orrs	r2, r1
 8007f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f52:	d10a      	bne.n	8007f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00a      	beq.n	8007f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
  }
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08c      	sub	sp, #48	@ 0x30
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fa8:	f7fa fcf6 	bl	8002998 <HAL_GetTick>
 8007fac:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d12e      	bne.n	800801a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fc0:	9300      	str	r3, [sp, #0]
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 f83b 	bl	8008046 <UART_WaitOnFlagUntilTimeout>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d021      	beq.n	800801a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007fea:	623b      	str	r3, [r7, #32]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6a3b      	ldr	r3, [r7, #32]
 8007ff4:	61fb      	str	r3, [r7, #28]
 8007ff6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	69b9      	ldr	r1, [r7, #24]
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	617b      	str	r3, [r7, #20]
   return(result);
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2220      	movs	r2, #32
 800800c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e011      	b.n	800803e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2220      	movs	r2, #32
 800801e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3728      	adds	r7, #40	@ 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	603b      	str	r3, [r7, #0]
 8008052:	4613      	mov	r3, r2
 8008054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008056:	e04f      	b.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805e:	d04b      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008060:	f7fa fc9a 	bl	8002998 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	429a      	cmp	r2, r3
 800806e:	d302      	bcc.n	8008076 <UART_WaitOnFlagUntilTimeout+0x30>
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e04e      	b.n	8008118 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d037      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b80      	cmp	r3, #128	@ 0x80
 800808c:	d034      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	2b40      	cmp	r3, #64	@ 0x40
 8008092:	d031      	beq.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	f003 0308 	and.w	r3, r3, #8
 800809e:	2b08      	cmp	r3, #8
 80080a0:	d110      	bne.n	80080c4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2208      	movs	r2, #8
 80080a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f8fe 	bl	80082ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2208      	movs	r2, #8
 80080b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e029      	b.n	8008118 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080d2:	d111      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80080dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080de:	68f8      	ldr	r0, [r7, #12]
 80080e0:	f000 f8e4 	bl	80082ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2220      	movs	r2, #32
 80080e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e00f      	b.n	8008118 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69da      	ldr	r2, [r3, #28]
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	4013      	ands	r3, r2
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	429a      	cmp	r2, r3
 8008106:	bf0c      	ite	eq
 8008108:	2301      	moveq	r3, #1
 800810a:	2300      	movne	r3, #0
 800810c:	b2db      	uxtb	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	79fb      	ldrb	r3, [r7, #7]
 8008112:	429a      	cmp	r2, r3
 8008114:	d0a0      	beq.n	8008058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b096      	sub	sp, #88	@ 0x58
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	88fa      	ldrh	r2, [r7, #6]
 8008138:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2222      	movs	r2, #34	@ 0x22
 8008148:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008150:	2b00      	cmp	r3, #0
 8008152:	d028      	beq.n	80081a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008158:	4a3e      	ldr	r2, [pc, #248]	@ (8008254 <UART_Start_Receive_DMA+0x134>)
 800815a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008160:	4a3d      	ldr	r2, [pc, #244]	@ (8008258 <UART_Start_Receive_DMA+0x138>)
 8008162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008168:	4a3c      	ldr	r2, [pc, #240]	@ (800825c <UART_Start_Receive_DMA+0x13c>)
 800816a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008170:	2200      	movs	r2, #0
 8008172:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3324      	adds	r3, #36	@ 0x24
 800817e:	4619      	mov	r1, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008184:	461a      	mov	r2, r3
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	f7fa fdf6 	bl	8002d78 <HAL_DMA_Start_IT>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2210      	movs	r2, #16
 8008196:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2220      	movs	r2, #32
 800819e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	e051      	b.n	800824a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d018      	beq.n	80081e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081ce:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80081d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80081da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e6      	bne.n	80081ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	e853 3f00 	ldrex	r3, [r3]
 80081ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f2:	f043 0301 	orr.w	r3, r3, #1
 80081f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	3308      	adds	r3, #8
 80081fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008200:	637a      	str	r2, [r7, #52]	@ 0x34
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008204:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008206:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008208:	e841 2300 	strex	r3, r2, [r1]
 800820c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800820e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1e5      	bne.n	80081e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3308      	adds	r3, #8
 800821a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	e853 3f00 	ldrex	r3, [r3]
 8008222:	613b      	str	r3, [r7, #16]
   return(result);
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800822a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3308      	adds	r3, #8
 8008232:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008234:	623a      	str	r2, [r7, #32]
 8008236:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008238:	69f9      	ldr	r1, [r7, #28]
 800823a:	6a3a      	ldr	r2, [r7, #32]
 800823c:	e841 2300 	strex	r3, r2, [r1]
 8008240:	61bb      	str	r3, [r7, #24]
   return(result);
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1e5      	bne.n	8008214 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3758      	adds	r7, #88	@ 0x58
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	08008375 	.word	0x08008375
 8008258:	0800849d 	.word	0x0800849d
 800825c:	080084db 	.word	0x080084db

08008260 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b089      	sub	sp, #36	@ 0x24
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60bb      	str	r3, [r7, #8]
   return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800827c:	61fb      	str	r3, [r7, #28]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80082a0:	bf00      	nop
 80082a2:	3724      	adds	r7, #36	@ 0x24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b095      	sub	sp, #84	@ 0x54
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082bc:	e853 3f00 	ldrex	r3, [r3]
 80082c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	461a      	mov	r2, r3
 80082d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80082d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1e6      	bne.n	80082b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3308      	adds	r3, #8
 80082ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ee:	6a3b      	ldr	r3, [r7, #32]
 80082f0:	e853 3f00 	ldrex	r3, [r3]
 80082f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	3308      	adds	r3, #8
 8008304:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008306:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008308:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800830c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800830e:	e841 2300 	strex	r3, r2, [r1]
 8008312:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1e5      	bne.n	80082e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800831e:	2b01      	cmp	r3, #1
 8008320:	d118      	bne.n	8008354 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	e853 3f00 	ldrex	r3, [r3]
 800832e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f023 0310 	bic.w	r3, r3, #16
 8008336:	647b      	str	r3, [r7, #68]	@ 0x44
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	461a      	mov	r2, r3
 800833e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008340:	61bb      	str	r3, [r7, #24]
 8008342:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008344:	6979      	ldr	r1, [r7, #20]
 8008346:	69ba      	ldr	r2, [r7, #24]
 8008348:	e841 2300 	strex	r3, r2, [r1]
 800834c:	613b      	str	r3, [r7, #16]
   return(result);
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1e6      	bne.n	8008322 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008368:	bf00      	nop
 800836a:	3754      	adds	r7, #84	@ 0x54
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b09c      	sub	sp, #112	@ 0x70
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008380:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800838a:	d071      	beq.n	8008470 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800838c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838e:	2200      	movs	r2, #0
 8008390:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800839c:	e853 3f00 	ldrex	r3, [r3]
 80083a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80083a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80083aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80083b4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083ba:	e841 2300 	strex	r3, r2, [r1]
 80083be:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1e6      	bne.n	8008394 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	3308      	adds	r3, #8
 80083cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d0:	e853 3f00 	ldrex	r3, [r3]
 80083d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80083d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083d8:	f023 0301 	bic.w	r3, r3, #1
 80083dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80083de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80083e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80083e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ee:	e841 2300 	strex	r3, r2, [r1]
 80083f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1e5      	bne.n	80083c6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	623b      	str	r3, [r7, #32]
   return(result);
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008410:	663b      	str	r3, [r7, #96]	@ 0x60
 8008412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	3308      	adds	r3, #8
 8008418:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800841a:	633a      	str	r2, [r7, #48]	@ 0x30
 800841c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008420:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800842e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008430:	2220      	movs	r2, #32
 8008432:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800843a:	2b01      	cmp	r3, #1
 800843c:	d118      	bne.n	8008470 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800843e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	e853 3f00 	ldrex	r3, [r3]
 800844a:	60fb      	str	r3, [r7, #12]
   return(result);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0310 	bic.w	r3, r3, #16
 8008452:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	69b9      	ldr	r1, [r7, #24]
 8008462:	69fa      	ldr	r2, [r7, #28]
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	617b      	str	r3, [r7, #20]
   return(result);
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e6      	bne.n	800843e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008472:	2200      	movs	r2, #0
 8008474:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800847a:	2b01      	cmp	r3, #1
 800847c:	d107      	bne.n	800848e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800847e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008480:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008484:	4619      	mov	r1, r3
 8008486:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008488:	f7ff fa74 	bl	8007974 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800848c:	e002      	b.n	8008494 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800848e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008490:	f7f8 fa64 	bl	800095c <HAL_UART_RxCpltCallback>
}
 8008494:	bf00      	nop
 8008496:	3770      	adds	r7, #112	@ 0x70
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d109      	bne.n	80084cc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fa55 	bl	8007974 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80084ca:	e002      	b.n	80084d2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff fa3d 	bl	800794c <HAL_UART_RxHalfCpltCallback>
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b086      	sub	sp, #24
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084ec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008500:	2b80      	cmp	r3, #128	@ 0x80
 8008502:	d109      	bne.n	8008518 <UART_DMAError+0x3e>
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	2b21      	cmp	r3, #33	@ 0x21
 8008508:	d106      	bne.n	8008518 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8008512:	6978      	ldr	r0, [r7, #20]
 8008514:	f7ff fea4 	bl	8008260 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008522:	2b40      	cmp	r3, #64	@ 0x40
 8008524:	d109      	bne.n	800853a <UART_DMAError+0x60>
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2b22      	cmp	r3, #34	@ 0x22
 800852a:	d106      	bne.n	800853a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2200      	movs	r2, #0
 8008530:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8008534:	6978      	ldr	r0, [r7, #20]
 8008536:	f7ff feb9 	bl	80082ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008540:	f043 0210 	orr.w	r2, r3, #16
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800854a:	6978      	ldr	r0, [r7, #20]
 800854c:	f7ff fa08 	bl	8007960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008550:	bf00      	nop
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f7ff f9f2 	bl	8007960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	e853 3f00 	ldrex	r3, [r3]
 8008598:	60bb      	str	r3, [r7, #8]
   return(result);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	61bb      	str	r3, [r7, #24]
 80085ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6979      	ldr	r1, [r7, #20]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	613b      	str	r3, [r7, #16]
   return(result);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e6      	bne.n	800858c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7ff f9b4 	bl	8007938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d0:	bf00      	nop
 80085d2:	3720      	adds	r7, #32
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085d8:	b084      	sub	sp, #16
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	f107 001c 	add.w	r0, r7, #28
 80085e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d121      	bne.n	8008636 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	4b21      	ldr	r3, [pc, #132]	@ (8008688 <USB_CoreInit+0xb0>)
 8008604:	4013      	ands	r3, r2
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008616:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800861a:	2b01      	cmp	r3, #1
 800861c:	d105      	bne.n	800862a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa92 	bl	8008b54 <USB_CoreReset>
 8008630:	4603      	mov	r3, r0
 8008632:	73fb      	strb	r3, [r7, #15]
 8008634:	e010      	b.n	8008658 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa86 	bl	8008b54 <USB_CoreReset>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008650:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008658:	7fbb      	ldrb	r3, [r7, #30]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10b      	bne.n	8008676 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f043 0206 	orr.w	r2, r3, #6
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008682:	b004      	add	sp, #16
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	ffbdffbf 	.word	0xffbdffbf

0800868c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	f023 0201 	bic.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80086ca:	78fb      	ldrb	r3, [r7, #3]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d115      	bne.n	80086fc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80086dc:	200a      	movs	r0, #10
 80086de:	f7fa f967 	bl	80029b0 <HAL_Delay>
      ms += 10U;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	330a      	adds	r3, #10
 80086e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fa25 	bl	8008b38 <USB_GetMode>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d01e      	beq.n	8008732 <USB_SetCurrentMode+0x84>
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2bc7      	cmp	r3, #199	@ 0xc7
 80086f8:	d9f0      	bls.n	80086dc <USB_SetCurrentMode+0x2e>
 80086fa:	e01a      	b.n	8008732 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80086fc:	78fb      	ldrb	r3, [r7, #3]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d115      	bne.n	800872e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800870e:	200a      	movs	r0, #10
 8008710:	f7fa f94e 	bl	80029b0 <HAL_Delay>
      ms += 10U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	330a      	adds	r3, #10
 8008718:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa0c 	bl	8008b38 <USB_GetMode>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <USB_SetCurrentMode+0x84>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2bc7      	cmp	r3, #199	@ 0xc7
 800872a:	d9f0      	bls.n	800870e <USB_SetCurrentMode+0x60>
 800872c:	e001      	b.n	8008732 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e005      	b.n	800873e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2bc8      	cmp	r3, #200	@ 0xc8
 8008736:	d101      	bne.n	800873c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
	...

08008748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008748:	b084      	sub	sp, #16
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800875a:	2300      	movs	r3, #0
 800875c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	e009      	b.n	800877c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	3340      	adds	r3, #64	@ 0x40
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	2200      	movs	r2, #0
 8008774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	3301      	adds	r3, #1
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	2b0e      	cmp	r3, #14
 8008780:	d9f2      	bls.n	8008768 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008782:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008786:	2b00      	cmp	r3, #0
 8008788:	d11c      	bne.n	80087c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e005      	b.n	80087d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087d6:	461a      	mov	r2, r3
 80087d8:	2300      	movs	r3, #0
 80087da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d10d      	bne.n	8008800 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d104      	bne.n	80087f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087ec:	2100      	movs	r1, #0
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f968 	bl	8008ac4 <USB_SetDevSpeed>
 80087f4:	e008      	b.n	8008808 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80087f6:	2101      	movs	r1, #1
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f963 	bl	8008ac4 <USB_SetDevSpeed>
 80087fe:	e003      	b.n	8008808 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008800:	2103      	movs	r1, #3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f95e 	bl	8008ac4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008808:	2110      	movs	r1, #16
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8fa 	bl	8008a04 <USB_FlushTxFifo>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 f924 	bl	8008a68 <USB_FlushRxFifo>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008830:	461a      	mov	r2, r3
 8008832:	2300      	movs	r3, #0
 8008834:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008848:	461a      	mov	r2, r3
 800884a:	2300      	movs	r3, #0
 800884c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800884e:	2300      	movs	r3, #0
 8008850:	613b      	str	r3, [r7, #16]
 8008852:	e043      	b.n	80088dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	015a      	lsls	r2, r3, #5
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4413      	add	r3, r2
 800885c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800886a:	d118      	bne.n	800889e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	015a      	lsls	r2, r3, #5
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4413      	add	r3, r2
 800887a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800887e:	461a      	mov	r2, r3
 8008880:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	e013      	b.n	80088b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008894:	461a      	mov	r2, r3
 8008896:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800889a:	6013      	str	r3, [r2, #0]
 800889c:	e008      	b.n	80088b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088aa:	461a      	mov	r2, r3
 80088ac:	2300      	movs	r3, #0
 80088ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088bc:	461a      	mov	r2, r3
 80088be:	2300      	movs	r3, #0
 80088c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	015a      	lsls	r2, r3, #5
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	4413      	add	r3, r2
 80088ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ce:	461a      	mov	r2, r3
 80088d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80088d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80088e0:	461a      	mov	r2, r3
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d3b5      	bcc.n	8008854 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e8:	2300      	movs	r3, #0
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	e043      	b.n	8008976 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	015a      	lsls	r2, r3, #5
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	4413      	add	r3, r2
 80088f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008904:	d118      	bne.n	8008938 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008918:	461a      	mov	r2, r3
 800891a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	e013      	b.n	800894a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892e:	461a      	mov	r2, r3
 8008930:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	e008      	b.n	800894a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008944:	461a      	mov	r2, r3
 8008946:	2300      	movs	r3, #0
 8008948:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	015a      	lsls	r2, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4413      	add	r3, r2
 8008952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008956:	461a      	mov	r2, r3
 8008958:	2300      	movs	r3, #0
 800895a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	015a      	lsls	r2, r3, #5
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	4413      	add	r3, r2
 8008964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008968:	461a      	mov	r2, r3
 800896a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800896e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	3301      	adds	r3, #1
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800897a:	461a      	mov	r2, r3
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	4293      	cmp	r3, r2
 8008980:	d3b5      	bcc.n	80088ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008994:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80089a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f043 0210 	orr.w	r2, r3, #16
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	699a      	ldr	r2, [r3, #24]
 80089bc:	4b0f      	ldr	r3, [pc, #60]	@ (80089fc <USB_DevInit+0x2b4>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f043 0208 	orr.w	r2, r3, #8
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80089d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d105      	bne.n	80089ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	4b06      	ldr	r3, [pc, #24]	@ (8008a00 <USB_DevInit+0x2b8>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089f8:	b004      	add	sp, #16
 80089fa:	4770      	bx	lr
 80089fc:	803c3800 	.word	0x803c3800
 8008a00:	40000004 	.word	0x40000004

08008a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	3301      	adds	r3, #1
 8008a16:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a1e:	d901      	bls.n	8008a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e01b      	b.n	8008a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	daf2      	bge.n	8008a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	019b      	lsls	r3, r3, #6
 8008a34:	f043 0220 	orr.w	r2, r3, #32
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a48:	d901      	bls.n	8008a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	e006      	b.n	8008a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d0f0      	beq.n	8008a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3301      	adds	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a80:	d901      	bls.n	8008a86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e018      	b.n	8008ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	daf2      	bge.n	8008a74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2210      	movs	r2, #16
 8008a96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008aa4:	d901      	bls.n	8008aaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e006      	b.n	8008ab8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f003 0310 	and.w	r3, r3, #16
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d0f0      	beq.n	8008a98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3714      	adds	r7, #20
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	78fb      	ldrb	r3, [r7, #3]
 8008ade:	68f9      	ldr	r1, [r7, #12]
 8008ae0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008b10:	f023 0303 	bic.w	r3, r3, #3
 8008b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	68fa      	ldr	r2, [r7, #12]
 8008b20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008b24:	f043 0302 	orr.w	r3, r3, #2
 8008b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0301 	and.w	r3, r3, #1
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b085      	sub	sp, #20
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	3301      	adds	r3, #1
 8008b64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b6c:	d901      	bls.n	8008b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e01b      	b.n	8008baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	691b      	ldr	r3, [r3, #16]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	daf2      	bge.n	8008b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f043 0201 	orr.w	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b96:	d901      	bls.n	8008b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e006      	b.n	8008baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	691b      	ldr	r3, [r3, #16]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d0f0      	beq.n	8008b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3714      	adds	r7, #20
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
	...

08008bb8 <sniprintf>:
 8008bb8:	b40c      	push	{r2, r3}
 8008bba:	b530      	push	{r4, r5, lr}
 8008bbc:	4b17      	ldr	r3, [pc, #92]	@ (8008c1c <sniprintf+0x64>)
 8008bbe:	1e0c      	subs	r4, r1, #0
 8008bc0:	681d      	ldr	r5, [r3, #0]
 8008bc2:	b09d      	sub	sp, #116	@ 0x74
 8008bc4:	da08      	bge.n	8008bd8 <sniprintf+0x20>
 8008bc6:	238b      	movs	r3, #139	@ 0x8b
 8008bc8:	602b      	str	r3, [r5, #0]
 8008bca:	f04f 30ff 	mov.w	r0, #4294967295
 8008bce:	b01d      	add	sp, #116	@ 0x74
 8008bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bd4:	b002      	add	sp, #8
 8008bd6:	4770      	bx	lr
 8008bd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008bdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008be0:	bf14      	ite	ne
 8008be2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008be6:	4623      	moveq	r3, r4
 8008be8:	9304      	str	r3, [sp, #16]
 8008bea:	9307      	str	r3, [sp, #28]
 8008bec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008bf0:	9002      	str	r0, [sp, #8]
 8008bf2:	9006      	str	r0, [sp, #24]
 8008bf4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008bf8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008bfa:	ab21      	add	r3, sp, #132	@ 0x84
 8008bfc:	a902      	add	r1, sp, #8
 8008bfe:	4628      	mov	r0, r5
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f000 f9c3 	bl	8008f8c <_svfiprintf_r>
 8008c06:	1c43      	adds	r3, r0, #1
 8008c08:	bfbc      	itt	lt
 8008c0a:	238b      	movlt	r3, #139	@ 0x8b
 8008c0c:	602b      	strlt	r3, [r5, #0]
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d0dd      	beq.n	8008bce <sniprintf+0x16>
 8008c12:	9b02      	ldr	r3, [sp, #8]
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e7d9      	b.n	8008bce <sniprintf+0x16>
 8008c1a:	bf00      	nop
 8008c1c:	2000003c 	.word	0x2000003c

08008c20 <siprintf>:
 8008c20:	b40e      	push	{r1, r2, r3}
 8008c22:	b500      	push	{lr}
 8008c24:	b09c      	sub	sp, #112	@ 0x70
 8008c26:	ab1d      	add	r3, sp, #116	@ 0x74
 8008c28:	9002      	str	r0, [sp, #8]
 8008c2a:	9006      	str	r0, [sp, #24]
 8008c2c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008c30:	4809      	ldr	r0, [pc, #36]	@ (8008c58 <siprintf+0x38>)
 8008c32:	9107      	str	r1, [sp, #28]
 8008c34:	9104      	str	r1, [sp, #16]
 8008c36:	4909      	ldr	r1, [pc, #36]	@ (8008c5c <siprintf+0x3c>)
 8008c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3c:	9105      	str	r1, [sp, #20]
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	a902      	add	r1, sp, #8
 8008c44:	f000 f9a2 	bl	8008f8c <_svfiprintf_r>
 8008c48:	9b02      	ldr	r3, [sp, #8]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	b01c      	add	sp, #112	@ 0x70
 8008c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c54:	b003      	add	sp, #12
 8008c56:	4770      	bx	lr
 8008c58:	2000003c 	.word	0x2000003c
 8008c5c:	ffff0208 	.word	0xffff0208

08008c60 <memset>:
 8008c60:	4402      	add	r2, r0
 8008c62:	4603      	mov	r3, r0
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d100      	bne.n	8008c6a <memset+0xa>
 8008c68:	4770      	bx	lr
 8008c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008c6e:	e7f9      	b.n	8008c64 <memset+0x4>

08008c70 <__errno>:
 8008c70:	4b01      	ldr	r3, [pc, #4]	@ (8008c78 <__errno+0x8>)
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	2000003c 	.word	0x2000003c

08008c7c <__libc_init_array>:
 8008c7c:	b570      	push	{r4, r5, r6, lr}
 8008c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8008cb4 <__libc_init_array+0x38>)
 8008c80:	4c0d      	ldr	r4, [pc, #52]	@ (8008cb8 <__libc_init_array+0x3c>)
 8008c82:	1b64      	subs	r4, r4, r5
 8008c84:	10a4      	asrs	r4, r4, #2
 8008c86:	2600      	movs	r6, #0
 8008c88:	42a6      	cmp	r6, r4
 8008c8a:	d109      	bne.n	8008ca0 <__libc_init_array+0x24>
 8008c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8008cbc <__libc_init_array+0x40>)
 8008c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8008cc0 <__libc_init_array+0x44>)
 8008c90:	f000 fc66 	bl	8009560 <_init>
 8008c94:	1b64      	subs	r4, r4, r5
 8008c96:	10a4      	asrs	r4, r4, #2
 8008c98:	2600      	movs	r6, #0
 8008c9a:	42a6      	cmp	r6, r4
 8008c9c:	d105      	bne.n	8008caa <__libc_init_array+0x2e>
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca4:	4798      	blx	r3
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	e7ee      	b.n	8008c88 <__libc_init_array+0xc>
 8008caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cae:	4798      	blx	r3
 8008cb0:	3601      	adds	r6, #1
 8008cb2:	e7f2      	b.n	8008c9a <__libc_init_array+0x1e>
 8008cb4:	08009b38 	.word	0x08009b38
 8008cb8:	08009b38 	.word	0x08009b38
 8008cbc:	08009b38 	.word	0x08009b38
 8008cc0:	08009b3c 	.word	0x08009b3c

08008cc4 <__retarget_lock_acquire_recursive>:
 8008cc4:	4770      	bx	lr

08008cc6 <__retarget_lock_release_recursive>:
 8008cc6:	4770      	bx	lr

08008cc8 <memcpy>:
 8008cc8:	440a      	add	r2, r1
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cd0:	d100      	bne.n	8008cd4 <memcpy+0xc>
 8008cd2:	4770      	bx	lr
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cde:	4291      	cmp	r1, r2
 8008ce0:	d1f9      	bne.n	8008cd6 <memcpy+0xe>
 8008ce2:	bd10      	pop	{r4, pc}

08008ce4 <_free_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	2900      	cmp	r1, #0
 8008cea:	d041      	beq.n	8008d70 <_free_r+0x8c>
 8008cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cf0:	1f0c      	subs	r4, r1, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bfb8      	it	lt
 8008cf6:	18e4      	addlt	r4, r4, r3
 8008cf8:	f000 f8e0 	bl	8008ebc <__malloc_lock>
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008d74 <_free_r+0x90>)
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	b933      	cbnz	r3, 8008d10 <_free_r+0x2c>
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	6014      	str	r4, [r2, #0]
 8008d06:	4628      	mov	r0, r5
 8008d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d0c:	f000 b8dc 	b.w	8008ec8 <__malloc_unlock>
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d908      	bls.n	8008d26 <_free_r+0x42>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	1821      	adds	r1, r4, r0
 8008d18:	428b      	cmp	r3, r1
 8008d1a:	bf01      	itttt	eq
 8008d1c:	6819      	ldreq	r1, [r3, #0]
 8008d1e:	685b      	ldreq	r3, [r3, #4]
 8008d20:	1809      	addeq	r1, r1, r0
 8008d22:	6021      	streq	r1, [r4, #0]
 8008d24:	e7ed      	b.n	8008d02 <_free_r+0x1e>
 8008d26:	461a      	mov	r2, r3
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	b10b      	cbz	r3, 8008d30 <_free_r+0x4c>
 8008d2c:	42a3      	cmp	r3, r4
 8008d2e:	d9fa      	bls.n	8008d26 <_free_r+0x42>
 8008d30:	6811      	ldr	r1, [r2, #0]
 8008d32:	1850      	adds	r0, r2, r1
 8008d34:	42a0      	cmp	r0, r4
 8008d36:	d10b      	bne.n	8008d50 <_free_r+0x6c>
 8008d38:	6820      	ldr	r0, [r4, #0]
 8008d3a:	4401      	add	r1, r0
 8008d3c:	1850      	adds	r0, r2, r1
 8008d3e:	4283      	cmp	r3, r0
 8008d40:	6011      	str	r1, [r2, #0]
 8008d42:	d1e0      	bne.n	8008d06 <_free_r+0x22>
 8008d44:	6818      	ldr	r0, [r3, #0]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	6053      	str	r3, [r2, #4]
 8008d4a:	4408      	add	r0, r1
 8008d4c:	6010      	str	r0, [r2, #0]
 8008d4e:	e7da      	b.n	8008d06 <_free_r+0x22>
 8008d50:	d902      	bls.n	8008d58 <_free_r+0x74>
 8008d52:	230c      	movs	r3, #12
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	e7d6      	b.n	8008d06 <_free_r+0x22>
 8008d58:	6820      	ldr	r0, [r4, #0]
 8008d5a:	1821      	adds	r1, r4, r0
 8008d5c:	428b      	cmp	r3, r1
 8008d5e:	bf04      	itt	eq
 8008d60:	6819      	ldreq	r1, [r3, #0]
 8008d62:	685b      	ldreq	r3, [r3, #4]
 8008d64:	6063      	str	r3, [r4, #4]
 8008d66:	bf04      	itt	eq
 8008d68:	1809      	addeq	r1, r1, r0
 8008d6a:	6021      	streq	r1, [r4, #0]
 8008d6c:	6054      	str	r4, [r2, #4]
 8008d6e:	e7ca      	b.n	8008d06 <_free_r+0x22>
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	bf00      	nop
 8008d74:	20000c54 	.word	0x20000c54

08008d78 <sbrk_aligned>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8008db8 <sbrk_aligned+0x40>)
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	6831      	ldr	r1, [r6, #0]
 8008d80:	4605      	mov	r5, r0
 8008d82:	b911      	cbnz	r1, 8008d8a <sbrk_aligned+0x12>
 8008d84:	f000 fba6 	bl	80094d4 <_sbrk_r>
 8008d88:	6030      	str	r0, [r6, #0]
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	f000 fba1 	bl	80094d4 <_sbrk_r>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d103      	bne.n	8008d9e <sbrk_aligned+0x26>
 8008d96:	f04f 34ff 	mov.w	r4, #4294967295
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	bd70      	pop	{r4, r5, r6, pc}
 8008d9e:	1cc4      	adds	r4, r0, #3
 8008da0:	f024 0403 	bic.w	r4, r4, #3
 8008da4:	42a0      	cmp	r0, r4
 8008da6:	d0f8      	beq.n	8008d9a <sbrk_aligned+0x22>
 8008da8:	1a21      	subs	r1, r4, r0
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 fb92 	bl	80094d4 <_sbrk_r>
 8008db0:	3001      	adds	r0, #1
 8008db2:	d1f2      	bne.n	8008d9a <sbrk_aligned+0x22>
 8008db4:	e7ef      	b.n	8008d96 <sbrk_aligned+0x1e>
 8008db6:	bf00      	nop
 8008db8:	20000c50 	.word	0x20000c50

08008dbc <_malloc_r>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	1ccd      	adds	r5, r1, #3
 8008dc2:	f025 0503 	bic.w	r5, r5, #3
 8008dc6:	3508      	adds	r5, #8
 8008dc8:	2d0c      	cmp	r5, #12
 8008dca:	bf38      	it	cc
 8008dcc:	250c      	movcc	r5, #12
 8008dce:	2d00      	cmp	r5, #0
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	db01      	blt.n	8008dd8 <_malloc_r+0x1c>
 8008dd4:	42a9      	cmp	r1, r5
 8008dd6:	d904      	bls.n	8008de2 <_malloc_r+0x26>
 8008dd8:	230c      	movs	r3, #12
 8008dda:	6033      	str	r3, [r6, #0]
 8008ddc:	2000      	movs	r0, #0
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008eb8 <_malloc_r+0xfc>
 8008de6:	f000 f869 	bl	8008ebc <__malloc_lock>
 8008dea:	f8d8 3000 	ldr.w	r3, [r8]
 8008dee:	461c      	mov	r4, r3
 8008df0:	bb44      	cbnz	r4, 8008e44 <_malloc_r+0x88>
 8008df2:	4629      	mov	r1, r5
 8008df4:	4630      	mov	r0, r6
 8008df6:	f7ff ffbf 	bl	8008d78 <sbrk_aligned>
 8008dfa:	1c43      	adds	r3, r0, #1
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	d158      	bne.n	8008eb2 <_malloc_r+0xf6>
 8008e00:	f8d8 4000 	ldr.w	r4, [r8]
 8008e04:	4627      	mov	r7, r4
 8008e06:	2f00      	cmp	r7, #0
 8008e08:	d143      	bne.n	8008e92 <_malloc_r+0xd6>
 8008e0a:	2c00      	cmp	r4, #0
 8008e0c:	d04b      	beq.n	8008ea6 <_malloc_r+0xea>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	4639      	mov	r1, r7
 8008e12:	4630      	mov	r0, r6
 8008e14:	eb04 0903 	add.w	r9, r4, r3
 8008e18:	f000 fb5c 	bl	80094d4 <_sbrk_r>
 8008e1c:	4581      	cmp	r9, r0
 8008e1e:	d142      	bne.n	8008ea6 <_malloc_r+0xea>
 8008e20:	6821      	ldr	r1, [r4, #0]
 8008e22:	1a6d      	subs	r5, r5, r1
 8008e24:	4629      	mov	r1, r5
 8008e26:	4630      	mov	r0, r6
 8008e28:	f7ff ffa6 	bl	8008d78 <sbrk_aligned>
 8008e2c:	3001      	adds	r0, #1
 8008e2e:	d03a      	beq.n	8008ea6 <_malloc_r+0xea>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	442b      	add	r3, r5
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	bb62      	cbnz	r2, 8008e98 <_malloc_r+0xdc>
 8008e3e:	f8c8 7000 	str.w	r7, [r8]
 8008e42:	e00f      	b.n	8008e64 <_malloc_r+0xa8>
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	1b52      	subs	r2, r2, r5
 8008e48:	d420      	bmi.n	8008e8c <_malloc_r+0xd0>
 8008e4a:	2a0b      	cmp	r2, #11
 8008e4c:	d917      	bls.n	8008e7e <_malloc_r+0xc2>
 8008e4e:	1961      	adds	r1, r4, r5
 8008e50:	42a3      	cmp	r3, r4
 8008e52:	6025      	str	r5, [r4, #0]
 8008e54:	bf18      	it	ne
 8008e56:	6059      	strne	r1, [r3, #4]
 8008e58:	6863      	ldr	r3, [r4, #4]
 8008e5a:	bf08      	it	eq
 8008e5c:	f8c8 1000 	streq.w	r1, [r8]
 8008e60:	5162      	str	r2, [r4, r5]
 8008e62:	604b      	str	r3, [r1, #4]
 8008e64:	4630      	mov	r0, r6
 8008e66:	f000 f82f 	bl	8008ec8 <__malloc_unlock>
 8008e6a:	f104 000b 	add.w	r0, r4, #11
 8008e6e:	1d23      	adds	r3, r4, #4
 8008e70:	f020 0007 	bic.w	r0, r0, #7
 8008e74:	1ac2      	subs	r2, r0, r3
 8008e76:	bf1c      	itt	ne
 8008e78:	1a1b      	subne	r3, r3, r0
 8008e7a:	50a3      	strne	r3, [r4, r2]
 8008e7c:	e7af      	b.n	8008dde <_malloc_r+0x22>
 8008e7e:	6862      	ldr	r2, [r4, #4]
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	bf0c      	ite	eq
 8008e84:	f8c8 2000 	streq.w	r2, [r8]
 8008e88:	605a      	strne	r2, [r3, #4]
 8008e8a:	e7eb      	b.n	8008e64 <_malloc_r+0xa8>
 8008e8c:	4623      	mov	r3, r4
 8008e8e:	6864      	ldr	r4, [r4, #4]
 8008e90:	e7ae      	b.n	8008df0 <_malloc_r+0x34>
 8008e92:	463c      	mov	r4, r7
 8008e94:	687f      	ldr	r7, [r7, #4]
 8008e96:	e7b6      	b.n	8008e06 <_malloc_r+0x4a>
 8008e98:	461a      	mov	r2, r3
 8008e9a:	685b      	ldr	r3, [r3, #4]
 8008e9c:	42a3      	cmp	r3, r4
 8008e9e:	d1fb      	bne.n	8008e98 <_malloc_r+0xdc>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6053      	str	r3, [r2, #4]
 8008ea4:	e7de      	b.n	8008e64 <_malloc_r+0xa8>
 8008ea6:	230c      	movs	r3, #12
 8008ea8:	6033      	str	r3, [r6, #0]
 8008eaa:	4630      	mov	r0, r6
 8008eac:	f000 f80c 	bl	8008ec8 <__malloc_unlock>
 8008eb0:	e794      	b.n	8008ddc <_malloc_r+0x20>
 8008eb2:	6005      	str	r5, [r0, #0]
 8008eb4:	e7d6      	b.n	8008e64 <_malloc_r+0xa8>
 8008eb6:	bf00      	nop
 8008eb8:	20000c54 	.word	0x20000c54

08008ebc <__malloc_lock>:
 8008ebc:	4801      	ldr	r0, [pc, #4]	@ (8008ec4 <__malloc_lock+0x8>)
 8008ebe:	f7ff bf01 	b.w	8008cc4 <__retarget_lock_acquire_recursive>
 8008ec2:	bf00      	nop
 8008ec4:	20000c4c 	.word	0x20000c4c

08008ec8 <__malloc_unlock>:
 8008ec8:	4801      	ldr	r0, [pc, #4]	@ (8008ed0 <__malloc_unlock+0x8>)
 8008eca:	f7ff befc 	b.w	8008cc6 <__retarget_lock_release_recursive>
 8008ece:	bf00      	nop
 8008ed0:	20000c4c 	.word	0x20000c4c

08008ed4 <__ssputs_r>:
 8008ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed8:	688e      	ldr	r6, [r1, #8]
 8008eda:	461f      	mov	r7, r3
 8008edc:	42be      	cmp	r6, r7
 8008ede:	680b      	ldr	r3, [r1, #0]
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	4690      	mov	r8, r2
 8008ee6:	d82d      	bhi.n	8008f44 <__ssputs_r+0x70>
 8008ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008eec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ef0:	d026      	beq.n	8008f40 <__ssputs_r+0x6c>
 8008ef2:	6965      	ldr	r5, [r4, #20]
 8008ef4:	6909      	ldr	r1, [r1, #16]
 8008ef6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008efa:	eba3 0901 	sub.w	r9, r3, r1
 8008efe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f02:	1c7b      	adds	r3, r7, #1
 8008f04:	444b      	add	r3, r9
 8008f06:	106d      	asrs	r5, r5, #1
 8008f08:	429d      	cmp	r5, r3
 8008f0a:	bf38      	it	cc
 8008f0c:	461d      	movcc	r5, r3
 8008f0e:	0553      	lsls	r3, r2, #21
 8008f10:	d527      	bpl.n	8008f62 <__ssputs_r+0x8e>
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7ff ff52 	bl	8008dbc <_malloc_r>
 8008f18:	4606      	mov	r6, r0
 8008f1a:	b360      	cbz	r0, 8008f76 <__ssputs_r+0xa2>
 8008f1c:	6921      	ldr	r1, [r4, #16]
 8008f1e:	464a      	mov	r2, r9
 8008f20:	f7ff fed2 	bl	8008cc8 <memcpy>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	6126      	str	r6, [r4, #16]
 8008f32:	6165      	str	r5, [r4, #20]
 8008f34:	444e      	add	r6, r9
 8008f36:	eba5 0509 	sub.w	r5, r5, r9
 8008f3a:	6026      	str	r6, [r4, #0]
 8008f3c:	60a5      	str	r5, [r4, #8]
 8008f3e:	463e      	mov	r6, r7
 8008f40:	42be      	cmp	r6, r7
 8008f42:	d900      	bls.n	8008f46 <__ssputs_r+0x72>
 8008f44:	463e      	mov	r6, r7
 8008f46:	6820      	ldr	r0, [r4, #0]
 8008f48:	4632      	mov	r2, r6
 8008f4a:	4641      	mov	r1, r8
 8008f4c:	f000 faa8 	bl	80094a0 <memmove>
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	1b9b      	subs	r3, r3, r6
 8008f54:	60a3      	str	r3, [r4, #8]
 8008f56:	6823      	ldr	r3, [r4, #0]
 8008f58:	4433      	add	r3, r6
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f62:	462a      	mov	r2, r5
 8008f64:	f000 fac6 	bl	80094f4 <_realloc_r>
 8008f68:	4606      	mov	r6, r0
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d1e0      	bne.n	8008f30 <__ssputs_r+0x5c>
 8008f6e:	6921      	ldr	r1, [r4, #16]
 8008f70:	4650      	mov	r0, sl
 8008f72:	f7ff feb7 	bl	8008ce4 <_free_r>
 8008f76:	230c      	movs	r3, #12
 8008f78:	f8ca 3000 	str.w	r3, [sl]
 8008f7c:	89a3      	ldrh	r3, [r4, #12]
 8008f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	f04f 30ff 	mov.w	r0, #4294967295
 8008f88:	e7e9      	b.n	8008f5e <__ssputs_r+0x8a>
	...

08008f8c <_svfiprintf_r>:
 8008f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f90:	4698      	mov	r8, r3
 8008f92:	898b      	ldrh	r3, [r1, #12]
 8008f94:	061b      	lsls	r3, r3, #24
 8008f96:	b09d      	sub	sp, #116	@ 0x74
 8008f98:	4607      	mov	r7, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	4614      	mov	r4, r2
 8008f9e:	d510      	bpl.n	8008fc2 <_svfiprintf_r+0x36>
 8008fa0:	690b      	ldr	r3, [r1, #16]
 8008fa2:	b973      	cbnz	r3, 8008fc2 <_svfiprintf_r+0x36>
 8008fa4:	2140      	movs	r1, #64	@ 0x40
 8008fa6:	f7ff ff09 	bl	8008dbc <_malloc_r>
 8008faa:	6028      	str	r0, [r5, #0]
 8008fac:	6128      	str	r0, [r5, #16]
 8008fae:	b930      	cbnz	r0, 8008fbe <_svfiprintf_r+0x32>
 8008fb0:	230c      	movs	r3, #12
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	b01d      	add	sp, #116	@ 0x74
 8008fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fbe:	2340      	movs	r3, #64	@ 0x40
 8008fc0:	616b      	str	r3, [r5, #20]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc6:	2320      	movs	r3, #32
 8008fc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008fd0:	2330      	movs	r3, #48	@ 0x30
 8008fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009170 <_svfiprintf_r+0x1e4>
 8008fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008fda:	f04f 0901 	mov.w	r9, #1
 8008fde:	4623      	mov	r3, r4
 8008fe0:	469a      	mov	sl, r3
 8008fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008fe6:	b10a      	cbz	r2, 8008fec <_svfiprintf_r+0x60>
 8008fe8:	2a25      	cmp	r2, #37	@ 0x25
 8008fea:	d1f9      	bne.n	8008fe0 <_svfiprintf_r+0x54>
 8008fec:	ebba 0b04 	subs.w	fp, sl, r4
 8008ff0:	d00b      	beq.n	800900a <_svfiprintf_r+0x7e>
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	4622      	mov	r2, r4
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4638      	mov	r0, r7
 8008ffa:	f7ff ff6b 	bl	8008ed4 <__ssputs_r>
 8008ffe:	3001      	adds	r0, #1
 8009000:	f000 80a7 	beq.w	8009152 <_svfiprintf_r+0x1c6>
 8009004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009006:	445a      	add	r2, fp
 8009008:	9209      	str	r2, [sp, #36]	@ 0x24
 800900a:	f89a 3000 	ldrb.w	r3, [sl]
 800900e:	2b00      	cmp	r3, #0
 8009010:	f000 809f 	beq.w	8009152 <_svfiprintf_r+0x1c6>
 8009014:	2300      	movs	r3, #0
 8009016:	f04f 32ff 	mov.w	r2, #4294967295
 800901a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800901e:	f10a 0a01 	add.w	sl, sl, #1
 8009022:	9304      	str	r3, [sp, #16]
 8009024:	9307      	str	r3, [sp, #28]
 8009026:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800902a:	931a      	str	r3, [sp, #104]	@ 0x68
 800902c:	4654      	mov	r4, sl
 800902e:	2205      	movs	r2, #5
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	484e      	ldr	r0, [pc, #312]	@ (8009170 <_svfiprintf_r+0x1e4>)
 8009036:	f7f7 f8f3 	bl	8000220 <memchr>
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	b9d8      	cbnz	r0, 8009076 <_svfiprintf_r+0xea>
 800903e:	06d0      	lsls	r0, r2, #27
 8009040:	bf44      	itt	mi
 8009042:	2320      	movmi	r3, #32
 8009044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009048:	0711      	lsls	r1, r2, #28
 800904a:	bf44      	itt	mi
 800904c:	232b      	movmi	r3, #43	@ 0x2b
 800904e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009052:	f89a 3000 	ldrb.w	r3, [sl]
 8009056:	2b2a      	cmp	r3, #42	@ 0x2a
 8009058:	d015      	beq.n	8009086 <_svfiprintf_r+0xfa>
 800905a:	9a07      	ldr	r2, [sp, #28]
 800905c:	4654      	mov	r4, sl
 800905e:	2000      	movs	r0, #0
 8009060:	f04f 0c0a 	mov.w	ip, #10
 8009064:	4621      	mov	r1, r4
 8009066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800906a:	3b30      	subs	r3, #48	@ 0x30
 800906c:	2b09      	cmp	r3, #9
 800906e:	d94b      	bls.n	8009108 <_svfiprintf_r+0x17c>
 8009070:	b1b0      	cbz	r0, 80090a0 <_svfiprintf_r+0x114>
 8009072:	9207      	str	r2, [sp, #28]
 8009074:	e014      	b.n	80090a0 <_svfiprintf_r+0x114>
 8009076:	eba0 0308 	sub.w	r3, r0, r8
 800907a:	fa09 f303 	lsl.w	r3, r9, r3
 800907e:	4313      	orrs	r3, r2
 8009080:	9304      	str	r3, [sp, #16]
 8009082:	46a2      	mov	sl, r4
 8009084:	e7d2      	b.n	800902c <_svfiprintf_r+0xa0>
 8009086:	9b03      	ldr	r3, [sp, #12]
 8009088:	1d19      	adds	r1, r3, #4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	9103      	str	r1, [sp, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	bfbb      	ittet	lt
 8009092:	425b      	neglt	r3, r3
 8009094:	f042 0202 	orrlt.w	r2, r2, #2
 8009098:	9307      	strge	r3, [sp, #28]
 800909a:	9307      	strlt	r3, [sp, #28]
 800909c:	bfb8      	it	lt
 800909e:	9204      	strlt	r2, [sp, #16]
 80090a0:	7823      	ldrb	r3, [r4, #0]
 80090a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80090a4:	d10a      	bne.n	80090bc <_svfiprintf_r+0x130>
 80090a6:	7863      	ldrb	r3, [r4, #1]
 80090a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80090aa:	d132      	bne.n	8009112 <_svfiprintf_r+0x186>
 80090ac:	9b03      	ldr	r3, [sp, #12]
 80090ae:	1d1a      	adds	r2, r3, #4
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	9203      	str	r2, [sp, #12]
 80090b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090b8:	3402      	adds	r4, #2
 80090ba:	9305      	str	r3, [sp, #20]
 80090bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009180 <_svfiprintf_r+0x1f4>
 80090c0:	7821      	ldrb	r1, [r4, #0]
 80090c2:	2203      	movs	r2, #3
 80090c4:	4650      	mov	r0, sl
 80090c6:	f7f7 f8ab 	bl	8000220 <memchr>
 80090ca:	b138      	cbz	r0, 80090dc <_svfiprintf_r+0x150>
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	eba0 000a 	sub.w	r0, r0, sl
 80090d2:	2240      	movs	r2, #64	@ 0x40
 80090d4:	4082      	lsls	r2, r0
 80090d6:	4313      	orrs	r3, r2
 80090d8:	3401      	adds	r4, #1
 80090da:	9304      	str	r3, [sp, #16]
 80090dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090e0:	4824      	ldr	r0, [pc, #144]	@ (8009174 <_svfiprintf_r+0x1e8>)
 80090e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80090e6:	2206      	movs	r2, #6
 80090e8:	f7f7 f89a 	bl	8000220 <memchr>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d036      	beq.n	800915e <_svfiprintf_r+0x1d2>
 80090f0:	4b21      	ldr	r3, [pc, #132]	@ (8009178 <_svfiprintf_r+0x1ec>)
 80090f2:	bb1b      	cbnz	r3, 800913c <_svfiprintf_r+0x1b0>
 80090f4:	9b03      	ldr	r3, [sp, #12]
 80090f6:	3307      	adds	r3, #7
 80090f8:	f023 0307 	bic.w	r3, r3, #7
 80090fc:	3308      	adds	r3, #8
 80090fe:	9303      	str	r3, [sp, #12]
 8009100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009102:	4433      	add	r3, r6
 8009104:	9309      	str	r3, [sp, #36]	@ 0x24
 8009106:	e76a      	b.n	8008fde <_svfiprintf_r+0x52>
 8009108:	fb0c 3202 	mla	r2, ip, r2, r3
 800910c:	460c      	mov	r4, r1
 800910e:	2001      	movs	r0, #1
 8009110:	e7a8      	b.n	8009064 <_svfiprintf_r+0xd8>
 8009112:	2300      	movs	r3, #0
 8009114:	3401      	adds	r4, #1
 8009116:	9305      	str	r3, [sp, #20]
 8009118:	4619      	mov	r1, r3
 800911a:	f04f 0c0a 	mov.w	ip, #10
 800911e:	4620      	mov	r0, r4
 8009120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009124:	3a30      	subs	r2, #48	@ 0x30
 8009126:	2a09      	cmp	r2, #9
 8009128:	d903      	bls.n	8009132 <_svfiprintf_r+0x1a6>
 800912a:	2b00      	cmp	r3, #0
 800912c:	d0c6      	beq.n	80090bc <_svfiprintf_r+0x130>
 800912e:	9105      	str	r1, [sp, #20]
 8009130:	e7c4      	b.n	80090bc <_svfiprintf_r+0x130>
 8009132:	fb0c 2101 	mla	r1, ip, r1, r2
 8009136:	4604      	mov	r4, r0
 8009138:	2301      	movs	r3, #1
 800913a:	e7f0      	b.n	800911e <_svfiprintf_r+0x192>
 800913c:	ab03      	add	r3, sp, #12
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	462a      	mov	r2, r5
 8009142:	4b0e      	ldr	r3, [pc, #56]	@ (800917c <_svfiprintf_r+0x1f0>)
 8009144:	a904      	add	r1, sp, #16
 8009146:	4638      	mov	r0, r7
 8009148:	f3af 8000 	nop.w
 800914c:	1c42      	adds	r2, r0, #1
 800914e:	4606      	mov	r6, r0
 8009150:	d1d6      	bne.n	8009100 <_svfiprintf_r+0x174>
 8009152:	89ab      	ldrh	r3, [r5, #12]
 8009154:	065b      	lsls	r3, r3, #25
 8009156:	f53f af2d 	bmi.w	8008fb4 <_svfiprintf_r+0x28>
 800915a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800915c:	e72c      	b.n	8008fb8 <_svfiprintf_r+0x2c>
 800915e:	ab03      	add	r3, sp, #12
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	462a      	mov	r2, r5
 8009164:	4b05      	ldr	r3, [pc, #20]	@ (800917c <_svfiprintf_r+0x1f0>)
 8009166:	a904      	add	r1, sp, #16
 8009168:	4638      	mov	r0, r7
 800916a:	f000 f879 	bl	8009260 <_printf_i>
 800916e:	e7ed      	b.n	800914c <_svfiprintf_r+0x1c0>
 8009170:	08009afc 	.word	0x08009afc
 8009174:	08009b06 	.word	0x08009b06
 8009178:	00000000 	.word	0x00000000
 800917c:	08008ed5 	.word	0x08008ed5
 8009180:	08009b02 	.word	0x08009b02

08009184 <_printf_common>:
 8009184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009188:	4616      	mov	r6, r2
 800918a:	4698      	mov	r8, r3
 800918c:	688a      	ldr	r2, [r1, #8]
 800918e:	690b      	ldr	r3, [r1, #16]
 8009190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009194:	4293      	cmp	r3, r2
 8009196:	bfb8      	it	lt
 8009198:	4613      	movlt	r3, r2
 800919a:	6033      	str	r3, [r6, #0]
 800919c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091a0:	4607      	mov	r7, r0
 80091a2:	460c      	mov	r4, r1
 80091a4:	b10a      	cbz	r2, 80091aa <_printf_common+0x26>
 80091a6:	3301      	adds	r3, #1
 80091a8:	6033      	str	r3, [r6, #0]
 80091aa:	6823      	ldr	r3, [r4, #0]
 80091ac:	0699      	lsls	r1, r3, #26
 80091ae:	bf42      	ittt	mi
 80091b0:	6833      	ldrmi	r3, [r6, #0]
 80091b2:	3302      	addmi	r3, #2
 80091b4:	6033      	strmi	r3, [r6, #0]
 80091b6:	6825      	ldr	r5, [r4, #0]
 80091b8:	f015 0506 	ands.w	r5, r5, #6
 80091bc:	d106      	bne.n	80091cc <_printf_common+0x48>
 80091be:	f104 0a19 	add.w	sl, r4, #25
 80091c2:	68e3      	ldr	r3, [r4, #12]
 80091c4:	6832      	ldr	r2, [r6, #0]
 80091c6:	1a9b      	subs	r3, r3, r2
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dc26      	bgt.n	800921a <_printf_common+0x96>
 80091cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091d0:	6822      	ldr	r2, [r4, #0]
 80091d2:	3b00      	subs	r3, #0
 80091d4:	bf18      	it	ne
 80091d6:	2301      	movne	r3, #1
 80091d8:	0692      	lsls	r2, r2, #26
 80091da:	d42b      	bmi.n	8009234 <_printf_common+0xb0>
 80091dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091e0:	4641      	mov	r1, r8
 80091e2:	4638      	mov	r0, r7
 80091e4:	47c8      	blx	r9
 80091e6:	3001      	adds	r0, #1
 80091e8:	d01e      	beq.n	8009228 <_printf_common+0xa4>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	f003 0306 	and.w	r3, r3, #6
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	bf02      	ittt	eq
 80091f6:	68e5      	ldreq	r5, [r4, #12]
 80091f8:	6833      	ldreq	r3, [r6, #0]
 80091fa:	1aed      	subeq	r5, r5, r3
 80091fc:	68a3      	ldr	r3, [r4, #8]
 80091fe:	bf0c      	ite	eq
 8009200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009204:	2500      	movne	r5, #0
 8009206:	4293      	cmp	r3, r2
 8009208:	bfc4      	itt	gt
 800920a:	1a9b      	subgt	r3, r3, r2
 800920c:	18ed      	addgt	r5, r5, r3
 800920e:	2600      	movs	r6, #0
 8009210:	341a      	adds	r4, #26
 8009212:	42b5      	cmp	r5, r6
 8009214:	d11a      	bne.n	800924c <_printf_common+0xc8>
 8009216:	2000      	movs	r0, #0
 8009218:	e008      	b.n	800922c <_printf_common+0xa8>
 800921a:	2301      	movs	r3, #1
 800921c:	4652      	mov	r2, sl
 800921e:	4641      	mov	r1, r8
 8009220:	4638      	mov	r0, r7
 8009222:	47c8      	blx	r9
 8009224:	3001      	adds	r0, #1
 8009226:	d103      	bne.n	8009230 <_printf_common+0xac>
 8009228:	f04f 30ff 	mov.w	r0, #4294967295
 800922c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009230:	3501      	adds	r5, #1
 8009232:	e7c6      	b.n	80091c2 <_printf_common+0x3e>
 8009234:	18e1      	adds	r1, r4, r3
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	2030      	movs	r0, #48	@ 0x30
 800923a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800923e:	4422      	add	r2, r4
 8009240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009248:	3302      	adds	r3, #2
 800924a:	e7c7      	b.n	80091dc <_printf_common+0x58>
 800924c:	2301      	movs	r3, #1
 800924e:	4622      	mov	r2, r4
 8009250:	4641      	mov	r1, r8
 8009252:	4638      	mov	r0, r7
 8009254:	47c8      	blx	r9
 8009256:	3001      	adds	r0, #1
 8009258:	d0e6      	beq.n	8009228 <_printf_common+0xa4>
 800925a:	3601      	adds	r6, #1
 800925c:	e7d9      	b.n	8009212 <_printf_common+0x8e>
	...

08009260 <_printf_i>:
 8009260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009264:	7e0f      	ldrb	r7, [r1, #24]
 8009266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009268:	2f78      	cmp	r7, #120	@ 0x78
 800926a:	4691      	mov	r9, r2
 800926c:	4680      	mov	r8, r0
 800926e:	460c      	mov	r4, r1
 8009270:	469a      	mov	sl, r3
 8009272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009276:	d807      	bhi.n	8009288 <_printf_i+0x28>
 8009278:	2f62      	cmp	r7, #98	@ 0x62
 800927a:	d80a      	bhi.n	8009292 <_printf_i+0x32>
 800927c:	2f00      	cmp	r7, #0
 800927e:	f000 80d2 	beq.w	8009426 <_printf_i+0x1c6>
 8009282:	2f58      	cmp	r7, #88	@ 0x58
 8009284:	f000 80b9 	beq.w	80093fa <_printf_i+0x19a>
 8009288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800928c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009290:	e03a      	b.n	8009308 <_printf_i+0xa8>
 8009292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009296:	2b15      	cmp	r3, #21
 8009298:	d8f6      	bhi.n	8009288 <_printf_i+0x28>
 800929a:	a101      	add	r1, pc, #4	@ (adr r1, 80092a0 <_printf_i+0x40>)
 800929c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092a0:	080092f9 	.word	0x080092f9
 80092a4:	0800930d 	.word	0x0800930d
 80092a8:	08009289 	.word	0x08009289
 80092ac:	08009289 	.word	0x08009289
 80092b0:	08009289 	.word	0x08009289
 80092b4:	08009289 	.word	0x08009289
 80092b8:	0800930d 	.word	0x0800930d
 80092bc:	08009289 	.word	0x08009289
 80092c0:	08009289 	.word	0x08009289
 80092c4:	08009289 	.word	0x08009289
 80092c8:	08009289 	.word	0x08009289
 80092cc:	0800940d 	.word	0x0800940d
 80092d0:	08009337 	.word	0x08009337
 80092d4:	080093c7 	.word	0x080093c7
 80092d8:	08009289 	.word	0x08009289
 80092dc:	08009289 	.word	0x08009289
 80092e0:	0800942f 	.word	0x0800942f
 80092e4:	08009289 	.word	0x08009289
 80092e8:	08009337 	.word	0x08009337
 80092ec:	08009289 	.word	0x08009289
 80092f0:	08009289 	.word	0x08009289
 80092f4:	080093cf 	.word	0x080093cf
 80092f8:	6833      	ldr	r3, [r6, #0]
 80092fa:	1d1a      	adds	r2, r3, #4
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	6032      	str	r2, [r6, #0]
 8009300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009308:	2301      	movs	r3, #1
 800930a:	e09d      	b.n	8009448 <_printf_i+0x1e8>
 800930c:	6833      	ldr	r3, [r6, #0]
 800930e:	6820      	ldr	r0, [r4, #0]
 8009310:	1d19      	adds	r1, r3, #4
 8009312:	6031      	str	r1, [r6, #0]
 8009314:	0606      	lsls	r6, r0, #24
 8009316:	d501      	bpl.n	800931c <_printf_i+0xbc>
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	e003      	b.n	8009324 <_printf_i+0xc4>
 800931c:	0645      	lsls	r5, r0, #25
 800931e:	d5fb      	bpl.n	8009318 <_printf_i+0xb8>
 8009320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009324:	2d00      	cmp	r5, #0
 8009326:	da03      	bge.n	8009330 <_printf_i+0xd0>
 8009328:	232d      	movs	r3, #45	@ 0x2d
 800932a:	426d      	negs	r5, r5
 800932c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009330:	4859      	ldr	r0, [pc, #356]	@ (8009498 <_printf_i+0x238>)
 8009332:	230a      	movs	r3, #10
 8009334:	e011      	b.n	800935a <_printf_i+0xfa>
 8009336:	6821      	ldr	r1, [r4, #0]
 8009338:	6833      	ldr	r3, [r6, #0]
 800933a:	0608      	lsls	r0, r1, #24
 800933c:	f853 5b04 	ldr.w	r5, [r3], #4
 8009340:	d402      	bmi.n	8009348 <_printf_i+0xe8>
 8009342:	0649      	lsls	r1, r1, #25
 8009344:	bf48      	it	mi
 8009346:	b2ad      	uxthmi	r5, r5
 8009348:	2f6f      	cmp	r7, #111	@ 0x6f
 800934a:	4853      	ldr	r0, [pc, #332]	@ (8009498 <_printf_i+0x238>)
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	bf14      	ite	ne
 8009350:	230a      	movne	r3, #10
 8009352:	2308      	moveq	r3, #8
 8009354:	2100      	movs	r1, #0
 8009356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800935a:	6866      	ldr	r6, [r4, #4]
 800935c:	60a6      	str	r6, [r4, #8]
 800935e:	2e00      	cmp	r6, #0
 8009360:	bfa2      	ittt	ge
 8009362:	6821      	ldrge	r1, [r4, #0]
 8009364:	f021 0104 	bicge.w	r1, r1, #4
 8009368:	6021      	strge	r1, [r4, #0]
 800936a:	b90d      	cbnz	r5, 8009370 <_printf_i+0x110>
 800936c:	2e00      	cmp	r6, #0
 800936e:	d04b      	beq.n	8009408 <_printf_i+0x1a8>
 8009370:	4616      	mov	r6, r2
 8009372:	fbb5 f1f3 	udiv	r1, r5, r3
 8009376:	fb03 5711 	mls	r7, r3, r1, r5
 800937a:	5dc7      	ldrb	r7, [r0, r7]
 800937c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009380:	462f      	mov	r7, r5
 8009382:	42bb      	cmp	r3, r7
 8009384:	460d      	mov	r5, r1
 8009386:	d9f4      	bls.n	8009372 <_printf_i+0x112>
 8009388:	2b08      	cmp	r3, #8
 800938a:	d10b      	bne.n	80093a4 <_printf_i+0x144>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07df      	lsls	r7, r3, #31
 8009390:	d508      	bpl.n	80093a4 <_printf_i+0x144>
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6861      	ldr	r1, [r4, #4]
 8009396:	4299      	cmp	r1, r3
 8009398:	bfde      	ittt	le
 800939a:	2330      	movle	r3, #48	@ 0x30
 800939c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093a4:	1b92      	subs	r2, r2, r6
 80093a6:	6122      	str	r2, [r4, #16]
 80093a8:	f8cd a000 	str.w	sl, [sp]
 80093ac:	464b      	mov	r3, r9
 80093ae:	aa03      	add	r2, sp, #12
 80093b0:	4621      	mov	r1, r4
 80093b2:	4640      	mov	r0, r8
 80093b4:	f7ff fee6 	bl	8009184 <_printf_common>
 80093b8:	3001      	adds	r0, #1
 80093ba:	d14a      	bne.n	8009452 <_printf_i+0x1f2>
 80093bc:	f04f 30ff 	mov.w	r0, #4294967295
 80093c0:	b004      	add	sp, #16
 80093c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	f043 0320 	orr.w	r3, r3, #32
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	4833      	ldr	r0, [pc, #204]	@ (800949c <_printf_i+0x23c>)
 80093d0:	2778      	movs	r7, #120	@ 0x78
 80093d2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093d6:	6823      	ldr	r3, [r4, #0]
 80093d8:	6831      	ldr	r1, [r6, #0]
 80093da:	061f      	lsls	r7, r3, #24
 80093dc:	f851 5b04 	ldr.w	r5, [r1], #4
 80093e0:	d402      	bmi.n	80093e8 <_printf_i+0x188>
 80093e2:	065f      	lsls	r7, r3, #25
 80093e4:	bf48      	it	mi
 80093e6:	b2ad      	uxthmi	r5, r5
 80093e8:	6031      	str	r1, [r6, #0]
 80093ea:	07d9      	lsls	r1, r3, #31
 80093ec:	bf44      	itt	mi
 80093ee:	f043 0320 	orrmi.w	r3, r3, #32
 80093f2:	6023      	strmi	r3, [r4, #0]
 80093f4:	b11d      	cbz	r5, 80093fe <_printf_i+0x19e>
 80093f6:	2310      	movs	r3, #16
 80093f8:	e7ac      	b.n	8009354 <_printf_i+0xf4>
 80093fa:	4827      	ldr	r0, [pc, #156]	@ (8009498 <_printf_i+0x238>)
 80093fc:	e7e9      	b.n	80093d2 <_printf_i+0x172>
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	f023 0320 	bic.w	r3, r3, #32
 8009404:	6023      	str	r3, [r4, #0]
 8009406:	e7f6      	b.n	80093f6 <_printf_i+0x196>
 8009408:	4616      	mov	r6, r2
 800940a:	e7bd      	b.n	8009388 <_printf_i+0x128>
 800940c:	6833      	ldr	r3, [r6, #0]
 800940e:	6825      	ldr	r5, [r4, #0]
 8009410:	6961      	ldr	r1, [r4, #20]
 8009412:	1d18      	adds	r0, r3, #4
 8009414:	6030      	str	r0, [r6, #0]
 8009416:	062e      	lsls	r6, r5, #24
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	d501      	bpl.n	8009420 <_printf_i+0x1c0>
 800941c:	6019      	str	r1, [r3, #0]
 800941e:	e002      	b.n	8009426 <_printf_i+0x1c6>
 8009420:	0668      	lsls	r0, r5, #25
 8009422:	d5fb      	bpl.n	800941c <_printf_i+0x1bc>
 8009424:	8019      	strh	r1, [r3, #0]
 8009426:	2300      	movs	r3, #0
 8009428:	6123      	str	r3, [r4, #16]
 800942a:	4616      	mov	r6, r2
 800942c:	e7bc      	b.n	80093a8 <_printf_i+0x148>
 800942e:	6833      	ldr	r3, [r6, #0]
 8009430:	1d1a      	adds	r2, r3, #4
 8009432:	6032      	str	r2, [r6, #0]
 8009434:	681e      	ldr	r6, [r3, #0]
 8009436:	6862      	ldr	r2, [r4, #4]
 8009438:	2100      	movs	r1, #0
 800943a:	4630      	mov	r0, r6
 800943c:	f7f6 fef0 	bl	8000220 <memchr>
 8009440:	b108      	cbz	r0, 8009446 <_printf_i+0x1e6>
 8009442:	1b80      	subs	r0, r0, r6
 8009444:	6060      	str	r0, [r4, #4]
 8009446:	6863      	ldr	r3, [r4, #4]
 8009448:	6123      	str	r3, [r4, #16]
 800944a:	2300      	movs	r3, #0
 800944c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009450:	e7aa      	b.n	80093a8 <_printf_i+0x148>
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	4632      	mov	r2, r6
 8009456:	4649      	mov	r1, r9
 8009458:	4640      	mov	r0, r8
 800945a:	47d0      	blx	sl
 800945c:	3001      	adds	r0, #1
 800945e:	d0ad      	beq.n	80093bc <_printf_i+0x15c>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	079b      	lsls	r3, r3, #30
 8009464:	d413      	bmi.n	800948e <_printf_i+0x22e>
 8009466:	68e0      	ldr	r0, [r4, #12]
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	4298      	cmp	r0, r3
 800946c:	bfb8      	it	lt
 800946e:	4618      	movlt	r0, r3
 8009470:	e7a6      	b.n	80093c0 <_printf_i+0x160>
 8009472:	2301      	movs	r3, #1
 8009474:	4632      	mov	r2, r6
 8009476:	4649      	mov	r1, r9
 8009478:	4640      	mov	r0, r8
 800947a:	47d0      	blx	sl
 800947c:	3001      	adds	r0, #1
 800947e:	d09d      	beq.n	80093bc <_printf_i+0x15c>
 8009480:	3501      	adds	r5, #1
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	9903      	ldr	r1, [sp, #12]
 8009486:	1a5b      	subs	r3, r3, r1
 8009488:	42ab      	cmp	r3, r5
 800948a:	dcf2      	bgt.n	8009472 <_printf_i+0x212>
 800948c:	e7eb      	b.n	8009466 <_printf_i+0x206>
 800948e:	2500      	movs	r5, #0
 8009490:	f104 0619 	add.w	r6, r4, #25
 8009494:	e7f5      	b.n	8009482 <_printf_i+0x222>
 8009496:	bf00      	nop
 8009498:	08009b0d 	.word	0x08009b0d
 800949c:	08009b1e 	.word	0x08009b1e

080094a0 <memmove>:
 80094a0:	4288      	cmp	r0, r1
 80094a2:	b510      	push	{r4, lr}
 80094a4:	eb01 0402 	add.w	r4, r1, r2
 80094a8:	d902      	bls.n	80094b0 <memmove+0x10>
 80094aa:	4284      	cmp	r4, r0
 80094ac:	4623      	mov	r3, r4
 80094ae:	d807      	bhi.n	80094c0 <memmove+0x20>
 80094b0:	1e43      	subs	r3, r0, #1
 80094b2:	42a1      	cmp	r1, r4
 80094b4:	d008      	beq.n	80094c8 <memmove+0x28>
 80094b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094be:	e7f8      	b.n	80094b2 <memmove+0x12>
 80094c0:	4402      	add	r2, r0
 80094c2:	4601      	mov	r1, r0
 80094c4:	428a      	cmp	r2, r1
 80094c6:	d100      	bne.n	80094ca <memmove+0x2a>
 80094c8:	bd10      	pop	{r4, pc}
 80094ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094d2:	e7f7      	b.n	80094c4 <memmove+0x24>

080094d4 <_sbrk_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	@ (80094f0 <_sbrk_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f9 f998 	bl	8002814 <_sbrk>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_sbrk_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_sbrk_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	20000c48 	.word	0x20000c48

080094f4 <_realloc_r>:
 80094f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f8:	4680      	mov	r8, r0
 80094fa:	4615      	mov	r5, r2
 80094fc:	460c      	mov	r4, r1
 80094fe:	b921      	cbnz	r1, 800950a <_realloc_r+0x16>
 8009500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009504:	4611      	mov	r1, r2
 8009506:	f7ff bc59 	b.w	8008dbc <_malloc_r>
 800950a:	b92a      	cbnz	r2, 8009518 <_realloc_r+0x24>
 800950c:	f7ff fbea 	bl	8008ce4 <_free_r>
 8009510:	2400      	movs	r4, #0
 8009512:	4620      	mov	r0, r4
 8009514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009518:	f000 f81a 	bl	8009550 <_malloc_usable_size_r>
 800951c:	4285      	cmp	r5, r0
 800951e:	4606      	mov	r6, r0
 8009520:	d802      	bhi.n	8009528 <_realloc_r+0x34>
 8009522:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009526:	d8f4      	bhi.n	8009512 <_realloc_r+0x1e>
 8009528:	4629      	mov	r1, r5
 800952a:	4640      	mov	r0, r8
 800952c:	f7ff fc46 	bl	8008dbc <_malloc_r>
 8009530:	4607      	mov	r7, r0
 8009532:	2800      	cmp	r0, #0
 8009534:	d0ec      	beq.n	8009510 <_realloc_r+0x1c>
 8009536:	42b5      	cmp	r5, r6
 8009538:	462a      	mov	r2, r5
 800953a:	4621      	mov	r1, r4
 800953c:	bf28      	it	cs
 800953e:	4632      	movcs	r2, r6
 8009540:	f7ff fbc2 	bl	8008cc8 <memcpy>
 8009544:	4621      	mov	r1, r4
 8009546:	4640      	mov	r0, r8
 8009548:	f7ff fbcc 	bl	8008ce4 <_free_r>
 800954c:	463c      	mov	r4, r7
 800954e:	e7e0      	b.n	8009512 <_realloc_r+0x1e>

08009550 <_malloc_usable_size_r>:
 8009550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009554:	1f18      	subs	r0, r3, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbc      	itt	lt
 800955a:	580b      	ldrlt	r3, [r1, r0]
 800955c:	18c0      	addlt	r0, r0, r3
 800955e:	4770      	bx	lr

08009560 <_init>:
 8009560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009562:	bf00      	nop
 8009564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009566:	bc08      	pop	{r3}
 8009568:	469e      	mov	lr, r3
 800956a:	4770      	bx	lr

0800956c <_fini>:
 800956c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956e:	bf00      	nop
 8009570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009572:	bc08      	pop	{r3}
 8009574:	469e      	mov	lr, r3
 8009576:	4770      	bx	lr
