
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff34  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af0  08010108  08010108  00011108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010bf8  08010bf8  00012218  2**0
                  CONTENTS
  4 .ARM          00000008  08010bf8  08010bf8  00011bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c00  08010c00  00012218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c00  08010c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010c04  08010c04  00011c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08010c08  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002650  20000218  08010e20  00012218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002868  08010e20  00012868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002405c  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c41  00000000  00000000  000362a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  0003aee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016f7  00000000  00000000  0003cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c371  00000000  00000000  0003e38f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cadb  00000000  00000000  0006a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe01  00000000  00000000  000971db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192fdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009058  00000000  00000000  00193020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0019c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080100ec 	.word	0x080100ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	080100ec 	.word	0x080100ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9a0 	b.w	8000fd0 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	@ (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	@ (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	460c      	mov	r4, r1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d14e      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d20:	4694      	mov	ip, r2
 8000d22:	458c      	cmp	ip, r1
 8000d24:	4686      	mov	lr, r0
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	d962      	bls.n	8000df2 <__udivmoddi4+0xde>
 8000d2c:	b14a      	cbz	r2, 8000d42 <__udivmoddi4+0x2e>
 8000d2e:	f1c2 0320 	rsb	r3, r2, #32
 8000d32:	4091      	lsls	r1, r2
 8000d34:	fa20 f303 	lsr.w	r3, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	4319      	orrs	r1, r3
 8000d3e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f f68c 	uxth.w	r6, ip
 8000d4a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d4e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d52:	fb07 1114 	mls	r1, r7, r4, r1
 8000d56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5a:	fb04 f106 	mul.w	r1, r4, r6
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6a:	f080 8112 	bcs.w	8000f92 <__udivmoddi4+0x27e>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 810f 	bls.w	8000f92 <__udivmoddi4+0x27e>
 8000d74:	3c02      	subs	r4, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a59      	subs	r1, r3, r1
 8000d7a:	fa1f f38e 	uxth.w	r3, lr
 8000d7e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d82:	fb07 1110 	mls	r1, r7, r0, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb00 f606 	mul.w	r6, r0, r6
 8000d8e:	429e      	cmp	r6, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x94>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9a:	f080 80fc 	bcs.w	8000f96 <__udivmoddi4+0x282>
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	f240 80f9 	bls.w	8000f96 <__udivmoddi4+0x282>
 8000da4:	4463      	add	r3, ip
 8000da6:	3802      	subs	r0, #2
 8000da8:	1b9b      	subs	r3, r3, r6
 8000daa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dae:	2100      	movs	r1, #0
 8000db0:	b11d      	cbz	r5, 8000dba <__udivmoddi4+0xa6>
 8000db2:	40d3      	lsrs	r3, r2
 8000db4:	2200      	movs	r2, #0
 8000db6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d905      	bls.n	8000dce <__udivmoddi4+0xba>
 8000dc2:	b10d      	cbz	r5, 8000dc8 <__udivmoddi4+0xb4>
 8000dc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e7f5      	b.n	8000dba <__udivmoddi4+0xa6>
 8000dce:	fab3 f183 	clz	r1, r3
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d146      	bne.n	8000e64 <__udivmoddi4+0x150>
 8000dd6:	42a3      	cmp	r3, r4
 8000dd8:	d302      	bcc.n	8000de0 <__udivmoddi4+0xcc>
 8000dda:	4290      	cmp	r0, r2
 8000ddc:	f0c0 80f0 	bcc.w	8000fc0 <__udivmoddi4+0x2ac>
 8000de0:	1a86      	subs	r6, r0, r2
 8000de2:	eb64 0303 	sbc.w	r3, r4, r3
 8000de6:	2001      	movs	r0, #1
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d0e6      	beq.n	8000dba <__udivmoddi4+0xa6>
 8000dec:	e9c5 6300 	strd	r6, r3, [r5]
 8000df0:	e7e3      	b.n	8000dba <__udivmoddi4+0xa6>
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x204>
 8000df8:	eba1 040c 	sub.w	r4, r1, ip
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa1f f78c 	uxth.w	r7, ip
 8000e04:	2101      	movs	r1, #1
 8000e06:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e0e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb07 f006 	mul.w	r0, r7, r6
 8000e1a:	4298      	cmp	r0, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x11c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x11a>
 8000e28:	4298      	cmp	r0, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2b4>
 8000e2e:	4626      	mov	r6, r4
 8000e30:	1a1c      	subs	r4, r3, r0
 8000e32:	fa1f f38e 	uxth.w	r3, lr
 8000e36:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e42:	fb00 f707 	mul.w	r7, r0, r7
 8000e46:	429f      	cmp	r7, r3
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x148>
 8000e4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0x146>
 8000e54:	429f      	cmp	r7, r3
 8000e56:	f200 80b0 	bhi.w	8000fba <__udivmoddi4+0x2a6>
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	1bdb      	subs	r3, r3, r7
 8000e5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e62:	e7a5      	b.n	8000db0 <__udivmoddi4+0x9c>
 8000e64:	f1c1 0620 	rsb	r6, r1, #32
 8000e68:	408b      	lsls	r3, r1
 8000e6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e6e:	431f      	orrs	r7, r3
 8000e70:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e74:	fa04 f301 	lsl.w	r3, r4, r1
 8000e78:	ea43 030c 	orr.w	r3, r3, ip
 8000e7c:	40f4      	lsrs	r4, r6
 8000e7e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e82:	0c38      	lsrs	r0, r7, #16
 8000e84:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e88:	fbb4 fef0 	udiv	lr, r4, r0
 8000e8c:	fa1f fc87 	uxth.w	ip, r7
 8000e90:	fb00 441e 	mls	r4, r0, lr, r4
 8000e94:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e98:	fb0e f90c 	mul.w	r9, lr, ip
 8000e9c:	45a1      	cmp	r9, r4
 8000e9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea2:	d90a      	bls.n	8000eba <__udivmoddi4+0x1a6>
 8000ea4:	193c      	adds	r4, r7, r4
 8000ea6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eaa:	f080 8084 	bcs.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eae:	45a1      	cmp	r9, r4
 8000eb0:	f240 8081 	bls.w	8000fb6 <__udivmoddi4+0x2a2>
 8000eb4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	eba4 0409 	sub.w	r4, r4, r9
 8000ebe:	fa1f f983 	uxth.w	r9, r3
 8000ec2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ec6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ece:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed2:	45a4      	cmp	ip, r4
 8000ed4:	d907      	bls.n	8000ee6 <__udivmoddi4+0x1d2>
 8000ed6:	193c      	adds	r4, r7, r4
 8000ed8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000edc:	d267      	bcs.n	8000fae <__udivmoddi4+0x29a>
 8000ede:	45a4      	cmp	ip, r4
 8000ee0:	d965      	bls.n	8000fae <__udivmoddi4+0x29a>
 8000ee2:	3b02      	subs	r3, #2
 8000ee4:	443c      	add	r4, r7
 8000ee6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eea:	fba0 9302 	umull	r9, r3, r0, r2
 8000eee:	eba4 040c 	sub.w	r4, r4, ip
 8000ef2:	429c      	cmp	r4, r3
 8000ef4:	46ce      	mov	lr, r9
 8000ef6:	469c      	mov	ip, r3
 8000ef8:	d351      	bcc.n	8000f9e <__udivmoddi4+0x28a>
 8000efa:	d04e      	beq.n	8000f9a <__udivmoddi4+0x286>
 8000efc:	b155      	cbz	r5, 8000f14 <__udivmoddi4+0x200>
 8000efe:	ebb8 030e 	subs.w	r3, r8, lr
 8000f02:	eb64 040c 	sbc.w	r4, r4, ip
 8000f06:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0a:	40cb      	lsrs	r3, r1
 8000f0c:	431e      	orrs	r6, r3
 8000f0e:	40cc      	lsrs	r4, r1
 8000f10:	e9c5 6400 	strd	r6, r4, [r5]
 8000f14:	2100      	movs	r1, #0
 8000f16:	e750      	b.n	8000dba <__udivmoddi4+0xa6>
 8000f18:	f1c2 0320 	rsb	r3, r2, #32
 8000f1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f24:	fa24 f303 	lsr.w	r3, r4, r3
 8000f28:	4094      	lsls	r4, r2
 8000f2a:	430c      	orrs	r4, r1
 8000f2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f40:	0c23      	lsrs	r3, r4, #16
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f107 	mul.w	r1, r0, r7
 8000f4a:	4299      	cmp	r1, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x24c>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f56:	d22c      	bcs.n	8000fb2 <__udivmoddi4+0x29e>
 8000f58:	4299      	cmp	r1, r3
 8000f5a:	d92a      	bls.n	8000fb2 <__udivmoddi4+0x29e>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	1a5b      	subs	r3, r3, r1
 8000f62:	b2a4      	uxth	r4, r4
 8000f64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f68:	fb08 3311 	mls	r3, r8, r1, r3
 8000f6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f70:	fb01 f307 	mul.w	r3, r1, r7
 8000f74:	42a3      	cmp	r3, r4
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x276>
 8000f78:	eb1c 0404 	adds.w	r4, ip, r4
 8000f7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f80:	d213      	bcs.n	8000faa <__udivmoddi4+0x296>
 8000f82:	42a3      	cmp	r3, r4
 8000f84:	d911      	bls.n	8000faa <__udivmoddi4+0x296>
 8000f86:	3902      	subs	r1, #2
 8000f88:	4464      	add	r4, ip
 8000f8a:	1ae4      	subs	r4, r4, r3
 8000f8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f90:	e739      	b.n	8000e06 <__udivmoddi4+0xf2>
 8000f92:	4604      	mov	r4, r0
 8000f94:	e6f0      	b.n	8000d78 <__udivmoddi4+0x64>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e706      	b.n	8000da8 <__udivmoddi4+0x94>
 8000f9a:	45c8      	cmp	r8, r9
 8000f9c:	d2ae      	bcs.n	8000efc <__udivmoddi4+0x1e8>
 8000f9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fa6:	3801      	subs	r0, #1
 8000fa8:	e7a8      	b.n	8000efc <__udivmoddi4+0x1e8>
 8000faa:	4631      	mov	r1, r6
 8000fac:	e7ed      	b.n	8000f8a <__udivmoddi4+0x276>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	e799      	b.n	8000ee6 <__udivmoddi4+0x1d2>
 8000fb2:	4630      	mov	r0, r6
 8000fb4:	e7d4      	b.n	8000f60 <__udivmoddi4+0x24c>
 8000fb6:	46d6      	mov	lr, sl
 8000fb8:	e77f      	b.n	8000eba <__udivmoddi4+0x1a6>
 8000fba:	4463      	add	r3, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e74d      	b.n	8000e5c <__udivmoddi4+0x148>
 8000fc0:	4606      	mov	r6, r0
 8000fc2:	4623      	mov	r3, r4
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e70f      	b.n	8000de8 <__udivmoddi4+0xd4>
 8000fc8:	3e02      	subs	r6, #2
 8000fca:	4463      	add	r3, ip
 8000fcc:	e730      	b.n	8000e30 <__udivmoddi4+0x11c>
 8000fce:	bf00      	nop

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f005 fd05 	bl	80069f8 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fee:	bf00      	nop
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3f9      	bcc.n	8000ff0 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f005 fd6b 	bl	8006ad8 <HAL_TIM_Base_Stop>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	4613      	mov	r3, r2
 800101a:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 800101c:	78bb      	ldrb	r3, [r7, #2]
 800101e:	f023 030f 	bic.w	r3, r3, #15
 8001022:	b2da      	uxtb	r2, r3
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	4313      	orrs	r3, r2
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 030c 	orr.w	r3, r3, #12
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001032:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001034:	4b20      	ldr	r3, [pc, #128]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001036:	781a      	ldrb	r2, [r3, #0]
 8001038:	4b1f      	ldr	r3, [pc, #124]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800103a:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 800103c:	78bb      	ldrb	r3, [r7, #2]
 800103e:	f023 030f 	bic.w	r3, r3, #15
 8001042:	b2da      	uxtb	r2, r3
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	4313      	orrs	r3, r2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001052:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	b2da      	uxtb	r2, r3
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	4313      	orrs	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f043 030c 	orr.w	r3, r3, #12
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001068:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800106a:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800106c:	78da      	ldrb	r2, [r3, #3]
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001070:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001072:	78bb      	ldrb	r3, [r7, #2]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	b2da      	uxtb	r2, r3
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	4313      	orrs	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f043 0308 	orr.w	r3, r3, #8
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <__lcd_i2c_write+0xac>)
 8001086:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	889b      	ldrh	r3, [r3, #4]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	b299      	uxth	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2306      	movs	r3, #6
 800109c:	4a06      	ldr	r2, [pc, #24]	@ (80010b8 <__lcd_i2c_write+0xac>)
 800109e:	f003 f86b 	bl	8004178 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2132      	movs	r1, #50	@ 0x32
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff93 	bl	8000fd4 <__lcd_delay_us>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000234 	.word	0x20000234

080010bc <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	461a      	mov	r2, r3
 80010cc:	2100      	movs	r1, #0
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ff9c 	bl	800100c <__lcd_i2c_write>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	461a      	mov	r2, r3
 80010ec:	2101      	movs	r1, #1
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ff8c 	bl	800100c <__lcd_i2c_write>
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff61 	bl	8000fd4 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffd1 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff56 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001128:	2103      	movs	r1, #3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffc6 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff4b 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800113e:	2103      	movs	r1, #3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffbb 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff40 	bl	8000fd4 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001154:	2102      	movs	r1, #2
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ffb0 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800116a:	2128      	movs	r1, #40	@ 0x28
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ffa5 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001172:	210c      	movs	r1, #12
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ffa1 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800117a:	2101      	movs	r1, #1
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff9d 	bl	80010bc <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68db      	ldr	r3, [r3, #12]
 8001186:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff22 	bl	8000fd4 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001190:	2106      	movs	r1, #6
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff92 	bl	80010bc <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	741a      	strb	r2, [r3, #16]
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
 80011ae:	460b      	mov	r3, r1
 80011b0:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 80011b2:	78fb      	ldrb	r3, [r7, #3]
 80011b4:	4619      	mov	r1, r3
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff ff90 	bl	80010dc <__lcd_i2c_write_data>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 80011c4:	b590      	push	{r4, r7, lr}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e00a      	b.n	80011ea <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ff7c 	bl	80010dc <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	3301      	adds	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	7bfc      	ldrb	r4, [r7, #15]
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff f80f 	bl	8000210 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	429c      	cmp	r4, r3
 80011f6:	d3ed      	bcc.n	80011d4 <LCD_I2C_printStr+0x10>
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3714      	adds	r7, #20
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd90      	pop	{r4, r7, pc}
	...

08001204 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
 8001210:	4613      	mov	r3, r2
 8001212:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <LCD_I2C_Cursor+0x30>)
 8001218:	5cd2      	ldrb	r2, [r2, r3]
 800121a:	78bb      	ldrb	r3, [r7, #2]
 800121c:	4413      	add	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3b80      	subs	r3, #128	@ 0x80
 8001222:	b2db      	uxtb	r3, r3
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff48 	bl	80010bc <__lcd_i2c_write_command>
  #endif
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	080103dc 	.word	0x080103dc

08001238 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
 8001244:	4613      	mov	r3, r2
 8001246:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d90a      	bls.n	8001264 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 800124e:	78fb      	ldrb	r3, [r7, #3]
 8001250:	3b02      	subs	r3, #2
 8001252:	b2d9      	uxtb	r1, r3
 8001254:	78bb      	ldrb	r3, [r7, #2]
 8001256:	3314      	adds	r3, #20
 8001258:	b2db      	uxtb	r3, r3
 800125a:	461a      	mov	r2, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ffd1 	bl	8001204 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001262:	e005      	b.n	8001270 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001264:	78ba      	ldrb	r2, [r7, #2]
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	4619      	mov	r1, r3
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffca 	bl	8001204 <LCD_I2C_Cursor>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001280:	2101      	movs	r1, #1
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff1a 	bl	80010bc <__lcd_i2c_write_command>
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	460b      	mov	r3, r1
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800129e:	7afb      	ldrb	r3, [r7, #11]
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3340      	adds	r3, #64	@ 0x40
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff ff06 	bl	80010bc <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80012b0:	2300      	movs	r3, #0
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	e00a      	b.n	80012cc <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ff0b 	bl	80010dc <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	3301      	adds	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
 80012cc:	7dfb      	ldrb	r3, [r7, #23]
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	d9f1      	bls.n	80012b6 <LCD_I2C_DefineChar+0x26>
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b088      	sub	sp, #32
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	460b      	mov	r3, r1
 80012e6:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012e8:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012ea:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 80012ec:	69b8      	ldr	r0, [r7, #24]
 80012ee:	f7fe ff8f 	bl	8000210 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 80012f6:	4a21      	ldr	r2, [pc, #132]	@ (800137c <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001300:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	461a      	mov	r2, r3
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffbf 	bl	8001290 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	77fb      	strb	r3, [r7, #31]
 8001316:	e025      	b.n	8001364 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8001318:	7ffb      	ldrb	r3, [r7, #31]
 800131a:	3303      	adds	r3, #3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ff88 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 8001328:	2100      	movs	r1, #0
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ff3b 	bl	80011a6 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe4b 	bl	8000fd4 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800133e:	7ffb      	ldrb	r3, [r7, #31]
 8001340:	3303      	adds	r3, #3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	4619      	mov	r1, r3
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff75 	bl	8001238 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 800134e:	7ffb      	ldrb	r3, [r7, #31]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4413      	add	r3, r2
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff febf 	bl	80010dc <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 800135e:	7ffb      	ldrb	r3, [r7, #31]
 8001360:	3301      	adds	r3, #1
 8001362:	77fb      	strb	r3, [r7, #31]
 8001364:	7ffa      	ldrb	r2, [r7, #31]
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	429a      	cmp	r2, r3
 800136a:	d3d5      	bcc.n	8001318 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	3720      	adds	r7, #32
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	08010114 	.word	0x08010114
 800137c:	08010120 	.word	0x08010120

08001380 <LCD_I2C_HandleMenuSelection>:

        // Delay for smooth animation
        __lcd_delay(hlcd->Timer, 100); // Adjust delay as needed
    }
}
void LCD_I2C_HandleMenuSelection(uint8_t selectedOption, LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
 800138c:	73fb      	strb	r3, [r7, #15]
    // Clear the screen before rendering the option
    LCD_I2C_Clear(hlcd);
 800138e:	68b8      	ldr	r0, [r7, #8]
 8001390:	f7ff ff72 	bl	8001278 <LCD_I2C_Clear>

    switch (selectedOption) {
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d002      	beq.n	80013a0 <LCD_I2C_HandleMenuSelection+0x20>
 800139a:	2b02      	cmp	r3, #2
 800139c:	d016      	beq.n	80013cc <LCD_I2C_HandleMenuSelection+0x4c>
 800139e:	e02c      	b.n	80013fa <LCD_I2C_HandleMenuSelection+0x7a>
        case 1:
            // Logic for "Test from SD Card"
            //ENC_ResetCounter(henc);  // Reset encoder to avoid interference
            while (1) {
                uint32_t encoderStep = ENC_GetCounter(henc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 fb51 	bl	8001a48 <ENC_GetCounter>
 80013a6:	6178      	str	r0, [r7, #20]
                uint8_t selectedFile = encoderStep % 10;  // Limit to 10 files
 80013a8:	6979      	ldr	r1, [r7, #20]
 80013aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001420 <LCD_I2C_HandleMenuSelection+0xa0>)
 80013ac:	fba3 2301 	umull	r2, r3, r3, r1
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	1aca      	subs	r2, r1, r3
 80013bc:	4613      	mov	r3, r2
 80013be:	74fb      	strb	r3, [r7, #19]

                // Display logic for files
//                LCD_I2C_SetCursor(hlcd, 0, 0);
//                LCD_I2C_printStr(hlcd, "Select File:");
                LCD_I2C_DisplaySDMenu(hlcd, henc);
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	68b8      	ldr	r0, [r7, #8]
 80013c4:	f000 f8f4 	bl	80015b0 <LCD_I2C_DisplaySDMenu>
            while (1) {
 80013c8:	bf00      	nop
 80013ca:	e7e9      	b.n	80013a0 <LCD_I2C_HandleMenuSelection+0x20>

              // **Break to avoid falling through**

        case 2:
            // Logic for "Prepare the Machine"
            LCD_I2C_SetCursor(hlcd, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	68b8      	ldr	r0, [r7, #8]
 80013d2:	f7ff ff31 	bl	8001238 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 80013d6:	4913      	ldr	r1, [pc, #76]	@ (8001424 <LCD_I2C_HandleMenuSelection+0xa4>)
 80013d8:	68b8      	ldr	r0, [r7, #8]
 80013da:	f7ff fef3 	bl	80011c4 <LCD_I2C_printStr>
            LCD_I2C_SetCursor(hlcd, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	f7ff ff28 	bl	8001238 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Preparing...");
 80013e8:	490f      	ldr	r1, [pc, #60]	@ (8001428 <LCD_I2C_HandleMenuSelection+0xa8>)
 80013ea:	68b8      	ldr	r0, [r7, #8]
 80013ec:	f7ff feea 	bl	80011c4 <LCD_I2C_printStr>
            HAL_Delay(2000); // Simulate machine preparation logic
 80013f0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013f4:	f001 ff7c 	bl	80032f0 <HAL_Delay>
            break;
 80013f8:	e00d      	b.n	8001416 <LCD_I2C_HandleMenuSelection+0x96>

        default:
            // Handle invalid cases (should not occur in normal use)
            LCD_I2C_SetCursor(hlcd, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	68b8      	ldr	r0, [r7, #8]
 8001400:	f7ff ff1a 	bl	8001238 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Invalid Option");
 8001404:	4909      	ldr	r1, [pc, #36]	@ (800142c <LCD_I2C_HandleMenuSelection+0xac>)
 8001406:	68b8      	ldr	r0, [r7, #8]
 8001408:	f7ff fedc 	bl	80011c4 <LCD_I2C_printStr>
            HAL_Delay(2000);
 800140c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001410:	f001 ff6e 	bl	80032f0 <HAL_Delay>
            break;
 8001414:	bf00      	nop
    }
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	cccccccd 	.word	0xcccccccd
 8001424:	08010128 	.word	0x08010128
 8001428:	08010140 	.word	0x08010140
 800142c:	08010150 	.word	0x08010150

08001430 <LCD_I2C_MainMenu_Encoder>:
        // Add a small delay for debounce
        HAL_Delay(200);
    }
}

uint8_t LCD_I2C_MainMenu_Encoder(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b096      	sub	sp, #88	@ 0x58
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    const char* menuItems[] = {"Test from SD", "Prepare Machine"}; // Menu options
 800143a:	4a51      	ldr	r2, [pc, #324]	@ (8001580 <LCD_I2C_MainMenu_Encoder+0x150>)
 800143c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001440:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001444:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t totalOptions = sizeof(menuItems) / sizeof(menuItems[0]);
 8001448:	2302      	movs	r3, #2
 800144a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
    uint8_t selectedOption = 0; // Current selected menu item
 800144e:	2300      	movs	r3, #0
 8001450:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t previousOption = 255; // Invalid to ensure the first update
 8001454:	23ff      	movs	r3, #255	@ 0xff
 8001456:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    while (1) {
        // Get the current encoder step count using your ENC_GetCounter function
        uint32_t encoderStep = ENC_GetCounter(henc);
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f000 faf4 	bl	8001a48 <ENC_GetCounter>
 8001460:	64b8      	str	r0, [r7, #72]	@ 0x48

        // Normalize encoder steps to menu options
        selectedOption = encoderStep % totalOptions;
 8001462:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8001466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001468:	fbb3 f1f2 	udiv	r1, r3, r2
 800146c:	fb01 f202 	mul.w	r2, r1, r2
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
        if (selectedOption < 0) {
            selectedOption += totalOptions;
        }

        // Update the menu display only if the selection has changed
        if (selectedOption != previousOption) {
 8001476:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800147a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800147e:	429a      	cmp	r2, r3
 8001480:	d05a      	beq.n	8001538 <LCD_I2C_MainMenu_Encoder+0x108>
            previousOption = selectedOption;
 8001482:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001486:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

            for(int i =0 ; i <4 ; i++){
 800148a:	2300      	movs	r3, #0
 800148c:	653b      	str	r3, [r7, #80]	@ 0x50
 800148e:	e00d      	b.n	80014ac <LCD_I2C_MainMenu_Encoder+0x7c>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001492:	b2db      	uxtb	r3, r3
 8001494:	2200      	movs	r2, #0
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f7ff fecd 	bl	8001238 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 800149e:	4939      	ldr	r1, [pc, #228]	@ (8001584 <LCD_I2C_MainMenu_Encoder+0x154>)
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fe8f 	bl	80011c4 <LCD_I2C_printStr>
            for(int i =0 ; i <4 ; i++){
 80014a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014a8:	3301      	adds	r3, #1
 80014aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80014ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	ddee      	ble.n	8001490 <LCD_I2C_MainMenu_Encoder+0x60>
            }
            // Update menu display
            for (uint8_t i = 0; i < totalOptions; i++) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80014b8:	e038      	b.n	800152c <LCD_I2C_MainMenu_Encoder+0xfc>
                // Clear the line and set cursor position

                LCD_I2C_SetCursor(hlcd, i, 0);
 80014ba:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff feb8 	bl	8001238 <LCD_I2C_SetCursor>

                // Highlight the selected item
                if (i == selectedOption) {
 80014c8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80014cc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d113      	bne.n	80014fc <LCD_I2C_MainMenu_Encoder+0xcc>
                    char formattedLine[21];
                    snprintf(formattedLine, 21, ">%-19s", menuItems[i]);
 80014d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	3358      	adds	r3, #88	@ 0x58
 80014dc:	443b      	add	r3, r7
 80014de:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80014e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80014e6:	4a28      	ldr	r2, [pc, #160]	@ (8001588 <LCD_I2C_MainMenu_Encoder+0x158>)
 80014e8:	2115      	movs	r1, #21
 80014ea:	f00c fcbf 	bl	800de6c <sniprintf>
                    LCD_I2C_printStr(hlcd, formattedLine);
 80014ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff fe65 	bl	80011c4 <LCD_I2C_printStr>
 80014fa:	e012      	b.n	8001522 <LCD_I2C_MainMenu_Encoder+0xf2>
                } else {
                    char formattedLine[21];
                    snprintf(formattedLine, 21, " %-19s", menuItems[i]);
 80014fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	3358      	adds	r3, #88	@ 0x58
 8001504:	443b      	add	r3, r7
 8001506:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800150a:	f107 000c 	add.w	r0, r7, #12
 800150e:	4a1f      	ldr	r2, [pc, #124]	@ (800158c <LCD_I2C_MainMenu_Encoder+0x15c>)
 8001510:	2115      	movs	r1, #21
 8001512:	f00c fcab 	bl	800de6c <sniprintf>
                    LCD_I2C_printStr(hlcd, formattedLine);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe51 	bl	80011c4 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8001522:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001526:	3301      	adds	r3, #1
 8001528:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800152c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001530:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001534:	429a      	cmp	r2, r3
 8001536:	d3c0      	bcc.n	80014ba <LCD_I2C_MainMenu_Encoder+0x8a>
                }
            }
        }

        // Check for selection button
        bool buttonInput = read_buttons();
 8001538:	f000 f82a 	bl	8001590 <read_buttons>
 800153c:	4603      	mov	r3, r0
 800153e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (buttonInput==0) { // Replace with your actual button logic
 8001542:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00e      	beq.n	800156e <LCD_I2C_MainMenu_Encoder+0x13e>
            HAL_Delay(200); // Debounce delay
 8001550:	20c8      	movs	r0, #200	@ 0xc8
 8001552:	f001 fecd 	bl	80032f0 <HAL_Delay>
            if (buttonInput==0) {
 8001556:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800155a:	f083 0301 	eor.w	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <LCD_I2C_MainMenu_Encoder+0x13e>
                return selectedOption + 1;
 8001564:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001568:	3301      	adds	r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	e003      	b.n	8001576 <LCD_I2C_MainMenu_Encoder+0x146>
            }
        }

        // Add a delay for smoother updates
        HAL_Delay(100);
 800156e:	2064      	movs	r0, #100	@ 0x64
 8001570:	f001 febe 	bl	80032f0 <HAL_Delay>
    while (1) {
 8001574:	e771      	b.n	800145a <LCD_I2C_MainMenu_Encoder+0x2a>
    }
}
 8001576:	4618      	mov	r0, r3
 8001578:	3758      	adds	r7, #88	@ 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	08010190 	.word	0x08010190
 8001584:	08010128 	.word	0x08010128
 8001588:	08010198 	.word	0x08010198
 800158c:	080101a0 	.word	0x080101a0

08001590 <read_buttons>:



bool read_buttons(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) return 1; // Down
 8001594:	2102      	movs	r1, #2
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <read_buttons+0x1c>)
 8001598:	f002 fd08 	bl	8003fac <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <read_buttons+0x16>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <read_buttons+0x18>
    else return 0;
 80015a6:	2300      	movs	r3, #0

}
 80015a8:	4618      	mov	r0, r3
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40020400 	.word	0x40020400

080015b0 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	f5ad 7d71 	sub.w	sp, sp, #964	@ 0x3c4
 80015b6:	af02      	add	r7, sp, #8
 80015b8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80015bc:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80015c0:	6018      	str	r0, [r3, #0]
 80015c2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80015c6:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80015ca:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    FILINFO fno;
    uint8_t LCD_ROWS = 4;  // LCD rows
 80015cc:	2304      	movs	r3, #4
 80015ce:	f887 33af 	strb.w	r3, [r7, #943]	@ 0x3af
    uint8_t LCD_WIDTH = 20;
 80015d2:	2314      	movs	r3, #20
 80015d4:	f887 33ae 	strb.w	r3, [r7, #942]	@ 0x3ae

    // Mount SD Card
    fres = f_mount(&FatFs, "", 1);
 80015d8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80015dc:	2201      	movs	r2, #1
 80015de:	49cd      	ldr	r1, [pc, #820]	@ (8001914 <LCD_I2C_DisplaySDMenu+0x364>)
 80015e0:	4618      	mov	r0, r3
 80015e2:	f00a ff3b 	bl	800c45c <f_mount>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f887 33ad 	strb.w	r3, [r7, #941]	@ 0x3ad
    if (fres != FR_OK) {
 80015ec:	f897 33ad 	ldrb.w	r3, [r7, #941]	@ 0x3ad
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d026      	beq.n	8001642 <LCD_I2C_DisplaySDMenu+0x92>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 80015f4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80015f8:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	f7ff fe19 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear row by printing spaces
 8001606:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800160a:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800160e:	49c2      	ldr	r1, [pc, #776]	@ (8001918 <LCD_I2C_DisplaySDMenu+0x368>)
 8001610:	6818      	ldr	r0, [r3, #0]
 8001612:	f7ff fdd7 	bl	80011c4 <LCD_I2C_printStr>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001616:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800161a:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800161e:	2200      	movs	r2, #0
 8001620:	2100      	movs	r1, #0
 8001622:	6818      	ldr	r0, [r3, #0]
 8001624:	f7ff fe08 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8001628:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800162c:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001630:	49ba      	ldr	r1, [pc, #744]	@ (800191c <LCD_I2C_DisplaySDMenu+0x36c>)
 8001632:	6818      	ldr	r0, [r3, #0]
 8001634:	f7ff fdc6 	bl	80011c4 <LCD_I2C_printStr>
        HAL_Delay(2000);
 8001638:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800163c:	f001 fe58 	bl	80032f0 <HAL_Delay>
        return;
 8001640:	e1a9      	b.n	8001996 <LCD_I2C_DisplaySDMenu+0x3e6>
    }

    // Open root directory
    fres = f_opendir(&dir, "/");
 8001642:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001646:	49b6      	ldr	r1, [pc, #728]	@ (8001920 <LCD_I2C_DisplaySDMenu+0x370>)
 8001648:	4618      	mov	r0, r3
 800164a:	f00b faee 	bl	800cc2a <f_opendir>
 800164e:	4603      	mov	r3, r0
 8001650:	f887 33ad 	strb.w	r3, [r7, #941]	@ 0x3ad
    if (fres != FR_OK) {
 8001654:	f897 33ad 	ldrb.w	r3, [r7, #941]	@ 0x3ad
 8001658:	2b00      	cmp	r3, #0
 800165a:	d064      	beq.n	8001726 <LCD_I2C_DisplaySDMenu+0x176>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 800165c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001660:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	f7ff fde5 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    ");
 800166e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001672:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001676:	49a8      	ldr	r1, [pc, #672]	@ (8001918 <LCD_I2C_DisplaySDMenu+0x368>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	f7ff fda3 	bl	80011c4 <LCD_I2C_printStr>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 800167e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001682:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	6818      	ldr	r0, [r3, #0]
 800168c:	f7ff fdd4 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 8001690:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001694:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001698:	49a2      	ldr	r1, [pc, #648]	@ (8001924 <LCD_I2C_DisplaySDMenu+0x374>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	f7ff fd92 	bl	80011c4 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	499c      	ldr	r1, [pc, #624]	@ (8001914 <LCD_I2C_DisplaySDMenu+0x364>)
 80016a4:	2000      	movs	r0, #0
 80016a6:	f00a fed9 	bl	800c45c <f_mount>
        HAL_Delay(2000);
 80016aa:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016ae:	f001 fe1f 	bl	80032f0 <HAL_Delay>
        return;
 80016b2:	e170      	b.n	8001996 <LCD_I2C_DisplaySDMenu+0x3e6>
    }

    // Read files into buffer
    while (fileCount < 10) {
        fres = f_readdir(&dir, &fno);
 80016b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80016b8:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 80016bc:	4611      	mov	r1, r2
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fb4c 	bl	800cd5c <f_readdir>
 80016c4:	4603      	mov	r3, r0
 80016c6:	f887 33ad 	strb.w	r3, [r7, #941]	@ 0x3ad
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 80016ca:	f897 33ad 	ldrb.w	r3, [r7, #941]	@ 0x3ad
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d12d      	bne.n	800172e <LCD_I2C_DisplaySDMenu+0x17e>
 80016d2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80016d6:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80016da:	7d9b      	ldrb	r3, [r3, #22]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d026      	beq.n	800172e <LCD_I2C_DisplaySDMenu+0x17e>
        if (!(fno.fattrib & AM_DIR)) {
 80016e0:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80016e4:	f5a3 7365 	sub.w	r3, r3, #916	@ 0x394
 80016e8:	7a1b      	ldrb	r3, [r3, #8]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <LCD_I2C_DisplaySDMenu+0x176>
            snprintf(fileList[fileCount], LCD_WIDTH + 1, "%-20s", fno.fname);
 80016f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00da      	lsls	r2, r3, #3
 8001700:	1ad2      	subs	r2, r2, r3
 8001702:	4b8a      	ldr	r3, [pc, #552]	@ (800192c <LCD_I2C_DisplaySDMenu+0x37c>)
 8001704:	18d0      	adds	r0, r2, r3
 8001706:	f897 33ae 	ldrb.w	r3, [r7, #942]	@ 0x3ae
 800170a:	3301      	adds	r3, #1
 800170c:	4619      	mov	r1, r3
 800170e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001712:	3316      	adds	r3, #22
 8001714:	4a86      	ldr	r2, [pc, #536]	@ (8001930 <LCD_I2C_DisplaySDMenu+0x380>)
 8001716:	f00c fba9 	bl	800de6c <sniprintf>
            fileCount++;
 800171a:	4b83      	ldr	r3, [pc, #524]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b81      	ldr	r3, [pc, #516]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 8001724:	701a      	strb	r2, [r3, #0]
    while (fileCount < 10) {
 8001726:	4b80      	ldr	r3, [pc, #512]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b09      	cmp	r3, #9
 800172c:	d9c2      	bls.n	80016b4 <LCD_I2C_DisplaySDMenu+0x104>
        }
    }

    f_closedir(&dir);
 800172e:	f507 739e 	add.w	r3, r7, #316	@ 0x13c
 8001732:	4618      	mov	r0, r3
 8001734:	f00b faec 	bl	800cd10 <f_closedir>
    f_mount(NULL, "", 0);
 8001738:	2200      	movs	r2, #0
 800173a:	4976      	ldr	r1, [pc, #472]	@ (8001914 <LCD_I2C_DisplaySDMenu+0x364>)
 800173c:	2000      	movs	r0, #0
 800173e:	f00a fe8d 	bl	800c45c <f_mount>

    if (fileCount == 0) {
 8001742:	4b79      	ldr	r3, [pc, #484]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d126      	bne.n	8001798 <LCD_I2C_DisplaySDMenu+0x1e8>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 800174a:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800174e:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	6818      	ldr	r0, [r3, #0]
 8001758:	f7ff fd6e 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    ");
 800175c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001760:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001764:	496c      	ldr	r1, [pc, #432]	@ (8001918 <LCD_I2C_DisplaySDMenu+0x368>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	f7ff fd2c 	bl	80011c4 <LCD_I2C_printStr>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 800176c:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001770:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f7ff fd5d 	bl	8001238 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 800177e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001782:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001786:	496b      	ldr	r1, [pc, #428]	@ (8001934 <LCD_I2C_DisplaySDMenu+0x384>)
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	f7ff fd1b 	bl	80011c4 <LCD_I2C_printStr>
        HAL_Delay(2000);
 800178e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001792:	f001 fdad 	bl	80032f0 <HAL_Delay>
        return;
 8001796:	e0fe      	b.n	8001996 <LCD_I2C_DisplaySDMenu+0x3e6>
    }

    uint8_t selectedOption = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	f887 33ac 	strb.w	r3, [r7, #940]	@ 0x3ac
    uint8_t previousOption = 255;
 800179e:	23ff      	movs	r3, #255	@ 0xff
 80017a0:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7

    // Display file list and handle encoder input
    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 80017a4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80017a8:	f5a3 736e 	sub.w	r3, r3, #952	@ 0x3b8
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	f000 f94b 	bl	8001a48 <ENC_GetCounter>
 80017b2:	f8c7 03a8 	str.w	r0, [r7, #936]	@ 0x3a8
        selectedOption = encoderStep % fileCount;
 80017b6:	4b5c      	ldr	r3, [pc, #368]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80017c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	f887 33ac 	strb.w	r3, [r7, #940]	@ 0x3ac

        if (selectedOption != previousOption) {
 80017ce:	f897 23ac 	ldrb.w	r2, [r7, #940]	@ 0x3ac
 80017d2:	f897 33b7 	ldrb.w	r3, [r7, #951]	@ 0x3b7
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d076      	beq.n	80018c8 <LCD_I2C_DisplaySDMenu+0x318>
            previousOption = selectedOption;
 80017da:	f897 33ac 	ldrb.w	r3, [r7, #940]	@ 0x3ac
 80017de:	f887 33b7 	strb.w	r3, [r7, #951]	@ 0x3b7

            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 33b6 	strb.w	r3, [r7, #950]	@ 0x3b6
 80017e8:	e068      	b.n	80018bc <LCD_I2C_DisplaySDMenu+0x30c>
                uint8_t displayIndex = (selectedOption + i) % fileCount;
 80017ea:	f897 23ac 	ldrb.w	r2, [r7, #940]	@ 0x3ac
 80017ee:	f897 33b6 	ldrb.w	r3, [r7, #950]	@ 0x3b6
 80017f2:	4413      	add	r3, r2
 80017f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001928 <LCD_I2C_DisplaySDMenu+0x378>)
 80017f6:	7812      	ldrb	r2, [r2, #0]
 80017f8:	fb93 f1f2 	sdiv	r1, r3, r2
 80017fc:	fb01 f202 	mul.w	r2, r1, r2
 8001800:	1a9b      	subs	r3, r3, r2
 8001802:	f887 33a7 	strb.w	r3, [r7, #935]	@ 0x3a7



                // Prepare the formatted line
                char formattedLine[20 + 1] = {0};
 8001806:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800180a:	f5a3 736b 	sub.w	r3, r3, #940	@ 0x3ac
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	3304      	adds	r3, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	741a      	strb	r2, [r3, #16]
                snprintf(formattedLine, LCD_WIDTH + 1, "%c%-19s", (i == 0 ? '>' :' '), fileList[displayIndex]);
 8001820:	f897 33ae 	ldrb.w	r3, [r7, #942]	@ 0x3ae
 8001824:	3301      	adds	r3, #1
 8001826:	461c      	mov	r4, r3
 8001828:	f897 33b6 	ldrb.w	r3, [r7, #950]	@ 0x3b6
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <LCD_I2C_DisplaySDMenu+0x284>
 8001830:	213e      	movs	r1, #62	@ 0x3e
 8001832:	e000      	b.n	8001836 <LCD_I2C_DisplaySDMenu+0x286>
 8001834:	2120      	movs	r1, #32
 8001836:	f897 23a7 	ldrb.w	r2, [r7, #935]	@ 0x3a7
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	00da      	lsls	r2, r3, #3
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	4b39      	ldr	r3, [pc, #228]	@ (800192c <LCD_I2C_DisplaySDMenu+0x37c>)
 8001846:	4413      	add	r3, r2
 8001848:	f107 000c 	add.w	r0, r7, #12
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	460b      	mov	r3, r1
 8001850:	4a39      	ldr	r2, [pc, #228]	@ (8001938 <LCD_I2C_DisplaySDMenu+0x388>)
 8001852:	4621      	mov	r1, r4
 8001854:	f00c fb0a 	bl	800de6c <sniprintf>


                if(i >= 2){
 8001858:	f897 33b6 	ldrb.w	r3, [r7, #950]	@ 0x3b6
 800185c:	2b01      	cmp	r3, #1
 800185e:	d914      	bls.n	800188a <LCD_I2C_DisplaySDMenu+0x2da>
                // Write to the LCD
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001860:	f897 13b6 	ldrb.w	r1, [r7, #950]	@ 0x3b6
 8001864:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001868:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800186c:	2200      	movs	r2, #0
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f7ff fce2 	bl	8001238 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, formattedLine);
 8001874:	f107 020c 	add.w	r2, r7, #12
 8001878:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 800187c:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001880:	4611      	mov	r1, r2
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f7ff fc9e 	bl	80011c4 <LCD_I2C_printStr>
 8001888:	e013      	b.n	80018b2 <LCD_I2C_DisplaySDMenu+0x302>

            }else{
            	// Write to the LCD
                LCD_I2C_SetCursor(hlcd, i, 0);
 800188a:	f897 13b6 	ldrb.w	r1, [r7, #950]	@ 0x3b6
 800188e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001892:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001896:	2200      	movs	r2, #0
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f7ff fccd 	bl	8001238 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, formattedLine);
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80018a6:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80018aa:	4611      	mov	r1, r2
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	f7ff fc89 	bl	80011c4 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80018b2:	f897 33b6 	ldrb.w	r3, [r7, #950]	@ 0x3b6
 80018b6:	3301      	adds	r3, #1
 80018b8:	f887 33b6 	strb.w	r3, [r7, #950]	@ 0x3b6
 80018bc:	f897 23b6 	ldrb.w	r2, [r7, #950]	@ 0x3b6
 80018c0:	f897 33af 	ldrb.w	r3, [r7, #943]	@ 0x3af
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d390      	bcc.n	80017ea <LCD_I2C_DisplaySDMenu+0x23a>
        }

        // Handle button press for selection


            if (read_buttons() == 0) {
 80018c8:	f7ff fe62 	bl	8001590 <read_buttons>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05a      	beq.n	800198e <LCD_I2C_DisplaySDMenu+0x3de>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 80018d8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80018dc:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	f7ff fca7 	bl	8001238 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    ");
 80018ea:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80018ee:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 80018f2:	4909      	ldr	r1, [pc, #36]	@ (8001918 <LCD_I2C_DisplaySDMenu+0x368>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f7ff fc65 	bl	80011c4 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 80018fa:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 80018fe:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	f7ff fc96 	bl	8001238 <LCD_I2C_SetCursor>
                for(int i =0;i<4 ; i++){
 800190c:	2300      	movs	r3, #0
 800190e:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001912:	e02b      	b.n	800196c <LCD_I2C_DisplaySDMenu+0x3bc>
 8001914:	080101a8 	.word	0x080101a8
 8001918:	08010128 	.word	0x08010128
 800191c:	080101ac 	.word	0x080101ac
 8001920:	080101bc 	.word	0x080101bc
 8001924:	080101c0 	.word	0x080101c0
 8001928:	2000023a 	.word	0x2000023a
 800192c:	2000023c 	.word	0x2000023c
 8001930:	080101d0 	.word	0x080101d0
 8001934:	080101d8 	.word	0x080101d8
 8001938:	080101e8 	.word	0x080101e8
                   LCD_I2C_SetCursor(hlcd, i, 0);
 800193c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001940:	b2d9      	uxtb	r1, r3
 8001942:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001946:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800194a:	2200      	movs	r2, #0
 800194c:	6818      	ldr	r0, [r3, #0]
 800194e:	f7ff fc73 	bl	8001238 <LCD_I2C_SetCursor>
                   LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 8001952:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001956:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800195a:	4911      	ldr	r1, [pc, #68]	@ (80019a0 <LCD_I2C_DisplaySDMenu+0x3f0>)
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	f7ff fc31 	bl	80011c4 <LCD_I2C_printStr>
                for(int i =0;i<4 ; i++){
 8001962:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001966:	3301      	adds	r3, #1
 8001968:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 800196c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001970:	2b03      	cmp	r3, #3
 8001972:	dde3      	ble.n	800193c <LCD_I2C_DisplaySDMenu+0x38c>
                                  	}
                LCD_I2C_printStr(hlcd, "Loading...");
 8001974:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001978:	f5a3 736d 	sub.w	r3, r3, #948	@ 0x3b4
 800197c:	4909      	ldr	r1, [pc, #36]	@ (80019a4 <LCD_I2C_DisplaySDMenu+0x3f4>)
 800197e:	6818      	ldr	r0, [r3, #0]
 8001980:	f7ff fc20 	bl	80011c4 <LCD_I2C_printStr>
                HAL_Delay(2000);
 8001984:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001988:	f001 fcb2 	bl	80032f0 <HAL_Delay>
                // process_file(fileList[selectedOption]);
                break;
 800198c:	e003      	b.n	8001996 <LCD_I2C_DisplaySDMenu+0x3e6>
            }

        HAL_Delay(100);
 800198e:	2064      	movs	r0, #100	@ 0x64
 8001990:	f001 fcae 	bl	80032f0 <HAL_Delay>
    while (1) {
 8001994:	e706      	b.n	80017a4 <LCD_I2C_DisplaySDMenu+0x1f4>
    }


}
 8001996:	f507 776f 	add.w	r7, r7, #956	@ 0x3bc
 800199a:	46bd      	mov	sp, r7
 800199c:	bd90      	pop	{r4, r7, pc}
 800199e:	bf00      	nop
 80019a0:	08010128 	.word	0x08010128
 80019a4:	080101f0 	.word	0x080101f0

080019a8 <HAL_TIM_PWM_PulseFinishedCallback>:
uint32_t CurrentPosition;
////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e02c      	b.n	8001a10 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	491a      	ldr	r1, [pc, #104]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2058      	movs	r0, #88	@ 0x58
 80019c0:	fb00 f303 	mul.w	r3, r0, r3
 80019c4:	440b      	add	r3, r1
 80019c6:	330c      	adds	r3, #12
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d11c      	bne.n	8001a0a <HAL_TIM_PWM_PulseFinishedCallback+0x62>
		  motors[i].stepsTaken++;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2158      	movs	r1, #88	@ 0x58
 80019d6:	fb01 f303 	mul.w	r3, r1, r3
 80019da:	4413      	add	r3, r2
 80019dc:	3344      	adds	r3, #68	@ 0x44
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	4910      	ldr	r1, [pc, #64]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2058      	movs	r0, #88	@ 0x58
 80019e8:	fb00 f303 	mul.w	r3, r0, r3
 80019ec:	440b      	add	r3, r1
 80019ee:	3344      	adds	r3, #68	@ 0x44
 80019f0:	601a      	str	r2, [r3, #0]
		  stepsTaken[i] = motors[i].stepsTaken;  // increment counter
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2158      	movs	r1, #88	@ 0x58
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3344      	adds	r3, #68	@ 0x44
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4909      	ldr	r1, [pc, #36]	@ (8001a28 <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0; i < MAX_MOTORS; i++){
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	ddcf      	ble.n	80019b6 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
	  }
  }

}
 8001a16:	bf00      	nop
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	2000241c 	.word	0x2000241c
 8001a28:	20000310 	.word	0x20000310

08001a2c <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	213c      	movs	r1, #60	@ 0x3c
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f005 f97a 	bl	8006d34 <HAL_TIM_Encoder_Start>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	bf34      	ite	cc
 8001a6c:	2301      	movcc	r3, #1
 8001a6e:	2300      	movcs	r3, #0
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	bf8c      	ite	hi
 8001a80:	2301      	movhi	r3, #1
 8001a82:	2300      	movls	r3, #0
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <myprintf>:
void uart_transmit_string(const char *str) {
    HAL_UART_Transmit(&huart3, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
}

// UART-based custom printf
void myprintf(const char *fmt, ...) {
 8001aa4:	b40f      	push	{r0, r1, r2, r3}
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aba:	480a      	ldr	r0, [pc, #40]	@ (8001ae4 <myprintf+0x40>)
 8001abc:	f00c fa78 	bl	800dfb0 <vsniprintf>
    va_end(args);

    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ac0:	4808      	ldr	r0, [pc, #32]	@ (8001ae4 <myprintf+0x40>)
 8001ac2:	f7fe fba5 	bl	8000210 <strlen>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	4905      	ldr	r1, [pc, #20]	@ (8001ae4 <myprintf+0x40>)
 8001ad0:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <myprintf+0x44>)
 8001ad2:	f006 f98f 	bl	8007df4 <HAL_UART_Transmit>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ae0:	b004      	add	sp, #16
 8001ae2:	4770      	bx	lr
 8001ae4:	20001a8c 	.word	0x20001a8c
 8001ae8:	20001e48 	.word	0x20001e48

08001aec <parse_gcode>:
//    }
//}


/* Parse a single G-code line for X, Y, and Z coordinates */
void parse_gcode(const char *line) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
    float x = 0.0f, y = 0.0f, z = 0.0f;
 8001af4:	f04f 0300 	mov.w	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	617b      	str	r3, [r7, #20]
    bool x_found = false, y_found = false, z_found = false;
 8001b06:	2300      	movs	r3, #0
 8001b08:	74fb      	strb	r3, [r7, #19]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	74bb      	strb	r3, [r7, #18]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	747b      	strb	r3, [r7, #17]

    const char *ptr = line;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]
    while (*ptr != '\0') {
 8001b16:	e03b      	b.n	8001b90 <parse_gcode+0xa4>
        if (*ptr == 'X') {
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b58      	cmp	r3, #88	@ 0x58
 8001b1e:	d10e      	bne.n	8001b3e <parse_gcode+0x52>
            ptr++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
            x = strtof(ptr, (char **) &ptr);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f107 020c 	add.w	r2, r7, #12
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f00c f876 	bl	800dc20 <strtof>
 8001b34:	ed87 0a07 	vstr	s0, [r7, #28]
            x_found = true;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	74fb      	strb	r3, [r7, #19]
 8001b3c:	e028      	b.n	8001b90 <parse_gcode+0xa4>
        } else if (*ptr == 'Y') {
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b59      	cmp	r3, #89	@ 0x59
 8001b44:	d10e      	bne.n	8001b64 <parse_gcode+0x78>
            ptr++;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
            y = strtof(ptr, (char **) &ptr);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00c f863 	bl	800dc20 <strtof>
 8001b5a:	ed87 0a06 	vstr	s0, [r7, #24]
            y_found = true;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	74bb      	strb	r3, [r7, #18]
 8001b62:	e015      	b.n	8001b90 <parse_gcode+0xa4>
        } else if (*ptr == 'Z') {
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b5a      	cmp	r3, #90	@ 0x5a
 8001b6a:	d10e      	bne.n	8001b8a <parse_gcode+0x9e>
            ptr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
            z = strtof(ptr, (char **) &ptr);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f107 020c 	add.w	r2, r7, #12
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00c f850 	bl	800dc20 <strtof>
 8001b80:	ed87 0a05 	vstr	s0, [r7, #20]
            z_found = true;
 8001b84:	2301      	movs	r3, #1
 8001b86:	747b      	strb	r3, [r7, #17]
 8001b88:	e002      	b.n	8001b90 <parse_gcode+0xa4>
        } else {
            ptr++;  // Ignore other characters
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	60fb      	str	r3, [r7, #12]
    while (*ptr != '\0') {
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1bf      	bne.n	8001b18 <parse_gcode+0x2c>
        }
    }

    if (coordinate_index < MAX_COORD_COUNT) {
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <parse_gcode+0x10c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ba0:	da23      	bge.n	8001bea <parse_gcode+0xfe>
        if (x_found) coordinates_x[coordinate_index] = x;
 8001ba2:	7cfb      	ldrb	r3, [r7, #19]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <parse_gcode+0xca>
 8001ba8:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <parse_gcode+0x10c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <parse_gcode+0x110>)
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	69fa      	ldr	r2, [r7, #28]
 8001bb4:	601a      	str	r2, [r3, #0]
        if (y_found) coordinates_y[coordinate_index] = y;
 8001bb6:	7cbb      	ldrb	r3, [r7, #18]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d006      	beq.n	8001bca <parse_gcode+0xde>
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <parse_gcode+0x10c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c00 <parse_gcode+0x114>)
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	601a      	str	r2, [r3, #0]
        if (z_found) coordinates_z[coordinate_index] = z;
 8001bca:	7c7b      	ldrb	r3, [r7, #17]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <parse_gcode+0xf2>
 8001bd0:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <parse_gcode+0x10c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001c04 <parse_gcode+0x118>)
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	601a      	str	r2, [r3, #0]
        coordinate_index++;
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <parse_gcode+0x10c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <parse_gcode+0x10c>)
 8001be6:	6013      	str	r3, [r2, #0]
    } else {
        myprintf("Coordinate buffer full, cannot store more data!\r\n");
    }
}
 8001be8:	e002      	b.n	8001bf0 <parse_gcode+0x104>
        myprintf("Coordinate buffer full, cannot store more data!\r\n");
 8001bea:	4807      	ldr	r0, [pc, #28]	@ (8001c08 <parse_gcode+0x11c>)
 8001bec:	f7ff ff5a 	bl	8001aa4 <myprintf>
}
 8001bf0:	bf00      	nop
 8001bf2:	3720      	adds	r7, #32
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20001a88 	.word	0x20001a88
 8001bfc:	20000318 	.word	0x20000318
 8001c00:	20000ae8 	.word	0x20000ae8
 8001c04:	200012b8 	.word	0x200012b8
 8001c08:	080101fc 	.word	0x080101fc

08001c0c <process_raw_gcode>:

/* Process the G-code file and display lines */
void process_raw_gcode(FIL *fil) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0e6      	sub	sp, #408	@ 0x198
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001c16:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001c1a:	6018      	str	r0, [r3, #0]
    char buffer[BUFFER_SIZE];
    UINT bytes_read = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    char line[LINE_BUFFER_SIZE];
    int line_index = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194

    while (f_read(fil, buffer, sizeof(buffer), &bytes_read) == FR_OK && bytes_read > 0) {
 8001c28:	e051      	b.n	8001cce <process_raw_gcode+0xc2>
        for (UINT i = 0; i < bytes_read; i++) {
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001c30:	e047      	b.n	8001cc2 <process_raw_gcode+0xb6>
            char c = buffer[i];
 8001c32:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8001c36:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001c3a:	4413      	add	r3, r2
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	f887 318f 	strb.w	r3, [r7, #399]	@ 0x18f

            if (c == '\n' || c == '\r') {
 8001c42:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d003      	beq.n	8001c52 <process_raw_gcode+0x46>
 8001c4a:	f897 318f 	ldrb.w	r3, [r7, #399]	@ 0x18f
 8001c4e:	2b0d      	cmp	r3, #13
 8001c50:	d11b      	bne.n	8001c8a <process_raw_gcode+0x7e>
                if (line_index > 0) {
 8001c52:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	dd2e      	ble.n	8001cb8 <process_raw_gcode+0xac>
                    line[line_index] = '\0';
 8001c5a:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001c5e:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8001c62:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c66:	4413      	add	r3, r2
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
                    myprintf("Line: %s\r\n", line); // Display the line
 8001c6c:	f107 0308 	add.w	r3, r7, #8
 8001c70:	4619      	mov	r1, r3
 8001c72:	482f      	ldr	r0, [pc, #188]	@ (8001d30 <process_raw_gcode+0x124>)
 8001c74:	f7ff ff16 	bl	8001aa4 <myprintf>
                    parse_gcode(line);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff35 	bl	8001aec <parse_gcode>
                    line_index = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                if (line_index > 0) {
 8001c88:	e016      	b.n	8001cb8 <process_raw_gcode+0xac>
                }
            } else {
                if (line_index < LINE_BUFFER_SIZE - 1) {
 8001c8a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001c90:	dc0c      	bgt.n	8001cac <process_raw_gcode+0xa0>
                    line[line_index++] = c;
 8001c92:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 8001c9c:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001ca0:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 8001ca4:	f897 118f 	ldrb.w	r1, [r7, #399]	@ 0x18f
 8001ca8:	54d1      	strb	r1, [r2, r3]
 8001caa:	e005      	b.n	8001cb8 <process_raw_gcode+0xac>
                } else {
                    myprintf("Line buffer overflow, skipping line.\r\n");
 8001cac:	4821      	ldr	r0, [pc, #132]	@ (8001d34 <process_raw_gcode+0x128>)
 8001cae:	f7ff fef9 	bl	8001aa4 <myprintf>
                    line_index = 0; // Reset for safety
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
        for (UINT i = 0; i < bytes_read; i++) {
 8001cb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8001cc2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001cc6:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3b1      	bcc.n	8001c32 <process_raw_gcode+0x26>
    while (f_read(fil, buffer, sizeof(buffer), &bytes_read) == FR_OK && bytes_read > 0) {
 8001cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001cd2:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001cd6:	f507 72cc 	add.w	r2, r7, #408	@ 0x198
 8001cda:	f5a2 70ca 	sub.w	r0, r2, #404	@ 0x194
 8001cde:	2280      	movs	r2, #128	@ 0x80
 8001ce0:	6800      	ldr	r0, [r0, #0]
 8001ce2:	f00a fdbb 	bl	800c85c <f_read>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <process_raw_gcode+0xe8>
 8001cec:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d19a      	bne.n	8001c2a <process_raw_gcode+0x1e>
                }
            }
        }
    }

    if (line_index > 0) {
 8001cf4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	dd13      	ble.n	8001d24 <process_raw_gcode+0x118>
        line[line_index] = '\0';
 8001cfc:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001d00:	f5a3 72c8 	sub.w	r2, r3, #400	@ 0x190
 8001d04:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
        myprintf("Line: %s\r\n", line); // Display the line
 8001d0e:	f107 0308 	add.w	r3, r7, #8
 8001d12:	4619      	mov	r1, r3
 8001d14:	4806      	ldr	r0, [pc, #24]	@ (8001d30 <process_raw_gcode+0x124>)
 8001d16:	f7ff fec5 	bl	8001aa4 <myprintf>
        parse_gcode(line);
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fee4 	bl	8001aec <parse_gcode>
    }
}
 8001d24:	bf00      	nop
 8001d26:	f507 77cc 	add.w	r7, r7, #408	@ 0x198
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	08010230 	.word	0x08010230
 8001d34:	0801023c 	.word	0x0801023c

08001d38 <sd_card_read_gcode>:

/* Open and process the G-code file */
void sd_card_read_gcode(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 8001d3e:	af00      	add	r7, sp, #0
    myprintf("\r\n~ SD card G-code processing ~\r\n");
 8001d40:	482e      	ldr	r0, [pc, #184]	@ (8001dfc <sd_card_read_gcode+0xc4>)
 8001d42:	f7ff feaf 	bl	8001aa4 <myprintf>

    // List all available files
    myprintf("Listing files on SD card:\r\n");
 8001d46:	482e      	ldr	r0, [pc, #184]	@ (8001e00 <sd_card_read_gcode+0xc8>)
 8001d48:	f7ff feac 	bl	8001aa4 <myprintf>
    // Mount the SD card
    FATFS FatFs;
    FIL fil;
    FRESULT fres;

    myprintf("Mounting SD card...\r\n");
 8001d4c:	482d      	ldr	r0, [pc, #180]	@ (8001e04 <sd_card_read_gcode+0xcc>)
 8001d4e:	f7ff fea9 	bl	8001aa4 <myprintf>
    fres = f_mount(&FatFs, "", 1);
 8001d52:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 8001d56:	2201      	movs	r2, #1
 8001d58:	492b      	ldr	r1, [pc, #172]	@ (8001e08 <sd_card_read_gcode+0xd0>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f00a fb7e 	bl	800c45c <f_mount>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK) {
 8001d66:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <sd_card_read_gcode+0x44>
        myprintf("Failed to mount SD card (Error: %i)\r\n", fres);
 8001d6e:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001d72:	4619      	mov	r1, r3
 8001d74:	4825      	ldr	r0, [pc, #148]	@ (8001e0c <sd_card_read_gcode+0xd4>)
 8001d76:	f7ff fe95 	bl	8001aa4 <myprintf>
        return;
 8001d7a:	e03a      	b.n	8001df2 <sd_card_read_gcode+0xba>
    }

    // Open a G-code file
    const char *filename = "yazidstink.gcode";
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <sd_card_read_gcode+0xd8>)
 8001d7e:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
    myprintf("Attempting to open file '%s'\r\n", filename);
 8001d82:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001d86:	4823      	ldr	r0, [pc, #140]	@ (8001e14 <sd_card_read_gcode+0xdc>)
 8001d88:	f7ff fe8c 	bl	8001aa4 <myprintf>

    fres = f_open(&fil, filename, FA_READ);
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00a fba7 	bl	800c4e8 <f_open>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
    if (fres != FR_OK) {
 8001da0:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00d      	beq.n	8001dc4 <sd_card_read_gcode+0x8c>
        myprintf("Failed to open file '%s' (Error: %i)\r\n", filename, fres);
 8001da8:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 8001dac:	461a      	mov	r2, r3
 8001dae:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001db2:	4819      	ldr	r0, [pc, #100]	@ (8001e18 <sd_card_read_gcode+0xe0>)
 8001db4:	f7ff fe76 	bl	8001aa4 <myprintf>
        f_mount(NULL, "", 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	4913      	ldr	r1, [pc, #76]	@ (8001e08 <sd_card_read_gcode+0xd0>)
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f00a fb4d 	bl	800c45c <f_mount>
        return;
 8001dc2:	e016      	b.n	8001df2 <sd_card_read_gcode+0xba>
    }

    // Process the G-code file
    myprintf("Processing '%s'...\r\n", filename);
 8001dc4:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001dc8:	4814      	ldr	r0, [pc, #80]	@ (8001e1c <sd_card_read_gcode+0xe4>)
 8001dca:	f7ff fe6b 	bl	8001aa4 <myprintf>
    process_raw_gcode(&fil);
 8001dce:	1d3b      	adds	r3, r7, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ff1b 	bl	8001c0c <process_raw_gcode>

    // Close the file and unmount the SD card
    f_close(&fil);
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00a fefc 	bl	800cbd6 <f_close>
    f_mount(NULL, "", 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	4909      	ldr	r1, [pc, #36]	@ (8001e08 <sd_card_read_gcode+0xd0>)
 8001de2:	2000      	movs	r0, #0
 8001de4:	f00a fb3a 	bl	800c45c <f_mount>

    myprintf("File '%s' processing complete and SD card unmounted.\r\n", filename);
 8001de8:	f8d7 1468 	ldr.w	r1, [r7, #1128]	@ 0x468
 8001dec:	480c      	ldr	r0, [pc, #48]	@ (8001e20 <sd_card_read_gcode+0xe8>)
 8001dee:	f7ff fe59 	bl	8001aa4 <myprintf>
}
 8001df2:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	08010264 	.word	0x08010264
 8001e00:	08010288 	.word	0x08010288
 8001e04:	080102a4 	.word	0x080102a4
 8001e08:	080102bc 	.word	0x080102bc
 8001e0c:	080102c0 	.word	0x080102c0
 8001e10:	080102e8 	.word	0x080102e8
 8001e14:	080102fc 	.word	0x080102fc
 8001e18:	0801031c 	.word	0x0801031c
 8001e1c:	08010344 	.word	0x08010344
 8001e20:	0801035c 	.word	0x0801035c

08001e24 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e34:	d102      	bne.n	8001e3c <HAL_GPIO_EXTI_Callback+0x18>
    {
        // Disable further interrupts for the button

        // Reset the motor steps and trigger motion
    	Flag = 1;
 8001e36:	4b04      	ldr	r3, [pc, #16]	@ (8001e48 <HAL_GPIO_EXTI_Callback+0x24>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	701a      	strb	r2, [r3, #0]


        // Re-enable the interrupt after the motion is complete (done in a later step)

}
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20002410 	.word	0x20002410

08001e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e52:	f001 f9f0 	bl	8003236 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e56:	f000 f857 	bl	8001f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e5a:	f000 fbb7 	bl	80025cc <MX_GPIO_Init>
  MX_DMA_Init();
 8001e5e:	f000 fb97 	bl	8002590 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001e62:	f000 fb37 	bl	80024d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001e66:	f000 fb65 	bl	8002534 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8001e6a:	f000 fa7f 	bl	800236c <MX_TIM7_Init>
  MX_I2C1_Init();
 8001e6e:	f000 f8b9 	bl	8001fe4 <MX_I2C1_Init>
  MX_TIM4_Init();
 8001e72:	f000 fa25 	bl	80022c0 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001e76:	f000 f933 	bl	80020e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001e7a:	f000 fafb 	bl	8002474 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001e7e:	f007 fa93 	bl	80093a8 <MX_FATFS_Init>
  MX_SPI2_Init();
 8001e82:	f000 f8ef 	bl	8002064 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001e86:	f000 f9a3 	bl	80021d0 <MX_TIM3_Init>
  MX_TIM14_Init();
 8001e8a:	f000 faa5 	bl	80023d8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //SERVO_Init(&hservo1);
  //initializeMotors();
  //initializeSystem();
   ENC_Init(&henc1);
 8001e8e:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <main+0xa8>)
 8001e90:	f7ff fdcc 	bl	8001a2c <ENC_Init>
//    //    HAL_Delay(2);
//        TMC2209_SetDirection(&motors[1], dir);
//        TMC2209_SetSpeed(&motors[1], 16000);
//        //TMC2209_Step(&motors[1], 16000);

   LCD_I2C_Init(&hlcd3);
 8001e94:	4818      	ldr	r0, [pc, #96]	@ (8001ef8 <main+0xac>)
 8001e96:	f7ff f931 	bl	80010fc <LCD_I2C_Init>
   LCD_I2C_Clear(&hlcd3);
 8001e9a:	4817      	ldr	r0, [pc, #92]	@ (8001ef8 <main+0xac>)
 8001e9c:	f7ff f9ec 	bl	8001278 <LCD_I2C_Clear>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	4815      	ldr	r0, [pc, #84]	@ (8001ef8 <main+0xac>)
 8001ea4:	f7ff fa1a 	bl	80012dc <LCD_I2C_DisplaySequentialGlossyText>

   spiPre = SD_SPI_HANDLE.Instance->CR1;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <main+0xb0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <main+0xb4>)
 8001eb0:	6013      	str	r3, [r2, #0]

   sd_card_read_gcode();
 8001eb2:	f7ff ff41 	bl	8001d38 <sd_card_read_gcode>
   spiPre = SD_SPI_HANDLE.Instance->CR1;
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <main+0xb0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <main+0xb4>)
 8001ebe:	6013      	str	r3, [r2, #0]
   //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
 // Axis X, Motor X1

  while (1){

      if (Flag) // Adjust based on button state
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <main+0xb8>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d002      	beq.n	8001ed0 <main+0x84>

//    	         MotorsHoming(&motors);
//    	         stepsTaken[0] = 0;
//    	         HAL_Delay(200);
    	         //TMC2209_MoveTo(&axes[0], 0, -100); // Axis X, Motor X1
    	  	  	 Flag = 0;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <main+0xb8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	701a      	strb	r2, [r3, #0]
//       }

//       c = axes[0].motors[0]->currentPositionMM;

	  //Flag = HAL_GPIO_ReadPin(GPIOC,USER_Btn_Pin);
	  uint32_t encode = ENC_GetCounter(&henc1);
 8001ed0:	4808      	ldr	r0, [pc, #32]	@ (8001ef4 <main+0xa8>)
 8001ed2:	f7ff fdb9 	bl	8001a48 <ENC_GetCounter>
 8001ed6:	6078      	str	r0, [r7, #4]
          // Show the menu and get the user's choice
         uint8_t choice = LCD_I2C_MainMenu_Encoder(&hlcd3, &henc1);
 8001ed8:	4906      	ldr	r1, [pc, #24]	@ (8001ef4 <main+0xa8>)
 8001eda:	4807      	ldr	r0, [pc, #28]	@ (8001ef8 <main+0xac>)
 8001edc:	f7ff faa8 	bl	8001430 <LCD_I2C_MainMenu_Encoder>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	70fb      	strb	r3, [r7, #3]

//
//          // Handle the selected option using the encapsulated function
          LCD_I2C_HandleMenuSelection(choice, &hlcd3,&henc1);
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	4a03      	ldr	r2, [pc, #12]	@ (8001ef4 <main+0xa8>)
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <main+0xac>)
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff fa48 	bl	8001380 <LCD_I2C_HandleMenuSelection>
  while (1){
 8001ef0:	e7e6      	b.n	8001ec0 <main+0x74>
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000018 	.word	0x20000018
 8001efc:	20001be0 	.word	0x20001be0
 8001f00:	20002414 	.word	0x20002414
 8001f04:	20002410 	.word	0x20002410

08001f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	@ 0x50
 8001f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f0e:	f107 0320 	add.w	r3, r7, #32
 8001f12:	2230      	movs	r2, #48	@ 0x30
 8001f14:	2100      	movs	r1, #0
 8001f16:	4618      	mov	r0, r3
 8001f18:	f00c f858 	bl	800dfcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f1c:	f107 030c 	add.w	r3, r7, #12
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f2c:	f002 fe28 	bl	8004b80 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	4b2a      	ldr	r3, [pc, #168]	@ (8001fdc <SystemClock_Config+0xd4>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a29      	ldr	r2, [pc, #164]	@ (8001fdc <SystemClock_Config+0xd4>)
 8001f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3c:	4b27      	ldr	r3, [pc, #156]	@ (8001fdc <SystemClock_Config+0xd4>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	60bb      	str	r3, [r7, #8]
 8001f46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b25      	ldr	r3, [pc, #148]	@ (8001fe0 <SystemClock_Config+0xd8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a24      	ldr	r2, [pc, #144]	@ (8001fe0 <SystemClock_Config+0xd8>)
 8001f4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b22      	ldr	r3, [pc, #136]	@ (8001fe0 <SystemClock_Config+0xd8>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f64:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001f68:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f74:	2304      	movs	r3, #4
 8001f76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001f78:	23d8      	movs	r3, #216	@ 0xd8
 8001f7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f80:	2309      	movs	r3, #9
 8001f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fe59 	bl	8004c40 <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001f94:	f000 fc6a 	bl	800286c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f98:	f002 fe02 	bl	8004ba0 <HAL_PWREx_EnableOverDrive>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001fa2:	f000 fc63 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001faa:	2302      	movs	r3, #2
 8001fac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fb2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fb6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fbc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	2107      	movs	r1, #7
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 f8df 	bl	8005188 <HAL_RCC_ClockConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001fd0:	f000 fc4c 	bl	800286c <Error_Handler>
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3750      	adds	r7, #80	@ 0x50
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40007000 	.word	0x40007000

08001fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_I2C1_Init+0x74>)
 8001fea:	4a1c      	ldr	r2, [pc, #112]	@ (800205c <MX_I2C1_Init+0x78>)
 8001fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	@ (8002058 <MX_I2C1_Init+0x74>)
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8002060 <MX_I2C1_Init+0x7c>)
 8001ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001ff4:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_I2C1_Init+0x74>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <MX_I2C1_Init+0x74>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002008:	2200      	movs	r2, #0
 800200a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800200c:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <MX_I2C1_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002012:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002018:	4b0f      	ldr	r3, [pc, #60]	@ (8002058 <MX_I2C1_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800201e:	480e      	ldr	r0, [pc, #56]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002020:	f002 f80e 	bl	8004040 <HAL_I2C_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800202a:	f000 fc1f 	bl	800286c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800202e:	2100      	movs	r1, #0
 8002030:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002032:	f002 fbd3 	bl	80047dc <HAL_I2CEx_ConfigAnalogFilter>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800203c:	f000 fc16 	bl	800286c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002040:	2100      	movs	r1, #0
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_I2C1_Init+0x74>)
 8002044:	f002 fc15 	bl	8004872 <HAL_I2CEx_ConfigDigitalFilter>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800204e:	f000 fc0d 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20001b8c 	.word	0x20001b8c
 800205c:	40005400 	.word	0x40005400
 8002060:	6000030d 	.word	0x6000030d

08002064 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002068:	4b1b      	ldr	r3, [pc, #108]	@ (80020d8 <MX_SPI2_Init+0x74>)
 800206a:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <MX_SPI2_Init+0x78>)
 800206c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800206e:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <MX_SPI2_Init+0x74>)
 8002070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002074:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <MX_SPI2_Init+0x74>)
 8002078:	2200      	movs	r2, #0
 800207a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <MX_SPI2_Init+0x74>)
 800207e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002082:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002084:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <MX_SPI2_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800208a:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <MX_SPI2_Init+0x74>)
 800208c:	2200      	movs	r2, #0
 800208e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_SPI2_Init+0x74>)
 8002092:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002096:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002098:	4b0f      	ldr	r3, [pc, #60]	@ (80020d8 <MX_SPI2_Init+0x74>)
 800209a:	2238      	movs	r2, #56	@ 0x38
 800209c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800209e:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80020b0:	4b09      	ldr	r3, [pc, #36]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020b2:	2207      	movs	r2, #7
 80020b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020be:	2208      	movs	r2, #8
 80020c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	@ (80020d8 <MX_SPI2_Init+0x74>)
 80020c4:	f003 fe76 	bl	8005db4 <HAL_SPI_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80020ce:	f000 fbcd 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20001be0 	.word	0x20001be0
 80020dc:	40003800 	.word	0x40003800

080020e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08e      	sub	sp, #56	@ 0x38
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]
 800210e:	615a      	str	r2, [r3, #20]
 8002110:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002112:	4b2e      	ldr	r3, [pc, #184]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002114:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002118:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800211a:	4b2c      	ldr	r3, [pc, #176]	@ (80021cc <MX_TIM2_Init+0xec>)
 800211c:	22d7      	movs	r2, #215	@ 0xd7
 800211e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002120:	4b2a      	ldr	r3, [pc, #168]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002126:	4b29      	ldr	r3, [pc, #164]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002128:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800212c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800213a:	4824      	ldr	r0, [pc, #144]	@ (80021cc <MX_TIM2_Init+0xec>)
 800213c:	f004 fc04 	bl	8006948 <HAL_TIM_Base_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002146:	f000 fb91 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002150:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002154:	4619      	mov	r1, r3
 8002156:	481d      	ldr	r0, [pc, #116]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002158:	f005 f896 	bl	8007288 <HAL_TIM_ConfigClockSource>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002162:	f000 fb83 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002166:	4819      	ldr	r0, [pc, #100]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002168:	f004 fcdd 	bl	8006b26 <HAL_TIM_PWM_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002172:	f000 fb7b 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4811      	ldr	r0, [pc, #68]	@ (80021cc <MX_TIM2_Init+0xec>)
 8002186:	f005 fd3b 	bl	8007c00 <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002190:	f000 fb6c 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002194:	2360      	movs	r3, #96	@ 0x60
 8002196:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002198:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800219c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219e:	2300      	movs	r3, #0
 80021a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a6:	463b      	mov	r3, r7
 80021a8:	2208      	movs	r2, #8
 80021aa:	4619      	mov	r1, r3
 80021ac:	4807      	ldr	r0, [pc, #28]	@ (80021cc <MX_TIM2_Init+0xec>)
 80021ae:	f004 ff57 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80021b8:	f000 fb58 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021bc:	4803      	ldr	r0, [pc, #12]	@ (80021cc <MX_TIM2_Init+0xec>)
 80021be:	f000 fcf5 	bl	8002bac <HAL_TIM_MspPostInit>

}
 80021c2:	bf00      	nop
 80021c4:	3738      	adds	r7, #56	@ 0x38
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20001c44 	.word	0x20001c44

080021d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08e      	sub	sp, #56	@ 0x38
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f0:	463b      	mov	r3, r7
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
 80021fe:	615a      	str	r2, [r3, #20]
 8002200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002202:	4b2d      	ldr	r3, [pc, #180]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002204:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <MX_TIM3_Init+0xec>)
 8002206:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8002208:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 800220a:	226b      	movs	r2, #107	@ 0x6b
 800220c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002214:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002216:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800221a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002228:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 800222a:	f004 fb8d 	bl	8006948 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002234:	f000 fb1a 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002242:	4619      	mov	r1, r3
 8002244:	481c      	ldr	r0, [pc, #112]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002246:	f005 f81f 	bl	8007288 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002250:	f000 fb0c 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002254:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002256:	f004 fc66 	bl	8006b26 <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002260:	f000 fb04 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226c:	f107 031c 	add.w	r3, r7, #28
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 8002274:	f005 fcc4 	bl	8007c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800227e:	f000 faf5 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8002286:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800228a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228c:	2300      	movs	r3, #0
 800228e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	4619      	mov	r1, r3
 800229a:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 800229c:	f004 fee0 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80022a6:	f000 fae1 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022aa:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM3_Init+0xe8>)
 80022ac:	f000 fc7e 	bl	8002bac <HAL_TIM_MspPostInit>

}
 80022b0:	bf00      	nop
 80022b2:	3738      	adds	r7, #56	@ 0x38
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20001c90 	.word	0x20001c90
 80022bc:	40000400 	.word	0x40000400

080022c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08c      	sub	sp, #48	@ 0x30
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022c6:	f107 030c 	add.w	r3, r7, #12
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	2100      	movs	r1, #0
 80022ce:	4618      	mov	r0, r3
 80022d0:	f00b fe7c 	bl	800dfcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d4:	463b      	mov	r3, r7
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	605a      	str	r2, [r3, #4]
 80022dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022de:	4b21      	ldr	r3, [pc, #132]	@ (8002364 <MX_TIM4_Init+0xa4>)
 80022e0:	4a21      	ldr	r2, [pc, #132]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80022e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <MX_TIM4_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <MX_TIM4_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 80022f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002364 <MX_TIM4_Init+0xa4>)
 80022f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80022f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002364 <MX_TIM4_Init+0xa4>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <MX_TIM4_Init+0xa4>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002304:	2303      	movs	r3, #3
 8002306:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800230c:	2301      	movs	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002314:	230f      	movs	r3, #15
 8002316:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800231c:	2301      	movs	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8002324:	230f      	movs	r3, #15
 8002326:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	4619      	mov	r1, r3
 800232e:	480d      	ldr	r0, [pc, #52]	@ (8002364 <MX_TIM4_Init+0xa4>)
 8002330:	f004 fc5a 	bl	8006be8 <HAL_TIM_Encoder_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800233a:	f000 fa97 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	@ (8002364 <MX_TIM4_Init+0xa4>)
 800234c:	f005 fc58 	bl	8007c00 <HAL_TIMEx_MasterConfigSynchronization>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002356:	f000 fa89 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	3730      	adds	r7, #48	@ 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001cdc 	.word	0x20001cdc
 8002368:	40000800 	.word	0x40000800

0800236c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800237c:	4b14      	ldr	r3, [pc, #80]	@ (80023d0 <MX_TIM7_Init+0x64>)
 800237e:	4a15      	ldr	r2, [pc, #84]	@ (80023d4 <MX_TIM7_Init+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8002382:	4b13      	ldr	r3, [pc, #76]	@ (80023d0 <MX_TIM7_Init+0x64>)
 8002384:	22d7      	movs	r2, #215	@ 0xd7
 8002386:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002388:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <MX_TIM7_Init+0x64>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800238e:	4b10      	ldr	r3, [pc, #64]	@ (80023d0 <MX_TIM7_Init+0x64>)
 8002390:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002394:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002396:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <MX_TIM7_Init+0x64>)
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <MX_TIM7_Init+0x64>)
 800239e:	f004 fad3 	bl	8006948 <HAL_TIM_Base_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80023a8:	f000 fa60 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <MX_TIM7_Init+0x64>)
 80023ba:	f005 fc21 	bl	8007c00 <HAL_TIMEx_MasterConfigSynchronization>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023c4:	f000 fa52 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20001d28 	.word	0x20001d28
 80023d4:	40001400 	.word	0x40001400

080023d8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023de:	1d3b      	adds	r3, r7, #4
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	615a      	str	r2, [r3, #20]
 80023ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <MX_TIM14_Init+0x94>)
 80023f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <MX_TIM14_Init+0x98>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <MX_TIM14_Init+0x94>)
 80023f8:	226b      	movs	r2, #107	@ 0x6b
 80023fa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_TIM14_Init+0x94>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8002402:	4b1a      	ldr	r3, [pc, #104]	@ (800246c <MX_TIM14_Init+0x94>)
 8002404:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002408:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <MX_TIM14_Init+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <MX_TIM14_Init+0x94>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002416:	4815      	ldr	r0, [pc, #84]	@ (800246c <MX_TIM14_Init+0x94>)
 8002418:	f004 fa96 	bl	8006948 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8002422:	f000 fa23 	bl	800286c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002426:	4811      	ldr	r0, [pc, #68]	@ (800246c <MX_TIM14_Init+0x94>)
 8002428:	f004 fb7d 	bl	8006b26 <HAL_TIM_PWM_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8002432:	f000 fa1b 	bl	800286c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002436:	2360      	movs	r3, #96	@ 0x60
 8002438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800243a:	230a      	movs	r3, #10
 800243c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4807      	ldr	r0, [pc, #28]	@ (800246c <MX_TIM14_Init+0x94>)
 800244e:	f004 fe07 	bl	8007060 <HAL_TIM_PWM_ConfigChannel>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002458:	f000 fa08 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800245c:	4803      	ldr	r0, [pc, #12]	@ (800246c <MX_TIM14_Init+0x94>)
 800245e:	f000 fba5 	bl	8002bac <HAL_TIM_MspPostInit>

}
 8002462:	bf00      	nop
 8002464:	3720      	adds	r7, #32
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20001d74 	.word	0x20001d74
 8002470:	40002000 	.word	0x40002000

08002474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 800247a:	4a15      	ldr	r2, [pc, #84]	@ (80024d0 <MX_USART2_UART_Init+0x5c>)
 800247c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800247e:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 8002480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b0:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	@ (80024cc <MX_USART2_UART_Init+0x58>)
 80024b8:	f005 fc4e 	bl	8007d58 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80024c2:	f000 f9d3 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20001dc0 	.word	0x20001dc0
 80024d0:	40004400 	.word	0x40004400

080024d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024d8:	4b14      	ldr	r3, [pc, #80]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024da:	4a15      	ldr	r2, [pc, #84]	@ (8002530 <MX_USART3_UART_Init+0x5c>)
 80024dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024de:	4b13      	ldr	r3, [pc, #76]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024ec:	4b0f      	ldr	r3, [pc, #60]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <MX_USART3_UART_Init+0x58>)
 80024fa:	220c      	movs	r2, #12
 80024fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <MX_USART3_UART_Init+0x58>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	4b09      	ldr	r3, [pc, #36]	@ (800252c <MX_USART3_UART_Init+0x58>)
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800250a:	4b08      	ldr	r3, [pc, #32]	@ (800252c <MX_USART3_UART_Init+0x58>)
 800250c:	2200      	movs	r2, #0
 800250e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <MX_USART3_UART_Init+0x58>)
 8002512:	2200      	movs	r2, #0
 8002514:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002516:	4805      	ldr	r0, [pc, #20]	@ (800252c <MX_USART3_UART_Init+0x58>)
 8002518:	f005 fc1e 	bl	8007d58 <HAL_UART_Init>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002522:	f000 f9a3 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20001e48 	.word	0x20001e48
 8002530:	40004800 	.word	0x40004800

08002534 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800253e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002540:	4b12      	ldr	r3, [pc, #72]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002542:	2206      	movs	r2, #6
 8002544:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002546:	4b11      	ldr	r3, [pc, #68]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002548:	2202      	movs	r2, #2
 800254a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800254c:	4b0f      	ldr	r3, [pc, #60]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800254e:	2200      	movs	r2, #0
 8002550:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002552:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002554:	2202      	movs	r2, #2
 8002556:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800255a:	2201      	movs	r2, #1
 800255c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800255e:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002560:	2200      	movs	r2, #0
 8002562:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002564:	4b09      	ldr	r3, [pc, #36]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002566:	2200      	movs	r2, #0
 8002568:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800256a:	4b08      	ldr	r3, [pc, #32]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800256c:	2201      	movs	r2, #1
 800256e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002570:	4b06      	ldr	r3, [pc, #24]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002572:	2200      	movs	r2, #0
 8002574:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002576:	4805      	ldr	r0, [pc, #20]	@ (800258c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002578:	f002 f9c7 	bl	800490a <HAL_PCD_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002582:	f000 f973 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20001f30 	.word	0x20001f30

08002590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002596:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_DMA_Init+0x38>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <MX_DMA_Init+0x38>)
 800259c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_DMA_Init+0x38>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2010      	movs	r0, #16
 80025b4:	f000 ff9b 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025b8:	2010      	movs	r0, #16
 80025ba:	f000 ffb4 	bl	8003526 <HAL_NVIC_EnableIRQ>

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	@ 0x38
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025e2:	4b9a      	ldr	r3, [pc, #616]	@ (800284c <MX_GPIO_Init+0x280>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a99      	ldr	r2, [pc, #612]	@ (800284c <MX_GPIO_Init+0x280>)
 80025e8:	f043 0310 	orr.w	r3, r3, #16
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b97      	ldr	r3, [pc, #604]	@ (800284c <MX_GPIO_Init+0x280>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0310 	and.w	r3, r3, #16
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025fa:	4b94      	ldr	r3, [pc, #592]	@ (800284c <MX_GPIO_Init+0x280>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a93      	ldr	r2, [pc, #588]	@ (800284c <MX_GPIO_Init+0x280>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b91      	ldr	r3, [pc, #580]	@ (800284c <MX_GPIO_Init+0x280>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002612:	4b8e      	ldr	r3, [pc, #568]	@ (800284c <MX_GPIO_Init+0x280>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	4a8d      	ldr	r2, [pc, #564]	@ (800284c <MX_GPIO_Init+0x280>)
 8002618:	f043 0320 	orr.w	r3, r3, #32
 800261c:	6313      	str	r3, [r2, #48]	@ 0x30
 800261e:	4b8b      	ldr	r3, [pc, #556]	@ (800284c <MX_GPIO_Init+0x280>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800262a:	4b88      	ldr	r3, [pc, #544]	@ (800284c <MX_GPIO_Init+0x280>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a87      	ldr	r2, [pc, #540]	@ (800284c <MX_GPIO_Init+0x280>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b85      	ldr	r3, [pc, #532]	@ (800284c <MX_GPIO_Init+0x280>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002642:	4b82      	ldr	r3, [pc, #520]	@ (800284c <MX_GPIO_Init+0x280>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	4a81      	ldr	r2, [pc, #516]	@ (800284c <MX_GPIO_Init+0x280>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6313      	str	r3, [r2, #48]	@ 0x30
 800264e:	4b7f      	ldr	r3, [pc, #508]	@ (800284c <MX_GPIO_Init+0x280>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	613b      	str	r3, [r7, #16]
 8002658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800265a:	4b7c      	ldr	r3, [pc, #496]	@ (800284c <MX_GPIO_Init+0x280>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a7b      	ldr	r2, [pc, #492]	@ (800284c <MX_GPIO_Init+0x280>)
 8002660:	f043 0302 	orr.w	r3, r3, #2
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b79      	ldr	r3, [pc, #484]	@ (800284c <MX_GPIO_Init+0x280>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <MX_GPIO_Init+0x280>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a75      	ldr	r2, [pc, #468]	@ (800284c <MX_GPIO_Init+0x280>)
 8002678:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b73      	ldr	r3, [pc, #460]	@ (800284c <MX_GPIO_Init+0x280>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	4b70      	ldr	r3, [pc, #448]	@ (800284c <MX_GPIO_Init+0x280>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268e:	4a6f      	ldr	r2, [pc, #444]	@ (800284c <MX_GPIO_Init+0x280>)
 8002690:	f043 0308 	orr.w	r3, r3, #8
 8002694:	6313      	str	r3, [r2, #48]	@ 0x30
 8002696:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <MX_GPIO_Init+0x280>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dir1_GPIO_Port, dir1_Pin, GPIO_PIN_RESET);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2180      	movs	r1, #128	@ 0x80
 80026a6:	486a      	ldr	r0, [pc, #424]	@ (8002850 <MX_GPIO_Init+0x284>)
 80026a8:	f001 fc98 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, enn2_Pin|dir2_Pin, GPIO_PIN_RESET);
 80026ac:	2200      	movs	r2, #0
 80026ae:	21a0      	movs	r1, #160	@ 0xa0
 80026b0:	4868      	ldr	r0, [pc, #416]	@ (8002854 <MX_GPIO_Init+0x288>)
 80026b2:	f001 fc93 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(enn1_GPIO_Port, enn1_Pin, GPIO_PIN_RESET);
 80026b6:	2200      	movs	r2, #0
 80026b8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80026bc:	4866      	ldr	r0, [pc, #408]	@ (8002858 <MX_GPIO_Init+0x28c>)
 80026be:	f001 fc8d 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_cs_GPIO_Port, SPI_cs_Pin, GPIO_PIN_SET);
 80026c2:	2201      	movs	r2, #1
 80026c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80026c8:	4864      	ldr	r0, [pc, #400]	@ (800285c <MX_GPIO_Init+0x290>)
 80026ca:	f001 fc87 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2140      	movs	r1, #64	@ 0x40
 80026d2:	4863      	ldr	r0, [pc, #396]	@ (8002860 <MX_GPIO_Init+0x294>)
 80026d4:	f001 fc82 	bl	8003fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EndStop1_Pin EndStop2_Pin */
  GPIO_InitStruct.Pin = EndStop1_Pin|EndStop2_Pin;
 80026d8:	2314      	movs	r3, #20
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026dc:	2300      	movs	r3, #0
 80026de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e8:	4619      	mov	r1, r3
 80026ea:	485e      	ldr	r0, [pc, #376]	@ (8002864 <MX_GPIO_Init+0x298>)
 80026ec:	f001 fab2 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80026f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002704:	4619      	mov	r1, r3
 8002706:	4858      	ldr	r0, [pc, #352]	@ (8002868 <MX_GPIO_Init+0x29c>)
 8002708:	f001 faa4 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : dir1_Pin */
  GPIO_InitStruct.Pin = dir1_Pin;
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002710:	2301      	movs	r3, #1
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002714:	2300      	movs	r3, #0
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002718:	2300      	movs	r3, #0
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(dir1_GPIO_Port, &GPIO_InitStruct);
 800271c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002720:	4619      	mov	r1, r3
 8002722:	484b      	ldr	r0, [pc, #300]	@ (8002850 <MX_GPIO_Init+0x284>)
 8002724:	f001 fa96 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : enn2_Pin dir2_Pin */
  GPIO_InitStruct.Pin = enn2_Pin|dir2_Pin;
 8002728:	23a0      	movs	r3, #160	@ 0xa0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800272c:	2301      	movs	r3, #1
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	2300      	movs	r3, #0
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	4619      	mov	r1, r3
 800273e:	4845      	ldr	r0, [pc, #276]	@ (8002854 <MX_GPIO_Init+0x288>)
 8002740:	f001 fa88 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : EncoderBtn_Pin PB2 */
  GPIO_InitStruct.Pin = EncoderBtn_Pin|GPIO_PIN_2;
 8002744:	2306      	movs	r3, #6
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002754:	4619      	mov	r1, r3
 8002756:	4840      	ldr	r0, [pc, #256]	@ (8002858 <MX_GPIO_Init+0x28c>)
 8002758:	f001 fa7c 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnUp_Pin BtnDown_Pin */
  GPIO_InitStruct.Pin = BtnUp_Pin|BtnDown_Pin;
 800275c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002766:	2301      	movs	r3, #1
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800276a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800276e:	4619      	mov	r1, r3
 8002770:	4837      	ldr	r0, [pc, #220]	@ (8002850 <MX_GPIO_Init+0x284>)
 8002772:	f001 fa6f 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLeft_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin|BtnRight_Pin;
 8002776:	2303      	movs	r3, #3
 8002778:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277e:	2301      	movs	r3, #1
 8002780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002786:	4619      	mov	r1, r3
 8002788:	4835      	ldr	r0, [pc, #212]	@ (8002860 <MX_GPIO_Init+0x294>)
 800278a:	f001 fa63 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnCtr_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin;
 800278e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002798:	2301      	movs	r3, #1
 800279a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnCtr_GPIO_Port, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	4830      	ldr	r0, [pc, #192]	@ (8002864 <MX_GPIO_Init+0x298>)
 80027a4:	f001 fa56 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : enn1_Pin */
  GPIO_InitStruct.Pin = enn1_Pin;
 80027a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b6:	2300      	movs	r3, #0
 80027b8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(enn1_GPIO_Port, &GPIO_InitStruct);
 80027ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027be:	4619      	mov	r1, r3
 80027c0:	4825      	ldr	r0, [pc, #148]	@ (8002858 <MX_GPIO_Init+0x28c>)
 80027c2:	f001 fa47 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_cs_Pin */
  GPIO_InitStruct.Pin = SPI_cs_Pin;
 80027c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027d0:	2301      	movs	r3, #1
 80027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI_cs_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	481f      	ldr	r0, [pc, #124]	@ (800285c <MX_GPIO_Init+0x290>)
 80027e0:	f001 fa38 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : diag_Pin diag1_Pin */
  GPIO_InitStruct.Pin = diag_Pin|diag1_Pin;
 80027e4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ea:	2300      	movs	r3, #0
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f6:	4619      	mov	r1, r3
 80027f8:	4818      	ldr	r0, [pc, #96]	@ (800285c <MX_GPIO_Init+0x290>)
 80027fa:	f001 fa2b 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80027fe:	2340      	movs	r3, #64	@ 0x40
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800280e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002812:	4619      	mov	r1, r3
 8002814:	4812      	ldr	r0, [pc, #72]	@ (8002860 <MX_GPIO_Init+0x294>)
 8002816:	f001 fa1d 	bl	8003c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282a:	4619      	mov	r1, r3
 800282c:	480c      	ldr	r0, [pc, #48]	@ (8002860 <MX_GPIO_Init+0x294>)
 800282e:	f001 fa11 	bl	8003c54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2100      	movs	r1, #0
 8002836:	2028      	movs	r0, #40	@ 0x28
 8002838:	f000 fe59 	bl	80034ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800283c:	2028      	movs	r0, #40	@ 0x28
 800283e:	f000 fe72 	bl	8003526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002842:	bf00      	nop
 8002844:	3738      	adds	r7, #56	@ 0x38
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40021400 	.word	0x40021400
 8002854:	40020000 	.word	0x40020000
 8002858:	40020400 	.word	0x40020400
 800285c:	40020c00 	.word	0x40020c00
 8002860:	40021800 	.word	0x40021800
 8002864:	40021000 	.word	0x40021000
 8002868:	40020800 	.word	0x40020800

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <Error_Handler+0x8>

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <HAL_MspInit+0x44>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	4a0e      	ldr	r2, [pc, #56]	@ (80028bc <HAL_MspInit+0x44>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	6413      	str	r3, [r2, #64]	@ 0x40
 800288a:	4b0c      	ldr	r3, [pc, #48]	@ (80028bc <HAL_MspInit+0x44>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	@ (80028bc <HAL_MspInit+0x44>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	4a08      	ldr	r2, [pc, #32]	@ (80028bc <HAL_MspInit+0x44>)
 800289c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a2:	4b06      	ldr	r3, [pc, #24]	@ (80028bc <HAL_MspInit+0x44>)
 80028a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b0aa      	sub	sp, #168	@ 0xa8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	2284      	movs	r2, #132	@ 0x84
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00b fb73 	bl	800dfcc <memset>
  if(hi2c->Instance==I2C1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_I2C_MspInit+0xb4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d13c      	bne.n	800296a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80028f6:	2300      	movs	r3, #0
 80028f8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 fe68 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800290a:	f7ff ffaf 	bl	800286c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a19      	ldr	r2, [pc, #100]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 8002914:	f043 0302 	orr.w	r3, r3, #2
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002926:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800292a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800292e:	2312      	movs	r3, #18
 8002930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002940:	2304      	movs	r3, #4
 8002942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002946:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800294a:	4619      	mov	r1, r3
 800294c:	480b      	ldr	r0, [pc, #44]	@ (800297c <HAL_I2C_MspInit+0xbc>)
 800294e:	f001 f981 	bl	8003c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 8002958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_I2C_MspInit+0xb8>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800296a:	bf00      	nop
 800296c:	37a8      	adds	r7, #168	@ 0xa8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40005400 	.word	0x40005400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020400 	.word	0x40020400

08002980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a25      	ldr	r2, [pc, #148]	@ (8002a34 <HAL_SPI_MspInit+0xb4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d143      	bne.n	8002a2a <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a6:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ae:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	4a18      	ldr	r2, [pc, #96]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029de:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <HAL_SPI_MspInit+0xb8>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PD3     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80029ea:	230c      	movs	r3, #12
 80029ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029fa:	2305      	movs	r3, #5
 80029fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029fe:	f107 0314 	add.w	r3, r7, #20
 8002a02:	4619      	mov	r1, r3
 8002a04:	480d      	ldr	r0, [pc, #52]	@ (8002a3c <HAL_SPI_MspInit+0xbc>)
 8002a06:	f001 f925 	bl	8003c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a0a:	2308      	movs	r3, #8
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a16:	2303      	movs	r3, #3
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4806      	ldr	r0, [pc, #24]	@ (8002a40 <HAL_SPI_MspInit+0xc0>)
 8002a26:	f001 f915 	bl	8003c54 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	@ 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40003800 	.word	0x40003800
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a54:	d114      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	4b2b      	ldr	r3, [pc, #172]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a62:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201c      	movs	r0, #28
 8002a74:	f000 fd3b 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a78:	201c      	movs	r0, #28
 8002a7a:	f000 fd54 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a7e:	e03c      	b.n	8002afa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a20      	ldr	r2, [pc, #128]	@ (8002b08 <HAL_TIM_Base_MspInit+0xc4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d114      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a96:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201d      	movs	r0, #29
 8002aa8:	f000 fd21 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aac:	201d      	movs	r0, #29
 8002aae:	f000 fd3a 	bl	8003526 <HAL_NVIC_EnableIRQ>
}
 8002ab2:	e022      	b.n	8002afa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	@ (8002b0c <HAL_TIM_Base_MspInit+0xc8>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10c      	bne.n	8002ad8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002abe:	4b11      	ldr	r3, [pc, #68]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac2:	4a10      	ldr	r2, [pc, #64]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002ac4:	f043 0320 	orr.w	r3, r3, #32
 8002ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aca:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	e010      	b.n	8002afa <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM14)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <HAL_TIM_Base_MspInit+0xcc>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d10b      	bne.n	8002afa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002ae2:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aee:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_TIM_Base_MspInit+0xc0>)
 8002af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
}
 8002afa:	bf00      	nop
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40001400 	.word	0x40001400
 8002b10:	40002000 	.word	0x40002000

08002b14 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	@ 0x28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]
 8002b24:	605a      	str	r2, [r3, #4]
 8002b26:	609a      	str	r2, [r3, #8]
 8002b28:	60da      	str	r2, [r3, #12]
 8002b2a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d130      	bne.n	8002b98 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b18      	ldr	r3, [pc, #96]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a14      	ldr	r2, [pc, #80]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8002b66:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b74:	2300      	movs	r3, #0
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4809      	ldr	r0, [pc, #36]	@ (8002ba8 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b84:	f001 f866 	bl	8003c54 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	201e      	movs	r0, #30
 8002b8e:	f000 fcae 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b92:	201e      	movs	r0, #30
 8002b94:	f000 fcc7 	bl	8003526 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b98:	bf00      	nop
 8002b9a:	3728      	adds	r7, #40	@ 0x28
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40000800 	.word	0x40000800
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40020c00 	.word	0x40020c00

08002bac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d11d      	bne.n	8002c0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4b33      	ldr	r3, [pc, #204]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	4a32      	ldr	r2, [pc, #200]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002bd4:	f043 0302 	orr.w	r3, r3, #2
 8002bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bda:	4b30      	ldr	r3, [pc, #192]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = step1_Pin;
 8002be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bec:	2302      	movs	r3, #2
 8002bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8002bfc:	f107 0314 	add.w	r3, r7, #20
 8002c00:	4619      	mov	r1, r3
 8002c02:	4827      	ldr	r0, [pc, #156]	@ (8002ca0 <HAL_TIM_MspPostInit+0xf4>)
 8002c04:	f001 f826 	bl	8003c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c08:	e043      	b.n	8002c92 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ca4 <HAL_TIM_MspPostInit+0xf8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d11c      	bne.n	8002c4e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c14:	4b21      	ldr	r3, [pc, #132]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c18:	4a20      	ldr	r2, [pc, #128]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c20:	4b1e      	ldr	r3, [pc, #120]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = step2_Pin;
 8002c2c:	2340      	movs	r3, #64	@ 0x40
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 0314 	add.w	r3, r7, #20
 8002c44:	4619      	mov	r1, r3
 8002c46:	4818      	ldr	r0, [pc, #96]	@ (8002ca8 <HAL_TIM_MspPostInit+0xfc>)
 8002c48:	f001 f804 	bl	8003c54 <HAL_GPIO_Init>
}
 8002c4c:	e021      	b.n	8002c92 <HAL_TIM_MspPostInit+0xe6>
  else if(htim->Instance==TIM14)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a16      	ldr	r2, [pc, #88]	@ (8002cac <HAL_TIM_MspPostInit+0x100>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d11c      	bne.n	8002c92 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c58:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c5e:	f043 0320 	orr.w	r3, r3, #32
 8002c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c64:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <HAL_TIM_MspPostInit+0xf0>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 8002c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	2302      	movs	r3, #2
 8002c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002c82:	2309      	movs	r3, #9
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4808      	ldr	r0, [pc, #32]	@ (8002cb0 <HAL_TIM_MspPostInit+0x104>)
 8002c8e:	f000 ffe1 	bl	8003c54 <HAL_GPIO_Init>
}
 8002c92:	bf00      	nop
 8002c94:	3728      	adds	r7, #40	@ 0x28
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40020400 	.word	0x40020400
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40002000 	.word	0x40002000
 8002cb0:	40021400 	.word	0x40021400

08002cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b0ac      	sub	sp, #176	@ 0xb0
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ccc:	f107 0318 	add.w	r3, r7, #24
 8002cd0:	2284      	movs	r2, #132	@ 0x84
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00b f979 	bl	800dfcc <memset>
  if(huart->Instance==USART2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a5d      	ldr	r2, [pc, #372]	@ (8002e54 <HAL_UART_MspInit+0x1a0>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d171      	bne.n	8002dc8 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ce4:	2380      	movs	r3, #128	@ 0x80
 8002ce6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cec:	f107 0318 	add.w	r3, r7, #24
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f002 fc6f 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002cfc:	f7ff fdb6 	bl	800286c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d00:	4b55      	ldr	r3, [pc, #340]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a54      	ldr	r2, [pc, #336]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0c:	4b52      	ldr	r3, [pc, #328]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d18:	4b4f      	ldr	r3, [pc, #316]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d1e:	f043 0308 	orr.w	r3, r3, #8
 8002d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d24:	4b4c      	ldr	r3, [pc, #304]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002d30:	2360      	movs	r3, #96	@ 0x60
 8002d32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d36:	2302      	movs	r3, #2
 8002d38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d48:	2307      	movs	r3, #7
 8002d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d4e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d52:	4619      	mov	r1, r3
 8002d54:	4841      	ldr	r0, [pc, #260]	@ (8002e5c <HAL_UART_MspInit+0x1a8>)
 8002d56:	f000 ff7d 	bl	8003c54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d5a:	4b41      	ldr	r3, [pc, #260]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d5c:	4a41      	ldr	r2, [pc, #260]	@ (8002e64 <HAL_UART_MspInit+0x1b0>)
 8002d5e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d60:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d62:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d66:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d68:	4b3d      	ldr	r3, [pc, #244]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d74:	4b3a      	ldr	r3, [pc, #232]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d7a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7c:	4b38      	ldr	r3, [pc, #224]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d82:	4b37      	ldr	r3, [pc, #220]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d88:	4b35      	ldr	r3, [pc, #212]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8e:	4b34      	ldr	r3, [pc, #208]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d94:	4b32      	ldr	r3, [pc, #200]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d9a:	4831      	ldr	r0, [pc, #196]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002d9c:	f000 fbde 	bl	800355c <HAL_DMA_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_UART_MspInit+0xf6>
    {
      Error_Handler();
 8002da6:	f7ff fd61 	bl	800286c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a2c      	ldr	r2, [pc, #176]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002dae:	675a      	str	r2, [r3, #116]	@ 0x74
 8002db0:	4a2b      	ldr	r2, [pc, #172]	@ (8002e60 <HAL_UART_MspInit+0x1ac>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2026      	movs	r0, #38	@ 0x26
 8002dbc:	f000 fb97 	bl	80034ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002dc0:	2026      	movs	r0, #38	@ 0x26
 8002dc2:	f000 fbb0 	bl	8003526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002dc6:	e041      	b.n	8002e4c <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a26      	ldr	r2, [pc, #152]	@ (8002e68 <HAL_UART_MspInit+0x1b4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d13c      	bne.n	8002e4c <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002dd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ddc:	f107 0318 	add.w	r3, r7, #24
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fbf7 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_UART_MspInit+0x13c>
      Error_Handler();
 8002dec:	f7ff fd3e 	bl	800286c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df4:	4a18      	ldr	r2, [pc, #96]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002df6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfc:	4b16      	ldr	r3, [pc, #88]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e08:	4b13      	ldr	r3, [pc, #76]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0c:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002e0e:	f043 0308 	orr.w	r3, r3, #8
 8002e12:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e14:	4b10      	ldr	r3, [pc, #64]	@ (8002e58 <HAL_UART_MspInit+0x1a4>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002e20:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e28:	2302      	movs	r3, #2
 8002e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e44:	4619      	mov	r1, r3
 8002e46:	4805      	ldr	r0, [pc, #20]	@ (8002e5c <HAL_UART_MspInit+0x1a8>)
 8002e48:	f000 ff04 	bl	8003c54 <HAL_GPIO_Init>
}
 8002e4c:	bf00      	nop
 8002e4e:	37b0      	adds	r7, #176	@ 0xb0
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40004400 	.word	0x40004400
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	20001ed0 	.word	0x20001ed0
 8002e64:	40026088 	.word	0x40026088
 8002e68:	40004800 	.word	0x40004800

08002e6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b0ac      	sub	sp, #176	@ 0xb0
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	60da      	str	r2, [r3, #12]
 8002e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e84:	f107 0318 	add.w	r3, r7, #24
 8002e88:	2284      	movs	r2, #132	@ 0x84
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f00b f89d 	bl	800dfcc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e9a:	d159      	bne.n	8002f50 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002e9c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ea0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ea8:	f107 0318 	add.w	r3, r7, #24
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fb91 	bl	80055d4 <HAL_RCCEx_PeriphCLKConfig>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002eb8:	f7ff fcd8 	bl	800286c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebc:	4b26      	ldr	r3, [pc, #152]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002ec2:	f043 0301 	orr.w	r3, r3, #1
 8002ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	617b      	str	r3, [r7, #20]
 8002ed2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ed4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002ed8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002eee:	230a      	movs	r3, #10
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4818      	ldr	r0, [pc, #96]	@ (8002f5c <HAL_PCD_MspInit+0xf0>)
 8002efc:	f000 feaa 	bl	8003c54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002f00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4810      	ldr	r0, [pc, #64]	@ (8002f5c <HAL_PCD_MspInit+0xf0>)
 8002f1c:	f000 fe9a 	bl	8003c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f20:	4b0d      	ldr	r3, [pc, #52]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f24:	4a0c      	ldr	r2, [pc, #48]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f2a:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4b07      	ldr	r3, [pc, #28]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3c:	4a06      	ldr	r2, [pc, #24]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f42:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f44:	4b04      	ldr	r3, [pc, #16]	@ (8002f58 <HAL_PCD_MspInit+0xec>)
 8002f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002f50:	bf00      	nop
 8002f52:	37b0      	adds	r7, #176	@ 0xb0
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020000 	.word	0x40020000

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <NMI_Handler+0x4>

08002f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <MemManage_Handler+0x4>

08002f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <BusFault_Handler+0x4>

08002f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f84:	bf00      	nop
 8002f86:	e7fd      	b.n	8002f84 <UsageFault_Handler+0x4>

08002f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa8:	bf00      	nop
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb6:	f000 f97b 	bl	80032b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002fc4:	4802      	ldr	r0, [pc, #8]	@ (8002fd0 <DMA1_Stream5_IRQHandler+0x10>)
 8002fc6:	f000 fc09 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	20001ed0 	.word	0x20001ed0

08002fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fd8:	4802      	ldr	r0, [pc, #8]	@ (8002fe4 <TIM2_IRQHandler+0x10>)
 8002fda:	f003 ff39 	bl	8006e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20001c44 	.word	0x20001c44

08002fe8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fec:	4802      	ldr	r0, [pc, #8]	@ (8002ff8 <TIM3_IRQHandler+0x10>)
 8002fee:	f003 ff2f 	bl	8006e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20001c90 	.word	0x20001c90

08002ffc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003000:	4802      	ldr	r0, [pc, #8]	@ (800300c <TIM4_IRQHandler+0x10>)
 8003002:	f003 ff25 	bl	8006e50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20001cdc 	.word	0x20001cdc

08003010 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003014:	4802      	ldr	r0, [pc, #8]	@ (8003020 <USART2_IRQHandler+0x10>)
 8003016:	f004 ff77 	bl	8007f08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20001dc0 	.word	0x20001dc0

08003024 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003028:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800302c:	f000 fff0 	bl	8004010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}

08003034 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return 1;
 8003038:	2301      	movs	r3, #1
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <_kill>:

int _kill(int pid, int sig)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800304e:	f00b f81d 	bl	800e08c <__errno>
 8003052:	4603      	mov	r3, r0
 8003054:	2216      	movs	r2, #22
 8003056:	601a      	str	r2, [r3, #0]
  return -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_exit>:

void _exit (int status)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800306c:	f04f 31ff 	mov.w	r1, #4294967295
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ffe7 	bl	8003044 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003076:	bf00      	nop
 8003078:	e7fd      	b.n	8003076 <_exit+0x12>

0800307a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	e00a      	b.n	80030a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800308c:	f3af 8000 	nop.w
 8003090:	4601      	mov	r1, r0
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	b2ca      	uxtb	r2, r1
 800309a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	3301      	adds	r3, #1
 80030a0:	617b      	str	r3, [r7, #20]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	dbf0      	blt.n	800308c <_read+0x12>
  }

  return len;
 80030aa:	687b      	ldr	r3, [r7, #4]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	e009      	b.n	80030da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	60ba      	str	r2, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	3301      	adds	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	dbf1      	blt.n	80030c6 <_write+0x12>
  }
  return len;
 80030e2:	687b      	ldr	r3, [r7, #4]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_close>:

int _close(int file)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003114:	605a      	str	r2, [r3, #4]
  return 0;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <_isatty>:

int _isatty(int file)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800312c:	2301      	movs	r3, #1
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800313a:	b480      	push	{r7}
 800313c:	b085      	sub	sp, #20
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <_sbrk+0x5c>)
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <_sbrk+0x60>)
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003168:	4b13      	ldr	r3, [pc, #76]	@ (80031b8 <_sbrk+0x64>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003170:	4b11      	ldr	r3, [pc, #68]	@ (80031b8 <_sbrk+0x64>)
 8003172:	4a12      	ldr	r2, [pc, #72]	@ (80031bc <_sbrk+0x68>)
 8003174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003176:	4b10      	ldr	r3, [pc, #64]	@ (80031b8 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	429a      	cmp	r2, r3
 8003182:	d207      	bcs.n	8003194 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003184:	f00a ff82 	bl	800e08c <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	220c      	movs	r2, #12
 800318c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
 8003192:	e009      	b.n	80031a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <_sbrk+0x64>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800319a:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <_sbrk+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031a6:	68fb      	ldr	r3, [r7, #12]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20050000 	.word	0x20050000
 80031b4:	00000400 	.word	0x00000400
 80031b8:	200024cc 	.word	0x200024cc
 80031bc:	20002868 	.word	0x20002868

080031c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <SystemInit+0x20>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ca:	4a05      	ldr	r2, [pc, #20]	@ (80031e0 <SystemInit+0x20>)
 80031cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80031e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800321c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031e8:	f7ff ffea 	bl	80031c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031ee:	490d      	ldr	r1, [pc, #52]	@ (8003224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031f4:	e002      	b.n	80031fc <LoopCopyDataInit>

080031f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031fa:	3304      	adds	r3, #4

080031fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003200:	d3f9      	bcc.n	80031f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003202:	4a0a      	ldr	r2, [pc, #40]	@ (800322c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003204:	4c0a      	ldr	r4, [pc, #40]	@ (8003230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003208:	e001      	b.n	800320e <LoopFillZerobss>

0800320a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800320a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800320c:	3204      	adds	r2, #4

0800320e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800320e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003210:	d3fb      	bcc.n	800320a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003212:	f00a ff41 	bl	800e098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003216:	f7fe fe19 	bl	8001e4c <main>
  bx  lr    
 800321a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800321c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003224:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8003228:	08010c08 	.word	0x08010c08
  ldr r2, =_sbss
 800322c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8003230:	20002868 	.word	0x20002868

08003234 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003234:	e7fe      	b.n	8003234 <ADC_IRQHandler>

08003236 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800323a:	2003      	movs	r0, #3
 800323c:	f000 f94c 	bl	80034d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003240:	2000      	movs	r0, #0
 8003242:	f000 f805 	bl	8003250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003246:	f7ff fb17 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003258:	4b12      	ldr	r3, [pc, #72]	@ (80032a4 <HAL_InitTick+0x54>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_InitTick+0x58>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	4619      	mov	r1, r3
 8003262:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003266:	fbb3 f3f1 	udiv	r3, r3, r1
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f967 	bl	8003542 <HAL_SYSTICK_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e00e      	b.n	800329c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d80a      	bhi.n	800329a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003284:	2200      	movs	r2, #0
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	f04f 30ff 	mov.w	r0, #4294967295
 800328c:	f000 f92f 	bl	80034ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003290:	4a06      	ldr	r2, [pc, #24]	@ (80032ac <HAL_InitTick+0x5c>)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
 8003298:	e000      	b.n	800329c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
}
 800329c:	4618      	mov	r0, r3
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	2000002c 	.word	0x2000002c
 80032a8:	20000034 	.word	0x20000034
 80032ac:	20000030 	.word	0x20000030

080032b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b4:	4b06      	ldr	r3, [pc, #24]	@ (80032d0 <HAL_IncTick+0x20>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_IncTick+0x24>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4413      	add	r3, r2
 80032c0:	4a04      	ldr	r2, [pc, #16]	@ (80032d4 <HAL_IncTick+0x24>)
 80032c2:	6013      	str	r3, [r2, #0]
}
 80032c4:	bf00      	nop
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	20000034 	.word	0x20000034
 80032d4:	200024d0 	.word	0x200024d0

080032d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return uwTick;
 80032dc:	4b03      	ldr	r3, [pc, #12]	@ (80032ec <HAL_GetTick+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	200024d0 	.word	0x200024d0

080032f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032f8:	f7ff ffee 	bl	80032d8 <HAL_GetTick>
 80032fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003308:	d005      	beq.n	8003316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330a:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <HAL_Delay+0x44>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4413      	add	r3, r2
 8003314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003316:	bf00      	nop
 8003318:	f7ff ffde 	bl	80032d8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	429a      	cmp	r2, r3
 8003326:	d8f7      	bhi.n	8003318 <HAL_Delay+0x28>
  {
  }
}
 8003328:	bf00      	nop
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000034 	.word	0x20000034

08003338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003348:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <__NVIC_SetPriorityGrouping+0x40>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003354:	4013      	ands	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003360:	4b06      	ldr	r3, [pc, #24]	@ (800337c <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003366:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <__NVIC_SetPriorityGrouping+0x40>)
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	60d3      	str	r3, [r2, #12]
}
 800336c:	bf00      	nop
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	e000ed00 	.word	0xe000ed00
 800337c:	05fa0000 	.word	0x05fa0000

08003380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003384:	4b04      	ldr	r3, [pc, #16]	@ (8003398 <__NVIC_GetPriorityGrouping+0x18>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	f003 0307 	and.w	r3, r3, #7
}
 800338e:	4618      	mov	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	db0b      	blt.n	80033c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	f003 021f 	and.w	r2, r3, #31
 80033b4:	4907      	ldr	r1, [pc, #28]	@ (80033d4 <__NVIC_EnableIRQ+0x38>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2001      	movs	r0, #1
 80033be:	fa00 f202 	lsl.w	r2, r0, r2
 80033c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	e000e100 	.word	0xe000e100

080033d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	db0a      	blt.n	8003402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	490c      	ldr	r1, [pc, #48]	@ (8003424 <__NVIC_SetPriority+0x4c>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	0112      	lsls	r2, r2, #4
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	440b      	add	r3, r1
 80033fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003400:	e00a      	b.n	8003418 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4908      	ldr	r1, [pc, #32]	@ (8003428 <__NVIC_SetPriority+0x50>)
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	3b04      	subs	r3, #4
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	b2d2      	uxtb	r2, r2
 8003414:	440b      	add	r3, r1
 8003416:	761a      	strb	r2, [r3, #24]
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000e100 	.word	0xe000e100
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	@ 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	f1c3 0307 	rsb	r3, r3, #7
 8003446:	2b04      	cmp	r3, #4
 8003448:	bf28      	it	cs
 800344a:	2304      	movcs	r3, #4
 800344c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3304      	adds	r3, #4
 8003452:	2b06      	cmp	r3, #6
 8003454:	d902      	bls.n	800345c <NVIC_EncodePriority+0x30>
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3b03      	subs	r3, #3
 800345a:	e000      	b.n	800345e <NVIC_EncodePriority+0x32>
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43da      	mvns	r2, r3
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	401a      	ands	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003474:	f04f 31ff 	mov.w	r1, #4294967295
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	fa01 f303 	lsl.w	r3, r1, r3
 800347e:	43d9      	mvns	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003484:	4313      	orrs	r3, r2
         );
}
 8003486:	4618      	mov	r0, r3
 8003488:	3724      	adds	r7, #36	@ 0x24
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a4:	d301      	bcc.n	80034aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00f      	b.n	80034ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034aa:	4a0a      	ldr	r2, [pc, #40]	@ (80034d4 <SysTick_Config+0x40>)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b2:	210f      	movs	r1, #15
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295
 80034b8:	f7ff ff8e 	bl	80033d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <SysTick_Config+0x40>)
 80034be:	2200      	movs	r2, #0
 80034c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c2:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <SysTick_Config+0x40>)
 80034c4:	2207      	movs	r2, #7
 80034c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	e000e010 	.word	0xe000e010

080034d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff29 	bl	8003338 <__NVIC_SetPriorityGrouping>
}
 80034e6:	bf00      	nop
 80034e8:	3708      	adds	r7, #8
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	4603      	mov	r3, r0
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]
 80034fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034fc:	2300      	movs	r3, #0
 80034fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003500:	f7ff ff3e 	bl	8003380 <__NVIC_GetPriorityGrouping>
 8003504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6978      	ldr	r0, [r7, #20]
 800350c:	f7ff ff8e 	bl	800342c <NVIC_EncodePriority>
 8003510:	4602      	mov	r2, r0
 8003512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f7ff ff5d 	bl	80033d8 <__NVIC_SetPriority>
}
 800351e:	bf00      	nop
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b082      	sub	sp, #8
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff31 	bl	800339c <__NVIC_EnableIRQ>
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7ff ffa2 	bl	8003494 <SysTick_Config>
 8003550:	4603      	mov	r3, r0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
	...

0800355c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003568:	f7ff feb6 	bl	80032d8 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e099      	b.n	80036ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003598:	e00f      	b.n	80035ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800359a:	f7ff fe9d 	bl	80032d8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d908      	bls.n	80035ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e078      	b.n	80036ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1e8      	bne.n	800359a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4b38      	ldr	r3, [pc, #224]	@ (80036b4 <HAL_DMA_Init+0x158>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	2b04      	cmp	r3, #4
 8003612:	d107      	bne.n	8003624 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	4313      	orrs	r3, r2
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f023 0307 	bic.w	r3, r3, #7
 800363a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	2b04      	cmp	r3, #4
 800364c:	d117      	bne.n	800367e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fa7b 	bl	8003b5c <DMA_CheckFifoParam>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800367a:	2301      	movs	r3, #1
 800367c:	e016      	b.n	80036ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa32 	bl	8003af0 <DMA_CalcBaseAndBitshift>
 800368c:	4603      	mov	r3, r0
 800368e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003694:	223f      	movs	r2, #63	@ 0x3f
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	f010803f 	.word	0xf010803f

080036b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036c6:	f7ff fe07 	bl	80032d8 <HAL_GetTick>
 80036ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2280      	movs	r2, #128	@ 0x80
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e052      	b.n	8003790 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0216 	bic.w	r2, r2, #22
 80036f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695a      	ldr	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003708:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d103      	bne.n	800371a <HAL_DMA_Abort+0x62>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0208 	bic.w	r2, r2, #8
 8003728:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373a:	e013      	b.n	8003764 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800373c:	f7ff fdcc 	bl	80032d8 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b05      	cmp	r3, #5
 8003748:	d90c      	bls.n	8003764 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2203      	movs	r2, #3
 8003754:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e015      	b.n	8003790 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1e4      	bne.n	800373c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003776:	223f      	movs	r2, #63	@ 0x3f
 8003778:	409a      	lsls	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d004      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2280      	movs	r2, #128	@ 0x80
 80037b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00c      	b.n	80037d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2205      	movs	r2, #5
 80037ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80037e8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a24 <HAL_DMA_IRQHandler+0x248>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8e      	ldr	r2, [pc, #568]	@ (8003a28 <HAL_DMA_IRQHandler+0x24c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	2208      	movs	r2, #8
 8003836:	409a      	lsls	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384c:	2201      	movs	r2, #1
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386a:	2201      	movs	r2, #1
 800386c:	409a      	lsls	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b8:	2210      	movs	r2, #16
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d043      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03c      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038d6:	2210      	movs	r2, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d024      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e01f      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e016      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0208 	bic.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	2220      	movs	r2, #32
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 808f 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003972:	2220      	movs	r2, #32
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d136      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0216 	bic.w	r2, r2, #22
 8003994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x1da>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ca:	223f      	movs	r2, #63	@ 0x3f
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
        }
        return;
 80039f2:	e079      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
 8003a20:	e02c      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
 8003a22:	bf00      	nop
 8003a24:	2000002c 	.word	0x2000002c
 8003a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e01e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d032      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2205      	movs	r2, #5
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d307      	bcc.n	8003ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f2      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x2cc>
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ae8:	bf00      	nop
    }
  }
}
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	3b10      	subs	r3, #16
 8003b00:	4a13      	ldr	r2, [pc, #76]	@ (8003b50 <DMA_CalcBaseAndBitshift+0x60>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b0a:	4a12      	ldr	r2, [pc, #72]	@ (8003b54 <DMA_CalcBaseAndBitshift+0x64>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d908      	bls.n	8003b30 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x68>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	1d1a      	adds	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b2e:	e006      	b.n	8003b3e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x68>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	aaaaaaab 	.word	0xaaaaaaab
 8003b54:	080103f8 	.word	0x080103f8
 8003b58:	fffffc00 	.word	0xfffffc00

08003b5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d11f      	bne.n	8003bb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d856      	bhi.n	8003c2a <DMA_CheckFifoParam+0xce>
 8003b7c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b84 <DMA_CheckFifoParam+0x28>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003b95 	.word	0x08003b95
 8003b88:	08003ba7 	.word	0x08003ba7
 8003b8c:	08003b95 	.word	0x08003b95
 8003b90:	08003c2b 	.word	0x08003c2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b98:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d046      	beq.n	8003c2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e043      	b.n	8003c2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003baa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bae:	d140      	bne.n	8003c32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bb4:	e03d      	b.n	8003c32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bbe:	d121      	bne.n	8003c04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d837      	bhi.n	8003c36 <DMA_CheckFifoParam+0xda>
 8003bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bcc <DMA_CheckFifoParam+0x70>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003be3 	.word	0x08003be3
 8003bd4:	08003bdd 	.word	0x08003bdd
 8003bd8:	08003bf5 	.word	0x08003bf5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
      break;
 8003be0:	e030      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d025      	beq.n	8003c3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf2:	e022      	b.n	8003c3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bfc:	d11f      	bne.n	8003c3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c02:	e01c      	b.n	8003c3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d903      	bls.n	8003c12 <DMA_CheckFifoParam+0xb6>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d003      	beq.n	8003c18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c10:	e018      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      break;
 8003c16:	e015      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00e      	beq.n	8003c42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	73fb      	strb	r3, [r7, #15]
      break;
 8003c28:	e00b      	b.n	8003c42 <DMA_CheckFifoParam+0xe6>
      break;
 8003c2a:	bf00      	nop
 8003c2c:	e00a      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c2e:	bf00      	nop
 8003c30:	e008      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c32:	bf00      	nop
 8003c34:	e006      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <DMA_CheckFifoParam+0xe8>
      break;
 8003c42:	bf00      	nop
    }
  } 
  
  return status; 
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3714      	adds	r7, #20
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop

08003c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	@ 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003c66:	2300      	movs	r3, #0
 8003c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e175      	b.n	8003f60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003c74:	2201      	movs	r2, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	f040 8164 	bne.w	8003f5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 0303 	and.w	r3, r3, #3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d005      	beq.n	8003caa <HAL_GPIO_Init+0x56>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d130      	bne.n	8003d0c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	2203      	movs	r2, #3
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4013      	ands	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 0201 	and.w	r2, r3, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d017      	beq.n	8003d48 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	2203      	movs	r2, #3
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d123      	bne.n	8003d9c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	08da      	lsrs	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3208      	adds	r2, #8
 8003d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	220f      	movs	r2, #15
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	691a      	ldr	r2, [r3, #16]
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	08da      	lsrs	r2, r3, #3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3208      	adds	r2, #8
 8003d96:	69b9      	ldr	r1, [r7, #24]
 8003d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 0203 	and.w	r2, r3, #3
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80be 	beq.w	8003f5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dde:	4b66      	ldr	r3, [pc, #408]	@ (8003f78 <HAL_GPIO_Init+0x324>)
 8003de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de2:	4a65      	ldr	r2, [pc, #404]	@ (8003f78 <HAL_GPIO_Init+0x324>)
 8003de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003de8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dea:	4b63      	ldr	r3, [pc, #396]	@ (8003f78 <HAL_GPIO_Init+0x324>)
 8003dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003df6:	4a61      	ldr	r2, [pc, #388]	@ (8003f7c <HAL_GPIO_Init+0x328>)
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	089b      	lsrs	r3, r3, #2
 8003dfc:	3302      	adds	r3, #2
 8003dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	220f      	movs	r2, #15
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a58      	ldr	r2, [pc, #352]	@ (8003f80 <HAL_GPIO_Init+0x32c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d037      	beq.n	8003e92 <HAL_GPIO_Init+0x23e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a57      	ldr	r2, [pc, #348]	@ (8003f84 <HAL_GPIO_Init+0x330>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d031      	beq.n	8003e8e <HAL_GPIO_Init+0x23a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a56      	ldr	r2, [pc, #344]	@ (8003f88 <HAL_GPIO_Init+0x334>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d02b      	beq.n	8003e8a <HAL_GPIO_Init+0x236>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a55      	ldr	r2, [pc, #340]	@ (8003f8c <HAL_GPIO_Init+0x338>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d025      	beq.n	8003e86 <HAL_GPIO_Init+0x232>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a54      	ldr	r2, [pc, #336]	@ (8003f90 <HAL_GPIO_Init+0x33c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d01f      	beq.n	8003e82 <HAL_GPIO_Init+0x22e>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a53      	ldr	r2, [pc, #332]	@ (8003f94 <HAL_GPIO_Init+0x340>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d019      	beq.n	8003e7e <HAL_GPIO_Init+0x22a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	@ (8003f98 <HAL_GPIO_Init+0x344>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d013      	beq.n	8003e7a <HAL_GPIO_Init+0x226>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a51      	ldr	r2, [pc, #324]	@ (8003f9c <HAL_GPIO_Init+0x348>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00d      	beq.n	8003e76 <HAL_GPIO_Init+0x222>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a50      	ldr	r2, [pc, #320]	@ (8003fa0 <HAL_GPIO_Init+0x34c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d007      	beq.n	8003e72 <HAL_GPIO_Init+0x21e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4f      	ldr	r2, [pc, #316]	@ (8003fa4 <HAL_GPIO_Init+0x350>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <HAL_GPIO_Init+0x21a>
 8003e6a:	2309      	movs	r3, #9
 8003e6c:	e012      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e6e:	230a      	movs	r3, #10
 8003e70:	e010      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e72:	2308      	movs	r3, #8
 8003e74:	e00e      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e76:	2307      	movs	r3, #7
 8003e78:	e00c      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e7a:	2306      	movs	r3, #6
 8003e7c:	e00a      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e7e:	2305      	movs	r3, #5
 8003e80:	e008      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e82:	2304      	movs	r3, #4
 8003e84:	e006      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e86:	2303      	movs	r3, #3
 8003e88:	e004      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e002      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_GPIO_Init+0x240>
 8003e92:	2300      	movs	r3, #0
 8003e94:	69fa      	ldr	r2, [r7, #28]
 8003e96:	f002 0203 	and.w	r2, r2, #3
 8003e9a:	0092      	lsls	r2, r2, #2
 8003e9c:	4093      	lsls	r3, r2
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ea4:	4935      	ldr	r1, [pc, #212]	@ (8003f7c <HAL_GPIO_Init+0x328>)
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ed6:	4a34      	ldr	r2, [pc, #208]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003edc:	4b32      	ldr	r3, [pc, #200]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ef8:	69ba      	ldr	r2, [r7, #24]
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f00:	4a29      	ldr	r2, [pc, #164]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f06:	4b28      	ldr	r3, [pc, #160]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	43db      	mvns	r3, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4013      	ands	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d003      	beq.n	8003f54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <HAL_GPIO_Init+0x354>)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	2b0f      	cmp	r3, #15
 8003f64:	f67f ae86 	bls.w	8003c74 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3724      	adds	r7, #36	@ 0x24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40013800 	.word	0x40013800
 8003f80:	40020000 	.word	0x40020000
 8003f84:	40020400 	.word	0x40020400
 8003f88:	40020800 	.word	0x40020800
 8003f8c:	40020c00 	.word	0x40020c00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40021400 	.word	0x40021400
 8003f98:	40021800 	.word	0x40021800
 8003f9c:	40021c00 	.word	0x40021c00
 8003fa0:	40022000 	.word	0x40022000
 8003fa4:	40022400 	.word	0x40022400
 8003fa8:	40013c00 	.word	0x40013c00

08003fac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	887b      	ldrh	r3, [r7, #2]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
 8003fc8:	e001      	b.n	8003fce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	807b      	strh	r3, [r7, #2]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fec:	787b      	ldrb	r3, [r7, #1]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ff2:	887a      	ldrh	r2, [r7, #2]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ff8:	e003      	b.n	8004002 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	041a      	lsls	r2, r3, #16
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	619a      	str	r2, [r3, #24]
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	4603      	mov	r3, r0
 8004018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800401a:	4b08      	ldr	r3, [pc, #32]	@ (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	88fb      	ldrh	r3, [r7, #6]
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d006      	beq.n	8004034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	4618      	mov	r0, r3
 8004030:	f7fd fef8 	bl	8001e24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	40013c00 	.word	0x40013c00

08004040 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e08b      	b.n	800416a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f7fe fc2a 	bl	80028c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2224      	movs	r2, #36	@ 0x24
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0201 	bic.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004090:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040b6:	609a      	str	r2, [r3, #8]
 80040b8:	e006      	b.n	80040c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80040c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d108      	bne.n	80040e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	e007      	b.n	80040f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6859      	ldr	r1, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_I2C_Init+0x134>)
 80040fe:	430b      	orrs	r3, r1
 8004100:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004110:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691a      	ldr	r2, [r3, #16]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	430a      	orrs	r2, r1
 800412a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69d9      	ldr	r1, [r3, #28]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1a      	ldr	r2, [r3, #32]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0201 	orr.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	02008000 	.word	0x02008000

08004178 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af02      	add	r7, sp, #8
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	607a      	str	r2, [r7, #4]
 8004182:	461a      	mov	r2, r3
 8004184:	460b      	mov	r3, r1
 8004186:	817b      	strh	r3, [r7, #10]
 8004188:	4613      	mov	r3, r2
 800418a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	f040 80fd 	bne.w	8004394 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_I2C_Master_Transmit+0x30>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e0f6      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041b0:	f7ff f892 	bl	80032d8 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	2319      	movs	r3, #25
 80041bc:	2201      	movs	r2, #1
 80041be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f914 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0e1      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2221      	movs	r2, #33	@ 0x21
 80041d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2210      	movs	r2, #16
 80041de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	893a      	ldrh	r2, [r7, #8]
 80041f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2bff      	cmp	r3, #255	@ 0xff
 8004202:	d906      	bls.n	8004212 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	22ff      	movs	r2, #255	@ 0xff
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800420a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e007      	b.n	8004222 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800421c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004220:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004226:	2b00      	cmp	r3, #0
 8004228:	d024      	beq.n	8004274 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	781a      	ldrb	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	3b01      	subs	r3, #1
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	b2db      	uxtb	r3, r3
 8004260:	3301      	adds	r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	8979      	ldrh	r1, [r7, #10]
 8004266:	4b4e      	ldr	r3, [pc, #312]	@ (80043a0 <HAL_I2C_Master_Transmit+0x228>)
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fa83 	bl	8004778 <I2C_TransferConfig>
 8004272:	e066      	b.n	8004342 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	b2da      	uxtb	r2, r3
 800427a:	8979      	ldrh	r1, [r7, #10]
 800427c:	4b48      	ldr	r3, [pc, #288]	@ (80043a0 <HAL_I2C_Master_Transmit+0x228>)
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fa78 	bl	8004778 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004288:	e05b      	b.n	8004342 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	6a39      	ldr	r1, [r7, #32]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f907 	bl	80044a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e07b      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a2:	781a      	ldrb	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d034      	beq.n	8004342 <HAL_I2C_Master_Transmit+0x1ca>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d130      	bne.n	8004342 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2180      	movs	r1, #128	@ 0x80
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f880 	bl	80043f0 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e04d      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2bff      	cmp	r3, #255	@ 0xff
 8004302:	d90e      	bls.n	8004322 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	22ff      	movs	r2, #255	@ 0xff
 8004308:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	8979      	ldrh	r1, [r7, #10]
 8004312:	2300      	movs	r3, #0
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fa2c 	bl	8004778 <I2C_TransferConfig>
 8004320:	e00f      	b.n	8004342 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	8979      	ldrh	r1, [r7, #10]
 8004334:	2300      	movs	r3, #0
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fa1b 	bl	8004778 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d19e      	bne.n	800428a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	6a39      	ldr	r1, [r7, #32]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8ed 	bl	8004530 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e01a      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2220      	movs	r2, #32
 8004366:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <HAL_I2C_Master_Transmit+0x22c>)
 8004374:	400b      	ands	r3, r1
 8004376:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	80002000 	.word	0x80002000
 80043a4:	fe00e800 	.word	0xfe00e800

080043a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d103      	bne.n	80043c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2200      	movs	r2, #0
 80043c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699b      	ldr	r3, [r3, #24]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d007      	beq.n	80043e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	619a      	str	r2, [r3, #24]
  }
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004400:	e03b      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	6839      	ldr	r1, [r7, #0]
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f8d6 	bl	80045b8 <I2C_IsErrorOccurred>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e041      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d02d      	beq.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7fe ff5b 	bl	80032d8 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <I2C_WaitOnFlagUntilTimeout+0x44>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d122      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	429a      	cmp	r2, r3
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	461a      	mov	r2, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	429a      	cmp	r2, r3
 8004450:	d113      	bne.n	800447a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e00f      	b.n	800449a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0b4      	beq.n	8004402 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ae:	e033      	b.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f87f 	bl	80045b8 <I2C_IsErrorOccurred>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e031      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ca:	d025      	beq.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044cc:	f7fe ff04 	bl	80032d8 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d302      	bcc.n	80044e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d11a      	bne.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d013      	beq.n	8004518 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b02      	cmp	r3, #2
 8004524:	d1c4      	bne.n	80044b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800453c:	e02f      	b.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f838 	bl	80045b8 <I2C_IsErrorOccurred>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e02d      	b.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe fec1 	bl	80032d8 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11a      	bne.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d013      	beq.n	800459e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457a:	f043 0220 	orr.w	r2, r3, #32
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e007      	b.n	80045ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0320 	and.w	r3, r3, #32
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d1c8      	bne.n	800453e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d068      	beq.n	80046b6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2210      	movs	r2, #16
 80045ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045ec:	e049      	b.n	8004682 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d045      	beq.n	8004682 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fe fe6f 	bl	80032d8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_IsErrorOccurred+0x54>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d13a      	bne.n	8004682 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004616:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800461e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800462a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800462e:	d121      	bne.n	8004674 <I2C_IsErrorOccurred+0xbc>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004636:	d01d      	beq.n	8004674 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b20      	cmp	r3, #32
 800463c:	d01a      	beq.n	8004674 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800464c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800464e:	f7fe fe43 	bl	80032d8 <HAL_GetTick>
 8004652:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004654:	e00e      	b.n	8004674 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004656:	f7fe fe3f 	bl	80032d8 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b19      	cmp	r3, #25
 8004662:	d907      	bls.n	8004674 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004672:	e006      	b.n	8004682 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 0320 	and.w	r3, r3, #32
 800467e:	2b20      	cmp	r3, #32
 8004680:	d1e9      	bne.n	8004656 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b20      	cmp	r3, #32
 800468e:	d003      	beq.n	8004698 <I2C_IsErrorOccurred+0xe0>
 8004690:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0aa      	beq.n	80045ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800469c:	2b00      	cmp	r3, #0
 800469e:	d103      	bne.n	80046a8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2220      	movs	r2, #32
 80046a6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f043 0304 	orr.w	r3, r3, #4
 80046ae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00b      	beq.n	80046e0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80046c8:	6a3b      	ldr	r3, [r7, #32]
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f043 0308 	orr.w	r3, r3, #8
 80046f0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00b      	beq.n	8004724 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800471c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004724:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01c      	beq.n	8004766 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f7ff fe3b 	bl	80043a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	4b0d      	ldr	r3, [pc, #52]	@ (8004774 <I2C_IsErrorOccurred+0x1bc>)
 800473e:	400b      	ands	r3, r1
 8004740:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800476a:	4618      	mov	r0, r3
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	fe00e800 	.word	0xfe00e800

08004778 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	607b      	str	r3, [r7, #4]
 8004782:	460b      	mov	r3, r1
 8004784:	817b      	strh	r3, [r7, #10]
 8004786:	4613      	mov	r3, r2
 8004788:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800478a:	897b      	ldrh	r3, [r7, #10]
 800478c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004790:	7a7b      	ldrb	r3, [r7, #9]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004798:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047a6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	0d5b      	lsrs	r3, r3, #21
 80047b2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80047b6:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <I2C_TransferConfig+0x60>)
 80047b8:	430b      	orrs	r3, r1
 80047ba:	43db      	mvns	r3, r3
 80047bc:	ea02 0103 	and.w	r1, r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	697a      	ldr	r2, [r7, #20]
 80047c6:	430a      	orrs	r2, r1
 80047c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	03ff63ff 	.word	0x03ff63ff

080047dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d138      	bne.n	8004864 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d101      	bne.n	8004800 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047fc:	2302      	movs	r3, #2
 80047fe:	e032      	b.n	8004866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2224      	movs	r2, #36	@ 0x24
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800482e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6819      	ldr	r1, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004860:	2300      	movs	r3, #0
 8004862:	e000      	b.n	8004866 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004864:	2302      	movs	r3, #2
  }
}
 8004866:	4618      	mov	r0, r3
 8004868:	370c      	adds	r7, #12
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004872:	b480      	push	{r7}
 8004874:	b085      	sub	sp, #20
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b20      	cmp	r3, #32
 8004886:	d139      	bne.n	80048fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004892:	2302      	movs	r3, #2
 8004894:	e033      	b.n	80048fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2224      	movs	r2, #36	@ 0x24
 80048a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 0201 	bic.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	021b      	lsls	r3, r3, #8
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f042 0201 	orr.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	e000      	b.n	80048fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af02      	add	r7, sp, #8
 8004910:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e108      	b.n	8004b2e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fe fa98 	bl	8002e6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2203      	movs	r2, #3
 8004940:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800494a:	d102      	bne.n	8004952 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f004 fa90 	bl	8008e7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6818      	ldr	r0, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7c1a      	ldrb	r2, [r3, #16]
 8004964:	f88d 2000 	strb.w	r2, [sp]
 8004968:	3304      	adds	r3, #4
 800496a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800496c:	f004 fa2c 	bl	8008dc8 <USB_CoreInit>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d005      	beq.n	8004982 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0d5      	b.n	8004b2e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2100      	movs	r1, #0
 8004988:	4618      	mov	r0, r3
 800498a:	f004 fa88 	bl	8008e9e <USB_SetCurrentMode>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0c6      	b.n	8004b2e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a0:	2300      	movs	r3, #0
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e04a      	b.n	8004a3c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	3315      	adds	r3, #21
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3314      	adds	r3, #20
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	b298      	uxth	r0, r3
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	332e      	adds	r3, #46	@ 0x2e
 80049e2:	4602      	mov	r2, r0
 80049e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3318      	adds	r3, #24
 80049f6:	2200      	movs	r2, #0
 80049f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	331c      	adds	r3, #28
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3320      	adds	r3, #32
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3324      	adds	r3, #36	@ 0x24
 8004a32:	2200      	movs	r2, #0
 8004a34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	791b      	ldrb	r3, [r3, #4]
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3af      	bcc.n	80049a6 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a46:	2300      	movs	r3, #0
 8004a48:	73fb      	strb	r3, [r7, #15]
 8004a4a:	e044      	b.n	8004ad6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a4c:	7bfa      	ldrb	r2, [r7, #15]
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a62:	7bfa      	ldrb	r2, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	4413      	add	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a8e:	7bfa      	ldrb	r2, [r7, #15]
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aa4:	7bfa      	ldrb	r2, [r7, #15]
 8004aa6:	6879      	ldr	r1, [r7, #4]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4413      	add	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004aba:	7bfa      	ldrb	r2, [r7, #15]
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	440b      	add	r3, r1
 8004ac8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	73fb      	strb	r3, [r7, #15]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3b5      	bcc.n	8004a4c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	7c1a      	ldrb	r2, [r3, #16]
 8004ae8:	f88d 2000 	strb.w	r2, [sp]
 8004aec:	3304      	adds	r3, #4
 8004aee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af0:	f004 fa22 	bl	8008f38 <USB_DevInit>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d005      	beq.n	8004b06 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e013      	b.n	8004b2e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	7b1b      	ldrb	r3, [r3, #12]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d102      	bne.n	8004b22 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f80b 	bl	8004b38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f004 fbdd 	bl	80092e6 <USB_DevDisconnect>

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b66:	4b05      	ldr	r3, [pc, #20]	@ (8004b7c <HAL_PCDEx_ActivateLPM+0x44>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr
 8004b7c:	10000003 	.word	0x10000003

08004b80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b84:	4b05      	ldr	r3, [pc, #20]	@ (8004b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a04      	ldr	r2, [pc, #16]	@ (8004b9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b8e:	6013      	str	r3, [r2, #0]
}
 8004b90:	bf00      	nop
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40007000 	.word	0x40007000

08004ba0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	4b23      	ldr	r3, [pc, #140]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bae:	4a22      	ldr	r2, [pc, #136]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <HAL_PWREx_EnableOverDrive+0x98>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bce:	f7fe fb83 	bl	80032d8 <HAL_GetTick>
 8004bd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd4:	e009      	b.n	8004bea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bd6:	f7fe fb7f 	bl	80032d8 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004be4:	d901      	bls.n	8004bea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e022      	b.n	8004c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bea:	4b14      	ldr	r3, [pc, #80]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bf8:	4b10      	ldr	r3, [pc, #64]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c04:	f7fe fb68 	bl	80032d8 <HAL_GetTick>
 8004c08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c0a:	e009      	b.n	8004c20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004c0c:	f7fe fb64 	bl	80032d8 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004c1a:	d901      	bls.n	8004c20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e007      	b.n	8004c30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c20:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c2c:	d1ee      	bne.n	8004c0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40007000 	.word	0x40007000

08004c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e291      	b.n	800517a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8087 	beq.w	8004d72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c64:	4b96      	ldr	r3, [pc, #600]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d00c      	beq.n	8004c8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c70:	4b93      	ldr	r3, [pc, #588]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 030c 	and.w	r3, r3, #12
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d112      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x62>
 8004c7c:	4b90      	ldr	r3, [pc, #576]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c84:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c88:	d10b      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d06c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x130>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d168      	bne.n	8004d70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e26b      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004caa:	d106      	bne.n	8004cba <HAL_RCC_OscConfig+0x7a>
 8004cac:	4b84      	ldr	r3, [pc, #528]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a83      	ldr	r2, [pc, #524]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	e02e      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10c      	bne.n	8004cdc <HAL_RCC_OscConfig+0x9c>
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cd8:	6013      	str	r3, [r2, #0]
 8004cda:	e01d      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce4:	d10c      	bne.n	8004d00 <HAL_RCC_OscConfig+0xc0>
 8004ce6:	4b76      	ldr	r3, [pc, #472]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a75      	ldr	r2, [pc, #468]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	4b73      	ldr	r3, [pc, #460]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a72      	ldr	r2, [pc, #456]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cfc:	6013      	str	r3, [r2, #0]
 8004cfe:	e00b      	b.n	8004d18 <HAL_RCC_OscConfig+0xd8>
 8004d00:	4b6f      	ldr	r3, [pc, #444]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a6e      	ldr	r2, [pc, #440]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a6b      	ldr	r2, [pc, #428]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d013      	beq.n	8004d48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d20:	f7fe fada 	bl	80032d8 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d28:	f7fe fad6 	bl	80032d8 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b64      	cmp	r3, #100	@ 0x64
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e21f      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d3a:	4b61      	ldr	r3, [pc, #388]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d0f0      	beq.n	8004d28 <HAL_RCC_OscConfig+0xe8>
 8004d46:	e014      	b.n	8004d72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d48:	f7fe fac6 	bl	80032d8 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d50:	f7fe fac2 	bl	80032d8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b64      	cmp	r3, #100	@ 0x64
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e20b      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d62:	4b57      	ldr	r3, [pc, #348]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x110>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d069      	beq.n	8004e52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d7e:	4b50      	ldr	r3, [pc, #320]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f003 030c 	and.w	r3, r3, #12
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f003 030c 	and.w	r3, r3, #12
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d11c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x190>
 8004d96:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d116      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d005      	beq.n	8004dba <HAL_RCC_OscConfig+0x17a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d001      	beq.n	8004dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1df      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dba:	4b41      	ldr	r3, [pc, #260]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	493d      	ldr	r1, [pc, #244]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dce:	e040      	b.n	8004e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d023      	beq.n	8004e20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd8:	4b39      	ldr	r3, [pc, #228]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a38      	ldr	r2, [pc, #224]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004dde:	f043 0301 	orr.w	r3, r3, #1
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe fa78 	bl	80032d8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fe fa74 	bl	80032d8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e1bd      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfe:	4b30      	ldr	r3, [pc, #192]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4929      	ldr	r1, [pc, #164]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	600b      	str	r3, [r1, #0]
 8004e1e:	e018      	b.n	8004e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e20:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a26      	ldr	r2, [pc, #152]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e26:	f023 0301 	bic.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fe fa54 	bl	80032d8 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e34:	f7fe fa50 	bl	80032d8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e199      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d038      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d019      	beq.n	8004e9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e66:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6a:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fe fa31 	bl	80032d8 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7a:	f7fe fa2d 	bl	80032d8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e176      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d0f0      	beq.n	8004e7a <HAL_RCC_OscConfig+0x23a>
 8004e98:	e01a      	b.n	8004ed0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e9e:	4a08      	ldr	r2, [pc, #32]	@ (8004ec0 <HAL_RCC_OscConfig+0x280>)
 8004ea0:	f023 0301 	bic.w	r3, r3, #1
 8004ea4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea6:	f7fe fa17 	bl	80032d8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eac:	e00a      	b.n	8004ec4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eae:	f7fe fa13 	bl	80032d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d903      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e15c      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
 8004ec0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ec4:	4b91      	ldr	r3, [pc, #580]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ee      	bne.n	8004eae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80a4 	beq.w	8005026 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ede:	4b8b      	ldr	r3, [pc, #556]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10d      	bne.n	8004f06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eea:	4b88      	ldr	r3, [pc, #544]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	4a87      	ldr	r2, [pc, #540]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ef6:	4b85      	ldr	r3, [pc, #532]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f02:	2301      	movs	r3, #1
 8004f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f06:	4b82      	ldr	r3, [pc, #520]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d118      	bne.n	8004f44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f12:	4b7f      	ldr	r3, [pc, #508]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a7e      	ldr	r2, [pc, #504]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f1e:	f7fe f9db 	bl	80032d8 <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f26:	f7fe f9d7 	bl	80032d8 <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b64      	cmp	r3, #100	@ 0x64
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e120      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f38:	4b75      	ldr	r3, [pc, #468]	@ (8005110 <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d106      	bne.n	8004f5a <HAL_RCC_OscConfig+0x31a>
 8004f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f50:	4a6e      	ldr	r2, [pc, #440]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f52:	f043 0301 	orr.w	r3, r3, #1
 8004f56:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f58:	e02d      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x33c>
 8004f62:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a69      	ldr	r2, [pc, #420]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	4b67      	ldr	r3, [pc, #412]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f72:	4a66      	ldr	r2, [pc, #408]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f74:	f023 0304 	bic.w	r3, r3, #4
 8004f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7a:	e01c      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b05      	cmp	r3, #5
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCC_OscConfig+0x35e>
 8004f84:	4b61      	ldr	r3, [pc, #388]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4a60      	ldr	r2, [pc, #384]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f90:	4b5e      	ldr	r3, [pc, #376]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f94:	4a5d      	ldr	r2, [pc, #372]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f9c:	e00b      	b.n	8004fb6 <HAL_RCC_OscConfig+0x376>
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004faa:	4b58      	ldr	r3, [pc, #352]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4a57      	ldr	r2, [pc, #348]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fb0:	f023 0304 	bic.w	r3, r3, #4
 8004fb4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d015      	beq.n	8004fea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fe f98b 	bl	80032d8 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fe f987 	bl	80032d8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0ce      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0ee      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x386>
 8004fe8:	e014      	b.n	8005014 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fea:	f7fe f975 	bl	80032d8 <HAL_GetTick>
 8004fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff0:	e00a      	b.n	8005008 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ff2:	f7fe f971 	bl	80032d8 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005000:	4293      	cmp	r3, r2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e0b8      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005008:	4b40      	ldr	r3, [pc, #256]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800500a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ee      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005014:	7dfb      	ldrb	r3, [r7, #23]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d105      	bne.n	8005026 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501a:	4b3c      	ldr	r3, [pc, #240]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501e:	4a3b      	ldr	r2, [pc, #236]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005024:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 80a4 	beq.w	8005178 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005030:	4b36      	ldr	r3, [pc, #216]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	2b08      	cmp	r3, #8
 800503a:	d06b      	beq.n	8005114 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d149      	bne.n	80050d8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005044:	4b31      	ldr	r3, [pc, #196]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a30      	ldr	r2, [pc, #192]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800504a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800504e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005050:	f7fe f942 	bl	80032d8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fe f93e 	bl	80032d8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e087      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800506a:	4b28      	ldr	r3, [pc, #160]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1f0      	bne.n	8005058 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69da      	ldr	r2, [r3, #28]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	019b      	lsls	r3, r3, #6
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	085b      	lsrs	r3, r3, #1
 800508e:	3b01      	subs	r3, #1
 8005090:	041b      	lsls	r3, r3, #16
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	061b      	lsls	r3, r3, #24
 800509a:	4313      	orrs	r3, r2
 800509c:	4a1b      	ldr	r2, [pc, #108]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 800509e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050a2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050a4:	4b19      	ldr	r3, [pc, #100]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a18      	ldr	r2, [pc, #96]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fe f912 	bl	80032d8 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b8:	f7fe f90e 	bl	80032d8 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e057      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ca:	4b10      	ldr	r3, [pc, #64]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0f0      	beq.n	80050b8 <HAL_RCC_OscConfig+0x478>
 80050d6:	e04f      	b.n	8005178 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d8:	4b0c      	ldr	r3, [pc, #48]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0b      	ldr	r2, [pc, #44]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e4:	f7fe f8f8 	bl	80032d8 <HAL_GetTick>
 80050e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ea:	e008      	b.n	80050fe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ec:	f7fe f8f4 	bl	80032d8 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b02      	cmp	r3, #2
 80050f8:	d901      	bls.n	80050fe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e03d      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050fe:	4b03      	ldr	r3, [pc, #12]	@ (800510c <HAL_RCC_OscConfig+0x4cc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f0      	bne.n	80050ec <HAL_RCC_OscConfig+0x4ac>
 800510a:	e035      	b.n	8005178 <HAL_RCC_OscConfig+0x538>
 800510c:	40023800 	.word	0x40023800
 8005110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <HAL_RCC_OscConfig+0x544>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d028      	beq.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d121      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	429a      	cmp	r2, r3
 800513c:	d11a      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005144:	4013      	ands	r3, r2
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800514a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800514c:	4293      	cmp	r3, r2
 800514e:	d111      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	3b01      	subs	r3, #1
 800515e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b6a      	ldr	r3, [pc, #424]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b67      	ldr	r3, [pc, #412]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	4965      	ldr	r1, [pc, #404]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	4b41      	ldr	r3, [pc, #260]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e073      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	4b3d      	ldr	r3, [pc, #244]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526a:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4936      	ldr	r1, [pc, #216]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527c:	f7fe f82c 	bl	80032d8 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	e00a      	b.n	800529a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005284:	f7fe f828 	bl	80032d8 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e053      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	4b2d      	ldr	r3, [pc, #180]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 020c 	and.w	r2, r3, #12
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1eb      	bne.n	8005284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b27      	ldr	r3, [pc, #156]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d210      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b24      	ldr	r3, [pc, #144]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4922      	ldr	r1, [pc, #136]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	@ (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005306:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f821 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	@ (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	@ (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	@ (800535c <HAL_RCC_ClockConfig+0x1d4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fd ff88 	bl	8003250 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	080103e0 	.word	0x080103e0
 8005358:	2000002c 	.word	0x2000002c
 800535c:	20000030 	.word	0x20000030

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005364:	b094      	sub	sp, #80	@ 0x50
 8005366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	647b      	str	r3, [r7, #68]	@ 0x44
 800536c:	2300      	movs	r3, #0
 800536e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005370:	2300      	movs	r3, #0
 8005372:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005378:	4b79      	ldr	r3, [pc, #484]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b08      	cmp	r3, #8
 8005382:	d00d      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005384:	2b08      	cmp	r3, #8
 8005386:	f200 80e1 	bhi.w	800554c <HAL_RCC_GetSysClockFreq+0x1ec>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x34>
 800538e:	2b04      	cmp	r3, #4
 8005390:	d003      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x3a>
 8005392:	e0db      	b.n	800554c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b73      	ldr	r3, [pc, #460]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x204>)
 8005396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005398:	e0db      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539a:	4b73      	ldr	r3, [pc, #460]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x208>)
 800539c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800539e:	e0d8      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d063      	beq.n	800547e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	2200      	movs	r2, #0
 80053be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80053c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80053d2:	4622      	mov	r2, r4
 80053d4:	462b      	mov	r3, r5
 80053d6:	f04f 0000 	mov.w	r0, #0
 80053da:	f04f 0100 	mov.w	r1, #0
 80053de:	0159      	lsls	r1, r3, #5
 80053e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053e4:	0150      	lsls	r0, r2, #5
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4621      	mov	r1, r4
 80053ec:	1a51      	subs	r1, r2, r1
 80053ee:	6139      	str	r1, [r7, #16]
 80053f0:	4629      	mov	r1, r5
 80053f2:	eb63 0301 	sbc.w	r3, r3, r1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005404:	4659      	mov	r1, fp
 8005406:	018b      	lsls	r3, r1, #6
 8005408:	4651      	mov	r1, sl
 800540a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800540e:	4651      	mov	r1, sl
 8005410:	018a      	lsls	r2, r1, #6
 8005412:	4651      	mov	r1, sl
 8005414:	ebb2 0801 	subs.w	r8, r2, r1
 8005418:	4659      	mov	r1, fp
 800541a:	eb63 0901 	sbc.w	r9, r3, r1
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800542a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800542e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005432:	4690      	mov	r8, r2
 8005434:	4699      	mov	r9, r3
 8005436:	4623      	mov	r3, r4
 8005438:	eb18 0303 	adds.w	r3, r8, r3
 800543c:	60bb      	str	r3, [r7, #8]
 800543e:	462b      	mov	r3, r5
 8005440:	eb49 0303 	adc.w	r3, r9, r3
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	f04f 0300 	mov.w	r3, #0
 800544e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005452:	4629      	mov	r1, r5
 8005454:	024b      	lsls	r3, r1, #9
 8005456:	4621      	mov	r1, r4
 8005458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800545c:	4621      	mov	r1, r4
 800545e:	024a      	lsls	r2, r1, #9
 8005460:	4610      	mov	r0, r2
 8005462:	4619      	mov	r1, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005466:	2200      	movs	r2, #0
 8005468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800546a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800546c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005470:	f7fb fc02 	bl	8000c78 <__aeabi_uldivmod>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4613      	mov	r3, r2
 800547a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800547c:	e058      	b.n	8005530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800547e:	4b38      	ldr	r3, [pc, #224]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	099b      	lsrs	r3, r3, #6
 8005484:	2200      	movs	r2, #0
 8005486:	4618      	mov	r0, r3
 8005488:	4611      	mov	r1, r2
 800548a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	2300      	movs	r3, #0
 8005492:	627b      	str	r3, [r7, #36]	@ 0x24
 8005494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005498:	4642      	mov	r2, r8
 800549a:	464b      	mov	r3, r9
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	f04f 0100 	mov.w	r1, #0
 80054a4:	0159      	lsls	r1, r3, #5
 80054a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054aa:	0150      	lsls	r0, r2, #5
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4641      	mov	r1, r8
 80054b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80054b6:	4649      	mov	r1, r9
 80054b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054d0:	ebb2 040a 	subs.w	r4, r2, sl
 80054d4:	eb63 050b 	sbc.w	r5, r3, fp
 80054d8:	f04f 0200 	mov.w	r2, #0
 80054dc:	f04f 0300 	mov.w	r3, #0
 80054e0:	00eb      	lsls	r3, r5, #3
 80054e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054e6:	00e2      	lsls	r2, r4, #3
 80054e8:	4614      	mov	r4, r2
 80054ea:	461d      	mov	r5, r3
 80054ec:	4643      	mov	r3, r8
 80054ee:	18e3      	adds	r3, r4, r3
 80054f0:	603b      	str	r3, [r7, #0]
 80054f2:	464b      	mov	r3, r9
 80054f4:	eb45 0303 	adc.w	r3, r5, r3
 80054f8:	607b      	str	r3, [r7, #4]
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005506:	4629      	mov	r1, r5
 8005508:	028b      	lsls	r3, r1, #10
 800550a:	4621      	mov	r1, r4
 800550c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005510:	4621      	mov	r1, r4
 8005512:	028a      	lsls	r2, r1, #10
 8005514:	4610      	mov	r0, r2
 8005516:	4619      	mov	r1, r3
 8005518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551a:	2200      	movs	r2, #0
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	61fa      	str	r2, [r7, #28]
 8005520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005524:	f7fb fba8 	bl	8000c78 <__aeabi_uldivmod>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4613      	mov	r3, r2
 800552e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005530:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCC_GetSysClockFreq+0x200>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	0c1b      	lsrs	r3, r3, #16
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	3301      	adds	r3, #1
 800553c:	005b      	lsls	r3, r3, #1
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800554a:	e002      	b.n	8005552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800554c:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x204>)
 800554e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005554:	4618      	mov	r0, r3
 8005556:	3750      	adds	r7, #80	@ 0x50
 8005558:	46bd      	mov	sp, r7
 800555a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800555e:	bf00      	nop
 8005560:	40023800 	.word	0x40023800
 8005564:	00f42400 	.word	0x00f42400
 8005568:	007a1200 	.word	0x007a1200

0800556c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005570:	4b03      	ldr	r3, [pc, #12]	@ (8005580 <HAL_RCC_GetHCLKFreq+0x14>)
 8005572:	681b      	ldr	r3, [r3, #0]
}
 8005574:	4618      	mov	r0, r3
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	2000002c 	.word	0x2000002c

08005584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005588:	f7ff fff0 	bl	800556c <HAL_RCC_GetHCLKFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b05      	ldr	r3, [pc, #20]	@ (80055a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4903      	ldr	r1, [pc, #12]	@ (80055a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	080103f0 	.word	0x080103f0

080055ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055b0:	f7ff ffdc 	bl	800556c <HAL_RCC_GetHCLKFreq>
 80055b4:	4602      	mov	r2, r0
 80055b6:	4b05      	ldr	r3, [pc, #20]	@ (80055cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	0b5b      	lsrs	r3, r3, #13
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	4903      	ldr	r1, [pc, #12]	@ (80055d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055c2:	5ccb      	ldrb	r3, [r1, r3]
 80055c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	40023800 	.word	0x40023800
 80055d0:	080103f0 	.word	0x080103f0

080055d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0301 	and.w	r3, r3, #1
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d012      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055fc:	4b69      	ldr	r3, [pc, #420]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	4a68      	ldr	r2, [pc, #416]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005602:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005606:	6093      	str	r3, [r2, #8]
 8005608:	4b66      	ldr	r3, [pc, #408]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005610:	4964      	ldr	r1, [pc, #400]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005612:	4313      	orrs	r3, r2
 8005614:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d017      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800562e:	4b5d      	ldr	r3, [pc, #372]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005634:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563c:	4959      	ldr	r1, [pc, #356]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800564c:	d101      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800564e:	2301      	movs	r3, #1
 8005650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800565a:	2301      	movs	r3, #1
 800565c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d017      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800566a:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005670:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005678:	494a      	ldr	r1, [pc, #296]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005688:	d101      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800568a:	2301      	movs	r3, #1
 800568c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005696:	2301      	movs	r3, #1
 8005698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 808b 	beq.w	80057ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056b8:	4b3a      	ldr	r3, [pc, #232]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056bc:	4a39      	ldr	r2, [pc, #228]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80056c4:	4b37      	ldr	r3, [pc, #220]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056d0:	4b35      	ldr	r3, [pc, #212]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a34      	ldr	r2, [pc, #208]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056dc:	f7fd fdfc 	bl	80032d8 <HAL_GetTick>
 80056e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e4:	f7fd fdf8 	bl	80032d8 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b64      	cmp	r3, #100	@ 0x64
 80056f0:	d901      	bls.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e357      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056f6:	4b2c      	ldr	r3, [pc, #176]	@ (80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005702:	4b28      	ldr	r3, [pc, #160]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005706:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800570a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d035      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	429a      	cmp	r2, r3
 800571e:	d02e      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005720:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005724:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005728:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800572a:	4b1e      	ldr	r3, [pc, #120]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800572c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800572e:	4a1d      	ldr	r2, [pc, #116]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005734:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005736:	4b1b      	ldr	r3, [pc, #108]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	4a1a      	ldr	r2, [pc, #104]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005740:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005742:	4a18      	ldr	r2, [pc, #96]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005748:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b01      	cmp	r3, #1
 8005752:	d114      	bne.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fd fdc0 	bl	80032d8 <HAL_GetTick>
 8005758:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800575a:	e00a      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800575c:	f7fd fdbc 	bl	80032d8 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e319      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005772:	4b0c      	ldr	r3, [pc, #48]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ee      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005786:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800578a:	d111      	bne.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800578c:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8005798:	4b04      	ldr	r3, [pc, #16]	@ (80057ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800579a:	400b      	ands	r3, r1
 800579c:	4901      	ldr	r1, [pc, #4]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	608b      	str	r3, [r1, #8]
 80057a2:	e00b      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057a4:	40023800 	.word	0x40023800
 80057a8:	40007000 	.word	0x40007000
 80057ac:	0ffffcff 	.word	0x0ffffcff
 80057b0:	4baa      	ldr	r3, [pc, #680]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4aa9      	ldr	r2, [pc, #676]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80057ba:	6093      	str	r3, [r2, #8]
 80057bc:	4ba7      	ldr	r3, [pc, #668]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057c8:	49a4      	ldr	r1, [pc, #656]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d010      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057da:	4ba0      	ldr	r3, [pc, #640]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057e0:	4a9e      	ldr	r2, [pc, #632]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057e6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80057ea:	4b9c      	ldr	r3, [pc, #624]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f4:	4999      	ldr	r1, [pc, #612]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00a      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005808:	4b94      	ldr	r3, [pc, #592]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005816:	4991      	ldr	r1, [pc, #580]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005818:	4313      	orrs	r3, r2
 800581a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800582a:	4b8c      	ldr	r3, [pc, #560]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005830:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005838:	4988      	ldr	r1, [pc, #544]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583a:	4313      	orrs	r3, r2
 800583c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800584c:	4b83      	ldr	r3, [pc, #524]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005852:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800585a:	4980      	ldr	r1, [pc, #512]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800586e:	4b7b      	ldr	r3, [pc, #492]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005874:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587c:	4977      	ldr	r1, [pc, #476]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005890:	4b72      	ldr	r3, [pc, #456]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005892:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005896:	f023 0203 	bic.w	r2, r3, #3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589e:	496f      	ldr	r1, [pc, #444]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058b2:	4b6a      	ldr	r3, [pc, #424]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058b8:	f023 020c 	bic.w	r2, r3, #12
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058c0:	4966      	ldr	r1, [pc, #408]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058d4:	4b61      	ldr	r3, [pc, #388]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058e2:	495e      	ldr	r1, [pc, #376]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058f6:	4b59      	ldr	r3, [pc, #356]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	4955      	ldr	r1, [pc, #340]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005918:	4b50      	ldr	r3, [pc, #320]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800591a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800591e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	494d      	ldr	r1, [pc, #308]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800593a:	4b48      	ldr	r3, [pc, #288]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005940:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005948:	4944      	ldr	r1, [pc, #272]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800595c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800595e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005962:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	493c      	ldr	r1, [pc, #240]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800597e:	4b37      	ldr	r3, [pc, #220]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005984:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800598c:	4933      	ldr	r1, [pc, #204]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059a0:	4b2e      	ldr	r3, [pc, #184]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80059ae:	492b      	ldr	r1, [pc, #172]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d011      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059c2:	4b26      	ldr	r3, [pc, #152]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059d0:	4922      	ldr	r1, [pc, #136]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059e0:	d101      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80059f2:	2301      	movs	r3, #1
 80059f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a02:	4b16      	ldr	r3, [pc, #88]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a08:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a10:	4912      	ldr	r1, [pc, #72]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00b      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a24:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a34:	4909      	ldr	r1, [pc, #36]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d006      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80d9 	beq.w	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a50:	4b02      	ldr	r3, [pc, #8]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a01      	ldr	r2, [pc, #4]	@ (8005a5c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005a5a:	e001      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a62:	f7fd fc39 	bl	80032d8 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a68:	e008      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a6a:	f7fd fc35 	bl	80032d8 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b64      	cmp	r3, #100	@ 0x64
 8005a76:	d901      	bls.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e194      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1f0      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d021      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11d      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a9c:	4b64      	ldr	r3, [pc, #400]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005aa2:	0c1b      	lsrs	r3, r3, #16
 8005aa4:	f003 0303 	and.w	r3, r3, #3
 8005aa8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aaa:	4b61      	ldr	r3, [pc, #388]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ab0:	0e1b      	lsrs	r3, r3, #24
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	019a      	lsls	r2, r3, #6
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	061b      	lsls	r3, r3, #24
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	071b      	lsls	r3, r3, #28
 8005ad0:	4957      	ldr	r1, [pc, #348]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aec:	d00a      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d02e      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b02:	d129      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b04:	4b4a      	ldr	r3, [pc, #296]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b12:	4b47      	ldr	r3, [pc, #284]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b18:	0f1b      	lsrs	r3, r3, #28
 8005b1a:	f003 0307 	and.w	r3, r3, #7
 8005b1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	019a      	lsls	r2, r3, #6
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	041b      	lsls	r3, r3, #16
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	061b      	lsls	r3, r3, #24
 8005b32:	431a      	orrs	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	071b      	lsls	r3, r3, #28
 8005b38:	493d      	ldr	r1, [pc, #244]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b40:	4b3b      	ldr	r3, [pc, #236]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b46:	f023 021f 	bic.w	r2, r3, #31
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4937      	ldr	r1, [pc, #220]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d01d      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b64:	4b32      	ldr	r3, [pc, #200]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b6a:	0e1b      	lsrs	r3, r3, #24
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b72:	4b2f      	ldr	r3, [pc, #188]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b78:	0f1b      	lsrs	r3, r3, #28
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	019a      	lsls	r2, r3, #6
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	041b      	lsls	r3, r3, #16
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	061b      	lsls	r3, r3, #24
 8005b92:	431a      	orrs	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	071b      	lsls	r3, r3, #28
 8005b98:	4925      	ldr	r1, [pc, #148]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d011      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	019a      	lsls	r2, r3, #6
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	041b      	lsls	r3, r3, #16
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	061b      	lsls	r3, r3, #24
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	071b      	lsls	r3, r3, #28
 8005bc8:	4919      	ldr	r1, [pc, #100]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bd0:	4b17      	ldr	r3, [pc, #92]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a16      	ldr	r2, [pc, #88]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bdc:	f7fd fb7c 	bl	80032d8 <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be4:	f7fd fb78 	bl	80032d8 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	@ 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e0d7      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d0f0      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	f040 80cd 	bne.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c0a:	4b09      	ldr	r3, [pc, #36]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a08      	ldr	r2, [pc, #32]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c16:	f7fd fb5f 	bl	80032d8 <HAL_GetTick>
 8005c1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c1e:	f7fd fb5b 	bl	80032d8 <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b64      	cmp	r3, #100	@ 0x64
 8005c2a:	d903      	bls.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e0ba      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c34:	4b5e      	ldr	r3, [pc, #376]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c40:	d0ed      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d02e      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d12a      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c6a:	4b51      	ldr	r3, [pc, #324]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c70:	0c1b      	lsrs	r3, r3, #16
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c78:	4b4d      	ldr	r3, [pc, #308]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	0f1b      	lsrs	r3, r3, #28
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	019a      	lsls	r2, r3, #6
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	041b      	lsls	r3, r3, #16
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	431a      	orrs	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	071b      	lsls	r3, r3, #28
 8005c9e:	4944      	ldr	r1, [pc, #272]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ca6:	4b42      	ldr	r3, [pc, #264]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cac:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	493d      	ldr	r1, [pc, #244]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d022      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005cd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cd4:	d11d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cd6:	4b36      	ldr	r3, [pc, #216]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cdc:	0e1b      	lsrs	r3, r3, #24
 8005cde:	f003 030f 	and.w	r3, r3, #15
 8005ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ce4:	4b32      	ldr	r3, [pc, #200]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cea:	0f1b      	lsrs	r3, r3, #28
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	019a      	lsls	r2, r3, #6
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	041b      	lsls	r3, r3, #16
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	061b      	lsls	r3, r3, #24
 8005d04:	431a      	orrs	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	4929      	ldr	r1, [pc, #164]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d028      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d1e:	4b24      	ldr	r3, [pc, #144]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d24:	0e1b      	lsrs	r3, r3, #24
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d2c:	4b20      	ldr	r3, [pc, #128]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 0303 	and.w	r3, r3, #3
 8005d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	019a      	lsls	r2, r3, #6
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	041b      	lsls	r3, r3, #16
 8005d44:	431a      	orrs	r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	061b      	lsls	r3, r3, #24
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	071b      	lsls	r3, r3, #28
 8005d52:	4917      	ldr	r1, [pc, #92]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d5a:	4b15      	ldr	r3, [pc, #84]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4911      	ldr	r1, [pc, #68]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d70:	4b0f      	ldr	r3, [pc, #60]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0e      	ldr	r2, [pc, #56]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7c:	f7fd faac 	bl	80032d8 <HAL_GetTick>
 8005d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d84:	f7fd faa8 	bl	80032d8 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b64      	cmp	r3, #100	@ 0x64
 8005d90:	d901      	bls.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e007      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d96:	4b06      	ldr	r3, [pc, #24]	@ (8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da2:	d1ef      	bne.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3720      	adds	r7, #32
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40023800 	.word	0x40023800

08005db4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e09d      	b.n	8005f02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d108      	bne.n	8005de0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dd6:	d009      	beq.n	8005dec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	61da      	str	r2, [r3, #28]
 8005dde:	e005      	b.n	8005dec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7fc fdba 	bl	8002980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e2c:	d902      	bls.n	8005e34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e002      	b.n	8005e3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e42:	d007      	beq.n	8005e54 <HAL_SPI_Init+0xa0>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e4c:	d002      	beq.n	8005e54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	f003 0301 	and.w	r3, r3, #1
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e96:	ea42 0103 	orr.w	r1, r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	0c1b      	lsrs	r3, r3, #16
 8005eb0:	f003 0204 	and.w	r2, r3, #4
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ed0:	ea42 0103 	orr.w	r1, r2, r3
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69da      	ldr	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ef0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b088      	sub	sp, #32
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4613      	mov	r3, r2
 8005f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_SPI_Transmit+0x22>
 8005f28:	2302      	movs	r3, #2
 8005f2a:	e15f      	b.n	80061ec <HAL_SPI_Transmit+0x2e2>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f34:	f7fd f9d0 	bl	80032d8 <HAL_GetTick>
 8005f38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f4e:	e148      	b.n	80061e2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <HAL_SPI_Transmit+0x52>
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f60:	e13f      	b.n	80061e2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2203      	movs	r2, #3
 8005f66:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2200      	movs	r2, #0
 8005f94:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fac:	d10f      	bne.n	8005fce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd8:	2b40      	cmp	r3, #64	@ 0x40
 8005fda:	d007      	beq.n	8005fec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ff4:	d94f      	bls.n	8006096 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_SPI_Transmit+0xfa>
 8005ffe:	8afb      	ldrh	r3, [r7, #22]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d142      	bne.n	800608a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006008:	881a      	ldrh	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006014:	1c9a      	adds	r2, r3, #2
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006028:	e02f      	b.n	800608a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b02      	cmp	r3, #2
 8006036:	d112      	bne.n	800605e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603c:	881a      	ldrh	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800605c:	e015      	b.n	800608a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800605e:	f7fd f93b 	bl	80032d8 <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	683a      	ldr	r2, [r7, #0]
 800606a:	429a      	cmp	r2, r3
 800606c:	d803      	bhi.n	8006076 <HAL_SPI_Transmit+0x16c>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006074:	d102      	bne.n	800607c <HAL_SPI_Transmit+0x172>
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d106      	bne.n	800608a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8006088:	e0ab      	b.n	80061e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800608e:	b29b      	uxth	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1ca      	bne.n	800602a <HAL_SPI_Transmit+0x120>
 8006094:	e080      	b.n	8006198 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <HAL_SPI_Transmit+0x19a>
 800609e:	8afb      	ldrh	r3, [r7, #22]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d174      	bne.n	800618e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d912      	bls.n	80060d4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	881a      	ldrh	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	1c9a      	adds	r2, r3, #2
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b02      	subs	r3, #2
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060d2:	e05c      	b.n	800618e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	7812      	ldrb	r2, [r2, #0]
 80060e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e6:	1c5a      	adds	r2, r3, #1
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80060fa:	e048      	b.n	800618e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b02      	cmp	r3, #2
 8006108:	d12b      	bne.n	8006162 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b01      	cmp	r3, #1
 8006112:	d912      	bls.n	800613a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006118:	881a      	ldrh	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006124:	1c9a      	adds	r2, r3, #2
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b02      	subs	r3, #2
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006138:	e029      	b.n	800618e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	330c      	adds	r3, #12
 8006144:	7812      	ldrb	r2, [r2, #0]
 8006146:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006160:	e015      	b.n	800618e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006162:	f7fd f8b9 	bl	80032d8 <HAL_GetTick>
 8006166:	4602      	mov	r2, r0
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d803      	bhi.n	800617a <HAL_SPI_Transmit+0x270>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006178:	d102      	bne.n	8006180 <HAL_SPI_Transmit+0x276>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d106      	bne.n	800618e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800618c:	e029      	b.n	80061e2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006192:	b29b      	uxth	r3, r3
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1b1      	bne.n	80060fc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fb69 	bl	8006874 <SPI_EndRxTxTransaction>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d10a      	bne.n	80061cc <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e003      	b.n	80061e2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80061ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3720      	adds	r7, #32
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b08a      	sub	sp, #40	@ 0x28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006202:	2301      	movs	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_SPI_TransmitReceive+0x26>
 8006216:	2302      	movs	r3, #2
 8006218:	e20a      	b.n	8006630 <HAL_SPI_TransmitReceive+0x43c>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006222:	f7fd f859 	bl	80032d8 <HAL_GetTick>
 8006226:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800622e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006236:	887b      	ldrh	r3, [r7, #2]
 8006238:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800623a:	887b      	ldrh	r3, [r7, #2]
 800623c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800623e:	7efb      	ldrb	r3, [r7, #27]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d00e      	beq.n	8006262 <HAL_SPI_TransmitReceive+0x6e>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800624a:	d106      	bne.n	800625a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d102      	bne.n	800625a <HAL_SPI_TransmitReceive+0x66>
 8006254:	7efb      	ldrb	r3, [r7, #27]
 8006256:	2b04      	cmp	r3, #4
 8006258:	d003      	beq.n	8006262 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800625a:	2302      	movs	r3, #2
 800625c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8006260:	e1e0      	b.n	8006624 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d005      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x80>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x80>
 800626e:	887b      	ldrh	r3, [r7, #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800627a:	e1d3      	b.n	8006624 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b04      	cmp	r3, #4
 8006286:	d003      	beq.n	8006290 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2205      	movs	r2, #5
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	887a      	ldrh	r2, [r7, #2]
 80062a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	887a      	ldrh	r2, [r7, #2]
 80062a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	887a      	ldrh	r2, [r7, #2]
 80062b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	887a      	ldrh	r2, [r7, #2]
 80062bc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062d2:	d802      	bhi.n	80062da <HAL_SPI_TransmitReceive+0xe6>
 80062d4:	8a3b      	ldrh	r3, [r7, #16]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d908      	bls.n	80062ec <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	e007      	b.n	80062fc <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80062fa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006306:	2b40      	cmp	r3, #64	@ 0x40
 8006308:	d007      	beq.n	800631a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006318:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006322:	f240 8081 	bls.w	8006428 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d002      	beq.n	8006334 <HAL_SPI_TransmitReceive+0x140>
 800632e:	8a7b      	ldrh	r3, [r7, #18]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d16d      	bne.n	8006410 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006358:	e05a      	b.n	8006410 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d11b      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x1ac>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_SPI_TransmitReceive+0x1ac>
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	2b01      	cmp	r3, #1
 8006376:	d113      	bne.n	80063a0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800637c:	881a      	ldrh	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006392:	b29b      	uxth	r3, r3
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d11c      	bne.n	80063e8 <HAL_SPI_TransmitReceive+0x1f4>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d016      	beq.n	80063e8 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c4:	b292      	uxth	r2, r2
 80063c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063cc:	1c9a      	adds	r2, r3, #2
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80063d8:	b29b      	uxth	r3, r3
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063e4:	2301      	movs	r3, #1
 80063e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063e8:	f7fc ff76 	bl	80032d8 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d80b      	bhi.n	8006410 <HAL_SPI_TransmitReceive+0x21c>
 80063f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fe:	d007      	beq.n	8006410 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800640e:	e109      	b.n	8006624 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006414:	b29b      	uxth	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d19f      	bne.n	800635a <HAL_SPI_TransmitReceive+0x166>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006420:	b29b      	uxth	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d199      	bne.n	800635a <HAL_SPI_TransmitReceive+0x166>
 8006426:	e0e3      	b.n	80065f0 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_SPI_TransmitReceive+0x244>
 8006430:	8a7b      	ldrh	r3, [r7, #18]
 8006432:	2b01      	cmp	r3, #1
 8006434:	f040 80cf 	bne.w	80065d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800643c:	b29b      	uxth	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	d912      	bls.n	8006468 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006446:	881a      	ldrh	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b02      	subs	r3, #2
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006466:	e0b6      	b.n	80065d6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	330c      	adds	r3, #12
 8006472:	7812      	ldrb	r2, [r2, #0]
 8006474:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800648e:	e0a2      	b.n	80065d6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b02      	cmp	r3, #2
 800649c:	d134      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x314>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02f      	beq.n	8006508 <HAL_SPI_TransmitReceive+0x314>
 80064a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d12c      	bne.n	8006508 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d912      	bls.n	80064de <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064c8:	1c9a      	adds	r2, r3, #2
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	3b02      	subs	r3, #2
 80064d6:	b29a      	uxth	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064dc:	e012      	b.n	8006504 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	7812      	ldrb	r2, [r2, #0]
 80064ea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b29a      	uxth	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b01      	cmp	r3, #1
 8006514:	d148      	bne.n	80065a8 <HAL_SPI_TransmitReceive+0x3b4>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d042      	beq.n	80065a8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006528:	b29b      	uxth	r3, r3
 800652a:	2b01      	cmp	r3, #1
 800652c:	d923      	bls.n	8006576 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	b292      	uxth	r2, r2
 800653a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b02      	subs	r3, #2
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	d81f      	bhi.n	80065a4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	e016      	b.n	80065a4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f103 020c 	add.w	r2, r3, #12
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	7812      	ldrb	r2, [r2, #0]
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065a4:	2301      	movs	r3, #1
 80065a6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065a8:	f7fc fe96 	bl	80032d8 <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d803      	bhi.n	80065c0 <HAL_SPI_TransmitReceive+0x3cc>
 80065b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065be:	d102      	bne.n	80065c6 <HAL_SPI_TransmitReceive+0x3d2>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d107      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80065d4:	e026      	b.n	8006624 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065da:	b29b      	uxth	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f af57 	bne.w	8006490 <HAL_SPI_TransmitReceive+0x29c>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f47f af50 	bne.w	8006490 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f93d 	bl	8006874 <SPI_EndRxTxTransaction>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d005      	beq.n	800660c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2220      	movs	r2, #32
 800660a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800661a:	e003      	b.n	8006624 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800662c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8006630:	4618      	mov	r0, r3
 8006632:	3728      	adds	r7, #40	@ 0x28
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	4613      	mov	r3, r2
 8006646:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006648:	f7fc fe46 	bl	80032d8 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	4413      	add	r3, r2
 8006656:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006658:	f7fc fe3e 	bl	80032d8 <HAL_GetTick>
 800665c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800665e:	4b39      	ldr	r3, [pc, #228]	@ (8006744 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	015b      	lsls	r3, r3, #5
 8006664:	0d1b      	lsrs	r3, r3, #20
 8006666:	69fa      	ldr	r2, [r7, #28]
 8006668:	fb02 f303 	mul.w	r3, r2, r3
 800666c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800666e:	e054      	b.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006676:	d050      	beq.n	800671a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006678:	f7fc fe2e 	bl	80032d8 <HAL_GetTick>
 800667c:	4602      	mov	r2, r0
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	69fa      	ldr	r2, [r7, #28]
 8006684:	429a      	cmp	r2, r3
 8006686:	d902      	bls.n	800668e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006688:	69fb      	ldr	r3, [r7, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d13d      	bne.n	800670a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685a      	ldr	r2, [r3, #4]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800669c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066a6:	d111      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b0:	d004      	beq.n	80066bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ba:	d107      	bne.n	80066cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80066ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066d4:	d10f      	bne.n	80066f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066e4:	601a      	str	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80066f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e017      	b.n	800673a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d101      	bne.n	8006714 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	3b01      	subs	r3, #1
 8006718:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689a      	ldr	r2, [r3, #8]
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	4013      	ands	r3, r2
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	429a      	cmp	r2, r3
 8006728:	bf0c      	ite	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	2300      	movne	r3, #0
 800672e:	b2db      	uxtb	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	429a      	cmp	r2, r3
 8006736:	d19b      	bne.n	8006670 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006738:	2300      	movs	r3, #0
}
 800673a:	4618      	mov	r0, r3
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	2000002c 	.word	0x2000002c

08006748 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	@ 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
 8006754:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800675a:	f7fc fdbd 	bl	80032d8 <HAL_GetTick>
 800675e:	4602      	mov	r2, r0
 8006760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006762:	1a9b      	subs	r3, r3, r2
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	4413      	add	r3, r2
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800676a:	f7fc fdb5 	bl	80032d8 <HAL_GetTick>
 800676e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	330c      	adds	r3, #12
 8006776:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006778:	4b3d      	ldr	r3, [pc, #244]	@ (8006870 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	00da      	lsls	r2, r3, #3
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	0d1b      	lsrs	r3, r3, #20
 8006788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800678a:	fb02 f303 	mul.w	r3, r2, r3
 800678e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006790:	e060      	b.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006798:	d107      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d104      	bne.n	80067aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b0:	d050      	beq.n	8006854 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b2:	f7fc fd91 	bl	80032d8 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067be:	429a      	cmp	r2, r3
 80067c0:	d902      	bls.n	80067c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d13d      	bne.n	8006844 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067e0:	d111      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067ea:	d004      	beq.n	80067f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067f4:	d107      	bne.n	8006806 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006804:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800680e:	d10f      	bne.n	8006830 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800682e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e010      	b.n	8006866 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	3b01      	subs	r3, #1
 8006852:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689a      	ldr	r2, [r3, #8]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4013      	ands	r3, r2
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	429a      	cmp	r2, r3
 8006862:	d196      	bne.n	8006792 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3728      	adds	r7, #40	@ 0x28
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	2000002c 	.word	0x2000002c

08006874 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af02      	add	r7, sp, #8
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2200      	movs	r2, #0
 8006888:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff ff5b 	bl	8006748 <SPI_WaitFifoStateUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689c:	f043 0220 	orr.w	r2, r3, #32
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e046      	b.n	8006936 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80068a8:	4b25      	ldr	r3, [pc, #148]	@ (8006940 <SPI_EndRxTxTransaction+0xcc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a25      	ldr	r2, [pc, #148]	@ (8006944 <SPI_EndRxTxTransaction+0xd0>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	0d5b      	lsrs	r3, r3, #21
 80068b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80068c6:	d112      	bne.n	80068ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2200      	movs	r2, #0
 80068d0:	2180      	movs	r1, #128	@ 0x80
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7ff feb0 	bl	8006638 <SPI_WaitFlagStateUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068e2:	f043 0220 	orr.w	r2, r3, #32
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e023      	b.n	8006936 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00a      	beq.n	800690a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3b01      	subs	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006904:	2b80      	cmp	r3, #128	@ 0x80
 8006906:	d0f2      	beq.n	80068ee <SPI_EndRxTxTransaction+0x7a>
 8006908:	e000      	b.n	800690c <SPI_EndRxTxTransaction+0x98>
        break;
 800690a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	9300      	str	r3, [sp, #0]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff ff15 	bl	8006748 <SPI_WaitFifoStateUntilTimeout>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d007      	beq.n	8006934 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006928:	f043 0220 	orr.w	r2, r3, #32
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e000      	b.n	8006936 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	2000002c 	.word	0x2000002c
 8006944:	165e9f81 	.word	0x165e9f81

08006948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b082      	sub	sp, #8
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e049      	b.n	80069ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fc f868 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2202      	movs	r2, #2
 8006978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3304      	adds	r3, #4
 8006984:	4619      	mov	r1, r3
 8006986:	4610      	mov	r0, r2
 8006988:	f000 fd70 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d001      	beq.n	8006a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e04c      	b.n	8006aaa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <HAL_TIM_Base_Start+0xc0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d01d      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a22      	ldr	r2, [pc, #136]	@ (8006abc <HAL_TIM_Base_Start+0xc4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a21      	ldr	r2, [pc, #132]	@ (8006ac0 <HAL_TIM_Base_Start+0xc8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <HAL_TIM_Base_Start+0xcc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <HAL_TIM_Base_Start+0xd0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	@ (8006acc <HAL_TIM_Base_Start+0xd4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <HAL_TIM_Base_Start+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d115      	bne.n	8006a94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	4b19      	ldr	r3, [pc, #100]	@ (8006ad4 <HAL_TIM_Base_Start+0xdc>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d015      	beq.n	8006aa6 <HAL_TIM_Base_Start+0xae>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a80:	d011      	beq.n	8006aa6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a92:	e008      	b.n	8006aa6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e000      	b.n	8006aa8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40010400 	.word	0x40010400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40001800 	.word	0x40001800
 8006ad4:	00010007 	.word	0x00010007

08006ad8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	6a1a      	ldr	r2, [r3, #32]
 8006ae6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006aea:	4013      	ands	r3, r2
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10f      	bne.n	8006b10 <HAL_TIM_Base_Stop+0x38>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006afa:	4013      	ands	r3, r2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d107      	bne.n	8006b10 <HAL_TIM_Base_Stop+0x38>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e049      	b.n	8006bcc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f841 	bl	8006bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f000 fc81 	bl	800746c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3708      	adds	r7, #8
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e08f      	b.n	8006d1c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d106      	bne.n	8006c16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f7fb ff7f 	bl	8002b14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6899      	ldr	r1, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	4b3e      	ldr	r3, [pc, #248]	@ (8006d24 <HAL_TIM_Encoder_Init+0x13c>)
 8006c2a:	400b      	ands	r3, r1
 8006c2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f000 fc17 	bl	800746c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4b31      	ldr	r3, [pc, #196]	@ (8006d28 <HAL_TIM_Encoder_Init+0x140>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	4313      	orrs	r3, r2
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d2c <HAL_TIM_Encoder_Init+0x144>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006c82:	693a      	ldr	r2, [r7, #16]
 8006c84:	4b2a      	ldr	r3, [pc, #168]	@ (8006d30 <HAL_TIM_Encoder_Init+0x148>)
 8006c86:	4013      	ands	r3, r2
 8006c88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68da      	ldr	r2, [r3, #12]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	021b      	lsls	r3, r3, #8
 8006c94:	4313      	orrs	r3, r2
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	011a      	lsls	r2, r3, #4
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	031b      	lsls	r3, r3, #12
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006cbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	695b      	ldr	r3, [r3, #20]
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3718      	adds	r7, #24
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	fffebff8 	.word	0xfffebff8
 8006d28:	fffffcfc 	.word	0xfffffcfc
 8006d2c:	fffff3f3 	.word	0xfffff3f3
 8006d30:	ffff0f0f 	.word	0xffff0f0f

08006d34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d110      	bne.n	8006d86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d102      	bne.n	8006d70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d6a:	7b7b      	ldrb	r3, [r7, #13]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d001      	beq.n	8006d74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e069      	b.n	8006e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d84:	e031      	b.n	8006dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d110      	bne.n	8006dae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d102      	bne.n	8006d98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d92:	7b3b      	ldrb	r3, [r7, #12]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d001      	beq.n	8006d9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e055      	b.n	8006e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2202      	movs	r2, #2
 8006da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dac:	e01d      	b.n	8006dea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d108      	bne.n	8006dc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d105      	bne.n	8006dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006dba:	7b7b      	ldrb	r3, [r7, #13]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d102      	bne.n	8006dc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006dc0:	7b3b      	ldrb	r3, [r7, #12]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d001      	beq.n	8006dca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e03e      	b.n	8006e48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2202      	movs	r2, #2
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2202      	movs	r2, #2
 8006dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2202      	movs	r2, #2
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_TIM_Encoder_Start+0xc4>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d008      	beq.n	8006e08 <HAL_TIM_Encoder_Start+0xd4>
 8006df6:	e00f      	b.n	8006e18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	2100      	movs	r1, #0
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fed7 	bl	8007bb4 <TIM_CCxChannelCmd>
      break;
 8006e06:	e016      	b.n	8006e36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	2104      	movs	r1, #4
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fecf 	bl	8007bb4 <TIM_CCxChannelCmd>
      break;
 8006e16:	e00e      	b.n	8006e36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fec7 	bl	8007bb4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f000 fec0 	bl	8007bb4 <TIM_CCxChannelCmd>
      break;
 8006e34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 0201 	orr.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e46:	2300      	movs	r3, #0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d020      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01b      	beq.n	8006eb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f06f 0202 	mvn.w	r2, #2
 8006e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	699b      	ldr	r3, [r3, #24]
 8006e92:	f003 0303 	and.w	r3, r3, #3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fad2 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006ea0:	e005      	b.n	8006eae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fac4 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7fa fd7d 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d020      	beq.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d01b      	beq.n	8006f00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f06f 0204 	mvn.w	r2, #4
 8006ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d003      	beq.n	8006eee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 faac 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006eec:	e005      	b.n	8006efa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa9e 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fa fd57 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01b      	beq.n	8006f4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f06f 0208 	mvn.w	r2, #8
 8006f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2204      	movs	r2, #4
 8006f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d003      	beq.n	8006f3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa86 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006f38:	e005      	b.n	8006f46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fa78 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7fa fd31 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f003 0310 	and.w	r3, r3, #16
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d020      	beq.n	8006f98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f003 0310 	and.w	r3, r3, #16
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01b      	beq.n	8006f98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f06f 0210 	mvn.w	r2, #16
 8006f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2208      	movs	r2, #8
 8006f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d003      	beq.n	8006f86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa60 	bl	8007444 <HAL_TIM_IC_CaptureCallback>
 8006f84:	e005      	b.n	8006f92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa52 	bl	8007430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7fa fd0b 	bl	80019a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00c      	beq.n	8006fbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d007      	beq.n	8006fbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0201 	mvn.w	r2, #1
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fa30 	bl	800741c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00c      	beq.n	8006fea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d007      	beq.n	8006fea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fea3 	bl	8007d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00c      	beq.n	800700e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d007      	beq.n	800700e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fe9b 	bl	8007d44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00c      	beq.n	8007032 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fa13 	bl	8007458 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0320 	and.w	r3, r3, #32
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f06f 0220 	mvn.w	r2, #32
 800704e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 fe63 	bl	8007d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007056:	bf00      	nop
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800706c:	2300      	movs	r3, #0
 800706e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007076:	2b01      	cmp	r3, #1
 8007078:	d101      	bne.n	800707e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800707a:	2302      	movs	r3, #2
 800707c:	e0ff      	b.n	800727e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2b14      	cmp	r3, #20
 800708a:	f200 80f0 	bhi.w	800726e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800708e:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007094:	080070e9 	.word	0x080070e9
 8007098:	0800726f 	.word	0x0800726f
 800709c:	0800726f 	.word	0x0800726f
 80070a0:	0800726f 	.word	0x0800726f
 80070a4:	08007129 	.word	0x08007129
 80070a8:	0800726f 	.word	0x0800726f
 80070ac:	0800726f 	.word	0x0800726f
 80070b0:	0800726f 	.word	0x0800726f
 80070b4:	0800716b 	.word	0x0800716b
 80070b8:	0800726f 	.word	0x0800726f
 80070bc:	0800726f 	.word	0x0800726f
 80070c0:	0800726f 	.word	0x0800726f
 80070c4:	080071ab 	.word	0x080071ab
 80070c8:	0800726f 	.word	0x0800726f
 80070cc:	0800726f 	.word	0x0800726f
 80070d0:	0800726f 	.word	0x0800726f
 80070d4:	080071ed 	.word	0x080071ed
 80070d8:	0800726f 	.word	0x0800726f
 80070dc:	0800726f 	.word	0x0800726f
 80070e0:	0800726f 	.word	0x0800726f
 80070e4:	0800722d 	.word	0x0800722d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fa68 	bl	80075c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0208 	orr.w	r2, r2, #8
 8007102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0204 	bic.w	r2, r2, #4
 8007112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6999      	ldr	r1, [r3, #24]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691a      	ldr	r2, [r3, #16]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	430a      	orrs	r2, r1
 8007124:	619a      	str	r2, [r3, #24]
      break;
 8007126:	e0a5      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68b9      	ldr	r1, [r7, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f000 faba 	bl	80076a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699a      	ldr	r2, [r3, #24]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007142:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6999      	ldr	r1, [r3, #24]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	021a      	lsls	r2, r3, #8
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	619a      	str	r2, [r3, #24]
      break;
 8007168:	e084      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fb11 	bl	8007798 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0208 	orr.w	r2, r2, #8
 8007184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0204 	bic.w	r2, r2, #4
 8007194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69d9      	ldr	r1, [r3, #28]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691a      	ldr	r2, [r3, #16]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	61da      	str	r2, [r3, #28]
      break;
 80071a8:	e064      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 fb67 	bl	8007884 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	69da      	ldr	r2, [r3, #28]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69da      	ldr	r2, [r3, #28]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	69d9      	ldr	r1, [r3, #28]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	021a      	lsls	r2, r3, #8
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	61da      	str	r2, [r3, #28]
      break;
 80071ea:	e043      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fb9e 	bl	8007934 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800722a:	e023      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fbd0 	bl	80079d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007246:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007256:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800726c:	e002      	b.n	8007274 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	75fb      	strb	r3, [r7, #23]
      break;
 8007272:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800727c:	7dfb      	ldrb	r3, [r7, #23]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3718      	adds	r7, #24
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop

08007288 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729c:	2b01      	cmp	r3, #1
 800729e:	d101      	bne.n	80072a4 <HAL_TIM_ConfigClockSource+0x1c>
 80072a0:	2302      	movs	r3, #2
 80072a2:	e0b4      	b.n	800740e <HAL_TIM_ConfigClockSource+0x186>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4b56      	ldr	r3, [pc, #344]	@ (8007418 <HAL_TIM_ConfigClockSource+0x190>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072dc:	d03e      	beq.n	800735c <HAL_TIM_ConfigClockSource+0xd4>
 80072de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e2:	f200 8087 	bhi.w	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ea:	f000 8086 	beq.w	80073fa <HAL_TIM_ConfigClockSource+0x172>
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f2:	d87f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b70      	cmp	r3, #112	@ 0x70
 80072f6:	d01a      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xa6>
 80072f8:	2b70      	cmp	r3, #112	@ 0x70
 80072fa:	d87b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b60      	cmp	r3, #96	@ 0x60
 80072fe:	d050      	beq.n	80073a2 <HAL_TIM_ConfigClockSource+0x11a>
 8007300:	2b60      	cmp	r3, #96	@ 0x60
 8007302:	d877      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b50      	cmp	r3, #80	@ 0x50
 8007306:	d03c      	beq.n	8007382 <HAL_TIM_ConfigClockSource+0xfa>
 8007308:	2b50      	cmp	r3, #80	@ 0x50
 800730a:	d873      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b40      	cmp	r3, #64	@ 0x40
 800730e:	d058      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0x13a>
 8007310:	2b40      	cmp	r3, #64	@ 0x40
 8007312:	d86f      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b30      	cmp	r3, #48	@ 0x30
 8007316:	d064      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b30      	cmp	r3, #48	@ 0x30
 800731a:	d86b      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b20      	cmp	r3, #32
 800731e:	d060      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b20      	cmp	r3, #32
 8007322:	d867      	bhi.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
 8007324:	2b00      	cmp	r3, #0
 8007326:	d05c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 8007328:	2b10      	cmp	r3, #16
 800732a:	d05a      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x15a>
 800732c:	e062      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800733e:	f000 fc19 	bl	8007b74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007350:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	609a      	str	r2, [r3, #8]
      break;
 800735a:	e04f      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800736c:	f000 fc02 	bl	8007b74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800737e:	609a      	str	r2, [r3, #8]
      break;
 8007380:	e03c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800738e:	461a      	mov	r2, r3
 8007390:	f000 fb76 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2150      	movs	r1, #80	@ 0x50
 800739a:	4618      	mov	r0, r3
 800739c:	f000 fbcf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80073a0:	e02c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073ae:	461a      	mov	r2, r3
 80073b0:	f000 fb95 	bl	8007ade <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2160      	movs	r1, #96	@ 0x60
 80073ba:	4618      	mov	r0, r3
 80073bc:	f000 fbbf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80073c0:	e01c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ce:	461a      	mov	r2, r3
 80073d0:	f000 fb56 	bl	8007a80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2140      	movs	r1, #64	@ 0x40
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fbaf 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4619      	mov	r1, r3
 80073ec:	4610      	mov	r0, r2
 80073ee:	f000 fba6 	bl	8007b3e <TIM_ITRx_SetConfig>
      break;
 80073f2:	e003      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800740c:	7bfb      	ldrb	r3, [r7, #15]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	fffeff88 	.word	0xfffeff88

0800741c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a46      	ldr	r2, [pc, #280]	@ (8007598 <TIM_Base_SetConfig+0x12c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800748a:	d00f      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a43      	ldr	r2, [pc, #268]	@ (800759c <TIM_Base_SetConfig+0x130>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a42      	ldr	r2, [pc, #264]	@ (80075a0 <TIM_Base_SetConfig+0x134>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a41      	ldr	r2, [pc, #260]	@ (80075a4 <TIM_Base_SetConfig+0x138>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_Base_SetConfig+0x40>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a40      	ldr	r2, [pc, #256]	@ (80075a8 <TIM_Base_SetConfig+0x13c>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d108      	bne.n	80074be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a35      	ldr	r2, [pc, #212]	@ (8007598 <TIM_Base_SetConfig+0x12c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d02b      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074cc:	d027      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a32      	ldr	r2, [pc, #200]	@ (800759c <TIM_Base_SetConfig+0x130>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d023      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	4a31      	ldr	r2, [pc, #196]	@ (80075a0 <TIM_Base_SetConfig+0x134>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d01f      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a30      	ldr	r2, [pc, #192]	@ (80075a4 <TIM_Base_SetConfig+0x138>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d01b      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	4a2f      	ldr	r2, [pc, #188]	@ (80075a8 <TIM_Base_SetConfig+0x13c>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d017      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2e      	ldr	r2, [pc, #184]	@ (80075ac <TIM_Base_SetConfig+0x140>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d013      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2d      	ldr	r2, [pc, #180]	@ (80075b0 <TIM_Base_SetConfig+0x144>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d00f      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a2c      	ldr	r2, [pc, #176]	@ (80075b4 <TIM_Base_SetConfig+0x148>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00b      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a2b      	ldr	r2, [pc, #172]	@ (80075b8 <TIM_Base_SetConfig+0x14c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d007      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a2a      	ldr	r2, [pc, #168]	@ (80075bc <TIM_Base_SetConfig+0x150>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d003      	beq.n	800751e <TIM_Base_SetConfig+0xb2>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a29      	ldr	r2, [pc, #164]	@ (80075c0 <TIM_Base_SetConfig+0x154>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d108      	bne.n	8007530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	4313      	orrs	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a10      	ldr	r2, [pc, #64]	@ (8007598 <TIM_Base_SetConfig+0x12c>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d003      	beq.n	8007564 <TIM_Base_SetConfig+0xf8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a12      	ldr	r2, [pc, #72]	@ (80075a8 <TIM_Base_SetConfig+0x13c>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d103      	bne.n	800756c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	691a      	ldr	r2, [r3, #16]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b01      	cmp	r3, #1
 800757c:	d105      	bne.n	800758a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f023 0201 	bic.w	r2, r3, #1
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	611a      	str	r2, [r3, #16]
  }
}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	40010000 	.word	0x40010000
 800759c:	40000400 	.word	0x40000400
 80075a0:	40000800 	.word	0x40000800
 80075a4:	40000c00 	.word	0x40000c00
 80075a8:	40010400 	.word	0x40010400
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800
 80075b8:	40001800 	.word	0x40001800
 80075bc:	40001c00 	.word	0x40001c00
 80075c0:	40002000 	.word	0x40002000

080075c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a1b      	ldr	r3, [r3, #32]
 80075d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	f023 0201 	bic.w	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	699b      	ldr	r3, [r3, #24]
 80075ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4b2b      	ldr	r3, [pc, #172]	@ (800769c <TIM_OC1_SetConfig+0xd8>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f023 0303 	bic.w	r3, r3, #3
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	f023 0302 	bic.w	r3, r3, #2
 800760c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4313      	orrs	r3, r2
 8007616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a21      	ldr	r2, [pc, #132]	@ (80076a0 <TIM_OC1_SetConfig+0xdc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d003      	beq.n	8007628 <TIM_OC1_SetConfig+0x64>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a20      	ldr	r2, [pc, #128]	@ (80076a4 <TIM_OC1_SetConfig+0xe0>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d10c      	bne.n	8007642 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f023 0308 	bic.w	r3, r3, #8
 800762e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f023 0304 	bic.w	r3, r3, #4
 8007640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a16      	ldr	r2, [pc, #88]	@ (80076a0 <TIM_OC1_SetConfig+0xdc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_OC1_SetConfig+0x8e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a15      	ldr	r2, [pc, #84]	@ (80076a4 <TIM_OC1_SetConfig+0xe0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d111      	bne.n	8007676 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	4313      	orrs	r3, r2
 8007674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68fa      	ldr	r2, [r7, #12]
 8007680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	685a      	ldr	r2, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	697a      	ldr	r2, [r7, #20]
 800768e:	621a      	str	r2, [r3, #32]
}
 8007690:	bf00      	nop
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	fffeff8f 	.word	0xfffeff8f
 80076a0:	40010000 	.word	0x40010000
 80076a4:	40010400 	.word	0x40010400

080076a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a1b      	ldr	r3, [r3, #32]
 80076b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f023 0210 	bic.w	r2, r3, #16
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	4b2e      	ldr	r3, [pc, #184]	@ (800778c <TIM_OC2_SetConfig+0xe4>)
 80076d4:	4013      	ands	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	697a      	ldr	r2, [r7, #20]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a23      	ldr	r2, [pc, #140]	@ (8007790 <TIM_OC2_SetConfig+0xe8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC2_SetConfig+0x68>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a22      	ldr	r2, [pc, #136]	@ (8007794 <TIM_OC2_SetConfig+0xec>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10d      	bne.n	800772c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800772a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a18      	ldr	r2, [pc, #96]	@ (8007790 <TIM_OC2_SetConfig+0xe8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC2_SetConfig+0x94>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a17      	ldr	r2, [pc, #92]	@ (8007794 <TIM_OC2_SetConfig+0xec>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d113      	bne.n	8007764 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800774a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	621a      	str	r2, [r3, #32]
}
 800777e:	bf00      	nop
 8007780:	371c      	adds	r7, #28
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	feff8fff 	.word	0xfeff8fff
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400

08007798 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a1b      	ldr	r3, [r3, #32]
 80077ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4b2d      	ldr	r3, [pc, #180]	@ (8007878 <TIM_OC3_SetConfig+0xe0>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80077e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a22      	ldr	r2, [pc, #136]	@ (800787c <TIM_OC3_SetConfig+0xe4>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d003      	beq.n	80077fe <TIM_OC3_SetConfig+0x66>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a21      	ldr	r2, [pc, #132]	@ (8007880 <TIM_OC3_SetConfig+0xe8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d10d      	bne.n	800781a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	021b      	lsls	r3, r3, #8
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	4313      	orrs	r3, r2
 8007810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a17      	ldr	r2, [pc, #92]	@ (800787c <TIM_OC3_SetConfig+0xe4>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0x92>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <TIM_OC3_SetConfig+0xe8>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	fffeff8f 	.word	0xfffeff8f
 800787c:	40010000 	.word	0x40010000
 8007880:	40010400 	.word	0x40010400

08007884 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a1b      	ldr	r3, [r3, #32]
 8007898:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007928 <TIM_OC4_SetConfig+0xa4>)
 80078b0:	4013      	ands	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	021b      	lsls	r3, r3, #8
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80078ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	031b      	lsls	r3, r3, #12
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4313      	orrs	r3, r2
 80078da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a13      	ldr	r2, [pc, #76]	@ (800792c <TIM_OC4_SetConfig+0xa8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d003      	beq.n	80078ec <TIM_OC4_SetConfig+0x68>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a12      	ldr	r2, [pc, #72]	@ (8007930 <TIM_OC4_SetConfig+0xac>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d109      	bne.n	8007900 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	019b      	lsls	r3, r3, #6
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	621a      	str	r2, [r3, #32]
}
 800791a:	bf00      	nop
 800791c:	371c      	adds	r7, #28
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr
 8007926:	bf00      	nop
 8007928:	feff8fff 	.word	0xfeff8fff
 800792c:	40010000 	.word	0x40010000
 8007930:	40010400 	.word	0x40010400

08007934 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007934:	b480      	push	{r7}
 8007936:	b087      	sub	sp, #28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800795a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4b1b      	ldr	r3, [pc, #108]	@ (80079cc <TIM_OC5_SetConfig+0x98>)
 8007960:	4013      	ands	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a12      	ldr	r2, [pc, #72]	@ (80079d0 <TIM_OC5_SetConfig+0x9c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d003      	beq.n	8007992 <TIM_OC5_SetConfig+0x5e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a11      	ldr	r2, [pc, #68]	@ (80079d4 <TIM_OC5_SetConfig+0xa0>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d109      	bne.n	80079a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007998:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	021b      	lsls	r3, r3, #8
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	621a      	str	r2, [r3, #32]
}
 80079c0:	bf00      	nop
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	fffeff8f 	.word	0xfffeff8f
 80079d0:	40010000 	.word	0x40010000
 80079d4:	40010400 	.word	0x40010400

080079d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	4b1c      	ldr	r3, [pc, #112]	@ (8007a74 <TIM_OC6_SetConfig+0x9c>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	021b      	lsls	r3, r3, #8
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	051b      	lsls	r3, r3, #20
 8007a22:	693a      	ldr	r2, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a13      	ldr	r2, [pc, #76]	@ (8007a78 <TIM_OC6_SetConfig+0xa0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d003      	beq.n	8007a38 <TIM_OC6_SetConfig+0x60>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a12      	ldr	r2, [pc, #72]	@ (8007a7c <TIM_OC6_SetConfig+0xa4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d109      	bne.n	8007a4c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	695b      	ldr	r3, [r3, #20]
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	685a      	ldr	r2, [r3, #4]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	621a      	str	r2, [r3, #32]
}
 8007a66:	bf00      	nop
 8007a68:	371c      	adds	r7, #28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop
 8007a74:	feff8fff 	.word	0xfeff8fff
 8007a78:	40010000 	.word	0x40010000
 8007a7c:	40010400 	.word	0x40010400

08007a80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b087      	sub	sp, #28
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6a1b      	ldr	r3, [r3, #32]
 8007a90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	f023 0201 	bic.w	r2, r3, #1
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	011b      	lsls	r3, r3, #4
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f023 030a 	bic.w	r3, r3, #10
 8007abc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ade:	b480      	push	{r7}
 8007ae0:	b087      	sub	sp, #28
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f023 0210 	bic.w	r2, r3, #16
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	031b      	lsls	r3, r3, #12
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b085      	sub	sp, #20
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	f043 0307 	orr.w	r3, r3, #7
 8007b60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	609a      	str	r2, [r3, #8]
}
 8007b68:	bf00      	nop
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	021a      	lsls	r2, r3, #8
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	431a      	orrs	r2, r3
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	697a      	ldr	r2, [r7, #20]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	697a      	ldr	r2, [r7, #20]
 8007ba6:	609a      	str	r2, [r3, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	371c      	adds	r7, #28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f003 031f 	and.w	r3, r3, #31
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6a1a      	ldr	r2, [r3, #32]
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	401a      	ands	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a1a      	ldr	r2, [r3, #32]
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
	...

08007c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d101      	bne.n	8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e06d      	b.n	8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a30      	ldr	r2, [pc, #192]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d004      	beq.n	8007c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a2f      	ldr	r2, [pc, #188]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d108      	bne.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a20      	ldr	r2, [pc, #128]	@ (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d022      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1d      	ldr	r2, [pc, #116]	@ (8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d018      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a1a      	ldr	r2, [pc, #104]	@ (8007d10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d00e      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a15      	ldr	r2, [pc, #84]	@ (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d009      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a16      	ldr	r2, [pc, #88]	@ (8007d14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d004      	beq.n	8007cc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a15      	ldr	r2, [pc, #84]	@ (8007d18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d10c      	bne.n	8007ce2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	68ba      	ldr	r2, [r7, #8]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	40010000 	.word	0x40010000
 8007d04:	40010400 	.word	0x40010400
 8007d08:	40000400 	.word	0x40000400
 8007d0c:	40000800 	.word	0x40000800
 8007d10:	40000c00 	.word	0x40000c00
 8007d14:	40014000 	.word	0x40014000
 8007d18:	40001800 	.word	0x40001800

08007d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e040      	b.n	8007dec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa ff9a 	bl	8002cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2224      	movs	r2, #36	@ 0x24
 8007d84:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fe08 	bl	80089b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fba1 	bl	80084ec <UART_SetConfig>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d101      	bne.n	8007db4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e01b      	b.n	8007dec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	689a      	ldr	r2, [r3, #8]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f042 0201 	orr.w	r2, r2, #1
 8007de2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 fe87 	bl	8008af8 <UART_CheckIdleState>
 8007dea:	4603      	mov	r3, r0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	@ 0x28
 8007df8:	af02      	add	r7, sp, #8
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	603b      	str	r3, [r7, #0]
 8007e00:	4613      	mov	r3, r2
 8007e02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	d177      	bne.n	8007efc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_UART_Transmit+0x24>
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e070      	b.n	8007efe <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2221      	movs	r2, #33	@ 0x21
 8007e28:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e2a:	f7fb fa55 	bl	80032d8 <HAL_GetTick>
 8007e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	88fa      	ldrh	r2, [r7, #6]
 8007e34:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	88fa      	ldrh	r2, [r7, #6]
 8007e3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e48:	d108      	bne.n	8007e5c <HAL_UART_Transmit+0x68>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	691b      	ldr	r3, [r3, #16]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	e003      	b.n	8007e64 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e60:	2300      	movs	r3, #0
 8007e62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e64:	e02f      	b.n	8007ec6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2180      	movs	r1, #128	@ 0x80
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	f000 fe98 	bl	8008ba6 <UART_WaitOnFlagUntilTimeout>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d004      	beq.n	8007e86 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007e82:	2303      	movs	r3, #3
 8007e84:	e03b      	b.n	8007efe <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10b      	bne.n	8007ea4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	881b      	ldrh	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	3302      	adds	r3, #2
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	e007      	b.n	8007eb4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1c9      	bne.n	8007e66 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	2140      	movs	r1, #64	@ 0x40
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 fe62 	bl	8008ba6 <UART_WaitOnFlagUntilTimeout>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2220      	movs	r2, #32
 8007eec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e005      	b.n	8007efe <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e000      	b.n	8007efe <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
  }
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3720      	adds	r7, #32
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b0ba      	sub	sp, #232	@ 0xe8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f32:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007f36:	4013      	ands	r3, r2
 8007f38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007f3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d115      	bne.n	8007f70 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d00f      	beq.n	8007f70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d009      	beq.n	8007f70 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f000 8297 	beq.w	8008494 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	4798      	blx	r3
      }
      return;
 8007f6e:	e291      	b.n	8008494 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	f000 8117 	beq.w	80081a8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d106      	bne.n	8007f94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007f8a:	4b85      	ldr	r3, [pc, #532]	@ (80081a0 <HAL_UART_IRQHandler+0x298>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 810a 	beq.w	80081a8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f98:	f003 0301 	and.w	r3, r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d011      	beq.n	8007fc4 <HAL_UART_IRQHandler+0xbc>
 8007fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00b      	beq.n	8007fc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fba:	f043 0201 	orr.w	r2, r3, #1
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d011      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xec>
 8007fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00b      	beq.n	8007ff4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007fea:	f043 0204 	orr.w	r2, r3, #4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d011      	beq.n	8008024 <HAL_UART_IRQHandler+0x11c>
 8008000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00b      	beq.n	8008024 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2204      	movs	r2, #4
 8008012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800801a:	f043 0202 	orr.w	r2, r3, #2
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b00      	cmp	r3, #0
 800802e:	d017      	beq.n	8008060 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008034:	f003 0320 	and.w	r3, r3, #32
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800803c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008040:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00b      	beq.n	8008060 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2208      	movs	r2, #8
 800804e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008056:	f043 0208 	orr.w	r2, r3, #8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008068:	2b00      	cmp	r3, #0
 800806a:	d012      	beq.n	8008092 <HAL_UART_IRQHandler+0x18a>
 800806c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008070:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00c      	beq.n	8008092 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008080:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008088:	f043 0220 	orr.w	r2, r3, #32
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 81fd 	beq.w	8008498 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800809e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00d      	beq.n	80080c6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80080aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d003      	beq.n	80080c6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080da:	2b40      	cmp	r3, #64	@ 0x40
 80080dc:	d005      	beq.n	80080ea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80080e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d04f      	beq.n	800818a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fdc8 	bl	8008c80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080fa:	2b40      	cmp	r3, #64	@ 0x40
 80080fc:	d141      	bne.n	8008182 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008108:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800811c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800812a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800812e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008136:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008142:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1d9      	bne.n	80080fe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800814e:	2b00      	cmp	r3, #0
 8008150:	d013      	beq.n	800817a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008156:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <HAL_UART_IRQHandler+0x29c>)
 8008158:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800815e:	4618      	mov	r0, r3
 8008160:	f7fb fb1a 	bl	8003798 <HAL_DMA_Abort_IT>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d017      	beq.n	800819a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008174:	4610      	mov	r0, r2
 8008176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	e00f      	b.n	800819a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 f9a0 	bl	80084c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008180:	e00b      	b.n	800819a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f000 f99c 	bl	80084c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008188:	e007      	b.n	800819a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 f998 	bl	80084c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8008198:	e17e      	b.n	8008498 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819a:	bf00      	nop
    return;
 800819c:	e17c      	b.n	8008498 <HAL_UART_IRQHandler+0x590>
 800819e:	bf00      	nop
 80081a0:	04000120 	.word	0x04000120
 80081a4:	08008d49 	.word	0x08008d49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	f040 814c 	bne.w	800844a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081b6:	f003 0310 	and.w	r3, r3, #16
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 8145 	beq.w	800844a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80081c4:	f003 0310 	and.w	r3, r3, #16
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 813e 	beq.w	800844a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2210      	movs	r2, #16
 80081d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081e0:	2b40      	cmp	r3, #64	@ 0x40
 80081e2:	f040 80b6 	bne.w	8008352 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80081f2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 8150 	beq.w	800849c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008202:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008206:	429a      	cmp	r2, r3
 8008208:	f080 8148 	bcs.w	800849c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008212:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008220:	f000 8086 	beq.w	8008330 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008230:	e853 3f00 	ldrex	r3, [r3]
 8008234:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008238:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800823c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008240:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	461a      	mov	r2, r3
 800824a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800824e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008252:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008256:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800825a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008266:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1da      	bne.n	8008224 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	3308      	adds	r3, #8
 8008274:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008278:	e853 3f00 	ldrex	r3, [r3]
 800827c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800827e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3308      	adds	r3, #8
 800828e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008292:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008296:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800829a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e1      	bne.n	800826e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	3308      	adds	r3, #8
 80082b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b4:	e853 3f00 	ldrex	r3, [r3]
 80082b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	3308      	adds	r3, #8
 80082ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80082ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e3      	bne.n	80082aa <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008300:	f023 0310 	bic.w	r3, r3, #16
 8008304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008312:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008314:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008316:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008318:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800831a:	e841 2300 	strex	r3, r2, [r1]
 800831e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e4      	bne.n	80082f0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800832a:	4618      	mov	r0, r3
 800832c:	f7fb f9c4 	bl	80036b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2202      	movs	r2, #2
 8008334:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008342:	b29b      	uxth	r3, r3
 8008344:	1ad3      	subs	r3, r2, r3
 8008346:	b29b      	uxth	r3, r3
 8008348:	4619      	mov	r1, r3
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8c2 	bl	80084d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008350:	e0a4      	b.n	800849c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800835e:	b29b      	uxth	r3, r3
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800836c:	b29b      	uxth	r3, r3
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 8096 	beq.w	80084a0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8008374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 8091 	beq.w	80084a0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800838c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008392:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80083a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80083a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80083a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80083ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3308      	adds	r3, #8
 80083ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083be:	e853 3f00 	ldrex	r3, [r3]
 80083c2:	623b      	str	r3, [r7, #32]
   return(result);
 80083c4:	6a3b      	ldr	r3, [r7, #32]
 80083c6:	f023 0301 	bic.w	r3, r3, #1
 80083ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3308      	adds	r3, #8
 80083d4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80083d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80083da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083e0:	e841 2300 	strex	r3, r2, [r1]
 80083e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1e3      	bne.n	80083b4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2220      	movs	r2, #32
 80083f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	60fb      	str	r3, [r7, #12]
   return(result);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f023 0310 	bic.w	r3, r3, #16
 8008414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	461a      	mov	r2, r3
 800841e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008426:	69b9      	ldr	r1, [r7, #24]
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	e841 2300 	strex	r3, r2, [r1]
 800842e:	617b      	str	r3, [r7, #20]
   return(result);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1e4      	bne.n	8008400 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2202      	movs	r2, #2
 800843a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800843c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f846 	bl	80084d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008448:	e02a      	b.n	80084a0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800844a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800844e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00e      	beq.n	8008474 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800845a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800845e:	2b00      	cmp	r3, #0
 8008460:	d008      	beq.n	8008474 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008466:	2b00      	cmp	r3, #0
 8008468:	d01c      	beq.n	80084a4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	4798      	blx	r3
    }
    return;
 8008472:	e017      	b.n	80084a4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800847c:	2b00      	cmp	r3, #0
 800847e:	d012      	beq.n	80084a6 <HAL_UART_IRQHandler+0x59e>
 8008480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00c      	beq.n	80084a6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fc71 	bl	8008d74 <UART_EndTransmit_IT>
    return;
 8008492:	e008      	b.n	80084a6 <HAL_UART_IRQHandler+0x59e>
      return;
 8008494:	bf00      	nop
 8008496:	e006      	b.n	80084a6 <HAL_UART_IRQHandler+0x59e>
    return;
 8008498:	bf00      	nop
 800849a:	e004      	b.n	80084a6 <HAL_UART_IRQHandler+0x59e>
      return;
 800849c:	bf00      	nop
 800849e:	e002      	b.n	80084a6 <HAL_UART_IRQHandler+0x59e>
      return;
 80084a0:	bf00      	nop
 80084a2:	e000      	b.n	80084a6 <HAL_UART_IRQHandler+0x59e>
    return;
 80084a4:	bf00      	nop
  }

}
 80084a6:	37e8      	adds	r7, #232	@ 0xe8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80084f4:	2300      	movs	r3, #0
 80084f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	689a      	ldr	r2, [r3, #8]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	431a      	orrs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	695b      	ldr	r3, [r3, #20]
 8008506:	431a      	orrs	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	4313      	orrs	r3, r2
 800850e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4ba6      	ldr	r3, [pc, #664]	@ (80087b0 <UART_SetConfig+0x2c4>)
 8008518:	4013      	ands	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6812      	ldr	r2, [r2, #0]
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	430b      	orrs	r3, r1
 8008522:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	68da      	ldr	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a94      	ldr	r2, [pc, #592]	@ (80087b4 <UART_SetConfig+0x2c8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d120      	bne.n	80085aa <UART_SetConfig+0xbe>
 8008568:	4b93      	ldr	r3, [pc, #588]	@ (80087b8 <UART_SetConfig+0x2cc>)
 800856a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b03      	cmp	r3, #3
 8008574:	d816      	bhi.n	80085a4 <UART_SetConfig+0xb8>
 8008576:	a201      	add	r2, pc, #4	@ (adr r2, 800857c <UART_SetConfig+0x90>)
 8008578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857c:	0800858d 	.word	0x0800858d
 8008580:	08008599 	.word	0x08008599
 8008584:	08008593 	.word	0x08008593
 8008588:	0800859f 	.word	0x0800859f
 800858c:	2301      	movs	r3, #1
 800858e:	77fb      	strb	r3, [r7, #31]
 8008590:	e150      	b.n	8008834 <UART_SetConfig+0x348>
 8008592:	2302      	movs	r3, #2
 8008594:	77fb      	strb	r3, [r7, #31]
 8008596:	e14d      	b.n	8008834 <UART_SetConfig+0x348>
 8008598:	2304      	movs	r3, #4
 800859a:	77fb      	strb	r3, [r7, #31]
 800859c:	e14a      	b.n	8008834 <UART_SetConfig+0x348>
 800859e:	2308      	movs	r3, #8
 80085a0:	77fb      	strb	r3, [r7, #31]
 80085a2:	e147      	b.n	8008834 <UART_SetConfig+0x348>
 80085a4:	2310      	movs	r3, #16
 80085a6:	77fb      	strb	r3, [r7, #31]
 80085a8:	e144      	b.n	8008834 <UART_SetConfig+0x348>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a83      	ldr	r2, [pc, #524]	@ (80087bc <UART_SetConfig+0x2d0>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d132      	bne.n	800861a <UART_SetConfig+0x12e>
 80085b4:	4b80      	ldr	r3, [pc, #512]	@ (80087b8 <UART_SetConfig+0x2cc>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ba:	f003 030c 	and.w	r3, r3, #12
 80085be:	2b0c      	cmp	r3, #12
 80085c0:	d828      	bhi.n	8008614 <UART_SetConfig+0x128>
 80085c2:	a201      	add	r2, pc, #4	@ (adr r2, 80085c8 <UART_SetConfig+0xdc>)
 80085c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c8:	080085fd 	.word	0x080085fd
 80085cc:	08008615 	.word	0x08008615
 80085d0:	08008615 	.word	0x08008615
 80085d4:	08008615 	.word	0x08008615
 80085d8:	08008609 	.word	0x08008609
 80085dc:	08008615 	.word	0x08008615
 80085e0:	08008615 	.word	0x08008615
 80085e4:	08008615 	.word	0x08008615
 80085e8:	08008603 	.word	0x08008603
 80085ec:	08008615 	.word	0x08008615
 80085f0:	08008615 	.word	0x08008615
 80085f4:	08008615 	.word	0x08008615
 80085f8:	0800860f 	.word	0x0800860f
 80085fc:	2300      	movs	r3, #0
 80085fe:	77fb      	strb	r3, [r7, #31]
 8008600:	e118      	b.n	8008834 <UART_SetConfig+0x348>
 8008602:	2302      	movs	r3, #2
 8008604:	77fb      	strb	r3, [r7, #31]
 8008606:	e115      	b.n	8008834 <UART_SetConfig+0x348>
 8008608:	2304      	movs	r3, #4
 800860a:	77fb      	strb	r3, [r7, #31]
 800860c:	e112      	b.n	8008834 <UART_SetConfig+0x348>
 800860e:	2308      	movs	r3, #8
 8008610:	77fb      	strb	r3, [r7, #31]
 8008612:	e10f      	b.n	8008834 <UART_SetConfig+0x348>
 8008614:	2310      	movs	r3, #16
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e10c      	b.n	8008834 <UART_SetConfig+0x348>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a68      	ldr	r2, [pc, #416]	@ (80087c0 <UART_SetConfig+0x2d4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d120      	bne.n	8008666 <UART_SetConfig+0x17a>
 8008624:	4b64      	ldr	r3, [pc, #400]	@ (80087b8 <UART_SetConfig+0x2cc>)
 8008626:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800862a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800862e:	2b30      	cmp	r3, #48	@ 0x30
 8008630:	d013      	beq.n	800865a <UART_SetConfig+0x16e>
 8008632:	2b30      	cmp	r3, #48	@ 0x30
 8008634:	d814      	bhi.n	8008660 <UART_SetConfig+0x174>
 8008636:	2b20      	cmp	r3, #32
 8008638:	d009      	beq.n	800864e <UART_SetConfig+0x162>
 800863a:	2b20      	cmp	r3, #32
 800863c:	d810      	bhi.n	8008660 <UART_SetConfig+0x174>
 800863e:	2b00      	cmp	r3, #0
 8008640:	d002      	beq.n	8008648 <UART_SetConfig+0x15c>
 8008642:	2b10      	cmp	r3, #16
 8008644:	d006      	beq.n	8008654 <UART_SetConfig+0x168>
 8008646:	e00b      	b.n	8008660 <UART_SetConfig+0x174>
 8008648:	2300      	movs	r3, #0
 800864a:	77fb      	strb	r3, [r7, #31]
 800864c:	e0f2      	b.n	8008834 <UART_SetConfig+0x348>
 800864e:	2302      	movs	r3, #2
 8008650:	77fb      	strb	r3, [r7, #31]
 8008652:	e0ef      	b.n	8008834 <UART_SetConfig+0x348>
 8008654:	2304      	movs	r3, #4
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e0ec      	b.n	8008834 <UART_SetConfig+0x348>
 800865a:	2308      	movs	r3, #8
 800865c:	77fb      	strb	r3, [r7, #31]
 800865e:	e0e9      	b.n	8008834 <UART_SetConfig+0x348>
 8008660:	2310      	movs	r3, #16
 8008662:	77fb      	strb	r3, [r7, #31]
 8008664:	e0e6      	b.n	8008834 <UART_SetConfig+0x348>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a56      	ldr	r2, [pc, #344]	@ (80087c4 <UART_SetConfig+0x2d8>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d120      	bne.n	80086b2 <UART_SetConfig+0x1c6>
 8008670:	4b51      	ldr	r3, [pc, #324]	@ (80087b8 <UART_SetConfig+0x2cc>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008676:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800867a:	2bc0      	cmp	r3, #192	@ 0xc0
 800867c:	d013      	beq.n	80086a6 <UART_SetConfig+0x1ba>
 800867e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008680:	d814      	bhi.n	80086ac <UART_SetConfig+0x1c0>
 8008682:	2b80      	cmp	r3, #128	@ 0x80
 8008684:	d009      	beq.n	800869a <UART_SetConfig+0x1ae>
 8008686:	2b80      	cmp	r3, #128	@ 0x80
 8008688:	d810      	bhi.n	80086ac <UART_SetConfig+0x1c0>
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <UART_SetConfig+0x1a8>
 800868e:	2b40      	cmp	r3, #64	@ 0x40
 8008690:	d006      	beq.n	80086a0 <UART_SetConfig+0x1b4>
 8008692:	e00b      	b.n	80086ac <UART_SetConfig+0x1c0>
 8008694:	2300      	movs	r3, #0
 8008696:	77fb      	strb	r3, [r7, #31]
 8008698:	e0cc      	b.n	8008834 <UART_SetConfig+0x348>
 800869a:	2302      	movs	r3, #2
 800869c:	77fb      	strb	r3, [r7, #31]
 800869e:	e0c9      	b.n	8008834 <UART_SetConfig+0x348>
 80086a0:	2304      	movs	r3, #4
 80086a2:	77fb      	strb	r3, [r7, #31]
 80086a4:	e0c6      	b.n	8008834 <UART_SetConfig+0x348>
 80086a6:	2308      	movs	r3, #8
 80086a8:	77fb      	strb	r3, [r7, #31]
 80086aa:	e0c3      	b.n	8008834 <UART_SetConfig+0x348>
 80086ac:	2310      	movs	r3, #16
 80086ae:	77fb      	strb	r3, [r7, #31]
 80086b0:	e0c0      	b.n	8008834 <UART_SetConfig+0x348>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a44      	ldr	r2, [pc, #272]	@ (80087c8 <UART_SetConfig+0x2dc>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d125      	bne.n	8008708 <UART_SetConfig+0x21c>
 80086bc:	4b3e      	ldr	r3, [pc, #248]	@ (80087b8 <UART_SetConfig+0x2cc>)
 80086be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086ca:	d017      	beq.n	80086fc <UART_SetConfig+0x210>
 80086cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086d0:	d817      	bhi.n	8008702 <UART_SetConfig+0x216>
 80086d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d6:	d00b      	beq.n	80086f0 <UART_SetConfig+0x204>
 80086d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086dc:	d811      	bhi.n	8008702 <UART_SetConfig+0x216>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <UART_SetConfig+0x1fe>
 80086e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086e6:	d006      	beq.n	80086f6 <UART_SetConfig+0x20a>
 80086e8:	e00b      	b.n	8008702 <UART_SetConfig+0x216>
 80086ea:	2300      	movs	r3, #0
 80086ec:	77fb      	strb	r3, [r7, #31]
 80086ee:	e0a1      	b.n	8008834 <UART_SetConfig+0x348>
 80086f0:	2302      	movs	r3, #2
 80086f2:	77fb      	strb	r3, [r7, #31]
 80086f4:	e09e      	b.n	8008834 <UART_SetConfig+0x348>
 80086f6:	2304      	movs	r3, #4
 80086f8:	77fb      	strb	r3, [r7, #31]
 80086fa:	e09b      	b.n	8008834 <UART_SetConfig+0x348>
 80086fc:	2308      	movs	r3, #8
 80086fe:	77fb      	strb	r3, [r7, #31]
 8008700:	e098      	b.n	8008834 <UART_SetConfig+0x348>
 8008702:	2310      	movs	r3, #16
 8008704:	77fb      	strb	r3, [r7, #31]
 8008706:	e095      	b.n	8008834 <UART_SetConfig+0x348>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a2f      	ldr	r2, [pc, #188]	@ (80087cc <UART_SetConfig+0x2e0>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d125      	bne.n	800875e <UART_SetConfig+0x272>
 8008712:	4b29      	ldr	r3, [pc, #164]	@ (80087b8 <UART_SetConfig+0x2cc>)
 8008714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008718:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800871c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008720:	d017      	beq.n	8008752 <UART_SetConfig+0x266>
 8008722:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008726:	d817      	bhi.n	8008758 <UART_SetConfig+0x26c>
 8008728:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800872c:	d00b      	beq.n	8008746 <UART_SetConfig+0x25a>
 800872e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008732:	d811      	bhi.n	8008758 <UART_SetConfig+0x26c>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <UART_SetConfig+0x254>
 8008738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800873c:	d006      	beq.n	800874c <UART_SetConfig+0x260>
 800873e:	e00b      	b.n	8008758 <UART_SetConfig+0x26c>
 8008740:	2301      	movs	r3, #1
 8008742:	77fb      	strb	r3, [r7, #31]
 8008744:	e076      	b.n	8008834 <UART_SetConfig+0x348>
 8008746:	2302      	movs	r3, #2
 8008748:	77fb      	strb	r3, [r7, #31]
 800874a:	e073      	b.n	8008834 <UART_SetConfig+0x348>
 800874c:	2304      	movs	r3, #4
 800874e:	77fb      	strb	r3, [r7, #31]
 8008750:	e070      	b.n	8008834 <UART_SetConfig+0x348>
 8008752:	2308      	movs	r3, #8
 8008754:	77fb      	strb	r3, [r7, #31]
 8008756:	e06d      	b.n	8008834 <UART_SetConfig+0x348>
 8008758:	2310      	movs	r3, #16
 800875a:	77fb      	strb	r3, [r7, #31]
 800875c:	e06a      	b.n	8008834 <UART_SetConfig+0x348>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a1b      	ldr	r2, [pc, #108]	@ (80087d0 <UART_SetConfig+0x2e4>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d138      	bne.n	80087da <UART_SetConfig+0x2ee>
 8008768:	4b13      	ldr	r3, [pc, #76]	@ (80087b8 <UART_SetConfig+0x2cc>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008776:	d017      	beq.n	80087a8 <UART_SetConfig+0x2bc>
 8008778:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800877c:	d82a      	bhi.n	80087d4 <UART_SetConfig+0x2e8>
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008782:	d00b      	beq.n	800879c <UART_SetConfig+0x2b0>
 8008784:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008788:	d824      	bhi.n	80087d4 <UART_SetConfig+0x2e8>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <UART_SetConfig+0x2aa>
 800878e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008792:	d006      	beq.n	80087a2 <UART_SetConfig+0x2b6>
 8008794:	e01e      	b.n	80087d4 <UART_SetConfig+0x2e8>
 8008796:	2300      	movs	r3, #0
 8008798:	77fb      	strb	r3, [r7, #31]
 800879a:	e04b      	b.n	8008834 <UART_SetConfig+0x348>
 800879c:	2302      	movs	r3, #2
 800879e:	77fb      	strb	r3, [r7, #31]
 80087a0:	e048      	b.n	8008834 <UART_SetConfig+0x348>
 80087a2:	2304      	movs	r3, #4
 80087a4:	77fb      	strb	r3, [r7, #31]
 80087a6:	e045      	b.n	8008834 <UART_SetConfig+0x348>
 80087a8:	2308      	movs	r3, #8
 80087aa:	77fb      	strb	r3, [r7, #31]
 80087ac:	e042      	b.n	8008834 <UART_SetConfig+0x348>
 80087ae:	bf00      	nop
 80087b0:	efff69f3 	.word	0xefff69f3
 80087b4:	40011000 	.word	0x40011000
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40004400 	.word	0x40004400
 80087c0:	40004800 	.word	0x40004800
 80087c4:	40004c00 	.word	0x40004c00
 80087c8:	40005000 	.word	0x40005000
 80087cc:	40011400 	.word	0x40011400
 80087d0:	40007800 	.word	0x40007800
 80087d4:	2310      	movs	r3, #16
 80087d6:	77fb      	strb	r3, [r7, #31]
 80087d8:	e02c      	b.n	8008834 <UART_SetConfig+0x348>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a72      	ldr	r2, [pc, #456]	@ (80089a8 <UART_SetConfig+0x4bc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d125      	bne.n	8008830 <UART_SetConfig+0x344>
 80087e4:	4b71      	ldr	r3, [pc, #452]	@ (80089ac <UART_SetConfig+0x4c0>)
 80087e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80087ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80087f2:	d017      	beq.n	8008824 <UART_SetConfig+0x338>
 80087f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80087f8:	d817      	bhi.n	800882a <UART_SetConfig+0x33e>
 80087fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087fe:	d00b      	beq.n	8008818 <UART_SetConfig+0x32c>
 8008800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008804:	d811      	bhi.n	800882a <UART_SetConfig+0x33e>
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <UART_SetConfig+0x326>
 800880a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800880e:	d006      	beq.n	800881e <UART_SetConfig+0x332>
 8008810:	e00b      	b.n	800882a <UART_SetConfig+0x33e>
 8008812:	2300      	movs	r3, #0
 8008814:	77fb      	strb	r3, [r7, #31]
 8008816:	e00d      	b.n	8008834 <UART_SetConfig+0x348>
 8008818:	2302      	movs	r3, #2
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e00a      	b.n	8008834 <UART_SetConfig+0x348>
 800881e:	2304      	movs	r3, #4
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e007      	b.n	8008834 <UART_SetConfig+0x348>
 8008824:	2308      	movs	r3, #8
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e004      	b.n	8008834 <UART_SetConfig+0x348>
 800882a:	2310      	movs	r3, #16
 800882c:	77fb      	strb	r3, [r7, #31]
 800882e:	e001      	b.n	8008834 <UART_SetConfig+0x348>
 8008830:	2310      	movs	r3, #16
 8008832:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800883c:	d15b      	bne.n	80088f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800883e:	7ffb      	ldrb	r3, [r7, #31]
 8008840:	2b08      	cmp	r3, #8
 8008842:	d828      	bhi.n	8008896 <UART_SetConfig+0x3aa>
 8008844:	a201      	add	r2, pc, #4	@ (adr r2, 800884c <UART_SetConfig+0x360>)
 8008846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884a:	bf00      	nop
 800884c:	08008871 	.word	0x08008871
 8008850:	08008879 	.word	0x08008879
 8008854:	08008881 	.word	0x08008881
 8008858:	08008897 	.word	0x08008897
 800885c:	08008887 	.word	0x08008887
 8008860:	08008897 	.word	0x08008897
 8008864:	08008897 	.word	0x08008897
 8008868:	08008897 	.word	0x08008897
 800886c:	0800888f 	.word	0x0800888f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008870:	f7fc fe88 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 8008874:	61b8      	str	r0, [r7, #24]
        break;
 8008876:	e013      	b.n	80088a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008878:	f7fc fe98 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 800887c:	61b8      	str	r0, [r7, #24]
        break;
 800887e:	e00f      	b.n	80088a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008880:	4b4b      	ldr	r3, [pc, #300]	@ (80089b0 <UART_SetConfig+0x4c4>)
 8008882:	61bb      	str	r3, [r7, #24]
        break;
 8008884:	e00c      	b.n	80088a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008886:	f7fc fd6b 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800888a:	61b8      	str	r0, [r7, #24]
        break;
 800888c:	e008      	b.n	80088a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008892:	61bb      	str	r3, [r7, #24]
        break;
 8008894:	e004      	b.n	80088a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008896:	2300      	movs	r3, #0
 8008898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	77bb      	strb	r3, [r7, #30]
        break;
 800889e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d074      	beq.n	8008990 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	005a      	lsls	r2, r3, #1
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	085b      	lsrs	r3, r3, #1
 80088b0:	441a      	add	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b0f      	cmp	r3, #15
 80088c0:	d916      	bls.n	80088f0 <UART_SetConfig+0x404>
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088c8:	d212      	bcs.n	80088f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	f023 030f 	bic.w	r3, r3, #15
 80088d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	085b      	lsrs	r3, r3, #1
 80088d8:	b29b      	uxth	r3, r3
 80088da:	f003 0307 	and.w	r3, r3, #7
 80088de:	b29a      	uxth	r2, r3
 80088e0:	89fb      	ldrh	r3, [r7, #14]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	89fa      	ldrh	r2, [r7, #14]
 80088ec:	60da      	str	r2, [r3, #12]
 80088ee:	e04f      	b.n	8008990 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	77bb      	strb	r3, [r7, #30]
 80088f4:	e04c      	b.n	8008990 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088f6:	7ffb      	ldrb	r3, [r7, #31]
 80088f8:	2b08      	cmp	r3, #8
 80088fa:	d828      	bhi.n	800894e <UART_SetConfig+0x462>
 80088fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008904 <UART_SetConfig+0x418>)
 80088fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008902:	bf00      	nop
 8008904:	08008929 	.word	0x08008929
 8008908:	08008931 	.word	0x08008931
 800890c:	08008939 	.word	0x08008939
 8008910:	0800894f 	.word	0x0800894f
 8008914:	0800893f 	.word	0x0800893f
 8008918:	0800894f 	.word	0x0800894f
 800891c:	0800894f 	.word	0x0800894f
 8008920:	0800894f 	.word	0x0800894f
 8008924:	08008947 	.word	0x08008947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008928:	f7fc fe2c 	bl	8005584 <HAL_RCC_GetPCLK1Freq>
 800892c:	61b8      	str	r0, [r7, #24]
        break;
 800892e:	e013      	b.n	8008958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008930:	f7fc fe3c 	bl	80055ac <HAL_RCC_GetPCLK2Freq>
 8008934:	61b8      	str	r0, [r7, #24]
        break;
 8008936:	e00f      	b.n	8008958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008938:	4b1d      	ldr	r3, [pc, #116]	@ (80089b0 <UART_SetConfig+0x4c4>)
 800893a:	61bb      	str	r3, [r7, #24]
        break;
 800893c:	e00c      	b.n	8008958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800893e:	f7fc fd0f 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8008942:	61b8      	str	r0, [r7, #24]
        break;
 8008944:	e008      	b.n	8008958 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008946:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800894a:	61bb      	str	r3, [r7, #24]
        break;
 800894c:	e004      	b.n	8008958 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	77bb      	strb	r3, [r7, #30]
        break;
 8008956:	bf00      	nop
    }

    if (pclk != 0U)
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d018      	beq.n	8008990 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	085a      	lsrs	r2, r3, #1
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	441a      	add	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008970:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	2b0f      	cmp	r3, #15
 8008976:	d909      	bls.n	800898c <UART_SetConfig+0x4a0>
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800897e:	d205      	bcs.n	800898c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	b29a      	uxth	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	60da      	str	r2, [r3, #12]
 800898a:	e001      	b.n	8008990 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800899c:	7fbb      	ldrb	r3, [r7, #30]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	40007c00 	.word	0x40007c00
 80089ac:	40023800 	.word	0x40023800
 80089b0:	00f42400 	.word	0x00f42400

080089b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c0:	f003 0308 	and.w	r3, r3, #8
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00a      	beq.n	80089de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e2:	f003 0301 	and.w	r3, r3, #1
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d00a      	beq.n	8008a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	430a      	orrs	r2, r1
 8008a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a26:	f003 0304 	and.w	r3, r3, #4
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00a      	beq.n	8008a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	430a      	orrs	r2, r1
 8008a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00a      	beq.n	8008a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d01a      	beq.n	8008aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ab2:	d10a      	bne.n	8008aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	605a      	str	r2, [r3, #4]
  }
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b08c      	sub	sp, #48	@ 0x30
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b08:	f7fa fbe6 	bl	80032d8 <HAL_GetTick>
 8008b0c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0308 	and.w	r3, r3, #8
 8008b18:	2b08      	cmp	r3, #8
 8008b1a:	d12e      	bne.n	8008b7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b24:	2200      	movs	r2, #0
 8008b26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f83b 	bl	8008ba6 <UART_WaitOnFlagUntilTimeout>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d021      	beq.n	8008b7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b4a:	623b      	str	r3, [r7, #32]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	461a      	mov	r2, r3
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	61fb      	str	r3, [r7, #28]
 8008b56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b58:	69b9      	ldr	r1, [r7, #24]
 8008b5a:	69fa      	ldr	r2, [r7, #28]
 8008b5c:	e841 2300 	strex	r3, r2, [r1]
 8008b60:	617b      	str	r3, [r7, #20]
   return(result);
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e6      	bne.n	8008b36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2200      	movs	r2, #0
 8008b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e011      	b.n	8008b9e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2220      	movs	r2, #32
 8008b84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3728      	adds	r7, #40	@ 0x28
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	60f8      	str	r0, [r7, #12]
 8008bae:	60b9      	str	r1, [r7, #8]
 8008bb0:	603b      	str	r3, [r7, #0]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb6:	e04f      	b.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bbe:	d04b      	beq.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bc0:	f7fa fb8a 	bl	80032d8 <HAL_GetTick>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	69ba      	ldr	r2, [r7, #24]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d302      	bcc.n	8008bd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e04e      	b.n	8008c78 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d037      	beq.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2b80      	cmp	r3, #128	@ 0x80
 8008bec:	d034      	beq.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b40      	cmp	r3, #64	@ 0x40
 8008bf2:	d031      	beq.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	69db      	ldr	r3, [r3, #28]
 8008bfa:	f003 0308 	and.w	r3, r3, #8
 8008bfe:	2b08      	cmp	r3, #8
 8008c00:	d110      	bne.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2208      	movs	r2, #8
 8008c08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 f838 	bl	8008c80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2208      	movs	r2, #8
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e029      	b.n	8008c78 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	69db      	ldr	r3, [r3, #28]
 8008c2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c32:	d111      	bne.n	8008c58 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f81e 	bl	8008c80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e00f      	b.n	8008c78 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69da      	ldr	r2, [r3, #28]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4013      	ands	r3, r2
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	bf0c      	ite	eq
 8008c68:	2301      	moveq	r3, #1
 8008c6a:	2300      	movne	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d0a0      	beq.n	8008bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b095      	sub	sp, #84	@ 0x54
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c90:	e853 3f00 	ldrex	r3, [r3]
 8008c94:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ca8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cae:	e841 2300 	strex	r3, r2, [r1]
 8008cb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d1e6      	bne.n	8008c88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3308      	adds	r3, #8
 8008cc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6a3b      	ldr	r3, [r7, #32]
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	f023 0301 	bic.w	r3, r3, #1
 8008cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3308      	adds	r3, #8
 8008cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cda:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ce0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ce2:	e841 2300 	strex	r3, r2, [r1]
 8008ce6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1e5      	bne.n	8008cba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d118      	bne.n	8008d28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	e853 3f00 	ldrex	r3, [r3]
 8008d02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	f023 0310 	bic.w	r3, r3, #16
 8008d0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	461a      	mov	r2, r3
 8008d12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d14:	61bb      	str	r3, [r7, #24]
 8008d16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d18:	6979      	ldr	r1, [r7, #20]
 8008d1a:	69ba      	ldr	r2, [r7, #24]
 8008d1c:	e841 2300 	strex	r3, r2, [r1]
 8008d20:	613b      	str	r3, [r7, #16]
   return(result);
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1e6      	bne.n	8008cf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2220      	movs	r2, #32
 8008d2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008d3c:	bf00      	nop
 8008d3e:	3754      	adds	r7, #84	@ 0x54
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f7ff fbaa 	bl	80084c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d6c:	bf00      	nop
 8008d6e:	3710      	adds	r7, #16
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b088      	sub	sp, #32
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	e853 3f00 	ldrex	r3, [r3]
 8008d88:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d90:	61fb      	str	r3, [r7, #28]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9e:	6979      	ldr	r1, [r7, #20]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	e841 2300 	strex	r3, r2, [r1]
 8008da6:	613b      	str	r3, [r7, #16]
   return(result);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1e6      	bne.n	8008d7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2220      	movs	r2, #32
 8008db2:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fb76 	bl	80084ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3720      	adds	r7, #32
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dc8:	b084      	sub	sp, #16
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b084      	sub	sp, #16
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	f107 001c 	add.w	r0, r7, #28
 8008dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dda:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d121      	bne.n	8008e26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	4b21      	ldr	r3, [pc, #132]	@ (8008e78 <USB_CoreInit+0xb0>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d105      	bne.n	8008e1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fa92 	bl	8009344 <USB_CoreReset>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73fb      	strb	r3, [r7, #15]
 8008e24:	e010      	b.n	8008e48 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 fa86 	bl	8009344 <USB_CoreReset>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8008e48:	7fbb      	ldrb	r3, [r7, #30]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d10b      	bne.n	8008e66 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f043 0206 	orr.w	r2, r3, #6
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f043 0220 	orr.w	r2, r3, #32
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3710      	adds	r7, #16
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e72:	b004      	add	sp, #16
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	ffbdffbf 	.word	0xffbdffbf

08008e7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	f023 0201 	bic.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008e90:	2300      	movs	r3, #0
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	370c      	adds	r7, #12
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr

08008e9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	6078      	str	r0, [r7, #4]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d115      	bne.n	8008eec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008ecc:	200a      	movs	r0, #10
 8008ece:	f7fa fa0f 	bl	80032f0 <HAL_Delay>
      ms += 10U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	330a      	adds	r3, #10
 8008ed6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fa25 	bl	8009328 <USB_GetMode>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d01e      	beq.n	8008f22 <USB_SetCurrentMode+0x84>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2bc7      	cmp	r3, #199	@ 0xc7
 8008ee8:	d9f0      	bls.n	8008ecc <USB_SetCurrentMode+0x2e>
 8008eea:	e01a      	b.n	8008f22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d115      	bne.n	8008f1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008efe:	200a      	movs	r0, #10
 8008f00:	f7fa f9f6 	bl	80032f0 <HAL_Delay>
      ms += 10U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	330a      	adds	r3, #10
 8008f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 fa0c 	bl	8009328 <USB_GetMode>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d005      	beq.n	8008f22 <USB_SetCurrentMode+0x84>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	2bc7      	cmp	r3, #199	@ 0xc7
 8008f1a:	d9f0      	bls.n	8008efe <USB_SetCurrentMode+0x60>
 8008f1c:	e001      	b.n	8008f22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e005      	b.n	8008f2e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2bc8      	cmp	r3, #200	@ 0xc8
 8008f26:	d101      	bne.n	8008f2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f28:	2301      	movs	r3, #1
 8008f2a:	e000      	b.n	8008f2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f38:	b084      	sub	sp, #16
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b086      	sub	sp, #24
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
 8008f42:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008f52:	2300      	movs	r3, #0
 8008f54:	613b      	str	r3, [r7, #16]
 8008f56:	e009      	b.n	8008f6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	3340      	adds	r3, #64	@ 0x40
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	2200      	movs	r2, #0
 8008f64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	2b0e      	cmp	r3, #14
 8008f70:	d9f2      	bls.n	8008f58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008f72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d11c      	bne.n	8008fb4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f88:	f043 0302 	orr.w	r3, r3, #2
 8008f8c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f92:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	601a      	str	r2, [r3, #0]
 8008fb2:	e005      	b.n	8008fc0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fcc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d10d      	bne.n	8008ff0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d104      	bne.n	8008fe6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f968 	bl	80092b4 <USB_SetDevSpeed>
 8008fe4:	e008      	b.n	8008ff8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f963 	bl	80092b4 <USB_SetDevSpeed>
 8008fee:	e003      	b.n	8008ff8 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ff0:	2103      	movs	r1, #3
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f95e 	bl	80092b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ff8:	2110      	movs	r1, #16
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8fa 	bl	80091f4 <USB_FlushTxFifo>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f924 	bl	8009258 <USB_FlushRxFifo>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d001      	beq.n	800901a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009020:	461a      	mov	r2, r3
 8009022:	2300      	movs	r3, #0
 8009024:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800902c:	461a      	mov	r2, r3
 800902e:	2300      	movs	r3, #0
 8009030:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009038:	461a      	mov	r2, r3
 800903a:	2300      	movs	r3, #0
 800903c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800903e:	2300      	movs	r3, #0
 8009040:	613b      	str	r3, [r7, #16]
 8009042:	e043      	b.n	80090cc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009056:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800905a:	d118      	bne.n	800908e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	015a      	lsls	r2, r3, #5
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4413      	add	r3, r2
 800906a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800906e:	461a      	mov	r2, r3
 8009070:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e013      	b.n	80090a0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009084:	461a      	mov	r2, r3
 8009086:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	e008      	b.n	80090a0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	015a      	lsls	r2, r3, #5
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	4413      	add	r3, r2
 8009096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800909a:	461a      	mov	r2, r3
 800909c:	2300      	movs	r3, #0
 800909e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090ac:	461a      	mov	r2, r3
 80090ae:	2300      	movs	r3, #0
 80090b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	015a      	lsls	r2, r3, #5
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	4413      	add	r3, r2
 80090ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090be:	461a      	mov	r2, r3
 80090c0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80090c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	3301      	adds	r3, #1
 80090ca:	613b      	str	r3, [r7, #16]
 80090cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090d0:	461a      	mov	r2, r3
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d3b5      	bcc.n	8009044 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d8:	2300      	movs	r3, #0
 80090da:	613b      	str	r3, [r7, #16]
 80090dc:	e043      	b.n	8009166 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80090f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090f4:	d118      	bne.n	8009128 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	015a      	lsls	r2, r3, #5
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	4413      	add	r3, r2
 8009104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009108:	461a      	mov	r2, r3
 800910a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	e013      	b.n	800913a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	4413      	add	r3, r2
 800911a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800911e:	461a      	mov	r2, r3
 8009120:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009124:	6013      	str	r3, [r2, #0]
 8009126:	e008      	b.n	800913a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009128:	693b      	ldr	r3, [r7, #16]
 800912a:	015a      	lsls	r2, r3, #5
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009134:	461a      	mov	r2, r3
 8009136:	2300      	movs	r3, #0
 8009138:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009146:	461a      	mov	r2, r3
 8009148:	2300      	movs	r3, #0
 800914a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009158:	461a      	mov	r2, r3
 800915a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800915e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	3301      	adds	r3, #1
 8009164:	613b      	str	r3, [r7, #16]
 8009166:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800916a:	461a      	mov	r2, r3
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4293      	cmp	r3, r2
 8009170:	d3b5      	bcc.n	80090de <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009184:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009192:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009194:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009198:	2b00      	cmp	r3, #0
 800919a:	d105      	bne.n	80091a8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	f043 0210 	orr.w	r2, r3, #16
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	4b0f      	ldr	r3, [pc, #60]	@ (80091ec <USB_DevInit+0x2b4>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80091b4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	f043 0208 	orr.w	r2, r3, #8
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80091c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d105      	bne.n	80091dc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	699a      	ldr	r2, [r3, #24]
 80091d4:	4b06      	ldr	r3, [pc, #24]	@ (80091f0 <USB_DevInit+0x2b8>)
 80091d6:	4313      	orrs	r3, r2
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80091dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80091e8:	b004      	add	sp, #16
 80091ea:	4770      	bx	lr
 80091ec:	803c3800 	.word	0x803c3800
 80091f0:	40000004 	.word	0x40000004

080091f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	3301      	adds	r3, #1
 8009206:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800920e:	d901      	bls.n	8009214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009210:	2303      	movs	r3, #3
 8009212:	e01b      	b.n	800924c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	daf2      	bge.n	8009202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800921c:	2300      	movs	r3, #0
 800921e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	019b      	lsls	r3, r3, #6
 8009224:	f043 0220 	orr.w	r2, r3, #32
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009238:	d901      	bls.n	800923e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e006      	b.n	800924c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	691b      	ldr	r3, [r3, #16]
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b20      	cmp	r3, #32
 8009248:	d0f0      	beq.n	800922c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009260:	2300      	movs	r3, #0
 8009262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009270:	d901      	bls.n	8009276 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e018      	b.n	80092a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	daf2      	bge.n	8009264 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2210      	movs	r2, #16
 8009286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	3301      	adds	r3, #1
 800928c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009294:	d901      	bls.n	800929a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e006      	b.n	80092a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d0f0      	beq.n	8009288 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3714      	adds	r7, #20
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	460b      	mov	r3, r1
 80092be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	68f9      	ldr	r1, [r7, #12]
 80092d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092d4:	4313      	orrs	r3, r2
 80092d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3714      	adds	r7, #20
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr

080092e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092e6:	b480      	push	{r7}
 80092e8:	b085      	sub	sp, #20
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009314:	f043 0302 	orr.w	r3, r3, #2
 8009318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	f003 0301 	and.w	r3, r3, #1
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800935c:	d901      	bls.n	8009362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800935e:	2303      	movs	r3, #3
 8009360:	e01b      	b.n	800939a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	daf2      	bge.n	8009350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	f043 0201 	orr.w	r2, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3301      	adds	r3, #1
 800937e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009386:	d901      	bls.n	800938c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e006      	b.n	800939a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b01      	cmp	r3, #1
 8009396:	d0f0      	beq.n	800937a <USB_CoreReset+0x36>

  return HAL_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3714      	adds	r7, #20
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
	...

080093a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80093ac:	4904      	ldr	r1, [pc, #16]	@ (80093c0 <MX_FATFS_Init+0x18>)
 80093ae:	4805      	ldr	r0, [pc, #20]	@ (80093c4 <MX_FATFS_Init+0x1c>)
 80093b0:	f003 fd5e 	bl	800ce70 <FATFS_LinkDriver>
 80093b4:	4603      	mov	r3, r0
 80093b6:	461a      	mov	r2, r3
 80093b8:	4b03      	ldr	r3, [pc, #12]	@ (80093c8 <MX_FATFS_Init+0x20>)
 80093ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80093bc:	bf00      	nop
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	200024d8 	.word	0x200024d8
 80093c4:	20000038 	.word	0x20000038
 80093c8:	200024d4 	.word	0x200024d4

080093cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80093d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b082      	sub	sp, #8
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 f9d7 	bl	800979c <USER_SPI_initialize>
 80093ee:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	4603      	mov	r3, r0
 8009400:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	4618      	mov	r0, r3
 8009406:	f000 fabd 	bl	8009984 <USER_SPI_status>
 800940a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60b9      	str	r1, [r7, #8]
 800941c:	607a      	str	r2, [r7, #4]
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	4603      	mov	r3, r0
 8009422:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 8009424:	7bf8      	ldrb	r0, [r7, #15]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	68b9      	ldr	r1, [r7, #8]
 800942c:	f000 fac0 	bl	80099b0 <USER_SPI_read>
 8009430:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009432:	4618      	mov	r0, r3
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b084      	sub	sp, #16
 800943e:	af00      	add	r7, sp, #0
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
 8009446:	4603      	mov	r3, r0
 8009448:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800944a:	7bf8      	ldrb	r0, [r7, #15]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	68b9      	ldr	r1, [r7, #8]
 8009452:	f000 fb13 	bl	8009a7c <USER_SPI_write>
 8009456:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009458:	4618      	mov	r0, r3
 800945a:	3710      	adds	r7, #16
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	603a      	str	r2, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
 800946c:	460b      	mov	r3, r1
 800946e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8009470:	79b9      	ldrb	r1, [r7, #6]
 8009472:	79fb      	ldrb	r3, [r7, #7]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	4618      	mov	r0, r3
 8009478:	f000 fb7c 	bl	8009b74 <USER_SPI_ioctl>
 800947c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800947e:	4618      	mov	r0, r3
 8009480:	3708      	adds	r7, #8
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8009490:	f7f9 ff22 	bl	80032d8 <HAL_GetTick>
 8009494:	4603      	mov	r3, r0
 8009496:	4a04      	ldr	r2, [pc, #16]	@ (80094a8 <SPI_Timer_On+0x20>)
 8009498:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800949a:	4a04      	ldr	r2, [pc, #16]	@ (80094ac <SPI_Timer_On+0x24>)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6013      	str	r3, [r2, #0]
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200024e0 	.word	0x200024e0
 80094ac:	200024e4 	.word	0x200024e4

080094b0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80094b4:	f7f9 ff10 	bl	80032d8 <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	4b06      	ldr	r3, [pc, #24]	@ (80094d4 <SPI_Timer_Status+0x24>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	1ad2      	subs	r2, r2, r3
 80094c0:	4b05      	ldr	r3, [pc, #20]	@ (80094d8 <SPI_Timer_Status+0x28>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	bf34      	ite	cc
 80094c8:	2301      	movcc	r3, #1
 80094ca:	2300      	movcs	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200024e0 	.word	0x200024e0
 80094d8:	200024e4 	.word	0x200024e4

080094dc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af02      	add	r7, sp, #8
 80094e2:	4603      	mov	r3, r0
 80094e4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80094e6:	f107 020f 	add.w	r2, r7, #15
 80094ea:	1df9      	adds	r1, r7, #7
 80094ec:	2332      	movs	r3, #50	@ 0x32
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	2301      	movs	r3, #1
 80094f2:	4804      	ldr	r0, [pc, #16]	@ (8009504 <xchg_spi+0x28>)
 80094f4:	f7fc fe7e 	bl	80061f4 <HAL_SPI_TransmitReceive>
    return rxDat;
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	20001be0 	.word	0x20001be0

08009508 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009508:	b590      	push	{r4, r7, lr}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	e00a      	b.n	800952e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	18d4      	adds	r4, r2, r3
 800951e:	20ff      	movs	r0, #255	@ 0xff
 8009520:	f7ff ffdc 	bl	80094dc <xchg_spi>
 8009524:	4603      	mov	r3, r0
 8009526:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d3f0      	bcc.n	8009518 <rcvr_spi_multi+0x10>
	}
}
 8009536:	bf00      	nop
 8009538:	bf00      	nop
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	bd90      	pop	{r4, r7, pc}

08009540 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	b29a      	uxth	r2, r3
 800954e:	f04f 33ff 	mov.w	r3, #4294967295
 8009552:	6879      	ldr	r1, [r7, #4]
 8009554:	4803      	ldr	r0, [pc, #12]	@ (8009564 <xmit_spi_multi+0x24>)
 8009556:	f7fc fcd8 	bl	8005f0a <HAL_SPI_Transmit>
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20001be0 	.word	0x20001be0

08009568 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8009570:	f7f9 feb2 	bl	80032d8 <HAL_GetTick>
 8009574:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800957a:	20ff      	movs	r0, #255	@ 0xff
 800957c:	f7ff ffae 	bl	80094dc <xchg_spi>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2bff      	cmp	r3, #255	@ 0xff
 8009588:	d007      	beq.n	800959a <wait_ready+0x32>
 800958a:	f7f9 fea5 	bl	80032d8 <HAL_GetTick>
 800958e:	4602      	mov	r2, r0
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	693a      	ldr	r2, [r7, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	d8ef      	bhi.n	800957a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
 800959c:	2bff      	cmp	r3, #255	@ 0xff
 800959e:	bf0c      	ite	eq
 80095a0:	2301      	moveq	r3, #1
 80095a2:	2300      	movne	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3718      	adds	r7, #24
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 80095b4:	2201      	movs	r2, #1
 80095b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80095ba:	4804      	ldr	r0, [pc, #16]	@ (80095cc <despiselect+0x1c>)
 80095bc:	f7fa fd0e 	bl	8003fdc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80095c0:	20ff      	movs	r0, #255	@ 0xff
 80095c2:	f7ff ff8b 	bl	80094dc <xchg_spi>

}
 80095c6:	bf00      	nop
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	40020c00 	.word	0x40020c00

080095d0 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80095d4:	2200      	movs	r2, #0
 80095d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80095da:	480a      	ldr	r0, [pc, #40]	@ (8009604 <spiselect+0x34>)
 80095dc:	f7fa fcfe 	bl	8003fdc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80095e0:	20ff      	movs	r0, #255	@ 0xff
 80095e2:	f7ff ff7b 	bl	80094dc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80095e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80095ea:	f7ff ffbd 	bl	8009568 <wait_ready>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <spiselect+0x28>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e002      	b.n	80095fe <spiselect+0x2e>

	despiselect();
 80095f8:	f7ff ffda 	bl	80095b0 <despiselect>
	return 0;	/* Timeout */
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	40020c00 	.word	0x40020c00

08009608 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009612:	20c8      	movs	r0, #200	@ 0xc8
 8009614:	f7ff ff38 	bl	8009488 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009618:	20ff      	movs	r0, #255	@ 0xff
 800961a:	f7ff ff5f 	bl	80094dc <xchg_spi>
 800961e:	4603      	mov	r3, r0
 8009620:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	2bff      	cmp	r3, #255	@ 0xff
 8009626:	d104      	bne.n	8009632 <rcvr_datablock+0x2a>
 8009628:	f7ff ff42 	bl	80094b0 <SPI_Timer_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1f2      	bne.n	8009618 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2bfe      	cmp	r3, #254	@ 0xfe
 8009636:	d001      	beq.n	800963c <rcvr_datablock+0x34>
 8009638:	2300      	movs	r3, #0
 800963a:	e00a      	b.n	8009652 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800963c:	6839      	ldr	r1, [r7, #0]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff ff62 	bl	8009508 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009644:	20ff      	movs	r0, #255	@ 0xff
 8009646:	f7ff ff49 	bl	80094dc <xchg_spi>
 800964a:	20ff      	movs	r0, #255	@ 0xff
 800964c:	f7ff ff46 	bl	80094dc <xchg_spi>

	return 1;						/* Function succeeded */
 8009650:	2301      	movs	r3, #1
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
 8009662:	460b      	mov	r3, r1
 8009664:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8009666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800966a:	f7ff ff7d 	bl	8009568 <wait_ready>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d101      	bne.n	8009678 <xmit_datablock+0x1e>
 8009674:	2300      	movs	r3, #0
 8009676:	e01e      	b.n	80096b6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8009678:	78fb      	ldrb	r3, [r7, #3]
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff ff2e 	bl	80094dc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	2bfd      	cmp	r3, #253	@ 0xfd
 8009684:	d016      	beq.n	80096b4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8009686:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff ff58 	bl	8009540 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8009690:	20ff      	movs	r0, #255	@ 0xff
 8009692:	f7ff ff23 	bl	80094dc <xchg_spi>
 8009696:	20ff      	movs	r0, #255	@ 0xff
 8009698:	f7ff ff20 	bl	80094dc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800969c:	20ff      	movs	r0, #255	@ 0xff
 800969e:	f7ff ff1d 	bl	80094dc <xchg_spi>
 80096a2:	4603      	mov	r3, r0
 80096a4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80096a6:	7bfb      	ldrb	r3, [r7, #15]
 80096a8:	f003 031f 	and.w	r3, r3, #31
 80096ac:	2b05      	cmp	r3, #5
 80096ae:	d001      	beq.n	80096b4 <xmit_datablock+0x5a>
 80096b0:	2300      	movs	r3, #0
 80096b2:	e000      	b.n	80096b6 <xmit_datablock+0x5c>
	}
	return 1;
 80096b4:	2301      	movs	r3, #1
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	4603      	mov	r3, r0
 80096c6:	6039      	str	r1, [r7, #0]
 80096c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 80096ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	da0e      	bge.n	80096f0 <send_cmd+0x32>
		cmd &= 0x7F;
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096d8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 80096da:	2100      	movs	r1, #0
 80096dc:	2037      	movs	r0, #55	@ 0x37
 80096de:	f7ff ffee 	bl	80096be <send_cmd>
 80096e2:	4603      	mov	r3, r0
 80096e4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d901      	bls.n	80096f0 <send_cmd+0x32>
 80096ec:	7bbb      	ldrb	r3, [r7, #14]
 80096ee:	e051      	b.n	8009794 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	2b0c      	cmp	r3, #12
 80096f4:	d008      	beq.n	8009708 <send_cmd+0x4a>
		despiselect();
 80096f6:	f7ff ff5b 	bl	80095b0 <despiselect>
		if (!spiselect()) return 0xFF;
 80096fa:	f7ff ff69 	bl	80095d0 <spiselect>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <send_cmd+0x4a>
 8009704:	23ff      	movs	r3, #255	@ 0xff
 8009706:	e045      	b.n	8009794 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800970e:	b2db      	uxtb	r3, r3
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff fee3 	bl	80094dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	0e1b      	lsrs	r3, r3, #24
 800971a:	b2db      	uxtb	r3, r3
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fedd 	bl	80094dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	0c1b      	lsrs	r3, r3, #16
 8009726:	b2db      	uxtb	r3, r3
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fed7 	bl	80094dc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	0a1b      	lsrs	r3, r3, #8
 8009732:	b2db      	uxtb	r3, r3
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fed1 	bl	80094dc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	b2db      	uxtb	r3, r3
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fecc 	bl	80094dc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009748:	79fb      	ldrb	r3, [r7, #7]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <send_cmd+0x94>
 800974e:	2395      	movs	r3, #149	@ 0x95
 8009750:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009752:	79fb      	ldrb	r3, [r7, #7]
 8009754:	2b08      	cmp	r3, #8
 8009756:	d101      	bne.n	800975c <send_cmd+0x9e>
 8009758:	2387      	movs	r3, #135	@ 0x87
 800975a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff febc 	bl	80094dc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8009764:	79fb      	ldrb	r3, [r7, #7]
 8009766:	2b0c      	cmp	r3, #12
 8009768:	d102      	bne.n	8009770 <send_cmd+0xb2>
 800976a:	20ff      	movs	r0, #255	@ 0xff
 800976c:	f7ff feb6 	bl	80094dc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8009770:	230a      	movs	r3, #10
 8009772:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8009774:	20ff      	movs	r0, #255	@ 0xff
 8009776:	f7ff feb1 	bl	80094dc <xchg_spi>
 800977a:	4603      	mov	r3, r0
 800977c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800977e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da05      	bge.n	8009792 <send_cmd+0xd4>
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	3b01      	subs	r3, #1
 800978a:	73fb      	strb	r3, [r7, #15]
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1f0      	bne.n	8009774 <send_cmd+0xb6>

	return res;							/* Return received response */
 8009792:	7bbb      	ldrb	r3, [r7, #14]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800979c:	b590      	push	{r4, r7, lr}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <USER_SPI_initialize+0x14>
 80097ac:	2301      	movs	r3, #1
 80097ae:	e0dc      	b.n	800996a <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80097b0:	4b70      	ldr	r3, [pc, #448]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d003      	beq.n	80097c6 <USER_SPI_initialize+0x2a>
 80097be:	4b6d      	ldr	r3, [pc, #436]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b2db      	uxtb	r3, r3
 80097c4:	e0d1      	b.n	800996a <USER_SPI_initialize+0x1ce>
	flag = Stat;
 80097c6:	4b6b      	ldr	r3, [pc, #428]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	461a      	mov	r2, r3
 80097ce:	4b6a      	ldr	r3, [pc, #424]	@ (8009978 <USER_SPI_initialize+0x1dc>)
 80097d0:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 80097d2:	4b6a      	ldr	r3, [pc, #424]	@ (800997c <USER_SPI_initialize+0x1e0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80097dc:	4b67      	ldr	r3, [pc, #412]	@ (800997c <USER_SPI_initialize+0x1e0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 80097e4:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80097e6:	230a      	movs	r3, #10
 80097e8:	73fb      	strb	r3, [r7, #15]
 80097ea:	e005      	b.n	80097f8 <USER_SPI_initialize+0x5c>
 80097ec:	20ff      	movs	r0, #255	@ 0xff
 80097ee:	f7ff fe75 	bl	80094dc <xchg_spi>
 80097f2:	7bfb      	ldrb	r3, [r7, #15]
 80097f4:	3b01      	subs	r3, #1
 80097f6:	73fb      	strb	r3, [r7, #15]
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d1f6      	bne.n	80097ec <USER_SPI_initialize+0x50>

	ty = 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009802:	2100      	movs	r1, #0
 8009804:	2000      	movs	r0, #0
 8009806:	f7ff ff5a 	bl	80096be <send_cmd>
 800980a:	4603      	mov	r3, r0
 800980c:	2b01      	cmp	r3, #1
 800980e:	f040 808b 	bne.w	8009928 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009812:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009816:	f7ff fe37 	bl	8009488 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800981a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800981e:	2008      	movs	r0, #8
 8009820:	f7ff ff4d 	bl	80096be <send_cmd>
 8009824:	4603      	mov	r3, r0
 8009826:	2b01      	cmp	r3, #1
 8009828:	d151      	bne.n	80098ce <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
 800982e:	e00d      	b.n	800984c <USER_SPI_initialize+0xb0>
 8009830:	7bfc      	ldrb	r4, [r7, #15]
 8009832:	20ff      	movs	r0, #255	@ 0xff
 8009834:	f7ff fe52 	bl	80094dc <xchg_spi>
 8009838:	4603      	mov	r3, r0
 800983a:	461a      	mov	r2, r3
 800983c:	f104 0310 	add.w	r3, r4, #16
 8009840:	443b      	add	r3, r7
 8009842:	f803 2c08 	strb.w	r2, [r3, #-8]
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	3301      	adds	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	2b03      	cmp	r3, #3
 8009850:	d9ee      	bls.n	8009830 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009852:	7abb      	ldrb	r3, [r7, #10]
 8009854:	2b01      	cmp	r3, #1
 8009856:	d167      	bne.n	8009928 <USER_SPI_initialize+0x18c>
 8009858:	7afb      	ldrb	r3, [r7, #11]
 800985a:	2baa      	cmp	r3, #170	@ 0xaa
 800985c:	d164      	bne.n	8009928 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800985e:	bf00      	nop
 8009860:	f7ff fe26 	bl	80094b0 <SPI_Timer_Status>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d007      	beq.n	800987a <USER_SPI_initialize+0xde>
 800986a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800986e:	20a9      	movs	r0, #169	@ 0xa9
 8009870:	f7ff ff25 	bl	80096be <send_cmd>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1f2      	bne.n	8009860 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800987a:	f7ff fe19 	bl	80094b0 <SPI_Timer_Status>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d051      	beq.n	8009928 <USER_SPI_initialize+0x18c>
 8009884:	2100      	movs	r1, #0
 8009886:	203a      	movs	r0, #58	@ 0x3a
 8009888:	f7ff ff19 	bl	80096be <send_cmd>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d14a      	bne.n	8009928 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8009892:	2300      	movs	r3, #0
 8009894:	73fb      	strb	r3, [r7, #15]
 8009896:	e00d      	b.n	80098b4 <USER_SPI_initialize+0x118>
 8009898:	7bfc      	ldrb	r4, [r7, #15]
 800989a:	20ff      	movs	r0, #255	@ 0xff
 800989c:	f7ff fe1e 	bl	80094dc <xchg_spi>
 80098a0:	4603      	mov	r3, r0
 80098a2:	461a      	mov	r2, r3
 80098a4:	f104 0310 	add.w	r3, r4, #16
 80098a8:	443b      	add	r3, r7
 80098aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	3301      	adds	r3, #1
 80098b2:	73fb      	strb	r3, [r7, #15]
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d9ee      	bls.n	8009898 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80098ba:	7a3b      	ldrb	r3, [r7, #8]
 80098bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <USER_SPI_initialize+0x12c>
 80098c4:	230c      	movs	r3, #12
 80098c6:	e000      	b.n	80098ca <USER_SPI_initialize+0x12e>
 80098c8:	2304      	movs	r3, #4
 80098ca:	737b      	strb	r3, [r7, #13]
 80098cc:	e02c      	b.n	8009928 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80098ce:	2100      	movs	r1, #0
 80098d0:	20a9      	movs	r0, #169	@ 0xa9
 80098d2:	f7ff fef4 	bl	80096be <send_cmd>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d804      	bhi.n	80098e6 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80098dc:	2302      	movs	r3, #2
 80098de:	737b      	strb	r3, [r7, #13]
 80098e0:	23a9      	movs	r3, #169	@ 0xa9
 80098e2:	73bb      	strb	r3, [r7, #14]
 80098e4:	e003      	b.n	80098ee <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80098e6:	2301      	movs	r3, #1
 80098e8:	737b      	strb	r3, [r7, #13]
 80098ea:	2301      	movs	r3, #1
 80098ec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80098ee:	bf00      	nop
 80098f0:	f7ff fdde 	bl	80094b0 <SPI_Timer_Status>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d007      	beq.n	800990a <USER_SPI_initialize+0x16e>
 80098fa:	7bbb      	ldrb	r3, [r7, #14]
 80098fc:	2100      	movs	r1, #0
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff fedd 	bl	80096be <send_cmd>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f2      	bne.n	80098f0 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800990a:	f7ff fdd1 	bl	80094b0 <SPI_Timer_Status>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <USER_SPI_initialize+0x188>
 8009914:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009918:	2010      	movs	r0, #16
 800991a:	f7ff fed0 	bl	80096be <send_cmd>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <USER_SPI_initialize+0x18c>
				ty = 0;
 8009924:	2300      	movs	r3, #0
 8009926:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8009928:	4a15      	ldr	r2, [pc, #84]	@ (8009980 <USER_SPI_initialize+0x1e4>)
 800992a:	7b7b      	ldrb	r3, [r7, #13]
 800992c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800992e:	f7ff fe3f 	bl	80095b0 <despiselect>

	if (ty) {			/* OK */
 8009932:	7b7b      	ldrb	r3, [r7, #13]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d012      	beq.n	800995e <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 8009938:	4b10      	ldr	r3, [pc, #64]	@ (800997c <USER_SPI_initialize+0x1e0>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8009942:	4b0e      	ldr	r3, [pc, #56]	@ (800997c <USER_SPI_initialize+0x1e0>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 0210 	orr.w	r2, r2, #16
 800994a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800994c:	4b09      	ldr	r3, [pc, #36]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	f023 0301 	bic.w	r3, r3, #1
 8009956:	b2da      	uxtb	r2, r3
 8009958:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 800995a:	701a      	strb	r2, [r3, #0]
 800995c:	e002      	b.n	8009964 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800995e:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 8009960:	2201      	movs	r2, #1
 8009962:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009964:	4b03      	ldr	r3, [pc, #12]	@ (8009974 <USER_SPI_initialize+0x1d8>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b2db      	uxtb	r3, r3
}
 800996a:	4618      	mov	r0, r3
 800996c:	3714      	adds	r7, #20
 800996e:	46bd      	mov	sp, r7
 8009970:	bd90      	pop	{r4, r7, pc}
 8009972:	bf00      	nop
 8009974:	2000004c 	.word	0x2000004c
 8009978:	20002418 	.word	0x20002418
 800997c:	20001be0 	.word	0x20001be0
 8009980:	200024dc 	.word	0x200024dc

08009984 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d001      	beq.n	8009998 <USER_SPI_status+0x14>
 8009994:	2301      	movs	r3, #1
 8009996:	e002      	b.n	800999e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8009998:	4b04      	ldr	r3, [pc, #16]	@ (80099ac <USER_SPI_status+0x28>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	2000004c 	.word	0x2000004c

080099b0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	4603      	mov	r3, r0
 80099be:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80099c0:	7bfb      	ldrb	r3, [r7, #15]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d102      	bne.n	80099cc <USER_SPI_read+0x1c>
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <USER_SPI_read+0x20>
 80099cc:	2304      	movs	r3, #4
 80099ce:	e04d      	b.n	8009a6c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80099d0:	4b28      	ldr	r3, [pc, #160]	@ (8009a74 <USER_SPI_read+0xc4>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d001      	beq.n	80099e2 <USER_SPI_read+0x32>
 80099de:	2303      	movs	r3, #3
 80099e0:	e044      	b.n	8009a6c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80099e2:	4b25      	ldr	r3, [pc, #148]	@ (8009a78 <USER_SPI_read+0xc8>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	f003 0308 	and.w	r3, r3, #8
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <USER_SPI_read+0x44>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	025b      	lsls	r3, r3, #9
 80099f2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d111      	bne.n	8009a1e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	2011      	movs	r0, #17
 80099fe:	f7ff fe5e 	bl	80096be <send_cmd>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d129      	bne.n	8009a5c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a0c:	68b8      	ldr	r0, [r7, #8]
 8009a0e:	f7ff fdfb 	bl	8009608 <rcvr_datablock>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d021      	beq.n	8009a5c <USER_SPI_read+0xac>
			count = 0;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	e01e      	b.n	8009a5c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	2012      	movs	r0, #18
 8009a22:	f7ff fe4c 	bl	80096be <send_cmd>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d117      	bne.n	8009a5c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009a2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009a30:	68b8      	ldr	r0, [r7, #8]
 8009a32:	f7ff fde9 	bl	8009608 <rcvr_datablock>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00a      	beq.n	8009a52 <USER_SPI_read+0xa2>
				buff += 512;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009a42:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	603b      	str	r3, [r7, #0]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1ed      	bne.n	8009a2c <USER_SPI_read+0x7c>
 8009a50:	e000      	b.n	8009a54 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8009a52:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009a54:	2100      	movs	r1, #0
 8009a56:	200c      	movs	r0, #12
 8009a58:	f7ff fe31 	bl	80096be <send_cmd>
		}
	}
	despiselect();
 8009a5c:	f7ff fda8 	bl	80095b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bf14      	ite	ne
 8009a66:	2301      	movne	r3, #1
 8009a68:	2300      	moveq	r3, #0
 8009a6a:	b2db      	uxtb	r3, r3
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}
 8009a74:	2000004c 	.word	0x2000004c
 8009a78:	200024dc 	.word	0x200024dc

08009a7c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	60b9      	str	r1, [r7, #8]
 8009a84:	607a      	str	r2, [r7, #4]
 8009a86:	603b      	str	r3, [r7, #0]
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <USER_SPI_write+0x1c>
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d101      	bne.n	8009a9c <USER_SPI_write+0x20>
 8009a98:	2304      	movs	r3, #4
 8009a9a:	e063      	b.n	8009b64 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8009a9c:	4b33      	ldr	r3, [pc, #204]	@ (8009b6c <USER_SPI_write+0xf0>)
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	f003 0301 	and.w	r3, r3, #1
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d001      	beq.n	8009aae <USER_SPI_write+0x32>
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e05a      	b.n	8009b64 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8009aae:	4b2f      	ldr	r3, [pc, #188]	@ (8009b6c <USER_SPI_write+0xf0>)
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0304 	and.w	r3, r3, #4
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <USER_SPI_write+0x44>
 8009abc:	2302      	movs	r3, #2
 8009abe:	e051      	b.n	8009b64 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8009ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8009b70 <USER_SPI_write+0xf4>)
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	f003 0308 	and.w	r3, r3, #8
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d102      	bne.n	8009ad2 <USER_SPI_write+0x56>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	025b      	lsls	r3, r3, #9
 8009ad0:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	d110      	bne.n	8009afa <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	2018      	movs	r0, #24
 8009adc:	f7ff fdef 	bl	80096be <send_cmd>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d136      	bne.n	8009b54 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009ae6:	21fe      	movs	r1, #254	@ 0xfe
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f7ff fdb6 	bl	800965a <xmit_datablock>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d02f      	beq.n	8009b54 <USER_SPI_write+0xd8>
			count = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
 8009af8:	e02c      	b.n	8009b54 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009afa:	4b1d      	ldr	r3, [pc, #116]	@ (8009b70 <USER_SPI_write+0xf4>)
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	f003 0306 	and.w	r3, r3, #6
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d003      	beq.n	8009b0e <USER_SPI_write+0x92>
 8009b06:	6839      	ldr	r1, [r7, #0]
 8009b08:	2097      	movs	r0, #151	@ 0x97
 8009b0a:	f7ff fdd8 	bl	80096be <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8009b0e:	6879      	ldr	r1, [r7, #4]
 8009b10:	2019      	movs	r0, #25
 8009b12:	f7ff fdd4 	bl	80096be <send_cmd>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d11b      	bne.n	8009b54 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009b1c:	21fc      	movs	r1, #252	@ 0xfc
 8009b1e:	68b8      	ldr	r0, [r7, #8]
 8009b20:	f7ff fd9b 	bl	800965a <xmit_datablock>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00a      	beq.n	8009b40 <USER_SPI_write+0xc4>
				buff += 512;
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8009b30:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	603b      	str	r3, [r7, #0]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1ee      	bne.n	8009b1c <USER_SPI_write+0xa0>
 8009b3e:	e000      	b.n	8009b42 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8009b40:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8009b42:	21fd      	movs	r1, #253	@ 0xfd
 8009b44:	2000      	movs	r0, #0
 8009b46:	f7ff fd88 	bl	800965a <xmit_datablock>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d101      	bne.n	8009b54 <USER_SPI_write+0xd8>
 8009b50:	2301      	movs	r3, #1
 8009b52:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009b54:	f7ff fd2c 	bl	80095b0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	bf14      	ite	ne
 8009b5e:	2301      	movne	r3, #1
 8009b60:	2300      	moveq	r3, #0
 8009b62:	b2db      	uxtb	r3, r3
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	2000004c 	.word	0x2000004c
 8009b70:	200024dc 	.word	0x200024dc

08009b74 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b08c      	sub	sp, #48	@ 0x30
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	603a      	str	r2, [r7, #0]
 8009b7e:	71fb      	strb	r3, [r7, #7]
 8009b80:	460b      	mov	r3, r1
 8009b82:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8009b84:	79fb      	ldrb	r3, [r7, #7]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <USER_SPI_ioctl+0x1a>
 8009b8a:	2304      	movs	r3, #4
 8009b8c:	e15a      	b.n	8009e44 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8009b8e:	4baf      	ldr	r3, [pc, #700]	@ (8009e4c <USER_SPI_ioctl+0x2d8>)
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d001      	beq.n	8009ba0 <USER_SPI_ioctl+0x2c>
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e151      	b.n	8009e44 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8009ba6:	79bb      	ldrb	r3, [r7, #6]
 8009ba8:	2b04      	cmp	r3, #4
 8009baa:	f200 8136 	bhi.w	8009e1a <USER_SPI_ioctl+0x2a6>
 8009bae:	a201      	add	r2, pc, #4	@ (adr r2, 8009bb4 <USER_SPI_ioctl+0x40>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bc9 	.word	0x08009bc9
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009e1b 	.word	0x08009e1b
 8009bc0:	08009c89 	.word	0x08009c89
 8009bc4:	08009d7f 	.word	0x08009d7f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8009bc8:	f7ff fd02 	bl	80095d0 <spiselect>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 8127 	beq.w	8009e22 <USER_SPI_ioctl+0x2ae>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009bda:	e122      	b.n	8009e22 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009bdc:	2100      	movs	r1, #0
 8009bde:	2009      	movs	r0, #9
 8009be0:	f7ff fd6d 	bl	80096be <send_cmd>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	f040 811d 	bne.w	8009e26 <USER_SPI_ioctl+0x2b2>
 8009bec:	f107 030c 	add.w	r3, r7, #12
 8009bf0:	2110      	movs	r1, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff fd08 	bl	8009608 <rcvr_datablock>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 8113 	beq.w	8009e26 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8009c00:	7b3b      	ldrb	r3, [r7, #12]
 8009c02:	099b      	lsrs	r3, r3, #6
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d111      	bne.n	8009c2e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009c0a:	7d7b      	ldrb	r3, [r7, #21]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	7d3b      	ldrb	r3, [r7, #20]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	4413      	add	r3, r2
 8009c14:	461a      	mov	r2, r3
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	041b      	lsls	r3, r3, #16
 8009c1a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8009c1e:	4413      	add	r3, r2
 8009c20:	3301      	adds	r3, #1
 8009c22:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	029a      	lsls	r2, r3, #10
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	601a      	str	r2, [r3, #0]
 8009c2c:	e028      	b.n	8009c80 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8009c2e:	7c7b      	ldrb	r3, [r7, #17]
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	7dbb      	ldrb	r3, [r7, #22]
 8009c38:	09db      	lsrs	r3, r3, #7
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	4413      	add	r3, r2
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	7d7b      	ldrb	r3, [r7, #21]
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	f003 0306 	and.w	r3, r3, #6
 8009c4a:	b2db      	uxtb	r3, r3
 8009c4c:	4413      	add	r3, r2
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	3302      	adds	r3, #2
 8009c52:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009c56:	7d3b      	ldrb	r3, [r7, #20]
 8009c58:	099b      	lsrs	r3, r3, #6
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	7cfb      	ldrb	r3, [r7, #19]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	441a      	add	r2, r3
 8009c64:	7cbb      	ldrb	r3, [r7, #18]
 8009c66:	029b      	lsls	r3, r3, #10
 8009c68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3301      	adds	r3, #1
 8009c70:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8009c72:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009c76:	3b09      	subs	r3, #9
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	409a      	lsls	r2, r3
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009c86:	e0ce      	b.n	8009e26 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8009c88:	4b71      	ldr	r3, [pc, #452]	@ (8009e50 <USER_SPI_ioctl+0x2dc>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 0304 	and.w	r3, r3, #4
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d031      	beq.n	8009cf8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8009c94:	2100      	movs	r1, #0
 8009c96:	208d      	movs	r0, #141	@ 0x8d
 8009c98:	f7ff fd11 	bl	80096be <send_cmd>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f040 80c3 	bne.w	8009e2a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8009ca4:	20ff      	movs	r0, #255	@ 0xff
 8009ca6:	f7ff fc19 	bl	80094dc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8009caa:	f107 030c 	add.w	r3, r7, #12
 8009cae:	2110      	movs	r1, #16
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7ff fca9 	bl	8009608 <rcvr_datablock>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	f000 80b6 	beq.w	8009e2a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8009cbe:	2330      	movs	r3, #48	@ 0x30
 8009cc0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009cc4:	e007      	b.n	8009cd6 <USER_SPI_ioctl+0x162>
 8009cc6:	20ff      	movs	r0, #255	@ 0xff
 8009cc8:	f7ff fc08 	bl	80094dc <xchg_spi>
 8009ccc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8009cd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d1f3      	bne.n	8009cc6 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8009cde:	7dbb      	ldrb	r3, [r7, #22]
 8009ce0:	091b      	lsrs	r3, r3, #4
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	2310      	movs	r3, #16
 8009ce8:	fa03 f202 	lsl.w	r2, r3, r2
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009cf6:	e098      	b.n	8009e2a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	2009      	movs	r0, #9
 8009cfc:	f7ff fcdf 	bl	80096be <send_cmd>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f040 8091 	bne.w	8009e2a <USER_SPI_ioctl+0x2b6>
 8009d08:	f107 030c 	add.w	r3, r7, #12
 8009d0c:	2110      	movs	r1, #16
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fc7a 	bl	8009608 <rcvr_datablock>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	f000 8087 	beq.w	8009e2a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8009e50 <USER_SPI_ioctl+0x2dc>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d012      	beq.n	8009d4e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009d28:	7dbb      	ldrb	r3, [r7, #22]
 8009d2a:	005b      	lsls	r3, r3, #1
 8009d2c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8009d30:	7dfa      	ldrb	r2, [r7, #23]
 8009d32:	09d2      	lsrs	r2, r2, #7
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	4413      	add	r3, r2
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	7e7b      	ldrb	r3, [r7, #25]
 8009d3c:	099b      	lsrs	r3, r3, #6
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	3b01      	subs	r3, #1
 8009d42:	fa02 f303 	lsl.w	r3, r2, r3
 8009d46:	461a      	mov	r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	e013      	b.n	8009d76 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8009d4e:	7dbb      	ldrb	r3, [r7, #22]
 8009d50:	109b      	asrs	r3, r3, #2
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	3301      	adds	r3, #1
 8009d5a:	7dfa      	ldrb	r2, [r7, #23]
 8009d5c:	00d2      	lsls	r2, r2, #3
 8009d5e:	f002 0218 	and.w	r2, r2, #24
 8009d62:	7df9      	ldrb	r1, [r7, #23]
 8009d64:	0949      	lsrs	r1, r1, #5
 8009d66:	b2c9      	uxtb	r1, r1
 8009d68:	440a      	add	r2, r1
 8009d6a:	3201      	adds	r2, #1
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
 8009d70:	461a      	mov	r2, r3
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8009d7c:	e055      	b.n	8009e2a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009d7e:	4b34      	ldr	r3, [pc, #208]	@ (8009e50 <USER_SPI_ioctl+0x2dc>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	f003 0306 	and.w	r3, r3, #6
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d051      	beq.n	8009e2e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009d8a:	f107 020c 	add.w	r2, r7, #12
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	210b      	movs	r1, #11
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff feee 	bl	8009b74 <USER_SPI_ioctl>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d149      	bne.n	8009e32 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009d9e:	7b3b      	ldrb	r3, [r7, #12]
 8009da0:	099b      	lsrs	r3, r3, #6
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d104      	bne.n	8009db2 <USER_SPI_ioctl+0x23e>
 8009da8:	7dbb      	ldrb	r3, [r7, #22]
 8009daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d041      	beq.n	8009e36 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	623b      	str	r3, [r7, #32]
 8009db6:	6a3b      	ldr	r3, [r7, #32]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dbc:	6a3b      	ldr	r3, [r7, #32]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8009dc2:	4b23      	ldr	r3, [pc, #140]	@ (8009e50 <USER_SPI_ioctl+0x2dc>)
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 0308 	and.w	r3, r3, #8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d105      	bne.n	8009dda <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8009dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd0:	025b      	lsls	r3, r3, #9
 8009dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd6:	025b      	lsls	r3, r3, #9
 8009dd8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009dda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009ddc:	2020      	movs	r0, #32
 8009dde:	f7ff fc6e 	bl	80096be <send_cmd>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d128      	bne.n	8009e3a <USER_SPI_ioctl+0x2c6>
 8009de8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009dea:	2021      	movs	r0, #33	@ 0x21
 8009dec:	f7ff fc67 	bl	80096be <send_cmd>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d121      	bne.n	8009e3a <USER_SPI_ioctl+0x2c6>
 8009df6:	2100      	movs	r1, #0
 8009df8:	2026      	movs	r0, #38	@ 0x26
 8009dfa:	f7ff fc60 	bl	80096be <send_cmd>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d11a      	bne.n	8009e3a <USER_SPI_ioctl+0x2c6>
 8009e04:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009e08:	f7ff fbae 	bl	8009568 <wait_ready>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d013      	beq.n	8009e3a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009e12:	2300      	movs	r3, #0
 8009e14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8009e18:	e00f      	b.n	8009e3a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009e1a:	2304      	movs	r3, #4
 8009e1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009e20:	e00c      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		break;
 8009e22:	bf00      	nop
 8009e24:	e00a      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		break;
 8009e26:	bf00      	nop
 8009e28:	e008      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		break;
 8009e2a:	bf00      	nop
 8009e2c:	e006      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009e2e:	bf00      	nop
 8009e30:	e004      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009e32:	bf00      	nop
 8009e34:	e002      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009e36:	bf00      	nop
 8009e38:	e000      	b.n	8009e3c <USER_SPI_ioctl+0x2c8>
		break;
 8009e3a:	bf00      	nop
	}

	despiselect();
 8009e3c:	f7ff fbb8 	bl	80095b0 <despiselect>

	return res;
 8009e40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3730      	adds	r7, #48	@ 0x30
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	2000004c 	.word	0x2000004c
 8009e50:	200024dc 	.word	0x200024dc

08009e54 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009e5e:	79fb      	ldrb	r3, [r7, #7]
 8009e60:	4a08      	ldr	r2, [pc, #32]	@ (8009e84 <disk_status+0x30>)
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	79fa      	ldrb	r2, [r7, #7]
 8009e6c:	4905      	ldr	r1, [pc, #20]	@ (8009e84 <disk_status+0x30>)
 8009e6e:	440a      	add	r2, r1
 8009e70:	7a12      	ldrb	r2, [r2, #8]
 8009e72:	4610      	mov	r0, r2
 8009e74:	4798      	blx	r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	20002710 	.word	0x20002710

08009e88 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	4603      	mov	r3, r0
 8009e90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009e96:	79fb      	ldrb	r3, [r7, #7]
 8009e98:	4a0d      	ldr	r2, [pc, #52]	@ (8009ed0 <disk_initialize+0x48>)
 8009e9a:	5cd3      	ldrb	r3, [r2, r3]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d111      	bne.n	8009ec4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8009ed0 <disk_initialize+0x48>)
 8009ea4:	2101      	movs	r1, #1
 8009ea6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	4a09      	ldr	r2, [pc, #36]	@ (8009ed0 <disk_initialize+0x48>)
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	79fa      	ldrb	r2, [r7, #7]
 8009eb6:	4906      	ldr	r1, [pc, #24]	@ (8009ed0 <disk_initialize+0x48>)
 8009eb8:	440a      	add	r2, r1
 8009eba:	7a12      	ldrb	r2, [r2, #8]
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3710      	adds	r7, #16
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	20002710 	.word	0x20002710

08009ed4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009ed4:	b590      	push	{r4, r7, lr}
 8009ed6:	b087      	sub	sp, #28
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60b9      	str	r1, [r7, #8]
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	603b      	str	r3, [r7, #0]
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8009f10 <disk_read+0x3c>)
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	689c      	ldr	r4, [r3, #8]
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	4a07      	ldr	r2, [pc, #28]	@ (8009f10 <disk_read+0x3c>)
 8009ef4:	4413      	add	r3, r2
 8009ef6:	7a18      	ldrb	r0, [r3, #8]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	68b9      	ldr	r1, [r7, #8]
 8009efe:	47a0      	blx	r4
 8009f00:	4603      	mov	r3, r0
 8009f02:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	371c      	adds	r7, #28
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd90      	pop	{r4, r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20002710 	.word	0x20002710

08009f14 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009f14:	b590      	push	{r4, r7, lr}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60b9      	str	r1, [r7, #8]
 8009f1c:	607a      	str	r2, [r7, #4]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	4603      	mov	r3, r0
 8009f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009f24:	7bfb      	ldrb	r3, [r7, #15]
 8009f26:	4a0a      	ldr	r2, [pc, #40]	@ (8009f50 <disk_write+0x3c>)
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68dc      	ldr	r4, [r3, #12]
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4a07      	ldr	r2, [pc, #28]	@ (8009f50 <disk_write+0x3c>)
 8009f34:	4413      	add	r3, r2
 8009f36:	7a18      	ldrb	r0, [r3, #8]
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	68b9      	ldr	r1, [r7, #8]
 8009f3e:	47a0      	blx	r4
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]
  return res;
 8009f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	371c      	adds	r7, #28
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd90      	pop	{r4, r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	20002710 	.word	0x20002710

08009f54 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	603a      	str	r2, [r7, #0]
 8009f5e:	71fb      	strb	r3, [r7, #7]
 8009f60:	460b      	mov	r3, r1
 8009f62:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009f64:	79fb      	ldrb	r3, [r7, #7]
 8009f66:	4a09      	ldr	r2, [pc, #36]	@ (8009f8c <disk_ioctl+0x38>)
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	79fa      	ldrb	r2, [r7, #7]
 8009f72:	4906      	ldr	r1, [pc, #24]	@ (8009f8c <disk_ioctl+0x38>)
 8009f74:	440a      	add	r2, r1
 8009f76:	7a10      	ldrb	r0, [r2, #8]
 8009f78:	79b9      	ldrb	r1, [r7, #6]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	4798      	blx	r3
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73fb      	strb	r3, [r7, #15]
  return res;
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}
 8009f8c:	20002710 	.word	0x20002710

08009f90 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009fa0:	89fb      	ldrh	r3, [r7, #14]
 8009fa2:	021b      	lsls	r3, r3, #8
 8009fa4:	b21a      	sxth	r2, r3
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	b21b      	sxth	r3, r3
 8009fac:	4313      	orrs	r3, r2
 8009fae:	b21b      	sxth	r3, r3
 8009fb0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009fb2:	89fb      	ldrh	r3, [r7, #14]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	3303      	adds	r3, #3
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	3202      	adds	r2, #2
 8009fd8:	7812      	ldrb	r2, [r2, #0]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	021b      	lsls	r3, r3, #8
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	3201      	adds	r2, #1
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	021b      	lsls	r3, r3, #8
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7812      	ldrb	r2, [r2, #0]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
	return rv;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr

0800a006 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a006:	b480      	push	{r7}
 800a008:	b083      	sub	sp, #12
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	460b      	mov	r3, r1
 800a010:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	887a      	ldrh	r2, [r7, #2]
 800a01a:	b2d2      	uxtb	r2, r2
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	887b      	ldrh	r3, [r7, #2]
 800a020:	0a1b      	lsrs	r3, r3, #8
 800a022:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	607a      	str	r2, [r7, #4]
 800a02a:	887a      	ldrh	r2, [r7, #2]
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	701a      	strb	r2, [r3, #0]
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr

0800a03c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	1c5a      	adds	r2, r3, #1
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	b2d2      	uxtb	r2, r2
 800a050:	701a      	strb	r2, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	0a1b      	lsrs	r3, r3, #8
 800a056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	1c5a      	adds	r2, r3, #1
 800a05c:	607a      	str	r2, [r7, #4]
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	b2d2      	uxtb	r2, r2
 800a062:	701a      	strb	r2, [r3, #0]
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	0a1b      	lsrs	r3, r3, #8
 800a068:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	1c5a      	adds	r2, r3, #1
 800a06e:	607a      	str	r2, [r7, #4]
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	b2d2      	uxtb	r2, r2
 800a074:	701a      	strb	r2, [r3, #0]
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	0a1b      	lsrs	r3, r3, #8
 800a07a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	1c5a      	adds	r2, r3, #1
 800a080:	607a      	str	r2, [r7, #4]
 800a082:	683a      	ldr	r2, [r7, #0]
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	701a      	strb	r2, [r3, #0]
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a094:	b480      	push	{r7}
 800a096:	b087      	sub	sp, #28
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00d      	beq.n	800a0ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	1c53      	adds	r3, r2, #1
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	1c59      	adds	r1, r3, #1
 800a0b8:	6179      	str	r1, [r7, #20]
 800a0ba:	7812      	ldrb	r2, [r2, #0]
 800a0bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	607b      	str	r3, [r7, #4]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d1f1      	bne.n	800a0ae <mem_cpy+0x1a>
	}
}
 800a0ca:	bf00      	nop
 800a0cc:	371c      	adds	r7, #28
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr

0800a0d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a0d6:	b480      	push	{r7}
 800a0d8:	b087      	sub	sp, #28
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	60f8      	str	r0, [r7, #12]
 800a0de:	60b9      	str	r1, [r7, #8]
 800a0e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	617a      	str	r2, [r7, #20]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	b2d2      	uxtb	r2, r2
 800a0f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	607b      	str	r3, [r7, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f3      	bne.n	800a0e6 <mem_set+0x10>
}
 800a0fe:	bf00      	nop
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a10c:	b480      	push	{r7}
 800a10e:	b089      	sub	sp, #36	@ 0x24
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	61fb      	str	r3, [r7, #28]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a120:	2300      	movs	r3, #0
 800a122:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a124:	69fb      	ldr	r3, [r7, #28]
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	61fa      	str	r2, [r7, #28]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	4619      	mov	r1, r3
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	61ba      	str	r2, [r7, #24]
 800a134:	781b      	ldrb	r3, [r3, #0]
 800a136:	1acb      	subs	r3, r1, r3
 800a138:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	607b      	str	r3, [r7, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d002      	beq.n	800a14c <mem_cmp+0x40>
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0eb      	beq.n	800a124 <mem_cmp+0x18>

	return r;
 800a14c:	697b      	ldr	r3, [r7, #20]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3724      	adds	r7, #36	@ 0x24
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a164:	e002      	b.n	800a16c <chk_chr+0x12>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	3301      	adds	r3, #1
 800a16a:	607b      	str	r3, [r7, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	781b      	ldrb	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d005      	beq.n	800a180 <chk_chr+0x26>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d1f2      	bne.n	800a166 <chk_chr+0xc>
	return *str;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	781b      	ldrb	r3, [r3, #0]
}
 800a184:	4618      	mov	r0, r3
 800a186:	370c      	adds	r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr

0800a190 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a19a:	2300      	movs	r3, #0
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e029      	b.n	800a1f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a1a4:	4a27      	ldr	r2, [pc, #156]	@ (800a244 <chk_lock+0xb4>)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	011b      	lsls	r3, r3, #4
 800a1aa:	4413      	add	r3, r2
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d01d      	beq.n	800a1ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1b2:	4a24      	ldr	r2, [pc, #144]	@ (800a244 <chk_lock+0xb4>)
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	011b      	lsls	r3, r3, #4
 800a1b8:	4413      	add	r3, r2
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d116      	bne.n	800a1f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a1c4:	4a1f      	ldr	r2, [pc, #124]	@ (800a244 <chk_lock+0xb4>)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	011b      	lsls	r3, r3, #4
 800a1ca:	4413      	add	r3, r2
 800a1cc:	3304      	adds	r3, #4
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d10c      	bne.n	800a1f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a244 <chk_lock+0xb4>)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	4413      	add	r3, r2
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	681a      	ldr	r2, [r3, #0]
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d102      	bne.n	800a1f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1ec:	e007      	b.n	800a1fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d9d2      	bls.n	800a1a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b02      	cmp	r3, #2
 800a202:	d109      	bne.n	800a218 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d102      	bne.n	800a210 <chk_lock+0x80>
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	2b02      	cmp	r3, #2
 800a20e:	d101      	bne.n	800a214 <chk_lock+0x84>
 800a210:	2300      	movs	r3, #0
 800a212:	e010      	b.n	800a236 <chk_lock+0xa6>
 800a214:	2312      	movs	r3, #18
 800a216:	e00e      	b.n	800a236 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d108      	bne.n	800a230 <chk_lock+0xa0>
 800a21e:	4a09      	ldr	r2, [pc, #36]	@ (800a244 <chk_lock+0xb4>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	4413      	add	r3, r2
 800a226:	330c      	adds	r3, #12
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a22e:	d101      	bne.n	800a234 <chk_lock+0xa4>
 800a230:	2310      	movs	r3, #16
 800a232:	e000      	b.n	800a236 <chk_lock+0xa6>
 800a234:	2300      	movs	r3, #0
}
 800a236:	4618      	mov	r0, r3
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	200024f0 	.word	0x200024f0

0800a248 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a24e:	2300      	movs	r3, #0
 800a250:	607b      	str	r3, [r7, #4]
 800a252:	e002      	b.n	800a25a <enq_lock+0x12>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3301      	adds	r3, #1
 800a258:	607b      	str	r3, [r7, #4]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d806      	bhi.n	800a26e <enq_lock+0x26>
 800a260:	4a09      	ldr	r2, [pc, #36]	@ (800a288 <enq_lock+0x40>)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	011b      	lsls	r3, r3, #4
 800a266:	4413      	add	r3, r2
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d1f2      	bne.n	800a254 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b02      	cmp	r3, #2
 800a272:	bf14      	ite	ne
 800a274:	2301      	movne	r3, #1
 800a276:	2300      	moveq	r3, #0
 800a278:	b2db      	uxtb	r3, r3
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	200024f0 	.word	0x200024f0

0800a28c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a296:	2300      	movs	r3, #0
 800a298:	60fb      	str	r3, [r7, #12]
 800a29a:	e01f      	b.n	800a2dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a29c:	4a41      	ldr	r2, [pc, #260]	@ (800a3a4 <inc_lock+0x118>)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	011b      	lsls	r3, r3, #4
 800a2a2:	4413      	add	r3, r2
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d113      	bne.n	800a2d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a2ae:	4a3d      	ldr	r2, [pc, #244]	@ (800a3a4 <inc_lock+0x118>)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	4413      	add	r3, r2
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d109      	bne.n	800a2d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a2c2:	4a38      	ldr	r2, [pc, #224]	@ (800a3a4 <inc_lock+0x118>)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	011b      	lsls	r3, r3, #4
 800a2c8:	4413      	add	r3, r2
 800a2ca:	3308      	adds	r3, #8
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d006      	beq.n	800a2e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	60fb      	str	r3, [r7, #12]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d9dc      	bls.n	800a29c <inc_lock+0x10>
 800a2e2:	e000      	b.n	800a2e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a2e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d132      	bne.n	800a352 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	60fb      	str	r3, [r7, #12]
 800a2f0:	e002      	b.n	800a2f8 <inc_lock+0x6c>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d806      	bhi.n	800a30c <inc_lock+0x80>
 800a2fe:	4a29      	ldr	r2, [pc, #164]	@ (800a3a4 <inc_lock+0x118>)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	011b      	lsls	r3, r3, #4
 800a304:	4413      	add	r3, r2
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1f2      	bne.n	800a2f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b02      	cmp	r3, #2
 800a310:	d101      	bne.n	800a316 <inc_lock+0x8a>
 800a312:	2300      	movs	r3, #0
 800a314:	e040      	b.n	800a398 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	4922      	ldr	r1, [pc, #136]	@ (800a3a4 <inc_lock+0x118>)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	011b      	lsls	r3, r3, #4
 800a320:	440b      	add	r3, r1
 800a322:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	491e      	ldr	r1, [pc, #120]	@ (800a3a4 <inc_lock+0x118>)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	011b      	lsls	r3, r3, #4
 800a32e:	440b      	add	r3, r1
 800a330:	3304      	adds	r3, #4
 800a332:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	695a      	ldr	r2, [r3, #20]
 800a338:	491a      	ldr	r1, [pc, #104]	@ (800a3a4 <inc_lock+0x118>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	440b      	add	r3, r1
 800a340:	3308      	adds	r3, #8
 800a342:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a344:	4a17      	ldr	r2, [pc, #92]	@ (800a3a4 <inc_lock+0x118>)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	011b      	lsls	r3, r3, #4
 800a34a:	4413      	add	r3, r2
 800a34c:	330c      	adds	r3, #12
 800a34e:	2200      	movs	r2, #0
 800a350:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <inc_lock+0xe0>
 800a358:	4a12      	ldr	r2, [pc, #72]	@ (800a3a4 <inc_lock+0x118>)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	011b      	lsls	r3, r3, #4
 800a35e:	4413      	add	r3, r2
 800a360:	330c      	adds	r3, #12
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <inc_lock+0xe0>
 800a368:	2300      	movs	r3, #0
 800a36a:	e015      	b.n	800a398 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d108      	bne.n	800a384 <inc_lock+0xf8>
 800a372:	4a0c      	ldr	r2, [pc, #48]	@ (800a3a4 <inc_lock+0x118>)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	011b      	lsls	r3, r3, #4
 800a378:	4413      	add	r3, r2
 800a37a:	330c      	adds	r3, #12
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	3301      	adds	r3, #1
 800a380:	b29a      	uxth	r2, r3
 800a382:	e001      	b.n	800a388 <inc_lock+0xfc>
 800a384:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a388:	4906      	ldr	r1, [pc, #24]	@ (800a3a4 <inc_lock+0x118>)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	011b      	lsls	r3, r3, #4
 800a38e:	440b      	add	r3, r1
 800a390:	330c      	adds	r3, #12
 800a392:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	3301      	adds	r3, #1
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	200024f0 	.word	0x200024f0

0800a3a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	607b      	str	r3, [r7, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d825      	bhi.n	800a408 <dec_lock+0x60>
		n = Files[i].ctr;
 800a3bc:	4a17      	ldr	r2, [pc, #92]	@ (800a41c <dec_lock+0x74>)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	011b      	lsls	r3, r3, #4
 800a3c2:	4413      	add	r3, r2
 800a3c4:	330c      	adds	r3, #12
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a3ca:	89fb      	ldrh	r3, [r7, #14]
 800a3cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3d0:	d101      	bne.n	800a3d6 <dec_lock+0x2e>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a3d6:	89fb      	ldrh	r3, [r7, #14]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <dec_lock+0x3a>
 800a3dc:	89fb      	ldrh	r3, [r7, #14]
 800a3de:	3b01      	subs	r3, #1
 800a3e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a3e2:	4a0e      	ldr	r2, [pc, #56]	@ (800a41c <dec_lock+0x74>)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	011b      	lsls	r3, r3, #4
 800a3e8:	4413      	add	r3, r2
 800a3ea:	330c      	adds	r3, #12
 800a3ec:	89fa      	ldrh	r2, [r7, #14]
 800a3ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a3f0:	89fb      	ldrh	r3, [r7, #14]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <dec_lock+0x5a>
 800a3f6:	4a09      	ldr	r2, [pc, #36]	@ (800a41c <dec_lock+0x74>)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	011b      	lsls	r3, r3, #4
 800a3fc:	4413      	add	r3, r2
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a402:	2300      	movs	r3, #0
 800a404:	737b      	strb	r3, [r7, #13]
 800a406:	e001      	b.n	800a40c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a408:	2302      	movs	r3, #2
 800a40a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a40c:	7b7b      	ldrb	r3, [r7, #13]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3714      	adds	r7, #20
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop
 800a41c:	200024f0 	.word	0x200024f0

0800a420 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a428:	2300      	movs	r3, #0
 800a42a:	60fb      	str	r3, [r7, #12]
 800a42c:	e010      	b.n	800a450 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a42e:	4a0d      	ldr	r2, [pc, #52]	@ (800a464 <clear_lock+0x44>)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	011b      	lsls	r3, r3, #4
 800a434:	4413      	add	r3, r2
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d105      	bne.n	800a44a <clear_lock+0x2a>
 800a43e:	4a09      	ldr	r2, [pc, #36]	@ (800a464 <clear_lock+0x44>)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	011b      	lsls	r3, r3, #4
 800a444:	4413      	add	r3, r2
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d9eb      	bls.n	800a42e <clear_lock+0xe>
	}
}
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr
 800a464:	200024f0 	.word	0x200024f0

0800a468 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b086      	sub	sp, #24
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	78db      	ldrb	r3, [r3, #3]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d034      	beq.n	800a4e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a480:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	7858      	ldrb	r0, [r3, #1]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a48c:	2301      	movs	r3, #1
 800a48e:	697a      	ldr	r2, [r7, #20]
 800a490:	f7ff fd40 	bl	8009f14 <disk_write>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	73fb      	strb	r3, [r7, #15]
 800a49e:	e022      	b.n	800a4e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	1ad2      	subs	r2, r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	69db      	ldr	r3, [r3, #28]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d217      	bcs.n	800a4e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	789b      	ldrb	r3, [r3, #2]
 800a4ba:	613b      	str	r3, [r7, #16]
 800a4bc:	e010      	b.n	800a4e0 <sync_window+0x78>
					wsect += fs->fsize;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	69db      	ldr	r3, [r3, #28]
 800a4c2:	697a      	ldr	r2, [r7, #20]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	7858      	ldrb	r0, [r3, #1]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	697a      	ldr	r2, [r7, #20]
 800a4d6:	f7ff fd1d 	bl	8009f14 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	613b      	str	r3, [r7, #16]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d8eb      	bhi.n	800a4be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3718      	adds	r7, #24
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}

0800a4f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a502:	683a      	ldr	r2, [r7, #0]
 800a504:	429a      	cmp	r2, r3
 800a506:	d01b      	beq.n	800a540 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f7ff ffad 	bl	800a468 <sync_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d113      	bne.n	800a540 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	7858      	ldrb	r0, [r3, #1]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a522:	2301      	movs	r3, #1
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	f7ff fcd5 	bl	8009ed4 <disk_read>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d004      	beq.n	800a53a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a530:	f04f 33ff 	mov.w	r3, #4294967295
 800a534:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a536:	2301      	movs	r3, #1
 800a538:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800a540:	7bfb      	ldrb	r3, [r7, #15]
}
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
	...

0800a54c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b084      	sub	sp, #16
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff ff87 	bl	800a468 <sync_window>
 800a55a:	4603      	mov	r3, r0
 800a55c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d158      	bne.n	800a616 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	2b03      	cmp	r3, #3
 800a56a:	d148      	bne.n	800a5fe <sync_fs+0xb2>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	791b      	ldrb	r3, [r3, #4]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d144      	bne.n	800a5fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	3334      	adds	r3, #52	@ 0x34
 800a578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a57c:	2100      	movs	r1, #0
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fda9 	bl	800a0d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3334      	adds	r3, #52	@ 0x34
 800a588:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a58c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fd38 	bl	800a006 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3334      	adds	r3, #52	@ 0x34
 800a59a:	4921      	ldr	r1, [pc, #132]	@ (800a620 <sync_fs+0xd4>)
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff fd4d 	bl	800a03c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	3334      	adds	r3, #52	@ 0x34
 800a5a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a5aa:	491e      	ldr	r1, [pc, #120]	@ (800a624 <sync_fs+0xd8>)
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7ff fd45 	bl	800a03c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	3334      	adds	r3, #52	@ 0x34
 800a5b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	695b      	ldr	r3, [r3, #20]
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4610      	mov	r0, r2
 800a5c2:	f7ff fd3b 	bl	800a03c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3334      	adds	r3, #52	@ 0x34
 800a5ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	f7ff fd31 	bl	800a03c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	7858      	ldrb	r0, [r3, #1]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f7ff fc8e 	bl	8009f14 <disk_write>
			fs->fsi_flag = 0;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	785b      	ldrb	r3, [r3, #1]
 800a602:	2200      	movs	r2, #0
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f7ff fca4 	bl	8009f54 <disk_ioctl>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <sync_fs+0xca>
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	41615252 	.word	0x41615252
 800a624:	61417272 	.word	0x61417272

0800a628 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	3b02      	subs	r3, #2
 800a636:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	3b02      	subs	r3, #2
 800a63e:	683a      	ldr	r2, [r7, #0]
 800a640:	429a      	cmp	r2, r3
 800a642:	d301      	bcc.n	800a648 <clust2sect+0x20>
 800a644:	2300      	movs	r3, #0
 800a646:	e008      	b.n	800a65a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	895b      	ldrh	r3, [r3, #10]
 800a64c:	461a      	mov	r2, r3
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	fb03 f202 	mul.w	r2, r3, r2
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a658:	4413      	add	r3, r2
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a666:	b580      	push	{r7, lr}
 800a668:	b086      	sub	sp, #24
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	6078      	str	r0, [r7, #4]
 800a66e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d904      	bls.n	800a686 <get_fat+0x20>
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d302      	bcc.n	800a68c <get_fat+0x26>
		val = 1;	/* Internal error */
 800a686:	2301      	movs	r3, #1
 800a688:	617b      	str	r3, [r7, #20]
 800a68a:	e08e      	b.n	800a7aa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295
 800a690:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	2b03      	cmp	r3, #3
 800a698:	d061      	beq.n	800a75e <get_fat+0xf8>
 800a69a:	2b03      	cmp	r3, #3
 800a69c:	dc7b      	bgt.n	800a796 <get_fat+0x130>
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d002      	beq.n	800a6a8 <get_fat+0x42>
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d041      	beq.n	800a72a <get_fat+0xc4>
 800a6a6:	e076      	b.n	800a796 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	60fb      	str	r3, [r7, #12]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	085b      	lsrs	r3, r3, #1
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	0a5b      	lsrs	r3, r3, #9
 800a6be:	4413      	add	r3, r2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6938      	ldr	r0, [r7, #16]
 800a6c4:	f7ff ff14 	bl	800a4f0 <move_window>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d166      	bne.n	800a79c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	60fa      	str	r2, [r7, #12]
 800a6d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	4413      	add	r3, r2
 800a6dc:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a6e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	0a5b      	lsrs	r3, r3, #9
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6938      	ldr	r0, [r7, #16]
 800a6f0:	f7ff fefe 	bl	800a4f0 <move_window>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d152      	bne.n	800a7a0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a700:	693a      	ldr	r2, [r7, #16]
 800a702:	4413      	add	r3, r2
 800a704:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a708:	021b      	lsls	r3, r3, #8
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	f003 0301 	and.w	r3, r3, #1
 800a716:	2b00      	cmp	r3, #0
 800a718:	d002      	beq.n	800a720 <get_fat+0xba>
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	091b      	lsrs	r3, r3, #4
 800a71e:	e002      	b.n	800a726 <get_fat+0xc0>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a726:	617b      	str	r3, [r7, #20]
			break;
 800a728:	e03f      	b.n	800a7aa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	4413      	add	r3, r2
 800a734:	4619      	mov	r1, r3
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f7ff feda 	bl	800a4f0 <move_window>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d130      	bne.n	800a7a4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	005b      	lsls	r3, r3, #1
 800a74c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a750:	4413      	add	r3, r2
 800a752:	4618      	mov	r0, r3
 800a754:	f7ff fc1c 	bl	8009f90 <ld_word>
 800a758:	4603      	mov	r3, r0
 800a75a:	617b      	str	r3, [r7, #20]
			break;
 800a75c:	e025      	b.n	800a7aa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	09db      	lsrs	r3, r3, #7
 800a766:	4413      	add	r3, r2
 800a768:	4619      	mov	r1, r3
 800a76a:	6938      	ldr	r0, [r7, #16]
 800a76c:	f7ff fec0 	bl	800a4f0 <move_window>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d118      	bne.n	800a7a8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a784:	4413      	add	r3, r2
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff fc1a 	bl	8009fc0 <ld_dword>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a792:	617b      	str	r3, [r7, #20]
			break;
 800a794:	e009      	b.n	800a7aa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a796:	2301      	movs	r3, #1
 800a798:	617b      	str	r3, [r7, #20]
 800a79a:	e006      	b.n	800a7aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a79c:	bf00      	nop
 800a79e:	e004      	b.n	800a7aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a7a0:	bf00      	nop
 800a7a2:	e002      	b.n	800a7aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a7a4:	bf00      	nop
 800a7a6:	e000      	b.n	800a7aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a7a8:	bf00      	nop
		}
	}

	return val;
 800a7aa:	697b      	ldr	r3, [r7, #20]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3718      	adds	r7, #24
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a7b4:	b590      	push	{r4, r7, lr}
 800a7b6:	b089      	sub	sp, #36	@ 0x24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	f240 80d9 	bls.w	800a97e <put_fat+0x1ca>
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	699b      	ldr	r3, [r3, #24]
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	f080 80d3 	bcs.w	800a97e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	2b03      	cmp	r3, #3
 800a7de:	f000 8096 	beq.w	800a90e <put_fat+0x15a>
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	f300 80cb 	bgt.w	800a97e <put_fat+0x1ca>
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d002      	beq.n	800a7f2 <put_fat+0x3e>
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d06e      	beq.n	800a8ce <put_fat+0x11a>
 800a7f0:	e0c5      	b.n	800a97e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	61bb      	str	r3, [r7, #24]
 800a7f6:	69bb      	ldr	r3, [r7, #24]
 800a7f8:	085b      	lsrs	r3, r3, #1
 800a7fa:	69ba      	ldr	r2, [r7, #24]
 800a7fc:	4413      	add	r3, r2
 800a7fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	0a5b      	lsrs	r3, r3, #9
 800a808:	4413      	add	r3, r2
 800a80a:	4619      	mov	r1, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f7ff fe6f 	bl	800a4f0 <move_window>
 800a812:	4603      	mov	r3, r0
 800a814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a816:	7ffb      	ldrb	r3, [r7, #31]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f040 80a9 	bne.w	800a970 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	1c59      	adds	r1, r3, #1
 800a828:	61b9      	str	r1, [r7, #24]
 800a82a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a82e:	4413      	add	r3, r2
 800a830:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d00d      	beq.n	800a858 <put_fat+0xa4>
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	781b      	ldrb	r3, [r3, #0]
 800a840:	b25b      	sxtb	r3, r3
 800a842:	f003 030f 	and.w	r3, r3, #15
 800a846:	b25a      	sxtb	r2, r3
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	011b      	lsls	r3, r3, #4
 800a84e:	b25b      	sxtb	r3, r3
 800a850:	4313      	orrs	r3, r2
 800a852:	b25b      	sxtb	r3, r3
 800a854:	b2db      	uxtb	r3, r3
 800a856:	e001      	b.n	800a85c <put_fat+0xa8>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2201      	movs	r2, #1
 800a864:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	0a5b      	lsrs	r3, r3, #9
 800a86e:	4413      	add	r3, r2
 800a870:	4619      	mov	r1, r3
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f7ff fe3c 	bl	800a4f0 <move_window>
 800a878:	4603      	mov	r3, r0
 800a87a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a87c:	7ffb      	ldrb	r3, [r7, #31]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d178      	bne.n	800a974 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	4413      	add	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d003      	beq.n	800a8a4 <put_fat+0xf0>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	091b      	lsrs	r3, r3, #4
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	e00e      	b.n	800a8c2 <put_fat+0x10e>
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	b25b      	sxtb	r3, r3
 800a8aa:	f023 030f 	bic.w	r3, r3, #15
 800a8ae:	b25a      	sxtb	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	0a1b      	lsrs	r3, r3, #8
 800a8b4:	b25b      	sxtb	r3, r3
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	b25b      	sxtb	r3, r3
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	b25b      	sxtb	r3, r3
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	70da      	strb	r2, [r3, #3]
			break;
 800a8cc:	e057      	b.n	800a97e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	0a1b      	lsrs	r3, r3, #8
 800a8d6:	4413      	add	r3, r2
 800a8d8:	4619      	mov	r1, r3
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f7ff fe08 	bl	800a4f0 <move_window>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a8e4:	7ffb      	ldrb	r3, [r7, #31]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d146      	bne.n	800a978 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	005b      	lsls	r3, r3, #1
 800a8f4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a8f8:	4413      	add	r3, r2
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	b292      	uxth	r2, r2
 800a8fe:	4611      	mov	r1, r2
 800a900:	4618      	mov	r0, r3
 800a902:	f7ff fb80 	bl	800a006 <st_word>
			fs->wflag = 1;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	70da      	strb	r2, [r3, #3]
			break;
 800a90c:	e037      	b.n	800a97e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	09db      	lsrs	r3, r3, #7
 800a916:	4413      	add	r3, r2
 800a918:	4619      	mov	r1, r3
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f7ff fde8 	bl	800a4f0 <move_window>
 800a920:	4603      	mov	r3, r0
 800a922:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a924:	7ffb      	ldrb	r3, [r7, #31]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d128      	bne.n	800a97c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a93e:	4413      	add	r3, r2
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff fb3d 	bl	8009fc0 <ld_dword>
 800a946:	4603      	mov	r3, r0
 800a948:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a94c:	4323      	orrs	r3, r4
 800a94e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a95e:	4413      	add	r3, r2
 800a960:	6879      	ldr	r1, [r7, #4]
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff fb6a 	bl	800a03c <st_dword>
			fs->wflag = 1;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2201      	movs	r2, #1
 800a96c:	70da      	strb	r2, [r3, #3]
			break;
 800a96e:	e006      	b.n	800a97e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a970:	bf00      	nop
 800a972:	e004      	b.n	800a97e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a974:	bf00      	nop
 800a976:	e002      	b.n	800a97e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a978:	bf00      	nop
 800a97a:	e000      	b.n	800a97e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a97c:	bf00      	nop
		}
	}
	return res;
 800a97e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3724      	adds	r7, #36	@ 0x24
 800a984:	46bd      	mov	sp, r7
 800a986:	bd90      	pop	{r4, r7, pc}

0800a988 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b088      	sub	sp, #32
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	60f8      	str	r0, [r7, #12]
 800a990:	60b9      	str	r1, [r7, #8]
 800a992:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d904      	bls.n	800a9ae <remove_chain+0x26>
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	699b      	ldr	r3, [r3, #24]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d301      	bcc.n	800a9b2 <remove_chain+0x2a>
 800a9ae:	2302      	movs	r3, #2
 800a9b0:	e04b      	b.n	800aa4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d00c      	beq.n	800a9d2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	69b8      	ldr	r0, [r7, #24]
 800a9c0:	f7ff fef8 	bl	800a7b4 <put_fat>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a9c8:	7ffb      	ldrb	r3, [r7, #31]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <remove_chain+0x4a>
 800a9ce:	7ffb      	ldrb	r3, [r7, #31]
 800a9d0:	e03b      	b.n	800aa4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f7ff fe46 	bl	800a666 <get_fat>
 800a9da:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d031      	beq.n	800aa46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	d101      	bne.n	800a9ec <remove_chain+0x64>
 800a9e8:	2302      	movs	r3, #2
 800a9ea:	e02e      	b.n	800aa4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f2:	d101      	bne.n	800a9f8 <remove_chain+0x70>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	e028      	b.n	800aa4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	68b9      	ldr	r1, [r7, #8]
 800a9fc:	69b8      	ldr	r0, [r7, #24]
 800a9fe:	f7ff fed9 	bl	800a7b4 <put_fat>
 800aa02:	4603      	mov	r3, r0
 800aa04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800aa06:	7ffb      	ldrb	r3, [r7, #31]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <remove_chain+0x88>
 800aa0c:	7ffb      	ldrb	r3, [r7, #31]
 800aa0e:	e01c      	b.n	800aa4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	695a      	ldr	r2, [r3, #20]
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	699b      	ldr	r3, [r3, #24]
 800aa18:	3b02      	subs	r3, #2
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d20b      	bcs.n	800aa36 <remove_chain+0xae>
			fs->free_clst++;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	1c5a      	adds	r2, r3, #1
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	791b      	ldrb	r3, [r3, #4]
 800aa2c:	f043 0301 	orr.w	r3, r3, #1
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	699b      	ldr	r3, [r3, #24]
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d3c6      	bcc.n	800a9d2 <remove_chain+0x4a>
 800aa44:	e000      	b.n	800aa48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aa46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3720      	adds	r7, #32
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b088      	sub	sp, #32
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
 800aa5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10d      	bne.n	800aa84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d004      	beq.n	800aa7e <create_chain+0x2c>
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	69ba      	ldr	r2, [r7, #24]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d31b      	bcc.n	800aab6 <create_chain+0x64>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	61bb      	str	r3, [r7, #24]
 800aa82:	e018      	b.n	800aab6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fded 	bl	800a666 <get_fat>
 800aa8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d801      	bhi.n	800aa98 <create_chain+0x46>
 800aa94:	2301      	movs	r3, #1
 800aa96:	e070      	b.n	800ab7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	d101      	bne.n	800aaa4 <create_chain+0x52>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	e06a      	b.n	800ab7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d201      	bcs.n	800aab2 <create_chain+0x60>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	e063      	b.n	800ab7a <create_chain+0x128>
		scl = clst;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800aaba:	69fb      	ldr	r3, [r7, #28]
 800aabc:	3301      	adds	r3, #1
 800aabe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	699b      	ldr	r3, [r3, #24]
 800aac4:	69fa      	ldr	r2, [r7, #28]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d307      	bcc.n	800aada <create_chain+0x88>
				ncl = 2;
 800aaca:	2302      	movs	r3, #2
 800aacc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800aace:	69fa      	ldr	r2, [r7, #28]
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d901      	bls.n	800aada <create_chain+0x88>
 800aad6:	2300      	movs	r3, #0
 800aad8:	e04f      	b.n	800ab7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800aada:	69f9      	ldr	r1, [r7, #28]
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f7ff fdc2 	bl	800a666 <get_fat>
 800aae2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00e      	beq.n	800ab08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d003      	beq.n	800aaf8 <create_chain+0xa6>
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf6:	d101      	bne.n	800aafc <create_chain+0xaa>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	e03e      	b.n	800ab7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800aafc:	69fa      	ldr	r2, [r7, #28]
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d1da      	bne.n	800aaba <create_chain+0x68>
 800ab04:	2300      	movs	r3, #0
 800ab06:	e038      	b.n	800ab7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ab08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ab0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0e:	69f9      	ldr	r1, [r7, #28]
 800ab10:	6938      	ldr	r0, [r7, #16]
 800ab12:	f7ff fe4f 	bl	800a7b4 <put_fat>
 800ab16:	4603      	mov	r3, r0
 800ab18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ab1a:	7dfb      	ldrb	r3, [r7, #23]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <create_chain+0xe2>
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d006      	beq.n	800ab34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ab26:	69fa      	ldr	r2, [r7, #28]
 800ab28:	6839      	ldr	r1, [r7, #0]
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f7ff fe42 	bl	800a7b4 <put_fat>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d116      	bne.n	800ab68 <create_chain+0x116>
		fs->last_clst = ncl;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	69fa      	ldr	r2, [r7, #28]
 800ab3e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	695a      	ldr	r2, [r3, #20]
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	699b      	ldr	r3, [r3, #24]
 800ab48:	3b02      	subs	r3, #2
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d804      	bhi.n	800ab58 <create_chain+0x106>
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	1e5a      	subs	r2, r3, #1
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	791b      	ldrb	r3, [r3, #4]
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	693b      	ldr	r3, [r7, #16]
 800ab64:	711a      	strb	r2, [r3, #4]
 800ab66:	e007      	b.n	800ab78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d102      	bne.n	800ab74 <create_chain+0x122>
 800ab6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab72:	e000      	b.n	800ab76 <create_chain+0x124>
 800ab74:	2301      	movs	r3, #1
 800ab76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ab78:	69fb      	ldr	r3, [r7, #28]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b087      	sub	sp, #28
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab96:	3304      	adds	r3, #4
 800ab98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	0a5b      	lsrs	r3, r3, #9
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	8952      	ldrh	r2, [r2, #10]
 800aba2:	fbb3 f3f2 	udiv	r3, r3, r2
 800aba6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	1d1a      	adds	r2, r3, #4
 800abac:	613a      	str	r2, [r7, #16]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d101      	bne.n	800abbc <clmt_clust+0x3a>
 800abb8:	2300      	movs	r3, #0
 800abba:	e010      	b.n	800abde <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800abbc:	697a      	ldr	r2, [r7, #20]
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d307      	bcc.n	800abd4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800abc4:	697a      	ldr	r2, [r7, #20]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	1ad3      	subs	r3, r2, r3
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	3304      	adds	r3, #4
 800abd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800abd2:	e7e9      	b.n	800aba8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800abd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	4413      	add	r3, r2
}
 800abde:	4618      	mov	r0, r3
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac00:	d204      	bcs.n	800ac0c <dir_sdi+0x22>
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	f003 031f 	and.w	r3, r3, #31
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d001      	beq.n	800ac10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	e063      	b.n	800acd8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <dir_sdi+0x46>
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	d902      	bls.n	800ac30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d10c      	bne.n	800ac50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	095b      	lsrs	r3, r3, #5
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	8912      	ldrh	r2, [r2, #8]
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d301      	bcc.n	800ac46 <dir_sdi+0x5c>
 800ac42:	2302      	movs	r3, #2
 800ac44:	e048      	b.n	800acd8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	61da      	str	r2, [r3, #28]
 800ac4e:	e029      	b.n	800aca4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	895b      	ldrh	r3, [r3, #10]
 800ac54:	025b      	lsls	r3, r3, #9
 800ac56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac58:	e019      	b.n	800ac8e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6979      	ldr	r1, [r7, #20]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff fd01 	bl	800a666 <get_fat>
 800ac64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac6c:	d101      	bne.n	800ac72 <dir_sdi+0x88>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e032      	b.n	800acd8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d904      	bls.n	800ac82 <dir_sdi+0x98>
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	697a      	ldr	r2, [r7, #20]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d301      	bcc.n	800ac86 <dir_sdi+0x9c>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e028      	b.n	800acd8 <dir_sdi+0xee>
			ofs -= csz;
 800ac86:	683a      	ldr	r2, [r7, #0]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d2e1      	bcs.n	800ac5a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ac96:	6979      	ldr	r1, [r7, #20]
 800ac98:	6938      	ldr	r0, [r7, #16]
 800ac9a:	f7ff fcc5 	bl	800a628 <clust2sect>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d101      	bne.n	800acb6 <dir_sdi+0xcc>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e010      	b.n	800acd8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	69da      	ldr	r2, [r3, #28]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	0a5b      	lsrs	r3, r3, #9
 800acbe:	441a      	add	r2, r3
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd0:	441a      	add	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3718      	adds	r7, #24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	695b      	ldr	r3, [r3, #20]
 800acf4:	3320      	adds	r3, #32
 800acf6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	69db      	ldr	r3, [r3, #28]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d003      	beq.n	800ad08 <dir_next+0x28>
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad06:	d301      	bcc.n	800ad0c <dir_next+0x2c>
 800ad08:	2304      	movs	r3, #4
 800ad0a:	e0aa      	b.n	800ae62 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 8098 	bne.w	800ae48 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	1c5a      	adds	r2, r3, #1
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10b      	bne.n	800ad42 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	095b      	lsrs	r3, r3, #5
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	8912      	ldrh	r2, [r2, #8]
 800ad32:	4293      	cmp	r3, r2
 800ad34:	f0c0 8088 	bcc.w	800ae48 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	61da      	str	r2, [r3, #28]
 800ad3e:	2304      	movs	r3, #4
 800ad40:	e08f      	b.n	800ae62 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	0a5b      	lsrs	r3, r3, #9
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	8952      	ldrh	r2, [r2, #10]
 800ad4a:	3a01      	subs	r2, #1
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d17a      	bne.n	800ae48 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	f7ff fc83 	bl	800a666 <get_fat>
 800ad60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d801      	bhi.n	800ad6c <dir_next+0x8c>
 800ad68:	2302      	movs	r3, #2
 800ad6a:	e07a      	b.n	800ae62 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad72:	d101      	bne.n	800ad78 <dir_next+0x98>
 800ad74:	2301      	movs	r3, #1
 800ad76:	e074      	b.n	800ae62 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d358      	bcc.n	800ae34 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	61da      	str	r2, [r3, #28]
 800ad8e:	2304      	movs	r3, #4
 800ad90:	e067      	b.n	800ae62 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	4619      	mov	r1, r3
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	f7ff fe59 	bl	800aa52 <create_chain>
 800ada0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <dir_next+0xcc>
 800ada8:	2307      	movs	r3, #7
 800adaa:	e05a      	b.n	800ae62 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <dir_next+0xd6>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e055      	b.n	800ae62 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adbc:	d101      	bne.n	800adc2 <dir_next+0xe2>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e04f      	b.n	800ae62 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f7ff fb50 	bl	800a468 <sync_window>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <dir_next+0xf2>
 800adce:	2301      	movs	r3, #1
 800add0:	e047      	b.n	800ae62 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3334      	adds	r3, #52	@ 0x34
 800add6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adda:	2100      	movs	r1, #0
 800addc:	4618      	mov	r0, r3
 800adde:	f7ff f97a 	bl	800a0d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ade2:	2300      	movs	r3, #0
 800ade4:	613b      	str	r3, [r7, #16]
 800ade6:	6979      	ldr	r1, [r7, #20]
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f7ff fc1d 	bl	800a628 <clust2sect>
 800adee:	4602      	mov	r2, r0
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	631a      	str	r2, [r3, #48]	@ 0x30
 800adf4:	e012      	b.n	800ae1c <dir_next+0x13c>
						fs->wflag = 1;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2201      	movs	r2, #1
 800adfa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f7ff fb33 	bl	800a468 <sync_window>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <dir_next+0x12c>
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e02a      	b.n	800ae62 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	613b      	str	r3, [r7, #16]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	895b      	ldrh	r3, [r3, #10]
 800ae20:	461a      	mov	r2, r3
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d3e6      	bcc.n	800adf6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	1ad2      	subs	r2, r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	697a      	ldr	r2, [r7, #20]
 800ae38:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ae3a:	6979      	ldr	r1, [r7, #20]
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	f7ff fbf3 	bl	800a628 <clust2sect>
 800ae42:	4602      	mov	r2, r0
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	441a      	add	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3718      	adds	r7, #24
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b086      	sub	sp, #24
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f7ff feb4 	bl	800abea <dir_sdi>
 800ae82:	4603      	mov	r3, r0
 800ae84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d12b      	bne.n	800aee4 <dir_alloc+0x7a>
		n = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	69db      	ldr	r3, [r3, #28]
 800ae94:	4619      	mov	r1, r3
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	f7ff fb2a 	bl	800a4f0 <move_window>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aea0:	7dfb      	ldrb	r3, [r7, #23]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d11d      	bne.n	800aee2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6a1b      	ldr	r3, [r3, #32]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2be5      	cmp	r3, #229	@ 0xe5
 800aeae:	d004      	beq.n	800aeba <dir_alloc+0x50>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d107      	bne.n	800aeca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	3301      	adds	r3, #1
 800aebe:	613b      	str	r3, [r7, #16]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d102      	bne.n	800aece <dir_alloc+0x64>
 800aec8:	e00c      	b.n	800aee4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aeca:	2300      	movs	r3, #0
 800aecc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aece:	2101      	movs	r1, #1
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff ff05 	bl	800ace0 <dir_next>
 800aed6:	4603      	mov	r3, r0
 800aed8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aeda:	7dfb      	ldrb	r3, [r7, #23]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d0d7      	beq.n	800ae90 <dir_alloc+0x26>
 800aee0:	e000      	b.n	800aee4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aee2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aee4:	7dfb      	ldrb	r3, [r7, #23]
 800aee6:	2b04      	cmp	r3, #4
 800aee8:	d101      	bne.n	800aeee <dir_alloc+0x84>
 800aeea:	2307      	movs	r3, #7
 800aeec:	75fb      	strb	r3, [r7, #23]
	return res;
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	331a      	adds	r3, #26
 800af06:	4618      	mov	r0, r3
 800af08:	f7ff f842 	bl	8009f90 <ld_word>
 800af0c:	4603      	mov	r3, r0
 800af0e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	2b03      	cmp	r3, #3
 800af16:	d109      	bne.n	800af2c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	3314      	adds	r3, #20
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7ff f837 	bl	8009f90 <ld_word>
 800af22:	4603      	mov	r3, r0
 800af24:	041b      	lsls	r3, r3, #16
 800af26:	68fa      	ldr	r2, [r7, #12]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800af2c:	68fb      	ldr	r3, [r7, #12]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	60b9      	str	r1, [r7, #8]
 800af40:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	331a      	adds	r3, #26
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	b292      	uxth	r2, r2
 800af4a:	4611      	mov	r1, r2
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7ff f85a 	bl	800a006 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	2b03      	cmp	r3, #3
 800af58:	d109      	bne.n	800af6e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	f103 0214 	add.w	r2, r3, #20
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	0c1b      	lsrs	r3, r3, #16
 800af64:	b29b      	uxth	r3, r3
 800af66:	4619      	mov	r1, r3
 800af68:	4610      	mov	r0, r2
 800af6a:	f7ff f84c 	bl	800a006 <st_word>
	}
}
 800af6e:	bf00      	nop
 800af70:	3710      	adds	r7, #16
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800af78:	b590      	push	{r4, r7, lr}
 800af7a:	b087      	sub	sp, #28
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	331a      	adds	r3, #26
 800af86:	4618      	mov	r0, r3
 800af88:	f7ff f802 	bl	8009f90 <ld_word>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d001      	beq.n	800af96 <cmp_lfn+0x1e>
 800af92:	2300      	movs	r3, #0
 800af94:	e059      	b.n	800b04a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af9e:	1e5a      	subs	r2, r3, #1
 800afa0:	4613      	mov	r3, r2
 800afa2:	005b      	lsls	r3, r3, #1
 800afa4:	4413      	add	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4413      	add	r3, r2
 800afaa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800afac:	2301      	movs	r3, #1
 800afae:	81fb      	strh	r3, [r7, #14]
 800afb0:	2300      	movs	r3, #0
 800afb2:	613b      	str	r3, [r7, #16]
 800afb4:	e033      	b.n	800b01e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800afb6:	4a27      	ldr	r2, [pc, #156]	@ (800b054 <cmp_lfn+0xdc>)
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	4413      	add	r3, r2
 800afbc:	781b      	ldrb	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	4413      	add	r3, r2
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fe ffe3 	bl	8009f90 <ld_word>
 800afca:	4603      	mov	r3, r0
 800afcc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800afce:	89fb      	ldrh	r3, [r7, #14]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01a      	beq.n	800b00a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2bfe      	cmp	r3, #254	@ 0xfe
 800afd8:	d812      	bhi.n	800b000 <cmp_lfn+0x88>
 800afda:	89bb      	ldrh	r3, [r7, #12]
 800afdc:	4618      	mov	r0, r3
 800afde:	f001 ff93 	bl	800cf08 <ff_wtoupper>
 800afe2:	4603      	mov	r3, r0
 800afe4:	461c      	mov	r4, r3
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	617a      	str	r2, [r7, #20]
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	4413      	add	r3, r2
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	4618      	mov	r0, r3
 800aff6:	f001 ff87 	bl	800cf08 <ff_wtoupper>
 800affa:	4603      	mov	r3, r0
 800affc:	429c      	cmp	r4, r3
 800affe:	d001      	beq.n	800b004 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b000:	2300      	movs	r3, #0
 800b002:	e022      	b.n	800b04a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b004:	89bb      	ldrh	r3, [r7, #12]
 800b006:	81fb      	strh	r3, [r7, #14]
 800b008:	e006      	b.n	800b018 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b00a:	89bb      	ldrh	r3, [r7, #12]
 800b00c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b010:	4293      	cmp	r3, r2
 800b012:	d001      	beq.n	800b018 <cmp_lfn+0xa0>
 800b014:	2300      	movs	r3, #0
 800b016:	e018      	b.n	800b04a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	3301      	adds	r3, #1
 800b01c:	613b      	str	r3, [r7, #16]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b0c      	cmp	r3, #12
 800b022:	d9c8      	bls.n	800afb6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00b      	beq.n	800b048 <cmp_lfn+0xd0>
 800b030:	89fb      	ldrh	r3, [r7, #14]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d008      	beq.n	800b048 <cmp_lfn+0xd0>
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	4413      	add	r3, r2
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <cmp_lfn+0xd0>
 800b044:	2300      	movs	r3, #0
 800b046:	e000      	b.n	800b04a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b048:	2301      	movs	r3, #1
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd90      	pop	{r4, r7, pc}
 800b052:	bf00      	nop
 800b054:	08010480 	.word	0x08010480

0800b058 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	331a      	adds	r3, #26
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe ff92 	bl	8009f90 <ld_word>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d001      	beq.n	800b076 <pick_lfn+0x1e>
 800b072:	2300      	movs	r3, #0
 800b074:	e04d      	b.n	800b112 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	781b      	ldrb	r3, [r3, #0]
 800b07a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b07e:	1e5a      	subs	r2, r3, #1
 800b080:	4613      	mov	r3, r2
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	4413      	add	r3, r2
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	4413      	add	r3, r2
 800b08a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b08c:	2301      	movs	r3, #1
 800b08e:	81fb      	strh	r3, [r7, #14]
 800b090:	2300      	movs	r3, #0
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	e028      	b.n	800b0e8 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b096:	4a21      	ldr	r2, [pc, #132]	@ (800b11c <pick_lfn+0xc4>)
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	4413      	add	r3, r2
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7fe ff73 	bl	8009f90 <ld_word>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b0ae:	89fb      	ldrh	r3, [r7, #14]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d00f      	beq.n	800b0d4 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0b8:	d901      	bls.n	800b0be <pick_lfn+0x66>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	e029      	b.n	800b112 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b0be:	89bb      	ldrh	r3, [r7, #12]
 800b0c0:	81fb      	strh	r3, [r7, #14]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	1c5a      	adds	r2, r3, #1
 800b0c6:	617a      	str	r2, [r7, #20]
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	89fa      	ldrh	r2, [r7, #14]
 800b0d0:	801a      	strh	r2, [r3, #0]
 800b0d2:	e006      	b.n	800b0e2 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b0d4:	89bb      	ldrh	r3, [r7, #12]
 800b0d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d001      	beq.n	800b0e2 <pick_lfn+0x8a>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e017      	b.n	800b112 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	3301      	adds	r3, #1
 800b0e6:	613b      	str	r3, [r7, #16]
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	2b0c      	cmp	r3, #12
 800b0ec:	d9d3      	bls.n	800b096 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2bfe      	cmp	r3, #254	@ 0xfe
 800b0fe:	d901      	bls.n	800b104 <pick_lfn+0xac>
 800b100:	2300      	movs	r3, #0
 800b102:	e006      	b.n	800b112 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	005b      	lsls	r3, r3, #1
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	4413      	add	r3, r2
 800b10c:	2200      	movs	r2, #0
 800b10e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b110:	2301      	movs	r3, #1
}
 800b112:	4618      	mov	r0, r3
 800b114:	3718      	adds	r7, #24
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	08010480 	.word	0x08010480

0800b120 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	4611      	mov	r1, r2
 800b12c:	461a      	mov	r2, r3
 800b12e:	460b      	mov	r3, r1
 800b130:	71fb      	strb	r3, [r7, #7]
 800b132:	4613      	mov	r3, r2
 800b134:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	330d      	adds	r3, #13
 800b13a:	79ba      	ldrb	r2, [r7, #6]
 800b13c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	330b      	adds	r3, #11
 800b142:	220f      	movs	r2, #15
 800b144:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	330c      	adds	r3, #12
 800b14a:	2200      	movs	r2, #0
 800b14c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	331a      	adds	r3, #26
 800b152:	2100      	movs	r1, #0
 800b154:	4618      	mov	r0, r3
 800b156:	f7fe ff56 	bl	800a006 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	1e5a      	subs	r2, r3, #1
 800b15e:	4613      	mov	r3, r2
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	4413      	add	r3, r2
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	82fb      	strh	r3, [r7, #22]
 800b16e:	2300      	movs	r3, #0
 800b170:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b172:	8afb      	ldrh	r3, [r7, #22]
 800b174:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b178:	4293      	cmp	r3, r2
 800b17a:	d007      	beq.n	800b18c <put_lfn+0x6c>
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	61fa      	str	r2, [r7, #28]
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4413      	add	r3, r2
 800b188:	881b      	ldrh	r3, [r3, #0]
 800b18a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b18c:	4a17      	ldr	r2, [pc, #92]	@ (800b1ec <put_lfn+0xcc>)
 800b18e:	69bb      	ldr	r3, [r7, #24]
 800b190:	4413      	add	r3, r2
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	4413      	add	r3, r2
 800b19a:	8afa      	ldrh	r2, [r7, #22]
 800b19c:	4611      	mov	r1, r2
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fe ff31 	bl	800a006 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b1a4:	8afb      	ldrh	r3, [r7, #22]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d102      	bne.n	800b1b0 <put_lfn+0x90>
 800b1aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b1ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	61bb      	str	r3, [r7, #24]
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b0c      	cmp	r3, #12
 800b1ba:	d9da      	bls.n	800b172 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b1bc:	8afb      	ldrh	r3, [r7, #22]
 800b1be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d006      	beq.n	800b1d4 <put_lfn+0xb4>
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	005b      	lsls	r3, r3, #1
 800b1ca:	68fa      	ldr	r2, [r7, #12]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	881b      	ldrh	r3, [r3, #0]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d103      	bne.n	800b1dc <put_lfn+0xbc>
 800b1d4:	79fb      	ldrb	r3, [r7, #7]
 800b1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	79fa      	ldrb	r2, [r7, #7]
 800b1e0:	701a      	strb	r2, [r3, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	3720      	adds	r7, #32
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	08010480 	.word	0x08010480

0800b1f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b08c      	sub	sp, #48	@ 0x30
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b1fe:	220b      	movs	r2, #11
 800b200:	68b9      	ldr	r1, [r7, #8]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f7fe ff46 	bl	800a094 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b05      	cmp	r3, #5
 800b20c:	d929      	bls.n	800b262 <gen_numname+0x72>
		sr = seq;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b212:	e020      	b.n	800b256 <gen_numname+0x66>
			wc = *lfn++;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	1c9a      	adds	r2, r3, #2
 800b218:	607a      	str	r2, [r7, #4]
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b21e:	2300      	movs	r3, #0
 800b220:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b222:	e015      	b.n	800b250 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	005a      	lsls	r2, r3, #1
 800b228:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	4413      	add	r3, r2
 800b230:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b232:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b234:	085b      	lsrs	r3, r3, #1
 800b236:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <gen_numname+0x5a>
 800b242:	69fa      	ldr	r2, [r7, #28]
 800b244:	4b30      	ldr	r3, [pc, #192]	@ (800b308 <gen_numname+0x118>)
 800b246:	4053      	eors	r3, r2
 800b248:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b24c:	3301      	adds	r3, #1
 800b24e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b252:	2b0f      	cmp	r3, #15
 800b254:	d9e6      	bls.n	800b224 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1da      	bne.n	800b214 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b262:	2307      	movs	r3, #7
 800b264:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	f003 030f 	and.w	r3, r3, #15
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	3330      	adds	r3, #48	@ 0x30
 800b272:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b27a:	2b39      	cmp	r3, #57	@ 0x39
 800b27c:	d904      	bls.n	800b288 <gen_numname+0x98>
 800b27e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b282:	3307      	adds	r3, #7
 800b284:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28a:	1e5a      	subs	r2, r3, #1
 800b28c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b28e:	3330      	adds	r3, #48	@ 0x30
 800b290:	443b      	add	r3, r7
 800b292:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b296:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	091b      	lsrs	r3, r3, #4
 800b29e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1df      	bne.n	800b266 <gen_numname+0x76>
	ns[i] = '~';
 800b2a6:	f107 0214 	add.w	r2, r7, #20
 800b2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ac:	4413      	add	r3, r2
 800b2ae:	227e      	movs	r2, #126	@ 0x7e
 800b2b0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2b6:	e002      	b.n	800b2be <gen_numname+0xce>
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d205      	bcs.n	800b2d2 <gen_numname+0xe2>
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	4413      	add	r3, r2
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	2b20      	cmp	r3, #32
 800b2d0:	d1f2      	bne.n	800b2b8 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2d4:	2b07      	cmp	r3, #7
 800b2d6:	d807      	bhi.n	800b2e8 <gen_numname+0xf8>
 800b2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2da:	1c5a      	adds	r2, r3, #1
 800b2dc:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b2de:	3330      	adds	r3, #48	@ 0x30
 800b2e0:	443b      	add	r3, r7
 800b2e2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b2e6:	e000      	b.n	800b2ea <gen_numname+0xfa>
 800b2e8:	2120      	movs	r1, #32
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4413      	add	r3, r2
 800b2f4:	460a      	mov	r2, r1
 800b2f6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	2b07      	cmp	r3, #7
 800b2fc:	d9e9      	bls.n	800b2d2 <gen_numname+0xe2>
}
 800b2fe:	bf00      	nop
 800b300:	bf00      	nop
 800b302:	3730      	adds	r7, #48	@ 0x30
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}
 800b308:	00011021 	.word	0x00011021

0800b30c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b314:	2300      	movs	r3, #0
 800b316:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b318:	230b      	movs	r3, #11
 800b31a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
 800b31e:	b2da      	uxtb	r2, r3
 800b320:	0852      	lsrs	r2, r2, #1
 800b322:	01db      	lsls	r3, r3, #7
 800b324:	4313      	orrs	r3, r2
 800b326:	b2da      	uxtb	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	1c59      	adds	r1, r3, #1
 800b32c:	6079      	str	r1, [r7, #4]
 800b32e:	781b      	ldrb	r3, [r3, #0]
 800b330:	4413      	add	r3, r2
 800b332:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	3b01      	subs	r3, #1
 800b338:	60bb      	str	r3, [r7, #8]
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1ed      	bne.n	800b31c <sum_sfn+0x10>
	return sum;
 800b340:	7bfb      	ldrb	r3, [r7, #15]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b086      	sub	sp, #24
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800b358:	2304      	movs	r3, #4
 800b35a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800b362:	23ff      	movs	r3, #255	@ 0xff
 800b364:	757b      	strb	r3, [r7, #21]
 800b366:	23ff      	movs	r3, #255	@ 0xff
 800b368:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b36a:	e081      	b.n	800b470 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	69db      	ldr	r3, [r3, #28]
 800b370:	4619      	mov	r1, r3
 800b372:	6938      	ldr	r0, [r7, #16]
 800b374:	f7ff f8bc 	bl	800a4f0 <move_window>
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d17c      	bne.n	800b47c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	781b      	ldrb	r3, [r3, #0]
 800b388:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b38a:	7dbb      	ldrb	r3, [r7, #22]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b390:	2304      	movs	r3, #4
 800b392:	75fb      	strb	r3, [r7, #23]
 800b394:	e077      	b.n	800b486 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	330b      	adds	r3, #11
 800b39c:	781b      	ldrb	r3, [r3, #0]
 800b39e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3a2:	73fb      	strb	r3, [r7, #15]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	7bfa      	ldrb	r2, [r7, #15]
 800b3a8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b3aa:	7dbb      	ldrb	r3, [r7, #22]
 800b3ac:	2be5      	cmp	r3, #229	@ 0xe5
 800b3ae:	d00e      	beq.n	800b3ce <dir_read+0x80>
 800b3b0:	7dbb      	ldrb	r3, [r7, #22]
 800b3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b3b4:	d00b      	beq.n	800b3ce <dir_read+0x80>
 800b3b6:	7bfb      	ldrb	r3, [r7, #15]
 800b3b8:	f023 0320 	bic.w	r3, r3, #32
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	bf0c      	ite	eq
 800b3c0:	2301      	moveq	r3, #1
 800b3c2:	2300      	movne	r3, #0
 800b3c4:	b2db      	uxtb	r3, r3
 800b3c6:	461a      	mov	r2, r3
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d002      	beq.n	800b3d4 <dir_read+0x86>
				ord = 0xFF;
 800b3ce:	23ff      	movs	r3, #255	@ 0xff
 800b3d0:	757b      	strb	r3, [r7, #21]
 800b3d2:	e044      	b.n	800b45e <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	2b0f      	cmp	r3, #15
 800b3d8:	d12f      	bne.n	800b43a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b3da:	7dbb      	ldrb	r3, [r7, #22]
 800b3dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00d      	beq.n	800b400 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	7b5b      	ldrb	r3, [r3, #13]
 800b3ea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b3ec:	7dbb      	ldrb	r3, [r7, #22]
 800b3ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3f2:	75bb      	strb	r3, [r7, #22]
 800b3f4:	7dbb      	ldrb	r3, [r7, #22]
 800b3f6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	695a      	ldr	r2, [r3, #20]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b400:	7dba      	ldrb	r2, [r7, #22]
 800b402:	7d7b      	ldrb	r3, [r7, #21]
 800b404:	429a      	cmp	r2, r3
 800b406:	d115      	bne.n	800b434 <dir_read+0xe6>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
 800b40c:	330d      	adds	r3, #13
 800b40e:	781b      	ldrb	r3, [r3, #0]
 800b410:	7d3a      	ldrb	r2, [r7, #20]
 800b412:	429a      	cmp	r2, r3
 800b414:	d10e      	bne.n	800b434 <dir_read+0xe6>
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	4619      	mov	r1, r3
 800b420:	4610      	mov	r0, r2
 800b422:	f7ff fe19 	bl	800b058 <pick_lfn>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <dir_read+0xe6>
 800b42c:	7d7b      	ldrb	r3, [r7, #21]
 800b42e:	3b01      	subs	r3, #1
 800b430:	b2db      	uxtb	r3, r3
 800b432:	e000      	b.n	800b436 <dir_read+0xe8>
 800b434:	23ff      	movs	r3, #255	@ 0xff
 800b436:	757b      	strb	r3, [r7, #21]
 800b438:	e011      	b.n	800b45e <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b43a:	7d7b      	ldrb	r3, [r7, #21]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d109      	bne.n	800b454 <dir_read+0x106>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	4618      	mov	r0, r3
 800b446:	f7ff ff61 	bl	800b30c <sum_sfn>
 800b44a:	4603      	mov	r3, r0
 800b44c:	461a      	mov	r2, r3
 800b44e:	7d3b      	ldrb	r3, [r7, #20]
 800b450:	4293      	cmp	r3, r2
 800b452:	d015      	beq.n	800b480 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f04f 32ff 	mov.w	r2, #4294967295
 800b45a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800b45c:	e010      	b.n	800b480 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b45e:	2100      	movs	r1, #0
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fc3d 	bl	800ace0 <dir_next>
 800b466:	4603      	mov	r3, r0
 800b468:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d109      	bne.n	800b484 <dir_read+0x136>
	while (dp->sect) {
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	69db      	ldr	r3, [r3, #28]
 800b474:	2b00      	cmp	r3, #0
 800b476:	f47f af79 	bne.w	800b36c <dir_read+0x1e>
 800b47a:	e004      	b.n	800b486 <dir_read+0x138>
		if (res != FR_OK) break;
 800b47c:	bf00      	nop
 800b47e:	e002      	b.n	800b486 <dir_read+0x138>
					break;
 800b480:	bf00      	nop
 800b482:	e000      	b.n	800b486 <dir_read+0x138>
		if (res != FR_OK) break;
 800b484:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b486:	7dfb      	ldrb	r3, [r7, #23]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <dir_read+0x144>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	61da      	str	r2, [r3, #28]
	return res;
 800b492:	7dfb      	ldrb	r3, [r7, #23]
}
 800b494:	4618      	mov	r0, r3
 800b496:	3718      	adds	r7, #24
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff fb9c 	bl	800abea <dir_sdi>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <dir_find+0x24>
 800b4bc:	7dfb      	ldrb	r3, [r7, #23]
 800b4be:	e0a9      	b.n	800b614 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b4c0:	23ff      	movs	r3, #255	@ 0xff
 800b4c2:	753b      	strb	r3, [r7, #20]
 800b4c4:	7d3b      	ldrb	r3, [r7, #20]
 800b4c6:	757b      	strb	r3, [r7, #21]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	69db      	ldr	r3, [r3, #28]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6938      	ldr	r0, [r7, #16]
 800b4d8:	f7ff f80a 	bl	800a4f0 <move_window>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b4e0:	7dfb      	ldrb	r3, [r7, #23]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	f040 8090 	bne.w	800b608 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b4f0:	7dbb      	ldrb	r3, [r7, #22]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d102      	bne.n	800b4fc <dir_find+0x60>
 800b4f6:	2304      	movs	r3, #4
 800b4f8:	75fb      	strb	r3, [r7, #23]
 800b4fa:	e08a      	b.n	800b612 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	330b      	adds	r3, #11
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b508:	73fb      	strb	r3, [r7, #15]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7bfa      	ldrb	r2, [r7, #15]
 800b50e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b510:	7dbb      	ldrb	r3, [r7, #22]
 800b512:	2be5      	cmp	r3, #229	@ 0xe5
 800b514:	d007      	beq.n	800b526 <dir_find+0x8a>
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d009      	beq.n	800b534 <dir_find+0x98>
 800b520:	7bfb      	ldrb	r3, [r7, #15]
 800b522:	2b0f      	cmp	r3, #15
 800b524:	d006      	beq.n	800b534 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b526:	23ff      	movs	r3, #255	@ 0xff
 800b528:	757b      	strb	r3, [r7, #21]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f04f 32ff 	mov.w	r2, #4294967295
 800b530:	631a      	str	r2, [r3, #48]	@ 0x30
 800b532:	e05e      	b.n	800b5f2 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b534:	7bfb      	ldrb	r3, [r7, #15]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d136      	bne.n	800b5a8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b540:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d154      	bne.n	800b5f2 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b548:	7dbb      	ldrb	r3, [r7, #22]
 800b54a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	7b5b      	ldrb	r3, [r3, #13]
 800b558:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b55a:	7dbb      	ldrb	r3, [r7, #22]
 800b55c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b560:	75bb      	strb	r3, [r7, #22]
 800b562:	7dbb      	ldrb	r3, [r7, #22]
 800b564:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	695a      	ldr	r2, [r3, #20]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b56e:	7dba      	ldrb	r2, [r7, #22]
 800b570:	7d7b      	ldrb	r3, [r7, #21]
 800b572:	429a      	cmp	r2, r3
 800b574:	d115      	bne.n	800b5a2 <dir_find+0x106>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	330d      	adds	r3, #13
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	7d3a      	ldrb	r2, [r7, #20]
 800b580:	429a      	cmp	r2, r3
 800b582:	d10e      	bne.n	800b5a2 <dir_find+0x106>
 800b584:	693b      	ldr	r3, [r7, #16]
 800b586:	68da      	ldr	r2, [r3, #12]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a1b      	ldr	r3, [r3, #32]
 800b58c:	4619      	mov	r1, r3
 800b58e:	4610      	mov	r0, r2
 800b590:	f7ff fcf2 	bl	800af78 <cmp_lfn>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <dir_find+0x106>
 800b59a:	7d7b      	ldrb	r3, [r7, #21]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b2db      	uxtb	r3, r3
 800b5a0:	e000      	b.n	800b5a4 <dir_find+0x108>
 800b5a2:	23ff      	movs	r3, #255	@ 0xff
 800b5a4:	757b      	strb	r3, [r7, #21]
 800b5a6:	e024      	b.n	800b5f2 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b5a8:	7d7b      	ldrb	r3, [r7, #21]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d109      	bne.n	800b5c2 <dir_find+0x126>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a1b      	ldr	r3, [r3, #32]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff feaa 	bl	800b30c <sum_sfn>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	7d3b      	ldrb	r3, [r7, #20]
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d024      	beq.n	800b60c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b5c8:	f003 0301 	and.w	r3, r3, #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d10a      	bne.n	800b5e6 <dir_find+0x14a>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6a18      	ldr	r0, [r3, #32]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3324      	adds	r3, #36	@ 0x24
 800b5d8:	220b      	movs	r2, #11
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f7fe fd96 	bl	800a10c <mem_cmp>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d014      	beq.n	800b610 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b5e6:	23ff      	movs	r3, #255	@ 0xff
 800b5e8:	757b      	strb	r3, [r7, #21]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff fb73 	bl	800ace0 <dir_next>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b00      	cmp	r3, #0
 800b602:	f43f af65 	beq.w	800b4d0 <dir_find+0x34>
 800b606:	e004      	b.n	800b612 <dir_find+0x176>
		if (res != FR_OK) break;
 800b608:	bf00      	nop
 800b60a:	e002      	b.n	800b612 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b60c:	bf00      	nop
 800b60e:	e000      	b.n	800b612 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b610:	bf00      	nop

	return res;
 800b612:	7dfb      	ldrb	r3, [r7, #23]
}
 800b614:	4618      	mov	r0, r3
 800b616:	3718      	adds	r7, #24
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b08c      	sub	sp, #48	@ 0x30
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b630:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <dir_register+0x20>
 800b638:	2306      	movs	r3, #6
 800b63a:	e0e0      	b.n	800b7fe <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b63c:	2300      	movs	r3, #0
 800b63e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b640:	e002      	b.n	800b648 <dir_register+0x2c>
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	3301      	adds	r3, #1
 800b646:	627b      	str	r3, [r7, #36]	@ 0x24
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	68da      	ldr	r2, [r3, #12]
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	4413      	add	r3, r2
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1f4      	bne.n	800b642 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800b65e:	f107 030c 	add.w	r3, r7, #12
 800b662:	220c      	movs	r2, #12
 800b664:	4618      	mov	r0, r3
 800b666:	f7fe fd15 	bl	800a094 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b66a:	7dfb      	ldrb	r3, [r7, #23]
 800b66c:	f003 0301 	and.w	r3, r3, #1
 800b670:	2b00      	cmp	r3, #0
 800b672:	d032      	beq.n	800b6da <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2240      	movs	r2, #64	@ 0x40
 800b678:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800b67c:	2301      	movs	r3, #1
 800b67e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b680:	e016      	b.n	800b6b0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	68da      	ldr	r2, [r3, #12]
 800b68c:	f107 010c 	add.w	r1, r7, #12
 800b690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b692:	f7ff fdad 	bl	800b1f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7ff ff00 	bl	800b49c <dir_find>
 800b69c:	4603      	mov	r3, r0
 800b69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800b6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d106      	bne.n	800b6b8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ac:	3301      	adds	r3, #1
 800b6ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b6b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b2:	2b63      	cmp	r3, #99	@ 0x63
 800b6b4:	d9e5      	bls.n	800b682 <dir_register+0x66>
 800b6b6:	e000      	b.n	800b6ba <dir_register+0x9e>
			if (res != FR_OK) break;
 800b6b8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	2b64      	cmp	r3, #100	@ 0x64
 800b6be:	d101      	bne.n	800b6c4 <dir_register+0xa8>
 800b6c0:	2307      	movs	r3, #7
 800b6c2:	e09c      	b.n	800b7fe <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b6c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d002      	beq.n	800b6d2 <dir_register+0xb6>
 800b6cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b6d0:	e095      	b.n	800b7fe <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b6d2:	7dfa      	ldrb	r2, [r7, #23]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	f003 0302 	and.w	r3, r3, #2
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d007      	beq.n	800b6f4 <dir_register+0xd8>
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e6:	330c      	adds	r3, #12
 800b6e8:	4a47      	ldr	r2, [pc, #284]	@ (800b808 <dir_register+0x1ec>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	089b      	lsrs	r3, r3, #2
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <dir_register+0xda>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b6f8:	6a39      	ldr	r1, [r7, #32]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f7ff fbb5 	bl	800ae6a <dir_alloc>
 800b700:	4603      	mov	r3, r0
 800b702:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b706:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d148      	bne.n	800b7a0 <dir_register+0x184>
 800b70e:	6a3b      	ldr	r3, [r7, #32]
 800b710:	3b01      	subs	r3, #1
 800b712:	623b      	str	r3, [r7, #32]
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d042      	beq.n	800b7a0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	695a      	ldr	r2, [r3, #20]
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	015b      	lsls	r3, r3, #5
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7ff fa5f 	bl	800abea <dir_sdi>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b732:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b736:	2b00      	cmp	r3, #0
 800b738:	d132      	bne.n	800b7a0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3324      	adds	r3, #36	@ 0x24
 800b73e:	4618      	mov	r0, r3
 800b740:	f7ff fde4 	bl	800b30c <sum_sfn>
 800b744:	4603      	mov	r3, r0
 800b746:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	69db      	ldr	r3, [r3, #28]
 800b74c:	4619      	mov	r1, r3
 800b74e:	69f8      	ldr	r0, [r7, #28]
 800b750:	f7fe fece 	bl	800a4f0 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800b75a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d11d      	bne.n	800b79e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	68d8      	ldr	r0, [r3, #12]
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6a19      	ldr	r1, [r3, #32]
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	7efb      	ldrb	r3, [r7, #27]
 800b770:	f7ff fcd6 	bl	800b120 <put_lfn>
				fs->wflag = 1;
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	2201      	movs	r2, #1
 800b778:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b77a:	2100      	movs	r1, #0
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7ff faaf 	bl	800ace0 <dir_next>
 800b782:	4603      	mov	r3, r0
 800b784:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800b788:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d107      	bne.n	800b7a0 <dir_register+0x184>
 800b790:	6a3b      	ldr	r3, [r7, #32]
 800b792:	3b01      	subs	r3, #1
 800b794:	623b      	str	r3, [r7, #32]
 800b796:	6a3b      	ldr	r3, [r7, #32]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1d5      	bne.n	800b748 <dir_register+0x12c>
 800b79c:	e000      	b.n	800b7a0 <dir_register+0x184>
				if (res != FR_OK) break;
 800b79e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b7a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d128      	bne.n	800b7fa <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	69db      	ldr	r3, [r3, #28]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	69f8      	ldr	r0, [r7, #28]
 800b7b0:	f7fe fe9e 	bl	800a4f0 <move_window>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800b7ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d11b      	bne.n	800b7fa <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	2220      	movs	r2, #32
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fc83 	bl	800a0d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6a18      	ldr	r0, [r3, #32]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	3324      	adds	r3, #36	@ 0x24
 800b7d8:	220b      	movs	r2, #11
 800b7da:	4619      	mov	r1, r3
 800b7dc:	f7fe fc5a 	bl	800a094 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6a1b      	ldr	r3, [r3, #32]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	f002 0218 	and.w	r2, r2, #24
 800b7f0:	b2d2      	uxtb	r2, r2
 800b7f2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b7fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3730      	adds	r7, #48	@ 0x30
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop
 800b808:	4ec4ec4f 	.word	0x4ec4ec4f

0800b80c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b088      	sub	sp, #32
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
 800b814:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2200      	movs	r2, #0
 800b820:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	f000 80ca 	beq.w	800b9c0 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b834:	d032      	beq.n	800b89c <get_fileinfo+0x90>
			i = j = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	61bb      	str	r3, [r7, #24]
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b83e:	e01b      	b.n	800b878 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	2100      	movs	r1, #0
 800b844:	4618      	mov	r0, r3
 800b846:	f001 fb23 	bl	800ce90 <ff_convert>
 800b84a:	4603      	mov	r3, r0
 800b84c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b84e:	89fb      	ldrh	r3, [r7, #14]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d102      	bne.n	800b85a <get_fileinfo+0x4e>
 800b854:	2300      	movs	r3, #0
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e01a      	b.n	800b890 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b85a:	69fb      	ldr	r3, [r7, #28]
 800b85c:	2bfe      	cmp	r3, #254	@ 0xfe
 800b85e:	d902      	bls.n	800b866 <get_fileinfo+0x5a>
 800b860:	2300      	movs	r3, #0
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	e014      	b.n	800b890 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b866:	69fb      	ldr	r3, [r7, #28]
 800b868:	1c5a      	adds	r2, r3, #1
 800b86a:	61fa      	str	r2, [r7, #28]
 800b86c:	89fa      	ldrh	r2, [r7, #14]
 800b86e:	b2d1      	uxtb	r1, r2
 800b870:	683a      	ldr	r2, [r7, #0]
 800b872:	4413      	add	r3, r2
 800b874:	460a      	mov	r2, r1
 800b876:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	68da      	ldr	r2, [r3, #12]
 800b87c:	69bb      	ldr	r3, [r7, #24]
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	61b9      	str	r1, [r7, #24]
 800b882:	005b      	lsls	r3, r3, #1
 800b884:	4413      	add	r3, r2
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	81fb      	strh	r3, [r7, #14]
 800b88a:	89fb      	ldrh	r3, [r7, #14]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1d7      	bne.n	800b840 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	69fb      	ldr	r3, [r7, #28]
 800b894:	4413      	add	r3, r2
 800b896:	3316      	adds	r3, #22
 800b898:	2200      	movs	r2, #0
 800b89a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	61bb      	str	r3, [r7, #24]
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b8a4:	683a      	ldr	r2, [r7, #0]
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3316      	adds	r3, #22
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b8b0:	e04d      	b.n	800b94e <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6a1a      	ldr	r2, [r3, #32]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	1c59      	adds	r1, r3, #1
 800b8ba:	61f9      	str	r1, [r7, #28]
 800b8bc:	4413      	add	r3, r2
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b8c2:	7dfb      	ldrb	r3, [r7, #23]
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	d041      	beq.n	800b94c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b8c8:	7dfb      	ldrb	r3, [r7, #23]
 800b8ca:	2b05      	cmp	r3, #5
 800b8cc:	d101      	bne.n	800b8d2 <get_fileinfo+0xc6>
 800b8ce:	23e5      	movs	r3, #229	@ 0xe5
 800b8d0:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d10f      	bne.n	800b8f8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800b8d8:	89bb      	ldrh	r3, [r7, #12]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d105      	bne.n	800b8ea <get_fileinfo+0xde>
 800b8de:	683a      	ldr	r2, [r7, #0]
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	4413      	add	r3, r2
 800b8e4:	3316      	adds	r3, #22
 800b8e6:	222e      	movs	r2, #46	@ 0x2e
 800b8e8:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b8ea:	69bb      	ldr	r3, [r7, #24]
 800b8ec:	1c5a      	adds	r2, r3, #1
 800b8ee:	61ba      	str	r2, [r7, #24]
 800b8f0:	683a      	ldr	r2, [r7, #0]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	222e      	movs	r2, #46	@ 0x2e
 800b8f6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b8f8:	683a      	ldr	r2, [r7, #0]
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	3309      	adds	r3, #9
 800b900:	7dfa      	ldrb	r2, [r7, #23]
 800b902:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b904:	89bb      	ldrh	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d11c      	bne.n	800b944 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b90a:	7dfb      	ldrb	r3, [r7, #23]
 800b90c:	2b40      	cmp	r3, #64	@ 0x40
 800b90e:	d913      	bls.n	800b938 <get_fileinfo+0x12c>
 800b910:	7dfb      	ldrb	r3, [r7, #23]
 800b912:	2b5a      	cmp	r3, #90	@ 0x5a
 800b914:	d810      	bhi.n	800b938 <get_fileinfo+0x12c>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a1b      	ldr	r3, [r3, #32]
 800b91a:	330c      	adds	r3, #12
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	461a      	mov	r2, r3
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	2b08      	cmp	r3, #8
 800b924:	d901      	bls.n	800b92a <get_fileinfo+0x11e>
 800b926:	2310      	movs	r3, #16
 800b928:	e000      	b.n	800b92c <get_fileinfo+0x120>
 800b92a:	2308      	movs	r3, #8
 800b92c:	4013      	ands	r3, r2
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d002      	beq.n	800b938 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	3320      	adds	r3, #32
 800b936:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b938:	683a      	ldr	r2, [r7, #0]
 800b93a:	69bb      	ldr	r3, [r7, #24]
 800b93c:	4413      	add	r3, r2
 800b93e:	3316      	adds	r3, #22
 800b940:	7dfa      	ldrb	r2, [r7, #23]
 800b942:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b944:	69bb      	ldr	r3, [r7, #24]
 800b946:	3301      	adds	r3, #1
 800b948:	61bb      	str	r3, [r7, #24]
 800b94a:	e000      	b.n	800b94e <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800b94c:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	2b0a      	cmp	r3, #10
 800b952:	d9ae      	bls.n	800b8b2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b954:	89bb      	ldrh	r3, [r7, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10d      	bne.n	800b976 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800b95a:	683a      	ldr	r2, [r7, #0]
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	4413      	add	r3, r2
 800b960:	3316      	adds	r3, #22
 800b962:	2200      	movs	r2, #0
 800b964:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	330c      	adds	r3, #12
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d101      	bne.n	800b976 <get_fileinfo+0x16a>
 800b972:	2300      	movs	r3, #0
 800b974:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	4413      	add	r3, r2
 800b97c:	3309      	adds	r3, #9
 800b97e:	2200      	movs	r2, #0
 800b980:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6a1b      	ldr	r3, [r3, #32]
 800b986:	7ada      	ldrb	r2, [r3, #11]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6a1b      	ldr	r3, [r3, #32]
 800b990:	331c      	adds	r3, #28
 800b992:	4618      	mov	r0, r3
 800b994:	f7fe fb14 	bl	8009fc0 <ld_dword>
 800b998:	4602      	mov	r2, r0
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	3316      	adds	r3, #22
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fb0b 	bl	8009fc0 <ld_dword>
 800b9aa:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	b29a      	uxth	r2, r3
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	80da      	strh	r2, [r3, #6]
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	0c1b      	lsrs	r3, r3, #16
 800b9b8:	b29a      	uxth	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	809a      	strh	r2, [r3, #4]
 800b9be:	e000      	b.n	800b9c2 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b9c0:	bf00      	nop
}
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b08a      	sub	sp, #40	@ 0x28
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	613b      	str	r3, [r7, #16]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	1c5a      	adds	r2, r3, #1
 800b9ec:	61ba      	str	r2, [r7, #24]
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b9f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9f8:	2b1f      	cmp	r3, #31
 800b9fa:	d940      	bls.n	800ba7e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b9fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b9fe:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba00:	d006      	beq.n	800ba10 <create_name+0x48>
 800ba02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba04:	2b5c      	cmp	r3, #92	@ 0x5c
 800ba06:	d110      	bne.n	800ba2a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ba08:	e002      	b.n	800ba10 <create_name+0x48>
 800ba0a:	69bb      	ldr	r3, [r7, #24]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	61bb      	str	r3, [r7, #24]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	4413      	add	r3, r2
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	2b2f      	cmp	r3, #47	@ 0x2f
 800ba1a:	d0f6      	beq.n	800ba0a <create_name+0x42>
 800ba1c:	693a      	ldr	r2, [r7, #16]
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	4413      	add	r3, r2
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	2b5c      	cmp	r3, #92	@ 0x5c
 800ba26:	d0f0      	beq.n	800ba0a <create_name+0x42>
			break;
 800ba28:	e02a      	b.n	800ba80 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2bfe      	cmp	r3, #254	@ 0xfe
 800ba2e:	d901      	bls.n	800ba34 <create_name+0x6c>
 800ba30:	2306      	movs	r3, #6
 800ba32:	e17d      	b.n	800bd30 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ba34:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ba3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 fa26 	bl	800ce90 <ff_convert>
 800ba44:	4603      	mov	r3, r0
 800ba46:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ba48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <create_name+0x8a>
 800ba4e:	2306      	movs	r3, #6
 800ba50:	e16e      	b.n	800bd30 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ba52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba54:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba56:	d809      	bhi.n	800ba6c <create_name+0xa4>
 800ba58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	488d      	ldr	r0, [pc, #564]	@ (800bc94 <create_name+0x2cc>)
 800ba5e:	f7fe fb7c 	bl	800a15a <chk_chr>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d001      	beq.n	800ba6c <create_name+0xa4>
 800ba68:	2306      	movs	r3, #6
 800ba6a:	e161      	b.n	800bd30 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	1c5a      	adds	r2, r3, #1
 800ba70:	617a      	str	r2, [r7, #20]
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	68fa      	ldr	r2, [r7, #12]
 800ba76:	4413      	add	r3, r2
 800ba78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ba7a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ba7c:	e7b4      	b.n	800b9e8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ba7e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ba80:	693a      	ldr	r2, [r7, #16]
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	441a      	add	r2, r3
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ba8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ba8c:	2b1f      	cmp	r3, #31
 800ba8e:	d801      	bhi.n	800ba94 <create_name+0xcc>
 800ba90:	2304      	movs	r3, #4
 800ba92:	e000      	b.n	800ba96 <create_name+0xce>
 800ba94:	2300      	movs	r3, #0
 800ba96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ba9a:	e011      	b.n	800bac0 <create_name+0xf8>
		w = lfn[di - 1];
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800baa2:	4413      	add	r3, r2
 800baa4:	005b      	lsls	r3, r3, #1
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	4413      	add	r3, r2
 800baaa:	881b      	ldrh	r3, [r3, #0]
 800baac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800baae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bab0:	2b20      	cmp	r3, #32
 800bab2:	d002      	beq.n	800baba <create_name+0xf2>
 800bab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bab6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bab8:	d106      	bne.n	800bac8 <create_name+0x100>
		di--;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3b01      	subs	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1ea      	bne.n	800ba9c <create_name+0xd4>
 800bac6:	e000      	b.n	800baca <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bac8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	005b      	lsls	r3, r3, #1
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	4413      	add	r3, r2
 800bad2:	2200      	movs	r2, #0
 800bad4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d101      	bne.n	800bae0 <create_name+0x118>
 800badc:	2306      	movs	r3, #6
 800bade:	e127      	b.n	800bd30 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3324      	adds	r3, #36	@ 0x24
 800bae4:	220b      	movs	r2, #11
 800bae6:	2120      	movs	r1, #32
 800bae8:	4618      	mov	r0, r3
 800baea:	f7fe faf4 	bl	800a0d6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800baee:	2300      	movs	r3, #0
 800baf0:	61bb      	str	r3, [r7, #24]
 800baf2:	e002      	b.n	800bafa <create_name+0x132>
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	3301      	adds	r3, #1
 800baf8:	61bb      	str	r3, [r7, #24]
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4413      	add	r3, r2
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	2b20      	cmp	r3, #32
 800bb06:	d0f5      	beq.n	800baf4 <create_name+0x12c>
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	005b      	lsls	r3, r3, #1
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb14:	d0ee      	beq.n	800baf4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <create_name+0x168>
 800bb1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb20:	f043 0303 	orr.w	r3, r3, #3
 800bb24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bb28:	e002      	b.n	800bb30 <create_name+0x168>
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	3b01      	subs	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d009      	beq.n	800bb4a <create_name+0x182>
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800bb3c:	4413      	add	r3, r2
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	4413      	add	r3, r2
 800bb44:	881b      	ldrh	r3, [r3, #0]
 800bb46:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb48:	d1ef      	bne.n	800bb2a <create_name+0x162>

	i = b = 0; ni = 8;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bb50:	2300      	movs	r3, #0
 800bb52:	623b      	str	r3, [r7, #32]
 800bb54:	2308      	movs	r3, #8
 800bb56:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bb58:	69bb      	ldr	r3, [r7, #24]
 800bb5a:	1c5a      	adds	r2, r3, #1
 800bb5c:	61ba      	str	r2, [r7, #24]
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	4413      	add	r3, r2
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bb68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 8090 	beq.w	800bc90 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bb70:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb72:	2b20      	cmp	r3, #32
 800bb74:	d006      	beq.n	800bb84 <create_name+0x1bc>
 800bb76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bb78:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb7a:	d10a      	bne.n	800bb92 <create_name+0x1ca>
 800bb7c:	69ba      	ldr	r2, [r7, #24]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d006      	beq.n	800bb92 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bb84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bb88:	f043 0303 	orr.w	r3, r3, #3
 800bb8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bb90:	e07d      	b.n	800bc8e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bb92:	6a3a      	ldr	r2, [r7, #32]
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d203      	bcs.n	800bba2 <create_name+0x1da>
 800bb9a:	69ba      	ldr	r2, [r7, #24]
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d123      	bne.n	800bbea <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	2b0b      	cmp	r3, #11
 800bba6:	d106      	bne.n	800bbb6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bba8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbac:	f043 0303 	orr.w	r3, r3, #3
 800bbb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbb4:	e075      	b.n	800bca2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bbb6:	69ba      	ldr	r2, [r7, #24]
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d005      	beq.n	800bbca <create_name+0x202>
 800bbbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbc2:	f043 0303 	orr.w	r3, r3, #3
 800bbc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800bbca:	69ba      	ldr	r2, [r7, #24]
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d866      	bhi.n	800bca0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	61bb      	str	r3, [r7, #24]
 800bbd6:	2308      	movs	r3, #8
 800bbd8:	623b      	str	r3, [r7, #32]
 800bbda:	230b      	movs	r3, #11
 800bbdc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800bbde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bbe8:	e051      	b.n	800bc8e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800bbea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbec:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbee:	d914      	bls.n	800bc1a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800bbf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bbf2:	2100      	movs	r1, #0
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f001 f94b 	bl	800ce90 <ff_convert>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800bbfe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d004      	beq.n	800bc0e <create_name+0x246>
 800bc04:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc06:	3b80      	subs	r3, #128	@ 0x80
 800bc08:	4a23      	ldr	r2, [pc, #140]	@ (800bc98 <create_name+0x2d0>)
 800bc0a:	5cd3      	ldrb	r3, [r2, r3]
 800bc0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800bc0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc12:	f043 0302 	orr.w	r3, r3, #2
 800bc16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800bc1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d007      	beq.n	800bc30 <create_name+0x268>
 800bc20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc22:	4619      	mov	r1, r3
 800bc24:	481d      	ldr	r0, [pc, #116]	@ (800bc9c <create_name+0x2d4>)
 800bc26:	f7fe fa98 	bl	800a15a <chk_chr>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d008      	beq.n	800bc42 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800bc30:	235f      	movs	r3, #95	@ 0x5f
 800bc32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bc34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bc38:	f043 0303 	orr.w	r3, r3, #3
 800bc3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bc40:	e01b      	b.n	800bc7a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800bc42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc44:	2b40      	cmp	r3, #64	@ 0x40
 800bc46:	d909      	bls.n	800bc5c <create_name+0x294>
 800bc48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc4a:	2b5a      	cmp	r3, #90	@ 0x5a
 800bc4c:	d806      	bhi.n	800bc5c <create_name+0x294>
					b |= 2;
 800bc4e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc52:	f043 0302 	orr.w	r3, r3, #2
 800bc56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc5a:	e00e      	b.n	800bc7a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800bc5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc5e:	2b60      	cmp	r3, #96	@ 0x60
 800bc60:	d90b      	bls.n	800bc7a <create_name+0x2b2>
 800bc62:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc64:	2b7a      	cmp	r3, #122	@ 0x7a
 800bc66:	d808      	bhi.n	800bc7a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800bc68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc6c:	f043 0301 	orr.w	r3, r3, #1
 800bc70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bc74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bc76:	3b20      	subs	r3, #32
 800bc78:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800bc7a:	6a3b      	ldr	r3, [r7, #32]
 800bc7c:	1c5a      	adds	r2, r3, #1
 800bc7e:	623a      	str	r2, [r7, #32]
 800bc80:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800bc82:	b2d1      	uxtb	r1, r2
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	460a      	mov	r2, r1
 800bc8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800bc8e:	e763      	b.n	800bb58 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800bc90:	bf00      	nop
 800bc92:	e006      	b.n	800bca2 <create_name+0x2da>
 800bc94:	08010394 	.word	0x08010394
 800bc98:	08010400 	.word	0x08010400
 800bc9c:	080103a0 	.word	0x080103a0
			if (si > di) break;			/* No extension */
 800bca0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800bca8:	2be5      	cmp	r3, #229	@ 0xe5
 800bcaa:	d103      	bne.n	800bcb4 <create_name+0x2ec>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2205      	movs	r2, #5
 800bcb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	2b08      	cmp	r3, #8
 800bcb8:	d104      	bne.n	800bcc4 <create_name+0x2fc>
 800bcba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800bcc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcc8:	f003 030c 	and.w	r3, r3, #12
 800bccc:	2b0c      	cmp	r3, #12
 800bcce:	d005      	beq.n	800bcdc <create_name+0x314>
 800bcd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcd4:	f003 0303 	and.w	r3, r3, #3
 800bcd8:	2b03      	cmp	r3, #3
 800bcda:	d105      	bne.n	800bce8 <create_name+0x320>
 800bcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bce0:	f043 0302 	orr.w	r3, r3, #2
 800bce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800bce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bcec:	f003 0302 	and.w	r3, r3, #2
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d117      	bne.n	800bd24 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800bcf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bcf8:	f003 0303 	and.w	r3, r3, #3
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d105      	bne.n	800bd0c <create_name+0x344>
 800bd00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd04:	f043 0310 	orr.w	r3, r3, #16
 800bd08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800bd0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bd10:	f003 030c 	and.w	r3, r3, #12
 800bd14:	2b04      	cmp	r3, #4
 800bd16:	d105      	bne.n	800bd24 <create_name+0x35c>
 800bd18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bd1c:	f043 0308 	orr.w	r3, r3, #8
 800bd20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800bd2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800bd2e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3728      	adds	r7, #40	@ 0x28
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b086      	sub	sp, #24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bd46:	693b      	ldr	r3, [r7, #16]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bd4c:	e002      	b.n	800bd54 <follow_path+0x1c>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	603b      	str	r3, [r7, #0]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	2b2f      	cmp	r3, #47	@ 0x2f
 800bd5a:	d0f8      	beq.n	800bd4e <follow_path+0x16>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	2b5c      	cmp	r3, #92	@ 0x5c
 800bd62:	d0f4      	beq.n	800bd4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	2200      	movs	r2, #0
 800bd68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	2b1f      	cmp	r3, #31
 800bd70:	d80a      	bhi.n	800bd88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2280      	movs	r2, #128	@ 0x80
 800bd76:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800bd7a:	2100      	movs	r1, #0
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f7fe ff34 	bl	800abea <dir_sdi>
 800bd82:	4603      	mov	r3, r0
 800bd84:	75fb      	strb	r3, [r7, #23]
 800bd86:	e043      	b.n	800be10 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bd88:	463b      	mov	r3, r7
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	6878      	ldr	r0, [r7, #4]
 800bd8e:	f7ff fe1b 	bl	800b9c8 <create_name>
 800bd92:	4603      	mov	r3, r0
 800bd94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d134      	bne.n	800be06 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f7ff fb7d 	bl	800b49c <dir_find>
 800bda2:	4603      	mov	r3, r0
 800bda4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bdac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00a      	beq.n	800bdca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bdb4:	7dfb      	ldrb	r3, [r7, #23]
 800bdb6:	2b04      	cmp	r3, #4
 800bdb8:	d127      	bne.n	800be0a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bdba:	7afb      	ldrb	r3, [r7, #11]
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d122      	bne.n	800be0a <follow_path+0xd2>
 800bdc4:	2305      	movs	r3, #5
 800bdc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800bdc8:	e01f      	b.n	800be0a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800bdca:	7afb      	ldrb	r3, [r7, #11]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d11c      	bne.n	800be0e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	799b      	ldrb	r3, [r3, #6]
 800bdd8:	f003 0310 	and.w	r3, r3, #16
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800bde0:	2305      	movs	r3, #5
 800bde2:	75fb      	strb	r3, [r7, #23]
 800bde4:	e014      	b.n	800be10 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdf4:	4413      	add	r3, r2
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7ff f87d 	bl	800aef8 <ld_clust>
 800bdfe:	4602      	mov	r2, r0
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be04:	e7c0      	b.n	800bd88 <follow_path+0x50>
			if (res != FR_OK) break;
 800be06:	bf00      	nop
 800be08:	e002      	b.n	800be10 <follow_path+0xd8>
				break;
 800be0a:	bf00      	nop
 800be0c:	e000      	b.n	800be10 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be0e:	bf00      	nop
			}
		}
	}

	return res;
 800be10:	7dfb      	ldrb	r3, [r7, #23]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800be1a:	b480      	push	{r7}
 800be1c:	b087      	sub	sp, #28
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be22:	f04f 33ff 	mov.w	r3, #4294967295
 800be26:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d031      	beq.n	800be94 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	617b      	str	r3, [r7, #20]
 800be36:	e002      	b.n	800be3e <get_ldnumber+0x24>
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	3301      	adds	r3, #1
 800be3c:	617b      	str	r3, [r7, #20]
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	2b1f      	cmp	r3, #31
 800be44:	d903      	bls.n	800be4e <get_ldnumber+0x34>
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	2b3a      	cmp	r3, #58	@ 0x3a
 800be4c:	d1f4      	bne.n	800be38 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	2b3a      	cmp	r3, #58	@ 0x3a
 800be54:	d11c      	bne.n	800be90 <get_ldnumber+0x76>
			tp = *path;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	60fa      	str	r2, [r7, #12]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	3b30      	subs	r3, #48	@ 0x30
 800be66:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	2b09      	cmp	r3, #9
 800be6c:	d80e      	bhi.n	800be8c <get_ldnumber+0x72>
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	429a      	cmp	r2, r3
 800be74:	d10a      	bne.n	800be8c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d107      	bne.n	800be8c <get_ldnumber+0x72>
					vol = (int)i;
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	3301      	adds	r3, #1
 800be84:	617b      	str	r3, [r7, #20]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	697a      	ldr	r2, [r7, #20]
 800be8a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	e002      	b.n	800be96 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800be90:	2300      	movs	r3, #0
 800be92:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800be94:	693b      	ldr	r3, [r7, #16]
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea0:	4770      	bx	lr
	...

0800bea4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b082      	sub	sp, #8
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	70da      	strb	r2, [r3, #3]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f04f 32ff 	mov.w	r2, #4294967295
 800beba:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7fe fb16 	bl	800a4f0 <move_window>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <check_fs+0x2a>
 800beca:	2304      	movs	r3, #4
 800becc:	e038      	b.n	800bf40 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	3334      	adds	r3, #52	@ 0x34
 800bed2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7fe f85a 	bl	8009f90 <ld_word>
 800bedc:	4603      	mov	r3, r0
 800bede:	461a      	mov	r2, r3
 800bee0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d001      	beq.n	800beec <check_fs+0x48>
 800bee8:	2303      	movs	r3, #3
 800beea:	e029      	b.n	800bf40 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bef2:	2be9      	cmp	r3, #233	@ 0xe9
 800bef4:	d009      	beq.n	800bf0a <check_fs+0x66>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800befc:	2beb      	cmp	r3, #235	@ 0xeb
 800befe:	d11e      	bne.n	800bf3e <check_fs+0x9a>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800bf06:	2b90      	cmp	r3, #144	@ 0x90
 800bf08:	d119      	bne.n	800bf3e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	3334      	adds	r3, #52	@ 0x34
 800bf0e:	3336      	adds	r3, #54	@ 0x36
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe f855 	bl	8009fc0 <ld_dword>
 800bf16:	4603      	mov	r3, r0
 800bf18:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800bf1c:	4a0a      	ldr	r2, [pc, #40]	@ (800bf48 <check_fs+0xa4>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d101      	bne.n	800bf26 <check_fs+0x82>
 800bf22:	2300      	movs	r3, #0
 800bf24:	e00c      	b.n	800bf40 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	3334      	adds	r3, #52	@ 0x34
 800bf2a:	3352      	adds	r3, #82	@ 0x52
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7fe f847 	bl	8009fc0 <ld_dword>
 800bf32:	4603      	mov	r3, r0
 800bf34:	4a05      	ldr	r2, [pc, #20]	@ (800bf4c <check_fs+0xa8>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	d101      	bne.n	800bf3e <check_fs+0x9a>
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	e000      	b.n	800bf40 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bf3e:	2302      	movs	r3, #2
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}
 800bf48:	00544146 	.word	0x00544146
 800bf4c:	33544146 	.word	0x33544146

0800bf50 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b096      	sub	sp, #88	@ 0x58
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	60f8      	str	r0, [r7, #12]
 800bf58:	60b9      	str	r1, [r7, #8]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	2200      	movs	r2, #0
 800bf62:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f7ff ff58 	bl	800be1a <get_ldnumber>
 800bf6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bf6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	da01      	bge.n	800bf76 <find_volume+0x26>
 800bf72:	230b      	movs	r3, #11
 800bf74:	e230      	b.n	800c3d8 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bf76:	4aa1      	ldr	r2, [pc, #644]	@ (800c1fc <find_volume+0x2ac>)
 800bf78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf7e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <find_volume+0x3a>
 800bf86:	230c      	movs	r3, #12
 800bf88:	e226      	b.n	800c3d8 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bf8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bf90:	79fb      	ldrb	r3, [r7, #7]
 800bf92:	f023 0301 	bic.w	r3, r3, #1
 800bf96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d01a      	beq.n	800bfd6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfa2:	785b      	ldrb	r3, [r3, #1]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fd ff55 	bl	8009e54 <disk_status>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bfb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfb4:	f003 0301 	and.w	r3, r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d10c      	bne.n	800bfd6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bfbc:	79fb      	ldrb	r3, [r7, #7]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d007      	beq.n	800bfd2 <find_volume+0x82>
 800bfc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bfce:	230a      	movs	r3, #10
 800bfd0:	e202      	b.n	800c3d8 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e200      	b.n	800c3d8 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfd8:	2200      	movs	r2, #0
 800bfda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bfdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fd ff4d 	bl	8009e88 <disk_initialize>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bff4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d001      	beq.n	800c004 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c000:	2303      	movs	r3, #3
 800c002:	e1e9      	b.n	800c3d8 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c004:	79fb      	ldrb	r3, [r7, #7]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d007      	beq.n	800c01a <find_volume+0xca>
 800c00a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c00e:	f003 0304 	and.w	r3, r3, #4
 800c012:	2b00      	cmp	r3, #0
 800c014:	d001      	beq.n	800c01a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c016:	230a      	movs	r3, #10
 800c018:	e1de      	b.n	800c3d8 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c01a:	2300      	movs	r3, #0
 800c01c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c01e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c020:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c022:	f7ff ff3f 	bl	800bea4 <check_fs>
 800c026:	4603      	mov	r3, r0
 800c028:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c02c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c030:	2b02      	cmp	r3, #2
 800c032:	d149      	bne.n	800c0c8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c034:	2300      	movs	r3, #0
 800c036:	643b      	str	r3, [r7, #64]	@ 0x40
 800c038:	e01e      	b.n	800c078 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c03c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800c040:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c048:	4413      	add	r3, r2
 800c04a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c04c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c04e:	3304      	adds	r3, #4
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d006      	beq.n	800c064 <find_volume+0x114>
 800c056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c058:	3308      	adds	r3, #8
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd ffb0 	bl	8009fc0 <ld_dword>
 800c060:	4602      	mov	r2, r0
 800c062:	e000      	b.n	800c066 <find_volume+0x116>
 800c064:	2200      	movs	r2, #0
 800c066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	3358      	adds	r3, #88	@ 0x58
 800c06c:	443b      	add	r3, r7
 800c06e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c072:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c074:	3301      	adds	r3, #1
 800c076:	643b      	str	r3, [r7, #64]	@ 0x40
 800c078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d9dd      	bls.n	800c03a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c07e:	2300      	movs	r3, #0
 800c080:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <find_volume+0x13e>
 800c088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c08a:	3b01      	subs	r3, #1
 800c08c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c08e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	3358      	adds	r3, #88	@ 0x58
 800c094:	443b      	add	r3, r7
 800c096:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c09a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c09c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d005      	beq.n	800c0ae <find_volume+0x15e>
 800c0a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c0a4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0a6:	f7ff fefd 	bl	800bea4 <check_fs>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	e000      	b.n	800c0b0 <find_volume+0x160>
 800c0ae:	2303      	movs	r3, #3
 800c0b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c0b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d905      	bls.n	800c0c8 <find_volume+0x178>
 800c0bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0be:	3301      	adds	r3, #1
 800c0c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d9e2      	bls.n	800c08e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0cc:	2b04      	cmp	r3, #4
 800c0ce:	d101      	bne.n	800c0d4 <find_volume+0x184>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e181      	b.n	800c3d8 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d901      	bls.n	800c0e0 <find_volume+0x190>
 800c0dc:	230d      	movs	r3, #13
 800c0de:	e17b      	b.n	800c3d8 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0e2:	3334      	adds	r3, #52	@ 0x34
 800c0e4:	330b      	adds	r3, #11
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7fd ff52 	bl	8009f90 <ld_word>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c0f2:	d001      	beq.n	800c0f8 <find_volume+0x1a8>
 800c0f4:	230d      	movs	r3, #13
 800c0f6:	e16f      	b.n	800c3d8 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0fa:	3334      	adds	r3, #52	@ 0x34
 800c0fc:	3316      	adds	r3, #22
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fd ff46 	bl	8009f90 <ld_word>
 800c104:	4603      	mov	r3, r0
 800c106:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c108:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d106      	bne.n	800c11c <find_volume+0x1cc>
 800c10e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c110:	3334      	adds	r3, #52	@ 0x34
 800c112:	3324      	adds	r3, #36	@ 0x24
 800c114:	4618      	mov	r0, r3
 800c116:	f7fd ff53 	bl	8009fc0 <ld_dword>
 800c11a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c120:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c124:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800c128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c12e:	789b      	ldrb	r3, [r3, #2]
 800c130:	2b01      	cmp	r3, #1
 800c132:	d005      	beq.n	800c140 <find_volume+0x1f0>
 800c134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c136:	789b      	ldrb	r3, [r3, #2]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d001      	beq.n	800c140 <find_volume+0x1f0>
 800c13c:	230d      	movs	r3, #13
 800c13e:	e14b      	b.n	800c3d8 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c142:	789b      	ldrb	r3, [r3, #2]
 800c144:	461a      	mov	r2, r3
 800c146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c148:	fb02 f303 	mul.w	r3, r2, r3
 800c14c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c154:	461a      	mov	r2, r3
 800c156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c158:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c15c:	895b      	ldrh	r3, [r3, #10]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d008      	beq.n	800c174 <find_volume+0x224>
 800c162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c164:	895b      	ldrh	r3, [r3, #10]
 800c166:	461a      	mov	r2, r3
 800c168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c16a:	895b      	ldrh	r3, [r3, #10]
 800c16c:	3b01      	subs	r3, #1
 800c16e:	4013      	ands	r3, r2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d001      	beq.n	800c178 <find_volume+0x228>
 800c174:	230d      	movs	r3, #13
 800c176:	e12f      	b.n	800c3d8 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c17a:	3334      	adds	r3, #52	@ 0x34
 800c17c:	3311      	adds	r3, #17
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd ff06 	bl	8009f90 <ld_word>
 800c184:	4603      	mov	r3, r0
 800c186:	461a      	mov	r2, r3
 800c188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c18e:	891b      	ldrh	r3, [r3, #8]
 800c190:	f003 030f 	and.w	r3, r3, #15
 800c194:	b29b      	uxth	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d001      	beq.n	800c19e <find_volume+0x24e>
 800c19a:	230d      	movs	r3, #13
 800c19c:	e11c      	b.n	800c3d8 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1a0:	3334      	adds	r3, #52	@ 0x34
 800c1a2:	3313      	adds	r3, #19
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f7fd fef3 	bl	8009f90 <ld_word>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c1ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d106      	bne.n	800c1c2 <find_volume+0x272>
 800c1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1b6:	3334      	adds	r3, #52	@ 0x34
 800c1b8:	3320      	adds	r3, #32
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd ff00 	bl	8009fc0 <ld_dword>
 800c1c0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1c4:	3334      	adds	r3, #52	@ 0x34
 800c1c6:	330e      	adds	r3, #14
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7fd fee1 	bl	8009f90 <ld_word>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c1d2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d101      	bne.n	800c1dc <find_volume+0x28c>
 800c1d8:	230d      	movs	r3, #13
 800c1da:	e0fd      	b.n	800c3d8 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c1dc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1e0:	4413      	add	r3, r2
 800c1e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c1e4:	8912      	ldrh	r2, [r2, #8]
 800c1e6:	0912      	lsrs	r2, r2, #4
 800c1e8:	b292      	uxth	r2, r2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c1ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d204      	bcs.n	800c200 <find_volume+0x2b0>
 800c1f6:	230d      	movs	r3, #13
 800c1f8:	e0ee      	b.n	800c3d8 <find_volume+0x488>
 800c1fa:	bf00      	nop
 800c1fc:	200024e8 	.word	0x200024e8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c208:	8952      	ldrh	r2, [r2, #10]
 800c20a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c20e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <find_volume+0x2ca>
 800c216:	230d      	movs	r3, #13
 800c218:	e0de      	b.n	800c3d8 <find_volume+0x488>
		fmt = FS_FAT32;
 800c21a:	2303      	movs	r3, #3
 800c21c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c226:	4293      	cmp	r3, r2
 800c228:	d802      	bhi.n	800c230 <find_volume+0x2e0>
 800c22a:	2302      	movs	r3, #2
 800c22c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c236:	4293      	cmp	r3, r2
 800c238:	d802      	bhi.n	800c240 <find_volume+0x2f0>
 800c23a:	2301      	movs	r3, #1
 800c23c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c242:	1c9a      	adds	r2, r3, #2
 800c244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c246:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c24a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c24c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c24e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c252:	441a      	add	r2, r3
 800c254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c256:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c258:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25c:	441a      	add	r2, r3
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800c262:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c266:	2b03      	cmp	r3, #3
 800c268:	d11e      	bne.n	800c2a8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c26c:	3334      	adds	r3, #52	@ 0x34
 800c26e:	332a      	adds	r3, #42	@ 0x2a
 800c270:	4618      	mov	r0, r3
 800c272:	f7fd fe8d 	bl	8009f90 <ld_word>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <find_volume+0x330>
 800c27c:	230d      	movs	r3, #13
 800c27e:	e0ab      	b.n	800c3d8 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c282:	891b      	ldrh	r3, [r3, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d001      	beq.n	800c28c <find_volume+0x33c>
 800c288:	230d      	movs	r3, #13
 800c28a:	e0a5      	b.n	800c3d8 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c28c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c28e:	3334      	adds	r3, #52	@ 0x34
 800c290:	332c      	adds	r3, #44	@ 0x2c
 800c292:	4618      	mov	r0, r3
 800c294:	f7fd fe94 	bl	8009fc0 <ld_dword>
 800c298:	4602      	mov	r2, r0
 800c29a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c29c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2a0:	699b      	ldr	r3, [r3, #24]
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2a6:	e01f      	b.n	800c2e8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	891b      	ldrh	r3, [r3, #8]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d101      	bne.n	800c2b4 <find_volume+0x364>
 800c2b0:	230d      	movs	r3, #13
 800c2b2:	e091      	b.n	800c3d8 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ba:	441a      	add	r2, r3
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2be:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d103      	bne.n	800c2d0 <find_volume+0x380>
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ca:	699b      	ldr	r3, [r3, #24]
 800c2cc:	005b      	lsls	r3, r3, #1
 800c2ce:	e00a      	b.n	800c2e6 <find_volume+0x396>
 800c2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2d2:	699a      	ldr	r2, [r3, #24]
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	085a      	lsrs	r2, r3, #1
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	f003 0301 	and.w	r3, r3, #1
 800c2e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c2e6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ea:	69da      	ldr	r2, [r3, #28]
 800c2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2ee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c2f2:	0a5b      	lsrs	r3, r3, #9
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d201      	bcs.n	800c2fc <find_volume+0x3ac>
 800c2f8:	230d      	movs	r3, #13
 800c2fa:	e06d      	b.n	800c3d8 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c302:	615a      	str	r2, [r3, #20]
 800c304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c306:	695a      	ldr	r2, [r3, #20]
 800c308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800c30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c30e:	2280      	movs	r2, #128	@ 0x80
 800c310:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c312:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c316:	2b03      	cmp	r3, #3
 800c318:	d149      	bne.n	800c3ae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c31a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c31c:	3334      	adds	r3, #52	@ 0x34
 800c31e:	3330      	adds	r3, #48	@ 0x30
 800c320:	4618      	mov	r0, r3
 800c322:	f7fd fe35 	bl	8009f90 <ld_word>
 800c326:	4603      	mov	r3, r0
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d140      	bne.n	800c3ae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c32c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c32e:	3301      	adds	r3, #1
 800c330:	4619      	mov	r1, r3
 800c332:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c334:	f7fe f8dc 	bl	800a4f0 <move_window>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d137      	bne.n	800c3ae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c340:	2200      	movs	r2, #0
 800c342:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	3334      	adds	r3, #52	@ 0x34
 800c348:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fd fe1f 	bl	8009f90 <ld_word>
 800c352:	4603      	mov	r3, r0
 800c354:	461a      	mov	r2, r3
 800c356:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c35a:	429a      	cmp	r2, r3
 800c35c:	d127      	bne.n	800c3ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c360:	3334      	adds	r3, #52	@ 0x34
 800c362:	4618      	mov	r0, r3
 800c364:	f7fd fe2c 	bl	8009fc0 <ld_dword>
 800c368:	4603      	mov	r3, r0
 800c36a:	4a1d      	ldr	r2, [pc, #116]	@ (800c3e0 <find_volume+0x490>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d11e      	bne.n	800c3ae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c372:	3334      	adds	r3, #52	@ 0x34
 800c374:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c378:	4618      	mov	r0, r3
 800c37a:	f7fd fe21 	bl	8009fc0 <ld_dword>
 800c37e:	4603      	mov	r3, r0
 800c380:	4a18      	ldr	r2, [pc, #96]	@ (800c3e4 <find_volume+0x494>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d113      	bne.n	800c3ae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c388:	3334      	adds	r3, #52	@ 0x34
 800c38a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fd fe16 	bl	8009fc0 <ld_dword>
 800c394:	4602      	mov	r2, r0
 800c396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c398:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c39c:	3334      	adds	r3, #52	@ 0x34
 800c39e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7fd fe0c 	bl	8009fc0 <ld_dword>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c3b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3e8 <find_volume+0x498>)
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	4b0a      	ldr	r3, [pc, #40]	@ (800c3e8 <find_volume+0x498>)
 800c3c0:	801a      	strh	r2, [r3, #0]
 800c3c2:	4b09      	ldr	r3, [pc, #36]	@ (800c3e8 <find_volume+0x498>)
 800c3c4:	881a      	ldrh	r2, [r3, #0]
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3cc:	4a07      	ldr	r2, [pc, #28]	@ (800c3ec <find_volume+0x49c>)
 800c3ce:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c3d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c3d2:	f7fe f825 	bl	800a420 <clear_lock>
#endif
	return FR_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3758      	adds	r7, #88	@ 0x58
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	41615252 	.word	0x41615252
 800c3e4:	61417272 	.word	0x61417272
 800c3e8:	200024ec 	.word	0x200024ec
 800c3ec:	20002510 	.word	0x20002510

0800c3f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
 800c3f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c3fa:	2309      	movs	r3, #9
 800c3fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d01c      	beq.n	800c43e <validate+0x4e>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d018      	beq.n	800c43e <validate+0x4e>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d013      	beq.n	800c43e <validate+0x4e>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	889a      	ldrh	r2, [r3, #4]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	88db      	ldrh	r3, [r3, #6]
 800c420:	429a      	cmp	r2, r3
 800c422:	d10c      	bne.n	800c43e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	785b      	ldrb	r3, [r3, #1]
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fd fd12 	bl	8009e54 <disk_status>
 800c430:	4603      	mov	r3, r0
 800c432:	f003 0301 	and.w	r3, r3, #1
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <validate+0x4e>
			res = FR_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d102      	bne.n	800c44a <validate+0x5a>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	e000      	b.n	800c44c <validate+0x5c>
 800c44a:	2300      	movs	r3, #0
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	6013      	str	r3, [r2, #0]
	return res;
 800c450:	7bfb      	ldrb	r3, [r7, #15]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
	...

0800c45c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	4613      	mov	r3, r2
 800c468:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c46e:	f107 0310 	add.w	r3, r7, #16
 800c472:	4618      	mov	r0, r3
 800c474:	f7ff fcd1 	bl	800be1a <get_ldnumber>
 800c478:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c47a:	69fb      	ldr	r3, [r7, #28]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	da01      	bge.n	800c484 <f_mount+0x28>
 800c480:	230b      	movs	r3, #11
 800c482:	e02b      	b.n	800c4dc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c484:	4a17      	ldr	r2, [pc, #92]	@ (800c4e4 <f_mount+0x88>)
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d005      	beq.n	800c4a0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c494:	69b8      	ldr	r0, [r7, #24]
 800c496:	f7fd ffc3 	bl	800a420 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	2200      	movs	r2, #0
 800c49e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d002      	beq.n	800c4ac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	490d      	ldr	r1, [pc, #52]	@ (800c4e4 <f_mount+0x88>)
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <f_mount+0x66>
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d001      	beq.n	800c4c6 <f_mount+0x6a>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e00a      	b.n	800c4dc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c4c6:	f107 010c 	add.w	r1, r7, #12
 800c4ca:	f107 0308 	add.w	r3, r7, #8
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7ff fd3d 	bl	800bf50 <find_volume>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3720      	adds	r7, #32
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	200024e8 	.word	0x200024e8

0800c4e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b09a      	sub	sp, #104	@ 0x68
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	4613      	mov	r3, r2
 800c4f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <f_open+0x18>
 800c4fc:	2309      	movs	r3, #9
 800c4fe:	e1a9      	b.n	800c854 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c500:	79fb      	ldrb	r3, [r7, #7]
 800c502:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c506:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c508:	79fa      	ldrb	r2, [r7, #7]
 800c50a:	f107 0114 	add.w	r1, r7, #20
 800c50e:	f107 0308 	add.w	r3, r7, #8
 800c512:	4618      	mov	r0, r3
 800c514:	f7ff fd1c 	bl	800bf50 <find_volume>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c51e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c522:	2b00      	cmp	r3, #0
 800c524:	f040 818d 	bne.w	800c842 <f_open+0x35a>
		dj.obj.fs = fs;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c52c:	68ba      	ldr	r2, [r7, #8]
 800c52e:	f107 0318 	add.w	r3, r7, #24
 800c532:	4611      	mov	r1, r2
 800c534:	4618      	mov	r0, r3
 800c536:	f7ff fbff 	bl	800bd38 <follow_path>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c540:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c544:	2b00      	cmp	r3, #0
 800c546:	d118      	bne.n	800c57a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c548:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c54c:	b25b      	sxtb	r3, r3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	da03      	bge.n	800c55a <f_open+0x72>
				res = FR_INVALID_NAME;
 800c552:	2306      	movs	r3, #6
 800c554:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c558:	e00f      	b.n	800c57a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	bf8c      	ite	hi
 800c560:	2301      	movhi	r3, #1
 800c562:	2300      	movls	r3, #0
 800c564:	b2db      	uxtb	r3, r3
 800c566:	461a      	mov	r2, r3
 800c568:	f107 0318 	add.w	r3, r7, #24
 800c56c:	4611      	mov	r1, r2
 800c56e:	4618      	mov	r0, r3
 800c570:	f7fd fe0e 	bl	800a190 <chk_lock>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c57a:	79fb      	ldrb	r3, [r7, #7]
 800c57c:	f003 031c 	and.w	r3, r3, #28
 800c580:	2b00      	cmp	r3, #0
 800c582:	d07f      	beq.n	800c684 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800c584:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d017      	beq.n	800c5bc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c58c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c590:	2b04      	cmp	r3, #4
 800c592:	d10e      	bne.n	800c5b2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c594:	f7fd fe58 	bl	800a248 <enq_lock>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d006      	beq.n	800c5ac <f_open+0xc4>
 800c59e:	f107 0318 	add.w	r3, r7, #24
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f7ff f83a 	bl	800b61c <dir_register>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	e000      	b.n	800c5ae <f_open+0xc6>
 800c5ac:	2312      	movs	r3, #18
 800c5ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c5b2:	79fb      	ldrb	r3, [r7, #7]
 800c5b4:	f043 0308 	orr.w	r3, r3, #8
 800c5b8:	71fb      	strb	r3, [r7, #7]
 800c5ba:	e010      	b.n	800c5de <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c5bc:	7fbb      	ldrb	r3, [r7, #30]
 800c5be:	f003 0311 	and.w	r3, r3, #17
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d003      	beq.n	800c5ce <f_open+0xe6>
					res = FR_DENIED;
 800c5c6:	2307      	movs	r3, #7
 800c5c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c5cc:	e007      	b.n	800c5de <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c5ce:	79fb      	ldrb	r3, [r7, #7]
 800c5d0:	f003 0304 	and.w	r3, r3, #4
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <f_open+0xf6>
 800c5d8:	2308      	movs	r3, #8
 800c5da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c5de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d168      	bne.n	800c6b8 <f_open+0x1d0>
 800c5e6:	79fb      	ldrb	r3, [r7, #7]
 800c5e8:	f003 0308 	and.w	r3, r3, #8
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d063      	beq.n	800c6b8 <f_open+0x1d0>
				dw = GET_FATTIME();
 800c5f0:	f7fc feec 	bl	80093cc <get_fattime>
 800c5f4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f8:	330e      	adds	r3, #14
 800c5fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7fd fd1d 	bl	800a03c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c604:	3316      	adds	r3, #22
 800c606:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c608:	4618      	mov	r0, r3
 800c60a:	f7fd fd17 	bl	800a03c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c610:	330b      	adds	r3, #11
 800c612:	2220      	movs	r2, #32
 800c614:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c616:	697b      	ldr	r3, [r7, #20]
 800c618:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c61a:	4611      	mov	r1, r2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7fe fc6b 	bl	800aef8 <ld_clust>
 800c622:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c628:	2200      	movs	r2, #0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7fe fc83 	bl	800af36 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	331c      	adds	r3, #28
 800c634:	2100      	movs	r1, #0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fd fd00 	bl	800a03c <st_dword>
					fs->wflag = 1;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2201      	movs	r2, #1
 800c640:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c644:	2b00      	cmp	r3, #0
 800c646:	d037      	beq.n	800c6b8 <f_open+0x1d0>
						dw = fs->winsect;
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c64c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800c64e:	f107 0318 	add.w	r3, r7, #24
 800c652:	2200      	movs	r2, #0
 800c654:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c656:	4618      	mov	r0, r3
 800c658:	f7fe f996 	bl	800a988 <remove_chain>
 800c65c:	4603      	mov	r3, r0
 800c65e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800c662:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c666:	2b00      	cmp	r3, #0
 800c668:	d126      	bne.n	800c6b8 <f_open+0x1d0>
							res = move_window(fs, dw);
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800c66e:	4618      	mov	r0, r3
 800c670:	f7fd ff3e 	bl	800a4f0 <move_window>
 800c674:	4603      	mov	r3, r0
 800c676:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c67e:	3a01      	subs	r2, #1
 800c680:	611a      	str	r2, [r3, #16]
 800c682:	e019      	b.n	800c6b8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c684:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d115      	bne.n	800c6b8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c68c:	7fbb      	ldrb	r3, [r7, #30]
 800c68e:	f003 0310 	and.w	r3, r3, #16
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <f_open+0x1b6>
					res = FR_NO_FILE;
 800c696:	2304      	movs	r3, #4
 800c698:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c69c:	e00c      	b.n	800c6b8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c69e:	79fb      	ldrb	r3, [r7, #7]
 800c6a0:	f003 0302 	and.w	r3, r3, #2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d007      	beq.n	800c6b8 <f_open+0x1d0>
 800c6a8:	7fbb      	ldrb	r3, [r7, #30]
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d002      	beq.n	800c6b8 <f_open+0x1d0>
						res = FR_DENIED;
 800c6b2:	2307      	movs	r3, #7
 800c6b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800c6b8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d126      	bne.n	800c70e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c6c0:	79fb      	ldrb	r3, [r7, #7]
 800c6c2:	f003 0308 	and.w	r3, r3, #8
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c6d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800c6da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c6e0:	79fb      	ldrb	r3, [r7, #7]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	bf8c      	ite	hi
 800c6e6:	2301      	movhi	r3, #1
 800c6e8:	2300      	movls	r3, #0
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	f107 0318 	add.w	r3, r7, #24
 800c6f2:	4611      	mov	r1, r2
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fd fdc9 	bl	800a28c <inc_lock>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <f_open+0x226>
 800c708:	2302      	movs	r3, #2
 800c70a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c70e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c712:	2b00      	cmp	r3, #0
 800c714:	f040 8095 	bne.w	800c842 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fbea 	bl	800aef8 <ld_clust>
 800c724:	4602      	mov	r2, r0
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72c:	331c      	adds	r3, #28
 800c72e:	4618      	mov	r0, r3
 800c730:	f7fd fc46 	bl	8009fc0 <ld_dword>
 800c734:	4602      	mov	r2, r0
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	88da      	ldrh	r2, [r3, #6]
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	79fa      	ldrb	r2, [r7, #7]
 800c752:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3330      	adds	r3, #48	@ 0x30
 800c76a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c76e:	2100      	movs	r1, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f7fd fcb0 	bl	800a0d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	f003 0320 	and.w	r3, r3, #32
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d060      	beq.n	800c842 <f_open+0x35a>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d05c      	beq.n	800c842 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	68da      	ldr	r2, [r3, #12]
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	895b      	ldrh	r3, [r3, #10]
 800c794:	025b      	lsls	r3, r3, #9
 800c796:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7a4:	e016      	b.n	800c7d4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd ff5b 	bl	800a666 <get_fat>
 800c7b0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800c7b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d802      	bhi.n	800c7be <f_open+0x2d6>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c7be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7c4:	d102      	bne.n	800c7cc <f_open+0x2e4>
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c7cc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c7ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c7d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d103      	bne.n	800c7e4 <f_open+0x2fc>
 800c7dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d8e0      	bhi.n	800c7a6 <f_open+0x2be>
				}
				fp->clust = clst;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c7e8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c7ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d127      	bne.n	800c842 <f_open+0x35a>
 800c7f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d022      	beq.n	800c842 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800c800:	4618      	mov	r0, r3
 800c802:	f7fd ff11 	bl	800a628 <clust2sect>
 800c806:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800c808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d103      	bne.n	800c816 <f_open+0x32e>
						res = FR_INT_ERR;
 800c80e:	2302      	movs	r3, #2
 800c810:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800c814:	e015      	b.n	800c842 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c818:	0a5a      	lsrs	r2, r3, #9
 800c81a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c81c:	441a      	add	r2, r3
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	7858      	ldrb	r0, [r3, #1]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6a1a      	ldr	r2, [r3, #32]
 800c830:	2301      	movs	r3, #1
 800c832:	f7fd fb4f 	bl	8009ed4 <disk_read>
 800c836:	4603      	mov	r3, r0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d002      	beq.n	800c842 <f_open+0x35a>
 800c83c:	2301      	movs	r3, #1
 800c83e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c842:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c846:	2b00      	cmp	r3, #0
 800c848:	d002      	beq.n	800c850 <f_open+0x368>
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c850:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800c854:	4618      	mov	r0, r3
 800c856:	3768      	adds	r7, #104	@ 0x68
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b08e      	sub	sp, #56	@ 0x38
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f107 0214 	add.w	r2, r7, #20
 800c87a:	4611      	mov	r1, r2
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff fdb7 	bl	800c3f0 <validate>
 800c882:	4603      	mov	r3, r0
 800c884:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c888:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d107      	bne.n	800c8a0 <f_read+0x44>
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	7d5b      	ldrb	r3, [r3, #21]
 800c894:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c898:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <f_read+0x4a>
 800c8a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c8a4:	e115      	b.n	800cad2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	7d1b      	ldrb	r3, [r3, #20]
 800c8aa:	f003 0301 	and.w	r3, r3, #1
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d101      	bne.n	800c8b6 <f_read+0x5a>
 800c8b2:	2307      	movs	r3, #7
 800c8b4:	e10d      	b.n	800cad2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	68da      	ldr	r2, [r3, #12]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c8c2:	687a      	ldr	r2, [r7, #4]
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	f240 80fe 	bls.w	800cac8 <f_read+0x26c>
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c8d0:	e0fa      	b.n	800cac8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	699b      	ldr	r3, [r3, #24]
 800c8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f040 80c6 	bne.w	800ca6c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	0a5b      	lsrs	r3, r3, #9
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	8952      	ldrh	r2, [r2, #10]
 800c8ea:	3a01      	subs	r2, #1
 800c8ec:	4013      	ands	r3, r2
 800c8ee:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c8f0:	69fb      	ldr	r3, [r7, #28]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d12f      	bne.n	800c956 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	699b      	ldr	r3, [r3, #24]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d103      	bne.n	800c906 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	689b      	ldr	r3, [r3, #8]
 800c902:	633b      	str	r3, [r7, #48]	@ 0x30
 800c904:	e013      	b.n	800c92e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d007      	beq.n	800c91e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	699b      	ldr	r3, [r3, #24]
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7fe f934 	bl	800ab82 <clmt_clust>
 800c91a:	6338      	str	r0, [r7, #48]	@ 0x30
 800c91c:	e007      	b.n	800c92e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	69db      	ldr	r3, [r3, #28]
 800c924:	4619      	mov	r1, r3
 800c926:	4610      	mov	r0, r2
 800c928:	f7fd fe9d 	bl	800a666 <get_fat>
 800c92c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c930:	2b01      	cmp	r3, #1
 800c932:	d804      	bhi.n	800c93e <f_read+0xe2>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2202      	movs	r2, #2
 800c938:	755a      	strb	r2, [r3, #21]
 800c93a:	2302      	movs	r3, #2
 800c93c:	e0c9      	b.n	800cad2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c944:	d104      	bne.n	800c950 <f_read+0xf4>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2201      	movs	r2, #1
 800c94a:	755a      	strb	r2, [r3, #21]
 800c94c:	2301      	movs	r3, #1
 800c94e:	e0c0      	b.n	800cad2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c954:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c956:	697a      	ldr	r2, [r7, #20]
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	69db      	ldr	r3, [r3, #28]
 800c95c:	4619      	mov	r1, r3
 800c95e:	4610      	mov	r0, r2
 800c960:	f7fd fe62 	bl	800a628 <clust2sect>
 800c964:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d104      	bne.n	800c976 <f_read+0x11a>
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2202      	movs	r2, #2
 800c970:	755a      	strb	r2, [r3, #21]
 800c972:	2302      	movs	r3, #2
 800c974:	e0ad      	b.n	800cad2 <f_read+0x276>
			sect += csect;
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	4413      	add	r3, r2
 800c97c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	0a5b      	lsrs	r3, r3, #9
 800c982:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c986:	2b00      	cmp	r3, #0
 800c988:	d039      	beq.n	800c9fe <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c98a:	69fa      	ldr	r2, [r7, #28]
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	4413      	add	r3, r2
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	8952      	ldrh	r2, [r2, #10]
 800c994:	4293      	cmp	r3, r2
 800c996:	d905      	bls.n	800c9a4 <f_read+0x148>
					cc = fs->csize - csect;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	895b      	ldrh	r3, [r3, #10]
 800c99c:	461a      	mov	r2, r3
 800c99e:	69fb      	ldr	r3, [r7, #28]
 800c9a0:	1ad3      	subs	r3, r2, r3
 800c9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	7858      	ldrb	r0, [r3, #1]
 800c9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9aa:	69ba      	ldr	r2, [r7, #24]
 800c9ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c9ae:	f7fd fa91 	bl	8009ed4 <disk_read>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d004      	beq.n	800c9c2 <f_read+0x166>
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	755a      	strb	r2, [r3, #21]
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e087      	b.n	800cad2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	7d1b      	ldrb	r3, [r3, #20]
 800c9c6:	b25b      	sxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	da14      	bge.n	800c9f6 <f_read+0x19a>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1a      	ldr	r2, [r3, #32]
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d90d      	bls.n	800c9f6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6a1a      	ldr	r2, [r3, #32]
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	025b      	lsls	r3, r3, #9
 800c9e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9e6:	18d0      	adds	r0, r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3330      	adds	r3, #48	@ 0x30
 800c9ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f7fd fb4f 	bl	800a094 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f8:	025b      	lsls	r3, r3, #9
 800c9fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800c9fc:	e050      	b.n	800caa0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	69ba      	ldr	r2, [r7, #24]
 800ca04:	429a      	cmp	r2, r3
 800ca06:	d02e      	beq.n	800ca66 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	7d1b      	ldrb	r3, [r3, #20]
 800ca0c:	b25b      	sxtb	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	da18      	bge.n	800ca44 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	7858      	ldrb	r0, [r3, #1]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	6a1a      	ldr	r2, [r3, #32]
 800ca20:	2301      	movs	r3, #1
 800ca22:	f7fd fa77 	bl	8009f14 <disk_write>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d004      	beq.n	800ca36 <f_read+0x1da>
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	755a      	strb	r2, [r3, #21]
 800ca32:	2301      	movs	r3, #1
 800ca34:	e04d      	b.n	800cad2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	7d1b      	ldrb	r3, [r3, #20]
 800ca3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	7858      	ldrb	r0, [r3, #1]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ca4e:	2301      	movs	r3, #1
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	f7fd fa3f 	bl	8009ed4 <disk_read>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d004      	beq.n	800ca66 <f_read+0x20a>
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	755a      	strb	r2, [r3, #21]
 800ca62:	2301      	movs	r3, #1
 800ca64:	e035      	b.n	800cad2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	69ba      	ldr	r2, [r7, #24]
 800ca6a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca74:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ca78:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ca7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d901      	bls.n	800ca86 <f_read+0x22a>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	699b      	ldr	r3, [r3, #24]
 800ca90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca94:	4413      	add	r3, r2
 800ca96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca9c:	f7fd fafa 	bl	800a094 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800caa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800caa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa4:	4413      	add	r3, r2
 800caa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	699a      	ldr	r2, [r3, #24]
 800caac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caae:	441a      	add	r2, r3
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	619a      	str	r2, [r3, #24]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caba:	441a      	add	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cac4:	1ad3      	subs	r3, r2, r3
 800cac6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	f47f af01 	bne.w	800c8d2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3738      	adds	r7, #56	@ 0x38
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b086      	sub	sp, #24
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f107 0208 	add.w	r2, r7, #8
 800cae8:	4611      	mov	r1, r2
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff fc80 	bl	800c3f0 <validate>
 800caf0:	4603      	mov	r3, r0
 800caf2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800caf4:	7dfb      	ldrb	r3, [r7, #23]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d168      	bne.n	800cbcc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	7d1b      	ldrb	r3, [r3, #20]
 800cafe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d062      	beq.n	800cbcc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7d1b      	ldrb	r3, [r3, #20]
 800cb0a:	b25b      	sxtb	r3, r3
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	da15      	bge.n	800cb3c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	7858      	ldrb	r0, [r3, #1]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a1a      	ldr	r2, [r3, #32]
 800cb1e:	2301      	movs	r3, #1
 800cb20:	f7fd f9f8 	bl	8009f14 <disk_write>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d001      	beq.n	800cb2e <f_sync+0x54>
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e04f      	b.n	800cbce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	7d1b      	ldrb	r3, [r3, #20]
 800cb32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb36:	b2da      	uxtb	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cb3c:	f7fc fc46 	bl	80093cc <get_fattime>
 800cb40:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb48:	4619      	mov	r1, r3
 800cb4a:	4610      	mov	r0, r2
 800cb4c:	f7fd fcd0 	bl	800a4f0 <move_window>
 800cb50:	4603      	mov	r3, r0
 800cb52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cb54:	7dfb      	ldrb	r3, [r7, #23]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d138      	bne.n	800cbcc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	330b      	adds	r3, #11
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	330b      	adds	r3, #11
 800cb6a:	f042 0220 	orr.w	r2, r2, #32
 800cb6e:	b2d2      	uxtb	r2, r2
 800cb70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	461a      	mov	r2, r3
 800cb7c:	68f9      	ldr	r1, [r7, #12]
 800cb7e:	f7fe f9da 	bl	800af36 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f103 021c 	add.w	r2, r3, #28
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	68db      	ldr	r3, [r3, #12]
 800cb8c:	4619      	mov	r1, r3
 800cb8e:	4610      	mov	r0, r2
 800cb90:	f7fd fa54 	bl	800a03c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	3316      	adds	r3, #22
 800cb98:	6939      	ldr	r1, [r7, #16]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7fd fa4e 	bl	800a03c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	3312      	adds	r3, #18
 800cba4:	2100      	movs	r1, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7fd fa2d 	bl	800a006 <st_word>
					fs->wflag = 1;
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fd fcc9 	bl	800a54c <sync_fs>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	7d1b      	ldrb	r3, [r3, #20]
 800cbc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cbc6:	b2da      	uxtb	r2, r3
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff ff7b 	bl	800cada <f_sync>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d118      	bne.n	800cc20 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f107 0208 	add.w	r2, r7, #8
 800cbf4:	4611      	mov	r1, r2
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7ff fbfa 	bl	800c3f0 <validate>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	691b      	ldr	r3, [r3, #16]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7fd fbcc 	bl	800a3a8 <dec_lock>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cc14:	7bfb      	ldrb	r3, [r7, #15]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d102      	bne.n	800cc20 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b086      	sub	sp, #24
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
 800cc32:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d101      	bne.n	800cc3e <f_opendir+0x14>
 800cc3a:	2309      	movs	r3, #9
 800cc3c:	e064      	b.n	800cd08 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800cc42:	f107 010c 	add.w	r1, r7, #12
 800cc46:	463b      	mov	r3, r7
 800cc48:	2200      	movs	r2, #0
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7ff f980 	bl	800bf50 <find_volume>
 800cc50:	4603      	mov	r3, r0
 800cc52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc54:	7dfb      	ldrb	r3, [r7, #23]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d14f      	bne.n	800ccfa <f_opendir+0xd0>
		obj->fs = fs;
 800cc5a:	68fa      	ldr	r2, [r7, #12]
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	4619      	mov	r1, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f7ff f867 	bl	800bd38 <follow_path>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d13d      	bne.n	800ccf0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800cc7a:	b25b      	sxtb	r3, r3
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	db12      	blt.n	800cca6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	799b      	ldrb	r3, [r3, #6]
 800cc84:	f003 0310 	and.w	r3, r3, #16
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00a      	beq.n	800cca2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	4619      	mov	r1, r3
 800cc94:	4610      	mov	r0, r2
 800cc96:	f7fe f92f 	bl	800aef8 <ld_clust>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	609a      	str	r2, [r3, #8]
 800cca0:	e001      	b.n	800cca6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cca2:	2305      	movs	r3, #5
 800cca4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d121      	bne.n	800ccf0 <f_opendir+0xc6>
				obj->id = fs->id;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	88da      	ldrh	r2, [r3, #6]
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7fd ff97 	bl	800abea <dir_sdi>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800ccc0:	7dfb      	ldrb	r3, [r7, #23]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d114      	bne.n	800ccf0 <f_opendir+0xc6>
					if (obj->sclust) {
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00d      	beq.n	800ccea <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800ccce:	2100      	movs	r1, #0
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f7fd fadb 	bl	800a28c <inc_lock>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	693b      	ldr	r3, [r7, #16]
 800ccda:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d105      	bne.n	800ccf0 <f_opendir+0xc6>
 800cce4:	2312      	movs	r3, #18
 800cce6:	75fb      	strb	r3, [r7, #23]
 800cce8:	e002      	b.n	800ccf0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	2200      	movs	r2, #0
 800ccee:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800ccf0:	7dfb      	ldrb	r3, [r7, #23]
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d101      	bne.n	800ccfa <f_opendir+0xd0>
 800ccf6:	2305      	movs	r3, #5
 800ccf8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800ccfa:	7dfb      	ldrb	r3, [r7, #23]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d002      	beq.n	800cd06 <f_opendir+0xdc>
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd06:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f107 0208 	add.w	r2, r7, #8
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7ff fb65 	bl	800c3f0 <validate>
 800cd26:	4603      	mov	r3, r0
 800cd28:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd2a:	7bfb      	ldrb	r3, [r7, #15]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d110      	bne.n	800cd52 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	691b      	ldr	r3, [r3, #16]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d006      	beq.n	800cd46 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7fd fb33 	bl	800a3a8 <dec_lock>
 800cd42:	4603      	mov	r3, r0
 800cd44:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f107 0208 	add.w	r2, r7, #8
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fb3e 	bl	800c3f0 <validate>
 800cd74:	4603      	mov	r3, r0
 800cd76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cd78:	7bfb      	ldrb	r3, [r7, #15]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d126      	bne.n	800cdcc <f_readdir+0x70>
		if (!fno) {
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800cd84:	2100      	movs	r1, #0
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7fd ff2f 	bl	800abea <dir_sdi>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73fb      	strb	r3, [r7, #15]
 800cd90:	e01c      	b.n	800cdcc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800cd92:	2100      	movs	r1, #0
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f7fe fada 	bl	800b34e <dir_read>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
 800cda0:	2b04      	cmp	r3, #4
 800cda2:	d101      	bne.n	800cda8 <f_readdir+0x4c>
 800cda4:	2300      	movs	r3, #0
 800cda6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800cda8:	7bfb      	ldrb	r3, [r7, #15]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d10e      	bne.n	800cdcc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f7fe fd2b 	bl	800b80c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800cdb6:	2100      	movs	r1, #0
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7fd ff91 	bl	800ace0 <dir_next>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	2b04      	cmp	r3, #4
 800cdc6:	d101      	bne.n	800cdcc <f_readdir+0x70>
 800cdc8:	2300      	movs	r3, #0
 800cdca:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800cdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
	...

0800cdd8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cde6:	2301      	movs	r3, #1
 800cde8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cdee:	4b1f      	ldr	r3, [pc, #124]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800cdf0:	7a5b      	ldrb	r3, [r3, #9]
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d131      	bne.n	800ce5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cdf8:	4b1c      	ldr	r3, [pc, #112]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800cdfa:	7a5b      	ldrb	r3, [r3, #9]
 800cdfc:	b2db      	uxtb	r3, r3
 800cdfe:	461a      	mov	r2, r3
 800ce00:	4b1a      	ldr	r3, [pc, #104]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce02:	2100      	movs	r1, #0
 800ce04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ce06:	4b19      	ldr	r3, [pc, #100]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce08:	7a5b      	ldrb	r3, [r3, #9]
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	4a17      	ldr	r2, [pc, #92]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce0e:	009b      	lsls	r3, r3, #2
 800ce10:	4413      	add	r3, r2
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ce16:	4b15      	ldr	r3, [pc, #84]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce18:	7a5b      	ldrb	r3, [r3, #9]
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	4b13      	ldr	r3, [pc, #76]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce20:	4413      	add	r3, r2
 800ce22:	79fa      	ldrb	r2, [r7, #7]
 800ce24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ce26:	4b11      	ldr	r3, [pc, #68]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce28:	7a5b      	ldrb	r3, [r3, #9]
 800ce2a:	b2db      	uxtb	r3, r3
 800ce2c:	1c5a      	adds	r2, r3, #1
 800ce2e:	b2d1      	uxtb	r1, r2
 800ce30:	4a0e      	ldr	r2, [pc, #56]	@ (800ce6c <FATFS_LinkDriverEx+0x94>)
 800ce32:	7251      	strb	r1, [r2, #9]
 800ce34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ce36:	7dbb      	ldrb	r3, [r7, #22]
 800ce38:	3330      	adds	r3, #48	@ 0x30
 800ce3a:	b2da      	uxtb	r2, r3
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	3301      	adds	r3, #1
 800ce44:	223a      	movs	r2, #58	@ 0x3a
 800ce46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	3302      	adds	r3, #2
 800ce4c:	222f      	movs	r2, #47	@ 0x2f
 800ce4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	3303      	adds	r3, #3
 800ce54:	2200      	movs	r2, #0
 800ce56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ce58:	2300      	movs	r3, #0
 800ce5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ce5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	371c      	adds	r7, #28
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	20002710 	.word	0x20002710

0800ce70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	6839      	ldr	r1, [r7, #0]
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f7ff ffaa 	bl	800cdd8 <FATFS_LinkDriverEx>
 800ce84:	4603      	mov	r3, r0
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
	...

0800ce90 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ce9c:	88fb      	ldrh	r3, [r7, #6]
 800ce9e:	2b7f      	cmp	r3, #127	@ 0x7f
 800cea0:	d802      	bhi.n	800cea8 <ff_convert+0x18>
		c = chr;
 800cea2:	88fb      	ldrh	r3, [r7, #6]
 800cea4:	81fb      	strh	r3, [r7, #14]
 800cea6:	e025      	b.n	800cef4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00b      	beq.n	800cec6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ceae:	88fb      	ldrh	r3, [r7, #6]
 800ceb0:	2bff      	cmp	r3, #255	@ 0xff
 800ceb2:	d805      	bhi.n	800cec0 <ff_convert+0x30>
 800ceb4:	88fb      	ldrh	r3, [r7, #6]
 800ceb6:	3b80      	subs	r3, #128	@ 0x80
 800ceb8:	4a12      	ldr	r2, [pc, #72]	@ (800cf04 <ff_convert+0x74>)
 800ceba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cebe:	e000      	b.n	800cec2 <ff_convert+0x32>
 800cec0:	2300      	movs	r3, #0
 800cec2:	81fb      	strh	r3, [r7, #14]
 800cec4:	e016      	b.n	800cef4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800cec6:	2300      	movs	r3, #0
 800cec8:	81fb      	strh	r3, [r7, #14]
 800ceca:	e009      	b.n	800cee0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800cecc:	89fb      	ldrh	r3, [r7, #14]
 800cece:	4a0d      	ldr	r2, [pc, #52]	@ (800cf04 <ff_convert+0x74>)
 800ced0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ced4:	88fa      	ldrh	r2, [r7, #6]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d006      	beq.n	800cee8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ceda:	89fb      	ldrh	r3, [r7, #14]
 800cedc:	3301      	adds	r3, #1
 800cede:	81fb      	strh	r3, [r7, #14]
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	2b7f      	cmp	r3, #127	@ 0x7f
 800cee4:	d9f2      	bls.n	800cecc <ff_convert+0x3c>
 800cee6:	e000      	b.n	800ceea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800cee8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ceea:	89fb      	ldrh	r3, [r7, #14]
 800ceec:	3380      	adds	r3, #128	@ 0x80
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800cef4:	89fb      	ldrh	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	08010490 	.word	0x08010490

0800cf08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	4603      	mov	r3, r0
 800cf10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800cf12:	88fb      	ldrh	r3, [r7, #6]
 800cf14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf18:	d201      	bcs.n	800cf1e <ff_wtoupper+0x16>
 800cf1a:	4b3e      	ldr	r3, [pc, #248]	@ (800d014 <ff_wtoupper+0x10c>)
 800cf1c:	e000      	b.n	800cf20 <ff_wtoupper+0x18>
 800cf1e:	4b3e      	ldr	r3, [pc, #248]	@ (800d018 <ff_wtoupper+0x110>)
 800cf20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	1c9a      	adds	r2, r3, #2
 800cf26:	617a      	str	r2, [r7, #20]
 800cf28:	881b      	ldrh	r3, [r3, #0]
 800cf2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800cf2c:	8a7b      	ldrh	r3, [r7, #18]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d068      	beq.n	800d004 <ff_wtoupper+0xfc>
 800cf32:	88fa      	ldrh	r2, [r7, #6]
 800cf34:	8a7b      	ldrh	r3, [r7, #18]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d364      	bcc.n	800d004 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	1c9a      	adds	r2, r3, #2
 800cf3e:	617a      	str	r2, [r7, #20]
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	823b      	strh	r3, [r7, #16]
 800cf44:	8a3b      	ldrh	r3, [r7, #16]
 800cf46:	0a1b      	lsrs	r3, r3, #8
 800cf48:	81fb      	strh	r3, [r7, #14]
 800cf4a:	8a3b      	ldrh	r3, [r7, #16]
 800cf4c:	b2db      	uxtb	r3, r3
 800cf4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800cf50:	88fa      	ldrh	r2, [r7, #6]
 800cf52:	8a79      	ldrh	r1, [r7, #18]
 800cf54:	8a3b      	ldrh	r3, [r7, #16]
 800cf56:	440b      	add	r3, r1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	da49      	bge.n	800cff0 <ff_wtoupper+0xe8>
			switch (cmd) {
 800cf5c:	89fb      	ldrh	r3, [r7, #14]
 800cf5e:	2b08      	cmp	r3, #8
 800cf60:	d84f      	bhi.n	800d002 <ff_wtoupper+0xfa>
 800cf62:	a201      	add	r2, pc, #4	@ (adr r2, 800cf68 <ff_wtoupper+0x60>)
 800cf64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf68:	0800cf8d 	.word	0x0800cf8d
 800cf6c:	0800cf9f 	.word	0x0800cf9f
 800cf70:	0800cfb5 	.word	0x0800cfb5
 800cf74:	0800cfbd 	.word	0x0800cfbd
 800cf78:	0800cfc5 	.word	0x0800cfc5
 800cf7c:	0800cfcd 	.word	0x0800cfcd
 800cf80:	0800cfd5 	.word	0x0800cfd5
 800cf84:	0800cfdd 	.word	0x0800cfdd
 800cf88:	0800cfe5 	.word	0x0800cfe5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800cf8c:	88fa      	ldrh	r2, [r7, #6]
 800cf8e:	8a7b      	ldrh	r3, [r7, #18]
 800cf90:	1ad3      	subs	r3, r2, r3
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4413      	add	r3, r2
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	80fb      	strh	r3, [r7, #6]
 800cf9c:	e027      	b.n	800cfee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800cf9e:	88fa      	ldrh	r2, [r7, #6]
 800cfa0:	8a7b      	ldrh	r3, [r7, #18]
 800cfa2:	1ad3      	subs	r3, r2, r3
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f003 0301 	and.w	r3, r3, #1
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	88fa      	ldrh	r2, [r7, #6]
 800cfae:	1ad3      	subs	r3, r2, r3
 800cfb0:	80fb      	strh	r3, [r7, #6]
 800cfb2:	e01c      	b.n	800cfee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800cfb4:	88fb      	ldrh	r3, [r7, #6]
 800cfb6:	3b10      	subs	r3, #16
 800cfb8:	80fb      	strh	r3, [r7, #6]
 800cfba:	e018      	b.n	800cfee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800cfbc:	88fb      	ldrh	r3, [r7, #6]
 800cfbe:	3b20      	subs	r3, #32
 800cfc0:	80fb      	strh	r3, [r7, #6]
 800cfc2:	e014      	b.n	800cfee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800cfc4:	88fb      	ldrh	r3, [r7, #6]
 800cfc6:	3b30      	subs	r3, #48	@ 0x30
 800cfc8:	80fb      	strh	r3, [r7, #6]
 800cfca:	e010      	b.n	800cfee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800cfcc:	88fb      	ldrh	r3, [r7, #6]
 800cfce:	3b1a      	subs	r3, #26
 800cfd0:	80fb      	strh	r3, [r7, #6]
 800cfd2:	e00c      	b.n	800cfee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800cfd4:	88fb      	ldrh	r3, [r7, #6]
 800cfd6:	3308      	adds	r3, #8
 800cfd8:	80fb      	strh	r3, [r7, #6]
 800cfda:	e008      	b.n	800cfee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800cfdc:	88fb      	ldrh	r3, [r7, #6]
 800cfde:	3b50      	subs	r3, #80	@ 0x50
 800cfe0:	80fb      	strh	r3, [r7, #6]
 800cfe2:	e004      	b.n	800cfee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800cfe4:	88fb      	ldrh	r3, [r7, #6]
 800cfe6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800cfea:	80fb      	strh	r3, [r7, #6]
 800cfec:	bf00      	nop
			}
			break;
 800cfee:	e008      	b.n	800d002 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800cff0:	89fb      	ldrh	r3, [r7, #14]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d195      	bne.n	800cf22 <ff_wtoupper+0x1a>
 800cff6:	8a3b      	ldrh	r3, [r7, #16]
 800cff8:	005b      	lsls	r3, r3, #1
 800cffa:	697a      	ldr	r2, [r7, #20]
 800cffc:	4413      	add	r3, r2
 800cffe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d000:	e78f      	b.n	800cf22 <ff_wtoupper+0x1a>
			break;
 800d002:	bf00      	nop
	}

	return chr;
 800d004:	88fb      	ldrh	r3, [r7, #6]
}
 800d006:	4618      	mov	r0, r3
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr
 800d012:	bf00      	nop
 800d014:	08010590 	.word	0x08010590
 800d018:	08010784 	.word	0x08010784

0800d01c <sulp>:
 800d01c:	b570      	push	{r4, r5, r6, lr}
 800d01e:	4604      	mov	r4, r0
 800d020:	460d      	mov	r5, r1
 800d022:	ec45 4b10 	vmov	d0, r4, r5
 800d026:	4616      	mov	r6, r2
 800d028:	f002 f834 	bl	800f094 <__ulp>
 800d02c:	ec51 0b10 	vmov	r0, r1, d0
 800d030:	b17e      	cbz	r6, 800d052 <sulp+0x36>
 800d032:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d036:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	dd09      	ble.n	800d052 <sulp+0x36>
 800d03e:	051b      	lsls	r3, r3, #20
 800d040:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d044:	2400      	movs	r4, #0
 800d046:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d04a:	4622      	mov	r2, r4
 800d04c:	462b      	mov	r3, r5
 800d04e:	f7f3 faf3 	bl	8000638 <__aeabi_dmul>
 800d052:	ec41 0b10 	vmov	d0, r0, r1
 800d056:	bd70      	pop	{r4, r5, r6, pc}

0800d058 <_strtod_l>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	b09f      	sub	sp, #124	@ 0x7c
 800d05e:	460c      	mov	r4, r1
 800d060:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d062:	2200      	movs	r2, #0
 800d064:	921a      	str	r2, [sp, #104]	@ 0x68
 800d066:	9005      	str	r0, [sp, #20]
 800d068:	f04f 0a00 	mov.w	sl, #0
 800d06c:	f04f 0b00 	mov.w	fp, #0
 800d070:	460a      	mov	r2, r1
 800d072:	9219      	str	r2, [sp, #100]	@ 0x64
 800d074:	7811      	ldrb	r1, [r2, #0]
 800d076:	292b      	cmp	r1, #43	@ 0x2b
 800d078:	d04a      	beq.n	800d110 <_strtod_l+0xb8>
 800d07a:	d838      	bhi.n	800d0ee <_strtod_l+0x96>
 800d07c:	290d      	cmp	r1, #13
 800d07e:	d832      	bhi.n	800d0e6 <_strtod_l+0x8e>
 800d080:	2908      	cmp	r1, #8
 800d082:	d832      	bhi.n	800d0ea <_strtod_l+0x92>
 800d084:	2900      	cmp	r1, #0
 800d086:	d03b      	beq.n	800d100 <_strtod_l+0xa8>
 800d088:	2200      	movs	r2, #0
 800d08a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d08c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d08e:	782a      	ldrb	r2, [r5, #0]
 800d090:	2a30      	cmp	r2, #48	@ 0x30
 800d092:	f040 80b3 	bne.w	800d1fc <_strtod_l+0x1a4>
 800d096:	786a      	ldrb	r2, [r5, #1]
 800d098:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d09c:	2a58      	cmp	r2, #88	@ 0x58
 800d09e:	d16e      	bne.n	800d17e <_strtod_l+0x126>
 800d0a0:	9302      	str	r3, [sp, #8]
 800d0a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0a4:	9301      	str	r3, [sp, #4]
 800d0a6:	ab1a      	add	r3, sp, #104	@ 0x68
 800d0a8:	9300      	str	r3, [sp, #0]
 800d0aa:	4a8e      	ldr	r2, [pc, #568]	@ (800d2e4 <_strtod_l+0x28c>)
 800d0ac:	9805      	ldr	r0, [sp, #20]
 800d0ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d0b0:	a919      	add	r1, sp, #100	@ 0x64
 800d0b2:	f001 f8e9 	bl	800e288 <__gethex>
 800d0b6:	f010 060f 	ands.w	r6, r0, #15
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	d005      	beq.n	800d0ca <_strtod_l+0x72>
 800d0be:	2e06      	cmp	r6, #6
 800d0c0:	d128      	bne.n	800d114 <_strtod_l+0xbc>
 800d0c2:	3501      	adds	r5, #1
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800d0c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f040 858e 	bne.w	800dbee <_strtod_l+0xb96>
 800d0d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0d4:	b1cb      	cbz	r3, 800d10a <_strtod_l+0xb2>
 800d0d6:	4652      	mov	r2, sl
 800d0d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d0dc:	ec43 2b10 	vmov	d0, r2, r3
 800d0e0:	b01f      	add	sp, #124	@ 0x7c
 800d0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0e6:	2920      	cmp	r1, #32
 800d0e8:	d1ce      	bne.n	800d088 <_strtod_l+0x30>
 800d0ea:	3201      	adds	r2, #1
 800d0ec:	e7c1      	b.n	800d072 <_strtod_l+0x1a>
 800d0ee:	292d      	cmp	r1, #45	@ 0x2d
 800d0f0:	d1ca      	bne.n	800d088 <_strtod_l+0x30>
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d0f6:	1c51      	adds	r1, r2, #1
 800d0f8:	9119      	str	r1, [sp, #100]	@ 0x64
 800d0fa:	7852      	ldrb	r2, [r2, #1]
 800d0fc:	2a00      	cmp	r2, #0
 800d0fe:	d1c5      	bne.n	800d08c <_strtod_l+0x34>
 800d100:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d102:	9419      	str	r4, [sp, #100]	@ 0x64
 800d104:	2b00      	cmp	r3, #0
 800d106:	f040 8570 	bne.w	800dbea <_strtod_l+0xb92>
 800d10a:	4652      	mov	r2, sl
 800d10c:	465b      	mov	r3, fp
 800d10e:	e7e5      	b.n	800d0dc <_strtod_l+0x84>
 800d110:	2100      	movs	r1, #0
 800d112:	e7ef      	b.n	800d0f4 <_strtod_l+0x9c>
 800d114:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d116:	b13a      	cbz	r2, 800d128 <_strtod_l+0xd0>
 800d118:	2135      	movs	r1, #53	@ 0x35
 800d11a:	a81c      	add	r0, sp, #112	@ 0x70
 800d11c:	f002 f8b4 	bl	800f288 <__copybits>
 800d120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d122:	9805      	ldr	r0, [sp, #20]
 800d124:	f001 fc82 	bl	800ea2c <_Bfree>
 800d128:	3e01      	subs	r6, #1
 800d12a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d12c:	2e04      	cmp	r6, #4
 800d12e:	d806      	bhi.n	800d13e <_strtod_l+0xe6>
 800d130:	e8df f006 	tbb	[pc, r6]
 800d134:	201d0314 	.word	0x201d0314
 800d138:	14          	.byte	0x14
 800d139:	00          	.byte	0x00
 800d13a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d13e:	05e1      	lsls	r1, r4, #23
 800d140:	bf48      	it	mi
 800d142:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d146:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d14a:	0d1b      	lsrs	r3, r3, #20
 800d14c:	051b      	lsls	r3, r3, #20
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d1bb      	bne.n	800d0ca <_strtod_l+0x72>
 800d152:	f000 ff9b 	bl	800e08c <__errno>
 800d156:	2322      	movs	r3, #34	@ 0x22
 800d158:	6003      	str	r3, [r0, #0]
 800d15a:	e7b6      	b.n	800d0ca <_strtod_l+0x72>
 800d15c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d160:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d164:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d168:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d16c:	e7e7      	b.n	800d13e <_strtod_l+0xe6>
 800d16e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d2ec <_strtod_l+0x294>
 800d172:	e7e4      	b.n	800d13e <_strtod_l+0xe6>
 800d174:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d178:	f04f 3aff 	mov.w	sl, #4294967295
 800d17c:	e7df      	b.n	800d13e <_strtod_l+0xe6>
 800d17e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d180:	1c5a      	adds	r2, r3, #1
 800d182:	9219      	str	r2, [sp, #100]	@ 0x64
 800d184:	785b      	ldrb	r3, [r3, #1]
 800d186:	2b30      	cmp	r3, #48	@ 0x30
 800d188:	d0f9      	beq.n	800d17e <_strtod_l+0x126>
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d09d      	beq.n	800d0ca <_strtod_l+0x72>
 800d18e:	2301      	movs	r3, #1
 800d190:	9309      	str	r3, [sp, #36]	@ 0x24
 800d192:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d194:	930c      	str	r3, [sp, #48]	@ 0x30
 800d196:	2300      	movs	r3, #0
 800d198:	9308      	str	r3, [sp, #32]
 800d19a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d19c:	461f      	mov	r7, r3
 800d19e:	220a      	movs	r2, #10
 800d1a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d1a2:	7805      	ldrb	r5, [r0, #0]
 800d1a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d1a8:	b2d9      	uxtb	r1, r3
 800d1aa:	2909      	cmp	r1, #9
 800d1ac:	d928      	bls.n	800d200 <_strtod_l+0x1a8>
 800d1ae:	494e      	ldr	r1, [pc, #312]	@ (800d2e8 <_strtod_l+0x290>)
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f000 ff13 	bl	800dfdc <strncmp>
 800d1b6:	2800      	cmp	r0, #0
 800d1b8:	d032      	beq.n	800d220 <_strtod_l+0x1c8>
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	462a      	mov	r2, r5
 800d1be:	4681      	mov	r9, r0
 800d1c0:	463d      	mov	r5, r7
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2a65      	cmp	r2, #101	@ 0x65
 800d1c6:	d001      	beq.n	800d1cc <_strtod_l+0x174>
 800d1c8:	2a45      	cmp	r2, #69	@ 0x45
 800d1ca:	d114      	bne.n	800d1f6 <_strtod_l+0x19e>
 800d1cc:	b91d      	cbnz	r5, 800d1d6 <_strtod_l+0x17e>
 800d1ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1d0:	4302      	orrs	r2, r0
 800d1d2:	d095      	beq.n	800d100 <_strtod_l+0xa8>
 800d1d4:	2500      	movs	r5, #0
 800d1d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d1d8:	1c62      	adds	r2, r4, #1
 800d1da:	9219      	str	r2, [sp, #100]	@ 0x64
 800d1dc:	7862      	ldrb	r2, [r4, #1]
 800d1de:	2a2b      	cmp	r2, #43	@ 0x2b
 800d1e0:	d077      	beq.n	800d2d2 <_strtod_l+0x27a>
 800d1e2:	2a2d      	cmp	r2, #45	@ 0x2d
 800d1e4:	d07b      	beq.n	800d2de <_strtod_l+0x286>
 800d1e6:	f04f 0c00 	mov.w	ip, #0
 800d1ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d1ee:	2909      	cmp	r1, #9
 800d1f0:	f240 8082 	bls.w	800d2f8 <_strtod_l+0x2a0>
 800d1f4:	9419      	str	r4, [sp, #100]	@ 0x64
 800d1f6:	f04f 0800 	mov.w	r8, #0
 800d1fa:	e0a2      	b.n	800d342 <_strtod_l+0x2ea>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e7c7      	b.n	800d190 <_strtod_l+0x138>
 800d200:	2f08      	cmp	r7, #8
 800d202:	bfd5      	itete	le
 800d204:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d206:	9908      	ldrgt	r1, [sp, #32]
 800d208:	fb02 3301 	mlale	r3, r2, r1, r3
 800d20c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d210:	f100 0001 	add.w	r0, r0, #1
 800d214:	bfd4      	ite	le
 800d216:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d218:	9308      	strgt	r3, [sp, #32]
 800d21a:	3701      	adds	r7, #1
 800d21c:	9019      	str	r0, [sp, #100]	@ 0x64
 800d21e:	e7bf      	b.n	800d1a0 <_strtod_l+0x148>
 800d220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d222:	1c5a      	adds	r2, r3, #1
 800d224:	9219      	str	r2, [sp, #100]	@ 0x64
 800d226:	785a      	ldrb	r2, [r3, #1]
 800d228:	b37f      	cbz	r7, 800d28a <_strtod_l+0x232>
 800d22a:	4681      	mov	r9, r0
 800d22c:	463d      	mov	r5, r7
 800d22e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d232:	2b09      	cmp	r3, #9
 800d234:	d912      	bls.n	800d25c <_strtod_l+0x204>
 800d236:	2301      	movs	r3, #1
 800d238:	e7c4      	b.n	800d1c4 <_strtod_l+0x16c>
 800d23a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d23c:	1c5a      	adds	r2, r3, #1
 800d23e:	9219      	str	r2, [sp, #100]	@ 0x64
 800d240:	785a      	ldrb	r2, [r3, #1]
 800d242:	3001      	adds	r0, #1
 800d244:	2a30      	cmp	r2, #48	@ 0x30
 800d246:	d0f8      	beq.n	800d23a <_strtod_l+0x1e2>
 800d248:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d24c:	2b08      	cmp	r3, #8
 800d24e:	f200 84d3 	bhi.w	800dbf8 <_strtod_l+0xba0>
 800d252:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d254:	930c      	str	r3, [sp, #48]	@ 0x30
 800d256:	4681      	mov	r9, r0
 800d258:	2000      	movs	r0, #0
 800d25a:	4605      	mov	r5, r0
 800d25c:	3a30      	subs	r2, #48	@ 0x30
 800d25e:	f100 0301 	add.w	r3, r0, #1
 800d262:	d02a      	beq.n	800d2ba <_strtod_l+0x262>
 800d264:	4499      	add	r9, r3
 800d266:	eb00 0c05 	add.w	ip, r0, r5
 800d26a:	462b      	mov	r3, r5
 800d26c:	210a      	movs	r1, #10
 800d26e:	4563      	cmp	r3, ip
 800d270:	d10d      	bne.n	800d28e <_strtod_l+0x236>
 800d272:	1c69      	adds	r1, r5, #1
 800d274:	4401      	add	r1, r0
 800d276:	4428      	add	r0, r5
 800d278:	2808      	cmp	r0, #8
 800d27a:	dc16      	bgt.n	800d2aa <_strtod_l+0x252>
 800d27c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d27e:	230a      	movs	r3, #10
 800d280:	fb03 2300 	mla	r3, r3, r0, r2
 800d284:	930a      	str	r3, [sp, #40]	@ 0x28
 800d286:	2300      	movs	r3, #0
 800d288:	e018      	b.n	800d2bc <_strtod_l+0x264>
 800d28a:	4638      	mov	r0, r7
 800d28c:	e7da      	b.n	800d244 <_strtod_l+0x1ec>
 800d28e:	2b08      	cmp	r3, #8
 800d290:	f103 0301 	add.w	r3, r3, #1
 800d294:	dc03      	bgt.n	800d29e <_strtod_l+0x246>
 800d296:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d298:	434e      	muls	r6, r1
 800d29a:	960a      	str	r6, [sp, #40]	@ 0x28
 800d29c:	e7e7      	b.n	800d26e <_strtod_l+0x216>
 800d29e:	2b10      	cmp	r3, #16
 800d2a0:	bfde      	ittt	le
 800d2a2:	9e08      	ldrle	r6, [sp, #32]
 800d2a4:	434e      	mulle	r6, r1
 800d2a6:	9608      	strle	r6, [sp, #32]
 800d2a8:	e7e1      	b.n	800d26e <_strtod_l+0x216>
 800d2aa:	280f      	cmp	r0, #15
 800d2ac:	dceb      	bgt.n	800d286 <_strtod_l+0x22e>
 800d2ae:	9808      	ldr	r0, [sp, #32]
 800d2b0:	230a      	movs	r3, #10
 800d2b2:	fb03 2300 	mla	r3, r3, r0, r2
 800d2b6:	9308      	str	r3, [sp, #32]
 800d2b8:	e7e5      	b.n	800d286 <_strtod_l+0x22e>
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2be:	1c50      	adds	r0, r2, #1
 800d2c0:	9019      	str	r0, [sp, #100]	@ 0x64
 800d2c2:	7852      	ldrb	r2, [r2, #1]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	460d      	mov	r5, r1
 800d2c8:	e7b1      	b.n	800d22e <_strtod_l+0x1d6>
 800d2ca:	f04f 0900 	mov.w	r9, #0
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e77d      	b.n	800d1ce <_strtod_l+0x176>
 800d2d2:	f04f 0c00 	mov.w	ip, #0
 800d2d6:	1ca2      	adds	r2, r4, #2
 800d2d8:	9219      	str	r2, [sp, #100]	@ 0x64
 800d2da:	78a2      	ldrb	r2, [r4, #2]
 800d2dc:	e785      	b.n	800d1ea <_strtod_l+0x192>
 800d2de:	f04f 0c01 	mov.w	ip, #1
 800d2e2:	e7f8      	b.n	800d2d6 <_strtod_l+0x27e>
 800d2e4:	08010864 	.word	0x08010864
 800d2e8:	08010840 	.word	0x08010840
 800d2ec:	7ff00000 	.word	0x7ff00000
 800d2f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d2f2:	1c51      	adds	r1, r2, #1
 800d2f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800d2f6:	7852      	ldrb	r2, [r2, #1]
 800d2f8:	2a30      	cmp	r2, #48	@ 0x30
 800d2fa:	d0f9      	beq.n	800d2f0 <_strtod_l+0x298>
 800d2fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d300:	2908      	cmp	r1, #8
 800d302:	f63f af78 	bhi.w	800d1f6 <_strtod_l+0x19e>
 800d306:	3a30      	subs	r2, #48	@ 0x30
 800d308:	920e      	str	r2, [sp, #56]	@ 0x38
 800d30a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d30c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d30e:	f04f 080a 	mov.w	r8, #10
 800d312:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d314:	1c56      	adds	r6, r2, #1
 800d316:	9619      	str	r6, [sp, #100]	@ 0x64
 800d318:	7852      	ldrb	r2, [r2, #1]
 800d31a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d31e:	f1be 0f09 	cmp.w	lr, #9
 800d322:	d939      	bls.n	800d398 <_strtod_l+0x340>
 800d324:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d326:	1a76      	subs	r6, r6, r1
 800d328:	2e08      	cmp	r6, #8
 800d32a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d32e:	dc03      	bgt.n	800d338 <_strtod_l+0x2e0>
 800d330:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d332:	4588      	cmp	r8, r1
 800d334:	bfa8      	it	ge
 800d336:	4688      	movge	r8, r1
 800d338:	f1bc 0f00 	cmp.w	ip, #0
 800d33c:	d001      	beq.n	800d342 <_strtod_l+0x2ea>
 800d33e:	f1c8 0800 	rsb	r8, r8, #0
 800d342:	2d00      	cmp	r5, #0
 800d344:	d14e      	bne.n	800d3e4 <_strtod_l+0x38c>
 800d346:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d348:	4308      	orrs	r0, r1
 800d34a:	f47f aebe 	bne.w	800d0ca <_strtod_l+0x72>
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f47f aed6 	bne.w	800d100 <_strtod_l+0xa8>
 800d354:	2a69      	cmp	r2, #105	@ 0x69
 800d356:	d028      	beq.n	800d3aa <_strtod_l+0x352>
 800d358:	dc25      	bgt.n	800d3a6 <_strtod_l+0x34e>
 800d35a:	2a49      	cmp	r2, #73	@ 0x49
 800d35c:	d025      	beq.n	800d3aa <_strtod_l+0x352>
 800d35e:	2a4e      	cmp	r2, #78	@ 0x4e
 800d360:	f47f aece 	bne.w	800d100 <_strtod_l+0xa8>
 800d364:	499b      	ldr	r1, [pc, #620]	@ (800d5d4 <_strtod_l+0x57c>)
 800d366:	a819      	add	r0, sp, #100	@ 0x64
 800d368:	f001 f9b0 	bl	800e6cc <__match>
 800d36c:	2800      	cmp	r0, #0
 800d36e:	f43f aec7 	beq.w	800d100 <_strtod_l+0xa8>
 800d372:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b28      	cmp	r3, #40	@ 0x28
 800d378:	d12e      	bne.n	800d3d8 <_strtod_l+0x380>
 800d37a:	4997      	ldr	r1, [pc, #604]	@ (800d5d8 <_strtod_l+0x580>)
 800d37c:	aa1c      	add	r2, sp, #112	@ 0x70
 800d37e:	a819      	add	r0, sp, #100	@ 0x64
 800d380:	f001 f9b8 	bl	800e6f4 <__hexnan>
 800d384:	2805      	cmp	r0, #5
 800d386:	d127      	bne.n	800d3d8 <_strtod_l+0x380>
 800d388:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d38a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d38e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d392:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d396:	e698      	b.n	800d0ca <_strtod_l+0x72>
 800d398:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d39a:	fb08 2101 	mla	r1, r8, r1, r2
 800d39e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d3a2:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3a4:	e7b5      	b.n	800d312 <_strtod_l+0x2ba>
 800d3a6:	2a6e      	cmp	r2, #110	@ 0x6e
 800d3a8:	e7da      	b.n	800d360 <_strtod_l+0x308>
 800d3aa:	498c      	ldr	r1, [pc, #560]	@ (800d5dc <_strtod_l+0x584>)
 800d3ac:	a819      	add	r0, sp, #100	@ 0x64
 800d3ae:	f001 f98d 	bl	800e6cc <__match>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	f43f aea4 	beq.w	800d100 <_strtod_l+0xa8>
 800d3b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3ba:	4989      	ldr	r1, [pc, #548]	@ (800d5e0 <_strtod_l+0x588>)
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	a819      	add	r0, sp, #100	@ 0x64
 800d3c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3c2:	f001 f983 	bl	800e6cc <__match>
 800d3c6:	b910      	cbnz	r0, 800d3ce <_strtod_l+0x376>
 800d3c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	9319      	str	r3, [sp, #100]	@ 0x64
 800d3ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d5f0 <_strtod_l+0x598>
 800d3d2:	f04f 0a00 	mov.w	sl, #0
 800d3d6:	e678      	b.n	800d0ca <_strtod_l+0x72>
 800d3d8:	4882      	ldr	r0, [pc, #520]	@ (800d5e4 <_strtod_l+0x58c>)
 800d3da:	f000 fe95 	bl	800e108 <nan>
 800d3de:	ec5b ab10 	vmov	sl, fp, d0
 800d3e2:	e672      	b.n	800d0ca <_strtod_l+0x72>
 800d3e4:	eba8 0309 	sub.w	r3, r8, r9
 800d3e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d3ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ec:	2f00      	cmp	r7, #0
 800d3ee:	bf08      	it	eq
 800d3f0:	462f      	moveq	r7, r5
 800d3f2:	2d10      	cmp	r5, #16
 800d3f4:	462c      	mov	r4, r5
 800d3f6:	bfa8      	it	ge
 800d3f8:	2410      	movge	r4, #16
 800d3fa:	f7f3 f8a3 	bl	8000544 <__aeabi_ui2d>
 800d3fe:	2d09      	cmp	r5, #9
 800d400:	4682      	mov	sl, r0
 800d402:	468b      	mov	fp, r1
 800d404:	dc13      	bgt.n	800d42e <_strtod_l+0x3d6>
 800d406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f43f ae5e 	beq.w	800d0ca <_strtod_l+0x72>
 800d40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d410:	dd78      	ble.n	800d504 <_strtod_l+0x4ac>
 800d412:	2b16      	cmp	r3, #22
 800d414:	dc5f      	bgt.n	800d4d6 <_strtod_l+0x47e>
 800d416:	4974      	ldr	r1, [pc, #464]	@ (800d5e8 <_strtod_l+0x590>)
 800d418:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d420:	4652      	mov	r2, sl
 800d422:	465b      	mov	r3, fp
 800d424:	f7f3 f908 	bl	8000638 <__aeabi_dmul>
 800d428:	4682      	mov	sl, r0
 800d42a:	468b      	mov	fp, r1
 800d42c:	e64d      	b.n	800d0ca <_strtod_l+0x72>
 800d42e:	4b6e      	ldr	r3, [pc, #440]	@ (800d5e8 <_strtod_l+0x590>)
 800d430:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d434:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d438:	f7f3 f8fe 	bl	8000638 <__aeabi_dmul>
 800d43c:	4682      	mov	sl, r0
 800d43e:	9808      	ldr	r0, [sp, #32]
 800d440:	468b      	mov	fp, r1
 800d442:	f7f3 f87f 	bl	8000544 <__aeabi_ui2d>
 800d446:	4602      	mov	r2, r0
 800d448:	460b      	mov	r3, r1
 800d44a:	4650      	mov	r0, sl
 800d44c:	4659      	mov	r1, fp
 800d44e:	f7f2 ff3d 	bl	80002cc <__adddf3>
 800d452:	2d0f      	cmp	r5, #15
 800d454:	4682      	mov	sl, r0
 800d456:	468b      	mov	fp, r1
 800d458:	ddd5      	ble.n	800d406 <_strtod_l+0x3ae>
 800d45a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d45c:	1b2c      	subs	r4, r5, r4
 800d45e:	441c      	add	r4, r3
 800d460:	2c00      	cmp	r4, #0
 800d462:	f340 8096 	ble.w	800d592 <_strtod_l+0x53a>
 800d466:	f014 030f 	ands.w	r3, r4, #15
 800d46a:	d00a      	beq.n	800d482 <_strtod_l+0x42a>
 800d46c:	495e      	ldr	r1, [pc, #376]	@ (800d5e8 <_strtod_l+0x590>)
 800d46e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d472:	4652      	mov	r2, sl
 800d474:	465b      	mov	r3, fp
 800d476:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d47a:	f7f3 f8dd 	bl	8000638 <__aeabi_dmul>
 800d47e:	4682      	mov	sl, r0
 800d480:	468b      	mov	fp, r1
 800d482:	f034 040f 	bics.w	r4, r4, #15
 800d486:	d073      	beq.n	800d570 <_strtod_l+0x518>
 800d488:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d48c:	dd48      	ble.n	800d520 <_strtod_l+0x4c8>
 800d48e:	2400      	movs	r4, #0
 800d490:	46a0      	mov	r8, r4
 800d492:	940a      	str	r4, [sp, #40]	@ 0x28
 800d494:	46a1      	mov	r9, r4
 800d496:	9a05      	ldr	r2, [sp, #20]
 800d498:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d5f0 <_strtod_l+0x598>
 800d49c:	2322      	movs	r3, #34	@ 0x22
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	f04f 0a00 	mov.w	sl, #0
 800d4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f43f ae0f 	beq.w	800d0ca <_strtod_l+0x72>
 800d4ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4ae:	9805      	ldr	r0, [sp, #20]
 800d4b0:	f001 fabc 	bl	800ea2c <_Bfree>
 800d4b4:	9805      	ldr	r0, [sp, #20]
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	f001 fab8 	bl	800ea2c <_Bfree>
 800d4bc:	9805      	ldr	r0, [sp, #20]
 800d4be:	4641      	mov	r1, r8
 800d4c0:	f001 fab4 	bl	800ea2c <_Bfree>
 800d4c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d4c6:	9805      	ldr	r0, [sp, #20]
 800d4c8:	f001 fab0 	bl	800ea2c <_Bfree>
 800d4cc:	9805      	ldr	r0, [sp, #20]
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	f001 faac 	bl	800ea2c <_Bfree>
 800d4d4:	e5f9      	b.n	800d0ca <_strtod_l+0x72>
 800d4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	dbbc      	blt.n	800d45a <_strtod_l+0x402>
 800d4e0:	4c41      	ldr	r4, [pc, #260]	@ (800d5e8 <_strtod_l+0x590>)
 800d4e2:	f1c5 050f 	rsb	r5, r5, #15
 800d4e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d4ea:	4652      	mov	r2, sl
 800d4ec:	465b      	mov	r3, fp
 800d4ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4f2:	f7f3 f8a1 	bl	8000638 <__aeabi_dmul>
 800d4f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4f8:	1b5d      	subs	r5, r3, r5
 800d4fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d4fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d502:	e78f      	b.n	800d424 <_strtod_l+0x3cc>
 800d504:	3316      	adds	r3, #22
 800d506:	dba8      	blt.n	800d45a <_strtod_l+0x402>
 800d508:	4b37      	ldr	r3, [pc, #220]	@ (800d5e8 <_strtod_l+0x590>)
 800d50a:	eba9 0808 	sub.w	r8, r9, r8
 800d50e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d512:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d516:	4650      	mov	r0, sl
 800d518:	4659      	mov	r1, fp
 800d51a:	f7f3 f9b7 	bl	800088c <__aeabi_ddiv>
 800d51e:	e783      	b.n	800d428 <_strtod_l+0x3d0>
 800d520:	4b32      	ldr	r3, [pc, #200]	@ (800d5ec <_strtod_l+0x594>)
 800d522:	9308      	str	r3, [sp, #32]
 800d524:	2300      	movs	r3, #0
 800d526:	1124      	asrs	r4, r4, #4
 800d528:	4650      	mov	r0, sl
 800d52a:	4659      	mov	r1, fp
 800d52c:	461e      	mov	r6, r3
 800d52e:	2c01      	cmp	r4, #1
 800d530:	dc21      	bgt.n	800d576 <_strtod_l+0x51e>
 800d532:	b10b      	cbz	r3, 800d538 <_strtod_l+0x4e0>
 800d534:	4682      	mov	sl, r0
 800d536:	468b      	mov	fp, r1
 800d538:	492c      	ldr	r1, [pc, #176]	@ (800d5ec <_strtod_l+0x594>)
 800d53a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d53e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d542:	4652      	mov	r2, sl
 800d544:	465b      	mov	r3, fp
 800d546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d54a:	f7f3 f875 	bl	8000638 <__aeabi_dmul>
 800d54e:	4b28      	ldr	r3, [pc, #160]	@ (800d5f0 <_strtod_l+0x598>)
 800d550:	460a      	mov	r2, r1
 800d552:	400b      	ands	r3, r1
 800d554:	4927      	ldr	r1, [pc, #156]	@ (800d5f4 <_strtod_l+0x59c>)
 800d556:	428b      	cmp	r3, r1
 800d558:	4682      	mov	sl, r0
 800d55a:	d898      	bhi.n	800d48e <_strtod_l+0x436>
 800d55c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d560:	428b      	cmp	r3, r1
 800d562:	bf86      	itte	hi
 800d564:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d5f8 <_strtod_l+0x5a0>
 800d568:	f04f 3aff 	movhi.w	sl, #4294967295
 800d56c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d570:	2300      	movs	r3, #0
 800d572:	9308      	str	r3, [sp, #32]
 800d574:	e07a      	b.n	800d66c <_strtod_l+0x614>
 800d576:	07e2      	lsls	r2, r4, #31
 800d578:	d505      	bpl.n	800d586 <_strtod_l+0x52e>
 800d57a:	9b08      	ldr	r3, [sp, #32]
 800d57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d580:	f7f3 f85a 	bl	8000638 <__aeabi_dmul>
 800d584:	2301      	movs	r3, #1
 800d586:	9a08      	ldr	r2, [sp, #32]
 800d588:	3208      	adds	r2, #8
 800d58a:	3601      	adds	r6, #1
 800d58c:	1064      	asrs	r4, r4, #1
 800d58e:	9208      	str	r2, [sp, #32]
 800d590:	e7cd      	b.n	800d52e <_strtod_l+0x4d6>
 800d592:	d0ed      	beq.n	800d570 <_strtod_l+0x518>
 800d594:	4264      	negs	r4, r4
 800d596:	f014 020f 	ands.w	r2, r4, #15
 800d59a:	d00a      	beq.n	800d5b2 <_strtod_l+0x55a>
 800d59c:	4b12      	ldr	r3, [pc, #72]	@ (800d5e8 <_strtod_l+0x590>)
 800d59e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	4659      	mov	r1, fp
 800d5a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5aa:	f7f3 f96f 	bl	800088c <__aeabi_ddiv>
 800d5ae:	4682      	mov	sl, r0
 800d5b0:	468b      	mov	fp, r1
 800d5b2:	1124      	asrs	r4, r4, #4
 800d5b4:	d0dc      	beq.n	800d570 <_strtod_l+0x518>
 800d5b6:	2c1f      	cmp	r4, #31
 800d5b8:	dd20      	ble.n	800d5fc <_strtod_l+0x5a4>
 800d5ba:	2400      	movs	r4, #0
 800d5bc:	46a0      	mov	r8, r4
 800d5be:	940a      	str	r4, [sp, #40]	@ 0x28
 800d5c0:	46a1      	mov	r9, r4
 800d5c2:	9a05      	ldr	r2, [sp, #20]
 800d5c4:	2322      	movs	r3, #34	@ 0x22
 800d5c6:	f04f 0a00 	mov.w	sl, #0
 800d5ca:	f04f 0b00 	mov.w	fp, #0
 800d5ce:	6013      	str	r3, [r2, #0]
 800d5d0:	e768      	b.n	800d4a4 <_strtod_l+0x44c>
 800d5d2:	bf00      	nop
 800d5d4:	0801084b 	.word	0x0801084b
 800d5d8:	08010850 	.word	0x08010850
 800d5dc:	08010842 	.word	0x08010842
 800d5e0:	08010845 	.word	0x08010845
 800d5e4:	08010bf7 	.word	0x08010bf7
 800d5e8:	080109c0 	.word	0x080109c0
 800d5ec:	08010998 	.word	0x08010998
 800d5f0:	7ff00000 	.word	0x7ff00000
 800d5f4:	7ca00000 	.word	0x7ca00000
 800d5f8:	7fefffff 	.word	0x7fefffff
 800d5fc:	f014 0310 	ands.w	r3, r4, #16
 800d600:	bf18      	it	ne
 800d602:	236a      	movne	r3, #106	@ 0x6a
 800d604:	4ea9      	ldr	r6, [pc, #676]	@ (800d8ac <_strtod_l+0x854>)
 800d606:	9308      	str	r3, [sp, #32]
 800d608:	4650      	mov	r0, sl
 800d60a:	4659      	mov	r1, fp
 800d60c:	2300      	movs	r3, #0
 800d60e:	07e2      	lsls	r2, r4, #31
 800d610:	d504      	bpl.n	800d61c <_strtod_l+0x5c4>
 800d612:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d616:	f7f3 f80f 	bl	8000638 <__aeabi_dmul>
 800d61a:	2301      	movs	r3, #1
 800d61c:	1064      	asrs	r4, r4, #1
 800d61e:	f106 0608 	add.w	r6, r6, #8
 800d622:	d1f4      	bne.n	800d60e <_strtod_l+0x5b6>
 800d624:	b10b      	cbz	r3, 800d62a <_strtod_l+0x5d2>
 800d626:	4682      	mov	sl, r0
 800d628:	468b      	mov	fp, r1
 800d62a:	9b08      	ldr	r3, [sp, #32]
 800d62c:	b1b3      	cbz	r3, 800d65c <_strtod_l+0x604>
 800d62e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d632:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d636:	2b00      	cmp	r3, #0
 800d638:	4659      	mov	r1, fp
 800d63a:	dd0f      	ble.n	800d65c <_strtod_l+0x604>
 800d63c:	2b1f      	cmp	r3, #31
 800d63e:	dd55      	ble.n	800d6ec <_strtod_l+0x694>
 800d640:	2b34      	cmp	r3, #52	@ 0x34
 800d642:	bfde      	ittt	le
 800d644:	f04f 33ff 	movle.w	r3, #4294967295
 800d648:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d64c:	4093      	lslle	r3, r2
 800d64e:	f04f 0a00 	mov.w	sl, #0
 800d652:	bfcc      	ite	gt
 800d654:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d658:	ea03 0b01 	andle.w	fp, r3, r1
 800d65c:	2200      	movs	r2, #0
 800d65e:	2300      	movs	r3, #0
 800d660:	4650      	mov	r0, sl
 800d662:	4659      	mov	r1, fp
 800d664:	f7f3 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 800d668:	2800      	cmp	r0, #0
 800d66a:	d1a6      	bne.n	800d5ba <_strtod_l+0x562>
 800d66c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d66e:	9300      	str	r3, [sp, #0]
 800d670:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d672:	9805      	ldr	r0, [sp, #20]
 800d674:	462b      	mov	r3, r5
 800d676:	463a      	mov	r2, r7
 800d678:	f001 fa40 	bl	800eafc <__s2b>
 800d67c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d67e:	2800      	cmp	r0, #0
 800d680:	f43f af05 	beq.w	800d48e <_strtod_l+0x436>
 800d684:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d686:	2a00      	cmp	r2, #0
 800d688:	eba9 0308 	sub.w	r3, r9, r8
 800d68c:	bfa8      	it	ge
 800d68e:	2300      	movge	r3, #0
 800d690:	9312      	str	r3, [sp, #72]	@ 0x48
 800d692:	2400      	movs	r4, #0
 800d694:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d698:	9316      	str	r3, [sp, #88]	@ 0x58
 800d69a:	46a0      	mov	r8, r4
 800d69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d69e:	9805      	ldr	r0, [sp, #20]
 800d6a0:	6859      	ldr	r1, [r3, #4]
 800d6a2:	f001 f983 	bl	800e9ac <_Balloc>
 800d6a6:	4681      	mov	r9, r0
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f43f aef4 	beq.w	800d496 <_strtod_l+0x43e>
 800d6ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6b0:	691a      	ldr	r2, [r3, #16]
 800d6b2:	3202      	adds	r2, #2
 800d6b4:	f103 010c 	add.w	r1, r3, #12
 800d6b8:	0092      	lsls	r2, r2, #2
 800d6ba:	300c      	adds	r0, #12
 800d6bc:	f000 fd13 	bl	800e0e6 <memcpy>
 800d6c0:	ec4b ab10 	vmov	d0, sl, fp
 800d6c4:	9805      	ldr	r0, [sp, #20]
 800d6c6:	aa1c      	add	r2, sp, #112	@ 0x70
 800d6c8:	a91b      	add	r1, sp, #108	@ 0x6c
 800d6ca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d6ce:	f001 fd51 	bl	800f174 <__d2b>
 800d6d2:	901a      	str	r0, [sp, #104]	@ 0x68
 800d6d4:	2800      	cmp	r0, #0
 800d6d6:	f43f aede 	beq.w	800d496 <_strtod_l+0x43e>
 800d6da:	9805      	ldr	r0, [sp, #20]
 800d6dc:	2101      	movs	r1, #1
 800d6de:	f001 faa3 	bl	800ec28 <__i2b>
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	b948      	cbnz	r0, 800d6fa <_strtod_l+0x6a2>
 800d6e6:	f04f 0800 	mov.w	r8, #0
 800d6ea:	e6d4      	b.n	800d496 <_strtod_l+0x43e>
 800d6ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f0:	fa02 f303 	lsl.w	r3, r2, r3
 800d6f4:	ea03 0a0a 	and.w	sl, r3, sl
 800d6f8:	e7b0      	b.n	800d65c <_strtod_l+0x604>
 800d6fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d6fc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d6fe:	2d00      	cmp	r5, #0
 800d700:	bfab      	itete	ge
 800d702:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d704:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d706:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d708:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d70a:	bfac      	ite	ge
 800d70c:	18ef      	addge	r7, r5, r3
 800d70e:	1b5e      	sublt	r6, r3, r5
 800d710:	9b08      	ldr	r3, [sp, #32]
 800d712:	1aed      	subs	r5, r5, r3
 800d714:	4415      	add	r5, r2
 800d716:	4b66      	ldr	r3, [pc, #408]	@ (800d8b0 <_strtod_l+0x858>)
 800d718:	3d01      	subs	r5, #1
 800d71a:	429d      	cmp	r5, r3
 800d71c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d720:	da50      	bge.n	800d7c4 <_strtod_l+0x76c>
 800d722:	1b5b      	subs	r3, r3, r5
 800d724:	2b1f      	cmp	r3, #31
 800d726:	eba2 0203 	sub.w	r2, r2, r3
 800d72a:	f04f 0101 	mov.w	r1, #1
 800d72e:	dc3d      	bgt.n	800d7ac <_strtod_l+0x754>
 800d730:	fa01 f303 	lsl.w	r3, r1, r3
 800d734:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d736:	2300      	movs	r3, #0
 800d738:	9310      	str	r3, [sp, #64]	@ 0x40
 800d73a:	18bd      	adds	r5, r7, r2
 800d73c:	9b08      	ldr	r3, [sp, #32]
 800d73e:	42af      	cmp	r7, r5
 800d740:	4416      	add	r6, r2
 800d742:	441e      	add	r6, r3
 800d744:	463b      	mov	r3, r7
 800d746:	bfa8      	it	ge
 800d748:	462b      	movge	r3, r5
 800d74a:	42b3      	cmp	r3, r6
 800d74c:	bfa8      	it	ge
 800d74e:	4633      	movge	r3, r6
 800d750:	2b00      	cmp	r3, #0
 800d752:	bfc2      	ittt	gt
 800d754:	1aed      	subgt	r5, r5, r3
 800d756:	1af6      	subgt	r6, r6, r3
 800d758:	1aff      	subgt	r7, r7, r3
 800d75a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd16      	ble.n	800d78e <_strtod_l+0x736>
 800d760:	4641      	mov	r1, r8
 800d762:	9805      	ldr	r0, [sp, #20]
 800d764:	461a      	mov	r2, r3
 800d766:	f001 fb1f 	bl	800eda8 <__pow5mult>
 800d76a:	4680      	mov	r8, r0
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d0ba      	beq.n	800d6e6 <_strtod_l+0x68e>
 800d770:	4601      	mov	r1, r0
 800d772:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d774:	9805      	ldr	r0, [sp, #20]
 800d776:	f001 fa6d 	bl	800ec54 <__multiply>
 800d77a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d77c:	2800      	cmp	r0, #0
 800d77e:	f43f ae8a 	beq.w	800d496 <_strtod_l+0x43e>
 800d782:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d784:	9805      	ldr	r0, [sp, #20]
 800d786:	f001 f951 	bl	800ea2c <_Bfree>
 800d78a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d78c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d78e:	2d00      	cmp	r5, #0
 800d790:	dc1d      	bgt.n	800d7ce <_strtod_l+0x776>
 800d792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	dd23      	ble.n	800d7e0 <_strtod_l+0x788>
 800d798:	4649      	mov	r1, r9
 800d79a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d79c:	9805      	ldr	r0, [sp, #20]
 800d79e:	f001 fb03 	bl	800eda8 <__pow5mult>
 800d7a2:	4681      	mov	r9, r0
 800d7a4:	b9e0      	cbnz	r0, 800d7e0 <_strtod_l+0x788>
 800d7a6:	f04f 0900 	mov.w	r9, #0
 800d7aa:	e674      	b.n	800d496 <_strtod_l+0x43e>
 800d7ac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d7b0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d7b4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d7b8:	35e2      	adds	r5, #226	@ 0xe2
 800d7ba:	fa01 f305 	lsl.w	r3, r1, r5
 800d7be:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7c0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d7c2:	e7ba      	b.n	800d73a <_strtod_l+0x6e2>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d7cc:	e7b5      	b.n	800d73a <_strtod_l+0x6e2>
 800d7ce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d7d0:	9805      	ldr	r0, [sp, #20]
 800d7d2:	462a      	mov	r2, r5
 800d7d4:	f001 fb42 	bl	800ee5c <__lshift>
 800d7d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d1d9      	bne.n	800d792 <_strtod_l+0x73a>
 800d7de:	e65a      	b.n	800d496 <_strtod_l+0x43e>
 800d7e0:	2e00      	cmp	r6, #0
 800d7e2:	dd07      	ble.n	800d7f4 <_strtod_l+0x79c>
 800d7e4:	4649      	mov	r1, r9
 800d7e6:	9805      	ldr	r0, [sp, #20]
 800d7e8:	4632      	mov	r2, r6
 800d7ea:	f001 fb37 	bl	800ee5c <__lshift>
 800d7ee:	4681      	mov	r9, r0
 800d7f0:	2800      	cmp	r0, #0
 800d7f2:	d0d8      	beq.n	800d7a6 <_strtod_l+0x74e>
 800d7f4:	2f00      	cmp	r7, #0
 800d7f6:	dd08      	ble.n	800d80a <_strtod_l+0x7b2>
 800d7f8:	4641      	mov	r1, r8
 800d7fa:	9805      	ldr	r0, [sp, #20]
 800d7fc:	463a      	mov	r2, r7
 800d7fe:	f001 fb2d 	bl	800ee5c <__lshift>
 800d802:	4680      	mov	r8, r0
 800d804:	2800      	cmp	r0, #0
 800d806:	f43f ae46 	beq.w	800d496 <_strtod_l+0x43e>
 800d80a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d80c:	9805      	ldr	r0, [sp, #20]
 800d80e:	464a      	mov	r2, r9
 800d810:	f001 fbac 	bl	800ef6c <__mdiff>
 800d814:	4604      	mov	r4, r0
 800d816:	2800      	cmp	r0, #0
 800d818:	f43f ae3d 	beq.w	800d496 <_strtod_l+0x43e>
 800d81c:	68c3      	ldr	r3, [r0, #12]
 800d81e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d820:	2300      	movs	r3, #0
 800d822:	60c3      	str	r3, [r0, #12]
 800d824:	4641      	mov	r1, r8
 800d826:	f001 fb85 	bl	800ef34 <__mcmp>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	da46      	bge.n	800d8bc <_strtod_l+0x864>
 800d82e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d830:	ea53 030a 	orrs.w	r3, r3, sl
 800d834:	d16c      	bne.n	800d910 <_strtod_l+0x8b8>
 800d836:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d168      	bne.n	800d910 <_strtod_l+0x8b8>
 800d83e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d842:	0d1b      	lsrs	r3, r3, #20
 800d844:	051b      	lsls	r3, r3, #20
 800d846:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d84a:	d961      	bls.n	800d910 <_strtod_l+0x8b8>
 800d84c:	6963      	ldr	r3, [r4, #20]
 800d84e:	b913      	cbnz	r3, 800d856 <_strtod_l+0x7fe>
 800d850:	6923      	ldr	r3, [r4, #16]
 800d852:	2b01      	cmp	r3, #1
 800d854:	dd5c      	ble.n	800d910 <_strtod_l+0x8b8>
 800d856:	4621      	mov	r1, r4
 800d858:	2201      	movs	r2, #1
 800d85a:	9805      	ldr	r0, [sp, #20]
 800d85c:	f001 fafe 	bl	800ee5c <__lshift>
 800d860:	4641      	mov	r1, r8
 800d862:	4604      	mov	r4, r0
 800d864:	f001 fb66 	bl	800ef34 <__mcmp>
 800d868:	2800      	cmp	r0, #0
 800d86a:	dd51      	ble.n	800d910 <_strtod_l+0x8b8>
 800d86c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d870:	9a08      	ldr	r2, [sp, #32]
 800d872:	0d1b      	lsrs	r3, r3, #20
 800d874:	051b      	lsls	r3, r3, #20
 800d876:	2a00      	cmp	r2, #0
 800d878:	d06b      	beq.n	800d952 <_strtod_l+0x8fa>
 800d87a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d87e:	d868      	bhi.n	800d952 <_strtod_l+0x8fa>
 800d880:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d884:	f67f ae9d 	bls.w	800d5c2 <_strtod_l+0x56a>
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <_strtod_l+0x85c>)
 800d88a:	4650      	mov	r0, sl
 800d88c:	4659      	mov	r1, fp
 800d88e:	2200      	movs	r2, #0
 800d890:	f7f2 fed2 	bl	8000638 <__aeabi_dmul>
 800d894:	4b08      	ldr	r3, [pc, #32]	@ (800d8b8 <_strtod_l+0x860>)
 800d896:	400b      	ands	r3, r1
 800d898:	4682      	mov	sl, r0
 800d89a:	468b      	mov	fp, r1
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f47f ae05 	bne.w	800d4ac <_strtod_l+0x454>
 800d8a2:	9a05      	ldr	r2, [sp, #20]
 800d8a4:	2322      	movs	r3, #34	@ 0x22
 800d8a6:	6013      	str	r3, [r2, #0]
 800d8a8:	e600      	b.n	800d4ac <_strtod_l+0x454>
 800d8aa:	bf00      	nop
 800d8ac:	08010878 	.word	0x08010878
 800d8b0:	fffffc02 	.word	0xfffffc02
 800d8b4:	39500000 	.word	0x39500000
 800d8b8:	7ff00000 	.word	0x7ff00000
 800d8bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d8c0:	d165      	bne.n	800d98e <_strtod_l+0x936>
 800d8c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d8c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8c8:	b35a      	cbz	r2, 800d922 <_strtod_l+0x8ca>
 800d8ca:	4a9f      	ldr	r2, [pc, #636]	@ (800db48 <_strtod_l+0xaf0>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d12b      	bne.n	800d928 <_strtod_l+0x8d0>
 800d8d0:	9b08      	ldr	r3, [sp, #32]
 800d8d2:	4651      	mov	r1, sl
 800d8d4:	b303      	cbz	r3, 800d918 <_strtod_l+0x8c0>
 800d8d6:	4b9d      	ldr	r3, [pc, #628]	@ (800db4c <_strtod_l+0xaf4>)
 800d8d8:	465a      	mov	r2, fp
 800d8da:	4013      	ands	r3, r2
 800d8dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e4:	d81b      	bhi.n	800d91e <_strtod_l+0x8c6>
 800d8e6:	0d1b      	lsrs	r3, r3, #20
 800d8e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d8ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f0:	4299      	cmp	r1, r3
 800d8f2:	d119      	bne.n	800d928 <_strtod_l+0x8d0>
 800d8f4:	4b96      	ldr	r3, [pc, #600]	@ (800db50 <_strtod_l+0xaf8>)
 800d8f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d102      	bne.n	800d902 <_strtod_l+0x8aa>
 800d8fc:	3101      	adds	r1, #1
 800d8fe:	f43f adca 	beq.w	800d496 <_strtod_l+0x43e>
 800d902:	4b92      	ldr	r3, [pc, #584]	@ (800db4c <_strtod_l+0xaf4>)
 800d904:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d906:	401a      	ands	r2, r3
 800d908:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d90c:	f04f 0a00 	mov.w	sl, #0
 800d910:	9b08      	ldr	r3, [sp, #32]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d1b8      	bne.n	800d888 <_strtod_l+0x830>
 800d916:	e5c9      	b.n	800d4ac <_strtod_l+0x454>
 800d918:	f04f 33ff 	mov.w	r3, #4294967295
 800d91c:	e7e8      	b.n	800d8f0 <_strtod_l+0x898>
 800d91e:	4613      	mov	r3, r2
 800d920:	e7e6      	b.n	800d8f0 <_strtod_l+0x898>
 800d922:	ea53 030a 	orrs.w	r3, r3, sl
 800d926:	d0a1      	beq.n	800d86c <_strtod_l+0x814>
 800d928:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d92a:	b1db      	cbz	r3, 800d964 <_strtod_l+0x90c>
 800d92c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d92e:	4213      	tst	r3, r2
 800d930:	d0ee      	beq.n	800d910 <_strtod_l+0x8b8>
 800d932:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d934:	9a08      	ldr	r2, [sp, #32]
 800d936:	4650      	mov	r0, sl
 800d938:	4659      	mov	r1, fp
 800d93a:	b1bb      	cbz	r3, 800d96c <_strtod_l+0x914>
 800d93c:	f7ff fb6e 	bl	800d01c <sulp>
 800d940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d944:	ec53 2b10 	vmov	r2, r3, d0
 800d948:	f7f2 fcc0 	bl	80002cc <__adddf3>
 800d94c:	4682      	mov	sl, r0
 800d94e:	468b      	mov	fp, r1
 800d950:	e7de      	b.n	800d910 <_strtod_l+0x8b8>
 800d952:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d956:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d95a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d95e:	f04f 3aff 	mov.w	sl, #4294967295
 800d962:	e7d5      	b.n	800d910 <_strtod_l+0x8b8>
 800d964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d966:	ea13 0f0a 	tst.w	r3, sl
 800d96a:	e7e1      	b.n	800d930 <_strtod_l+0x8d8>
 800d96c:	f7ff fb56 	bl	800d01c <sulp>
 800d970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d974:	ec53 2b10 	vmov	r2, r3, d0
 800d978:	f7f2 fca6 	bl	80002c8 <__aeabi_dsub>
 800d97c:	2200      	movs	r2, #0
 800d97e:	2300      	movs	r3, #0
 800d980:	4682      	mov	sl, r0
 800d982:	468b      	mov	fp, r1
 800d984:	f7f3 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 800d988:	2800      	cmp	r0, #0
 800d98a:	d0c1      	beq.n	800d910 <_strtod_l+0x8b8>
 800d98c:	e619      	b.n	800d5c2 <_strtod_l+0x56a>
 800d98e:	4641      	mov	r1, r8
 800d990:	4620      	mov	r0, r4
 800d992:	f001 fc47 	bl	800f224 <__ratio>
 800d996:	ec57 6b10 	vmov	r6, r7, d0
 800d99a:	2200      	movs	r2, #0
 800d99c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d9a0:	4630      	mov	r0, r6
 800d9a2:	4639      	mov	r1, r7
 800d9a4:	f7f3 f8c4 	bl	8000b30 <__aeabi_dcmple>
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d06f      	beq.n	800da8c <_strtod_l+0xa34>
 800d9ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d17a      	bne.n	800daa8 <_strtod_l+0xa50>
 800d9b2:	f1ba 0f00 	cmp.w	sl, #0
 800d9b6:	d158      	bne.n	800da6a <_strtod_l+0xa12>
 800d9b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d15a      	bne.n	800da78 <_strtod_l+0xa20>
 800d9c2:	4b64      	ldr	r3, [pc, #400]	@ (800db54 <_strtod_l+0xafc>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	4639      	mov	r1, r7
 800d9ca:	f7f3 f8a7 	bl	8000b1c <__aeabi_dcmplt>
 800d9ce:	2800      	cmp	r0, #0
 800d9d0:	d159      	bne.n	800da86 <_strtod_l+0xa2e>
 800d9d2:	4630      	mov	r0, r6
 800d9d4:	4639      	mov	r1, r7
 800d9d6:	4b60      	ldr	r3, [pc, #384]	@ (800db58 <_strtod_l+0xb00>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f7f2 fe2d 	bl	8000638 <__aeabi_dmul>
 800d9de:	4606      	mov	r6, r0
 800d9e0:	460f      	mov	r7, r1
 800d9e2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d9e6:	9606      	str	r6, [sp, #24]
 800d9e8:	9307      	str	r3, [sp, #28]
 800d9ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9ee:	4d57      	ldr	r5, [pc, #348]	@ (800db4c <_strtod_l+0xaf4>)
 800d9f0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9f6:	401d      	ands	r5, r3
 800d9f8:	4b58      	ldr	r3, [pc, #352]	@ (800db5c <_strtod_l+0xb04>)
 800d9fa:	429d      	cmp	r5, r3
 800d9fc:	f040 80b2 	bne.w	800db64 <_strtod_l+0xb0c>
 800da00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800da06:	ec4b ab10 	vmov	d0, sl, fp
 800da0a:	f001 fb43 	bl	800f094 <__ulp>
 800da0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da12:	ec51 0b10 	vmov	r0, r1, d0
 800da16:	f7f2 fe0f 	bl	8000638 <__aeabi_dmul>
 800da1a:	4652      	mov	r2, sl
 800da1c:	465b      	mov	r3, fp
 800da1e:	f7f2 fc55 	bl	80002cc <__adddf3>
 800da22:	460b      	mov	r3, r1
 800da24:	4949      	ldr	r1, [pc, #292]	@ (800db4c <_strtod_l+0xaf4>)
 800da26:	4a4e      	ldr	r2, [pc, #312]	@ (800db60 <_strtod_l+0xb08>)
 800da28:	4019      	ands	r1, r3
 800da2a:	4291      	cmp	r1, r2
 800da2c:	4682      	mov	sl, r0
 800da2e:	d942      	bls.n	800dab6 <_strtod_l+0xa5e>
 800da30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800da32:	4b47      	ldr	r3, [pc, #284]	@ (800db50 <_strtod_l+0xaf8>)
 800da34:	429a      	cmp	r2, r3
 800da36:	d103      	bne.n	800da40 <_strtod_l+0x9e8>
 800da38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800da3a:	3301      	adds	r3, #1
 800da3c:	f43f ad2b 	beq.w	800d496 <_strtod_l+0x43e>
 800da40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800db50 <_strtod_l+0xaf8>
 800da44:	f04f 3aff 	mov.w	sl, #4294967295
 800da48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da4a:	9805      	ldr	r0, [sp, #20]
 800da4c:	f000 ffee 	bl	800ea2c <_Bfree>
 800da50:	9805      	ldr	r0, [sp, #20]
 800da52:	4649      	mov	r1, r9
 800da54:	f000 ffea 	bl	800ea2c <_Bfree>
 800da58:	9805      	ldr	r0, [sp, #20]
 800da5a:	4641      	mov	r1, r8
 800da5c:	f000 ffe6 	bl	800ea2c <_Bfree>
 800da60:	9805      	ldr	r0, [sp, #20]
 800da62:	4621      	mov	r1, r4
 800da64:	f000 ffe2 	bl	800ea2c <_Bfree>
 800da68:	e618      	b.n	800d69c <_strtod_l+0x644>
 800da6a:	f1ba 0f01 	cmp.w	sl, #1
 800da6e:	d103      	bne.n	800da78 <_strtod_l+0xa20>
 800da70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da72:	2b00      	cmp	r3, #0
 800da74:	f43f ada5 	beq.w	800d5c2 <_strtod_l+0x56a>
 800da78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800db28 <_strtod_l+0xad0>
 800da7c:	4f35      	ldr	r7, [pc, #212]	@ (800db54 <_strtod_l+0xafc>)
 800da7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800da82:	2600      	movs	r6, #0
 800da84:	e7b1      	b.n	800d9ea <_strtod_l+0x992>
 800da86:	4f34      	ldr	r7, [pc, #208]	@ (800db58 <_strtod_l+0xb00>)
 800da88:	2600      	movs	r6, #0
 800da8a:	e7aa      	b.n	800d9e2 <_strtod_l+0x98a>
 800da8c:	4b32      	ldr	r3, [pc, #200]	@ (800db58 <_strtod_l+0xb00>)
 800da8e:	4630      	mov	r0, r6
 800da90:	4639      	mov	r1, r7
 800da92:	2200      	movs	r2, #0
 800da94:	f7f2 fdd0 	bl	8000638 <__aeabi_dmul>
 800da98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da9a:	4606      	mov	r6, r0
 800da9c:	460f      	mov	r7, r1
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d09f      	beq.n	800d9e2 <_strtod_l+0x98a>
 800daa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800daa6:	e7a0      	b.n	800d9ea <_strtod_l+0x992>
 800daa8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800db30 <_strtod_l+0xad8>
 800daac:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dab0:	ec57 6b17 	vmov	r6, r7, d7
 800dab4:	e799      	b.n	800d9ea <_strtod_l+0x992>
 800dab6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800daba:	9b08      	ldr	r3, [sp, #32]
 800dabc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d1c1      	bne.n	800da48 <_strtod_l+0x9f0>
 800dac4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dac8:	0d1b      	lsrs	r3, r3, #20
 800daca:	051b      	lsls	r3, r3, #20
 800dacc:	429d      	cmp	r5, r3
 800dace:	d1bb      	bne.n	800da48 <_strtod_l+0x9f0>
 800dad0:	4630      	mov	r0, r6
 800dad2:	4639      	mov	r1, r7
 800dad4:	f7f3 f8e8 	bl	8000ca8 <__aeabi_d2lz>
 800dad8:	f7f2 fd80 	bl	80005dc <__aeabi_l2d>
 800dadc:	4602      	mov	r2, r0
 800dade:	460b      	mov	r3, r1
 800dae0:	4630      	mov	r0, r6
 800dae2:	4639      	mov	r1, r7
 800dae4:	f7f2 fbf0 	bl	80002c8 <__aeabi_dsub>
 800dae8:	460b      	mov	r3, r1
 800daea:	4602      	mov	r2, r0
 800daec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800daf0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800daf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800daf6:	ea46 060a 	orr.w	r6, r6, sl
 800dafa:	431e      	orrs	r6, r3
 800dafc:	d06f      	beq.n	800dbde <_strtod_l+0xb86>
 800dafe:	a30e      	add	r3, pc, #56	@ (adr r3, 800db38 <_strtod_l+0xae0>)
 800db00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db04:	f7f3 f80a 	bl	8000b1c <__aeabi_dcmplt>
 800db08:	2800      	cmp	r0, #0
 800db0a:	f47f accf 	bne.w	800d4ac <_strtod_l+0x454>
 800db0e:	a30c      	add	r3, pc, #48	@ (adr r3, 800db40 <_strtod_l+0xae8>)
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db18:	f7f3 f81e 	bl	8000b58 <__aeabi_dcmpgt>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d093      	beq.n	800da48 <_strtod_l+0x9f0>
 800db20:	e4c4      	b.n	800d4ac <_strtod_l+0x454>
 800db22:	bf00      	nop
 800db24:	f3af 8000 	nop.w
 800db28:	00000000 	.word	0x00000000
 800db2c:	bff00000 	.word	0xbff00000
 800db30:	00000000 	.word	0x00000000
 800db34:	3ff00000 	.word	0x3ff00000
 800db38:	94a03595 	.word	0x94a03595
 800db3c:	3fdfffff 	.word	0x3fdfffff
 800db40:	35afe535 	.word	0x35afe535
 800db44:	3fe00000 	.word	0x3fe00000
 800db48:	000fffff 	.word	0x000fffff
 800db4c:	7ff00000 	.word	0x7ff00000
 800db50:	7fefffff 	.word	0x7fefffff
 800db54:	3ff00000 	.word	0x3ff00000
 800db58:	3fe00000 	.word	0x3fe00000
 800db5c:	7fe00000 	.word	0x7fe00000
 800db60:	7c9fffff 	.word	0x7c9fffff
 800db64:	9b08      	ldr	r3, [sp, #32]
 800db66:	b323      	cbz	r3, 800dbb2 <_strtod_l+0xb5a>
 800db68:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800db6c:	d821      	bhi.n	800dbb2 <_strtod_l+0xb5a>
 800db6e:	a328      	add	r3, pc, #160	@ (adr r3, 800dc10 <_strtod_l+0xbb8>)
 800db70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db74:	4630      	mov	r0, r6
 800db76:	4639      	mov	r1, r7
 800db78:	f7f2 ffda 	bl	8000b30 <__aeabi_dcmple>
 800db7c:	b1a0      	cbz	r0, 800dba8 <_strtod_l+0xb50>
 800db7e:	4639      	mov	r1, r7
 800db80:	4630      	mov	r0, r6
 800db82:	f7f3 f809 	bl	8000b98 <__aeabi_d2uiz>
 800db86:	2801      	cmp	r0, #1
 800db88:	bf38      	it	cc
 800db8a:	2001      	movcc	r0, #1
 800db8c:	f7f2 fcda 	bl	8000544 <__aeabi_ui2d>
 800db90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db92:	4606      	mov	r6, r0
 800db94:	460f      	mov	r7, r1
 800db96:	b9fb      	cbnz	r3, 800dbd8 <_strtod_l+0xb80>
 800db98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db9c:	9014      	str	r0, [sp, #80]	@ 0x50
 800db9e:	9315      	str	r3, [sp, #84]	@ 0x54
 800dba0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800dba4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dba8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dbaa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800dbae:	1b5b      	subs	r3, r3, r5
 800dbb0:	9311      	str	r3, [sp, #68]	@ 0x44
 800dbb2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dbb6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dbba:	f001 fa6b 	bl	800f094 <__ulp>
 800dbbe:	4650      	mov	r0, sl
 800dbc0:	ec53 2b10 	vmov	r2, r3, d0
 800dbc4:	4659      	mov	r1, fp
 800dbc6:	f7f2 fd37 	bl	8000638 <__aeabi_dmul>
 800dbca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dbce:	f7f2 fb7d 	bl	80002cc <__adddf3>
 800dbd2:	4682      	mov	sl, r0
 800dbd4:	468b      	mov	fp, r1
 800dbd6:	e770      	b.n	800daba <_strtod_l+0xa62>
 800dbd8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800dbdc:	e7e0      	b.n	800dba0 <_strtod_l+0xb48>
 800dbde:	a30e      	add	r3, pc, #56	@ (adr r3, 800dc18 <_strtod_l+0xbc0>)
 800dbe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe4:	f7f2 ff9a 	bl	8000b1c <__aeabi_dcmplt>
 800dbe8:	e798      	b.n	800db1c <_strtod_l+0xac4>
 800dbea:	2300      	movs	r3, #0
 800dbec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800dbf0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	f7ff ba6d 	b.w	800d0d2 <_strtod_l+0x7a>
 800dbf8:	2a65      	cmp	r2, #101	@ 0x65
 800dbfa:	f43f ab66 	beq.w	800d2ca <_strtod_l+0x272>
 800dbfe:	2a45      	cmp	r2, #69	@ 0x45
 800dc00:	f43f ab63 	beq.w	800d2ca <_strtod_l+0x272>
 800dc04:	2301      	movs	r3, #1
 800dc06:	f7ff bb9e 	b.w	800d346 <_strtod_l+0x2ee>
 800dc0a:	bf00      	nop
 800dc0c:	f3af 8000 	nop.w
 800dc10:	ffc00000 	.word	0xffc00000
 800dc14:	41dfffff 	.word	0x41dfffff
 800dc18:	94a03595 	.word	0x94a03595
 800dc1c:	3fcfffff 	.word	0x3fcfffff

0800dc20 <strtof>:
 800dc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc24:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800dce4 <strtof+0xc4>
 800dc28:	4b29      	ldr	r3, [pc, #164]	@ (800dcd0 <strtof+0xb0>)
 800dc2a:	460a      	mov	r2, r1
 800dc2c:	ed2d 8b02 	vpush	{d8}
 800dc30:	4601      	mov	r1, r0
 800dc32:	f8d8 0000 	ldr.w	r0, [r8]
 800dc36:	f7ff fa0f 	bl	800d058 <_strtod_l>
 800dc3a:	ec55 4b10 	vmov	r4, r5, d0
 800dc3e:	4622      	mov	r2, r4
 800dc40:	462b      	mov	r3, r5
 800dc42:	4620      	mov	r0, r4
 800dc44:	4629      	mov	r1, r5
 800dc46:	f7f2 ff91 	bl	8000b6c <__aeabi_dcmpun>
 800dc4a:	b190      	cbz	r0, 800dc72 <strtof+0x52>
 800dc4c:	2d00      	cmp	r5, #0
 800dc4e:	4821      	ldr	r0, [pc, #132]	@ (800dcd4 <strtof+0xb4>)
 800dc50:	da09      	bge.n	800dc66 <strtof+0x46>
 800dc52:	f000 fa61 	bl	800e118 <nanf>
 800dc56:	eeb1 8a40 	vneg.f32	s16, s0
 800dc5a:	eeb0 0a48 	vmov.f32	s0, s16
 800dc5e:	ecbd 8b02 	vpop	{d8}
 800dc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc66:	ecbd 8b02 	vpop	{d8}
 800dc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc6e:	f000 ba53 	b.w	800e118 <nanf>
 800dc72:	4620      	mov	r0, r4
 800dc74:	4629      	mov	r1, r5
 800dc76:	f7f2 ffaf 	bl	8000bd8 <__aeabi_d2f>
 800dc7a:	ee08 0a10 	vmov	s16, r0
 800dc7e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800dcd8 <strtof+0xb8>
 800dc82:	eeb0 7ac8 	vabs.f32	s14, s16
 800dc86:	eeb4 7a67 	vcmp.f32	s14, s15
 800dc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8e:	dd11      	ble.n	800dcb4 <strtof+0x94>
 800dc90:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800dc94:	4b11      	ldr	r3, [pc, #68]	@ (800dcdc <strtof+0xbc>)
 800dc96:	f04f 32ff 	mov.w	r2, #4294967295
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	4639      	mov	r1, r7
 800dc9e:	f7f2 ff65 	bl	8000b6c <__aeabi_dcmpun>
 800dca2:	b980      	cbnz	r0, 800dcc6 <strtof+0xa6>
 800dca4:	4b0d      	ldr	r3, [pc, #52]	@ (800dcdc <strtof+0xbc>)
 800dca6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcaa:	4620      	mov	r0, r4
 800dcac:	4639      	mov	r1, r7
 800dcae:	f7f2 ff3f 	bl	8000b30 <__aeabi_dcmple>
 800dcb2:	b940      	cbnz	r0, 800dcc6 <strtof+0xa6>
 800dcb4:	ee18 3a10 	vmov	r3, s16
 800dcb8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800dcbc:	d1cd      	bne.n	800dc5a <strtof+0x3a>
 800dcbe:	4b08      	ldr	r3, [pc, #32]	@ (800dce0 <strtof+0xc0>)
 800dcc0:	402b      	ands	r3, r5
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d0c9      	beq.n	800dc5a <strtof+0x3a>
 800dcc6:	f8d8 3000 	ldr.w	r3, [r8]
 800dcca:	2222      	movs	r2, #34	@ 0x22
 800dccc:	601a      	str	r2, [r3, #0]
 800dcce:	e7c4      	b.n	800dc5a <strtof+0x3a>
 800dcd0:	2000005c 	.word	0x2000005c
 800dcd4:	08010bf7 	.word	0x08010bf7
 800dcd8:	7f7fffff 	.word	0x7f7fffff
 800dcdc:	7fefffff 	.word	0x7fefffff
 800dce0:	7ff00000 	.word	0x7ff00000
 800dce4:	200001c8 	.word	0x200001c8

0800dce8 <std>:
 800dce8:	2300      	movs	r3, #0
 800dcea:	b510      	push	{r4, lr}
 800dcec:	4604      	mov	r4, r0
 800dcee:	e9c0 3300 	strd	r3, r3, [r0]
 800dcf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dcf6:	6083      	str	r3, [r0, #8]
 800dcf8:	8181      	strh	r1, [r0, #12]
 800dcfa:	6643      	str	r3, [r0, #100]	@ 0x64
 800dcfc:	81c2      	strh	r2, [r0, #14]
 800dcfe:	6183      	str	r3, [r0, #24]
 800dd00:	4619      	mov	r1, r3
 800dd02:	2208      	movs	r2, #8
 800dd04:	305c      	adds	r0, #92	@ 0x5c
 800dd06:	f000 f961 	bl	800dfcc <memset>
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <std+0x58>)
 800dd0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800dd44 <std+0x5c>)
 800dd10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dd12:	4b0d      	ldr	r3, [pc, #52]	@ (800dd48 <std+0x60>)
 800dd14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dd16:	4b0d      	ldr	r3, [pc, #52]	@ (800dd4c <std+0x64>)
 800dd18:	6323      	str	r3, [r4, #48]	@ 0x30
 800dd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd50 <std+0x68>)
 800dd1c:	6224      	str	r4, [r4, #32]
 800dd1e:	429c      	cmp	r4, r3
 800dd20:	d006      	beq.n	800dd30 <std+0x48>
 800dd22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dd26:	4294      	cmp	r4, r2
 800dd28:	d002      	beq.n	800dd30 <std+0x48>
 800dd2a:	33d0      	adds	r3, #208	@ 0xd0
 800dd2c:	429c      	cmp	r4, r3
 800dd2e:	d105      	bne.n	800dd3c <std+0x54>
 800dd30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dd34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd38:	f000 b9d2 	b.w	800e0e0 <__retarget_lock_init_recursive>
 800dd3c:	bd10      	pop	{r4, pc}
 800dd3e:	bf00      	nop
 800dd40:	0800ded5 	.word	0x0800ded5
 800dd44:	0800def7 	.word	0x0800def7
 800dd48:	0800df2f 	.word	0x0800df2f
 800dd4c:	0800df53 	.word	0x0800df53
 800dd50:	2000271c 	.word	0x2000271c

0800dd54 <stdio_exit_handler>:
 800dd54:	4a02      	ldr	r2, [pc, #8]	@ (800dd60 <stdio_exit_handler+0xc>)
 800dd56:	4903      	ldr	r1, [pc, #12]	@ (800dd64 <stdio_exit_handler+0x10>)
 800dd58:	4803      	ldr	r0, [pc, #12]	@ (800dd68 <stdio_exit_handler+0x14>)
 800dd5a:	f000 b869 	b.w	800de30 <_fwalk_sglue>
 800dd5e:	bf00      	nop
 800dd60:	20000050 	.word	0x20000050
 800dd64:	0800f9fd 	.word	0x0800f9fd
 800dd68:	200001cc 	.word	0x200001cc

0800dd6c <cleanup_stdio>:
 800dd6c:	6841      	ldr	r1, [r0, #4]
 800dd6e:	4b0c      	ldr	r3, [pc, #48]	@ (800dda0 <cleanup_stdio+0x34>)
 800dd70:	4299      	cmp	r1, r3
 800dd72:	b510      	push	{r4, lr}
 800dd74:	4604      	mov	r4, r0
 800dd76:	d001      	beq.n	800dd7c <cleanup_stdio+0x10>
 800dd78:	f001 fe40 	bl	800f9fc <_fflush_r>
 800dd7c:	68a1      	ldr	r1, [r4, #8]
 800dd7e:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <cleanup_stdio+0x38>)
 800dd80:	4299      	cmp	r1, r3
 800dd82:	d002      	beq.n	800dd8a <cleanup_stdio+0x1e>
 800dd84:	4620      	mov	r0, r4
 800dd86:	f001 fe39 	bl	800f9fc <_fflush_r>
 800dd8a:	68e1      	ldr	r1, [r4, #12]
 800dd8c:	4b06      	ldr	r3, [pc, #24]	@ (800dda8 <cleanup_stdio+0x3c>)
 800dd8e:	4299      	cmp	r1, r3
 800dd90:	d004      	beq.n	800dd9c <cleanup_stdio+0x30>
 800dd92:	4620      	mov	r0, r4
 800dd94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd98:	f001 be30 	b.w	800f9fc <_fflush_r>
 800dd9c:	bd10      	pop	{r4, pc}
 800dd9e:	bf00      	nop
 800dda0:	2000271c 	.word	0x2000271c
 800dda4:	20002784 	.word	0x20002784
 800dda8:	200027ec 	.word	0x200027ec

0800ddac <global_stdio_init.part.0>:
 800ddac:	b510      	push	{r4, lr}
 800ddae:	4b0b      	ldr	r3, [pc, #44]	@ (800dddc <global_stdio_init.part.0+0x30>)
 800ddb0:	4c0b      	ldr	r4, [pc, #44]	@ (800dde0 <global_stdio_init.part.0+0x34>)
 800ddb2:	4a0c      	ldr	r2, [pc, #48]	@ (800dde4 <global_stdio_init.part.0+0x38>)
 800ddb4:	601a      	str	r2, [r3, #0]
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	2200      	movs	r2, #0
 800ddba:	2104      	movs	r1, #4
 800ddbc:	f7ff ff94 	bl	800dce8 <std>
 800ddc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	2109      	movs	r1, #9
 800ddc8:	f7ff ff8e 	bl	800dce8 <std>
 800ddcc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ddd0:	2202      	movs	r2, #2
 800ddd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ddd6:	2112      	movs	r1, #18
 800ddd8:	f7ff bf86 	b.w	800dce8 <std>
 800dddc:	20002854 	.word	0x20002854
 800dde0:	2000271c 	.word	0x2000271c
 800dde4:	0800dd55 	.word	0x0800dd55

0800dde8 <__sfp_lock_acquire>:
 800dde8:	4801      	ldr	r0, [pc, #4]	@ (800ddf0 <__sfp_lock_acquire+0x8>)
 800ddea:	f000 b97a 	b.w	800e0e2 <__retarget_lock_acquire_recursive>
 800ddee:	bf00      	nop
 800ddf0:	2000285d 	.word	0x2000285d

0800ddf4 <__sfp_lock_release>:
 800ddf4:	4801      	ldr	r0, [pc, #4]	@ (800ddfc <__sfp_lock_release+0x8>)
 800ddf6:	f000 b975 	b.w	800e0e4 <__retarget_lock_release_recursive>
 800ddfa:	bf00      	nop
 800ddfc:	2000285d 	.word	0x2000285d

0800de00 <__sinit>:
 800de00:	b510      	push	{r4, lr}
 800de02:	4604      	mov	r4, r0
 800de04:	f7ff fff0 	bl	800dde8 <__sfp_lock_acquire>
 800de08:	6a23      	ldr	r3, [r4, #32]
 800de0a:	b11b      	cbz	r3, 800de14 <__sinit+0x14>
 800de0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de10:	f7ff bff0 	b.w	800ddf4 <__sfp_lock_release>
 800de14:	4b04      	ldr	r3, [pc, #16]	@ (800de28 <__sinit+0x28>)
 800de16:	6223      	str	r3, [r4, #32]
 800de18:	4b04      	ldr	r3, [pc, #16]	@ (800de2c <__sinit+0x2c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1f5      	bne.n	800de0c <__sinit+0xc>
 800de20:	f7ff ffc4 	bl	800ddac <global_stdio_init.part.0>
 800de24:	e7f2      	b.n	800de0c <__sinit+0xc>
 800de26:	bf00      	nop
 800de28:	0800dd6d 	.word	0x0800dd6d
 800de2c:	20002854 	.word	0x20002854

0800de30 <_fwalk_sglue>:
 800de30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de34:	4607      	mov	r7, r0
 800de36:	4688      	mov	r8, r1
 800de38:	4614      	mov	r4, r2
 800de3a:	2600      	movs	r6, #0
 800de3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800de40:	f1b9 0901 	subs.w	r9, r9, #1
 800de44:	d505      	bpl.n	800de52 <_fwalk_sglue+0x22>
 800de46:	6824      	ldr	r4, [r4, #0]
 800de48:	2c00      	cmp	r4, #0
 800de4a:	d1f7      	bne.n	800de3c <_fwalk_sglue+0xc>
 800de4c:	4630      	mov	r0, r6
 800de4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de52:	89ab      	ldrh	r3, [r5, #12]
 800de54:	2b01      	cmp	r3, #1
 800de56:	d907      	bls.n	800de68 <_fwalk_sglue+0x38>
 800de58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800de5c:	3301      	adds	r3, #1
 800de5e:	d003      	beq.n	800de68 <_fwalk_sglue+0x38>
 800de60:	4629      	mov	r1, r5
 800de62:	4638      	mov	r0, r7
 800de64:	47c0      	blx	r8
 800de66:	4306      	orrs	r6, r0
 800de68:	3568      	adds	r5, #104	@ 0x68
 800de6a:	e7e9      	b.n	800de40 <_fwalk_sglue+0x10>

0800de6c <sniprintf>:
 800de6c:	b40c      	push	{r2, r3}
 800de6e:	b530      	push	{r4, r5, lr}
 800de70:	4b17      	ldr	r3, [pc, #92]	@ (800ded0 <sniprintf+0x64>)
 800de72:	1e0c      	subs	r4, r1, #0
 800de74:	681d      	ldr	r5, [r3, #0]
 800de76:	b09d      	sub	sp, #116	@ 0x74
 800de78:	da08      	bge.n	800de8c <sniprintf+0x20>
 800de7a:	238b      	movs	r3, #139	@ 0x8b
 800de7c:	602b      	str	r3, [r5, #0]
 800de7e:	f04f 30ff 	mov.w	r0, #4294967295
 800de82:	b01d      	add	sp, #116	@ 0x74
 800de84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de88:	b002      	add	sp, #8
 800de8a:	4770      	bx	lr
 800de8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800de90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800de94:	bf14      	ite	ne
 800de96:	f104 33ff 	addne.w	r3, r4, #4294967295
 800de9a:	4623      	moveq	r3, r4
 800de9c:	9304      	str	r3, [sp, #16]
 800de9e:	9307      	str	r3, [sp, #28]
 800dea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dea4:	9002      	str	r0, [sp, #8]
 800dea6:	9006      	str	r0, [sp, #24]
 800dea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800deac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800deae:	ab21      	add	r3, sp, #132	@ 0x84
 800deb0:	a902      	add	r1, sp, #8
 800deb2:	4628      	mov	r0, r5
 800deb4:	9301      	str	r3, [sp, #4]
 800deb6:	f001 fa93 	bl	800f3e0 <_svfiprintf_r>
 800deba:	1c43      	adds	r3, r0, #1
 800debc:	bfbc      	itt	lt
 800debe:	238b      	movlt	r3, #139	@ 0x8b
 800dec0:	602b      	strlt	r3, [r5, #0]
 800dec2:	2c00      	cmp	r4, #0
 800dec4:	d0dd      	beq.n	800de82 <sniprintf+0x16>
 800dec6:	9b02      	ldr	r3, [sp, #8]
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
 800decc:	e7d9      	b.n	800de82 <sniprintf+0x16>
 800dece:	bf00      	nop
 800ded0:	200001c8 	.word	0x200001c8

0800ded4 <__sread>:
 800ded4:	b510      	push	{r4, lr}
 800ded6:	460c      	mov	r4, r1
 800ded8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dedc:	f000 f8b2 	bl	800e044 <_read_r>
 800dee0:	2800      	cmp	r0, #0
 800dee2:	bfab      	itete	ge
 800dee4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800dee6:	89a3      	ldrhlt	r3, [r4, #12]
 800dee8:	181b      	addge	r3, r3, r0
 800deea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800deee:	bfac      	ite	ge
 800def0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800def2:	81a3      	strhlt	r3, [r4, #12]
 800def4:	bd10      	pop	{r4, pc}

0800def6 <__swrite>:
 800def6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800defa:	461f      	mov	r7, r3
 800defc:	898b      	ldrh	r3, [r1, #12]
 800defe:	05db      	lsls	r3, r3, #23
 800df00:	4605      	mov	r5, r0
 800df02:	460c      	mov	r4, r1
 800df04:	4616      	mov	r6, r2
 800df06:	d505      	bpl.n	800df14 <__swrite+0x1e>
 800df08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df0c:	2302      	movs	r3, #2
 800df0e:	2200      	movs	r2, #0
 800df10:	f000 f886 	bl	800e020 <_lseek_r>
 800df14:	89a3      	ldrh	r3, [r4, #12]
 800df16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df1e:	81a3      	strh	r3, [r4, #12]
 800df20:	4632      	mov	r2, r6
 800df22:	463b      	mov	r3, r7
 800df24:	4628      	mov	r0, r5
 800df26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df2a:	f000 b89d 	b.w	800e068 <_write_r>

0800df2e <__sseek>:
 800df2e:	b510      	push	{r4, lr}
 800df30:	460c      	mov	r4, r1
 800df32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df36:	f000 f873 	bl	800e020 <_lseek_r>
 800df3a:	1c43      	adds	r3, r0, #1
 800df3c:	89a3      	ldrh	r3, [r4, #12]
 800df3e:	bf15      	itete	ne
 800df40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df4a:	81a3      	strheq	r3, [r4, #12]
 800df4c:	bf18      	it	ne
 800df4e:	81a3      	strhne	r3, [r4, #12]
 800df50:	bd10      	pop	{r4, pc}

0800df52 <__sclose>:
 800df52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df56:	f000 b853 	b.w	800e000 <_close_r>

0800df5a <_vsniprintf_r>:
 800df5a:	b530      	push	{r4, r5, lr}
 800df5c:	4614      	mov	r4, r2
 800df5e:	2c00      	cmp	r4, #0
 800df60:	b09b      	sub	sp, #108	@ 0x6c
 800df62:	4605      	mov	r5, r0
 800df64:	461a      	mov	r2, r3
 800df66:	da05      	bge.n	800df74 <_vsniprintf_r+0x1a>
 800df68:	238b      	movs	r3, #139	@ 0x8b
 800df6a:	6003      	str	r3, [r0, #0]
 800df6c:	f04f 30ff 	mov.w	r0, #4294967295
 800df70:	b01b      	add	sp, #108	@ 0x6c
 800df72:	bd30      	pop	{r4, r5, pc}
 800df74:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800df78:	f8ad 300c 	strh.w	r3, [sp, #12]
 800df7c:	bf14      	ite	ne
 800df7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800df82:	4623      	moveq	r3, r4
 800df84:	9302      	str	r3, [sp, #8]
 800df86:	9305      	str	r3, [sp, #20]
 800df88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800df8c:	9100      	str	r1, [sp, #0]
 800df8e:	9104      	str	r1, [sp, #16]
 800df90:	f8ad 300e 	strh.w	r3, [sp, #14]
 800df94:	4669      	mov	r1, sp
 800df96:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800df98:	f001 fa22 	bl	800f3e0 <_svfiprintf_r>
 800df9c:	1c43      	adds	r3, r0, #1
 800df9e:	bfbc      	itt	lt
 800dfa0:	238b      	movlt	r3, #139	@ 0x8b
 800dfa2:	602b      	strlt	r3, [r5, #0]
 800dfa4:	2c00      	cmp	r4, #0
 800dfa6:	d0e3      	beq.n	800df70 <_vsniprintf_r+0x16>
 800dfa8:	9b00      	ldr	r3, [sp, #0]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
 800dfae:	e7df      	b.n	800df70 <_vsniprintf_r+0x16>

0800dfb0 <vsniprintf>:
 800dfb0:	b507      	push	{r0, r1, r2, lr}
 800dfb2:	9300      	str	r3, [sp, #0]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	460a      	mov	r2, r1
 800dfb8:	4601      	mov	r1, r0
 800dfba:	4803      	ldr	r0, [pc, #12]	@ (800dfc8 <vsniprintf+0x18>)
 800dfbc:	6800      	ldr	r0, [r0, #0]
 800dfbe:	f7ff ffcc 	bl	800df5a <_vsniprintf_r>
 800dfc2:	b003      	add	sp, #12
 800dfc4:	f85d fb04 	ldr.w	pc, [sp], #4
 800dfc8:	200001c8 	.word	0x200001c8

0800dfcc <memset>:
 800dfcc:	4402      	add	r2, r0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d100      	bne.n	800dfd6 <memset+0xa>
 800dfd4:	4770      	bx	lr
 800dfd6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfda:	e7f9      	b.n	800dfd0 <memset+0x4>

0800dfdc <strncmp>:
 800dfdc:	b510      	push	{r4, lr}
 800dfde:	b16a      	cbz	r2, 800dffc <strncmp+0x20>
 800dfe0:	3901      	subs	r1, #1
 800dfe2:	1884      	adds	r4, r0, r2
 800dfe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfe8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d103      	bne.n	800dff8 <strncmp+0x1c>
 800dff0:	42a0      	cmp	r0, r4
 800dff2:	d001      	beq.n	800dff8 <strncmp+0x1c>
 800dff4:	2a00      	cmp	r2, #0
 800dff6:	d1f5      	bne.n	800dfe4 <strncmp+0x8>
 800dff8:	1ad0      	subs	r0, r2, r3
 800dffa:	bd10      	pop	{r4, pc}
 800dffc:	4610      	mov	r0, r2
 800dffe:	e7fc      	b.n	800dffa <strncmp+0x1e>

0800e000 <_close_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d06      	ldr	r5, [pc, #24]	@ (800e01c <_close_r+0x1c>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	f7f5 f86e 	bl	80030ec <_close>
 800e010:	1c43      	adds	r3, r0, #1
 800e012:	d102      	bne.n	800e01a <_close_r+0x1a>
 800e014:	682b      	ldr	r3, [r5, #0]
 800e016:	b103      	cbz	r3, 800e01a <_close_r+0x1a>
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	bd38      	pop	{r3, r4, r5, pc}
 800e01c:	20002858 	.word	0x20002858

0800e020 <_lseek_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d07      	ldr	r5, [pc, #28]	@ (800e040 <_lseek_r+0x20>)
 800e024:	4604      	mov	r4, r0
 800e026:	4608      	mov	r0, r1
 800e028:	4611      	mov	r1, r2
 800e02a:	2200      	movs	r2, #0
 800e02c:	602a      	str	r2, [r5, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	f7f5 f883 	bl	800313a <_lseek>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d102      	bne.n	800e03e <_lseek_r+0x1e>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	b103      	cbz	r3, 800e03e <_lseek_r+0x1e>
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	20002858 	.word	0x20002858

0800e044 <_read_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4d07      	ldr	r5, [pc, #28]	@ (800e064 <_read_r+0x20>)
 800e048:	4604      	mov	r4, r0
 800e04a:	4608      	mov	r0, r1
 800e04c:	4611      	mov	r1, r2
 800e04e:	2200      	movs	r2, #0
 800e050:	602a      	str	r2, [r5, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	f7f5 f811 	bl	800307a <_read>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_read_r+0x1e>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_read_r+0x1e>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	20002858 	.word	0x20002858

0800e068 <_write_r>:
 800e068:	b538      	push	{r3, r4, r5, lr}
 800e06a:	4d07      	ldr	r5, [pc, #28]	@ (800e088 <_write_r+0x20>)
 800e06c:	4604      	mov	r4, r0
 800e06e:	4608      	mov	r0, r1
 800e070:	4611      	mov	r1, r2
 800e072:	2200      	movs	r2, #0
 800e074:	602a      	str	r2, [r5, #0]
 800e076:	461a      	mov	r2, r3
 800e078:	f7f5 f81c 	bl	80030b4 <_write>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_write_r+0x1e>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	b103      	cbz	r3, 800e086 <_write_r+0x1e>
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	20002858 	.word	0x20002858

0800e08c <__errno>:
 800e08c:	4b01      	ldr	r3, [pc, #4]	@ (800e094 <__errno+0x8>)
 800e08e:	6818      	ldr	r0, [r3, #0]
 800e090:	4770      	bx	lr
 800e092:	bf00      	nop
 800e094:	200001c8 	.word	0x200001c8

0800e098 <__libc_init_array>:
 800e098:	b570      	push	{r4, r5, r6, lr}
 800e09a:	4d0d      	ldr	r5, [pc, #52]	@ (800e0d0 <__libc_init_array+0x38>)
 800e09c:	4c0d      	ldr	r4, [pc, #52]	@ (800e0d4 <__libc_init_array+0x3c>)
 800e09e:	1b64      	subs	r4, r4, r5
 800e0a0:	10a4      	asrs	r4, r4, #2
 800e0a2:	2600      	movs	r6, #0
 800e0a4:	42a6      	cmp	r6, r4
 800e0a6:	d109      	bne.n	800e0bc <__libc_init_array+0x24>
 800e0a8:	4d0b      	ldr	r5, [pc, #44]	@ (800e0d8 <__libc_init_array+0x40>)
 800e0aa:	4c0c      	ldr	r4, [pc, #48]	@ (800e0dc <__libc_init_array+0x44>)
 800e0ac:	f002 f81e 	bl	80100ec <_init>
 800e0b0:	1b64      	subs	r4, r4, r5
 800e0b2:	10a4      	asrs	r4, r4, #2
 800e0b4:	2600      	movs	r6, #0
 800e0b6:	42a6      	cmp	r6, r4
 800e0b8:	d105      	bne.n	800e0c6 <__libc_init_array+0x2e>
 800e0ba:	bd70      	pop	{r4, r5, r6, pc}
 800e0bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0c0:	4798      	blx	r3
 800e0c2:	3601      	adds	r6, #1
 800e0c4:	e7ee      	b.n	800e0a4 <__libc_init_array+0xc>
 800e0c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ca:	4798      	blx	r3
 800e0cc:	3601      	adds	r6, #1
 800e0ce:	e7f2      	b.n	800e0b6 <__libc_init_array+0x1e>
 800e0d0:	08010c00 	.word	0x08010c00
 800e0d4:	08010c00 	.word	0x08010c00
 800e0d8:	08010c00 	.word	0x08010c00
 800e0dc:	08010c04 	.word	0x08010c04

0800e0e0 <__retarget_lock_init_recursive>:
 800e0e0:	4770      	bx	lr

0800e0e2 <__retarget_lock_acquire_recursive>:
 800e0e2:	4770      	bx	lr

0800e0e4 <__retarget_lock_release_recursive>:
 800e0e4:	4770      	bx	lr

0800e0e6 <memcpy>:
 800e0e6:	440a      	add	r2, r1
 800e0e8:	4291      	cmp	r1, r2
 800e0ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0ee:	d100      	bne.n	800e0f2 <memcpy+0xc>
 800e0f0:	4770      	bx	lr
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0fc:	4291      	cmp	r1, r2
 800e0fe:	d1f9      	bne.n	800e0f4 <memcpy+0xe>
 800e100:	bd10      	pop	{r4, pc}
 800e102:	0000      	movs	r0, r0
 800e104:	0000      	movs	r0, r0
	...

0800e108 <nan>:
 800e108:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e110 <nan+0x8>
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	00000000 	.word	0x00000000
 800e114:	7ff80000 	.word	0x7ff80000

0800e118 <nanf>:
 800e118:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e120 <nanf+0x8>
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	7fc00000 	.word	0x7fc00000

0800e124 <_free_r>:
 800e124:	b538      	push	{r3, r4, r5, lr}
 800e126:	4605      	mov	r5, r0
 800e128:	2900      	cmp	r1, #0
 800e12a:	d041      	beq.n	800e1b0 <_free_r+0x8c>
 800e12c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e130:	1f0c      	subs	r4, r1, #4
 800e132:	2b00      	cmp	r3, #0
 800e134:	bfb8      	it	lt
 800e136:	18e4      	addlt	r4, r4, r3
 800e138:	f000 fc2c 	bl	800e994 <__malloc_lock>
 800e13c:	4a1d      	ldr	r2, [pc, #116]	@ (800e1b4 <_free_r+0x90>)
 800e13e:	6813      	ldr	r3, [r2, #0]
 800e140:	b933      	cbnz	r3, 800e150 <_free_r+0x2c>
 800e142:	6063      	str	r3, [r4, #4]
 800e144:	6014      	str	r4, [r2, #0]
 800e146:	4628      	mov	r0, r5
 800e148:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e14c:	f000 bc28 	b.w	800e9a0 <__malloc_unlock>
 800e150:	42a3      	cmp	r3, r4
 800e152:	d908      	bls.n	800e166 <_free_r+0x42>
 800e154:	6820      	ldr	r0, [r4, #0]
 800e156:	1821      	adds	r1, r4, r0
 800e158:	428b      	cmp	r3, r1
 800e15a:	bf01      	itttt	eq
 800e15c:	6819      	ldreq	r1, [r3, #0]
 800e15e:	685b      	ldreq	r3, [r3, #4]
 800e160:	1809      	addeq	r1, r1, r0
 800e162:	6021      	streq	r1, [r4, #0]
 800e164:	e7ed      	b.n	800e142 <_free_r+0x1e>
 800e166:	461a      	mov	r2, r3
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	b10b      	cbz	r3, 800e170 <_free_r+0x4c>
 800e16c:	42a3      	cmp	r3, r4
 800e16e:	d9fa      	bls.n	800e166 <_free_r+0x42>
 800e170:	6811      	ldr	r1, [r2, #0]
 800e172:	1850      	adds	r0, r2, r1
 800e174:	42a0      	cmp	r0, r4
 800e176:	d10b      	bne.n	800e190 <_free_r+0x6c>
 800e178:	6820      	ldr	r0, [r4, #0]
 800e17a:	4401      	add	r1, r0
 800e17c:	1850      	adds	r0, r2, r1
 800e17e:	4283      	cmp	r3, r0
 800e180:	6011      	str	r1, [r2, #0]
 800e182:	d1e0      	bne.n	800e146 <_free_r+0x22>
 800e184:	6818      	ldr	r0, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	6053      	str	r3, [r2, #4]
 800e18a:	4408      	add	r0, r1
 800e18c:	6010      	str	r0, [r2, #0]
 800e18e:	e7da      	b.n	800e146 <_free_r+0x22>
 800e190:	d902      	bls.n	800e198 <_free_r+0x74>
 800e192:	230c      	movs	r3, #12
 800e194:	602b      	str	r3, [r5, #0]
 800e196:	e7d6      	b.n	800e146 <_free_r+0x22>
 800e198:	6820      	ldr	r0, [r4, #0]
 800e19a:	1821      	adds	r1, r4, r0
 800e19c:	428b      	cmp	r3, r1
 800e19e:	bf04      	itt	eq
 800e1a0:	6819      	ldreq	r1, [r3, #0]
 800e1a2:	685b      	ldreq	r3, [r3, #4]
 800e1a4:	6063      	str	r3, [r4, #4]
 800e1a6:	bf04      	itt	eq
 800e1a8:	1809      	addeq	r1, r1, r0
 800e1aa:	6021      	streq	r1, [r4, #0]
 800e1ac:	6054      	str	r4, [r2, #4]
 800e1ae:	e7ca      	b.n	800e146 <_free_r+0x22>
 800e1b0:	bd38      	pop	{r3, r4, r5, pc}
 800e1b2:	bf00      	nop
 800e1b4:	20002864 	.word	0x20002864

0800e1b8 <rshift>:
 800e1b8:	6903      	ldr	r3, [r0, #16]
 800e1ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e1be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e1c6:	f100 0414 	add.w	r4, r0, #20
 800e1ca:	dd45      	ble.n	800e258 <rshift+0xa0>
 800e1cc:	f011 011f 	ands.w	r1, r1, #31
 800e1d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e1d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e1d8:	d10c      	bne.n	800e1f4 <rshift+0x3c>
 800e1da:	f100 0710 	add.w	r7, r0, #16
 800e1de:	4629      	mov	r1, r5
 800e1e0:	42b1      	cmp	r1, r6
 800e1e2:	d334      	bcc.n	800e24e <rshift+0x96>
 800e1e4:	1a9b      	subs	r3, r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	1eea      	subs	r2, r5, #3
 800e1ea:	4296      	cmp	r6, r2
 800e1ec:	bf38      	it	cc
 800e1ee:	2300      	movcc	r3, #0
 800e1f0:	4423      	add	r3, r4
 800e1f2:	e015      	b.n	800e220 <rshift+0x68>
 800e1f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e1f8:	f1c1 0820 	rsb	r8, r1, #32
 800e1fc:	40cf      	lsrs	r7, r1
 800e1fe:	f105 0e04 	add.w	lr, r5, #4
 800e202:	46a1      	mov	r9, r4
 800e204:	4576      	cmp	r6, lr
 800e206:	46f4      	mov	ip, lr
 800e208:	d815      	bhi.n	800e236 <rshift+0x7e>
 800e20a:	1a9a      	subs	r2, r3, r2
 800e20c:	0092      	lsls	r2, r2, #2
 800e20e:	3a04      	subs	r2, #4
 800e210:	3501      	adds	r5, #1
 800e212:	42ae      	cmp	r6, r5
 800e214:	bf38      	it	cc
 800e216:	2200      	movcc	r2, #0
 800e218:	18a3      	adds	r3, r4, r2
 800e21a:	50a7      	str	r7, [r4, r2]
 800e21c:	b107      	cbz	r7, 800e220 <rshift+0x68>
 800e21e:	3304      	adds	r3, #4
 800e220:	1b1a      	subs	r2, r3, r4
 800e222:	42a3      	cmp	r3, r4
 800e224:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e228:	bf08      	it	eq
 800e22a:	2300      	moveq	r3, #0
 800e22c:	6102      	str	r2, [r0, #16]
 800e22e:	bf08      	it	eq
 800e230:	6143      	streq	r3, [r0, #20]
 800e232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e236:	f8dc c000 	ldr.w	ip, [ip]
 800e23a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e23e:	ea4c 0707 	orr.w	r7, ip, r7
 800e242:	f849 7b04 	str.w	r7, [r9], #4
 800e246:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e24a:	40cf      	lsrs	r7, r1
 800e24c:	e7da      	b.n	800e204 <rshift+0x4c>
 800e24e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e252:	f847 cf04 	str.w	ip, [r7, #4]!
 800e256:	e7c3      	b.n	800e1e0 <rshift+0x28>
 800e258:	4623      	mov	r3, r4
 800e25a:	e7e1      	b.n	800e220 <rshift+0x68>

0800e25c <__hexdig_fun>:
 800e25c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e260:	2b09      	cmp	r3, #9
 800e262:	d802      	bhi.n	800e26a <__hexdig_fun+0xe>
 800e264:	3820      	subs	r0, #32
 800e266:	b2c0      	uxtb	r0, r0
 800e268:	4770      	bx	lr
 800e26a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e26e:	2b05      	cmp	r3, #5
 800e270:	d801      	bhi.n	800e276 <__hexdig_fun+0x1a>
 800e272:	3847      	subs	r0, #71	@ 0x47
 800e274:	e7f7      	b.n	800e266 <__hexdig_fun+0xa>
 800e276:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e27a:	2b05      	cmp	r3, #5
 800e27c:	d801      	bhi.n	800e282 <__hexdig_fun+0x26>
 800e27e:	3827      	subs	r0, #39	@ 0x27
 800e280:	e7f1      	b.n	800e266 <__hexdig_fun+0xa>
 800e282:	2000      	movs	r0, #0
 800e284:	4770      	bx	lr
	...

0800e288 <__gethex>:
 800e288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e28c:	b085      	sub	sp, #20
 800e28e:	468a      	mov	sl, r1
 800e290:	9302      	str	r3, [sp, #8]
 800e292:	680b      	ldr	r3, [r1, #0]
 800e294:	9001      	str	r0, [sp, #4]
 800e296:	4690      	mov	r8, r2
 800e298:	1c9c      	adds	r4, r3, #2
 800e29a:	46a1      	mov	r9, r4
 800e29c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e2a0:	2830      	cmp	r0, #48	@ 0x30
 800e2a2:	d0fa      	beq.n	800e29a <__gethex+0x12>
 800e2a4:	eba9 0303 	sub.w	r3, r9, r3
 800e2a8:	f1a3 0b02 	sub.w	fp, r3, #2
 800e2ac:	f7ff ffd6 	bl	800e25c <__hexdig_fun>
 800e2b0:	4605      	mov	r5, r0
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d168      	bne.n	800e388 <__gethex+0x100>
 800e2b6:	49a0      	ldr	r1, [pc, #640]	@ (800e538 <__gethex+0x2b0>)
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	4648      	mov	r0, r9
 800e2bc:	f7ff fe8e 	bl	800dfdc <strncmp>
 800e2c0:	4607      	mov	r7, r0
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d167      	bne.n	800e396 <__gethex+0x10e>
 800e2c6:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e2ca:	4626      	mov	r6, r4
 800e2cc:	f7ff ffc6 	bl	800e25c <__hexdig_fun>
 800e2d0:	2800      	cmp	r0, #0
 800e2d2:	d062      	beq.n	800e39a <__gethex+0x112>
 800e2d4:	4623      	mov	r3, r4
 800e2d6:	7818      	ldrb	r0, [r3, #0]
 800e2d8:	2830      	cmp	r0, #48	@ 0x30
 800e2da:	4699      	mov	r9, r3
 800e2dc:	f103 0301 	add.w	r3, r3, #1
 800e2e0:	d0f9      	beq.n	800e2d6 <__gethex+0x4e>
 800e2e2:	f7ff ffbb 	bl	800e25c <__hexdig_fun>
 800e2e6:	fab0 f580 	clz	r5, r0
 800e2ea:	096d      	lsrs	r5, r5, #5
 800e2ec:	f04f 0b01 	mov.w	fp, #1
 800e2f0:	464a      	mov	r2, r9
 800e2f2:	4616      	mov	r6, r2
 800e2f4:	3201      	adds	r2, #1
 800e2f6:	7830      	ldrb	r0, [r6, #0]
 800e2f8:	f7ff ffb0 	bl	800e25c <__hexdig_fun>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	d1f8      	bne.n	800e2f2 <__gethex+0x6a>
 800e300:	498d      	ldr	r1, [pc, #564]	@ (800e538 <__gethex+0x2b0>)
 800e302:	2201      	movs	r2, #1
 800e304:	4630      	mov	r0, r6
 800e306:	f7ff fe69 	bl	800dfdc <strncmp>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	d13f      	bne.n	800e38e <__gethex+0x106>
 800e30e:	b944      	cbnz	r4, 800e322 <__gethex+0x9a>
 800e310:	1c74      	adds	r4, r6, #1
 800e312:	4622      	mov	r2, r4
 800e314:	4616      	mov	r6, r2
 800e316:	3201      	adds	r2, #1
 800e318:	7830      	ldrb	r0, [r6, #0]
 800e31a:	f7ff ff9f 	bl	800e25c <__hexdig_fun>
 800e31e:	2800      	cmp	r0, #0
 800e320:	d1f8      	bne.n	800e314 <__gethex+0x8c>
 800e322:	1ba4      	subs	r4, r4, r6
 800e324:	00a7      	lsls	r7, r4, #2
 800e326:	7833      	ldrb	r3, [r6, #0]
 800e328:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e32c:	2b50      	cmp	r3, #80	@ 0x50
 800e32e:	d13e      	bne.n	800e3ae <__gethex+0x126>
 800e330:	7873      	ldrb	r3, [r6, #1]
 800e332:	2b2b      	cmp	r3, #43	@ 0x2b
 800e334:	d033      	beq.n	800e39e <__gethex+0x116>
 800e336:	2b2d      	cmp	r3, #45	@ 0x2d
 800e338:	d034      	beq.n	800e3a4 <__gethex+0x11c>
 800e33a:	1c71      	adds	r1, r6, #1
 800e33c:	2400      	movs	r4, #0
 800e33e:	7808      	ldrb	r0, [r1, #0]
 800e340:	f7ff ff8c 	bl	800e25c <__hexdig_fun>
 800e344:	1e43      	subs	r3, r0, #1
 800e346:	b2db      	uxtb	r3, r3
 800e348:	2b18      	cmp	r3, #24
 800e34a:	d830      	bhi.n	800e3ae <__gethex+0x126>
 800e34c:	f1a0 0210 	sub.w	r2, r0, #16
 800e350:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e354:	f7ff ff82 	bl	800e25c <__hexdig_fun>
 800e358:	f100 3cff 	add.w	ip, r0, #4294967295
 800e35c:	fa5f fc8c 	uxtb.w	ip, ip
 800e360:	f1bc 0f18 	cmp.w	ip, #24
 800e364:	f04f 030a 	mov.w	r3, #10
 800e368:	d91e      	bls.n	800e3a8 <__gethex+0x120>
 800e36a:	b104      	cbz	r4, 800e36e <__gethex+0xe6>
 800e36c:	4252      	negs	r2, r2
 800e36e:	4417      	add	r7, r2
 800e370:	f8ca 1000 	str.w	r1, [sl]
 800e374:	b1ed      	cbz	r5, 800e3b2 <__gethex+0x12a>
 800e376:	f1bb 0f00 	cmp.w	fp, #0
 800e37a:	bf0c      	ite	eq
 800e37c:	2506      	moveq	r5, #6
 800e37e:	2500      	movne	r5, #0
 800e380:	4628      	mov	r0, r5
 800e382:	b005      	add	sp, #20
 800e384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e388:	2500      	movs	r5, #0
 800e38a:	462c      	mov	r4, r5
 800e38c:	e7b0      	b.n	800e2f0 <__gethex+0x68>
 800e38e:	2c00      	cmp	r4, #0
 800e390:	d1c7      	bne.n	800e322 <__gethex+0x9a>
 800e392:	4627      	mov	r7, r4
 800e394:	e7c7      	b.n	800e326 <__gethex+0x9e>
 800e396:	464e      	mov	r6, r9
 800e398:	462f      	mov	r7, r5
 800e39a:	2501      	movs	r5, #1
 800e39c:	e7c3      	b.n	800e326 <__gethex+0x9e>
 800e39e:	2400      	movs	r4, #0
 800e3a0:	1cb1      	adds	r1, r6, #2
 800e3a2:	e7cc      	b.n	800e33e <__gethex+0xb6>
 800e3a4:	2401      	movs	r4, #1
 800e3a6:	e7fb      	b.n	800e3a0 <__gethex+0x118>
 800e3a8:	fb03 0002 	mla	r0, r3, r2, r0
 800e3ac:	e7ce      	b.n	800e34c <__gethex+0xc4>
 800e3ae:	4631      	mov	r1, r6
 800e3b0:	e7de      	b.n	800e370 <__gethex+0xe8>
 800e3b2:	eba6 0309 	sub.w	r3, r6, r9
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	4629      	mov	r1, r5
 800e3ba:	2b07      	cmp	r3, #7
 800e3bc:	dc0a      	bgt.n	800e3d4 <__gethex+0x14c>
 800e3be:	9801      	ldr	r0, [sp, #4]
 800e3c0:	f000 faf4 	bl	800e9ac <_Balloc>
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	b940      	cbnz	r0, 800e3da <__gethex+0x152>
 800e3c8:	4b5c      	ldr	r3, [pc, #368]	@ (800e53c <__gethex+0x2b4>)
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	21e4      	movs	r1, #228	@ 0xe4
 800e3ce:	485c      	ldr	r0, [pc, #368]	@ (800e540 <__gethex+0x2b8>)
 800e3d0:	f001 fb66 	bl	800faa0 <__assert_func>
 800e3d4:	3101      	adds	r1, #1
 800e3d6:	105b      	asrs	r3, r3, #1
 800e3d8:	e7ef      	b.n	800e3ba <__gethex+0x132>
 800e3da:	f100 0a14 	add.w	sl, r0, #20
 800e3de:	2300      	movs	r3, #0
 800e3e0:	4655      	mov	r5, sl
 800e3e2:	469b      	mov	fp, r3
 800e3e4:	45b1      	cmp	r9, r6
 800e3e6:	d337      	bcc.n	800e458 <__gethex+0x1d0>
 800e3e8:	f845 bb04 	str.w	fp, [r5], #4
 800e3ec:	eba5 050a 	sub.w	r5, r5, sl
 800e3f0:	10ad      	asrs	r5, r5, #2
 800e3f2:	6125      	str	r5, [r4, #16]
 800e3f4:	4658      	mov	r0, fp
 800e3f6:	f000 fbcb 	bl	800eb90 <__hi0bits>
 800e3fa:	016d      	lsls	r5, r5, #5
 800e3fc:	f8d8 6000 	ldr.w	r6, [r8]
 800e400:	1a2d      	subs	r5, r5, r0
 800e402:	42b5      	cmp	r5, r6
 800e404:	dd54      	ble.n	800e4b0 <__gethex+0x228>
 800e406:	1bad      	subs	r5, r5, r6
 800e408:	4629      	mov	r1, r5
 800e40a:	4620      	mov	r0, r4
 800e40c:	f000 ff5f 	bl	800f2ce <__any_on>
 800e410:	4681      	mov	r9, r0
 800e412:	b178      	cbz	r0, 800e434 <__gethex+0x1ac>
 800e414:	1e6b      	subs	r3, r5, #1
 800e416:	1159      	asrs	r1, r3, #5
 800e418:	f003 021f 	and.w	r2, r3, #31
 800e41c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e420:	f04f 0901 	mov.w	r9, #1
 800e424:	fa09 f202 	lsl.w	r2, r9, r2
 800e428:	420a      	tst	r2, r1
 800e42a:	d003      	beq.n	800e434 <__gethex+0x1ac>
 800e42c:	454b      	cmp	r3, r9
 800e42e:	dc36      	bgt.n	800e49e <__gethex+0x216>
 800e430:	f04f 0902 	mov.w	r9, #2
 800e434:	4629      	mov	r1, r5
 800e436:	4620      	mov	r0, r4
 800e438:	f7ff febe 	bl	800e1b8 <rshift>
 800e43c:	442f      	add	r7, r5
 800e43e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e442:	42bb      	cmp	r3, r7
 800e444:	da42      	bge.n	800e4cc <__gethex+0x244>
 800e446:	9801      	ldr	r0, [sp, #4]
 800e448:	4621      	mov	r1, r4
 800e44a:	f000 faef 	bl	800ea2c <_Bfree>
 800e44e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e450:	2300      	movs	r3, #0
 800e452:	6013      	str	r3, [r2, #0]
 800e454:	25a3      	movs	r5, #163	@ 0xa3
 800e456:	e793      	b.n	800e380 <__gethex+0xf8>
 800e458:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e45c:	2a2e      	cmp	r2, #46	@ 0x2e
 800e45e:	d012      	beq.n	800e486 <__gethex+0x1fe>
 800e460:	2b20      	cmp	r3, #32
 800e462:	d104      	bne.n	800e46e <__gethex+0x1e6>
 800e464:	f845 bb04 	str.w	fp, [r5], #4
 800e468:	f04f 0b00 	mov.w	fp, #0
 800e46c:	465b      	mov	r3, fp
 800e46e:	7830      	ldrb	r0, [r6, #0]
 800e470:	9303      	str	r3, [sp, #12]
 800e472:	f7ff fef3 	bl	800e25c <__hexdig_fun>
 800e476:	9b03      	ldr	r3, [sp, #12]
 800e478:	f000 000f 	and.w	r0, r0, #15
 800e47c:	4098      	lsls	r0, r3
 800e47e:	ea4b 0b00 	orr.w	fp, fp, r0
 800e482:	3304      	adds	r3, #4
 800e484:	e7ae      	b.n	800e3e4 <__gethex+0x15c>
 800e486:	45b1      	cmp	r9, r6
 800e488:	d8ea      	bhi.n	800e460 <__gethex+0x1d8>
 800e48a:	492b      	ldr	r1, [pc, #172]	@ (800e538 <__gethex+0x2b0>)
 800e48c:	9303      	str	r3, [sp, #12]
 800e48e:	2201      	movs	r2, #1
 800e490:	4630      	mov	r0, r6
 800e492:	f7ff fda3 	bl	800dfdc <strncmp>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	2800      	cmp	r0, #0
 800e49a:	d1e1      	bne.n	800e460 <__gethex+0x1d8>
 800e49c:	e7a2      	b.n	800e3e4 <__gethex+0x15c>
 800e49e:	1ea9      	subs	r1, r5, #2
 800e4a0:	4620      	mov	r0, r4
 800e4a2:	f000 ff14 	bl	800f2ce <__any_on>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	d0c2      	beq.n	800e430 <__gethex+0x1a8>
 800e4aa:	f04f 0903 	mov.w	r9, #3
 800e4ae:	e7c1      	b.n	800e434 <__gethex+0x1ac>
 800e4b0:	da09      	bge.n	800e4c6 <__gethex+0x23e>
 800e4b2:	1b75      	subs	r5, r6, r5
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	9801      	ldr	r0, [sp, #4]
 800e4b8:	462a      	mov	r2, r5
 800e4ba:	f000 fccf 	bl	800ee5c <__lshift>
 800e4be:	1b7f      	subs	r7, r7, r5
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	f100 0a14 	add.w	sl, r0, #20
 800e4c6:	f04f 0900 	mov.w	r9, #0
 800e4ca:	e7b8      	b.n	800e43e <__gethex+0x1b6>
 800e4cc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e4d0:	42bd      	cmp	r5, r7
 800e4d2:	dd6f      	ble.n	800e5b4 <__gethex+0x32c>
 800e4d4:	1bed      	subs	r5, r5, r7
 800e4d6:	42ae      	cmp	r6, r5
 800e4d8:	dc34      	bgt.n	800e544 <__gethex+0x2bc>
 800e4da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	d022      	beq.n	800e528 <__gethex+0x2a0>
 800e4e2:	2b03      	cmp	r3, #3
 800e4e4:	d024      	beq.n	800e530 <__gethex+0x2a8>
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d115      	bne.n	800e516 <__gethex+0x28e>
 800e4ea:	42ae      	cmp	r6, r5
 800e4ec:	d113      	bne.n	800e516 <__gethex+0x28e>
 800e4ee:	2e01      	cmp	r6, #1
 800e4f0:	d10b      	bne.n	800e50a <__gethex+0x282>
 800e4f2:	9a02      	ldr	r2, [sp, #8]
 800e4f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e4f8:	6013      	str	r3, [r2, #0]
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	6123      	str	r3, [r4, #16]
 800e4fe:	f8ca 3000 	str.w	r3, [sl]
 800e502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e504:	2562      	movs	r5, #98	@ 0x62
 800e506:	601c      	str	r4, [r3, #0]
 800e508:	e73a      	b.n	800e380 <__gethex+0xf8>
 800e50a:	1e71      	subs	r1, r6, #1
 800e50c:	4620      	mov	r0, r4
 800e50e:	f000 fede 	bl	800f2ce <__any_on>
 800e512:	2800      	cmp	r0, #0
 800e514:	d1ed      	bne.n	800e4f2 <__gethex+0x26a>
 800e516:	9801      	ldr	r0, [sp, #4]
 800e518:	4621      	mov	r1, r4
 800e51a:	f000 fa87 	bl	800ea2c <_Bfree>
 800e51e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e520:	2300      	movs	r3, #0
 800e522:	6013      	str	r3, [r2, #0]
 800e524:	2550      	movs	r5, #80	@ 0x50
 800e526:	e72b      	b.n	800e380 <__gethex+0xf8>
 800e528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d1f3      	bne.n	800e516 <__gethex+0x28e>
 800e52e:	e7e0      	b.n	800e4f2 <__gethex+0x26a>
 800e530:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1dd      	bne.n	800e4f2 <__gethex+0x26a>
 800e536:	e7ee      	b.n	800e516 <__gethex+0x28e>
 800e538:	08010840 	.word	0x08010840
 800e53c:	080108a8 	.word	0x080108a8
 800e540:	080108b9 	.word	0x080108b9
 800e544:	1e6f      	subs	r7, r5, #1
 800e546:	f1b9 0f00 	cmp.w	r9, #0
 800e54a:	d130      	bne.n	800e5ae <__gethex+0x326>
 800e54c:	b127      	cbz	r7, 800e558 <__gethex+0x2d0>
 800e54e:	4639      	mov	r1, r7
 800e550:	4620      	mov	r0, r4
 800e552:	f000 febc 	bl	800f2ce <__any_on>
 800e556:	4681      	mov	r9, r0
 800e558:	117a      	asrs	r2, r7, #5
 800e55a:	2301      	movs	r3, #1
 800e55c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e560:	f007 071f 	and.w	r7, r7, #31
 800e564:	40bb      	lsls	r3, r7
 800e566:	4213      	tst	r3, r2
 800e568:	4629      	mov	r1, r5
 800e56a:	4620      	mov	r0, r4
 800e56c:	bf18      	it	ne
 800e56e:	f049 0902 	orrne.w	r9, r9, #2
 800e572:	f7ff fe21 	bl	800e1b8 <rshift>
 800e576:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e57a:	1b76      	subs	r6, r6, r5
 800e57c:	2502      	movs	r5, #2
 800e57e:	f1b9 0f00 	cmp.w	r9, #0
 800e582:	d047      	beq.n	800e614 <__gethex+0x38c>
 800e584:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e588:	2b02      	cmp	r3, #2
 800e58a:	d015      	beq.n	800e5b8 <__gethex+0x330>
 800e58c:	2b03      	cmp	r3, #3
 800e58e:	d017      	beq.n	800e5c0 <__gethex+0x338>
 800e590:	2b01      	cmp	r3, #1
 800e592:	d109      	bne.n	800e5a8 <__gethex+0x320>
 800e594:	f019 0f02 	tst.w	r9, #2
 800e598:	d006      	beq.n	800e5a8 <__gethex+0x320>
 800e59a:	f8da 3000 	ldr.w	r3, [sl]
 800e59e:	ea49 0903 	orr.w	r9, r9, r3
 800e5a2:	f019 0f01 	tst.w	r9, #1
 800e5a6:	d10e      	bne.n	800e5c6 <__gethex+0x33e>
 800e5a8:	f045 0510 	orr.w	r5, r5, #16
 800e5ac:	e032      	b.n	800e614 <__gethex+0x38c>
 800e5ae:	f04f 0901 	mov.w	r9, #1
 800e5b2:	e7d1      	b.n	800e558 <__gethex+0x2d0>
 800e5b4:	2501      	movs	r5, #1
 800e5b6:	e7e2      	b.n	800e57e <__gethex+0x2f6>
 800e5b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5ba:	f1c3 0301 	rsb	r3, r3, #1
 800e5be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e5c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d0f0      	beq.n	800e5a8 <__gethex+0x320>
 800e5c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e5ca:	f104 0314 	add.w	r3, r4, #20
 800e5ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e5d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e5d6:	f04f 0c00 	mov.w	ip, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5e0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e5e4:	d01b      	beq.n	800e61e <__gethex+0x396>
 800e5e6:	3201      	adds	r2, #1
 800e5e8:	6002      	str	r2, [r0, #0]
 800e5ea:	2d02      	cmp	r5, #2
 800e5ec:	f104 0314 	add.w	r3, r4, #20
 800e5f0:	d13c      	bne.n	800e66c <__gethex+0x3e4>
 800e5f2:	f8d8 2000 	ldr.w	r2, [r8]
 800e5f6:	3a01      	subs	r2, #1
 800e5f8:	42b2      	cmp	r2, r6
 800e5fa:	d109      	bne.n	800e610 <__gethex+0x388>
 800e5fc:	1171      	asrs	r1, r6, #5
 800e5fe:	2201      	movs	r2, #1
 800e600:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e604:	f006 061f 	and.w	r6, r6, #31
 800e608:	fa02 f606 	lsl.w	r6, r2, r6
 800e60c:	421e      	tst	r6, r3
 800e60e:	d13a      	bne.n	800e686 <__gethex+0x3fe>
 800e610:	f045 0520 	orr.w	r5, r5, #32
 800e614:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e616:	601c      	str	r4, [r3, #0]
 800e618:	9b02      	ldr	r3, [sp, #8]
 800e61a:	601f      	str	r7, [r3, #0]
 800e61c:	e6b0      	b.n	800e380 <__gethex+0xf8>
 800e61e:	4299      	cmp	r1, r3
 800e620:	f843 cc04 	str.w	ip, [r3, #-4]
 800e624:	d8d9      	bhi.n	800e5da <__gethex+0x352>
 800e626:	68a3      	ldr	r3, [r4, #8]
 800e628:	459b      	cmp	fp, r3
 800e62a:	db17      	blt.n	800e65c <__gethex+0x3d4>
 800e62c:	6861      	ldr	r1, [r4, #4]
 800e62e:	9801      	ldr	r0, [sp, #4]
 800e630:	3101      	adds	r1, #1
 800e632:	f000 f9bb 	bl	800e9ac <_Balloc>
 800e636:	4681      	mov	r9, r0
 800e638:	b918      	cbnz	r0, 800e642 <__gethex+0x3ba>
 800e63a:	4b1a      	ldr	r3, [pc, #104]	@ (800e6a4 <__gethex+0x41c>)
 800e63c:	4602      	mov	r2, r0
 800e63e:	2184      	movs	r1, #132	@ 0x84
 800e640:	e6c5      	b.n	800e3ce <__gethex+0x146>
 800e642:	6922      	ldr	r2, [r4, #16]
 800e644:	3202      	adds	r2, #2
 800e646:	f104 010c 	add.w	r1, r4, #12
 800e64a:	0092      	lsls	r2, r2, #2
 800e64c:	300c      	adds	r0, #12
 800e64e:	f7ff fd4a 	bl	800e0e6 <memcpy>
 800e652:	4621      	mov	r1, r4
 800e654:	9801      	ldr	r0, [sp, #4]
 800e656:	f000 f9e9 	bl	800ea2c <_Bfree>
 800e65a:	464c      	mov	r4, r9
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e664:	6122      	str	r2, [r4, #16]
 800e666:	2201      	movs	r2, #1
 800e668:	615a      	str	r2, [r3, #20]
 800e66a:	e7be      	b.n	800e5ea <__gethex+0x362>
 800e66c:	6922      	ldr	r2, [r4, #16]
 800e66e:	455a      	cmp	r2, fp
 800e670:	dd0b      	ble.n	800e68a <__gethex+0x402>
 800e672:	2101      	movs	r1, #1
 800e674:	4620      	mov	r0, r4
 800e676:	f7ff fd9f 	bl	800e1b8 <rshift>
 800e67a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e67e:	3701      	adds	r7, #1
 800e680:	42bb      	cmp	r3, r7
 800e682:	f6ff aee0 	blt.w	800e446 <__gethex+0x1be>
 800e686:	2501      	movs	r5, #1
 800e688:	e7c2      	b.n	800e610 <__gethex+0x388>
 800e68a:	f016 061f 	ands.w	r6, r6, #31
 800e68e:	d0fa      	beq.n	800e686 <__gethex+0x3fe>
 800e690:	4453      	add	r3, sl
 800e692:	f1c6 0620 	rsb	r6, r6, #32
 800e696:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e69a:	f000 fa79 	bl	800eb90 <__hi0bits>
 800e69e:	42b0      	cmp	r0, r6
 800e6a0:	dbe7      	blt.n	800e672 <__gethex+0x3ea>
 800e6a2:	e7f0      	b.n	800e686 <__gethex+0x3fe>
 800e6a4:	080108a8 	.word	0x080108a8

0800e6a8 <L_shift>:
 800e6a8:	f1c2 0208 	rsb	r2, r2, #8
 800e6ac:	0092      	lsls	r2, r2, #2
 800e6ae:	b570      	push	{r4, r5, r6, lr}
 800e6b0:	f1c2 0620 	rsb	r6, r2, #32
 800e6b4:	6843      	ldr	r3, [r0, #4]
 800e6b6:	6804      	ldr	r4, [r0, #0]
 800e6b8:	fa03 f506 	lsl.w	r5, r3, r6
 800e6bc:	432c      	orrs	r4, r5
 800e6be:	40d3      	lsrs	r3, r2
 800e6c0:	6004      	str	r4, [r0, #0]
 800e6c2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e6c6:	4288      	cmp	r0, r1
 800e6c8:	d3f4      	bcc.n	800e6b4 <L_shift+0xc>
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}

0800e6cc <__match>:
 800e6cc:	b530      	push	{r4, r5, lr}
 800e6ce:	6803      	ldr	r3, [r0, #0]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6d6:	b914      	cbnz	r4, 800e6de <__match+0x12>
 800e6d8:	6003      	str	r3, [r0, #0]
 800e6da:	2001      	movs	r0, #1
 800e6dc:	bd30      	pop	{r4, r5, pc}
 800e6de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6e2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e6e6:	2d19      	cmp	r5, #25
 800e6e8:	bf98      	it	ls
 800e6ea:	3220      	addls	r2, #32
 800e6ec:	42a2      	cmp	r2, r4
 800e6ee:	d0f0      	beq.n	800e6d2 <__match+0x6>
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	e7f3      	b.n	800e6dc <__match+0x10>

0800e6f4 <__hexnan>:
 800e6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f8:	680b      	ldr	r3, [r1, #0]
 800e6fa:	6801      	ldr	r1, [r0, #0]
 800e6fc:	115e      	asrs	r6, r3, #5
 800e6fe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e702:	f013 031f 	ands.w	r3, r3, #31
 800e706:	b087      	sub	sp, #28
 800e708:	bf18      	it	ne
 800e70a:	3604      	addne	r6, #4
 800e70c:	2500      	movs	r5, #0
 800e70e:	1f37      	subs	r7, r6, #4
 800e710:	4682      	mov	sl, r0
 800e712:	4690      	mov	r8, r2
 800e714:	9301      	str	r3, [sp, #4]
 800e716:	f846 5c04 	str.w	r5, [r6, #-4]
 800e71a:	46b9      	mov	r9, r7
 800e71c:	463c      	mov	r4, r7
 800e71e:	9502      	str	r5, [sp, #8]
 800e720:	46ab      	mov	fp, r5
 800e722:	784a      	ldrb	r2, [r1, #1]
 800e724:	1c4b      	adds	r3, r1, #1
 800e726:	9303      	str	r3, [sp, #12]
 800e728:	b342      	cbz	r2, 800e77c <__hexnan+0x88>
 800e72a:	4610      	mov	r0, r2
 800e72c:	9105      	str	r1, [sp, #20]
 800e72e:	9204      	str	r2, [sp, #16]
 800e730:	f7ff fd94 	bl	800e25c <__hexdig_fun>
 800e734:	2800      	cmp	r0, #0
 800e736:	d151      	bne.n	800e7dc <__hexnan+0xe8>
 800e738:	9a04      	ldr	r2, [sp, #16]
 800e73a:	9905      	ldr	r1, [sp, #20]
 800e73c:	2a20      	cmp	r2, #32
 800e73e:	d818      	bhi.n	800e772 <__hexnan+0x7e>
 800e740:	9b02      	ldr	r3, [sp, #8]
 800e742:	459b      	cmp	fp, r3
 800e744:	dd13      	ble.n	800e76e <__hexnan+0x7a>
 800e746:	454c      	cmp	r4, r9
 800e748:	d206      	bcs.n	800e758 <__hexnan+0x64>
 800e74a:	2d07      	cmp	r5, #7
 800e74c:	dc04      	bgt.n	800e758 <__hexnan+0x64>
 800e74e:	462a      	mov	r2, r5
 800e750:	4649      	mov	r1, r9
 800e752:	4620      	mov	r0, r4
 800e754:	f7ff ffa8 	bl	800e6a8 <L_shift>
 800e758:	4544      	cmp	r4, r8
 800e75a:	d952      	bls.n	800e802 <__hexnan+0x10e>
 800e75c:	2300      	movs	r3, #0
 800e75e:	f1a4 0904 	sub.w	r9, r4, #4
 800e762:	f844 3c04 	str.w	r3, [r4, #-4]
 800e766:	f8cd b008 	str.w	fp, [sp, #8]
 800e76a:	464c      	mov	r4, r9
 800e76c:	461d      	mov	r5, r3
 800e76e:	9903      	ldr	r1, [sp, #12]
 800e770:	e7d7      	b.n	800e722 <__hexnan+0x2e>
 800e772:	2a29      	cmp	r2, #41	@ 0x29
 800e774:	d157      	bne.n	800e826 <__hexnan+0x132>
 800e776:	3102      	adds	r1, #2
 800e778:	f8ca 1000 	str.w	r1, [sl]
 800e77c:	f1bb 0f00 	cmp.w	fp, #0
 800e780:	d051      	beq.n	800e826 <__hexnan+0x132>
 800e782:	454c      	cmp	r4, r9
 800e784:	d206      	bcs.n	800e794 <__hexnan+0xa0>
 800e786:	2d07      	cmp	r5, #7
 800e788:	dc04      	bgt.n	800e794 <__hexnan+0xa0>
 800e78a:	462a      	mov	r2, r5
 800e78c:	4649      	mov	r1, r9
 800e78e:	4620      	mov	r0, r4
 800e790:	f7ff ff8a 	bl	800e6a8 <L_shift>
 800e794:	4544      	cmp	r4, r8
 800e796:	d936      	bls.n	800e806 <__hexnan+0x112>
 800e798:	f1a8 0204 	sub.w	r2, r8, #4
 800e79c:	4623      	mov	r3, r4
 800e79e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e7a2:	f842 1f04 	str.w	r1, [r2, #4]!
 800e7a6:	429f      	cmp	r7, r3
 800e7a8:	d2f9      	bcs.n	800e79e <__hexnan+0xaa>
 800e7aa:	1b3b      	subs	r3, r7, r4
 800e7ac:	f023 0303 	bic.w	r3, r3, #3
 800e7b0:	3304      	adds	r3, #4
 800e7b2:	3401      	adds	r4, #1
 800e7b4:	3e03      	subs	r6, #3
 800e7b6:	42b4      	cmp	r4, r6
 800e7b8:	bf88      	it	hi
 800e7ba:	2304      	movhi	r3, #4
 800e7bc:	4443      	add	r3, r8
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f843 2b04 	str.w	r2, [r3], #4
 800e7c4:	429f      	cmp	r7, r3
 800e7c6:	d2fb      	bcs.n	800e7c0 <__hexnan+0xcc>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	b91b      	cbnz	r3, 800e7d4 <__hexnan+0xe0>
 800e7cc:	4547      	cmp	r7, r8
 800e7ce:	d128      	bne.n	800e822 <__hexnan+0x12e>
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	603b      	str	r3, [r7, #0]
 800e7d4:	2005      	movs	r0, #5
 800e7d6:	b007      	add	sp, #28
 800e7d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7dc:	3501      	adds	r5, #1
 800e7de:	2d08      	cmp	r5, #8
 800e7e0:	f10b 0b01 	add.w	fp, fp, #1
 800e7e4:	dd06      	ble.n	800e7f4 <__hexnan+0x100>
 800e7e6:	4544      	cmp	r4, r8
 800e7e8:	d9c1      	bls.n	800e76e <__hexnan+0x7a>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800e7f0:	2501      	movs	r5, #1
 800e7f2:	3c04      	subs	r4, #4
 800e7f4:	6822      	ldr	r2, [r4, #0]
 800e7f6:	f000 000f 	and.w	r0, r0, #15
 800e7fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e7fe:	6020      	str	r0, [r4, #0]
 800e800:	e7b5      	b.n	800e76e <__hexnan+0x7a>
 800e802:	2508      	movs	r5, #8
 800e804:	e7b3      	b.n	800e76e <__hexnan+0x7a>
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0dd      	beq.n	800e7c8 <__hexnan+0xd4>
 800e80c:	f1c3 0320 	rsb	r3, r3, #32
 800e810:	f04f 32ff 	mov.w	r2, #4294967295
 800e814:	40da      	lsrs	r2, r3
 800e816:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e81a:	4013      	ands	r3, r2
 800e81c:	f846 3c04 	str.w	r3, [r6, #-4]
 800e820:	e7d2      	b.n	800e7c8 <__hexnan+0xd4>
 800e822:	3f04      	subs	r7, #4
 800e824:	e7d0      	b.n	800e7c8 <__hexnan+0xd4>
 800e826:	2004      	movs	r0, #4
 800e828:	e7d5      	b.n	800e7d6 <__hexnan+0xe2>
	...

0800e82c <sbrk_aligned>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	4e0f      	ldr	r6, [pc, #60]	@ (800e86c <sbrk_aligned+0x40>)
 800e830:	460c      	mov	r4, r1
 800e832:	6831      	ldr	r1, [r6, #0]
 800e834:	4605      	mov	r5, r0
 800e836:	b911      	cbnz	r1, 800e83e <sbrk_aligned+0x12>
 800e838:	f001 f922 	bl	800fa80 <_sbrk_r>
 800e83c:	6030      	str	r0, [r6, #0]
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f001 f91d 	bl	800fa80 <_sbrk_r>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	d103      	bne.n	800e852 <sbrk_aligned+0x26>
 800e84a:	f04f 34ff 	mov.w	r4, #4294967295
 800e84e:	4620      	mov	r0, r4
 800e850:	bd70      	pop	{r4, r5, r6, pc}
 800e852:	1cc4      	adds	r4, r0, #3
 800e854:	f024 0403 	bic.w	r4, r4, #3
 800e858:	42a0      	cmp	r0, r4
 800e85a:	d0f8      	beq.n	800e84e <sbrk_aligned+0x22>
 800e85c:	1a21      	subs	r1, r4, r0
 800e85e:	4628      	mov	r0, r5
 800e860:	f001 f90e 	bl	800fa80 <_sbrk_r>
 800e864:	3001      	adds	r0, #1
 800e866:	d1f2      	bne.n	800e84e <sbrk_aligned+0x22>
 800e868:	e7ef      	b.n	800e84a <sbrk_aligned+0x1e>
 800e86a:	bf00      	nop
 800e86c:	20002860 	.word	0x20002860

0800e870 <_malloc_r>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	1ccd      	adds	r5, r1, #3
 800e876:	f025 0503 	bic.w	r5, r5, #3
 800e87a:	3508      	adds	r5, #8
 800e87c:	2d0c      	cmp	r5, #12
 800e87e:	bf38      	it	cc
 800e880:	250c      	movcc	r5, #12
 800e882:	2d00      	cmp	r5, #0
 800e884:	4606      	mov	r6, r0
 800e886:	db01      	blt.n	800e88c <_malloc_r+0x1c>
 800e888:	42a9      	cmp	r1, r5
 800e88a:	d904      	bls.n	800e896 <_malloc_r+0x26>
 800e88c:	230c      	movs	r3, #12
 800e88e:	6033      	str	r3, [r6, #0]
 800e890:	2000      	movs	r0, #0
 800e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e96c <_malloc_r+0xfc>
 800e89a:	f000 f87b 	bl	800e994 <__malloc_lock>
 800e89e:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a2:	461c      	mov	r4, r3
 800e8a4:	bb44      	cbnz	r4, 800e8f8 <_malloc_r+0x88>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff ffbf 	bl	800e82c <sbrk_aligned>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	d158      	bne.n	800e966 <_malloc_r+0xf6>
 800e8b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8b8:	4627      	mov	r7, r4
 800e8ba:	2f00      	cmp	r7, #0
 800e8bc:	d143      	bne.n	800e946 <_malloc_r+0xd6>
 800e8be:	2c00      	cmp	r4, #0
 800e8c0:	d04b      	beq.n	800e95a <_malloc_r+0xea>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	eb04 0903 	add.w	r9, r4, r3
 800e8cc:	f001 f8d8 	bl	800fa80 <_sbrk_r>
 800e8d0:	4581      	cmp	r9, r0
 800e8d2:	d142      	bne.n	800e95a <_malloc_r+0xea>
 800e8d4:	6821      	ldr	r1, [r4, #0]
 800e8d6:	1a6d      	subs	r5, r5, r1
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7ff ffa6 	bl	800e82c <sbrk_aligned>
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d03a      	beq.n	800e95a <_malloc_r+0xea>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	442b      	add	r3, r5
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	bb62      	cbnz	r2, 800e94c <_malloc_r+0xdc>
 800e8f2:	f8c8 7000 	str.w	r7, [r8]
 800e8f6:	e00f      	b.n	800e918 <_malloc_r+0xa8>
 800e8f8:	6822      	ldr	r2, [r4, #0]
 800e8fa:	1b52      	subs	r2, r2, r5
 800e8fc:	d420      	bmi.n	800e940 <_malloc_r+0xd0>
 800e8fe:	2a0b      	cmp	r2, #11
 800e900:	d917      	bls.n	800e932 <_malloc_r+0xc2>
 800e902:	1961      	adds	r1, r4, r5
 800e904:	42a3      	cmp	r3, r4
 800e906:	6025      	str	r5, [r4, #0]
 800e908:	bf18      	it	ne
 800e90a:	6059      	strne	r1, [r3, #4]
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	bf08      	it	eq
 800e910:	f8c8 1000 	streq.w	r1, [r8]
 800e914:	5162      	str	r2, [r4, r5]
 800e916:	604b      	str	r3, [r1, #4]
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 f841 	bl	800e9a0 <__malloc_unlock>
 800e91e:	f104 000b 	add.w	r0, r4, #11
 800e922:	1d23      	adds	r3, r4, #4
 800e924:	f020 0007 	bic.w	r0, r0, #7
 800e928:	1ac2      	subs	r2, r0, r3
 800e92a:	bf1c      	itt	ne
 800e92c:	1a1b      	subne	r3, r3, r0
 800e92e:	50a3      	strne	r3, [r4, r2]
 800e930:	e7af      	b.n	800e892 <_malloc_r+0x22>
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	42a3      	cmp	r3, r4
 800e936:	bf0c      	ite	eq
 800e938:	f8c8 2000 	streq.w	r2, [r8]
 800e93c:	605a      	strne	r2, [r3, #4]
 800e93e:	e7eb      	b.n	800e918 <_malloc_r+0xa8>
 800e940:	4623      	mov	r3, r4
 800e942:	6864      	ldr	r4, [r4, #4]
 800e944:	e7ae      	b.n	800e8a4 <_malloc_r+0x34>
 800e946:	463c      	mov	r4, r7
 800e948:	687f      	ldr	r7, [r7, #4]
 800e94a:	e7b6      	b.n	800e8ba <_malloc_r+0x4a>
 800e94c:	461a      	mov	r2, r3
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	42a3      	cmp	r3, r4
 800e952:	d1fb      	bne.n	800e94c <_malloc_r+0xdc>
 800e954:	2300      	movs	r3, #0
 800e956:	6053      	str	r3, [r2, #4]
 800e958:	e7de      	b.n	800e918 <_malloc_r+0xa8>
 800e95a:	230c      	movs	r3, #12
 800e95c:	6033      	str	r3, [r6, #0]
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f81e 	bl	800e9a0 <__malloc_unlock>
 800e964:	e794      	b.n	800e890 <_malloc_r+0x20>
 800e966:	6005      	str	r5, [r0, #0]
 800e968:	e7d6      	b.n	800e918 <_malloc_r+0xa8>
 800e96a:	bf00      	nop
 800e96c:	20002864 	.word	0x20002864

0800e970 <__ascii_mbtowc>:
 800e970:	b082      	sub	sp, #8
 800e972:	b901      	cbnz	r1, 800e976 <__ascii_mbtowc+0x6>
 800e974:	a901      	add	r1, sp, #4
 800e976:	b142      	cbz	r2, 800e98a <__ascii_mbtowc+0x1a>
 800e978:	b14b      	cbz	r3, 800e98e <__ascii_mbtowc+0x1e>
 800e97a:	7813      	ldrb	r3, [r2, #0]
 800e97c:	600b      	str	r3, [r1, #0]
 800e97e:	7812      	ldrb	r2, [r2, #0]
 800e980:	1e10      	subs	r0, r2, #0
 800e982:	bf18      	it	ne
 800e984:	2001      	movne	r0, #1
 800e986:	b002      	add	sp, #8
 800e988:	4770      	bx	lr
 800e98a:	4610      	mov	r0, r2
 800e98c:	e7fb      	b.n	800e986 <__ascii_mbtowc+0x16>
 800e98e:	f06f 0001 	mvn.w	r0, #1
 800e992:	e7f8      	b.n	800e986 <__ascii_mbtowc+0x16>

0800e994 <__malloc_lock>:
 800e994:	4801      	ldr	r0, [pc, #4]	@ (800e99c <__malloc_lock+0x8>)
 800e996:	f7ff bba4 	b.w	800e0e2 <__retarget_lock_acquire_recursive>
 800e99a:	bf00      	nop
 800e99c:	2000285c 	.word	0x2000285c

0800e9a0 <__malloc_unlock>:
 800e9a0:	4801      	ldr	r0, [pc, #4]	@ (800e9a8 <__malloc_unlock+0x8>)
 800e9a2:	f7ff bb9f 	b.w	800e0e4 <__retarget_lock_release_recursive>
 800e9a6:	bf00      	nop
 800e9a8:	2000285c 	.word	0x2000285c

0800e9ac <_Balloc>:
 800e9ac:	b570      	push	{r4, r5, r6, lr}
 800e9ae:	69c6      	ldr	r6, [r0, #28]
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	460d      	mov	r5, r1
 800e9b4:	b976      	cbnz	r6, 800e9d4 <_Balloc+0x28>
 800e9b6:	2010      	movs	r0, #16
 800e9b8:	f001 f8a4 	bl	800fb04 <malloc>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	61e0      	str	r0, [r4, #28]
 800e9c0:	b920      	cbnz	r0, 800e9cc <_Balloc+0x20>
 800e9c2:	4b18      	ldr	r3, [pc, #96]	@ (800ea24 <_Balloc+0x78>)
 800e9c4:	4818      	ldr	r0, [pc, #96]	@ (800ea28 <_Balloc+0x7c>)
 800e9c6:	216b      	movs	r1, #107	@ 0x6b
 800e9c8:	f001 f86a 	bl	800faa0 <__assert_func>
 800e9cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9d0:	6006      	str	r6, [r0, #0]
 800e9d2:	60c6      	str	r6, [r0, #12]
 800e9d4:	69e6      	ldr	r6, [r4, #28]
 800e9d6:	68f3      	ldr	r3, [r6, #12]
 800e9d8:	b183      	cbz	r3, 800e9fc <_Balloc+0x50>
 800e9da:	69e3      	ldr	r3, [r4, #28]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9e2:	b9b8      	cbnz	r0, 800ea14 <_Balloc+0x68>
 800e9e4:	2101      	movs	r1, #1
 800e9e6:	fa01 f605 	lsl.w	r6, r1, r5
 800e9ea:	1d72      	adds	r2, r6, #5
 800e9ec:	0092      	lsls	r2, r2, #2
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f001 f874 	bl	800fadc <_calloc_r>
 800e9f4:	b160      	cbz	r0, 800ea10 <_Balloc+0x64>
 800e9f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9fa:	e00e      	b.n	800ea1a <_Balloc+0x6e>
 800e9fc:	2221      	movs	r2, #33	@ 0x21
 800e9fe:	2104      	movs	r1, #4
 800ea00:	4620      	mov	r0, r4
 800ea02:	f001 f86b 	bl	800fadc <_calloc_r>
 800ea06:	69e3      	ldr	r3, [r4, #28]
 800ea08:	60f0      	str	r0, [r6, #12]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1e4      	bne.n	800e9da <_Balloc+0x2e>
 800ea10:	2000      	movs	r0, #0
 800ea12:	bd70      	pop	{r4, r5, r6, pc}
 800ea14:	6802      	ldr	r2, [r0, #0]
 800ea16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea20:	e7f7      	b.n	800ea12 <_Balloc+0x66>
 800ea22:	bf00      	nop
 800ea24:	08010919 	.word	0x08010919
 800ea28:	08010930 	.word	0x08010930

0800ea2c <_Bfree>:
 800ea2c:	b570      	push	{r4, r5, r6, lr}
 800ea2e:	69c6      	ldr	r6, [r0, #28]
 800ea30:	4605      	mov	r5, r0
 800ea32:	460c      	mov	r4, r1
 800ea34:	b976      	cbnz	r6, 800ea54 <_Bfree+0x28>
 800ea36:	2010      	movs	r0, #16
 800ea38:	f001 f864 	bl	800fb04 <malloc>
 800ea3c:	4602      	mov	r2, r0
 800ea3e:	61e8      	str	r0, [r5, #28]
 800ea40:	b920      	cbnz	r0, 800ea4c <_Bfree+0x20>
 800ea42:	4b09      	ldr	r3, [pc, #36]	@ (800ea68 <_Bfree+0x3c>)
 800ea44:	4809      	ldr	r0, [pc, #36]	@ (800ea6c <_Bfree+0x40>)
 800ea46:	218f      	movs	r1, #143	@ 0x8f
 800ea48:	f001 f82a 	bl	800faa0 <__assert_func>
 800ea4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea50:	6006      	str	r6, [r0, #0]
 800ea52:	60c6      	str	r6, [r0, #12]
 800ea54:	b13c      	cbz	r4, 800ea66 <_Bfree+0x3a>
 800ea56:	69eb      	ldr	r3, [r5, #28]
 800ea58:	6862      	ldr	r2, [r4, #4]
 800ea5a:	68db      	ldr	r3, [r3, #12]
 800ea5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea60:	6021      	str	r1, [r4, #0]
 800ea62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea66:	bd70      	pop	{r4, r5, r6, pc}
 800ea68:	08010919 	.word	0x08010919
 800ea6c:	08010930 	.word	0x08010930

0800ea70 <__multadd>:
 800ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea74:	690d      	ldr	r5, [r1, #16]
 800ea76:	4607      	mov	r7, r0
 800ea78:	460c      	mov	r4, r1
 800ea7a:	461e      	mov	r6, r3
 800ea7c:	f101 0c14 	add.w	ip, r1, #20
 800ea80:	2000      	movs	r0, #0
 800ea82:	f8dc 3000 	ldr.w	r3, [ip]
 800ea86:	b299      	uxth	r1, r3
 800ea88:	fb02 6101 	mla	r1, r2, r1, r6
 800ea8c:	0c1e      	lsrs	r6, r3, #16
 800ea8e:	0c0b      	lsrs	r3, r1, #16
 800ea90:	fb02 3306 	mla	r3, r2, r6, r3
 800ea94:	b289      	uxth	r1, r1
 800ea96:	3001      	adds	r0, #1
 800ea98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea9c:	4285      	cmp	r5, r0
 800ea9e:	f84c 1b04 	str.w	r1, [ip], #4
 800eaa2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaa6:	dcec      	bgt.n	800ea82 <__multadd+0x12>
 800eaa8:	b30e      	cbz	r6, 800eaee <__multadd+0x7e>
 800eaaa:	68a3      	ldr	r3, [r4, #8]
 800eaac:	42ab      	cmp	r3, r5
 800eaae:	dc19      	bgt.n	800eae4 <__multadd+0x74>
 800eab0:	6861      	ldr	r1, [r4, #4]
 800eab2:	4638      	mov	r0, r7
 800eab4:	3101      	adds	r1, #1
 800eab6:	f7ff ff79 	bl	800e9ac <_Balloc>
 800eaba:	4680      	mov	r8, r0
 800eabc:	b928      	cbnz	r0, 800eaca <__multadd+0x5a>
 800eabe:	4602      	mov	r2, r0
 800eac0:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf4 <__multadd+0x84>)
 800eac2:	480d      	ldr	r0, [pc, #52]	@ (800eaf8 <__multadd+0x88>)
 800eac4:	21ba      	movs	r1, #186	@ 0xba
 800eac6:	f000 ffeb 	bl	800faa0 <__assert_func>
 800eaca:	6922      	ldr	r2, [r4, #16]
 800eacc:	3202      	adds	r2, #2
 800eace:	f104 010c 	add.w	r1, r4, #12
 800ead2:	0092      	lsls	r2, r2, #2
 800ead4:	300c      	adds	r0, #12
 800ead6:	f7ff fb06 	bl	800e0e6 <memcpy>
 800eada:	4621      	mov	r1, r4
 800eadc:	4638      	mov	r0, r7
 800eade:	f7ff ffa5 	bl	800ea2c <_Bfree>
 800eae2:	4644      	mov	r4, r8
 800eae4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eae8:	3501      	adds	r5, #1
 800eaea:	615e      	str	r6, [r3, #20]
 800eaec:	6125      	str	r5, [r4, #16]
 800eaee:	4620      	mov	r0, r4
 800eaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf4:	080108a8 	.word	0x080108a8
 800eaf8:	08010930 	.word	0x08010930

0800eafc <__s2b>:
 800eafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb00:	460c      	mov	r4, r1
 800eb02:	4615      	mov	r5, r2
 800eb04:	461f      	mov	r7, r3
 800eb06:	2209      	movs	r2, #9
 800eb08:	3308      	adds	r3, #8
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb10:	2100      	movs	r1, #0
 800eb12:	2201      	movs	r2, #1
 800eb14:	429a      	cmp	r2, r3
 800eb16:	db09      	blt.n	800eb2c <__s2b+0x30>
 800eb18:	4630      	mov	r0, r6
 800eb1a:	f7ff ff47 	bl	800e9ac <_Balloc>
 800eb1e:	b940      	cbnz	r0, 800eb32 <__s2b+0x36>
 800eb20:	4602      	mov	r2, r0
 800eb22:	4b19      	ldr	r3, [pc, #100]	@ (800eb88 <__s2b+0x8c>)
 800eb24:	4819      	ldr	r0, [pc, #100]	@ (800eb8c <__s2b+0x90>)
 800eb26:	21d3      	movs	r1, #211	@ 0xd3
 800eb28:	f000 ffba 	bl	800faa0 <__assert_func>
 800eb2c:	0052      	lsls	r2, r2, #1
 800eb2e:	3101      	adds	r1, #1
 800eb30:	e7f0      	b.n	800eb14 <__s2b+0x18>
 800eb32:	9b08      	ldr	r3, [sp, #32]
 800eb34:	6143      	str	r3, [r0, #20]
 800eb36:	2d09      	cmp	r5, #9
 800eb38:	f04f 0301 	mov.w	r3, #1
 800eb3c:	6103      	str	r3, [r0, #16]
 800eb3e:	dd16      	ble.n	800eb6e <__s2b+0x72>
 800eb40:	f104 0909 	add.w	r9, r4, #9
 800eb44:	46c8      	mov	r8, r9
 800eb46:	442c      	add	r4, r5
 800eb48:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb4c:	4601      	mov	r1, r0
 800eb4e:	3b30      	subs	r3, #48	@ 0x30
 800eb50:	220a      	movs	r2, #10
 800eb52:	4630      	mov	r0, r6
 800eb54:	f7ff ff8c 	bl	800ea70 <__multadd>
 800eb58:	45a0      	cmp	r8, r4
 800eb5a:	d1f5      	bne.n	800eb48 <__s2b+0x4c>
 800eb5c:	f1a5 0408 	sub.w	r4, r5, #8
 800eb60:	444c      	add	r4, r9
 800eb62:	1b2d      	subs	r5, r5, r4
 800eb64:	1963      	adds	r3, r4, r5
 800eb66:	42bb      	cmp	r3, r7
 800eb68:	db04      	blt.n	800eb74 <__s2b+0x78>
 800eb6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb6e:	340a      	adds	r4, #10
 800eb70:	2509      	movs	r5, #9
 800eb72:	e7f6      	b.n	800eb62 <__s2b+0x66>
 800eb74:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb78:	4601      	mov	r1, r0
 800eb7a:	3b30      	subs	r3, #48	@ 0x30
 800eb7c:	220a      	movs	r2, #10
 800eb7e:	4630      	mov	r0, r6
 800eb80:	f7ff ff76 	bl	800ea70 <__multadd>
 800eb84:	e7ee      	b.n	800eb64 <__s2b+0x68>
 800eb86:	bf00      	nop
 800eb88:	080108a8 	.word	0x080108a8
 800eb8c:	08010930 	.word	0x08010930

0800eb90 <__hi0bits>:
 800eb90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eb94:	4603      	mov	r3, r0
 800eb96:	bf36      	itet	cc
 800eb98:	0403      	lslcc	r3, r0, #16
 800eb9a:	2000      	movcs	r0, #0
 800eb9c:	2010      	movcc	r0, #16
 800eb9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eba2:	bf3c      	itt	cc
 800eba4:	021b      	lslcc	r3, r3, #8
 800eba6:	3008      	addcc	r0, #8
 800eba8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ebac:	bf3c      	itt	cc
 800ebae:	011b      	lslcc	r3, r3, #4
 800ebb0:	3004      	addcc	r0, #4
 800ebb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ebb6:	bf3c      	itt	cc
 800ebb8:	009b      	lslcc	r3, r3, #2
 800ebba:	3002      	addcc	r0, #2
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	db05      	blt.n	800ebcc <__hi0bits+0x3c>
 800ebc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ebc4:	f100 0001 	add.w	r0, r0, #1
 800ebc8:	bf08      	it	eq
 800ebca:	2020      	moveq	r0, #32
 800ebcc:	4770      	bx	lr

0800ebce <__lo0bits>:
 800ebce:	6803      	ldr	r3, [r0, #0]
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	f013 0007 	ands.w	r0, r3, #7
 800ebd6:	d00b      	beq.n	800ebf0 <__lo0bits+0x22>
 800ebd8:	07d9      	lsls	r1, r3, #31
 800ebda:	d421      	bmi.n	800ec20 <__lo0bits+0x52>
 800ebdc:	0798      	lsls	r0, r3, #30
 800ebde:	bf49      	itett	mi
 800ebe0:	085b      	lsrmi	r3, r3, #1
 800ebe2:	089b      	lsrpl	r3, r3, #2
 800ebe4:	2001      	movmi	r0, #1
 800ebe6:	6013      	strmi	r3, [r2, #0]
 800ebe8:	bf5c      	itt	pl
 800ebea:	6013      	strpl	r3, [r2, #0]
 800ebec:	2002      	movpl	r0, #2
 800ebee:	4770      	bx	lr
 800ebf0:	b299      	uxth	r1, r3
 800ebf2:	b909      	cbnz	r1, 800ebf8 <__lo0bits+0x2a>
 800ebf4:	0c1b      	lsrs	r3, r3, #16
 800ebf6:	2010      	movs	r0, #16
 800ebf8:	b2d9      	uxtb	r1, r3
 800ebfa:	b909      	cbnz	r1, 800ec00 <__lo0bits+0x32>
 800ebfc:	3008      	adds	r0, #8
 800ebfe:	0a1b      	lsrs	r3, r3, #8
 800ec00:	0719      	lsls	r1, r3, #28
 800ec02:	bf04      	itt	eq
 800ec04:	091b      	lsreq	r3, r3, #4
 800ec06:	3004      	addeq	r0, #4
 800ec08:	0799      	lsls	r1, r3, #30
 800ec0a:	bf04      	itt	eq
 800ec0c:	089b      	lsreq	r3, r3, #2
 800ec0e:	3002      	addeq	r0, #2
 800ec10:	07d9      	lsls	r1, r3, #31
 800ec12:	d403      	bmi.n	800ec1c <__lo0bits+0x4e>
 800ec14:	085b      	lsrs	r3, r3, #1
 800ec16:	f100 0001 	add.w	r0, r0, #1
 800ec1a:	d003      	beq.n	800ec24 <__lo0bits+0x56>
 800ec1c:	6013      	str	r3, [r2, #0]
 800ec1e:	4770      	bx	lr
 800ec20:	2000      	movs	r0, #0
 800ec22:	4770      	bx	lr
 800ec24:	2020      	movs	r0, #32
 800ec26:	4770      	bx	lr

0800ec28 <__i2b>:
 800ec28:	b510      	push	{r4, lr}
 800ec2a:	460c      	mov	r4, r1
 800ec2c:	2101      	movs	r1, #1
 800ec2e:	f7ff febd 	bl	800e9ac <_Balloc>
 800ec32:	4602      	mov	r2, r0
 800ec34:	b928      	cbnz	r0, 800ec42 <__i2b+0x1a>
 800ec36:	4b05      	ldr	r3, [pc, #20]	@ (800ec4c <__i2b+0x24>)
 800ec38:	4805      	ldr	r0, [pc, #20]	@ (800ec50 <__i2b+0x28>)
 800ec3a:	f240 1145 	movw	r1, #325	@ 0x145
 800ec3e:	f000 ff2f 	bl	800faa0 <__assert_func>
 800ec42:	2301      	movs	r3, #1
 800ec44:	6144      	str	r4, [r0, #20]
 800ec46:	6103      	str	r3, [r0, #16]
 800ec48:	bd10      	pop	{r4, pc}
 800ec4a:	bf00      	nop
 800ec4c:	080108a8 	.word	0x080108a8
 800ec50:	08010930 	.word	0x08010930

0800ec54 <__multiply>:
 800ec54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec58:	4614      	mov	r4, r2
 800ec5a:	690a      	ldr	r2, [r1, #16]
 800ec5c:	6923      	ldr	r3, [r4, #16]
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	bfa8      	it	ge
 800ec62:	4623      	movge	r3, r4
 800ec64:	460f      	mov	r7, r1
 800ec66:	bfa4      	itt	ge
 800ec68:	460c      	movge	r4, r1
 800ec6a:	461f      	movge	r7, r3
 800ec6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ec70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ec74:	68a3      	ldr	r3, [r4, #8]
 800ec76:	6861      	ldr	r1, [r4, #4]
 800ec78:	eb0a 0609 	add.w	r6, sl, r9
 800ec7c:	42b3      	cmp	r3, r6
 800ec7e:	b085      	sub	sp, #20
 800ec80:	bfb8      	it	lt
 800ec82:	3101      	addlt	r1, #1
 800ec84:	f7ff fe92 	bl	800e9ac <_Balloc>
 800ec88:	b930      	cbnz	r0, 800ec98 <__multiply+0x44>
 800ec8a:	4602      	mov	r2, r0
 800ec8c:	4b44      	ldr	r3, [pc, #272]	@ (800eda0 <__multiply+0x14c>)
 800ec8e:	4845      	ldr	r0, [pc, #276]	@ (800eda4 <__multiply+0x150>)
 800ec90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ec94:	f000 ff04 	bl	800faa0 <__assert_func>
 800ec98:	f100 0514 	add.w	r5, r0, #20
 800ec9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800eca0:	462b      	mov	r3, r5
 800eca2:	2200      	movs	r2, #0
 800eca4:	4543      	cmp	r3, r8
 800eca6:	d321      	bcc.n	800ecec <__multiply+0x98>
 800eca8:	f107 0114 	add.w	r1, r7, #20
 800ecac:	f104 0214 	add.w	r2, r4, #20
 800ecb0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ecb4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ecb8:	9302      	str	r3, [sp, #8]
 800ecba:	1b13      	subs	r3, r2, r4
 800ecbc:	3b15      	subs	r3, #21
 800ecbe:	f023 0303 	bic.w	r3, r3, #3
 800ecc2:	3304      	adds	r3, #4
 800ecc4:	f104 0715 	add.w	r7, r4, #21
 800ecc8:	42ba      	cmp	r2, r7
 800ecca:	bf38      	it	cc
 800eccc:	2304      	movcc	r3, #4
 800ecce:	9301      	str	r3, [sp, #4]
 800ecd0:	9b02      	ldr	r3, [sp, #8]
 800ecd2:	9103      	str	r1, [sp, #12]
 800ecd4:	428b      	cmp	r3, r1
 800ecd6:	d80c      	bhi.n	800ecf2 <__multiply+0x9e>
 800ecd8:	2e00      	cmp	r6, #0
 800ecda:	dd03      	ble.n	800ece4 <__multiply+0x90>
 800ecdc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d05b      	beq.n	800ed9c <__multiply+0x148>
 800ece4:	6106      	str	r6, [r0, #16]
 800ece6:	b005      	add	sp, #20
 800ece8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecec:	f843 2b04 	str.w	r2, [r3], #4
 800ecf0:	e7d8      	b.n	800eca4 <__multiply+0x50>
 800ecf2:	f8b1 a000 	ldrh.w	sl, [r1]
 800ecf6:	f1ba 0f00 	cmp.w	sl, #0
 800ecfa:	d024      	beq.n	800ed46 <__multiply+0xf2>
 800ecfc:	f104 0e14 	add.w	lr, r4, #20
 800ed00:	46a9      	mov	r9, r5
 800ed02:	f04f 0c00 	mov.w	ip, #0
 800ed06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed0a:	f8d9 3000 	ldr.w	r3, [r9]
 800ed0e:	fa1f fb87 	uxth.w	fp, r7
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	fb0a 330b 	mla	r3, sl, fp, r3
 800ed18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ed1c:	f8d9 7000 	ldr.w	r7, [r9]
 800ed20:	4463      	add	r3, ip
 800ed22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed26:	fb0a c70b 	mla	r7, sl, fp, ip
 800ed2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed34:	4572      	cmp	r2, lr
 800ed36:	f849 3b04 	str.w	r3, [r9], #4
 800ed3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ed3e:	d8e2      	bhi.n	800ed06 <__multiply+0xb2>
 800ed40:	9b01      	ldr	r3, [sp, #4]
 800ed42:	f845 c003 	str.w	ip, [r5, r3]
 800ed46:	9b03      	ldr	r3, [sp, #12]
 800ed48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ed4c:	3104      	adds	r1, #4
 800ed4e:	f1b9 0f00 	cmp.w	r9, #0
 800ed52:	d021      	beq.n	800ed98 <__multiply+0x144>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	f104 0c14 	add.w	ip, r4, #20
 800ed5a:	46ae      	mov	lr, r5
 800ed5c:	f04f 0a00 	mov.w	sl, #0
 800ed60:	f8bc b000 	ldrh.w	fp, [ip]
 800ed64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ed68:	fb09 770b 	mla	r7, r9, fp, r7
 800ed6c:	4457      	add	r7, sl
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ed74:	f84e 3b04 	str.w	r3, [lr], #4
 800ed78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ed7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed80:	f8be 3000 	ldrh.w	r3, [lr]
 800ed84:	fb09 330a 	mla	r3, r9, sl, r3
 800ed88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ed8c:	4562      	cmp	r2, ip
 800ed8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ed92:	d8e5      	bhi.n	800ed60 <__multiply+0x10c>
 800ed94:	9f01      	ldr	r7, [sp, #4]
 800ed96:	51eb      	str	r3, [r5, r7]
 800ed98:	3504      	adds	r5, #4
 800ed9a:	e799      	b.n	800ecd0 <__multiply+0x7c>
 800ed9c:	3e01      	subs	r6, #1
 800ed9e:	e79b      	b.n	800ecd8 <__multiply+0x84>
 800eda0:	080108a8 	.word	0x080108a8
 800eda4:	08010930 	.word	0x08010930

0800eda8 <__pow5mult>:
 800eda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edac:	4615      	mov	r5, r2
 800edae:	f012 0203 	ands.w	r2, r2, #3
 800edb2:	4607      	mov	r7, r0
 800edb4:	460e      	mov	r6, r1
 800edb6:	d007      	beq.n	800edc8 <__pow5mult+0x20>
 800edb8:	4c25      	ldr	r4, [pc, #148]	@ (800ee50 <__pow5mult+0xa8>)
 800edba:	3a01      	subs	r2, #1
 800edbc:	2300      	movs	r3, #0
 800edbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edc2:	f7ff fe55 	bl	800ea70 <__multadd>
 800edc6:	4606      	mov	r6, r0
 800edc8:	10ad      	asrs	r5, r5, #2
 800edca:	d03d      	beq.n	800ee48 <__pow5mult+0xa0>
 800edcc:	69fc      	ldr	r4, [r7, #28]
 800edce:	b97c      	cbnz	r4, 800edf0 <__pow5mult+0x48>
 800edd0:	2010      	movs	r0, #16
 800edd2:	f000 fe97 	bl	800fb04 <malloc>
 800edd6:	4602      	mov	r2, r0
 800edd8:	61f8      	str	r0, [r7, #28]
 800edda:	b928      	cbnz	r0, 800ede8 <__pow5mult+0x40>
 800eddc:	4b1d      	ldr	r3, [pc, #116]	@ (800ee54 <__pow5mult+0xac>)
 800edde:	481e      	ldr	r0, [pc, #120]	@ (800ee58 <__pow5mult+0xb0>)
 800ede0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ede4:	f000 fe5c 	bl	800faa0 <__assert_func>
 800ede8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edec:	6004      	str	r4, [r0, #0]
 800edee:	60c4      	str	r4, [r0, #12]
 800edf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800edf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edf8:	b94c      	cbnz	r4, 800ee0e <__pow5mult+0x66>
 800edfa:	f240 2171 	movw	r1, #625	@ 0x271
 800edfe:	4638      	mov	r0, r7
 800ee00:	f7ff ff12 	bl	800ec28 <__i2b>
 800ee04:	2300      	movs	r3, #0
 800ee06:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	6003      	str	r3, [r0, #0]
 800ee0e:	f04f 0900 	mov.w	r9, #0
 800ee12:	07eb      	lsls	r3, r5, #31
 800ee14:	d50a      	bpl.n	800ee2c <__pow5mult+0x84>
 800ee16:	4631      	mov	r1, r6
 800ee18:	4622      	mov	r2, r4
 800ee1a:	4638      	mov	r0, r7
 800ee1c:	f7ff ff1a 	bl	800ec54 <__multiply>
 800ee20:	4631      	mov	r1, r6
 800ee22:	4680      	mov	r8, r0
 800ee24:	4638      	mov	r0, r7
 800ee26:	f7ff fe01 	bl	800ea2c <_Bfree>
 800ee2a:	4646      	mov	r6, r8
 800ee2c:	106d      	asrs	r5, r5, #1
 800ee2e:	d00b      	beq.n	800ee48 <__pow5mult+0xa0>
 800ee30:	6820      	ldr	r0, [r4, #0]
 800ee32:	b938      	cbnz	r0, 800ee44 <__pow5mult+0x9c>
 800ee34:	4622      	mov	r2, r4
 800ee36:	4621      	mov	r1, r4
 800ee38:	4638      	mov	r0, r7
 800ee3a:	f7ff ff0b 	bl	800ec54 <__multiply>
 800ee3e:	6020      	str	r0, [r4, #0]
 800ee40:	f8c0 9000 	str.w	r9, [r0]
 800ee44:	4604      	mov	r4, r0
 800ee46:	e7e4      	b.n	800ee12 <__pow5mult+0x6a>
 800ee48:	4630      	mov	r0, r6
 800ee4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee4e:	bf00      	nop
 800ee50:	0801098c 	.word	0x0801098c
 800ee54:	08010919 	.word	0x08010919
 800ee58:	08010930 	.word	0x08010930

0800ee5c <__lshift>:
 800ee5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee60:	460c      	mov	r4, r1
 800ee62:	6849      	ldr	r1, [r1, #4]
 800ee64:	6923      	ldr	r3, [r4, #16]
 800ee66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee6a:	68a3      	ldr	r3, [r4, #8]
 800ee6c:	4607      	mov	r7, r0
 800ee6e:	4691      	mov	r9, r2
 800ee70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee74:	f108 0601 	add.w	r6, r8, #1
 800ee78:	42b3      	cmp	r3, r6
 800ee7a:	db0b      	blt.n	800ee94 <__lshift+0x38>
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	f7ff fd95 	bl	800e9ac <_Balloc>
 800ee82:	4605      	mov	r5, r0
 800ee84:	b948      	cbnz	r0, 800ee9a <__lshift+0x3e>
 800ee86:	4602      	mov	r2, r0
 800ee88:	4b28      	ldr	r3, [pc, #160]	@ (800ef2c <__lshift+0xd0>)
 800ee8a:	4829      	ldr	r0, [pc, #164]	@ (800ef30 <__lshift+0xd4>)
 800ee8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ee90:	f000 fe06 	bl	800faa0 <__assert_func>
 800ee94:	3101      	adds	r1, #1
 800ee96:	005b      	lsls	r3, r3, #1
 800ee98:	e7ee      	b.n	800ee78 <__lshift+0x1c>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f100 0114 	add.w	r1, r0, #20
 800eea0:	f100 0210 	add.w	r2, r0, #16
 800eea4:	4618      	mov	r0, r3
 800eea6:	4553      	cmp	r3, sl
 800eea8:	db33      	blt.n	800ef12 <__lshift+0xb6>
 800eeaa:	6920      	ldr	r0, [r4, #16]
 800eeac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eeb0:	f104 0314 	add.w	r3, r4, #20
 800eeb4:	f019 091f 	ands.w	r9, r9, #31
 800eeb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eebc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eec0:	d02b      	beq.n	800ef1a <__lshift+0xbe>
 800eec2:	f1c9 0e20 	rsb	lr, r9, #32
 800eec6:	468a      	mov	sl, r1
 800eec8:	2200      	movs	r2, #0
 800eeca:	6818      	ldr	r0, [r3, #0]
 800eecc:	fa00 f009 	lsl.w	r0, r0, r9
 800eed0:	4310      	orrs	r0, r2
 800eed2:	f84a 0b04 	str.w	r0, [sl], #4
 800eed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800eeda:	459c      	cmp	ip, r3
 800eedc:	fa22 f20e 	lsr.w	r2, r2, lr
 800eee0:	d8f3      	bhi.n	800eeca <__lshift+0x6e>
 800eee2:	ebac 0304 	sub.w	r3, ip, r4
 800eee6:	3b15      	subs	r3, #21
 800eee8:	f023 0303 	bic.w	r3, r3, #3
 800eeec:	3304      	adds	r3, #4
 800eeee:	f104 0015 	add.w	r0, r4, #21
 800eef2:	4584      	cmp	ip, r0
 800eef4:	bf38      	it	cc
 800eef6:	2304      	movcc	r3, #4
 800eef8:	50ca      	str	r2, [r1, r3]
 800eefa:	b10a      	cbz	r2, 800ef00 <__lshift+0xa4>
 800eefc:	f108 0602 	add.w	r6, r8, #2
 800ef00:	3e01      	subs	r6, #1
 800ef02:	4638      	mov	r0, r7
 800ef04:	612e      	str	r6, [r5, #16]
 800ef06:	4621      	mov	r1, r4
 800ef08:	f7ff fd90 	bl	800ea2c <_Bfree>
 800ef0c:	4628      	mov	r0, r5
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef12:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef16:	3301      	adds	r3, #1
 800ef18:	e7c5      	b.n	800eea6 <__lshift+0x4a>
 800ef1a:	3904      	subs	r1, #4
 800ef1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef20:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef24:	459c      	cmp	ip, r3
 800ef26:	d8f9      	bhi.n	800ef1c <__lshift+0xc0>
 800ef28:	e7ea      	b.n	800ef00 <__lshift+0xa4>
 800ef2a:	bf00      	nop
 800ef2c:	080108a8 	.word	0x080108a8
 800ef30:	08010930 	.word	0x08010930

0800ef34 <__mcmp>:
 800ef34:	690a      	ldr	r2, [r1, #16]
 800ef36:	4603      	mov	r3, r0
 800ef38:	6900      	ldr	r0, [r0, #16]
 800ef3a:	1a80      	subs	r0, r0, r2
 800ef3c:	b530      	push	{r4, r5, lr}
 800ef3e:	d10e      	bne.n	800ef5e <__mcmp+0x2a>
 800ef40:	3314      	adds	r3, #20
 800ef42:	3114      	adds	r1, #20
 800ef44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ef48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ef4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef54:	4295      	cmp	r5, r2
 800ef56:	d003      	beq.n	800ef60 <__mcmp+0x2c>
 800ef58:	d205      	bcs.n	800ef66 <__mcmp+0x32>
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	bd30      	pop	{r4, r5, pc}
 800ef60:	42a3      	cmp	r3, r4
 800ef62:	d3f3      	bcc.n	800ef4c <__mcmp+0x18>
 800ef64:	e7fb      	b.n	800ef5e <__mcmp+0x2a>
 800ef66:	2001      	movs	r0, #1
 800ef68:	e7f9      	b.n	800ef5e <__mcmp+0x2a>
	...

0800ef6c <__mdiff>:
 800ef6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	4689      	mov	r9, r1
 800ef72:	4606      	mov	r6, r0
 800ef74:	4611      	mov	r1, r2
 800ef76:	4648      	mov	r0, r9
 800ef78:	4614      	mov	r4, r2
 800ef7a:	f7ff ffdb 	bl	800ef34 <__mcmp>
 800ef7e:	1e05      	subs	r5, r0, #0
 800ef80:	d112      	bne.n	800efa8 <__mdiff+0x3c>
 800ef82:	4629      	mov	r1, r5
 800ef84:	4630      	mov	r0, r6
 800ef86:	f7ff fd11 	bl	800e9ac <_Balloc>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	b928      	cbnz	r0, 800ef9a <__mdiff+0x2e>
 800ef8e:	4b3f      	ldr	r3, [pc, #252]	@ (800f08c <__mdiff+0x120>)
 800ef90:	f240 2137 	movw	r1, #567	@ 0x237
 800ef94:	483e      	ldr	r0, [pc, #248]	@ (800f090 <__mdiff+0x124>)
 800ef96:	f000 fd83 	bl	800faa0 <__assert_func>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efa0:	4610      	mov	r0, r2
 800efa2:	b003      	add	sp, #12
 800efa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	bfbc      	itt	lt
 800efaa:	464b      	movlt	r3, r9
 800efac:	46a1      	movlt	r9, r4
 800efae:	4630      	mov	r0, r6
 800efb0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800efb4:	bfba      	itte	lt
 800efb6:	461c      	movlt	r4, r3
 800efb8:	2501      	movlt	r5, #1
 800efba:	2500      	movge	r5, #0
 800efbc:	f7ff fcf6 	bl	800e9ac <_Balloc>
 800efc0:	4602      	mov	r2, r0
 800efc2:	b918      	cbnz	r0, 800efcc <__mdiff+0x60>
 800efc4:	4b31      	ldr	r3, [pc, #196]	@ (800f08c <__mdiff+0x120>)
 800efc6:	f240 2145 	movw	r1, #581	@ 0x245
 800efca:	e7e3      	b.n	800ef94 <__mdiff+0x28>
 800efcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800efd0:	6926      	ldr	r6, [r4, #16]
 800efd2:	60c5      	str	r5, [r0, #12]
 800efd4:	f109 0310 	add.w	r3, r9, #16
 800efd8:	f109 0514 	add.w	r5, r9, #20
 800efdc:	f104 0e14 	add.w	lr, r4, #20
 800efe0:	f100 0b14 	add.w	fp, r0, #20
 800efe4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800efe8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800efec:	9301      	str	r3, [sp, #4]
 800efee:	46d9      	mov	r9, fp
 800eff0:	f04f 0c00 	mov.w	ip, #0
 800eff4:	9b01      	ldr	r3, [sp, #4]
 800eff6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800effa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800effe:	9301      	str	r3, [sp, #4]
 800f000:	fa1f f38a 	uxth.w	r3, sl
 800f004:	4619      	mov	r1, r3
 800f006:	b283      	uxth	r3, r0
 800f008:	1acb      	subs	r3, r1, r3
 800f00a:	0c00      	lsrs	r0, r0, #16
 800f00c:	4463      	add	r3, ip
 800f00e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f012:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f016:	b29b      	uxth	r3, r3
 800f018:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f01c:	4576      	cmp	r6, lr
 800f01e:	f849 3b04 	str.w	r3, [r9], #4
 800f022:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f026:	d8e5      	bhi.n	800eff4 <__mdiff+0x88>
 800f028:	1b33      	subs	r3, r6, r4
 800f02a:	3b15      	subs	r3, #21
 800f02c:	f023 0303 	bic.w	r3, r3, #3
 800f030:	3415      	adds	r4, #21
 800f032:	3304      	adds	r3, #4
 800f034:	42a6      	cmp	r6, r4
 800f036:	bf38      	it	cc
 800f038:	2304      	movcc	r3, #4
 800f03a:	441d      	add	r5, r3
 800f03c:	445b      	add	r3, fp
 800f03e:	461e      	mov	r6, r3
 800f040:	462c      	mov	r4, r5
 800f042:	4544      	cmp	r4, r8
 800f044:	d30e      	bcc.n	800f064 <__mdiff+0xf8>
 800f046:	f108 0103 	add.w	r1, r8, #3
 800f04a:	1b49      	subs	r1, r1, r5
 800f04c:	f021 0103 	bic.w	r1, r1, #3
 800f050:	3d03      	subs	r5, #3
 800f052:	45a8      	cmp	r8, r5
 800f054:	bf38      	it	cc
 800f056:	2100      	movcc	r1, #0
 800f058:	440b      	add	r3, r1
 800f05a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f05e:	b191      	cbz	r1, 800f086 <__mdiff+0x11a>
 800f060:	6117      	str	r7, [r2, #16]
 800f062:	e79d      	b.n	800efa0 <__mdiff+0x34>
 800f064:	f854 1b04 	ldr.w	r1, [r4], #4
 800f068:	46e6      	mov	lr, ip
 800f06a:	0c08      	lsrs	r0, r1, #16
 800f06c:	fa1c fc81 	uxtah	ip, ip, r1
 800f070:	4471      	add	r1, lr
 800f072:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f076:	b289      	uxth	r1, r1
 800f078:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f07c:	f846 1b04 	str.w	r1, [r6], #4
 800f080:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f084:	e7dd      	b.n	800f042 <__mdiff+0xd6>
 800f086:	3f01      	subs	r7, #1
 800f088:	e7e7      	b.n	800f05a <__mdiff+0xee>
 800f08a:	bf00      	nop
 800f08c:	080108a8 	.word	0x080108a8
 800f090:	08010930 	.word	0x08010930

0800f094 <__ulp>:
 800f094:	b082      	sub	sp, #8
 800f096:	ed8d 0b00 	vstr	d0, [sp]
 800f09a:	9a01      	ldr	r2, [sp, #4]
 800f09c:	4b0f      	ldr	r3, [pc, #60]	@ (800f0dc <__ulp+0x48>)
 800f09e:	4013      	ands	r3, r2
 800f0a0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	dc08      	bgt.n	800f0ba <__ulp+0x26>
 800f0a8:	425b      	negs	r3, r3
 800f0aa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f0ae:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f0b2:	da04      	bge.n	800f0be <__ulp+0x2a>
 800f0b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f0b8:	4113      	asrs	r3, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	e008      	b.n	800f0d0 <__ulp+0x3c>
 800f0be:	f1a2 0314 	sub.w	r3, r2, #20
 800f0c2:	2b1e      	cmp	r3, #30
 800f0c4:	bfda      	itte	le
 800f0c6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f0ca:	40da      	lsrle	r2, r3
 800f0cc:	2201      	movgt	r2, #1
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	4619      	mov	r1, r3
 800f0d2:	4610      	mov	r0, r2
 800f0d4:	ec41 0b10 	vmov	d0, r0, r1
 800f0d8:	b002      	add	sp, #8
 800f0da:	4770      	bx	lr
 800f0dc:	7ff00000 	.word	0x7ff00000

0800f0e0 <__b2d>:
 800f0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e4:	6906      	ldr	r6, [r0, #16]
 800f0e6:	f100 0814 	add.w	r8, r0, #20
 800f0ea:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f0ee:	1f37      	subs	r7, r6, #4
 800f0f0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f0f4:	4610      	mov	r0, r2
 800f0f6:	f7ff fd4b 	bl	800eb90 <__hi0bits>
 800f0fa:	f1c0 0320 	rsb	r3, r0, #32
 800f0fe:	280a      	cmp	r0, #10
 800f100:	600b      	str	r3, [r1, #0]
 800f102:	491b      	ldr	r1, [pc, #108]	@ (800f170 <__b2d+0x90>)
 800f104:	dc15      	bgt.n	800f132 <__b2d+0x52>
 800f106:	f1c0 0c0b 	rsb	ip, r0, #11
 800f10a:	fa22 f30c 	lsr.w	r3, r2, ip
 800f10e:	45b8      	cmp	r8, r7
 800f110:	ea43 0501 	orr.w	r5, r3, r1
 800f114:	bf34      	ite	cc
 800f116:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f11a:	2300      	movcs	r3, #0
 800f11c:	3015      	adds	r0, #21
 800f11e:	fa02 f000 	lsl.w	r0, r2, r0
 800f122:	fa23 f30c 	lsr.w	r3, r3, ip
 800f126:	4303      	orrs	r3, r0
 800f128:	461c      	mov	r4, r3
 800f12a:	ec45 4b10 	vmov	d0, r4, r5
 800f12e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f132:	45b8      	cmp	r8, r7
 800f134:	bf3a      	itte	cc
 800f136:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f13a:	f1a6 0708 	subcc.w	r7, r6, #8
 800f13e:	2300      	movcs	r3, #0
 800f140:	380b      	subs	r0, #11
 800f142:	d012      	beq.n	800f16a <__b2d+0x8a>
 800f144:	f1c0 0120 	rsb	r1, r0, #32
 800f148:	fa23 f401 	lsr.w	r4, r3, r1
 800f14c:	4082      	lsls	r2, r0
 800f14e:	4322      	orrs	r2, r4
 800f150:	4547      	cmp	r7, r8
 800f152:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f156:	bf8c      	ite	hi
 800f158:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f15c:	2200      	movls	r2, #0
 800f15e:	4083      	lsls	r3, r0
 800f160:	40ca      	lsrs	r2, r1
 800f162:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f166:	4313      	orrs	r3, r2
 800f168:	e7de      	b.n	800f128 <__b2d+0x48>
 800f16a:	ea42 0501 	orr.w	r5, r2, r1
 800f16e:	e7db      	b.n	800f128 <__b2d+0x48>
 800f170:	3ff00000 	.word	0x3ff00000

0800f174 <__d2b>:
 800f174:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f178:	460f      	mov	r7, r1
 800f17a:	2101      	movs	r1, #1
 800f17c:	ec59 8b10 	vmov	r8, r9, d0
 800f180:	4616      	mov	r6, r2
 800f182:	f7ff fc13 	bl	800e9ac <_Balloc>
 800f186:	4604      	mov	r4, r0
 800f188:	b930      	cbnz	r0, 800f198 <__d2b+0x24>
 800f18a:	4602      	mov	r2, r0
 800f18c:	4b23      	ldr	r3, [pc, #140]	@ (800f21c <__d2b+0xa8>)
 800f18e:	4824      	ldr	r0, [pc, #144]	@ (800f220 <__d2b+0xac>)
 800f190:	f240 310f 	movw	r1, #783	@ 0x30f
 800f194:	f000 fc84 	bl	800faa0 <__assert_func>
 800f198:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f19c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f1a0:	b10d      	cbz	r5, 800f1a6 <__d2b+0x32>
 800f1a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f1a6:	9301      	str	r3, [sp, #4]
 800f1a8:	f1b8 0300 	subs.w	r3, r8, #0
 800f1ac:	d023      	beq.n	800f1f6 <__d2b+0x82>
 800f1ae:	4668      	mov	r0, sp
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	f7ff fd0c 	bl	800ebce <__lo0bits>
 800f1b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f1ba:	b1d0      	cbz	r0, 800f1f2 <__d2b+0x7e>
 800f1bc:	f1c0 0320 	rsb	r3, r0, #32
 800f1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1c4:	430b      	orrs	r3, r1
 800f1c6:	40c2      	lsrs	r2, r0
 800f1c8:	6163      	str	r3, [r4, #20]
 800f1ca:	9201      	str	r2, [sp, #4]
 800f1cc:	9b01      	ldr	r3, [sp, #4]
 800f1ce:	61a3      	str	r3, [r4, #24]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	bf0c      	ite	eq
 800f1d4:	2201      	moveq	r2, #1
 800f1d6:	2202      	movne	r2, #2
 800f1d8:	6122      	str	r2, [r4, #16]
 800f1da:	b1a5      	cbz	r5, 800f206 <__d2b+0x92>
 800f1dc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1e0:	4405      	add	r5, r0
 800f1e2:	603d      	str	r5, [r7, #0]
 800f1e4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f1e8:	6030      	str	r0, [r6, #0]
 800f1ea:	4620      	mov	r0, r4
 800f1ec:	b003      	add	sp, #12
 800f1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1f2:	6161      	str	r1, [r4, #20]
 800f1f4:	e7ea      	b.n	800f1cc <__d2b+0x58>
 800f1f6:	a801      	add	r0, sp, #4
 800f1f8:	f7ff fce9 	bl	800ebce <__lo0bits>
 800f1fc:	9b01      	ldr	r3, [sp, #4]
 800f1fe:	6163      	str	r3, [r4, #20]
 800f200:	3020      	adds	r0, #32
 800f202:	2201      	movs	r2, #1
 800f204:	e7e8      	b.n	800f1d8 <__d2b+0x64>
 800f206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f20a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f20e:	6038      	str	r0, [r7, #0]
 800f210:	6918      	ldr	r0, [r3, #16]
 800f212:	f7ff fcbd 	bl	800eb90 <__hi0bits>
 800f216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f21a:	e7e5      	b.n	800f1e8 <__d2b+0x74>
 800f21c:	080108a8 	.word	0x080108a8
 800f220:	08010930 	.word	0x08010930

0800f224 <__ratio>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	b085      	sub	sp, #20
 800f22a:	e9cd 1000 	strd	r1, r0, [sp]
 800f22e:	a902      	add	r1, sp, #8
 800f230:	f7ff ff56 	bl	800f0e0 <__b2d>
 800f234:	9800      	ldr	r0, [sp, #0]
 800f236:	a903      	add	r1, sp, #12
 800f238:	ec55 4b10 	vmov	r4, r5, d0
 800f23c:	f7ff ff50 	bl	800f0e0 <__b2d>
 800f240:	9b01      	ldr	r3, [sp, #4]
 800f242:	6919      	ldr	r1, [r3, #16]
 800f244:	9b00      	ldr	r3, [sp, #0]
 800f246:	691b      	ldr	r3, [r3, #16]
 800f248:	1ac9      	subs	r1, r1, r3
 800f24a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f24e:	1a9b      	subs	r3, r3, r2
 800f250:	ec5b ab10 	vmov	sl, fp, d0
 800f254:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f258:	2b00      	cmp	r3, #0
 800f25a:	bfce      	itee	gt
 800f25c:	462a      	movgt	r2, r5
 800f25e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f262:	465a      	movle	r2, fp
 800f264:	462f      	mov	r7, r5
 800f266:	46d9      	mov	r9, fp
 800f268:	bfcc      	ite	gt
 800f26a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f26e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f272:	464b      	mov	r3, r9
 800f274:	4652      	mov	r2, sl
 800f276:	4620      	mov	r0, r4
 800f278:	4639      	mov	r1, r7
 800f27a:	f7f1 fb07 	bl	800088c <__aeabi_ddiv>
 800f27e:	ec41 0b10 	vmov	d0, r0, r1
 800f282:	b005      	add	sp, #20
 800f284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f288 <__copybits>:
 800f288:	3901      	subs	r1, #1
 800f28a:	b570      	push	{r4, r5, r6, lr}
 800f28c:	1149      	asrs	r1, r1, #5
 800f28e:	6914      	ldr	r4, [r2, #16]
 800f290:	3101      	adds	r1, #1
 800f292:	f102 0314 	add.w	r3, r2, #20
 800f296:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f29a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f29e:	1f05      	subs	r5, r0, #4
 800f2a0:	42a3      	cmp	r3, r4
 800f2a2:	d30c      	bcc.n	800f2be <__copybits+0x36>
 800f2a4:	1aa3      	subs	r3, r4, r2
 800f2a6:	3b11      	subs	r3, #17
 800f2a8:	f023 0303 	bic.w	r3, r3, #3
 800f2ac:	3211      	adds	r2, #17
 800f2ae:	42a2      	cmp	r2, r4
 800f2b0:	bf88      	it	hi
 800f2b2:	2300      	movhi	r3, #0
 800f2b4:	4418      	add	r0, r3
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4288      	cmp	r0, r1
 800f2ba:	d305      	bcc.n	800f2c8 <__copybits+0x40>
 800f2bc:	bd70      	pop	{r4, r5, r6, pc}
 800f2be:	f853 6b04 	ldr.w	r6, [r3], #4
 800f2c2:	f845 6f04 	str.w	r6, [r5, #4]!
 800f2c6:	e7eb      	b.n	800f2a0 <__copybits+0x18>
 800f2c8:	f840 3b04 	str.w	r3, [r0], #4
 800f2cc:	e7f4      	b.n	800f2b8 <__copybits+0x30>

0800f2ce <__any_on>:
 800f2ce:	f100 0214 	add.w	r2, r0, #20
 800f2d2:	6900      	ldr	r0, [r0, #16]
 800f2d4:	114b      	asrs	r3, r1, #5
 800f2d6:	4298      	cmp	r0, r3
 800f2d8:	b510      	push	{r4, lr}
 800f2da:	db11      	blt.n	800f300 <__any_on+0x32>
 800f2dc:	dd0a      	ble.n	800f2f4 <__any_on+0x26>
 800f2de:	f011 011f 	ands.w	r1, r1, #31
 800f2e2:	d007      	beq.n	800f2f4 <__any_on+0x26>
 800f2e4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f2e8:	fa24 f001 	lsr.w	r0, r4, r1
 800f2ec:	fa00 f101 	lsl.w	r1, r0, r1
 800f2f0:	428c      	cmp	r4, r1
 800f2f2:	d10b      	bne.n	800f30c <__any_on+0x3e>
 800f2f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d803      	bhi.n	800f304 <__any_on+0x36>
 800f2fc:	2000      	movs	r0, #0
 800f2fe:	bd10      	pop	{r4, pc}
 800f300:	4603      	mov	r3, r0
 800f302:	e7f7      	b.n	800f2f4 <__any_on+0x26>
 800f304:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f308:	2900      	cmp	r1, #0
 800f30a:	d0f5      	beq.n	800f2f8 <__any_on+0x2a>
 800f30c:	2001      	movs	r0, #1
 800f30e:	e7f6      	b.n	800f2fe <__any_on+0x30>

0800f310 <__ascii_wctomb>:
 800f310:	4603      	mov	r3, r0
 800f312:	4608      	mov	r0, r1
 800f314:	b141      	cbz	r1, 800f328 <__ascii_wctomb+0x18>
 800f316:	2aff      	cmp	r2, #255	@ 0xff
 800f318:	d904      	bls.n	800f324 <__ascii_wctomb+0x14>
 800f31a:	228a      	movs	r2, #138	@ 0x8a
 800f31c:	601a      	str	r2, [r3, #0]
 800f31e:	f04f 30ff 	mov.w	r0, #4294967295
 800f322:	4770      	bx	lr
 800f324:	700a      	strb	r2, [r1, #0]
 800f326:	2001      	movs	r0, #1
 800f328:	4770      	bx	lr

0800f32a <__ssputs_r>:
 800f32a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f32e:	688e      	ldr	r6, [r1, #8]
 800f330:	461f      	mov	r7, r3
 800f332:	42be      	cmp	r6, r7
 800f334:	680b      	ldr	r3, [r1, #0]
 800f336:	4682      	mov	sl, r0
 800f338:	460c      	mov	r4, r1
 800f33a:	4690      	mov	r8, r2
 800f33c:	d82d      	bhi.n	800f39a <__ssputs_r+0x70>
 800f33e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f342:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f346:	d026      	beq.n	800f396 <__ssputs_r+0x6c>
 800f348:	6965      	ldr	r5, [r4, #20]
 800f34a:	6909      	ldr	r1, [r1, #16]
 800f34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f350:	eba3 0901 	sub.w	r9, r3, r1
 800f354:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f358:	1c7b      	adds	r3, r7, #1
 800f35a:	444b      	add	r3, r9
 800f35c:	106d      	asrs	r5, r5, #1
 800f35e:	429d      	cmp	r5, r3
 800f360:	bf38      	it	cc
 800f362:	461d      	movcc	r5, r3
 800f364:	0553      	lsls	r3, r2, #21
 800f366:	d527      	bpl.n	800f3b8 <__ssputs_r+0x8e>
 800f368:	4629      	mov	r1, r5
 800f36a:	f7ff fa81 	bl	800e870 <_malloc_r>
 800f36e:	4606      	mov	r6, r0
 800f370:	b360      	cbz	r0, 800f3cc <__ssputs_r+0xa2>
 800f372:	6921      	ldr	r1, [r4, #16]
 800f374:	464a      	mov	r2, r9
 800f376:	f7fe feb6 	bl	800e0e6 <memcpy>
 800f37a:	89a3      	ldrh	r3, [r4, #12]
 800f37c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f384:	81a3      	strh	r3, [r4, #12]
 800f386:	6126      	str	r6, [r4, #16]
 800f388:	6165      	str	r5, [r4, #20]
 800f38a:	444e      	add	r6, r9
 800f38c:	eba5 0509 	sub.w	r5, r5, r9
 800f390:	6026      	str	r6, [r4, #0]
 800f392:	60a5      	str	r5, [r4, #8]
 800f394:	463e      	mov	r6, r7
 800f396:	42be      	cmp	r6, r7
 800f398:	d900      	bls.n	800f39c <__ssputs_r+0x72>
 800f39a:	463e      	mov	r6, r7
 800f39c:	6820      	ldr	r0, [r4, #0]
 800f39e:	4632      	mov	r2, r6
 800f3a0:	4641      	mov	r1, r8
 800f3a2:	f000 fb53 	bl	800fa4c <memmove>
 800f3a6:	68a3      	ldr	r3, [r4, #8]
 800f3a8:	1b9b      	subs	r3, r3, r6
 800f3aa:	60a3      	str	r3, [r4, #8]
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	4433      	add	r3, r6
 800f3b0:	6023      	str	r3, [r4, #0]
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3b8:	462a      	mov	r2, r5
 800f3ba:	f000 fbab 	bl	800fb14 <_realloc_r>
 800f3be:	4606      	mov	r6, r0
 800f3c0:	2800      	cmp	r0, #0
 800f3c2:	d1e0      	bne.n	800f386 <__ssputs_r+0x5c>
 800f3c4:	6921      	ldr	r1, [r4, #16]
 800f3c6:	4650      	mov	r0, sl
 800f3c8:	f7fe feac 	bl	800e124 <_free_r>
 800f3cc:	230c      	movs	r3, #12
 800f3ce:	f8ca 3000 	str.w	r3, [sl]
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	f04f 30ff 	mov.w	r0, #4294967295
 800f3de:	e7e9      	b.n	800f3b4 <__ssputs_r+0x8a>

0800f3e0 <_svfiprintf_r>:
 800f3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3e4:	4698      	mov	r8, r3
 800f3e6:	898b      	ldrh	r3, [r1, #12]
 800f3e8:	061b      	lsls	r3, r3, #24
 800f3ea:	b09d      	sub	sp, #116	@ 0x74
 800f3ec:	4607      	mov	r7, r0
 800f3ee:	460d      	mov	r5, r1
 800f3f0:	4614      	mov	r4, r2
 800f3f2:	d510      	bpl.n	800f416 <_svfiprintf_r+0x36>
 800f3f4:	690b      	ldr	r3, [r1, #16]
 800f3f6:	b973      	cbnz	r3, 800f416 <_svfiprintf_r+0x36>
 800f3f8:	2140      	movs	r1, #64	@ 0x40
 800f3fa:	f7ff fa39 	bl	800e870 <_malloc_r>
 800f3fe:	6028      	str	r0, [r5, #0]
 800f400:	6128      	str	r0, [r5, #16]
 800f402:	b930      	cbnz	r0, 800f412 <_svfiprintf_r+0x32>
 800f404:	230c      	movs	r3, #12
 800f406:	603b      	str	r3, [r7, #0]
 800f408:	f04f 30ff 	mov.w	r0, #4294967295
 800f40c:	b01d      	add	sp, #116	@ 0x74
 800f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f412:	2340      	movs	r3, #64	@ 0x40
 800f414:	616b      	str	r3, [r5, #20]
 800f416:	2300      	movs	r3, #0
 800f418:	9309      	str	r3, [sp, #36]	@ 0x24
 800f41a:	2320      	movs	r3, #32
 800f41c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f420:	f8cd 800c 	str.w	r8, [sp, #12]
 800f424:	2330      	movs	r3, #48	@ 0x30
 800f426:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f5c4 <_svfiprintf_r+0x1e4>
 800f42a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f42e:	f04f 0901 	mov.w	r9, #1
 800f432:	4623      	mov	r3, r4
 800f434:	469a      	mov	sl, r3
 800f436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f43a:	b10a      	cbz	r2, 800f440 <_svfiprintf_r+0x60>
 800f43c:	2a25      	cmp	r2, #37	@ 0x25
 800f43e:	d1f9      	bne.n	800f434 <_svfiprintf_r+0x54>
 800f440:	ebba 0b04 	subs.w	fp, sl, r4
 800f444:	d00b      	beq.n	800f45e <_svfiprintf_r+0x7e>
 800f446:	465b      	mov	r3, fp
 800f448:	4622      	mov	r2, r4
 800f44a:	4629      	mov	r1, r5
 800f44c:	4638      	mov	r0, r7
 800f44e:	f7ff ff6c 	bl	800f32a <__ssputs_r>
 800f452:	3001      	adds	r0, #1
 800f454:	f000 80a7 	beq.w	800f5a6 <_svfiprintf_r+0x1c6>
 800f458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f45a:	445a      	add	r2, fp
 800f45c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f45e:	f89a 3000 	ldrb.w	r3, [sl]
 800f462:	2b00      	cmp	r3, #0
 800f464:	f000 809f 	beq.w	800f5a6 <_svfiprintf_r+0x1c6>
 800f468:	2300      	movs	r3, #0
 800f46a:	f04f 32ff 	mov.w	r2, #4294967295
 800f46e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f472:	f10a 0a01 	add.w	sl, sl, #1
 800f476:	9304      	str	r3, [sp, #16]
 800f478:	9307      	str	r3, [sp, #28]
 800f47a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f47e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f480:	4654      	mov	r4, sl
 800f482:	2205      	movs	r2, #5
 800f484:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f488:	484e      	ldr	r0, [pc, #312]	@ (800f5c4 <_svfiprintf_r+0x1e4>)
 800f48a:	f7f0 fec9 	bl	8000220 <memchr>
 800f48e:	9a04      	ldr	r2, [sp, #16]
 800f490:	b9d8      	cbnz	r0, 800f4ca <_svfiprintf_r+0xea>
 800f492:	06d0      	lsls	r0, r2, #27
 800f494:	bf44      	itt	mi
 800f496:	2320      	movmi	r3, #32
 800f498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f49c:	0711      	lsls	r1, r2, #28
 800f49e:	bf44      	itt	mi
 800f4a0:	232b      	movmi	r3, #43	@ 0x2b
 800f4a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800f4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4ac:	d015      	beq.n	800f4da <_svfiprintf_r+0xfa>
 800f4ae:	9a07      	ldr	r2, [sp, #28]
 800f4b0:	4654      	mov	r4, sl
 800f4b2:	2000      	movs	r0, #0
 800f4b4:	f04f 0c0a 	mov.w	ip, #10
 800f4b8:	4621      	mov	r1, r4
 800f4ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4be:	3b30      	subs	r3, #48	@ 0x30
 800f4c0:	2b09      	cmp	r3, #9
 800f4c2:	d94b      	bls.n	800f55c <_svfiprintf_r+0x17c>
 800f4c4:	b1b0      	cbz	r0, 800f4f4 <_svfiprintf_r+0x114>
 800f4c6:	9207      	str	r2, [sp, #28]
 800f4c8:	e014      	b.n	800f4f4 <_svfiprintf_r+0x114>
 800f4ca:	eba0 0308 	sub.w	r3, r0, r8
 800f4ce:	fa09 f303 	lsl.w	r3, r9, r3
 800f4d2:	4313      	orrs	r3, r2
 800f4d4:	9304      	str	r3, [sp, #16]
 800f4d6:	46a2      	mov	sl, r4
 800f4d8:	e7d2      	b.n	800f480 <_svfiprintf_r+0xa0>
 800f4da:	9b03      	ldr	r3, [sp, #12]
 800f4dc:	1d19      	adds	r1, r3, #4
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	9103      	str	r1, [sp, #12]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	bfbb      	ittet	lt
 800f4e6:	425b      	neglt	r3, r3
 800f4e8:	f042 0202 	orrlt.w	r2, r2, #2
 800f4ec:	9307      	strge	r3, [sp, #28]
 800f4ee:	9307      	strlt	r3, [sp, #28]
 800f4f0:	bfb8      	it	lt
 800f4f2:	9204      	strlt	r2, [sp, #16]
 800f4f4:	7823      	ldrb	r3, [r4, #0]
 800f4f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4f8:	d10a      	bne.n	800f510 <_svfiprintf_r+0x130>
 800f4fa:	7863      	ldrb	r3, [r4, #1]
 800f4fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4fe:	d132      	bne.n	800f566 <_svfiprintf_r+0x186>
 800f500:	9b03      	ldr	r3, [sp, #12]
 800f502:	1d1a      	adds	r2, r3, #4
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	9203      	str	r2, [sp, #12]
 800f508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f50c:	3402      	adds	r4, #2
 800f50e:	9305      	str	r3, [sp, #20]
 800f510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f5d4 <_svfiprintf_r+0x1f4>
 800f514:	7821      	ldrb	r1, [r4, #0]
 800f516:	2203      	movs	r2, #3
 800f518:	4650      	mov	r0, sl
 800f51a:	f7f0 fe81 	bl	8000220 <memchr>
 800f51e:	b138      	cbz	r0, 800f530 <_svfiprintf_r+0x150>
 800f520:	9b04      	ldr	r3, [sp, #16]
 800f522:	eba0 000a 	sub.w	r0, r0, sl
 800f526:	2240      	movs	r2, #64	@ 0x40
 800f528:	4082      	lsls	r2, r0
 800f52a:	4313      	orrs	r3, r2
 800f52c:	3401      	adds	r4, #1
 800f52e:	9304      	str	r3, [sp, #16]
 800f530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f534:	4824      	ldr	r0, [pc, #144]	@ (800f5c8 <_svfiprintf_r+0x1e8>)
 800f536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f53a:	2206      	movs	r2, #6
 800f53c:	f7f0 fe70 	bl	8000220 <memchr>
 800f540:	2800      	cmp	r0, #0
 800f542:	d036      	beq.n	800f5b2 <_svfiprintf_r+0x1d2>
 800f544:	4b21      	ldr	r3, [pc, #132]	@ (800f5cc <_svfiprintf_r+0x1ec>)
 800f546:	bb1b      	cbnz	r3, 800f590 <_svfiprintf_r+0x1b0>
 800f548:	9b03      	ldr	r3, [sp, #12]
 800f54a:	3307      	adds	r3, #7
 800f54c:	f023 0307 	bic.w	r3, r3, #7
 800f550:	3308      	adds	r3, #8
 800f552:	9303      	str	r3, [sp, #12]
 800f554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f556:	4433      	add	r3, r6
 800f558:	9309      	str	r3, [sp, #36]	@ 0x24
 800f55a:	e76a      	b.n	800f432 <_svfiprintf_r+0x52>
 800f55c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f560:	460c      	mov	r4, r1
 800f562:	2001      	movs	r0, #1
 800f564:	e7a8      	b.n	800f4b8 <_svfiprintf_r+0xd8>
 800f566:	2300      	movs	r3, #0
 800f568:	3401      	adds	r4, #1
 800f56a:	9305      	str	r3, [sp, #20]
 800f56c:	4619      	mov	r1, r3
 800f56e:	f04f 0c0a 	mov.w	ip, #10
 800f572:	4620      	mov	r0, r4
 800f574:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f578:	3a30      	subs	r2, #48	@ 0x30
 800f57a:	2a09      	cmp	r2, #9
 800f57c:	d903      	bls.n	800f586 <_svfiprintf_r+0x1a6>
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d0c6      	beq.n	800f510 <_svfiprintf_r+0x130>
 800f582:	9105      	str	r1, [sp, #20]
 800f584:	e7c4      	b.n	800f510 <_svfiprintf_r+0x130>
 800f586:	fb0c 2101 	mla	r1, ip, r1, r2
 800f58a:	4604      	mov	r4, r0
 800f58c:	2301      	movs	r3, #1
 800f58e:	e7f0      	b.n	800f572 <_svfiprintf_r+0x192>
 800f590:	ab03      	add	r3, sp, #12
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	462a      	mov	r2, r5
 800f596:	4b0e      	ldr	r3, [pc, #56]	@ (800f5d0 <_svfiprintf_r+0x1f0>)
 800f598:	a904      	add	r1, sp, #16
 800f59a:	4638      	mov	r0, r7
 800f59c:	f3af 8000 	nop.w
 800f5a0:	1c42      	adds	r2, r0, #1
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	d1d6      	bne.n	800f554 <_svfiprintf_r+0x174>
 800f5a6:	89ab      	ldrh	r3, [r5, #12]
 800f5a8:	065b      	lsls	r3, r3, #25
 800f5aa:	f53f af2d 	bmi.w	800f408 <_svfiprintf_r+0x28>
 800f5ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5b0:	e72c      	b.n	800f40c <_svfiprintf_r+0x2c>
 800f5b2:	ab03      	add	r3, sp, #12
 800f5b4:	9300      	str	r3, [sp, #0]
 800f5b6:	462a      	mov	r2, r5
 800f5b8:	4b05      	ldr	r3, [pc, #20]	@ (800f5d0 <_svfiprintf_r+0x1f0>)
 800f5ba:	a904      	add	r1, sp, #16
 800f5bc:	4638      	mov	r0, r7
 800f5be:	f000 f879 	bl	800f6b4 <_printf_i>
 800f5c2:	e7ed      	b.n	800f5a0 <_svfiprintf_r+0x1c0>
 800f5c4:	08010b89 	.word	0x08010b89
 800f5c8:	08010b93 	.word	0x08010b93
 800f5cc:	00000000 	.word	0x00000000
 800f5d0:	0800f32b 	.word	0x0800f32b
 800f5d4:	08010b8f 	.word	0x08010b8f

0800f5d8 <_printf_common>:
 800f5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5dc:	4616      	mov	r6, r2
 800f5de:	4698      	mov	r8, r3
 800f5e0:	688a      	ldr	r2, [r1, #8]
 800f5e2:	690b      	ldr	r3, [r1, #16]
 800f5e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	bfb8      	it	lt
 800f5ec:	4613      	movlt	r3, r2
 800f5ee:	6033      	str	r3, [r6, #0]
 800f5f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f5f4:	4607      	mov	r7, r0
 800f5f6:	460c      	mov	r4, r1
 800f5f8:	b10a      	cbz	r2, 800f5fe <_printf_common+0x26>
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	6033      	str	r3, [r6, #0]
 800f5fe:	6823      	ldr	r3, [r4, #0]
 800f600:	0699      	lsls	r1, r3, #26
 800f602:	bf42      	ittt	mi
 800f604:	6833      	ldrmi	r3, [r6, #0]
 800f606:	3302      	addmi	r3, #2
 800f608:	6033      	strmi	r3, [r6, #0]
 800f60a:	6825      	ldr	r5, [r4, #0]
 800f60c:	f015 0506 	ands.w	r5, r5, #6
 800f610:	d106      	bne.n	800f620 <_printf_common+0x48>
 800f612:	f104 0a19 	add.w	sl, r4, #25
 800f616:	68e3      	ldr	r3, [r4, #12]
 800f618:	6832      	ldr	r2, [r6, #0]
 800f61a:	1a9b      	subs	r3, r3, r2
 800f61c:	42ab      	cmp	r3, r5
 800f61e:	dc26      	bgt.n	800f66e <_printf_common+0x96>
 800f620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f624:	6822      	ldr	r2, [r4, #0]
 800f626:	3b00      	subs	r3, #0
 800f628:	bf18      	it	ne
 800f62a:	2301      	movne	r3, #1
 800f62c:	0692      	lsls	r2, r2, #26
 800f62e:	d42b      	bmi.n	800f688 <_printf_common+0xb0>
 800f630:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f634:	4641      	mov	r1, r8
 800f636:	4638      	mov	r0, r7
 800f638:	47c8      	blx	r9
 800f63a:	3001      	adds	r0, #1
 800f63c:	d01e      	beq.n	800f67c <_printf_common+0xa4>
 800f63e:	6823      	ldr	r3, [r4, #0]
 800f640:	6922      	ldr	r2, [r4, #16]
 800f642:	f003 0306 	and.w	r3, r3, #6
 800f646:	2b04      	cmp	r3, #4
 800f648:	bf02      	ittt	eq
 800f64a:	68e5      	ldreq	r5, [r4, #12]
 800f64c:	6833      	ldreq	r3, [r6, #0]
 800f64e:	1aed      	subeq	r5, r5, r3
 800f650:	68a3      	ldr	r3, [r4, #8]
 800f652:	bf0c      	ite	eq
 800f654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f658:	2500      	movne	r5, #0
 800f65a:	4293      	cmp	r3, r2
 800f65c:	bfc4      	itt	gt
 800f65e:	1a9b      	subgt	r3, r3, r2
 800f660:	18ed      	addgt	r5, r5, r3
 800f662:	2600      	movs	r6, #0
 800f664:	341a      	adds	r4, #26
 800f666:	42b5      	cmp	r5, r6
 800f668:	d11a      	bne.n	800f6a0 <_printf_common+0xc8>
 800f66a:	2000      	movs	r0, #0
 800f66c:	e008      	b.n	800f680 <_printf_common+0xa8>
 800f66e:	2301      	movs	r3, #1
 800f670:	4652      	mov	r2, sl
 800f672:	4641      	mov	r1, r8
 800f674:	4638      	mov	r0, r7
 800f676:	47c8      	blx	r9
 800f678:	3001      	adds	r0, #1
 800f67a:	d103      	bne.n	800f684 <_printf_common+0xac>
 800f67c:	f04f 30ff 	mov.w	r0, #4294967295
 800f680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f684:	3501      	adds	r5, #1
 800f686:	e7c6      	b.n	800f616 <_printf_common+0x3e>
 800f688:	18e1      	adds	r1, r4, r3
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	2030      	movs	r0, #48	@ 0x30
 800f68e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f692:	4422      	add	r2, r4
 800f694:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f698:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f69c:	3302      	adds	r3, #2
 800f69e:	e7c7      	b.n	800f630 <_printf_common+0x58>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	4641      	mov	r1, r8
 800f6a6:	4638      	mov	r0, r7
 800f6a8:	47c8      	blx	r9
 800f6aa:	3001      	adds	r0, #1
 800f6ac:	d0e6      	beq.n	800f67c <_printf_common+0xa4>
 800f6ae:	3601      	adds	r6, #1
 800f6b0:	e7d9      	b.n	800f666 <_printf_common+0x8e>
	...

0800f6b4 <_printf_i>:
 800f6b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f6b8:	7e0f      	ldrb	r7, [r1, #24]
 800f6ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f6bc:	2f78      	cmp	r7, #120	@ 0x78
 800f6be:	4691      	mov	r9, r2
 800f6c0:	4680      	mov	r8, r0
 800f6c2:	460c      	mov	r4, r1
 800f6c4:	469a      	mov	sl, r3
 800f6c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f6ca:	d807      	bhi.n	800f6dc <_printf_i+0x28>
 800f6cc:	2f62      	cmp	r7, #98	@ 0x62
 800f6ce:	d80a      	bhi.n	800f6e6 <_printf_i+0x32>
 800f6d0:	2f00      	cmp	r7, #0
 800f6d2:	f000 80d2 	beq.w	800f87a <_printf_i+0x1c6>
 800f6d6:	2f58      	cmp	r7, #88	@ 0x58
 800f6d8:	f000 80b9 	beq.w	800f84e <_printf_i+0x19a>
 800f6dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f6e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f6e4:	e03a      	b.n	800f75c <_printf_i+0xa8>
 800f6e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f6ea:	2b15      	cmp	r3, #21
 800f6ec:	d8f6      	bhi.n	800f6dc <_printf_i+0x28>
 800f6ee:	a101      	add	r1, pc, #4	@ (adr r1, 800f6f4 <_printf_i+0x40>)
 800f6f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f6f4:	0800f74d 	.word	0x0800f74d
 800f6f8:	0800f761 	.word	0x0800f761
 800f6fc:	0800f6dd 	.word	0x0800f6dd
 800f700:	0800f6dd 	.word	0x0800f6dd
 800f704:	0800f6dd 	.word	0x0800f6dd
 800f708:	0800f6dd 	.word	0x0800f6dd
 800f70c:	0800f761 	.word	0x0800f761
 800f710:	0800f6dd 	.word	0x0800f6dd
 800f714:	0800f6dd 	.word	0x0800f6dd
 800f718:	0800f6dd 	.word	0x0800f6dd
 800f71c:	0800f6dd 	.word	0x0800f6dd
 800f720:	0800f861 	.word	0x0800f861
 800f724:	0800f78b 	.word	0x0800f78b
 800f728:	0800f81b 	.word	0x0800f81b
 800f72c:	0800f6dd 	.word	0x0800f6dd
 800f730:	0800f6dd 	.word	0x0800f6dd
 800f734:	0800f883 	.word	0x0800f883
 800f738:	0800f6dd 	.word	0x0800f6dd
 800f73c:	0800f78b 	.word	0x0800f78b
 800f740:	0800f6dd 	.word	0x0800f6dd
 800f744:	0800f6dd 	.word	0x0800f6dd
 800f748:	0800f823 	.word	0x0800f823
 800f74c:	6833      	ldr	r3, [r6, #0]
 800f74e:	1d1a      	adds	r2, r3, #4
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	6032      	str	r2, [r6, #0]
 800f754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f758:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f75c:	2301      	movs	r3, #1
 800f75e:	e09d      	b.n	800f89c <_printf_i+0x1e8>
 800f760:	6833      	ldr	r3, [r6, #0]
 800f762:	6820      	ldr	r0, [r4, #0]
 800f764:	1d19      	adds	r1, r3, #4
 800f766:	6031      	str	r1, [r6, #0]
 800f768:	0606      	lsls	r6, r0, #24
 800f76a:	d501      	bpl.n	800f770 <_printf_i+0xbc>
 800f76c:	681d      	ldr	r5, [r3, #0]
 800f76e:	e003      	b.n	800f778 <_printf_i+0xc4>
 800f770:	0645      	lsls	r5, r0, #25
 800f772:	d5fb      	bpl.n	800f76c <_printf_i+0xb8>
 800f774:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f778:	2d00      	cmp	r5, #0
 800f77a:	da03      	bge.n	800f784 <_printf_i+0xd0>
 800f77c:	232d      	movs	r3, #45	@ 0x2d
 800f77e:	426d      	negs	r5, r5
 800f780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f784:	4859      	ldr	r0, [pc, #356]	@ (800f8ec <_printf_i+0x238>)
 800f786:	230a      	movs	r3, #10
 800f788:	e011      	b.n	800f7ae <_printf_i+0xfa>
 800f78a:	6821      	ldr	r1, [r4, #0]
 800f78c:	6833      	ldr	r3, [r6, #0]
 800f78e:	0608      	lsls	r0, r1, #24
 800f790:	f853 5b04 	ldr.w	r5, [r3], #4
 800f794:	d402      	bmi.n	800f79c <_printf_i+0xe8>
 800f796:	0649      	lsls	r1, r1, #25
 800f798:	bf48      	it	mi
 800f79a:	b2ad      	uxthmi	r5, r5
 800f79c:	2f6f      	cmp	r7, #111	@ 0x6f
 800f79e:	4853      	ldr	r0, [pc, #332]	@ (800f8ec <_printf_i+0x238>)
 800f7a0:	6033      	str	r3, [r6, #0]
 800f7a2:	bf14      	ite	ne
 800f7a4:	230a      	movne	r3, #10
 800f7a6:	2308      	moveq	r3, #8
 800f7a8:	2100      	movs	r1, #0
 800f7aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f7ae:	6866      	ldr	r6, [r4, #4]
 800f7b0:	60a6      	str	r6, [r4, #8]
 800f7b2:	2e00      	cmp	r6, #0
 800f7b4:	bfa2      	ittt	ge
 800f7b6:	6821      	ldrge	r1, [r4, #0]
 800f7b8:	f021 0104 	bicge.w	r1, r1, #4
 800f7bc:	6021      	strge	r1, [r4, #0]
 800f7be:	b90d      	cbnz	r5, 800f7c4 <_printf_i+0x110>
 800f7c0:	2e00      	cmp	r6, #0
 800f7c2:	d04b      	beq.n	800f85c <_printf_i+0x1a8>
 800f7c4:	4616      	mov	r6, r2
 800f7c6:	fbb5 f1f3 	udiv	r1, r5, r3
 800f7ca:	fb03 5711 	mls	r7, r3, r1, r5
 800f7ce:	5dc7      	ldrb	r7, [r0, r7]
 800f7d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f7d4:	462f      	mov	r7, r5
 800f7d6:	42bb      	cmp	r3, r7
 800f7d8:	460d      	mov	r5, r1
 800f7da:	d9f4      	bls.n	800f7c6 <_printf_i+0x112>
 800f7dc:	2b08      	cmp	r3, #8
 800f7de:	d10b      	bne.n	800f7f8 <_printf_i+0x144>
 800f7e0:	6823      	ldr	r3, [r4, #0]
 800f7e2:	07df      	lsls	r7, r3, #31
 800f7e4:	d508      	bpl.n	800f7f8 <_printf_i+0x144>
 800f7e6:	6923      	ldr	r3, [r4, #16]
 800f7e8:	6861      	ldr	r1, [r4, #4]
 800f7ea:	4299      	cmp	r1, r3
 800f7ec:	bfde      	ittt	le
 800f7ee:	2330      	movle	r3, #48	@ 0x30
 800f7f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f7f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f7f8:	1b92      	subs	r2, r2, r6
 800f7fa:	6122      	str	r2, [r4, #16]
 800f7fc:	f8cd a000 	str.w	sl, [sp]
 800f800:	464b      	mov	r3, r9
 800f802:	aa03      	add	r2, sp, #12
 800f804:	4621      	mov	r1, r4
 800f806:	4640      	mov	r0, r8
 800f808:	f7ff fee6 	bl	800f5d8 <_printf_common>
 800f80c:	3001      	adds	r0, #1
 800f80e:	d14a      	bne.n	800f8a6 <_printf_i+0x1f2>
 800f810:	f04f 30ff 	mov.w	r0, #4294967295
 800f814:	b004      	add	sp, #16
 800f816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	f043 0320 	orr.w	r3, r3, #32
 800f820:	6023      	str	r3, [r4, #0]
 800f822:	4833      	ldr	r0, [pc, #204]	@ (800f8f0 <_printf_i+0x23c>)
 800f824:	2778      	movs	r7, #120	@ 0x78
 800f826:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f82a:	6823      	ldr	r3, [r4, #0]
 800f82c:	6831      	ldr	r1, [r6, #0]
 800f82e:	061f      	lsls	r7, r3, #24
 800f830:	f851 5b04 	ldr.w	r5, [r1], #4
 800f834:	d402      	bmi.n	800f83c <_printf_i+0x188>
 800f836:	065f      	lsls	r7, r3, #25
 800f838:	bf48      	it	mi
 800f83a:	b2ad      	uxthmi	r5, r5
 800f83c:	6031      	str	r1, [r6, #0]
 800f83e:	07d9      	lsls	r1, r3, #31
 800f840:	bf44      	itt	mi
 800f842:	f043 0320 	orrmi.w	r3, r3, #32
 800f846:	6023      	strmi	r3, [r4, #0]
 800f848:	b11d      	cbz	r5, 800f852 <_printf_i+0x19e>
 800f84a:	2310      	movs	r3, #16
 800f84c:	e7ac      	b.n	800f7a8 <_printf_i+0xf4>
 800f84e:	4827      	ldr	r0, [pc, #156]	@ (800f8ec <_printf_i+0x238>)
 800f850:	e7e9      	b.n	800f826 <_printf_i+0x172>
 800f852:	6823      	ldr	r3, [r4, #0]
 800f854:	f023 0320 	bic.w	r3, r3, #32
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	e7f6      	b.n	800f84a <_printf_i+0x196>
 800f85c:	4616      	mov	r6, r2
 800f85e:	e7bd      	b.n	800f7dc <_printf_i+0x128>
 800f860:	6833      	ldr	r3, [r6, #0]
 800f862:	6825      	ldr	r5, [r4, #0]
 800f864:	6961      	ldr	r1, [r4, #20]
 800f866:	1d18      	adds	r0, r3, #4
 800f868:	6030      	str	r0, [r6, #0]
 800f86a:	062e      	lsls	r6, r5, #24
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	d501      	bpl.n	800f874 <_printf_i+0x1c0>
 800f870:	6019      	str	r1, [r3, #0]
 800f872:	e002      	b.n	800f87a <_printf_i+0x1c6>
 800f874:	0668      	lsls	r0, r5, #25
 800f876:	d5fb      	bpl.n	800f870 <_printf_i+0x1bc>
 800f878:	8019      	strh	r1, [r3, #0]
 800f87a:	2300      	movs	r3, #0
 800f87c:	6123      	str	r3, [r4, #16]
 800f87e:	4616      	mov	r6, r2
 800f880:	e7bc      	b.n	800f7fc <_printf_i+0x148>
 800f882:	6833      	ldr	r3, [r6, #0]
 800f884:	1d1a      	adds	r2, r3, #4
 800f886:	6032      	str	r2, [r6, #0]
 800f888:	681e      	ldr	r6, [r3, #0]
 800f88a:	6862      	ldr	r2, [r4, #4]
 800f88c:	2100      	movs	r1, #0
 800f88e:	4630      	mov	r0, r6
 800f890:	f7f0 fcc6 	bl	8000220 <memchr>
 800f894:	b108      	cbz	r0, 800f89a <_printf_i+0x1e6>
 800f896:	1b80      	subs	r0, r0, r6
 800f898:	6060      	str	r0, [r4, #4]
 800f89a:	6863      	ldr	r3, [r4, #4]
 800f89c:	6123      	str	r3, [r4, #16]
 800f89e:	2300      	movs	r3, #0
 800f8a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f8a4:	e7aa      	b.n	800f7fc <_printf_i+0x148>
 800f8a6:	6923      	ldr	r3, [r4, #16]
 800f8a8:	4632      	mov	r2, r6
 800f8aa:	4649      	mov	r1, r9
 800f8ac:	4640      	mov	r0, r8
 800f8ae:	47d0      	blx	sl
 800f8b0:	3001      	adds	r0, #1
 800f8b2:	d0ad      	beq.n	800f810 <_printf_i+0x15c>
 800f8b4:	6823      	ldr	r3, [r4, #0]
 800f8b6:	079b      	lsls	r3, r3, #30
 800f8b8:	d413      	bmi.n	800f8e2 <_printf_i+0x22e>
 800f8ba:	68e0      	ldr	r0, [r4, #12]
 800f8bc:	9b03      	ldr	r3, [sp, #12]
 800f8be:	4298      	cmp	r0, r3
 800f8c0:	bfb8      	it	lt
 800f8c2:	4618      	movlt	r0, r3
 800f8c4:	e7a6      	b.n	800f814 <_printf_i+0x160>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	4632      	mov	r2, r6
 800f8ca:	4649      	mov	r1, r9
 800f8cc:	4640      	mov	r0, r8
 800f8ce:	47d0      	blx	sl
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d09d      	beq.n	800f810 <_printf_i+0x15c>
 800f8d4:	3501      	adds	r5, #1
 800f8d6:	68e3      	ldr	r3, [r4, #12]
 800f8d8:	9903      	ldr	r1, [sp, #12]
 800f8da:	1a5b      	subs	r3, r3, r1
 800f8dc:	42ab      	cmp	r3, r5
 800f8de:	dcf2      	bgt.n	800f8c6 <_printf_i+0x212>
 800f8e0:	e7eb      	b.n	800f8ba <_printf_i+0x206>
 800f8e2:	2500      	movs	r5, #0
 800f8e4:	f104 0619 	add.w	r6, r4, #25
 800f8e8:	e7f5      	b.n	800f8d6 <_printf_i+0x222>
 800f8ea:	bf00      	nop
 800f8ec:	08010b9a 	.word	0x08010b9a
 800f8f0:	08010bab 	.word	0x08010bab

0800f8f4 <__sflush_r>:
 800f8f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	0716      	lsls	r6, r2, #28
 800f8fe:	4605      	mov	r5, r0
 800f900:	460c      	mov	r4, r1
 800f902:	d454      	bmi.n	800f9ae <__sflush_r+0xba>
 800f904:	684b      	ldr	r3, [r1, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	dc02      	bgt.n	800f910 <__sflush_r+0x1c>
 800f90a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dd48      	ble.n	800f9a2 <__sflush_r+0xae>
 800f910:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f912:	2e00      	cmp	r6, #0
 800f914:	d045      	beq.n	800f9a2 <__sflush_r+0xae>
 800f916:	2300      	movs	r3, #0
 800f918:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f91c:	682f      	ldr	r7, [r5, #0]
 800f91e:	6a21      	ldr	r1, [r4, #32]
 800f920:	602b      	str	r3, [r5, #0]
 800f922:	d030      	beq.n	800f986 <__sflush_r+0x92>
 800f924:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f926:	89a3      	ldrh	r3, [r4, #12]
 800f928:	0759      	lsls	r1, r3, #29
 800f92a:	d505      	bpl.n	800f938 <__sflush_r+0x44>
 800f92c:	6863      	ldr	r3, [r4, #4]
 800f92e:	1ad2      	subs	r2, r2, r3
 800f930:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f932:	b10b      	cbz	r3, 800f938 <__sflush_r+0x44>
 800f934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f936:	1ad2      	subs	r2, r2, r3
 800f938:	2300      	movs	r3, #0
 800f93a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f93c:	6a21      	ldr	r1, [r4, #32]
 800f93e:	4628      	mov	r0, r5
 800f940:	47b0      	blx	r6
 800f942:	1c43      	adds	r3, r0, #1
 800f944:	89a3      	ldrh	r3, [r4, #12]
 800f946:	d106      	bne.n	800f956 <__sflush_r+0x62>
 800f948:	6829      	ldr	r1, [r5, #0]
 800f94a:	291d      	cmp	r1, #29
 800f94c:	d82b      	bhi.n	800f9a6 <__sflush_r+0xb2>
 800f94e:	4a2a      	ldr	r2, [pc, #168]	@ (800f9f8 <__sflush_r+0x104>)
 800f950:	410a      	asrs	r2, r1
 800f952:	07d6      	lsls	r6, r2, #31
 800f954:	d427      	bmi.n	800f9a6 <__sflush_r+0xb2>
 800f956:	2200      	movs	r2, #0
 800f958:	6062      	str	r2, [r4, #4]
 800f95a:	04d9      	lsls	r1, r3, #19
 800f95c:	6922      	ldr	r2, [r4, #16]
 800f95e:	6022      	str	r2, [r4, #0]
 800f960:	d504      	bpl.n	800f96c <__sflush_r+0x78>
 800f962:	1c42      	adds	r2, r0, #1
 800f964:	d101      	bne.n	800f96a <__sflush_r+0x76>
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	b903      	cbnz	r3, 800f96c <__sflush_r+0x78>
 800f96a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f96e:	602f      	str	r7, [r5, #0]
 800f970:	b1b9      	cbz	r1, 800f9a2 <__sflush_r+0xae>
 800f972:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f976:	4299      	cmp	r1, r3
 800f978:	d002      	beq.n	800f980 <__sflush_r+0x8c>
 800f97a:	4628      	mov	r0, r5
 800f97c:	f7fe fbd2 	bl	800e124 <_free_r>
 800f980:	2300      	movs	r3, #0
 800f982:	6363      	str	r3, [r4, #52]	@ 0x34
 800f984:	e00d      	b.n	800f9a2 <__sflush_r+0xae>
 800f986:	2301      	movs	r3, #1
 800f988:	4628      	mov	r0, r5
 800f98a:	47b0      	blx	r6
 800f98c:	4602      	mov	r2, r0
 800f98e:	1c50      	adds	r0, r2, #1
 800f990:	d1c9      	bne.n	800f926 <__sflush_r+0x32>
 800f992:	682b      	ldr	r3, [r5, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d0c6      	beq.n	800f926 <__sflush_r+0x32>
 800f998:	2b1d      	cmp	r3, #29
 800f99a:	d001      	beq.n	800f9a0 <__sflush_r+0xac>
 800f99c:	2b16      	cmp	r3, #22
 800f99e:	d11e      	bne.n	800f9de <__sflush_r+0xea>
 800f9a0:	602f      	str	r7, [r5, #0]
 800f9a2:	2000      	movs	r0, #0
 800f9a4:	e022      	b.n	800f9ec <__sflush_r+0xf8>
 800f9a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9aa:	b21b      	sxth	r3, r3
 800f9ac:	e01b      	b.n	800f9e6 <__sflush_r+0xf2>
 800f9ae:	690f      	ldr	r7, [r1, #16]
 800f9b0:	2f00      	cmp	r7, #0
 800f9b2:	d0f6      	beq.n	800f9a2 <__sflush_r+0xae>
 800f9b4:	0793      	lsls	r3, r2, #30
 800f9b6:	680e      	ldr	r6, [r1, #0]
 800f9b8:	bf08      	it	eq
 800f9ba:	694b      	ldreq	r3, [r1, #20]
 800f9bc:	600f      	str	r7, [r1, #0]
 800f9be:	bf18      	it	ne
 800f9c0:	2300      	movne	r3, #0
 800f9c2:	eba6 0807 	sub.w	r8, r6, r7
 800f9c6:	608b      	str	r3, [r1, #8]
 800f9c8:	f1b8 0f00 	cmp.w	r8, #0
 800f9cc:	dde9      	ble.n	800f9a2 <__sflush_r+0xae>
 800f9ce:	6a21      	ldr	r1, [r4, #32]
 800f9d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f9d2:	4643      	mov	r3, r8
 800f9d4:	463a      	mov	r2, r7
 800f9d6:	4628      	mov	r0, r5
 800f9d8:	47b0      	blx	r6
 800f9da:	2800      	cmp	r0, #0
 800f9dc:	dc08      	bgt.n	800f9f0 <__sflush_r+0xfc>
 800f9de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9e6:	81a3      	strh	r3, [r4, #12]
 800f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f0:	4407      	add	r7, r0
 800f9f2:	eba8 0800 	sub.w	r8, r8, r0
 800f9f6:	e7e7      	b.n	800f9c8 <__sflush_r+0xd4>
 800f9f8:	dfbffffe 	.word	0xdfbffffe

0800f9fc <_fflush_r>:
 800f9fc:	b538      	push	{r3, r4, r5, lr}
 800f9fe:	690b      	ldr	r3, [r1, #16]
 800fa00:	4605      	mov	r5, r0
 800fa02:	460c      	mov	r4, r1
 800fa04:	b913      	cbnz	r3, 800fa0c <_fflush_r+0x10>
 800fa06:	2500      	movs	r5, #0
 800fa08:	4628      	mov	r0, r5
 800fa0a:	bd38      	pop	{r3, r4, r5, pc}
 800fa0c:	b118      	cbz	r0, 800fa16 <_fflush_r+0x1a>
 800fa0e:	6a03      	ldr	r3, [r0, #32]
 800fa10:	b90b      	cbnz	r3, 800fa16 <_fflush_r+0x1a>
 800fa12:	f7fe f9f5 	bl	800de00 <__sinit>
 800fa16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d0f3      	beq.n	800fa06 <_fflush_r+0xa>
 800fa1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fa20:	07d0      	lsls	r0, r2, #31
 800fa22:	d404      	bmi.n	800fa2e <_fflush_r+0x32>
 800fa24:	0599      	lsls	r1, r3, #22
 800fa26:	d402      	bmi.n	800fa2e <_fflush_r+0x32>
 800fa28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa2a:	f7fe fb5a 	bl	800e0e2 <__retarget_lock_acquire_recursive>
 800fa2e:	4628      	mov	r0, r5
 800fa30:	4621      	mov	r1, r4
 800fa32:	f7ff ff5f 	bl	800f8f4 <__sflush_r>
 800fa36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fa38:	07da      	lsls	r2, r3, #31
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	d4e4      	bmi.n	800fa08 <_fflush_r+0xc>
 800fa3e:	89a3      	ldrh	r3, [r4, #12]
 800fa40:	059b      	lsls	r3, r3, #22
 800fa42:	d4e1      	bmi.n	800fa08 <_fflush_r+0xc>
 800fa44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fa46:	f7fe fb4d 	bl	800e0e4 <__retarget_lock_release_recursive>
 800fa4a:	e7dd      	b.n	800fa08 <_fflush_r+0xc>

0800fa4c <memmove>:
 800fa4c:	4288      	cmp	r0, r1
 800fa4e:	b510      	push	{r4, lr}
 800fa50:	eb01 0402 	add.w	r4, r1, r2
 800fa54:	d902      	bls.n	800fa5c <memmove+0x10>
 800fa56:	4284      	cmp	r4, r0
 800fa58:	4623      	mov	r3, r4
 800fa5a:	d807      	bhi.n	800fa6c <memmove+0x20>
 800fa5c:	1e43      	subs	r3, r0, #1
 800fa5e:	42a1      	cmp	r1, r4
 800fa60:	d008      	beq.n	800fa74 <memmove+0x28>
 800fa62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fa66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fa6a:	e7f8      	b.n	800fa5e <memmove+0x12>
 800fa6c:	4402      	add	r2, r0
 800fa6e:	4601      	mov	r1, r0
 800fa70:	428a      	cmp	r2, r1
 800fa72:	d100      	bne.n	800fa76 <memmove+0x2a>
 800fa74:	bd10      	pop	{r4, pc}
 800fa76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fa7e:	e7f7      	b.n	800fa70 <memmove+0x24>

0800fa80 <_sbrk_r>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4d06      	ldr	r5, [pc, #24]	@ (800fa9c <_sbrk_r+0x1c>)
 800fa84:	2300      	movs	r3, #0
 800fa86:	4604      	mov	r4, r0
 800fa88:	4608      	mov	r0, r1
 800fa8a:	602b      	str	r3, [r5, #0]
 800fa8c:	f7f3 fb62 	bl	8003154 <_sbrk>
 800fa90:	1c43      	adds	r3, r0, #1
 800fa92:	d102      	bne.n	800fa9a <_sbrk_r+0x1a>
 800fa94:	682b      	ldr	r3, [r5, #0]
 800fa96:	b103      	cbz	r3, 800fa9a <_sbrk_r+0x1a>
 800fa98:	6023      	str	r3, [r4, #0]
 800fa9a:	bd38      	pop	{r3, r4, r5, pc}
 800fa9c:	20002858 	.word	0x20002858

0800faa0 <__assert_func>:
 800faa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faa2:	4614      	mov	r4, r2
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b09      	ldr	r3, [pc, #36]	@ (800facc <__assert_func+0x2c>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4605      	mov	r5, r0
 800faac:	68d8      	ldr	r0, [r3, #12]
 800faae:	b954      	cbnz	r4, 800fac6 <__assert_func+0x26>
 800fab0:	4b07      	ldr	r3, [pc, #28]	@ (800fad0 <__assert_func+0x30>)
 800fab2:	461c      	mov	r4, r3
 800fab4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fab8:	9100      	str	r1, [sp, #0]
 800faba:	462b      	mov	r3, r5
 800fabc:	4905      	ldr	r1, [pc, #20]	@ (800fad4 <__assert_func+0x34>)
 800fabe:	f000 f857 	bl	800fb70 <fiprintf>
 800fac2:	f000 f867 	bl	800fb94 <abort>
 800fac6:	4b04      	ldr	r3, [pc, #16]	@ (800fad8 <__assert_func+0x38>)
 800fac8:	e7f4      	b.n	800fab4 <__assert_func+0x14>
 800faca:	bf00      	nop
 800facc:	200001c8 	.word	0x200001c8
 800fad0:	08010bf7 	.word	0x08010bf7
 800fad4:	08010bc9 	.word	0x08010bc9
 800fad8:	08010bbc 	.word	0x08010bbc

0800fadc <_calloc_r>:
 800fadc:	b570      	push	{r4, r5, r6, lr}
 800fade:	fba1 5402 	umull	r5, r4, r1, r2
 800fae2:	b93c      	cbnz	r4, 800faf4 <_calloc_r+0x18>
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7fe fec3 	bl	800e870 <_malloc_r>
 800faea:	4606      	mov	r6, r0
 800faec:	b928      	cbnz	r0, 800fafa <_calloc_r+0x1e>
 800faee:	2600      	movs	r6, #0
 800faf0:	4630      	mov	r0, r6
 800faf2:	bd70      	pop	{r4, r5, r6, pc}
 800faf4:	220c      	movs	r2, #12
 800faf6:	6002      	str	r2, [r0, #0]
 800faf8:	e7f9      	b.n	800faee <_calloc_r+0x12>
 800fafa:	462a      	mov	r2, r5
 800fafc:	4621      	mov	r1, r4
 800fafe:	f7fe fa65 	bl	800dfcc <memset>
 800fb02:	e7f5      	b.n	800faf0 <_calloc_r+0x14>

0800fb04 <malloc>:
 800fb04:	4b02      	ldr	r3, [pc, #8]	@ (800fb10 <malloc+0xc>)
 800fb06:	4601      	mov	r1, r0
 800fb08:	6818      	ldr	r0, [r3, #0]
 800fb0a:	f7fe beb1 	b.w	800e870 <_malloc_r>
 800fb0e:	bf00      	nop
 800fb10:	200001c8 	.word	0x200001c8

0800fb14 <_realloc_r>:
 800fb14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb18:	4680      	mov	r8, r0
 800fb1a:	4615      	mov	r5, r2
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	b921      	cbnz	r1, 800fb2a <_realloc_r+0x16>
 800fb20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb24:	4611      	mov	r1, r2
 800fb26:	f7fe bea3 	b.w	800e870 <_malloc_r>
 800fb2a:	b92a      	cbnz	r2, 800fb38 <_realloc_r+0x24>
 800fb2c:	f7fe fafa 	bl	800e124 <_free_r>
 800fb30:	2400      	movs	r4, #0
 800fb32:	4620      	mov	r0, r4
 800fb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb38:	f000 f833 	bl	800fba2 <_malloc_usable_size_r>
 800fb3c:	4285      	cmp	r5, r0
 800fb3e:	4606      	mov	r6, r0
 800fb40:	d802      	bhi.n	800fb48 <_realloc_r+0x34>
 800fb42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fb46:	d8f4      	bhi.n	800fb32 <_realloc_r+0x1e>
 800fb48:	4629      	mov	r1, r5
 800fb4a:	4640      	mov	r0, r8
 800fb4c:	f7fe fe90 	bl	800e870 <_malloc_r>
 800fb50:	4607      	mov	r7, r0
 800fb52:	2800      	cmp	r0, #0
 800fb54:	d0ec      	beq.n	800fb30 <_realloc_r+0x1c>
 800fb56:	42b5      	cmp	r5, r6
 800fb58:	462a      	mov	r2, r5
 800fb5a:	4621      	mov	r1, r4
 800fb5c:	bf28      	it	cs
 800fb5e:	4632      	movcs	r2, r6
 800fb60:	f7fe fac1 	bl	800e0e6 <memcpy>
 800fb64:	4621      	mov	r1, r4
 800fb66:	4640      	mov	r0, r8
 800fb68:	f7fe fadc 	bl	800e124 <_free_r>
 800fb6c:	463c      	mov	r4, r7
 800fb6e:	e7e0      	b.n	800fb32 <_realloc_r+0x1e>

0800fb70 <fiprintf>:
 800fb70:	b40e      	push	{r1, r2, r3}
 800fb72:	b503      	push	{r0, r1, lr}
 800fb74:	4601      	mov	r1, r0
 800fb76:	ab03      	add	r3, sp, #12
 800fb78:	4805      	ldr	r0, [pc, #20]	@ (800fb90 <fiprintf+0x20>)
 800fb7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb7e:	6800      	ldr	r0, [r0, #0]
 800fb80:	9301      	str	r3, [sp, #4]
 800fb82:	f000 f83f 	bl	800fc04 <_vfiprintf_r>
 800fb86:	b002      	add	sp, #8
 800fb88:	f85d eb04 	ldr.w	lr, [sp], #4
 800fb8c:	b003      	add	sp, #12
 800fb8e:	4770      	bx	lr
 800fb90:	200001c8 	.word	0x200001c8

0800fb94 <abort>:
 800fb94:	b508      	push	{r3, lr}
 800fb96:	2006      	movs	r0, #6
 800fb98:	f000 fa08 	bl	800ffac <raise>
 800fb9c:	2001      	movs	r0, #1
 800fb9e:	f7f3 fa61 	bl	8003064 <_exit>

0800fba2 <_malloc_usable_size_r>:
 800fba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fba6:	1f18      	subs	r0, r3, #4
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	bfbc      	itt	lt
 800fbac:	580b      	ldrlt	r3, [r1, r0]
 800fbae:	18c0      	addlt	r0, r0, r3
 800fbb0:	4770      	bx	lr

0800fbb2 <__sfputc_r>:
 800fbb2:	6893      	ldr	r3, [r2, #8]
 800fbb4:	3b01      	subs	r3, #1
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	b410      	push	{r4}
 800fbba:	6093      	str	r3, [r2, #8]
 800fbbc:	da08      	bge.n	800fbd0 <__sfputc_r+0x1e>
 800fbbe:	6994      	ldr	r4, [r2, #24]
 800fbc0:	42a3      	cmp	r3, r4
 800fbc2:	db01      	blt.n	800fbc8 <__sfputc_r+0x16>
 800fbc4:	290a      	cmp	r1, #10
 800fbc6:	d103      	bne.n	800fbd0 <__sfputc_r+0x1e>
 800fbc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbcc:	f000 b932 	b.w	800fe34 <__swbuf_r>
 800fbd0:	6813      	ldr	r3, [r2, #0]
 800fbd2:	1c58      	adds	r0, r3, #1
 800fbd4:	6010      	str	r0, [r2, #0]
 800fbd6:	7019      	strb	r1, [r3, #0]
 800fbd8:	4608      	mov	r0, r1
 800fbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <__sfputs_r>:
 800fbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	460f      	mov	r7, r1
 800fbe6:	4614      	mov	r4, r2
 800fbe8:	18d5      	adds	r5, r2, r3
 800fbea:	42ac      	cmp	r4, r5
 800fbec:	d101      	bne.n	800fbf2 <__sfputs_r+0x12>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	e007      	b.n	800fc02 <__sfputs_r+0x22>
 800fbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbf6:	463a      	mov	r2, r7
 800fbf8:	4630      	mov	r0, r6
 800fbfa:	f7ff ffda 	bl	800fbb2 <__sfputc_r>
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	d1f3      	bne.n	800fbea <__sfputs_r+0xa>
 800fc02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800fc04 <_vfiprintf_r>:
 800fc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc08:	460d      	mov	r5, r1
 800fc0a:	b09d      	sub	sp, #116	@ 0x74
 800fc0c:	4614      	mov	r4, r2
 800fc0e:	4698      	mov	r8, r3
 800fc10:	4606      	mov	r6, r0
 800fc12:	b118      	cbz	r0, 800fc1c <_vfiprintf_r+0x18>
 800fc14:	6a03      	ldr	r3, [r0, #32]
 800fc16:	b90b      	cbnz	r3, 800fc1c <_vfiprintf_r+0x18>
 800fc18:	f7fe f8f2 	bl	800de00 <__sinit>
 800fc1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc1e:	07d9      	lsls	r1, r3, #31
 800fc20:	d405      	bmi.n	800fc2e <_vfiprintf_r+0x2a>
 800fc22:	89ab      	ldrh	r3, [r5, #12]
 800fc24:	059a      	lsls	r2, r3, #22
 800fc26:	d402      	bmi.n	800fc2e <_vfiprintf_r+0x2a>
 800fc28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc2a:	f7fe fa5a 	bl	800e0e2 <__retarget_lock_acquire_recursive>
 800fc2e:	89ab      	ldrh	r3, [r5, #12]
 800fc30:	071b      	lsls	r3, r3, #28
 800fc32:	d501      	bpl.n	800fc38 <_vfiprintf_r+0x34>
 800fc34:	692b      	ldr	r3, [r5, #16]
 800fc36:	b99b      	cbnz	r3, 800fc60 <_vfiprintf_r+0x5c>
 800fc38:	4629      	mov	r1, r5
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	f000 f938 	bl	800feb0 <__swsetup_r>
 800fc40:	b170      	cbz	r0, 800fc60 <_vfiprintf_r+0x5c>
 800fc42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fc44:	07dc      	lsls	r4, r3, #31
 800fc46:	d504      	bpl.n	800fc52 <_vfiprintf_r+0x4e>
 800fc48:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4c:	b01d      	add	sp, #116	@ 0x74
 800fc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc52:	89ab      	ldrh	r3, [r5, #12]
 800fc54:	0598      	lsls	r0, r3, #22
 800fc56:	d4f7      	bmi.n	800fc48 <_vfiprintf_r+0x44>
 800fc58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fc5a:	f7fe fa43 	bl	800e0e4 <__retarget_lock_release_recursive>
 800fc5e:	e7f3      	b.n	800fc48 <_vfiprintf_r+0x44>
 800fc60:	2300      	movs	r3, #0
 800fc62:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc64:	2320      	movs	r3, #32
 800fc66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fc6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fc6e:	2330      	movs	r3, #48	@ 0x30
 800fc70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fe20 <_vfiprintf_r+0x21c>
 800fc74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc78:	f04f 0901 	mov.w	r9, #1
 800fc7c:	4623      	mov	r3, r4
 800fc7e:	469a      	mov	sl, r3
 800fc80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc84:	b10a      	cbz	r2, 800fc8a <_vfiprintf_r+0x86>
 800fc86:	2a25      	cmp	r2, #37	@ 0x25
 800fc88:	d1f9      	bne.n	800fc7e <_vfiprintf_r+0x7a>
 800fc8a:	ebba 0b04 	subs.w	fp, sl, r4
 800fc8e:	d00b      	beq.n	800fca8 <_vfiprintf_r+0xa4>
 800fc90:	465b      	mov	r3, fp
 800fc92:	4622      	mov	r2, r4
 800fc94:	4629      	mov	r1, r5
 800fc96:	4630      	mov	r0, r6
 800fc98:	f7ff ffa2 	bl	800fbe0 <__sfputs_r>
 800fc9c:	3001      	adds	r0, #1
 800fc9e:	f000 80a7 	beq.w	800fdf0 <_vfiprintf_r+0x1ec>
 800fca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fca4:	445a      	add	r2, fp
 800fca6:	9209      	str	r2, [sp, #36]	@ 0x24
 800fca8:	f89a 3000 	ldrb.w	r3, [sl]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	f000 809f 	beq.w	800fdf0 <_vfiprintf_r+0x1ec>
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	f04f 32ff 	mov.w	r2, #4294967295
 800fcb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fcbc:	f10a 0a01 	add.w	sl, sl, #1
 800fcc0:	9304      	str	r3, [sp, #16]
 800fcc2:	9307      	str	r3, [sp, #28]
 800fcc4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fcc8:	931a      	str	r3, [sp, #104]	@ 0x68
 800fcca:	4654      	mov	r4, sl
 800fccc:	2205      	movs	r2, #5
 800fcce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcd2:	4853      	ldr	r0, [pc, #332]	@ (800fe20 <_vfiprintf_r+0x21c>)
 800fcd4:	f7f0 faa4 	bl	8000220 <memchr>
 800fcd8:	9a04      	ldr	r2, [sp, #16]
 800fcda:	b9d8      	cbnz	r0, 800fd14 <_vfiprintf_r+0x110>
 800fcdc:	06d1      	lsls	r1, r2, #27
 800fcde:	bf44      	itt	mi
 800fce0:	2320      	movmi	r3, #32
 800fce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fce6:	0713      	lsls	r3, r2, #28
 800fce8:	bf44      	itt	mi
 800fcea:	232b      	movmi	r3, #43	@ 0x2b
 800fcec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fcf0:	f89a 3000 	ldrb.w	r3, [sl]
 800fcf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fcf6:	d015      	beq.n	800fd24 <_vfiprintf_r+0x120>
 800fcf8:	9a07      	ldr	r2, [sp, #28]
 800fcfa:	4654      	mov	r4, sl
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	f04f 0c0a 	mov.w	ip, #10
 800fd02:	4621      	mov	r1, r4
 800fd04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd08:	3b30      	subs	r3, #48	@ 0x30
 800fd0a:	2b09      	cmp	r3, #9
 800fd0c:	d94b      	bls.n	800fda6 <_vfiprintf_r+0x1a2>
 800fd0e:	b1b0      	cbz	r0, 800fd3e <_vfiprintf_r+0x13a>
 800fd10:	9207      	str	r2, [sp, #28]
 800fd12:	e014      	b.n	800fd3e <_vfiprintf_r+0x13a>
 800fd14:	eba0 0308 	sub.w	r3, r0, r8
 800fd18:	fa09 f303 	lsl.w	r3, r9, r3
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	9304      	str	r3, [sp, #16]
 800fd20:	46a2      	mov	sl, r4
 800fd22:	e7d2      	b.n	800fcca <_vfiprintf_r+0xc6>
 800fd24:	9b03      	ldr	r3, [sp, #12]
 800fd26:	1d19      	adds	r1, r3, #4
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	9103      	str	r1, [sp, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	bfbb      	ittet	lt
 800fd30:	425b      	neglt	r3, r3
 800fd32:	f042 0202 	orrlt.w	r2, r2, #2
 800fd36:	9307      	strge	r3, [sp, #28]
 800fd38:	9307      	strlt	r3, [sp, #28]
 800fd3a:	bfb8      	it	lt
 800fd3c:	9204      	strlt	r2, [sp, #16]
 800fd3e:	7823      	ldrb	r3, [r4, #0]
 800fd40:	2b2e      	cmp	r3, #46	@ 0x2e
 800fd42:	d10a      	bne.n	800fd5a <_vfiprintf_r+0x156>
 800fd44:	7863      	ldrb	r3, [r4, #1]
 800fd46:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd48:	d132      	bne.n	800fdb0 <_vfiprintf_r+0x1ac>
 800fd4a:	9b03      	ldr	r3, [sp, #12]
 800fd4c:	1d1a      	adds	r2, r3, #4
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	9203      	str	r2, [sp, #12]
 800fd52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fd56:	3402      	adds	r4, #2
 800fd58:	9305      	str	r3, [sp, #20]
 800fd5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fe30 <_vfiprintf_r+0x22c>
 800fd5e:	7821      	ldrb	r1, [r4, #0]
 800fd60:	2203      	movs	r2, #3
 800fd62:	4650      	mov	r0, sl
 800fd64:	f7f0 fa5c 	bl	8000220 <memchr>
 800fd68:	b138      	cbz	r0, 800fd7a <_vfiprintf_r+0x176>
 800fd6a:	9b04      	ldr	r3, [sp, #16]
 800fd6c:	eba0 000a 	sub.w	r0, r0, sl
 800fd70:	2240      	movs	r2, #64	@ 0x40
 800fd72:	4082      	lsls	r2, r0
 800fd74:	4313      	orrs	r3, r2
 800fd76:	3401      	adds	r4, #1
 800fd78:	9304      	str	r3, [sp, #16]
 800fd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd7e:	4829      	ldr	r0, [pc, #164]	@ (800fe24 <_vfiprintf_r+0x220>)
 800fd80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fd84:	2206      	movs	r2, #6
 800fd86:	f7f0 fa4b 	bl	8000220 <memchr>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d03f      	beq.n	800fe0e <_vfiprintf_r+0x20a>
 800fd8e:	4b26      	ldr	r3, [pc, #152]	@ (800fe28 <_vfiprintf_r+0x224>)
 800fd90:	bb1b      	cbnz	r3, 800fdda <_vfiprintf_r+0x1d6>
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	3307      	adds	r3, #7
 800fd96:	f023 0307 	bic.w	r3, r3, #7
 800fd9a:	3308      	adds	r3, #8
 800fd9c:	9303      	str	r3, [sp, #12]
 800fd9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fda0:	443b      	add	r3, r7
 800fda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800fda4:	e76a      	b.n	800fc7c <_vfiprintf_r+0x78>
 800fda6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fdaa:	460c      	mov	r4, r1
 800fdac:	2001      	movs	r0, #1
 800fdae:	e7a8      	b.n	800fd02 <_vfiprintf_r+0xfe>
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	3401      	adds	r4, #1
 800fdb4:	9305      	str	r3, [sp, #20]
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	f04f 0c0a 	mov.w	ip, #10
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fdc2:	3a30      	subs	r2, #48	@ 0x30
 800fdc4:	2a09      	cmp	r2, #9
 800fdc6:	d903      	bls.n	800fdd0 <_vfiprintf_r+0x1cc>
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d0c6      	beq.n	800fd5a <_vfiprintf_r+0x156>
 800fdcc:	9105      	str	r1, [sp, #20]
 800fdce:	e7c4      	b.n	800fd5a <_vfiprintf_r+0x156>
 800fdd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fdd4:	4604      	mov	r4, r0
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e7f0      	b.n	800fdbc <_vfiprintf_r+0x1b8>
 800fdda:	ab03      	add	r3, sp, #12
 800fddc:	9300      	str	r3, [sp, #0]
 800fdde:	462a      	mov	r2, r5
 800fde0:	4b12      	ldr	r3, [pc, #72]	@ (800fe2c <_vfiprintf_r+0x228>)
 800fde2:	a904      	add	r1, sp, #16
 800fde4:	4630      	mov	r0, r6
 800fde6:	f3af 8000 	nop.w
 800fdea:	4607      	mov	r7, r0
 800fdec:	1c78      	adds	r0, r7, #1
 800fdee:	d1d6      	bne.n	800fd9e <_vfiprintf_r+0x19a>
 800fdf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fdf2:	07d9      	lsls	r1, r3, #31
 800fdf4:	d405      	bmi.n	800fe02 <_vfiprintf_r+0x1fe>
 800fdf6:	89ab      	ldrh	r3, [r5, #12]
 800fdf8:	059a      	lsls	r2, r3, #22
 800fdfa:	d402      	bmi.n	800fe02 <_vfiprintf_r+0x1fe>
 800fdfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fdfe:	f7fe f971 	bl	800e0e4 <__retarget_lock_release_recursive>
 800fe02:	89ab      	ldrh	r3, [r5, #12]
 800fe04:	065b      	lsls	r3, r3, #25
 800fe06:	f53f af1f 	bmi.w	800fc48 <_vfiprintf_r+0x44>
 800fe0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe0c:	e71e      	b.n	800fc4c <_vfiprintf_r+0x48>
 800fe0e:	ab03      	add	r3, sp, #12
 800fe10:	9300      	str	r3, [sp, #0]
 800fe12:	462a      	mov	r2, r5
 800fe14:	4b05      	ldr	r3, [pc, #20]	@ (800fe2c <_vfiprintf_r+0x228>)
 800fe16:	a904      	add	r1, sp, #16
 800fe18:	4630      	mov	r0, r6
 800fe1a:	f7ff fc4b 	bl	800f6b4 <_printf_i>
 800fe1e:	e7e4      	b.n	800fdea <_vfiprintf_r+0x1e6>
 800fe20:	08010b89 	.word	0x08010b89
 800fe24:	08010b93 	.word	0x08010b93
 800fe28:	00000000 	.word	0x00000000
 800fe2c:	0800fbe1 	.word	0x0800fbe1
 800fe30:	08010b8f 	.word	0x08010b8f

0800fe34 <__swbuf_r>:
 800fe34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe36:	460e      	mov	r6, r1
 800fe38:	4614      	mov	r4, r2
 800fe3a:	4605      	mov	r5, r0
 800fe3c:	b118      	cbz	r0, 800fe46 <__swbuf_r+0x12>
 800fe3e:	6a03      	ldr	r3, [r0, #32]
 800fe40:	b90b      	cbnz	r3, 800fe46 <__swbuf_r+0x12>
 800fe42:	f7fd ffdd 	bl	800de00 <__sinit>
 800fe46:	69a3      	ldr	r3, [r4, #24]
 800fe48:	60a3      	str	r3, [r4, #8]
 800fe4a:	89a3      	ldrh	r3, [r4, #12]
 800fe4c:	071a      	lsls	r2, r3, #28
 800fe4e:	d501      	bpl.n	800fe54 <__swbuf_r+0x20>
 800fe50:	6923      	ldr	r3, [r4, #16]
 800fe52:	b943      	cbnz	r3, 800fe66 <__swbuf_r+0x32>
 800fe54:	4621      	mov	r1, r4
 800fe56:	4628      	mov	r0, r5
 800fe58:	f000 f82a 	bl	800feb0 <__swsetup_r>
 800fe5c:	b118      	cbz	r0, 800fe66 <__swbuf_r+0x32>
 800fe5e:	f04f 37ff 	mov.w	r7, #4294967295
 800fe62:	4638      	mov	r0, r7
 800fe64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe66:	6823      	ldr	r3, [r4, #0]
 800fe68:	6922      	ldr	r2, [r4, #16]
 800fe6a:	1a98      	subs	r0, r3, r2
 800fe6c:	6963      	ldr	r3, [r4, #20]
 800fe6e:	b2f6      	uxtb	r6, r6
 800fe70:	4283      	cmp	r3, r0
 800fe72:	4637      	mov	r7, r6
 800fe74:	dc05      	bgt.n	800fe82 <__swbuf_r+0x4e>
 800fe76:	4621      	mov	r1, r4
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f7ff fdbf 	bl	800f9fc <_fflush_r>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	d1ed      	bne.n	800fe5e <__swbuf_r+0x2a>
 800fe82:	68a3      	ldr	r3, [r4, #8]
 800fe84:	3b01      	subs	r3, #1
 800fe86:	60a3      	str	r3, [r4, #8]
 800fe88:	6823      	ldr	r3, [r4, #0]
 800fe8a:	1c5a      	adds	r2, r3, #1
 800fe8c:	6022      	str	r2, [r4, #0]
 800fe8e:	701e      	strb	r6, [r3, #0]
 800fe90:	6962      	ldr	r2, [r4, #20]
 800fe92:	1c43      	adds	r3, r0, #1
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d004      	beq.n	800fea2 <__swbuf_r+0x6e>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	07db      	lsls	r3, r3, #31
 800fe9c:	d5e1      	bpl.n	800fe62 <__swbuf_r+0x2e>
 800fe9e:	2e0a      	cmp	r6, #10
 800fea0:	d1df      	bne.n	800fe62 <__swbuf_r+0x2e>
 800fea2:	4621      	mov	r1, r4
 800fea4:	4628      	mov	r0, r5
 800fea6:	f7ff fda9 	bl	800f9fc <_fflush_r>
 800feaa:	2800      	cmp	r0, #0
 800feac:	d0d9      	beq.n	800fe62 <__swbuf_r+0x2e>
 800feae:	e7d6      	b.n	800fe5e <__swbuf_r+0x2a>

0800feb0 <__swsetup_r>:
 800feb0:	b538      	push	{r3, r4, r5, lr}
 800feb2:	4b29      	ldr	r3, [pc, #164]	@ (800ff58 <__swsetup_r+0xa8>)
 800feb4:	4605      	mov	r5, r0
 800feb6:	6818      	ldr	r0, [r3, #0]
 800feb8:	460c      	mov	r4, r1
 800feba:	b118      	cbz	r0, 800fec4 <__swsetup_r+0x14>
 800febc:	6a03      	ldr	r3, [r0, #32]
 800febe:	b90b      	cbnz	r3, 800fec4 <__swsetup_r+0x14>
 800fec0:	f7fd ff9e 	bl	800de00 <__sinit>
 800fec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fec8:	0719      	lsls	r1, r3, #28
 800feca:	d422      	bmi.n	800ff12 <__swsetup_r+0x62>
 800fecc:	06da      	lsls	r2, r3, #27
 800fece:	d407      	bmi.n	800fee0 <__swsetup_r+0x30>
 800fed0:	2209      	movs	r2, #9
 800fed2:	602a      	str	r2, [r5, #0]
 800fed4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fed8:	81a3      	strh	r3, [r4, #12]
 800feda:	f04f 30ff 	mov.w	r0, #4294967295
 800fede:	e033      	b.n	800ff48 <__swsetup_r+0x98>
 800fee0:	0758      	lsls	r0, r3, #29
 800fee2:	d512      	bpl.n	800ff0a <__swsetup_r+0x5a>
 800fee4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fee6:	b141      	cbz	r1, 800fefa <__swsetup_r+0x4a>
 800fee8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800feec:	4299      	cmp	r1, r3
 800feee:	d002      	beq.n	800fef6 <__swsetup_r+0x46>
 800fef0:	4628      	mov	r0, r5
 800fef2:	f7fe f917 	bl	800e124 <_free_r>
 800fef6:	2300      	movs	r3, #0
 800fef8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fefa:	89a3      	ldrh	r3, [r4, #12]
 800fefc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ff00:	81a3      	strh	r3, [r4, #12]
 800ff02:	2300      	movs	r3, #0
 800ff04:	6063      	str	r3, [r4, #4]
 800ff06:	6923      	ldr	r3, [r4, #16]
 800ff08:	6023      	str	r3, [r4, #0]
 800ff0a:	89a3      	ldrh	r3, [r4, #12]
 800ff0c:	f043 0308 	orr.w	r3, r3, #8
 800ff10:	81a3      	strh	r3, [r4, #12]
 800ff12:	6923      	ldr	r3, [r4, #16]
 800ff14:	b94b      	cbnz	r3, 800ff2a <__swsetup_r+0x7a>
 800ff16:	89a3      	ldrh	r3, [r4, #12]
 800ff18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ff1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ff20:	d003      	beq.n	800ff2a <__swsetup_r+0x7a>
 800ff22:	4621      	mov	r1, r4
 800ff24:	4628      	mov	r0, r5
 800ff26:	f000 f883 	bl	8010030 <__smakebuf_r>
 800ff2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff2e:	f013 0201 	ands.w	r2, r3, #1
 800ff32:	d00a      	beq.n	800ff4a <__swsetup_r+0x9a>
 800ff34:	2200      	movs	r2, #0
 800ff36:	60a2      	str	r2, [r4, #8]
 800ff38:	6962      	ldr	r2, [r4, #20]
 800ff3a:	4252      	negs	r2, r2
 800ff3c:	61a2      	str	r2, [r4, #24]
 800ff3e:	6922      	ldr	r2, [r4, #16]
 800ff40:	b942      	cbnz	r2, 800ff54 <__swsetup_r+0xa4>
 800ff42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ff46:	d1c5      	bne.n	800fed4 <__swsetup_r+0x24>
 800ff48:	bd38      	pop	{r3, r4, r5, pc}
 800ff4a:	0799      	lsls	r1, r3, #30
 800ff4c:	bf58      	it	pl
 800ff4e:	6962      	ldrpl	r2, [r4, #20]
 800ff50:	60a2      	str	r2, [r4, #8]
 800ff52:	e7f4      	b.n	800ff3e <__swsetup_r+0x8e>
 800ff54:	2000      	movs	r0, #0
 800ff56:	e7f7      	b.n	800ff48 <__swsetup_r+0x98>
 800ff58:	200001c8 	.word	0x200001c8

0800ff5c <_raise_r>:
 800ff5c:	291f      	cmp	r1, #31
 800ff5e:	b538      	push	{r3, r4, r5, lr}
 800ff60:	4605      	mov	r5, r0
 800ff62:	460c      	mov	r4, r1
 800ff64:	d904      	bls.n	800ff70 <_raise_r+0x14>
 800ff66:	2316      	movs	r3, #22
 800ff68:	6003      	str	r3, [r0, #0]
 800ff6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ff6e:	bd38      	pop	{r3, r4, r5, pc}
 800ff70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ff72:	b112      	cbz	r2, 800ff7a <_raise_r+0x1e>
 800ff74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff78:	b94b      	cbnz	r3, 800ff8e <_raise_r+0x32>
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f000 f830 	bl	800ffe0 <_getpid_r>
 800ff80:	4622      	mov	r2, r4
 800ff82:	4601      	mov	r1, r0
 800ff84:	4628      	mov	r0, r5
 800ff86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff8a:	f000 b817 	b.w	800ffbc <_kill_r>
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d00a      	beq.n	800ffa8 <_raise_r+0x4c>
 800ff92:	1c59      	adds	r1, r3, #1
 800ff94:	d103      	bne.n	800ff9e <_raise_r+0x42>
 800ff96:	2316      	movs	r3, #22
 800ff98:	6003      	str	r3, [r0, #0]
 800ff9a:	2001      	movs	r0, #1
 800ff9c:	e7e7      	b.n	800ff6e <_raise_r+0x12>
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	4798      	blx	r3
 800ffa8:	2000      	movs	r0, #0
 800ffaa:	e7e0      	b.n	800ff6e <_raise_r+0x12>

0800ffac <raise>:
 800ffac:	4b02      	ldr	r3, [pc, #8]	@ (800ffb8 <raise+0xc>)
 800ffae:	4601      	mov	r1, r0
 800ffb0:	6818      	ldr	r0, [r3, #0]
 800ffb2:	f7ff bfd3 	b.w	800ff5c <_raise_r>
 800ffb6:	bf00      	nop
 800ffb8:	200001c8 	.word	0x200001c8

0800ffbc <_kill_r>:
 800ffbc:	b538      	push	{r3, r4, r5, lr}
 800ffbe:	4d07      	ldr	r5, [pc, #28]	@ (800ffdc <_kill_r+0x20>)
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	4608      	mov	r0, r1
 800ffc6:	4611      	mov	r1, r2
 800ffc8:	602b      	str	r3, [r5, #0]
 800ffca:	f7f3 f83b 	bl	8003044 <_kill>
 800ffce:	1c43      	adds	r3, r0, #1
 800ffd0:	d102      	bne.n	800ffd8 <_kill_r+0x1c>
 800ffd2:	682b      	ldr	r3, [r5, #0]
 800ffd4:	b103      	cbz	r3, 800ffd8 <_kill_r+0x1c>
 800ffd6:	6023      	str	r3, [r4, #0]
 800ffd8:	bd38      	pop	{r3, r4, r5, pc}
 800ffda:	bf00      	nop
 800ffdc:	20002858 	.word	0x20002858

0800ffe0 <_getpid_r>:
 800ffe0:	f7f3 b828 	b.w	8003034 <_getpid>

0800ffe4 <__swhatbuf_r>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffec:	2900      	cmp	r1, #0
 800ffee:	b096      	sub	sp, #88	@ 0x58
 800fff0:	4615      	mov	r5, r2
 800fff2:	461e      	mov	r6, r3
 800fff4:	da0d      	bge.n	8010012 <__swhatbuf_r+0x2e>
 800fff6:	89a3      	ldrh	r3, [r4, #12]
 800fff8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fffc:	f04f 0100 	mov.w	r1, #0
 8010000:	bf14      	ite	ne
 8010002:	2340      	movne	r3, #64	@ 0x40
 8010004:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010008:	2000      	movs	r0, #0
 801000a:	6031      	str	r1, [r6, #0]
 801000c:	602b      	str	r3, [r5, #0]
 801000e:	b016      	add	sp, #88	@ 0x58
 8010010:	bd70      	pop	{r4, r5, r6, pc}
 8010012:	466a      	mov	r2, sp
 8010014:	f000 f848 	bl	80100a8 <_fstat_r>
 8010018:	2800      	cmp	r0, #0
 801001a:	dbec      	blt.n	800fff6 <__swhatbuf_r+0x12>
 801001c:	9901      	ldr	r1, [sp, #4]
 801001e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010022:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010026:	4259      	negs	r1, r3
 8010028:	4159      	adcs	r1, r3
 801002a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801002e:	e7eb      	b.n	8010008 <__swhatbuf_r+0x24>

08010030 <__smakebuf_r>:
 8010030:	898b      	ldrh	r3, [r1, #12]
 8010032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010034:	079d      	lsls	r5, r3, #30
 8010036:	4606      	mov	r6, r0
 8010038:	460c      	mov	r4, r1
 801003a:	d507      	bpl.n	801004c <__smakebuf_r+0x1c>
 801003c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	2301      	movs	r3, #1
 8010046:	6163      	str	r3, [r4, #20]
 8010048:	b003      	add	sp, #12
 801004a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801004c:	ab01      	add	r3, sp, #4
 801004e:	466a      	mov	r2, sp
 8010050:	f7ff ffc8 	bl	800ffe4 <__swhatbuf_r>
 8010054:	9f00      	ldr	r7, [sp, #0]
 8010056:	4605      	mov	r5, r0
 8010058:	4639      	mov	r1, r7
 801005a:	4630      	mov	r0, r6
 801005c:	f7fe fc08 	bl	800e870 <_malloc_r>
 8010060:	b948      	cbnz	r0, 8010076 <__smakebuf_r+0x46>
 8010062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010066:	059a      	lsls	r2, r3, #22
 8010068:	d4ee      	bmi.n	8010048 <__smakebuf_r+0x18>
 801006a:	f023 0303 	bic.w	r3, r3, #3
 801006e:	f043 0302 	orr.w	r3, r3, #2
 8010072:	81a3      	strh	r3, [r4, #12]
 8010074:	e7e2      	b.n	801003c <__smakebuf_r+0xc>
 8010076:	89a3      	ldrh	r3, [r4, #12]
 8010078:	6020      	str	r0, [r4, #0]
 801007a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801007e:	81a3      	strh	r3, [r4, #12]
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010086:	b15b      	cbz	r3, 80100a0 <__smakebuf_r+0x70>
 8010088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801008c:	4630      	mov	r0, r6
 801008e:	f000 f81d 	bl	80100cc <_isatty_r>
 8010092:	b128      	cbz	r0, 80100a0 <__smakebuf_r+0x70>
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f023 0303 	bic.w	r3, r3, #3
 801009a:	f043 0301 	orr.w	r3, r3, #1
 801009e:	81a3      	strh	r3, [r4, #12]
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	431d      	orrs	r5, r3
 80100a4:	81a5      	strh	r5, [r4, #12]
 80100a6:	e7cf      	b.n	8010048 <__smakebuf_r+0x18>

080100a8 <_fstat_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d07      	ldr	r5, [pc, #28]	@ (80100c8 <_fstat_r+0x20>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	4611      	mov	r1, r2
 80100b4:	602b      	str	r3, [r5, #0]
 80100b6:	f7f3 f825 	bl	8003104 <_fstat>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d102      	bne.n	80100c4 <_fstat_r+0x1c>
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	b103      	cbz	r3, 80100c4 <_fstat_r+0x1c>
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	bd38      	pop	{r3, r4, r5, pc}
 80100c6:	bf00      	nop
 80100c8:	20002858 	.word	0x20002858

080100cc <_isatty_r>:
 80100cc:	b538      	push	{r3, r4, r5, lr}
 80100ce:	4d06      	ldr	r5, [pc, #24]	@ (80100e8 <_isatty_r+0x1c>)
 80100d0:	2300      	movs	r3, #0
 80100d2:	4604      	mov	r4, r0
 80100d4:	4608      	mov	r0, r1
 80100d6:	602b      	str	r3, [r5, #0]
 80100d8:	f7f3 f824 	bl	8003124 <_isatty>
 80100dc:	1c43      	adds	r3, r0, #1
 80100de:	d102      	bne.n	80100e6 <_isatty_r+0x1a>
 80100e0:	682b      	ldr	r3, [r5, #0]
 80100e2:	b103      	cbz	r3, 80100e6 <_isatty_r+0x1a>
 80100e4:	6023      	str	r3, [r4, #0]
 80100e6:	bd38      	pop	{r3, r4, r5, pc}
 80100e8:	20002858 	.word	0x20002858

080100ec <_init>:
 80100ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100ee:	bf00      	nop
 80100f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100f2:	bc08      	pop	{r3}
 80100f4:	469e      	mov	lr, r3
 80100f6:	4770      	bx	lr

080100f8 <_fini>:
 80100f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100fa:	bf00      	nop
 80100fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100fe:	bc08      	pop	{r3}
 8010100:	469e      	mov	lr, r3
 8010102:	4770      	bx	lr
