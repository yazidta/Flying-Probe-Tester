
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013358  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  08013528  08013528  00014528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d80  08013d80  000150cc  2**0
                  CONTENTS
  4 .ARM          00000008  08013d80  08013d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d88  08013d88  000150cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d88  08013d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013d8c  08013d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  08013d90  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009530  200000cc  08013e5c  000150cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200095fc  08013e5c  000155fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000150cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030d32  00000000  00000000  000150fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e5d  00000000  00000000  00045e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002598  00000000  00000000  0004cc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d19  00000000  00000000  0004f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f2ac  00000000  00000000  00050f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039c2d  00000000  00000000  000801ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001043d3  00000000  00000000  000b9e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be1ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a148  00000000  00000000  001be230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001c8378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013510 	.word	0x08013510

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d0 	.word	0x200000d0
 800020c:	08013510 	.word	0x08013510

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f008 ffcd 	bl	8009564 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f009 f833 	bl	8009644 <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f006 fb01 	bl	8006c80 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000e8 	.word	0x200000e8

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e00a      	b.n	80007c6 <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff7c 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	3301      	adds	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	7bfc      	ldrb	r4, [r7, #15]
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f7ff fd21 	bl	8000210 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	429c      	cmp	r4, r3
 80007d2:	d3ed      	bcc.n	80007b0 <LCD_I2C_printStr+0x10>
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
	...

080007e0 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
 80007ec:	4613      	mov	r3, r2
 80007ee:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <LCD_I2C_Cursor+0x30>)
 80007f4:	5cd2      	ldrb	r2, [r2, r3]
 80007f6:	78bb      	ldrb	r3, [r7, #2]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3b80      	subs	r3, #128	@ 0x80
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff48 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	080138e8 	.word	0x080138e8

08000814 <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
 8000820:	4613      	mov	r3, r2
 8000822:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 8000824:	78fb      	ldrb	r3, [r7, #3]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d90a      	bls.n	8000840 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	3b02      	subs	r3, #2
 800082e:	b2d9      	uxtb	r1, r3
 8000830:	78bb      	ldrb	r3, [r7, #2]
 8000832:	3314      	adds	r3, #20
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f7ff ffd1 	bl	80007e0 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 800083e:	e005      	b.n	800084c <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8000840:	78ba      	ldrb	r2, [r7, #2]
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4619      	mov	r1, r3
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffca 	bl	80007e0 <LCD_I2C_Cursor>
}
 800084c:	bf00      	nop
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800085c:	2101      	movs	r1, #1
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff1a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <LCD_I2C_ClearAllLines>:
LCD_I2C_ClearAllLines(LCD_I2C_HandleTypeDef * hlcd){
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e010      	b.n	800089c <LCD_I2C_ClearAllLines+0x30>
        LCD_I2C_SetCursor(hlcd, i, 0);
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f7ff ffc6 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8000888:	4908      	ldr	r1, [pc, #32]	@ (80008ac <LCD_I2C_ClearAllLines+0x40>)
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f7ff ff88 	bl	80007a0 <LCD_I2C_printStr>
        osDelay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f00f f972 	bl	800fb7a <osDelay>
    for (int i = 0; i < 4; i++) {
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	3301      	adds	r3, #1
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	2b03      	cmp	r3, #3
 80008a0:	ddeb      	ble.n	800087a <LCD_I2C_ClearAllLines+0xe>
    }
}
 80008a2:	bf00      	nop
 80008a4:	4618      	mov	r0, r3
 80008a6:	3710      	adds	r7, #16
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	08013534 	.word	0x08013534

080008b0 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	460b      	mov	r3, r1
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	3340      	adds	r3, #64	@ 0x40
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f7ff fee4 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80008d0:	2300      	movs	r3, #0
 80008d2:	75fb      	strb	r3, [r7, #23]
 80008d4:	e00a      	b.n	80008ec <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	4413      	add	r3, r2
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff fee9 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
 80008e8:	3301      	adds	r3, #1
 80008ea:	75fb      	strb	r3, [r7, #23]
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d9f1      	bls.n	80008d6 <LCD_I2C_DefineChar+0x26>
}
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	3718      	adds	r7, #24
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}

080008fc <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	460b      	mov	r3, r1
 8000906:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000908:	4b23      	ldr	r3, [pc, #140]	@ (8000998 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 800090a:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 800090c:	69b8      	ldr	r0, [r7, #24]
 800090e:	f7ff fc7f 	bl	8000210 <strlen>
 8000912:	4603      	mov	r3, r0
 8000914:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000916:	4a21      	ldr	r2, [pc, #132]	@ (800099c <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000920:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	461a      	mov	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffbf 	bl	80008b0 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8000932:	2300      	movs	r3, #0
 8000934:	77fb      	strb	r3, [r7, #31]
 8000936:	e025      	b.n	8000984 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8000938:	7ffb      	ldrb	r3, [r7, #31]
 800093a:	3303      	adds	r3, #3
 800093c:	b2da      	uxtb	r2, r3
 800093e:	78fb      	ldrb	r3, [r7, #3]
 8000940:	4619      	mov	r1, r3
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ff66 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 8000948:	2100      	movs	r1, #0
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ff19 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fe29 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800095e:	7ffb      	ldrb	r3, [r7, #31]
 8000960:	3303      	adds	r3, #3
 8000962:	b2da      	uxtb	r2, r3
 8000964:	78fb      	ldrb	r3, [r7, #3]
 8000966:	4619      	mov	r1, r3
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ff53 	bl	8000814 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fe9d 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 800097e:	7ffb      	ldrb	r3, [r7, #31]
 8000980:	3301      	adds	r3, #1
 8000982:	77fb      	strb	r3, [r7, #31]
 8000984:	7ffa      	ldrb	r2, [r7, #31]
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	429a      	cmp	r2, r3
 800098a:	d3d5      	bcc.n	8000938 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	0801354c 	.word	0x0801354c
 800099c:	08013558 	.word	0x08013558

080009a0 <LCD_I2C_menuTemplate>:
uint8_t LCD_I2C_menuTemplate(LCD_I2C_HandleTypeDef* hlcd,
                             ENC_Handle_TypeDef* henc,
                             const char* displayItems[],
                             uint8_t numItems,
                             bool backOption)
{
 80009a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009a4:	b093      	sub	sp, #76	@ 0x4c
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	60f8      	str	r0, [r7, #12]
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	70fb      	strb	r3, [r7, #3]
 80009b0:	466b      	mov	r3, sp
 80009b2:	461e      	mov	r6, r3
    LCD_I2C_Clear(hlcd);
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f7ff ff4d 	bl	8000854 <LCD_I2C_Clear>

    // Determine total options based on whether a back option is added
    uint8_t totalOptions = backOption ? numItems + 1 : numItems;
 80009ba:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <LCD_I2C_menuTemplate+0x2a>
 80009c2:	78fb      	ldrb	r3, [r7, #3]
 80009c4:	3301      	adds	r3, #1
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	e000      	b.n	80009cc <LCD_I2C_menuTemplate+0x2c>
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

    // Create a local array to hold the menu items
    const char* menuItems[totalOptions];
 80009d0:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80009d4:	460b      	mov	r3, r1
 80009d6:	3b01      	subs	r3, #1
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009da:	b2cb      	uxtb	r3, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	4698      	mov	r8, r3
 80009e0:	4691      	mov	r9, r2
 80009e2:	f04f 0200 	mov.w	r2, #0
 80009e6:	f04f 0300 	mov.w	r3, #0
 80009ea:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80009ee:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80009f2:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80009f6:	b2cb      	uxtb	r3, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	461c      	mov	r4, r3
 80009fc:	4615      	mov	r5, r2
 80009fe:	f04f 0200 	mov.w	r2, #0
 8000a02:	f04f 0300 	mov.w	r3, #0
 8000a06:	016b      	lsls	r3, r5, #5
 8000a08:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000a0c:	0162      	lsls	r2, r4, #5
 8000a0e:	460b      	mov	r3, r1
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	3307      	adds	r3, #7
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	ebad 0d03 	sub.w	sp, sp, r3
 8000a1c:	466b      	mov	r3, sp
 8000a1e:	3303      	adds	r3, #3
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	637b      	str	r3, [r7, #52]	@ 0x34

    // Populate the menu items array, inserting "Back" at index 0 if needed.
    if (backOption) {
 8000a26:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d01e      	beq.n	8000a6c <LCD_I2C_menuTemplate+0xcc>
        menuItems[0] = "Back";
 8000a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a30:	4a67      	ldr	r2, [pc, #412]	@ (8000bd0 <LCD_I2C_menuTemplate+0x230>)
 8000a32:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a3a:	e010      	b.n	8000a5e <LCD_I2C_menuTemplate+0xbe>
            menuItems[i+1] = displayItems[i];
 8000a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000a4a:	3201      	adds	r2, #1
 8000a4c:	6819      	ldr	r1, [r3, #0]
 8000a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8000a54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000a58:	3301      	adds	r3, #1
 8000a5a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000a5e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8000a62:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000a66:	429a      	cmp	r2, r3
 8000a68:	d3e8      	bcc.n	8000a3c <LCD_I2C_menuTemplate+0x9c>
 8000a6a:	e019      	b.n	8000aa0 <LCD_I2C_menuTemplate+0x100>
        }
    } else {
        for (uint8_t i = 0; i < totalOptions; i++) {
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000a72:	e00f      	b.n	8000a94 <LCD_I2C_menuTemplate+0xf4>
            menuItems[i] = displayItems[i];
 8000a74:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a78:	009b      	lsls	r3, r3, #2
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8000a8a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000a8e:	3301      	adds	r3, #1
 8000a90:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000a94:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8000a98:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3e9      	bcc.n	8000a74 <LCD_I2C_menuTemplate+0xd4>
        }
    }
    
    uint8_t selectedOption = 0;       // Current selected menu item
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t previousOption = 255;     // Set to an invalid option to force the first update
 8000aa6:	23ff      	movs	r3, #255	@ 0xff
 8000aa8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
//        AddBackOption(menuItems, totalOptions);
//    }

    while (1) {
        // Get the current encoder step count (assuming ENC_GetCounter returns a signed value if needed)
        uint32_t encoderStep = ENC_GetCounter(henc);
 8000aac:	68b8      	ldr	r0, [r7, #8]
 8000aae:	f001 fc7f 	bl	80023b0 <ENC_GetCounter>
 8000ab2:	62f8      	str	r0, [r7, #44]	@ 0x2c

        // Normalize encoder steps to the range of [0, totalOptions-1]
        selectedOption = encoderStep % totalOptions;
 8000ab4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000aba:	fbb3 f1f2 	udiv	r1, r3, r2
 8000abe:	fb01 f202 	mul.w	r2, r1, r2
 8000ac2:	1a9b      	subs	r3, r3, r2
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

        // (Since selectedOption is unsigned, the check for negative values is unnecessary.)

        // Update the display only if the selection has changed
        if (selectedOption != previousOption) {
 8000ac8:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000acc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d056      	beq.n	8000b82 <LCD_I2C_menuTemplate+0x1e2>
            previousOption = selectedOption;
 8000ad4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ad8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

            // Clear the display lines
            for (int i = 0; i < 4; i++) {
 8000adc:	2300      	movs	r3, #0
 8000ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8000ae0:	e010      	b.n	8000b04 <LCD_I2C_menuTemplate+0x164>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8000ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	4619      	mov	r1, r3
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fe92 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8000af0:	4938      	ldr	r1, [pc, #224]	@ (8000bd4 <LCD_I2C_menuTemplate+0x234>)
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff fe54 	bl	80007a0 <LCD_I2C_printStr>
                osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f00f f83e 	bl	800fb7a <osDelay>
            for (int i = 0; i < 4; i++) {
 8000afe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b00:	3301      	adds	r3, #1
 8000b02:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b06:	2b03      	cmp	r3, #3
 8000b08:	ddeb      	ble.n	8000ae2 <LCD_I2C_menuTemplate+0x142>
            }

            // Update menu display with the current menu items
            for (uint8_t i = 0; i < totalOptions; i++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b10:	e031      	b.n	8000b76 <LCD_I2C_menuTemplate+0x1d6>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8000b12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b16:	2200      	movs	r2, #0
 8000b18:	4619      	mov	r1, r3
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fe7a 	bl	8000814 <LCD_I2C_SetCursor>

                char formattedLine[21];
                if (i == selectedOption) {
 8000b20:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d10b      	bne.n	8000b44 <LCD_I2C_menuTemplate+0x1a4>
                    // Highlight the selected item
                    snprintf(formattedLine, sizeof(formattedLine), ">%-19s", menuItems[i]);
 8000b2c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b36:	f107 0014 	add.w	r0, r7, #20
 8000b3a:	4a27      	ldr	r2, [pc, #156]	@ (8000bd8 <LCD_I2C_menuTemplate+0x238>)
 8000b3c:	2115      	movs	r1, #21
 8000b3e:	f011 ffdd 	bl	8012afc <sniprintf>
 8000b42:	e00a      	b.n	8000b5a <LCD_I2C_menuTemplate+0x1ba>
                } else {
                    snprintf(formattedLine, sizeof(formattedLine), " %-19s", menuItems[i]);
 8000b44:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b4e:	f107 0014 	add.w	r0, r7, #20
 8000b52:	4a22      	ldr	r2, [pc, #136]	@ (8000bdc <LCD_I2C_menuTemplate+0x23c>)
 8000b54:	2115      	movs	r1, #21
 8000b56:	f011 ffd1 	bl	8012afc <sniprintf>
                }
                LCD_I2C_printStr(hlcd, formattedLine);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f7ff fe1d 	bl	80007a0 <LCD_I2C_printStr>
                osDelay(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f00f f807 	bl	800fb7a <osDelay>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8000b6c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8000b70:	3301      	adds	r3, #1
 8000b72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8000b76:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8000b7a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d3c7      	bcc.n	8000b12 <LCD_I2C_menuTemplate+0x172>
            }
        }

        // Check for the selection button press
        bool buttonInput = read_buttons();
 8000b82:	f000 f82d 	bl	8000be0 <read_buttons>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (buttonInput == 0) {
 8000b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00f      	beq.n	8000bba <LCD_I2C_menuTemplate+0x21a>
            osDelay(200); // Debounce delay
 8000b9a:	20c8      	movs	r0, #200	@ 0xc8
 8000b9c:	f00e ffed 	bl	800fb7a <osDelay>
            if (selectedOption == 0 && backOption) {
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d105      	bne.n	8000bb4 <LCD_I2C_menuTemplate+0x214>
 8000ba8:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <LCD_I2C_menuTemplate+0x214>
                return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e006      	b.n	8000bc2 <LCD_I2C_menuTemplate+0x222>
            } else {
                // Return selectedOption + 1 to account for "Back" at index 0 when applicable
                return selectedOption;
 8000bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bb8:	e003      	b.n	8000bc2 <LCD_I2C_menuTemplate+0x222>
            }
        }

        // Delay for smoother updates
        osDelay(100);
 8000bba:	2064      	movs	r0, #100	@ 0x64
 8000bbc:	f00e ffdd 	bl	800fb7a <osDelay>
    while (1) {
 8000bc0:	e774      	b.n	8000aac <LCD_I2C_menuTemplate+0x10c>
 8000bc2:	46b5      	mov	sp, r6
    }
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	374c      	adds	r7, #76	@ 0x4c
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bce:	bf00      	nop
 8000bd0:	080135cc 	.word	0x080135cc
 8000bd4:	08013534 	.word	0x08013534
 8000bd8:	080135d4 	.word	0x080135d4
 8000bdc:	080135dc 	.word	0x080135dc

08000be0 <read_buttons>:
//}



bool read_buttons(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin) == GPIO_PIN_SET) return 1; // Down
 8000be4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <read_buttons+0x20>)
 8000bea:	f005 ff63 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d101      	bne.n	8000bf8 <read_buttons+0x18>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <read_buttons+0x1a>
    else return 0;
 8000bf8:	2300      	movs	r3, #0

}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40020c00 	.word	0x40020c00

08000c04 <MountSDCard>:


FRESULT MountSDCard(FATFS* FatFs) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    return f_mount(FatFs, "", 1);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	4904      	ldr	r1, [pc, #16]	@ (8000c20 <MountSDCard+0x1c>)
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f00e fbf7 	bl	800f404 <f_mount>
 8000c16:	4603      	mov	r3, r0
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	080135e4 	.word	0x080135e4

08000c24 <OpenRootDir>:

FRESULT OpenRootDir(DIR* dir) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    return f_opendir(dir, "/");
 8000c2c:	4904      	ldr	r1, [pc, #16]	@ (8000c40 <OpenRootDir+0x1c>)
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f00e fc4c 	bl	800f4cc <f_opendir>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	080135e8 	.word	0x080135e8

08000c44 <ReadFiles>:

uint8_t ReadFiles(DIR* dir, char fileList[][20 + 1], uint8_t maxFiles) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0cc      	sub	sp, #304	@ 0x130
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c52:	6018      	str	r0, [r3, #0]
 8000c54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c58:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000c5c:	6019      	str	r1, [r3, #0]
 8000c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c62:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8000c66:	701a      	strb	r2, [r3, #0]
    FILINFO fno;
    uint8_t count = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    FRESULT fres;

    while (count < maxFiles) {
 8000c6e:	e039      	b.n	8000ce4 <ReadFiles+0xa0>
        fres = f_readdir(dir, &fno);
 8000c70:	f107 0214 	add.w	r2, r7, #20
 8000c74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c78:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	f00e fd14 	bl	800f6ac <f_readdir>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 8000c8a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d131      	bne.n	8000cf6 <ReadFiles+0xb2>
 8000c92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c96:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000c9a:	7d9b      	ldrb	r3, [r3, #22]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d02a      	beq.n	8000cf6 <ReadFiles+0xb2>
        if (!(fno.fattrib & AM_DIR)) {
 8000ca0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ca4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000ca8:	7a1b      	ldrb	r3, [r3, #8]
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d118      	bne.n	8000ce4 <ReadFiles+0xa0>
            snprintf(fileList[count], 20 + 1, "%-20s", fno.fname);
 8000cb2:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8000cc4:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8000cc8:	6812      	ldr	r2, [r2, #0]
 8000cca:	18d0      	adds	r0, r2, r3
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	3316      	adds	r3, #22
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <ReadFiles+0xc0>)
 8000cd4:	2115      	movs	r1, #21
 8000cd6:	f011 ff11 	bl	8012afc <sniprintf>
            count++;
 8000cda:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    while (count < maxFiles) {
 8000ce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ce8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8000cec:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3bc      	bcc.n	8000c70 <ReadFiles+0x2c>
        }
    }

    return count;
 8000cf6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	080135ec 	.word	0x080135ec

08000d08 <AddBackOption>:

void AddBackOption(char menuItems[][20 + 1], uint8_t index) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
    snprintf(menuItems[index], 20 + 1, "%-20s", "Back");
 8000d14:	78fa      	ldrb	r2, [r7, #3]
 8000d16:	4613      	mov	r3, r2
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	4413      	add	r3, r2
 8000d1c:	00da      	lsls	r2, r3, #3
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	18d0      	adds	r0, r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <AddBackOption+0x30>)
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <AddBackOption+0x34>)
 8000d28:	2115      	movs	r1, #21
 8000d2a:	f011 fee7 	bl	8012afc <sniprintf>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	080135cc 	.word	0x080135cc
 8000d3c:	080135ec 	.word	0x080135ec

08000d40 <DisplayMenu>:

void DisplayMenu(LCD_I2C_HandleTypeDef* hlcd, char fileList[][20 + 1], uint8_t fileCount, uint8_t selectedIndex) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08c      	sub	sp, #48	@ 0x30
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	460b      	mov	r3, r1
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	4613      	mov	r3, r2
 8000d54:	71bb      	strb	r3, [r7, #6]
    // Clear the LCD
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d5c:	e00f      	b.n	8000d7e <DisplayMenu+0x3e>
        LCD_I2C_SetCursor(hlcd, i, 0);
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	68f8      	ldr	r0, [r7, #12]
 8000d68:	f7ff fd54 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8000d6c:	493d      	ldr	r1, [pc, #244]	@ (8000e64 <DisplayMenu+0x124>)
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fd16 	bl	80007a0 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8000d74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d78:	3301      	adds	r3, #1
 8000d7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d9eb      	bls.n	8000d5e <DisplayMenu+0x1e>
    }

    // Determine the window of files to display
    uint8_t startIdx = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (selectedIndex >= LCD_ROWS) {
 8000d8c:	79bb      	ldrb	r3, [r7, #6]
 8000d8e:	2b03      	cmp	r3, #3
 8000d90:	d903      	bls.n	8000d9a <DisplayMenu+0x5a>
        startIdx = selectedIndex - (LCD_ROWS - 1);
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000da0:	e057      	b.n	8000e52 <DisplayMenu+0x112>
        uint8_t displayIdx = startIdx + i;
 8000da2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8000da6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000daa:	4413      	add	r3, r2
 8000dac:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        if (displayIdx >= fileCount) {
 8000db0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d30b      	bcc.n	8000dd2 <DisplayMenu+0x92>
            // Clear remaining lines if any
            LCD_I2C_SetCursor(hlcd, i, 0);
 8000dba:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	f7ff fd26 	bl	8000814 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    ");
 8000dc8:	4926      	ldr	r1, [pc, #152]	@ (8000e64 <DisplayMenu+0x124>)
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	f7ff fce8 	bl	80007a0 <LCD_I2C_printStr>
 8000dd0:	e03a      	b.n	8000e48 <DisplayMenu+0x108>
            continue;
        }

        // Prepare the formatted line with cursor
        char formattedLine[20 + 1] = {0};
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	f107 0318 	add.w	r3, r7, #24
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	741a      	strb	r2, [r3, #16]
        if (displayIdx == selectedIndex) {
 8000de6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10f      	bne.n	8000e10 <DisplayMenu+0xd0>
            snprintf(formattedLine, sizeof(formattedLine), "> %-19s", fileList[displayIdx]);
 8000df0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	00da      	lsls	r2, r3, #3
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	4413      	add	r3, r2
 8000e02:	f107 0014 	add.w	r0, r7, #20
 8000e06:	4a18      	ldr	r2, [pc, #96]	@ (8000e68 <DisplayMenu+0x128>)
 8000e08:	2115      	movs	r1, #21
 8000e0a:	f011 fe77 	bl	8012afc <sniprintf>
 8000e0e:	e00e      	b.n	8000e2e <DisplayMenu+0xee>
        } else {
            snprintf(formattedLine, sizeof(formattedLine), "  %-19s", fileList[displayIdx]);
 8000e10:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000e14:	4613      	mov	r3, r2
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	00da      	lsls	r2, r3, #3
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	4413      	add	r3, r2
 8000e22:	f107 0014 	add.w	r0, r7, #20
 8000e26:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <DisplayMenu+0x12c>)
 8000e28:	2115      	movs	r1, #21
 8000e2a:	f011 fe67 	bl	8012afc <sniprintf>
        }

        // Write to the LCD
        LCD_I2C_SetCursor(hlcd, i, 0);
 8000e2e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	68f8      	ldr	r0, [r7, #12]
 8000e38:	f7ff fcec 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, formattedLine);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	68f8      	ldr	r0, [r7, #12]
 8000e44:	f7ff fcac 	bl	80007a0 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8000e48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8000e52:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e56:	2b03      	cmp	r3, #3
 8000e58:	d9a3      	bls.n	8000da2 <DisplayMenu+0x62>
    }
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	3730      	adds	r7, #48	@ 0x30
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08013534 	.word	0x08013534
 8000e68:	080135f4 	.word	0x080135f4
 8000e6c:	080135fc 	.word	0x080135fc

08000e70 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	f5ad 7d5a 	sub.w	sp, sp, #872	@ 0x368
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000e7c:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000e80:	6018      	str	r0, [r3, #0]
 8000e82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000e86:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8000e8a:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    char fileList[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    uint8_t fileCount = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f887 3365 	strb.w	r3, [r7, #869]	@ 0x365

    fres = MountSDCard(&FatFs);
 8000e92:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feb4 	bl	8000c04 <MountSDCard>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f887 3364 	strb.w	r3, [r7, #868]	@ 0x364
    if (fres != FR_OK) {
 8000ea2:	f897 3364 	ldrb.w	r3, [r7, #868]	@ 0x364
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d015      	beq.n	8000ed6 <LCD_I2C_DisplaySDMenu+0x66>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8000eaa:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000eae:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f7ff fcac 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8000ebc:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000ec0:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000ec4:	4976      	ldr	r1, [pc, #472]	@ (80010a0 <LCD_I2C_DisplaySDMenu+0x230>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f7ff fc6a 	bl	80007a0 <LCD_I2C_printStr>
        HAL_Delay(2000);
 8000ecc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ed0:	f004 ff34 	bl	8005d3c <HAL_Delay>
        return;
 8000ed4:	e0df      	b.n	8001096 <LCD_I2C_DisplaySDMenu+0x226>
    }

    fres = OpenRootDir(&dir);
 8000ed6:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fea2 	bl	8000c24 <OpenRootDir>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	f887 3364 	strb.w	r3, [r7, #868]	@ 0x364
    if (fres != FR_OK) {
 8000ee6:	f897 3364 	ldrb.w	r3, [r7, #868]	@ 0x364
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d01a      	beq.n	8000f24 <LCD_I2C_DisplaySDMenu+0xb4>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8000eee:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000ef2:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2100      	movs	r1, #0
 8000efa:	6818      	ldr	r0, [r3, #0]
 8000efc:	f7ff fc8a 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 8000f00:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f04:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000f08:	4966      	ldr	r1, [pc, #408]	@ (80010a4 <LCD_I2C_DisplaySDMenu+0x234>)
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	f7ff fc48 	bl	80007a0 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	4965      	ldr	r1, [pc, #404]	@ (80010a8 <LCD_I2C_DisplaySDMenu+0x238>)
 8000f14:	2000      	movs	r0, #0
 8000f16:	f00e fa75 	bl	800f404 <f_mount>
        HAL_Delay(2000);
 8000f1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f1e:	f004 ff0d 	bl	8005d3c <HAL_Delay>
        return;
 8000f22:	e0b8      	b.n	8001096 <LCD_I2C_DisplaySDMenu+0x226>
    }

    fileCount = ReadFiles(&dir, fileList, MAX_FILES);
 8000f24:	f107 0108 	add.w	r1, r7, #8
 8000f28:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fe88 	bl	8000c44 <ReadFiles>
 8000f34:	4603      	mov	r3, r0
 8000f36:	f887 3365 	strb.w	r3, [r7, #869]	@ 0x365
    f_closedir(&dir);
 8000f3a:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f00e fb89 	bl	800f656 <f_closedir>
    f_mount(NULL, "", 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	4958      	ldr	r1, [pc, #352]	@ (80010a8 <LCD_I2C_DisplaySDMenu+0x238>)
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f00e fa5b 	bl	800f404 <f_mount>

    // Add "Back" option
    AddBackOption(fileList, fileCount);
 8000f4e:	f897 2365 	ldrb.w	r2, [r7, #869]	@ 0x365
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4611      	mov	r1, r2
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fed5 	bl	8000d08 <AddBackOption>
    fileCount++;
 8000f5e:	f897 3365 	ldrb.w	r3, [r7, #869]	@ 0x365
 8000f62:	3301      	adds	r3, #1
 8000f64:	f887 3365 	strb.w	r3, [r7, #869]	@ 0x365

    if (fileCount == 1) { // Only "Back" is available
 8000f68:	f897 3365 	ldrb.w	r3, [r7, #869]	@ 0x365
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d115      	bne.n	8000f9c <LCD_I2C_DisplaySDMenu+0x12c>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8000f70:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f74:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	f7ff fc49 	bl	8000814 <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 8000f82:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000f86:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8000f8a:	4948      	ldr	r1, [pc, #288]	@ (80010ac <LCD_I2C_DisplaySDMenu+0x23c>)
 8000f8c:	6818      	ldr	r0, [r3, #0]
 8000f8e:	f7ff fc07 	bl	80007a0 <LCD_I2C_printStr>
        HAL_Delay(2000);
 8000f92:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f96:	f004 fed1 	bl	8005d3c <HAL_Delay>
        return;
 8000f9a:	e07c      	b.n	8001096 <LCD_I2C_DisplaySDMenu+0x226>
    }

    uint8_t selectedIndex = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f887 3363 	strb.w	r3, [r7, #867]	@ 0x363
    uint8_t previousIndex = 255;
 8000fa2:	23ff      	movs	r3, #255	@ 0xff
 8000fa4:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367

    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 8000fa8:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8000fac:	f5a3 735a 	sub.w	r3, r3, #872	@ 0x368
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	f001 f9fd 	bl	80023b0 <ENC_GetCounter>
 8000fb6:	f8c7 035c 	str.w	r0, [r7, #860]	@ 0x35c
        selectedIndex = encoderStep % fileCount;
 8000fba:	f897 2365 	ldrb.w	r2, [r7, #869]	@ 0x365
 8000fbe:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8000fc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc6:	fb01 f202 	mul.w	r2, r1, r2
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	f887 3363 	strb.w	r3, [r7, #867]	@ 0x363

        if (selectedIndex != previousIndex) {
 8000fd0:	f897 2363 	ldrb.w	r2, [r7, #867]	@ 0x363
 8000fd4:	f897 3367 	ldrb.w	r3, [r7, #871]	@ 0x367
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d010      	beq.n	8000ffe <LCD_I2C_DisplaySDMenu+0x18e>
            previousIndex = selectedIndex;
 8000fdc:	f897 3363 	ldrb.w	r3, [r7, #867]	@ 0x363
 8000fe0:	f887 3367 	strb.w	r3, [r7, #871]	@ 0x367
            DisplayMenu(hlcd, fileList, fileCount, selectedIndex);
 8000fe4:	f897 3363 	ldrb.w	r3, [r7, #867]	@ 0x363
 8000fe8:	f897 2365 	ldrb.w	r2, [r7, #869]	@ 0x365
 8000fec:	f107 0108 	add.w	r1, r7, #8
 8000ff0:	f507 705a 	add.w	r0, r7, #872	@ 0x368
 8000ff4:	f5a0 7059 	sub.w	r0, r0, #868	@ 0x364
 8000ff8:	6800      	ldr	r0, [r0, #0]
 8000ffa:	f7ff fea1 	bl	8000d40 <DisplayMenu>
        }

        // Handle button press for selection
        if (read_buttons() == 0) {
 8000ffe:	f7ff fdef 	bl	8000be0 <read_buttons>
 8001002:	4603      	mov	r3, r0
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d03e      	beq.n	800108c <LCD_I2C_DisplaySDMenu+0x21c>
            HAL_Delay(200); // Debounce
 800100e:	20c8      	movs	r0, #200	@ 0xc8
 8001010:	f004 fe94 	bl	8005d3c <HAL_Delay>
            // Clear the LCD
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	f887 3366 	strb.w	r3, [r7, #870]	@ 0x366
 800101a:	e016      	b.n	800104a <LCD_I2C_DisplaySDMenu+0x1da>
                LCD_I2C_SetCursor(hlcd, i, 0);
 800101c:	f897 1366 	ldrb.w	r1, [r7, #870]	@ 0x366
 8001020:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001024:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8001028:	2200      	movs	r2, #0
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f7ff fbf2 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001030:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001034:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8001038:	491d      	ldr	r1, [pc, #116]	@ (80010b0 <LCD_I2C_DisplaySDMenu+0x240>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	f7ff fbb0 	bl	80007a0 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001040:	f897 3366 	ldrb.w	r3, [r7, #870]	@ 0x366
 8001044:	3301      	adds	r3, #1
 8001046:	f887 3366 	strb.w	r3, [r7, #870]	@ 0x366
 800104a:	f897 3366 	ldrb.w	r3, [r7, #870]	@ 0x366
 800104e:	2b03      	cmp	r3, #3
 8001050:	d9e4      	bls.n	800101c <LCD_I2C_DisplaySDMenu+0x1ac>
            }

            if (selectedIndex == fileCount - 1) {
 8001052:	f897 2363 	ldrb.w	r2, [r7, #867]	@ 0x363
 8001056:	f897 3365 	ldrb.w	r3, [r7, #869]	@ 0x365
 800105a:	3b01      	subs	r3, #1
 800105c:	429a      	cmp	r2, r3
 800105e:	d019      	beq.n	8001094 <LCD_I2C_DisplaySDMenu+0x224>
                // "Back" selected
                return; // Exit the menu to go back to the previous menu
            } else {
                // "Loading..." selected
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8001060:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001064:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 8001068:	2200      	movs	r2, #0
 800106a:	2100      	movs	r1, #0
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f7ff fbd1 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Loading...");
 8001072:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001076:	f5a3 7359 	sub.w	r3, r3, #868	@ 0x364
 800107a:	490e      	ldr	r1, [pc, #56]	@ (80010b4 <LCD_I2C_DisplaySDMenu+0x244>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f7ff fb8f 	bl	80007a0 <LCD_I2C_printStr>
                HAL_Delay(2000);
 8001082:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001086:	f004 fe59 	bl	8005d3c <HAL_Delay>
                // process_file(fileList[selectedIndex]);
                // Add your file processing logic here
                return;
 800108a:	e004      	b.n	8001096 <LCD_I2C_DisplaySDMenu+0x226>
            }
        }

        HAL_Delay(100);
 800108c:	2064      	movs	r0, #100	@ 0x64
 800108e:	f004 fe55 	bl	8005d3c <HAL_Delay>
    while (1) {
 8001092:	e789      	b.n	8000fa8 <LCD_I2C_DisplaySDMenu+0x138>
                return; // Exit the menu to go back to the previous menu
 8001094:	bf00      	nop
    }
}
 8001096:	f507 775a 	add.w	r7, r7, #872	@ 0x368
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	08013604 	.word	0x08013604
 80010a4:	08013614 	.word	0x08013614
 80010a8:	080135e4 	.word	0x080135e4
 80010ac:	08013624 	.word	0x08013624
 80010b0:	08013534 	.word	0x08013534
 80010b4:	08013634 	.word	0x08013634

080010b8 <HAL_TIM_PWM_PulseFinishedCallback>:

////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	e0bc      	b.n	8001240 <HAL_TIM_PWM_PulseFinishedCallback+0x188>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6819      	ldr	r1, [r3, #0]
 80010ca:	4862      	ldr	r0, [pc, #392]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	4613      	mov	r3, r2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	015b      	lsls	r3, r3, #5
 80010d6:	4403      	add	r3, r0
 80010d8:	3310      	adds	r3, #16
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4299      	cmp	r1, r3
 80010e0:	f040 80ab 	bne.w	800123a <HAL_TIM_PWM_PulseFinishedCallback+0x182>
		  motors[i].stepsTaken++;
 80010e4:	495b      	ldr	r1, [pc, #364]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	4613      	mov	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	440b      	add	r3, r1
 80010f2:	3370      	adds	r3, #112	@ 0x70
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1c59      	adds	r1, r3, #1
 80010f8:	4856      	ldr	r0, [pc, #344]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	4613      	mov	r3, r2
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	4413      	add	r3, r2
 8001102:	015b      	lsls	r3, r3, #5
 8001104:	4403      	add	r3, r0
 8001106:	3370      	adds	r3, #112	@ 0x70
 8001108:	6019      	str	r1, [r3, #0]
		  TMC2209_CountDistance(&motors[i]);
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	4a4f      	ldr	r2, [pc, #316]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001116:	4413      	add	r3, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f975 	bl	8001408 <TMC2209_CountDistance>
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 800111e:	494d      	ldr	r1, [pc, #308]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4613      	mov	r3, r2
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4413      	add	r3, r2
 8001128:	015b      	lsls	r3, r3, #5
 800112a:	440b      	add	r3, r1
 800112c:	3344      	adds	r3, #68	@ 0x44
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	4948      	ldr	r1, [pc, #288]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	015b      	lsls	r3, r3, #5
 800113c:	440b      	add	r3, r1
 800113e:	3348      	adds	r3, #72	@ 0x48
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	4619      	mov	r1, r3
 8001144:	f005 fcb6 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d113      	bne.n	8001176 <HAL_TIM_PWM_PulseFinishedCallback+0xbe>
		  		  motors[i].StepsFront++;
 800114e:	4941      	ldr	r1, [pc, #260]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	015b      	lsls	r3, r3, #5
 800115a:	440b      	add	r3, r1
 800115c:	338c      	adds	r3, #140	@ 0x8c
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	1c59      	adds	r1, r3, #1
 8001162:	483c      	ldr	r0, [pc, #240]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	4613      	mov	r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	015b      	lsls	r3, r3, #5
 800116e:	4403      	add	r3, r0
 8001170:	338c      	adds	r3, #140	@ 0x8c
 8001172:	6019      	str	r1, [r3, #0]
 8001174:	e02a      	b.n	80011cc <HAL_TIM_PWM_PulseFinishedCallback+0x114>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 8001176:	4937      	ldr	r1, [pc, #220]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	015b      	lsls	r3, r3, #5
 8001182:	440b      	add	r3, r1
 8001184:	3344      	adds	r3, #68	@ 0x44
 8001186:	6818      	ldr	r0, [r3, #0]
 8001188:	4932      	ldr	r1, [pc, #200]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	015b      	lsls	r3, r3, #5
 8001194:	440b      	add	r3, r1
 8001196:	3348      	adds	r3, #72	@ 0x48
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	4619      	mov	r1, r3
 800119c:	f005 fc8a 	bl	8006ab4 <HAL_GPIO_ReadPin>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d112      	bne.n	80011cc <HAL_TIM_PWM_PulseFinishedCallback+0x114>
			  	  motors[i].StepsBack++;
 80011a6:	492b      	ldr	r1, [pc, #172]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	015b      	lsls	r3, r3, #5
 80011b2:	440b      	add	r3, r1
 80011b4:	3390      	adds	r3, #144	@ 0x90
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	4826      	ldr	r0, [pc, #152]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	4403      	add	r3, r0
 80011c8:	3390      	adds	r3, #144	@ 0x90
 80011ca:	6019      	str	r1, [r3, #0]
		  }
          if (motors[i].stepsTaken % motors[i].stepsPerRevolution == 0){ // Count Full steps
 80011cc:	4921      	ldr	r1, [pc, #132]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	015b      	lsls	r3, r3, #5
 80011d8:	440b      	add	r3, r1
 80011da:	3370      	adds	r3, #112	@ 0x70
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	481c      	ldr	r0, [pc, #112]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 80011e2:	68f9      	ldr	r1, [r7, #12]
 80011e4:	460b      	mov	r3, r1
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	015b      	lsls	r3, r3, #5
 80011ec:	4403      	add	r3, r0
 80011ee:	3364      	adds	r3, #100	@ 0x64
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80011f6:	fb01 f303 	mul.w	r3, r1, r3
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d11c      	bne.n	800123a <HAL_TIM_PWM_PulseFinishedCallback+0x182>
              motors[i].driver.checkSG_RESULT = 1;
 8001200:	4914      	ldr	r1, [pc, #80]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	4613      	mov	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	015b      	lsls	r3, r3, #5
 800120c:	440b      	add	r3, r1
 800120e:	3330      	adds	r3, #48	@ 0x30
 8001210:	2201      	movs	r2, #1
 8001212:	701a      	strb	r2, [r3, #0]
              motors[i].fullSteps++;
 8001214:	490f      	ldr	r1, [pc, #60]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	015b      	lsls	r3, r3, #5
 8001220:	440b      	add	r3, r1
 8001222:	3374      	adds	r3, #116	@ 0x74
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1c59      	adds	r1, r3, #1
 8001228:	480a      	ldr	r0, [pc, #40]	@ (8001254 <HAL_TIM_PWM_PulseFinishedCallback+0x19c>)
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	4403      	add	r3, r0
 8001236:	3374      	adds	r3, #116	@ 0x74
 8001238:	6019      	str	r1, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b03      	cmp	r3, #3
 8001244:	f77f af3f 	ble.w	80010c6 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
          }
      }

    }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000fb4 	.word	0x20000fb4

08001258 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800126e:	78fa      	ldrb	r2, [r7, #3]
 8001270:	4619      	mov	r1, r3
 8001272:	f005 fc37 	bl	8006ae4 <HAL_GPIO_WritePin>
    motor->direction = state;
 8001276:	78fa      	ldrb	r2, [r7, #3]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800129a:	78fa      	ldrb	r2, [r7, #3]
 800129c:	4619      	mov	r1, r3
 800129e:	f005 fc21 	bl	8006ae4 <HAL_GPIO_WritePin>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b086      	sub	sp, #24
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
 80012b2:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 80012bc:	f006 feda 	bl	8008074 <HAL_RCC_GetHCLKFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012c8:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	3b01      	subs	r3, #1
 80012d4:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d106      	bne.n	80012fe <TMC2209_SetSpeed+0x54>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	0852      	lsrs	r2, r2, #1
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80012fc:	e031      	b.n	8001362 <TMC2209_SetSpeed+0xb8>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d106      	bne.n	8001314 <TMC2209_SetSpeed+0x6a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	085b      	lsrs	r3, r3, #1
 8001310:	6393      	str	r3, [r2, #56]	@ 0x38
 8001312:	e026      	b.n	8001362 <TMC2209_SetSpeed+0xb8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d106      	bne.n	800132a <TMC2209_SetSpeed+0x80>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	085b      	lsrs	r3, r3, #1
 8001326:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001328:	e01b      	b.n	8001362 <TMC2209_SetSpeed+0xb8>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	2b0c      	cmp	r3, #12
 8001330:	d106      	bne.n	8001340 <TMC2209_SetSpeed+0x96>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	085b      	lsrs	r3, r3, #1
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
 800133e:	e010      	b.n	8001362 <TMC2209_SetSpeed+0xb8>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	2b10      	cmp	r3, #16
 8001346:	d106      	bne.n	8001356 <TMC2209_SetSpeed+0xac>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691b      	ldr	r3, [r3, #16]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	6593      	str	r3, [r2, #88]	@ 0x58
 8001354:	e005      	b.n	8001362 <TMC2209_SetSpeed+0xb8>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	085b      	lsrs	r3, r3, #1
 8001360:	65d3      	str	r3, [r2, #92]	@ 0x5c
    motor->driver.stepFrequency = StepFrequency;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001368:	bf00      	nop
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 8001384:	2101      	movs	r1, #1
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ff7c 	bl	8001284 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f008 fc92 	bl	8009cb8 <HAL_TIM_PWM_Stop_IT>
}
 8001394:	bf00      	nop
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff ff66 	bl	8001284 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f008 fb34 	bl	8009a28 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2201      	movs	r2, #1
 80013c4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <TMC2209_CountSteps>:


static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	679a      	str	r2, [r3, #120]	@ 0x78
	motor->stepsTaken = 0;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	671a      	str	r2, [r3, #112]	@ 0x70

	while (motor->stepsTaken <= motor->nextTotalSteps) {// Wait until we reach required steps and increment position on every step
 80013e6:	bf00      	nop
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ec:	461a      	mov	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d9f8      	bls.n	80013e8 <TMC2209_CountSteps+0x18>

	}
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY

	motor->nextTotalSteps = 0;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	679a      	str	r2, [r3, #120]	@ 0x78
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <TMC2209_CountDistance>:

void TMC2209_CountDistance(Motor *motor){
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
	if(motor->direction != 0){
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d011      	beq.n	800143c <TMC2209_CountDistance+0x34>
		motor->currentPositionMM += getStepPerUnit(motor);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f893 	bl	8001544 <getStepPerUnit>
 800141e:	4603      	mov	r3, r0
 8001420:	461a      	mov	r2, r3
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	ed93 7a20 	vldr	s14, [r3, #128]	@ 0x80
 8001428:	ee07 2a90 	vmov	s15, r2
 800142c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
	}
	else {
		motor->currentPositionMM -= getStepPerUnit(motor);
	}
}
 800143a:	e010      	b.n	800145e <TMC2209_CountDistance+0x56>
		motor->currentPositionMM -= getStepPerUnit(motor);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f881 	bl	8001544 <getStepPerUnit>
 8001442:	4603      	mov	r3, r0
 8001444:	461a      	mov	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	ed93 7a20 	vldr	s14, [r3, #128]	@ 0x80
 800144c:	ee07 2a90 	vmov	s15, r2
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	460b      	mov	r3, r1
 8001472:	ed87 0a01 	vstr	s0, [r7, #4]
 8001476:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index
    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 8001478:	7afb      	ldrb	r3, [r7, #11]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d903      	bls.n	8001486 <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 800147e:	4830      	ldr	r0, [pc, #192]	@ (8001540 <TMC2209_MoveTo+0xd8>)
 8001480:	f000 f888 	bl	8001594 <debug_print>
        return;
 8001484:	e059      	b.n	800153a <TMC2209_MoveTo+0xd2>
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 8001486:	7afa      	ldrb	r2, [r7, #11]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148e:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8001492:	ed97 7a01 	vldr	s14, [r7, #4]
 8001496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	ed93 7a04 	vldr	s14, [r3, #16]
 80014a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b0:	ee17 3a90 	vmov	r3, s15
 80014b4:	617b      	str	r3, [r7, #20]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 80014b6:	7afa      	ldrb	r2, [r7, #11]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dd08      	ble.n	80014dc <TMC2209_MoveTo+0x74>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 80014ca:	7afa      	ldrb	r2, [r7, #11]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff febf 	bl	8001258 <TMC2209_SetDirection>
 80014da:	e00a      	b.n	80014f2 <TMC2209_MoveTo+0x8a>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e4:	2101      	movs	r1, #1
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff feb6 	bl	8001258 <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	425b      	negs	r3, r3
 80014f0:	617b      	str	r3, [r7, #20]
    }

    // Start the motor
    TMC2209_Start(axis->motors[motorIndex]);
 80014f2:	7afa      	ldrb	r2, [r7, #11]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff4e 	bl	800139c <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 8001500:	7afa      	ldrb	r2, [r7, #11]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	679a      	str	r2, [r3, #120]	@ 0x78
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 800150c:	7afa      	ldrb	r2, [r7, #11]
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff59 	bl	80013d0 <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 800151e:	7afa      	ldrb	r2, [r7, #11]
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff ff22 	bl	8001370 <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 800152c:	7afa      	ldrb	r2, [r7, #11]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

}
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08013640 	.word	0x08013640

08001544 <getStepPerUnit>:
      //  HAL_Delay(10);
    }
}


uint8_t getStepPerUnit(Motor *motor){ // Gets the stepPerUnit of that motor based on the axis it's in
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
	uint8_t motorID = motor->driver.id;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	73fb      	strb	r3, [r7, #15]
	if(motorID == 0 || motorID == 2){
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <getStepPerUnit+0x1a>
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d109      	bne.n	8001572 <getStepPerUnit+0x2e>
		return axes[1].stepPerUnit;
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <getStepPerUnit+0x4c>)
 8001560:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	edc7 7a00 	vstr	s15, [r7]
 800156c:	783b      	ldrb	r3, [r7, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	e008      	b.n	8001584 <getStepPerUnit+0x40>
	}
	return axes[2].stepPerUnit;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <getStepPerUnit+0x4c>)
 8001574:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8001578:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157c:	edc7 7a00 	vstr	s15, [r7]
 8001580:	783b      	ldrb	r3, [r7, #0]
 8001582:	b2db      	uxtb	r3, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	20001234 	.word	0x20001234

08001594 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7fe fe37 	bl	8000210 <strlen>
 80015a2:	4603      	mov	r3, r0
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	f04f 33ff 	mov.w	r3, #4294967295
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4803      	ldr	r0, [pc, #12]	@ (80015bc <debug_print+0x28>)
 80015ae:	f009 fdcb 	bl	800b148 <HAL_UART_Transmit>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	20000840 	.word	0x20000840

080015c0 <calculate_CRC>:
    ptr += sprintf(ptr, "]\r\n");

    debug_print(buffer);
}

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	73bb      	strb	r3, [r7, #14]
 80015d4:	e027      	b.n	8001626 <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 80015d6:	7bbb      	ldrb	r3, [r7, #14]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 80015e0:	2300      	movs	r3, #0
 80015e2:	733b      	strb	r3, [r7, #12]
 80015e4:	e019      	b.n	800161a <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	09db      	lsrs	r3, r3, #7
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	461a      	mov	r2, r3
 80015ee:	7b7b      	ldrb	r3, [r7, #13]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d007      	beq.n	8001608 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 80015f8:	7bfb      	ldrb	r3, [r7, #15]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	f083 0307 	eor.w	r3, r3, #7
 8001602:	b25b      	sxtb	r3, r3
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	e002      	b.n	800160e <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 800160e:	7b7b      	ldrb	r3, [r7, #13]
 8001610:	085b      	lsrs	r3, r3, #1
 8001612:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8001614:	7b3b      	ldrb	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	733b      	strb	r3, [r7, #12]
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	2b07      	cmp	r3, #7
 800161e:	d9e2      	bls.n	80015e6 <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8001620:	7bbb      	ldrb	r3, [r7, #14]
 8001622:	3301      	adds	r3, #1
 8001624:	73bb      	strb	r3, [r7, #14]
 8001626:	7bba      	ldrb	r2, [r7, #14]
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	429a      	cmp	r2, r3
 800162c:	d3d3      	bcc.n	80015d6 <calculate_CRC+0x16>
        }
    }
    return crc;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8001644:	f004 fb6e 	bl	8005d24 <HAL_GetTick>
 8001648:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 800164a:	e00c      	b.n	8001666 <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 800164c:	f004 fb6a 	bl	8005d24 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	d204      	bcs.n	8001666 <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <TMC2209_WaitForReply+0x44>)
 800165e:	f7ff ff99 	bl	8001594 <debug_print>
             return 0; // Timeout
 8001662:	2300      	movs	r3, #0
 8001664:	e008      	b.n	8001678 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8001666:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <TMC2209_WaitForReply+0x48>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ed      	beq.n	800164c <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <TMC2209_WaitForReply+0x48>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 8001676:	2301      	movs	r3, #1
 }
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08013684 	.word	0x08013684
 8001684:	20000104 	.word	0x20000104

08001688 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6858      	ldr	r0, [r3, #4]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	b29a      	uxth	r2, r3
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	68f9      	ldr	r1, [r7, #12]
 80016a4:	f009 fd50 	bl	800b148 <HAL_UART_Transmit>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <TMC2209_sendCommand+0x30>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	2214      	movs	r2, #20
 80016b2:	60da      	str	r2, [r3, #12]
         return	NULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e01e      	b.n	80016f6 <TMC2209_sendCommand+0x6e>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01a      	beq.n	80016f4 <TMC2209_sendCommand+0x6c>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d116      	bne.n	80016f4 <TMC2209_sendCommand+0x6c>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6858      	ldr	r0, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3301      	adds	r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	461a      	mov	r2, r3
 80016d4:	490a      	ldr	r1, [pc, #40]	@ (8001700 <TMC2209_sendCommand+0x78>)
 80016d6:	f009 fdc0 	bl	800b25a <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 80016da:	20c8      	movs	r0, #200	@ 0xc8
 80016dc:	f7ff ffae 	bl	800163c <TMC2209_WaitForReply>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d104      	bne.n	80016f0 <TMC2209_sendCommand+0x68>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	221e      	movs	r2, #30
 80016ea:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 80016ec:	2300      	movs	r3, #0
 80016ee:	e002      	b.n	80016f6 <TMC2209_sendCommand+0x6e>
     debug_print_hex(command, writeLength);
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
     }
     return rxBuffer; // Success
 80016f0:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <TMC2209_sendCommand+0x7c>)
 80016f2:	e000      	b.n	80016f6 <TMC2209_sendCommand+0x6e>
     }
     return NULL;
 80016f4:	2300      	movs	r3, #0
 }
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200000f0 	.word	0x200000f0
 8001704:	200000fc 	.word	0x200000fc

08001708 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	460b      	mov	r3, r1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8001716:	2305      	movs	r3, #5
 8001718:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	7a1b      	ldrb	r3, [r3, #8]
 800171e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001726:	b2db      	uxtb	r3, r3
 8001728:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0e1b      	lsrs	r3, r3, #24
 800172e:	b2db      	uxtb	r3, r3
 8001730:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	141b      	asrs	r3, r3, #16
 8001736:	b2db      	uxtb	r3, r3
 8001738:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	121b      	asrs	r3, r3, #8
 800173e:	b2db      	uxtb	r3, r3
 8001740:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	2107      	movs	r1, #7
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff ff36 	bl	80015c0 <calculate_CRC>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8001758:	f107 0010 	add.w	r0, r7, #16
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	2108      	movs	r1, #8
 8001762:	f7ff ff91 	bl	8001688 <TMC2209_sendCommand>

 }
 8001766:	bf00      	nop
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 800176e:	b590      	push	{r4, r7, lr}
 8001770:	b087      	sub	sp, #28
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <TMC2209_readInit+0x1a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	e059      	b.n	800183c <TMC2209_readInit+0xce>
 	uint8_t read_request_command[8] = { 0 };
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 8001790:	2305      	movs	r3, #5
 8001792:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	7a1b      	ldrb	r3, [r3, #8]
 8001798:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 800179e:	f107 030c 	add.w	r3, r7, #12
 80017a2:	2103      	movs	r1, #3
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff0b 	bl	80015c0 <calculate_CRC>
 80017aa:	4603      	mov	r3, r0
 80017ac:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 80017ae:	f107 000c 	add.w	r0, r7, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2208      	movs	r2, #8
 80017b6:	2104      	movs	r1, #4
 80017b8:	f7ff ff66 	bl	8001688 <TMC2209_sendCommand>
 80017bc:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b05      	cmp	r3, #5
 80017c4:	d004      	beq.n	80017d0 <TMC2209_readInit+0x62>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2228      	movs	r2, #40	@ 0x28
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	2328      	movs	r3, #40	@ 0x28
 80017ce:	e035      	b.n	800183c <TMC2209_readInit+0xce>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2bff      	cmp	r3, #255	@ 0xff
 80017d8:	d004      	beq.n	80017e4 <TMC2209_readInit+0x76>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2232      	movs	r2, #50	@ 0x32
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	2332      	movs	r3, #50	@ 0x32
 80017e2:	e02b      	b.n	800183c <TMC2209_readInit+0xce>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3302      	adds	r3, #2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d004      	beq.n	80017fa <TMC2209_readInit+0x8c>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	223c      	movs	r2, #60	@ 0x3c
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	233c      	movs	r3, #60	@ 0x3c
 80017f8:	e020      	b.n	800183c <TMC2209_readInit+0xce>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3307      	adds	r3, #7
 80017fe:	781c      	ldrb	r4, [r3, #0]
 8001800:	2107      	movs	r1, #7
 8001802:	6978      	ldr	r0, [r7, #20]
 8001804:	f7ff fedc 	bl	80015c0 <calculate_CRC>
 8001808:	4603      	mov	r3, r0
 800180a:	429c      	cmp	r4, r3
 800180c:	d004      	beq.n	8001818 <TMC2209_readInit+0xaa>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2246      	movs	r2, #70	@ 0x46
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	2346      	movs	r3, #70	@ 0x46
 8001816:	e011      	b.n	800183c <TMC2209_readInit+0xce>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3303      	adds	r3, #3
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	061a      	lsls	r2, r3, #24
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	3304      	adds	r3, #4
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	3305      	adds	r3, #5
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	4313      	orrs	r3, r2
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	3206      	adds	r2, #6
 8001838:	7812      	ldrb	r2, [r2, #0]
 800183a:	4313      	orrs	r3, r2
 }
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}

08001844 <TMC2209_read_ifcnt>:
	 }
	 return true;
}


void TMC2209_read_ifcnt(Motor *tmc2209) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b09c      	sub	sp, #112	@ 0x70
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 800184c:	2102      	movs	r1, #2
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ff8d 	bl	800176e <TMC2209_readInit>
 8001854:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8001856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001858:	2b00      	cmp	r3, #0
 800185a:	db03      	blt.n	8001864 <TMC2209_read_ifcnt+0x20>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
         debug_print(debug_msg);
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 800185c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	61da      	str	r2, [r3, #28]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 8001862:	e003      	b.n	800186c <TMC2209_read_ifcnt+0x28>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 800186a:	61da      	str	r2, [r3, #28]
 }
 800186c:	bf00      	nop
 800186e:	3770      	adds	r7, #112	@ 0x70
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <configureGCONF>:

bool configureGCONF(Motor *tmc2209) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	int ifcntCheck = tmc2209->driver.IFCNT;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69db      	ldr	r3, [r3, #28]
 8001880:	60fb      	str	r3, [r7, #12]
	if (ifcntCheck == TMC_IFCNT_ERROR){
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f113 0f50 	cmn.w	r3, #80	@ 0x50
 8001888:	d101      	bne.n	800188e <configureGCONF+0x1a>
        if (ENABLE_DEBUG) debug_print("Failed to configure GCONF! (Failed to read IFCNT register)\r\n");
		return 0;
 800188a:	2300      	movs	r3, #0
 800188c:	e01a      	b.n	80018c4 <configureGCONF+0x50>
	}
    uint32_t gconf = 0x000000C0; // pdn_disable = 1, mstep_reg_select = 1
 800188e:	23c0      	movs	r3, #192	@ 0xc0
 8001890:	60bb      	str	r3, [r7, #8]
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	461a      	mov	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff35 	bl	8001708 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ffd0 	bl	8001844 <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= ifcntCheck){
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69da      	ldr	r2, [r3, #28]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d805      	bhi.n	80018ba <configureGCONF+0x46>
    	if (ENABLE_DEBUG) debug_print("Failed to configure GCONF!(IFCNT DID NOT INCREMENT CHECK TMC_STATUS)\r\n");
    	tmc2209->driver.GCONF = TMC_GCONF_ERROR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	225a      	movs	r2, #90	@ 0x5a
 80018b2:	f883 2020 	strb.w	r2, [r3, #32]
		return 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e004      	b.n	80018c4 <configureGCONF+0x50>
    }
    return (tmc2209->driver.GCONF = true);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2020 	strb.w	r2, [r3, #32]
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <TMC2209_setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t TMC2209_setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b0ae      	sub	sp, #184	@ 0xb8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69db      	ldr	r3, [r3, #28]
 80018e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    snprintf(debug_msg, sizeof(debug_msg), "Setting Microstepping For Driver ID: %u \r\n", driverID);
    debug_print(debug_msg);
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 80018e8:	2380      	movs	r3, #128	@ 0x80
 80018ea:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80018ee:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 80018f2:	461a      	mov	r2, r3
 80018f4:	2100      	movs	r1, #0
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff06 	bl	8001708 <TMC2209_writeInit>

    HAL_Delay(2);
 80018fc:	2002      	movs	r0, #2
 80018fe:	f004 fa1d 	bl	8005d3c <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8001902:	216c      	movs	r1, #108	@ 0x6c
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff32 	bl	800176e <TMC2209_readInit>
 800190a:	4603      	mov	r3, r0
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8


    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8001910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001914:	0e1b      	lsrs	r3, r3, #24
 8001916:	b2db      	uxtb	r3, r3
 8001918:	f003 030f 	and.w	r3, r3, #15
 800191c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001926:	d054      	beq.n	80019d2 <TMC2209_setMicrosteppingResolution+0x106>
 8001928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800192c:	dc75      	bgt.n	8001a1a <TMC2209_setMicrosteppingResolution+0x14e>
 800192e:	2b80      	cmp	r3, #128	@ 0x80
 8001930:	d053      	beq.n	80019da <TMC2209_setMicrosteppingResolution+0x10e>
 8001932:	2b80      	cmp	r3, #128	@ 0x80
 8001934:	dc71      	bgt.n	8001a1a <TMC2209_setMicrosteppingResolution+0x14e>
 8001936:	2b20      	cmp	r3, #32
 8001938:	dc48      	bgt.n	80019cc <TMC2209_setMicrosteppingResolution+0x100>
 800193a:	2b00      	cmp	r3, #0
 800193c:	dd6d      	ble.n	8001a1a <TMC2209_setMicrosteppingResolution+0x14e>
 800193e:	3b01      	subs	r3, #1
 8001940:	2b1f      	cmp	r3, #31
 8001942:	d86a      	bhi.n	8001a1a <TMC2209_setMicrosteppingResolution+0x14e>
 8001944:	a201      	add	r2, pc, #4	@ (adr r2, 800194c <TMC2209_setMicrosteppingResolution+0x80>)
 8001946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194a:	bf00      	nop
 800194c:	08001a13 	.word	0x08001a13
 8001950:	08001a0b 	.word	0x08001a0b
 8001954:	08001a1b 	.word	0x08001a1b
 8001958:	08001a03 	.word	0x08001a03
 800195c:	08001a1b 	.word	0x08001a1b
 8001960:	08001a1b 	.word	0x08001a1b
 8001964:	08001a1b 	.word	0x08001a1b
 8001968:	080019fb 	.word	0x080019fb
 800196c:	08001a1b 	.word	0x08001a1b
 8001970:	08001a1b 	.word	0x08001a1b
 8001974:	08001a1b 	.word	0x08001a1b
 8001978:	08001a1b 	.word	0x08001a1b
 800197c:	08001a1b 	.word	0x08001a1b
 8001980:	08001a1b 	.word	0x08001a1b
 8001984:	08001a1b 	.word	0x08001a1b
 8001988:	080019f3 	.word	0x080019f3
 800198c:	08001a1b 	.word	0x08001a1b
 8001990:	08001a1b 	.word	0x08001a1b
 8001994:	08001a1b 	.word	0x08001a1b
 8001998:	08001a1b 	.word	0x08001a1b
 800199c:	08001a1b 	.word	0x08001a1b
 80019a0:	08001a1b 	.word	0x08001a1b
 80019a4:	08001a1b 	.word	0x08001a1b
 80019a8:	08001a1b 	.word	0x08001a1b
 80019ac:	08001a1b 	.word	0x08001a1b
 80019b0:	08001a1b 	.word	0x08001a1b
 80019b4:	08001a1b 	.word	0x08001a1b
 80019b8:	08001a1b 	.word	0x08001a1b
 80019bc:	08001a1b 	.word	0x08001a1b
 80019c0:	08001a1b 	.word	0x08001a1b
 80019c4:	08001a1b 	.word	0x08001a1b
 80019c8:	080019eb 	.word	0x080019eb
 80019cc:	2b40      	cmp	r3, #64	@ 0x40
 80019ce:	d008      	beq.n	80019e2 <TMC2209_setMicrosteppingResolution+0x116>
 80019d0:	e023      	b.n	8001a1a <TMC2209_setMicrosteppingResolution+0x14e>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80019d8:	e024      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 80019da:	2301      	movs	r3, #1
 80019dc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80019e0:	e020      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 80019e2:	2302      	movs	r3, #2
 80019e4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80019e8:	e01c      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 80019ea:	2303      	movs	r3, #3
 80019ec:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80019f0:	e018      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 80019f2:	2304      	movs	r3, #4
 80019f4:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 80019f8:	e014      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 80019fa:	2305      	movs	r3, #5
 80019fc:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001a00:	e010      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8001a02:	2306      	movs	r3, #6
 8001a04:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001a08:	e00c      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001a10:	e008      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8001a12:	2308      	movs	r3, #8
 8001a14:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001a18:	e004      	b.n	8001a24 <TMC2209_setMicrosteppingResolution+0x158>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8001a1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001a1e:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8001a22:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8001a24:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8001a28:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d101      	bne.n	8001a34 <TMC2209_setMicrosteppingResolution+0x168>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
        return resolution;
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	e025      	b.n	8001a80 <TMC2209_setMicrosteppingResolution+0x1b4>
    }
    HAL_Delay(2);
 8001a34:	2002      	movs	r0, #2
 8001a36:	f004 f981 	bl	8005d3c <HAL_Delay>
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8001a3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a3e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8001a42:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8001a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a52:	461a      	mov	r2, r3
 8001a54:	216c      	movs	r1, #108	@ 0x6c
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff fe56 	bl	8001708 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fef1 	bl	8001844 <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d804      	bhi.n	8001a78 <TMC2209_setMicrosteppingResolution+0x1ac>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	226e      	movs	r2, #110	@ 0x6e
 8001a72:	831a      	strh	r2, [r3, #24]
 8001a74:	236e      	movs	r3, #110	@ 0x6e
 8001a76:	e003      	b.n	8001a80 <TMC2209_setMicrosteppingResolution+0x1b4>
    }
    // Debug
    tmc2209->driver.mstep = resolution;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	831a      	strh	r2, [r3, #24]

    if (ENABLE_DEBUG) {
    	sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
    	debug_print(debug_msg);
    }
    return TMC_OK;
 8001a7e:	2300      	movs	r3, #0

}
 8001a80:	4618      	mov	r0, r3
 8001a82:	37b8      	adds	r7, #184	@ 0xb8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <TMC2209_enableStallDetection>:

    return 25.0f;
}


uint8_t TMC2209_enableStallDetection(Motor *tmc2209, uint8_t sgthrs) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	70fb      	strb	r3, [r7, #3]
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	60fb      	str	r3, [r7, #12]

    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs);    // Set StallGuard threshold (SGTHRS)
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2140      	movs	r1, #64	@ 0x40
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fe31 	bl	8001708 <TMC2209_writeInit>

    TMC2209_read_ifcnt(tmc2209);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fecc 	bl	8001844 <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= IFCNT){
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69da      	ldr	r2, [r3, #28]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d807      	bhi.n	8001ac6 <TMC2209_enableStallDetection+0x3e>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	return tmc2209->driver.stallEnabled = TMC_ENABLESTALL_ERROR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	220a      	movs	r2, #10
 8001aba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ac4:	e006      	b.n	8001ad4 <TMC2209_enableStallDetection+0x4c>
    }


    return tmc2209->driver.stallEnabled = 1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28

}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <TMC2209_SetTCoolThrs>:

void TMC2209_SetTCoolThrs(Motor *tmc2209, uint32_t stepFrequency) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    const uint32_t fCLK = 12000000; // TMC2209 Internal clock frequency: 12 MHz
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <TMC2209_SetTCoolThrs+0x58>)
 8001ae8:	613b      	str	r3, [r7, #16]
    uint32_t tStep = fCLK / stepFrequency; // The internal clokc trims step frequency that's why we divied it.
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]

    // Ensure tStep doesn't exceed 20 bits (valid for TCOOLTHRS register)
    if (tStep > 0xFFFFF) {
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001afa:	d301      	bcc.n	8001b00 <TMC2209_SetTCoolThrs+0x24>
        tStep = 0xFFFFF;
 8001afc:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <TMC2209_SetTCoolThrs+0x5c>)
 8001afe:	617b      	str	r3, [r7, #20]
    }

    int32_t IFCNT = tmc2209->driver.IFCNT;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	60fb      	str	r3, [r7, #12]

    if (tmc2209->driver.IFCNT <= IFCNT){
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69da      	ldr	r2, [r3, #28]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d803      	bhi.n	8001b18 <TMC2209_SetTCoolThrs+0x3c>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	tmc2209->driver.TCoolThrs = TMC2209_TCOOLTHRS_ERROR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f06f 0209 	mvn.w	r2, #9
 8001b16:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    TMC2209_writeInit(tmc2209, TMC2209_REG_TCOOLTHRS, tStep);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	2114      	movs	r1, #20
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fdf2 	bl	8001708 <TMC2209_writeInit>
    tmc2209->driver.TCoolThrs = tStep;
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	00b71b00 	.word	0x00b71b00
 8001b38:	000fffff 	.word	0x000fffff

08001b3c <TMC2209_readSGResult>:

void TMC2209_readSGResult(Motor *tmc2209) { // IMPORTANT: The SG_RESULT becomes updated with each fullstep, independent of TCOOLTHRS and SGTHRS
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
    uint32_t sg_result = 0;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]

    // Read the SG_RESULT register
    sg_result = TMC2209_readInit(tmc2209, TMC2209_REG_SG_RESULT) & 0x3FF; // Mask 10 bits
 8001b48:	2141      	movs	r1, #65	@ 0x41
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fe0f 	bl	800176e <TMC2209_readInit>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b56:	60fb      	str	r3, [r7, #12]

    if (sg_result == tmc2209->driver.STATUS) {
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d102      	bne.n	8001b68 <TMC2209_readSGResult+0x2c>
        tmc2209->driver.SG_RESULT = TMC_STALL_ERROR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220f      	movs	r2, #15
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    tmc2209->driver.SG_RESULT = sg_result;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors, uint8_t sendDelay, bool enableSpreadCycle){	// Set all motor configurations based on their variables set from init function
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b084      	sub	sp, #16
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	70fb      	strb	r3, [r7, #3]
 8001b82:	4613      	mov	r3, r2
 8001b84:	70bb      	strb	r3, [r7, #2]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
 8001b8a:	e03d      	b.n	8001c08 <TMC2209_setMotorsConfiguration+0x92>
    	configureGCONF(&motors[i]);
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	015b      	lsls	r3, r3, #5
 8001b96:	461a      	mov	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fe69 	bl	8001874 <configureGCONF>
    	uint16_t mstep = motors[i].driver.mstep;
 8001ba2:	7bfa      	ldrb	r2, [r7, #15]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	015b      	lsls	r3, r3, #5
 8001bac:	461a      	mov	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	8b1b      	ldrh	r3, [r3, #24]
 8001bb4:	81bb      	strh	r3, [r7, #12]
    	TMC2209_setMicrosteppingResolution(&motors[i], mstep);
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	015b      	lsls	r3, r3, #5
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	89ba      	ldrh	r2, [r7, #12]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fe7e 	bl	80018cc <TMC2209_setMicrosteppingResolution>
    	TMC2209_enableStallDetection(&motors[i], 126);
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	4413      	add	r3, r2
 8001bd8:	015b      	lsls	r3, r3, #5
 8001bda:	461a      	mov	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	217e      	movs	r1, #126	@ 0x7e
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff50 	bl	8001a88 <TMC2209_enableStallDetection>
    	TMC2209_SetTCoolThrs(&motors[i], 5000);
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	4613      	mov	r3, r2
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	015b      	lsls	r3, r3, #5
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff6d 	bl	8001adc <TMC2209_SetTCoolThrs>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	3301      	adds	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d9be      	bls.n	8001b8c <TMC2209_setMotorsConfiguration+0x16>


    }
    TMC2209_SetSpeed(&motors[0], 8500);
 8001c0e:	f242 1134 	movw	r1, #8500	@ 0x2134
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff fb49 	bl	80012aa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 15000);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	33a0      	adds	r3, #160	@ 0xa0
 8001c1c:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fb42 	bl	80012aa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 5000);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001c2c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb3a 	bl	80012aa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 15000);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8001c3c:	f643 2198 	movw	r1, #15000	@ 0x3a98
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fb32 	bl	80012aa <TMC2209_SetSpeed>
}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <TMC2209_checkStall>:
        TMC2209_SetSpeed(&motors[3], DEFAULT_X_SPEED);
    }

}

void TMC2209_checkStall(Motor *motor){
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
	   if(motor->driver.checkSG_RESULT){ // One full step is done so we read sg_Result
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d002      	beq.n	8001c66 <TMC2209_checkStall+0x18>
		   TMC2209_readSGResult(motor);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff6b 	bl	8001b3c <TMC2209_readSGResult>
	   }
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e2f7      	b.n	800226c <initializeMotors+0x5fc>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x00; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2
 8001c7c:	49c2      	ldr	r1, [pc, #776]	@ (8001f88 <initializeMotors+0x318>)
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	440b      	add	r3, r1
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	b2d8      	uxtb	r0, r3
 8001c94:	49bc      	ldr	r1, [pc, #752]	@ (8001f88 <initializeMotors+0x318>)
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	440b      	add	r3, r1
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	701a      	strb	r2, [r3, #0]
    	motors[i].driver.STATUS = TMC_OK;
 8001ca6:	49b8      	ldr	r1, [pc, #736]	@ (8001f88 <initializeMotors+0x318>)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	015b      	lsls	r3, r3, #5
 8001cb2:	440b      	add	r3, r1
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
        motors[i].driver.GCONF = 0;
 8001cba:	49b3      	ldr	r1, [pc, #716]	@ (8001f88 <initializeMotors+0x318>)
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	4413      	add	r3, r2
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	440b      	add	r3, r1
 8001cc8:	3320      	adds	r3, #32
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IFCNT = 0;
 8001cce:	49ae      	ldr	r1, [pc, #696]	@ (8001f88 <initializeMotors+0x318>)
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	4413      	add	r3, r2
 8001cd8:	015b      	lsls	r3, r3, #5
 8001cda:	440b      	add	r3, r1
 8001cdc:	331c      	adds	r3, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
        motors[i].driver.chopperMode = 0;
 8001ce2:	49a9      	ldr	r1, [pc, #676]	@ (8001f88 <initializeMotors+0x318>)
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	4413      	add	r3, r2
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	440b      	add	r3, r1
 8001cf0:	331a      	adds	r3, #26
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
        motors[i].driver.SG_RESULT = 0;
 8001cf6:	49a4      	ldr	r1, [pc, #656]	@ (8001f88 <initializeMotors+0x318>)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	440b      	add	r3, r1
 8001d04:	332c      	adds	r3, #44	@ 0x2c
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
        motors[i].driver.checkSG_RESULT = 0;
 8001d0a:	499f      	ldr	r1, [pc, #636]	@ (8001f88 <initializeMotors+0x318>)
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	015b      	lsls	r3, r3, #5
 8001d16:	440b      	add	r3, r1
 8001d18:	3330      	adds	r3, #48	@ 0x30
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]
        motors[i].driver.TCoolThrs = 0;
 8001d1e:	499a      	ldr	r1, [pc, #616]	@ (8001f88 <initializeMotors+0x318>)
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	4413      	add	r3, r2
 8001d28:	015b      	lsls	r3, r3, #5
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3338      	adds	r3, #56	@ 0x38
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
        motors[i].driver.stepFrequency = 0;
 8001d32:	4995      	ldr	r1, [pc, #596]	@ (8001f88 <initializeMotors+0x318>)
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	015b      	lsls	r3, r3, #5
 8001d3e:	440b      	add	r3, r1
 8001d40:	3334      	adds	r3, #52	@ 0x34
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

        motors[i].fullSteps = 0;
 8001d46:	4990      	ldr	r1, [pc, #576]	@ (8001f88 <initializeMotors+0x318>)
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	015b      	lsls	r3, r3, #5
 8001d52:	440b      	add	r3, r1
 8001d54:	3374      	adds	r3, #116	@ 0x74
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
        motors[i].stepsTaken = 0;
 8001d5a:	498b      	ldr	r1, [pc, #556]	@ (8001f88 <initializeMotors+0x318>)
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	440b      	add	r3, r1
 8001d68:	3370      	adds	r3, #112	@ 0x70
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8001d6e:	4986      	ldr	r1, [pc, #536]	@ (8001f88 <initializeMotors+0x318>)
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	4413      	add	r3, r2
 8001d78:	015b      	lsls	r3, r3, #5
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3378      	adds	r3, #120	@ 0x78
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8001d82:	4981      	ldr	r1, [pc, #516]	@ (8001f88 <initializeMotors+0x318>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	440b      	add	r3, r1
 8001d90:	3380      	adds	r3, #128	@ 0x80
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8001d98:	497b      	ldr	r1, [pc, #492]	@ (8001f88 <initializeMotors+0x318>)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	440b      	add	r3, r1
 8001da6:	3384      	adds	r3, #132	@ 0x84
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8001dae:	4976      	ldr	r1, [pc, #472]	@ (8001f88 <initializeMotors+0x318>)
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	440b      	add	r3, r1
 8001dbc:	3388      	adds	r3, #136	@ 0x88
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
        motors[i].STALL = 0;
 8001dc2:	4971      	ldr	r1, [pc, #452]	@ (8001f88 <initializeMotors+0x318>)
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	015b      	lsls	r3, r3, #5
 8001dce:	440b      	add	r3, r1
 8001dd0:	339c      	adds	r3, #156	@ 0x9c
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	701a      	strb	r2, [r3, #0]


        if(i == 0){
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 809a 	bne.w	8001f12 <initializeMotors+0x2a2>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.huart = &huart2;
 8001dde:	496a      	ldr	r1, [pc, #424]	@ (8001f88 <initializeMotors+0x318>)
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	015b      	lsls	r3, r3, #5
 8001dea:	440b      	add	r3, r1
 8001dec:	3304      	adds	r3, #4
 8001dee:	4a67      	ldr	r2, [pc, #412]	@ (8001f8c <initializeMotors+0x31c>)
 8001df0:	601a      	str	r2, [r3, #0]
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8001df2:	4965      	ldr	r1, [pc, #404]	@ (8001f88 <initializeMotors+0x318>)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	015b      	lsls	r3, r3, #5
 8001dfe:	440b      	add	r3, r1
 8001e00:	3310      	adds	r3, #16
 8001e02:	4a63      	ldr	r2, [pc, #396]	@ (8001f90 <initializeMotors+0x320>)
 8001e04:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8001e06:	4960      	ldr	r1, [pc, #384]	@ (8001f88 <initializeMotors+0x318>)
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	4413      	add	r3, r2
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	440b      	add	r3, r1
 8001e14:	3314      	adds	r3, #20
 8001e16:	2208      	movs	r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 16;
 8001e1a:	495b      	ldr	r1, [pc, #364]	@ (8001f88 <initializeMotors+0x318>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	440b      	add	r3, r1
 8001e28:	3318      	adds	r3, #24
 8001e2a:	2210      	movs	r2, #16
 8001e2c:	801a      	strh	r2, [r3, #0]
        motors[i].driver.IRUN = 16;
 8001e2e:	4956      	ldr	r1, [pc, #344]	@ (8001f88 <initializeMotors+0x318>)
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	015b      	lsls	r3, r3, #5
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3322      	adds	r3, #34	@ 0x22
 8001e3e:	2210      	movs	r2, #16
 8001e40:	801a      	strh	r2, [r3, #0]
        motors[i].driver.IHOLD = 16;
 8001e42:	4951      	ldr	r1, [pc, #324]	@ (8001f88 <initializeMotors+0x318>)
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	440b      	add	r3, r1
 8001e50:	3324      	adds	r3, #36	@ 0x24
 8001e52:	2210      	movs	r2, #16
 8001e54:	801a      	strh	r2, [r3, #0]
        motors[i].stepsPerRevolution = 200;
 8001e56:	494c      	ldr	r1, [pc, #304]	@ (8001f88 <initializeMotors+0x318>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	015b      	lsls	r3, r3, #5
 8001e62:	440b      	add	r3, r1
 8001e64:	3364      	adds	r3, #100	@ 0x64
 8001e66:	22c8      	movs	r2, #200	@ 0xc8
 8001e68:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8001e6a:	4947      	ldr	r1, [pc, #284]	@ (8001f88 <initializeMotors+0x318>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	015b      	lsls	r3, r3, #5
 8001e76:	440b      	add	r3, r1
 8001e78:	333c      	adds	r3, #60	@ 0x3c
 8001e7a:	4a46      	ldr	r2, [pc, #280]	@ (8001f94 <initializeMotors+0x324>)
 8001e7c:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8001e7e:	4942      	ldr	r1, [pc, #264]	@ (8001f88 <initializeMotors+0x318>)
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	015b      	lsls	r3, r3, #5
 8001e8a:	440b      	add	r3, r1
 8001e8c:	3340      	adds	r3, #64	@ 0x40
 8001e8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e92:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8001e94:	493c      	ldr	r1, [pc, #240]	@ (8001f88 <initializeMotors+0x318>)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	015b      	lsls	r3, r3, #5
 8001ea0:	440b      	add	r3, r1
 8001ea2:	3344      	adds	r3, #68	@ 0x44
 8001ea4:	4a3c      	ldr	r2, [pc, #240]	@ (8001f98 <initializeMotors+0x328>)
 8001ea6:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 8001ea8:	4937      	ldr	r1, [pc, #220]	@ (8001f88 <initializeMotors+0x318>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3348      	adds	r3, #72	@ 0x48
 8001eb8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ebc:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8001ebe:	4932      	ldr	r1, [pc, #200]	@ (8001f88 <initializeMotors+0x318>)
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	015b      	lsls	r3, r3, #5
 8001eca:	440b      	add	r3, r1
 8001ecc:	334c      	adds	r3, #76	@ 0x4c
 8001ece:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <initializeMotors+0x324>)
 8001ed0:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 8001ed2:	492d      	ldr	r1, [pc, #180]	@ (8001f88 <initializeMotors+0x318>)
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	015b      	lsls	r3, r3, #5
 8001ede:	440b      	add	r3, r1
 8001ee0:	3350      	adds	r3, #80	@ 0x50
 8001ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ee6:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = DIAG1_GPIO_Port;
 8001ee8:	4927      	ldr	r1, [pc, #156]	@ (8001f88 <initializeMotors+0x318>)
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	015b      	lsls	r3, r3, #5
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3354      	adds	r3, #84	@ 0x54
 8001ef8:	4a28      	ldr	r2, [pc, #160]	@ (8001f9c <initializeMotors+0x32c>)
 8001efa:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = DIAG1_Pin;
 8001efc:	4922      	ldr	r1, [pc, #136]	@ (8001f88 <initializeMotors+0x318>)
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	015b      	lsls	r3, r3, #5
 8001f08:	440b      	add	r3, r1
 8001f0a:	3358      	adds	r3, #88	@ 0x58
 8001f0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f10:	801a      	strh	r2, [r3, #0]


        }


        if(i == 1){
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f040 8097 	bne.w	8002048 <initializeMotors+0x3d8>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 8001f1a:	491b      	ldr	r1, [pc, #108]	@ (8001f88 <initializeMotors+0x318>)
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	015b      	lsls	r3, r3, #5
 8001f26:	440b      	add	r3, r1
 8001f28:	3310      	adds	r3, #16
 8001f2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa0 <initializeMotors+0x330>)
 8001f2c:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 8001f2e:	4916      	ldr	r1, [pc, #88]	@ (8001f88 <initializeMotors+0x318>)
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	015b      	lsls	r3, r3, #5
 8001f3a:	440b      	add	r3, r1
 8001f3c:	3314      	adds	r3, #20
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8001f42:	4911      	ldr	r1, [pc, #68]	@ (8001f88 <initializeMotors+0x318>)
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	015b      	lsls	r3, r3, #5
 8001f4e:	440b      	add	r3, r1
 8001f50:	3318      	adds	r3, #24
 8001f52:	2210      	movs	r2, #16
 8001f54:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 8001f56:	490c      	ldr	r1, [pc, #48]	@ (8001f88 <initializeMotors+0x318>)
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	440b      	add	r3, r1
 8001f64:	3304      	adds	r3, #4
 8001f66:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa4 <initializeMotors+0x334>)
 8001f68:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8001f6a:	4907      	ldr	r1, [pc, #28]	@ (8001f88 <initializeMotors+0x318>)
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	440b      	add	r3, r1
 8001f78:	3364      	adds	r3, #100	@ 0x64
 8001f7a:	22c8      	movs	r2, #200	@ 0xc8
 8001f7c:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8001f7e:	4902      	ldr	r1, [pc, #8]	@ (8001f88 <initializeMotors+0x318>)
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	e010      	b.n	8001fa8 <initializeMotors+0x338>
 8001f86:	bf00      	nop
 8001f88:	20000fb4 	.word	0x20000fb4
 8001f8c:	200007b8 	.word	0x200007b8
 8001f90:	20000494 	.word	0x20000494
 8001f94:	40020400 	.word	0x40020400
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	20000448 	.word	0x20000448
 8001fa4:	200006a8 	.word	0x200006a8
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	015b      	lsls	r3, r3, #5
 8001fae:	440b      	add	r3, r1
 8001fb0:	333c      	adds	r3, #60	@ 0x3c
 8001fb2:	4ab4      	ldr	r2, [pc, #720]	@ (8002284 <initializeMotors+0x614>)
 8001fb4:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8001fb6:	49b4      	ldr	r1, [pc, #720]	@ (8002288 <initializeMotors+0x618>)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	015b      	lsls	r3, r3, #5
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3340      	adds	r3, #64	@ 0x40
 8001fc6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fca:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8001fcc:	49ae      	ldr	r1, [pc, #696]	@ (8002288 <initializeMotors+0x618>)
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	4413      	add	r3, r2
 8001fd6:	015b      	lsls	r3, r3, #5
 8001fd8:	440b      	add	r3, r1
 8001fda:	3344      	adds	r3, #68	@ 0x44
 8001fdc:	4aa9      	ldr	r2, [pc, #676]	@ (8002284 <initializeMotors+0x614>)
 8001fde:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 8001fe0:	49a9      	ldr	r1, [pc, #676]	@ (8002288 <initializeMotors+0x618>)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	440b      	add	r3, r1
 8001fee:	3348      	adds	r3, #72	@ 0x48
 8001ff0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ff4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 8001ff6:	49a4      	ldr	r1, [pc, #656]	@ (8002288 <initializeMotors+0x618>)
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	440b      	add	r3, r1
 8002004:	334c      	adds	r3, #76	@ 0x4c
 8002006:	4a9f      	ldr	r2, [pc, #636]	@ (8002284 <initializeMotors+0x614>)
 8002008:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 800200a:	499f      	ldr	r1, [pc, #636]	@ (8002288 <initializeMotors+0x618>)
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	015b      	lsls	r3, r3, #5
 8002016:	440b      	add	r3, r1
 8002018:	3350      	adds	r3, #80	@ 0x50
 800201a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800201e:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG2_GPIO_Port;
 8002020:	4999      	ldr	r1, [pc, #612]	@ (8002288 <initializeMotors+0x618>)
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	015b      	lsls	r3, r3, #5
 800202c:	440b      	add	r3, r1
 800202e:	3354      	adds	r3, #84	@ 0x54
 8002030:	4a96      	ldr	r2, [pc, #600]	@ (800228c <initializeMotors+0x61c>)
 8002032:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG2_Pin;
 8002034:	4994      	ldr	r1, [pc, #592]	@ (8002288 <initializeMotors+0x618>)
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	015b      	lsls	r3, r3, #5
 8002040:	440b      	add	r3, r1
 8002042:	3358      	adds	r3, #88	@ 0x58
 8002044:	2204      	movs	r2, #4
 8002046:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b02      	cmp	r3, #2
 800204c:	f040 8083 	bne.w	8002156 <initializeMotors+0x4e6>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 8002050:	498d      	ldr	r1, [pc, #564]	@ (8002288 <initializeMotors+0x618>)
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	015b      	lsls	r3, r3, #5
 800205c:	440b      	add	r3, r1
 800205e:	3310      	adds	r3, #16
 8002060:	4a8b      	ldr	r2, [pc, #556]	@ (8002290 <initializeMotors+0x620>)
 8002062:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8002064:	4988      	ldr	r1, [pc, #544]	@ (8002288 <initializeMotors+0x618>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	015b      	lsls	r3, r3, #5
 8002070:	440b      	add	r3, r1
 8002072:	3314      	adds	r3, #20
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8002078:	4983      	ldr	r1, [pc, #524]	@ (8002288 <initializeMotors+0x618>)
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	015b      	lsls	r3, r3, #5
 8002084:	440b      	add	r3, r1
 8002086:	3318      	adds	r3, #24
 8002088:	2210      	movs	r2, #16
 800208a:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 800208c:	497e      	ldr	r1, [pc, #504]	@ (8002288 <initializeMotors+0x618>)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	015b      	lsls	r3, r3, #5
 8002098:	440b      	add	r3, r1
 800209a:	3304      	adds	r3, #4
 800209c:	4a7d      	ldr	r2, [pc, #500]	@ (8002294 <initializeMotors+0x624>)
 800209e:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 80020a0:	4979      	ldr	r1, [pc, #484]	@ (8002288 <initializeMotors+0x618>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	015b      	lsls	r3, r3, #5
 80020ac:	440b      	add	r3, r1
 80020ae:	3364      	adds	r3, #100	@ 0x64
 80020b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80020b4:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 80020b6:	4974      	ldr	r1, [pc, #464]	@ (8002288 <initializeMotors+0x618>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	440b      	add	r3, r1
 80020c4:	333c      	adds	r3, #60	@ 0x3c
 80020c6:	4a74      	ldr	r2, [pc, #464]	@ (8002298 <initializeMotors+0x628>)
 80020c8:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 80020ca:	496f      	ldr	r1, [pc, #444]	@ (8002288 <initializeMotors+0x618>)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	015b      	lsls	r3, r3, #5
 80020d6:	440b      	add	r3, r1
 80020d8:	3340      	adds	r3, #64	@ 0x40
 80020da:	2201      	movs	r2, #1
 80020dc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 80020de:	496a      	ldr	r1, [pc, #424]	@ (8002288 <initializeMotors+0x618>)
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	015b      	lsls	r3, r3, #5
 80020ea:	440b      	add	r3, r1
 80020ec:	3344      	adds	r3, #68	@ 0x44
 80020ee:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <initializeMotors+0x614>)
 80020f0:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 80020f2:	4965      	ldr	r1, [pc, #404]	@ (8002288 <initializeMotors+0x618>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	015b      	lsls	r3, r3, #5
 80020fe:	440b      	add	r3, r1
 8002100:	3348      	adds	r3, #72	@ 0x48
 8002102:	2204      	movs	r2, #4
 8002104:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 8002106:	4960      	ldr	r1, [pc, #384]	@ (8002288 <initializeMotors+0x618>)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	440b      	add	r3, r1
 8002114:	334c      	adds	r3, #76	@ 0x4c
 8002116:	4a5b      	ldr	r2, [pc, #364]	@ (8002284 <initializeMotors+0x614>)
 8002118:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 800211a:	495b      	ldr	r1, [pc, #364]	@ (8002288 <initializeMotors+0x618>)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	015b      	lsls	r3, r3, #5
 8002126:	440b      	add	r3, r1
 8002128:	3350      	adds	r3, #80	@ 0x50
 800212a:	2280      	movs	r2, #128	@ 0x80
 800212c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG3_GPIO_Port;
 800212e:	4956      	ldr	r1, [pc, #344]	@ (8002288 <initializeMotors+0x618>)
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	015b      	lsls	r3, r3, #5
 800213a:	440b      	add	r3, r1
 800213c:	3354      	adds	r3, #84	@ 0x54
 800213e:	4a53      	ldr	r2, [pc, #332]	@ (800228c <initializeMotors+0x61c>)
 8002140:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG3_Pin;
 8002142:	4951      	ldr	r1, [pc, #324]	@ (8002288 <initializeMotors+0x618>)
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	440b      	add	r3, r1
 8002150:	3358      	adds	r3, #88	@ 0x58
 8002152:	2240      	movs	r2, #64	@ 0x40
 8002154:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b03      	cmp	r3, #3
 800215a:	f040 8084 	bne.w	8002266 <initializeMotors+0x5f6>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 800215e:	494a      	ldr	r1, [pc, #296]	@ (8002288 <initializeMotors+0x618>)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	440b      	add	r3, r1
 800216c:	3310      	adds	r3, #16
 800216e:	4a4b      	ldr	r2, [pc, #300]	@ (800229c <initializeMotors+0x62c>)
 8002170:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8002172:	4945      	ldr	r1, [pc, #276]	@ (8002288 <initializeMotors+0x618>)
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	015b      	lsls	r3, r3, #5
 800217e:	440b      	add	r3, r1
 8002180:	3314      	adds	r3, #20
 8002182:	2208      	movs	r2, #8
 8002184:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 16;
 8002186:	4940      	ldr	r1, [pc, #256]	@ (8002288 <initializeMotors+0x618>)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	015b      	lsls	r3, r3, #5
 8002192:	440b      	add	r3, r1
 8002194:	3318      	adds	r3, #24
 8002196:	2210      	movs	r2, #16
 8002198:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 800219a:	493b      	ldr	r1, [pc, #236]	@ (8002288 <initializeMotors+0x618>)
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	440b      	add	r3, r1
 80021a8:	3304      	adds	r3, #4
 80021aa:	4a3d      	ldr	r2, [pc, #244]	@ (80022a0 <initializeMotors+0x630>)
 80021ac:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 80021ae:	4936      	ldr	r1, [pc, #216]	@ (8002288 <initializeMotors+0x618>)
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	015b      	lsls	r3, r3, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	3364      	adds	r3, #100	@ 0x64
 80021be:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80021c2:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 80021c4:	4930      	ldr	r1, [pc, #192]	@ (8002288 <initializeMotors+0x618>)
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	015b      	lsls	r3, r3, #5
 80021d0:	440b      	add	r3, r1
 80021d2:	333c      	adds	r3, #60	@ 0x3c
 80021d4:	4a2d      	ldr	r2, [pc, #180]	@ (800228c <initializeMotors+0x61c>)
 80021d6:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 80021d8:	492b      	ldr	r1, [pc, #172]	@ (8002288 <initializeMotors+0x618>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	015b      	lsls	r3, r3, #5
 80021e4:	440b      	add	r3, r1
 80021e6:	3340      	adds	r3, #64	@ 0x40
 80021e8:	2201      	movs	r2, #1
 80021ea:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 80021ec:	4926      	ldr	r1, [pc, #152]	@ (8002288 <initializeMotors+0x618>)
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	015b      	lsls	r3, r3, #5
 80021f8:	440b      	add	r3, r1
 80021fa:	3344      	adds	r3, #68	@ 0x44
 80021fc:	4a21      	ldr	r2, [pc, #132]	@ (8002284 <initializeMotors+0x614>)
 80021fe:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 8002200:	4921      	ldr	r1, [pc, #132]	@ (8002288 <initializeMotors+0x618>)
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	015b      	lsls	r3, r3, #5
 800220c:	440b      	add	r3, r1
 800220e:	3348      	adds	r3, #72	@ 0x48
 8002210:	2201      	movs	r2, #1
 8002212:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 8002214:	491c      	ldr	r1, [pc, #112]	@ (8002288 <initializeMotors+0x618>)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	440b      	add	r3, r1
 8002222:	334c      	adds	r3, #76	@ 0x4c
 8002224:	4a17      	ldr	r2, [pc, #92]	@ (8002284 <initializeMotors+0x614>)
 8002226:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 8002228:	4917      	ldr	r1, [pc, #92]	@ (8002288 <initializeMotors+0x618>)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	015b      	lsls	r3, r3, #5
 8002234:	440b      	add	r3, r1
 8002236:	3350      	adds	r3, #80	@ 0x50
 8002238:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800223c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG4_GPIO_Port;
 800223e:	4912      	ldr	r1, [pc, #72]	@ (8002288 <initializeMotors+0x618>)
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	015b      	lsls	r3, r3, #5
 800224a:	440b      	add	r3, r1
 800224c:	3354      	adds	r3, #84	@ 0x54
 800224e:	4a15      	ldr	r2, [pc, #84]	@ (80022a4 <initializeMotors+0x634>)
 8002250:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG4_Pin;
 8002252:	490d      	ldr	r1, [pc, #52]	@ (8002288 <initializeMotors+0x618>)
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	015b      	lsls	r3, r3, #5
 800225e:	440b      	add	r3, r1
 8002260:	3358      	adds	r3, #88	@ 0x58
 8002262:	2210      	movs	r2, #16
 8002264:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3301      	adds	r3, #1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b03      	cmp	r3, #3
 8002270:	f77f ad04 	ble.w	8001c7c <initializeMotors+0xc>


    }


}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	20000fb4 	.word	0x20000fb4
 800228c:	40020400 	.word	0x40020400
 8002290:	20000578 	.word	0x20000578
 8002294:	20000730 	.word	0x20000730
 8002298:	40020000 	.word	0x40020000
 800229c:	200004e0 	.word	0x200004e0
 80022a0:	200008c8 	.word	0x200008c8
 80022a4:	40021400 	.word	0x40021400

080022a8 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
 80022b4:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[1]->currentPositionMM = 0;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	8b12      	ldrh	r2, [r2, #24]
 80022e2:	fb02 f303 	mul.w	r3, r2, r3
 80022e6:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	669a      	str	r2, [r3, #104]	@ 0x68
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	669a      	str	r2, [r3, #104]	@ 0x68
    axis->stepPerUnit = totalStepsPerRevolution / circumference;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f103 0014 	add.w	r0, r3, #20
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	9300      	str	r3, [sp, #0]
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	4a0a      	ldr	r2, [pc, #40]	@ (8002344 <initializeAxis+0x9c>)
 800231a:	210a      	movs	r1, #10
 800231c:	f010 fbee 	bl	8012afc <sniprintf>
    if (motor2 != NULL) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <initializeAxis+0x94>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f103 001e 	add.w	r0, r3, #30
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	4a03      	ldr	r2, [pc, #12]	@ (8002344 <initializeAxis+0x9c>)
 8002336:	210a      	movs	r1, #10
 8002338:	f010 fbe0 	bl	8012afc <sniprintf>
    }
}
 800233c:	bf00      	nop
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	080136a4 	.word	0x080136a4

08002348 <initializeSystem>:

void initializeSystem(){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af02      	add	r7, sp, #8
    // X-axis
    initializeAxis(&axes[0], &motors[0],&motors[1], 8, "Y");
 800234e:	4b09      	ldr	r3, [pc, #36]	@ (8002374 <initializeSystem+0x2c>)
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2308      	movs	r3, #8
 8002354:	4a08      	ldr	r2, [pc, #32]	@ (8002378 <initializeSystem+0x30>)
 8002356:	4909      	ldr	r1, [pc, #36]	@ (800237c <initializeSystem+0x34>)
 8002358:	4809      	ldr	r0, [pc, #36]	@ (8002380 <initializeSystem+0x38>)
 800235a:	f7ff ffa5 	bl	80022a8 <initializeAxis>
    initializeAxis(&axes[1], &motors[2],&motors[3], 40, "X");
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <initializeSystem+0x3c>)
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2328      	movs	r3, #40	@ 0x28
 8002364:	4a08      	ldr	r2, [pc, #32]	@ (8002388 <initializeSystem+0x40>)
 8002366:	4909      	ldr	r1, [pc, #36]	@ (800238c <initializeSystem+0x44>)
 8002368:	4809      	ldr	r0, [pc, #36]	@ (8002390 <initializeSystem+0x48>)
 800236a:	f7ff ff9d 	bl	80022a8 <initializeAxis>

    // Y-axis
   // initializeAxis(&axes[1], &motors[1], &motors[3], Y_AXIS_LENGTH, "Y");
    // TODO: ADD Z-AXIS should be a servo
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	080136ac 	.word	0x080136ac
 8002378:	20001054 	.word	0x20001054
 800237c:	20000fb4 	.word	0x20000fb4
 8002380:	20001234 	.word	0x20001234
 8002384:	080136b0 	.word	0x080136b0
 8002388:	20001194 	.word	0x20001194
 800238c:	200010f4 	.word	0x200010f4
 8002390:	2000125c 	.word	0x2000125c

08002394 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	213c      	movs	r1, #60	@ 0x3c
 80023a2:	4618      	mov	r0, r3
 80023a4:	f007 fdfc 	bl	8009fa0 <HAL_TIM_Encoder_Start>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	bf34      	ite	cc
 80023d4:	2301      	movcc	r3, #1
 80023d6:	2300      	movcs	r3, #0
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bf8c      	ite	hi
 80023e8:	2301      	movhi	r3, #1
 80023ea:	2300      	movls	r3, #0
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <CheckConnection>:



#include "extras.h"

bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo1){
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, 90);
 8002416:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8002470 <CheckConnection+0x64>
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8ec 	bl	80025f8 <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 78);
 8002420:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002474 <CheckConnection+0x68>
 8002424:	6838      	ldr	r0, [r7, #0]
 8002426:	f000 f8e7 	bl	80025f8 <SERVO_WritePosition>
	HAL_Delay(20000);
 800242a:	f644 6020 	movw	r0, #20000	@ 0x4e20
 800242e:	f003 fc85 	bl	8005d3c <HAL_Delay>
	bool x =0;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 8002436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800243a:	480f      	ldr	r0, [pc, #60]	@ (8002478 <CheckConnection+0x6c>)
 800243c:	f004 fb3a 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <CheckConnection+0x40>
	     x = true;
 8002446:	2301      	movs	r3, #1
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e001      	b.n	8002450 <CheckConnection+0x44>
	}
	else{
		 x=false;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, 105);
 8002450:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800247c <CheckConnection+0x70>
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f8cf 	bl	80025f8 <SERVO_WritePosition>
	SERVO_WritePosition(hservo1, 95);
 800245a:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8002480 <CheckConnection+0x74>
 800245e:	6838      	ldr	r0, [r7, #0]
 8002460:	f000 f8ca 	bl	80025f8 <SERVO_WritePosition>
	return x;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	42b40000 	.word	0x42b40000
 8002474:	429c0000 	.word	0x429c0000
 8002478:	40021000 	.word	0x40021000
 800247c:	42d20000 	.word	0x42d20000
 8002480:	42be0000 	.word	0x42be0000

08002484 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	4619      	mov	r1, r3
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f004 fb0d 	bl	8006ab4 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <IsSensorTriggered+0x24>
    	return false;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80024a8:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80024c0:	eeb0 0a67 	vmov.f32	s0, s15
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f80d 	bl	80024e4 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f007 f9ad 	bl	8009834 <HAL_TIM_PWM_Start>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 80024f0:	edd7 7a00 	vldr	s15, [r7]
 80024f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d503      	bpl.n	8002506 <PWM_WriteDuty+0x22>
    duty = 0.0;
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	e00a      	b.n	800251c <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8002506:	edd7 7a00 	vldr	s15, [r7]
 800250a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80025c8 <PWM_WriteDuty+0xe4>
 800250e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002516:	dd01      	ble.n	800251c <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8002518:	4b2c      	ldr	r3, [pc, #176]	@ (80025cc <PWM_WriteDuty+0xe8>)
 800251a:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252a:	3301      	adds	r3, #1
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002534:	edd7 7a00 	vldr	s15, [r7]
 8002538:	ee27 7a27 	vmul.f32	s14, s14, s15
 800253c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80025c8 <PWM_WriteDuty+0xe4>
 8002540:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <PWM_WriteDuty+0x7e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002560:	e02c      	b.n	80025bc <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b04      	cmp	r3, #4
 8002568:	d105      	bne.n	8002576 <PWM_WriteDuty+0x92>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002574:	e022      	b.n	80025bc <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d105      	bne.n	800258a <PWM_WriteDuty+0xa6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002588:	e018      	b.n	80025bc <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	2b0c      	cmp	r3, #12
 8002590:	d105      	bne.n	800259e <PWM_WriteDuty+0xba>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800259c:	e00e      	b.n	80025bc <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d105      	bne.n	80025b2 <PWM_WriteDuty+0xce>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80025b0:	e004      	b.n	80025bc <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	42c80000 	.word	0x42c80000
 80025cc:	42c80000 	.word	0x42c80000

080025d0 <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	SERVO_WritePosition(hservo, 70.0f);
 80025d8:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80025f4 <SERVO_Init+0x24>
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f80b 	bl	80025f8 <SERVO_WritePosition>
	PWM_Init(&(hservo->PwmOut));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff ff64 	bl	80024b2 <PWM_Init>
}
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	428c0000 	.word	0x428c0000

080025f8 <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8002604:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8002660 <SERVO_WritePosition+0x68>
 8002608:	ed97 0a00 	vldr	s0, [r7]
 800260c:	f010 ff47 	bl	801349e <fminf>
 8002610:	eef0 7a40 	vmov.f32	s15, s0
 8002614:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002664 <SERVO_WritePosition+0x6c>
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	f010 ff22 	bl	8013464 <fmaxf>
 8002620:	eef0 7a40 	vmov.f32	s15, s0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002630:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002660 <SERVO_WritePosition+0x68>
 8002634:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002638:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800263c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002640:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8002644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002648:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff ff46 	bl	80024e4 <PWM_WriteDuty>
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	43340000 	.word	0x43340000
 8002664:	00000000 	.word	0x00000000

08002668 <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0f      	ldr	r2, [pc, #60]	@ (80026b4 <HAL_UART_RxCpltCallback+0x4c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_UART_RxCpltCallback+0x30>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_UART_RxCpltCallback+0x50>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_UART_RxCpltCallback+0x30>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0c      	ldr	r2, [pc, #48]	@ (80026bc <HAL_UART_RxCpltCallback+0x54>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_UART_RxCpltCallback+0x30>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <HAL_UART_RxCpltCallback+0x58>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d108      	bne.n	80026aa <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_UART_RxCpltCallback+0x5c>)
 800269a:	2209      	movs	r2, #9
 800269c:	4619      	mov	r1, r3
 800269e:	480a      	ldr	r0, [pc, #40]	@ (80026c8 <HAL_UART_RxCpltCallback+0x60>)
 80026a0:	f010 fa94 	bl	8012bcc <memcpy>
        rxBufferReady = 1;
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_UART_RxCpltCallback+0x64>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40004400 	.word	0x40004400
 80026b8:	40011400 	.word	0x40011400
 80026bc:	40004c00 	.word	0x40004c00
 80026c0:	40005000 	.word	0x40005000
 80026c4:	200000f1 	.word	0x200000f1
 80026c8:	200000fc 	.word	0x200000fc
 80026cc:	20000104 	.word	0x20000104

080026d0 <RunSemiAutoCalibrationStateMachine>:
/*-------------------------------------------------------------------
  RunCalibrationStateMachine(): Encapsulates the calibration logic.
  Parameters can include pointers to LCD, motors, and any other state
  needed to update the calibration instructions.
-------------------------------------------------------------------*/
void RunSemiAutoCalibrationStateMachine(LCD_I2C_HandleTypeDef *hlcd, Motor *motors) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
    semiAutoCalibration(&axes,&motors);
 80026da:	463b      	mov	r3, r7
 80026dc:	4619      	mov	r1, r3
 80026de:	487f      	ldr	r0, [pc, #508]	@ (80028dc <RunSemiAutoCalibrationStateMachine+0x20c>)
 80026e0:	f001 f92e 	bl	8003940 <semiAutoCalibration>

	switch (calibSubState)
 80026e4:	4b7e      	ldr	r3, [pc, #504]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	f200 80e8 	bhi.w	80028be <RunSemiAutoCalibrationStateMachine+0x1ee>
 80026ee:	a201      	add	r2, pc, #4	@ (adr r2, 80026f4 <RunSemiAutoCalibrationStateMachine+0x24>)
 80026f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026f4:	0800271d 	.word	0x0800271d
 80026f8:	08002759 	.word	0x08002759
 80026fc:	0800279f 	.word	0x0800279f
 8002700:	080027e9 	.word	0x080027e9
 8002704:	080028bf 	.word	0x080028bf
 8002708:	080028bf 	.word	0x080028bf
 800270c:	08002835 	.word	0x08002835
 8002710:	080028bf 	.word	0x080028bf
 8002714:	0800287d 	.word	0x0800287d
 8002718:	080028b7 	.word	0x080028b7
    {

        case CALIB_STATE_INIT:
            LCD_I2C_Clear(hlcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f7fe f899 	bl	8000854 <LCD_I2C_Clear>
            LCD_I2C_SetCursor(hlcd, 0, 1);
 8002722:	2201      	movs	r2, #1
 8002724:	2100      	movs	r1, #0
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe f874 	bl	8000814 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "cheetosckjrcjo to move");
 800272c:	496d      	ldr	r1, [pc, #436]	@ (80028e4 <RunSemiAutoCalibrationStateMachine+0x214>)
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7fe f836 	bl	80007a0 <LCD_I2C_printStr>
            LCD_I2C_SetCursor(hlcd, 1, 1);
 8002734:	2201      	movs	r2, #1
 8002736:	2101      	movs	r1, #1
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fe f86b 	bl	8000814 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "probe 1");
 800273e:	496a      	ldr	r1, [pc, #424]	@ (80028e8 <RunSemiAutoCalibrationStateMachine+0x218>)
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7fe f82d 	bl	80007a0 <LCD_I2C_printStr>
            delayStartTime = xTaskGetTickCount();
 8002746:	f00e ff6f 	bl	8011628 <xTaskGetTickCount>
 800274a:	4603      	mov	r3, r0
 800274c:	4a67      	ldr	r2, [pc, #412]	@ (80028ec <RunSemiAutoCalibrationStateMachine+0x21c>)
 800274e:	6013      	str	r3, [r2, #0]
            calibSubState = CALIB_STATE_INSTRUCT_PROBE1;
 8002750:	4b63      	ldr	r3, [pc, #396]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
            break;
 8002756:	e0bd      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>

        case CALIB_STATE_INSTRUCT_PROBE1:
            // Wait 2000ms nonblocking
            if ((xTaskGetTickCount() - delayStartTime) >= pdMS_TO_TICKS(2000))
 8002758:	f00e ff66 	bl	8011628 <xTaskGetTickCount>
 800275c:	4602      	mov	r2, r0
 800275e:	4b63      	ldr	r3, [pc, #396]	@ (80028ec <RunSemiAutoCalibrationStateMachine+0x21c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002768:	f0c0 80ab 	bcc.w	80028c2 <RunSemiAutoCalibrationStateMachine+0x1f2>
            {
                LCD_I2C_Clear(hlcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7fe f871 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7fe f84c 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 1 facing");
 800277c:	495c      	ldr	r1, [pc, #368]	@ (80028f0 <RunSemiAutoCalibrationStateMachine+0x220>)
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe f80e 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 8002784:	2200      	movs	r2, #0
 8002786:	2101      	movs	r1, #1
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fe f843 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "X-axis edge 1");
 800278e:	4959      	ldr	r1, [pc, #356]	@ (80028f4 <RunSemiAutoCalibrationStateMachine+0x224>)
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f7fe f805 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE1_DONE;
 8002796:	4b52      	ldr	r3, [pc, #328]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 8002798:	2202      	movs	r2, #2
 800279a:	701a      	strb	r2, [r3, #0]
            }
            break;
 800279c:	e091      	b.n	80028c2 <RunSemiAutoCalibrationStateMachine+0x1f2>

        case CALIB_STATE_WAIT_PROBE1_DONE:
            if (Iscalib1Done(&motors[0], &motors[2]))
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80027a6:	4619      	mov	r1, r3
 80027a8:	4610      	mov	r0, r2
 80027aa:	f001 fadb 	bl	8003d64 <Iscalib1Done>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8088 	beq.w	80028c6 <RunSemiAutoCalibrationStateMachine+0x1f6>
            {
                LCD_I2C_Clear(hlcd);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f84c 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 80027bc:	2200      	movs	r2, #0
 80027be:	2100      	movs	r1, #0
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7fe f827 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 2 facing");
 80027c6:	494c      	ldr	r1, [pc, #304]	@ (80028f8 <RunSemiAutoCalibrationStateMachine+0x228>)
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7fd ffe9 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 80027ce:	2200      	movs	r2, #0
 80027d0:	2101      	movs	r1, #1
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f81e 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Y-axis edge 1");
 80027d8:	4948      	ldr	r1, [pc, #288]	@ (80028fc <RunSemiAutoCalibrationStateMachine+0x22c>)
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fd ffe0 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_INSTRUCT_PROBE2;
 80027e0:	4b3f      	ldr	r3, [pc, #252]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 80027e2:	2203      	movs	r2, #3
 80027e4:	701a      	strb	r2, [r3, #0]
            }
            break;
 80027e6:	e06e      	b.n	80028c6 <RunSemiAutoCalibrationStateMachine+0x1f6>

        case CALIB_STATE_INSTRUCT_PROBE2:
            if (Iscalib1Done(&motors[1], &motors[3]))
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f001 fab4 	bl	8003d64 <Iscalib1Done>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <RunSemiAutoCalibrationStateMachine+0x1fa>
            {
                LCD_I2C_Clear(hlcd);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f826 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7fe f801 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 1 facing");
 8002812:	4937      	ldr	r1, [pc, #220]	@ (80028f0 <RunSemiAutoCalibrationStateMachine+0x220>)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7fd ffc3 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 800281a:	2200      	movs	r2, #0
 800281c:	2101      	movs	r1, #1
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f7fd fff8 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Y-axis edge 1");
 8002824:	4935      	ldr	r1, [pc, #212]	@ (80028fc <RunSemiAutoCalibrationStateMachine+0x22c>)
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fd ffba 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE1_Y_DONE;
 800282c:	4b2c      	ldr	r3, [pc, #176]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 800282e:	2206      	movs	r2, #6
 8002830:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002832:	e04a      	b.n	80028ca <RunSemiAutoCalibrationStateMachine+0x1fa>

        case CALIB_STATE_WAIT_PROBE1_Y_DONE:
            if (Iscalib2Done(&motors[0], &motors[2]))
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800283c:	4619      	mov	r1, r3
 800283e:	4610      	mov	r0, r2
 8002840:	f001 faae 	bl	8003da0 <Iscalib2Done>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d041      	beq.n	80028ce <RunSemiAutoCalibrationStateMachine+0x1fe>
            {
                LCD_I2C_Clear(hlcd);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe f802 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002850:	2200      	movs	r2, #0
 8002852:	2100      	movs	r1, #0
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7fd ffdd 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 2 facing");
 800285a:	4927      	ldr	r1, [pc, #156]	@ (80028f8 <RunSemiAutoCalibrationStateMachine+0x228>)
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7fd ff9f 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2101      	movs	r1, #1
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fd ffd4 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "X-axis edge 2");
 800286c:	4924      	ldr	r1, [pc, #144]	@ (8002900 <RunSemiAutoCalibrationStateMachine+0x230>)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fd ff96 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE2_X_DONE;
 8002874:	4b1a      	ldr	r3, [pc, #104]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 8002876:	2208      	movs	r2, #8
 8002878:	701a      	strb	r2, [r3, #0]
            }
            break;
 800287a:	e028      	b.n	80028ce <RunSemiAutoCalibrationStateMachine+0x1fe>

        case CALIB_STATE_WAIT_PROBE2_X_DONE:
            if (Iscalib2Done(&motors[1], &motors[3]))
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002888:	4619      	mov	r1, r3
 800288a:	4610      	mov	r0, r2
 800288c:	f001 fa88 	bl	8003da0 <Iscalib2Done>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01d      	beq.n	80028d2 <RunSemiAutoCalibrationStateMachine+0x202>
            {
                LCD_I2C_Clear(hlcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd ffdc 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 800289c:	2200      	movs	r2, #0
 800289e:	2100      	movs	r1, #0
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7fd ffb7 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Points saved");
 80028a6:	4917      	ldr	r1, [pc, #92]	@ (8002904 <RunSemiAutoCalibrationStateMachine+0x234>)
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7fd ff79 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_COMPLETE;
 80028ae:	4b0c      	ldr	r3, [pc, #48]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 80028b0:	2209      	movs	r2, #9
 80028b2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80028b4:	e00d      	b.n	80028d2 <RunSemiAutoCalibrationStateMachine+0x202>

        case CALIB_STATE_COMPLETE:
            // You may change to the next overall state here.
            // For example: currentState = MENU_STATE_CALIBRATION3;
            // Reset the substate for future calibration sessions.
            calibSubState = CALIB_STATE_INIT;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <RunSemiAutoCalibrationStateMachine+0x210>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
            break;
 80028bc:	e00a      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>

        default:
            break;
 80028be:	bf00      	nop
 80028c0:	e008      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>
            break;
 80028c2:	bf00      	nop
 80028c4:	e006      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>
            break;
 80028c6:	bf00      	nop
 80028c8:	e004      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>
            break;
 80028ca:	bf00      	nop
 80028cc:	e002      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>
            break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <RunSemiAutoCalibrationStateMachine+0x204>
            break;
 80028d2:	bf00      	nop
    }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20001234 	.word	0x20001234
 80028e0:	2000010d 	.word	0x2000010d
 80028e4:	080136b4 	.word	0x080136b4
 80028e8:	080136cc 	.word	0x080136cc
 80028ec:	20000110 	.word	0x20000110
 80028f0:	080136d4 	.word	0x080136d4
 80028f4:	080136ec 	.word	0x080136ec
 80028f8:	080136fc 	.word	0x080136fc
 80028fc:	08013714 	.word	0x08013714
 8002900:	08013724 	.word	0x08013724
 8002904:	08013734 	.word	0x08013734

08002908 <RunManualCalibrationStateMachine>:


void RunManualCalibrationStateMachine(LCD_I2C_HandleTypeDef *hlcd, Motor *motors) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
    switch (calibSubState)
 8002912:	4b80      	ldr	r3, [pc, #512]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b09      	cmp	r3, #9
 8002918:	f200 80e9 	bhi.w	8002aee <RunManualCalibrationStateMachine+0x1e6>
 800291c:	a201      	add	r2, pc, #4	@ (adr r2, 8002924 <RunManualCalibrationStateMachine+0x1c>)
 800291e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002922:	bf00      	nop
 8002924:	0800294d 	.word	0x0800294d
 8002928:	08002989 	.word	0x08002989
 800292c:	080029cf 	.word	0x080029cf
 8002930:	08002a19 	.word	0x08002a19
 8002934:	08002aef 	.word	0x08002aef
 8002938:	08002aef 	.word	0x08002aef
 800293c:	08002a65 	.word	0x08002a65
 8002940:	08002aef 	.word	0x08002aef
 8002944:	08002aad 	.word	0x08002aad
 8002948:	08002ae7 	.word	0x08002ae7
    {
        ManualCalibration(&axes,&motors);

        case CALIB_STATE_INIT:
            LCD_I2C_Clear(hlcd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fd ff81 	bl	8000854 <LCD_I2C_Clear>
            LCD_I2C_SetCursor(hlcd, 0, 1);
 8002952:	2201      	movs	r2, #1
 8002954:	2100      	movs	r1, #0
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7fd ff5c 	bl	8000814 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Use buttons to move");
 800295c:	496e      	ldr	r1, [pc, #440]	@ (8002b18 <RunManualCalibrationStateMachine+0x210>)
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7fd ff1e 	bl	80007a0 <LCD_I2C_printStr>
            LCD_I2C_SetCursor(hlcd, 1, 1);
 8002964:	2201      	movs	r2, #1
 8002966:	2101      	movs	r1, #1
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7fd ff53 	bl	8000814 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "probe 1");
 800296e:	496b      	ldr	r1, [pc, #428]	@ (8002b1c <RunManualCalibrationStateMachine+0x214>)
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7fd ff15 	bl	80007a0 <LCD_I2C_printStr>
            delayStartTime = xTaskGetTickCount();
 8002976:	f00e fe57 	bl	8011628 <xTaskGetTickCount>
 800297a:	4603      	mov	r3, r0
 800297c:	4a68      	ldr	r2, [pc, #416]	@ (8002b20 <RunManualCalibrationStateMachine+0x218>)
 800297e:	6013      	str	r3, [r2, #0]
            calibSubState = CALIB_STATE_INSTRUCT_PROBE1;
 8002980:	4b64      	ldr	r3, [pc, #400]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
            break;
 8002986:	e0bd      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>

        case CALIB_STATE_INSTRUCT_PROBE1:
            // Wait 2000ms nonblocking
            if ((xTaskGetTickCount() - delayStartTime) >= pdMS_TO_TICKS(2000))
 8002988:	f00e fe4e 	bl	8011628 <xTaskGetTickCount>
 800298c:	4602      	mov	r2, r0
 800298e:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <RunManualCalibrationStateMachine+0x218>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002998:	f0c0 80ab 	bcc.w	8002af2 <RunManualCalibrationStateMachine+0x1ea>
            {
                LCD_I2C_Clear(hlcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fd ff59 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fd ff34 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 1 on");
 80029ac:	495d      	ldr	r1, [pc, #372]	@ (8002b24 <RunManualCalibrationStateMachine+0x21c>)
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fd fef6 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	2101      	movs	r1, #1
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7fd ff2b 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "X-axis edge 1");
 80029be:	495a      	ldr	r1, [pc, #360]	@ (8002b28 <RunManualCalibrationStateMachine+0x220>)
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fd feed 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE1_DONE;
 80029c6:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 80029c8:	2202      	movs	r2, #2
 80029ca:	701a      	strb	r2, [r3, #0]
            }
            break;
 80029cc:	e091      	b.n	8002af2 <RunManualCalibrationStateMachine+0x1ea>

        case CALIB_STATE_WAIT_PROBE1_DONE:
            if (Iscalib1Done(&motors[0], &motors[2]))
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f001 f9c3 	bl	8003d64 <Iscalib1Done>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 8088 	beq.w	8002af6 <RunManualCalibrationStateMachine+0x1ee>
            {
                LCD_I2C_Clear(hlcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd ff34 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd ff0f 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 2 on");
 80029f6:	494d      	ldr	r1, [pc, #308]	@ (8002b2c <RunManualCalibrationStateMachine+0x224>)
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f7fd fed1 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 80029fe:	2200      	movs	r2, #0
 8002a00:	2101      	movs	r1, #1
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7fd ff06 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Y-axis edge 1");
 8002a08:	4949      	ldr	r1, [pc, #292]	@ (8002b30 <RunManualCalibrationStateMachine+0x228>)
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fd fec8 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_INSTRUCT_PROBE2;
 8002a10:	4b40      	ldr	r3, [pc, #256]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002a12:	2203      	movs	r2, #3
 8002a14:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002a16:	e06e      	b.n	8002af6 <RunManualCalibrationStateMachine+0x1ee>

        case CALIB_STATE_INSTRUCT_PROBE2:
            if (Iscalib1Done(&motors[1], &motors[3]))
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002a24:	4619      	mov	r1, r3
 8002a26:	4610      	mov	r0, r2
 8002a28:	f001 f99c 	bl	8003d64 <Iscalib1Done>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <RunManualCalibrationStateMachine+0x1f2>
            {
                LCD_I2C_Clear(hlcd);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd ff0e 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fd fee9 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 1 on");
 8002a42:	4938      	ldr	r1, [pc, #224]	@ (8002b24 <RunManualCalibrationStateMachine+0x21c>)
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7fd feab 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fd fee0 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "x-axis edge 2");
 8002a54:	4937      	ldr	r1, [pc, #220]	@ (8002b34 <RunManualCalibrationStateMachine+0x22c>)
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fd fea2 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE1_Y_DONE;
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002a5e:	2206      	movs	r2, #6
 8002a60:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002a62:	e04a      	b.n	8002afa <RunManualCalibrationStateMachine+0x1f2>

        case CALIB_STATE_WAIT_PROBE1_Y_DONE:
            if (Iscalib2Done(&motors[0], &motors[2]))
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f001 f996 	bl	8003da0 <Iscalib2Done>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d041      	beq.n	8002afe <RunManualCalibrationStateMachine+0x1f6>
            {
                LCD_I2C_Clear(hlcd);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fd feea 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002a80:	2200      	movs	r2, #0
 8002a82:	2100      	movs	r1, #0
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7fd fec5 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Place probe 2 on");
 8002a8a:	4928      	ldr	r1, [pc, #160]	@ (8002b2c <RunManualCalibrationStateMachine+0x224>)
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f7fd fe87 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, 1, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2101      	movs	r1, #1
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd febc 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "y-axis edge 2");
 8002a9c:	4926      	ldr	r1, [pc, #152]	@ (8002b38 <RunManualCalibrationStateMachine+0x230>)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fd fe7e 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_WAIT_PROBE2_X_DONE;
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002aaa:	e028      	b.n	8002afe <RunManualCalibrationStateMachine+0x1f6>

        case CALIB_STATE_WAIT_PROBE2_X_DONE:
            if (Iscalib2Done(&motors[1], &motors[3]))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	f103 02a0 	add.w	r2, r3, #160	@ 0xa0
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f001 f970 	bl	8003da0 <Iscalib2Done>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d01d      	beq.n	8002b02 <RunManualCalibrationStateMachine+0x1fa>
            {
                LCD_I2C_Clear(hlcd);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd fec4 	bl	8000854 <LCD_I2C_Clear>
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8002acc:	2200      	movs	r2, #0
 8002ace:	2100      	movs	r1, #0
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7fd fe9f 	bl	8000814 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Points saved");
 8002ad6:	4919      	ldr	r1, [pc, #100]	@ (8002b3c <RunManualCalibrationStateMachine+0x234>)
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7fd fe61 	bl	80007a0 <LCD_I2C_printStr>
                calibSubState = CALIB_STATE_COMPLETE;
 8002ade:	4b0d      	ldr	r3, [pc, #52]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002ae0:	2209      	movs	r2, #9
 8002ae2:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002ae4:	e00d      	b.n	8002b02 <RunManualCalibrationStateMachine+0x1fa>

        case CALIB_STATE_COMPLETE:
            // You may change to the next overall state here.
            // For example: currentState = MENU_STATE_CALIBRATION3;
            // Reset the substate for future calibration sessions.
            calibSubState = CALIB_STATE_INIT;
 8002ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <RunManualCalibrationStateMachine+0x20c>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
            break;
 8002aec:	e00a      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>

        default:
            break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>
            break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>
            break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>
            break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>
            break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <RunManualCalibrationStateMachine+0x1fc>
            break;
 8002b02:	bf00      	nop
    }
    /* Yield for a short time so other tasks can run */
    vTaskDelay(pdMS_TO_TICKS(10));
 8002b04:	200a      	movs	r0, #10
 8002b06:	f00e fc43 	bl	8011390 <vTaskDelay>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	2000010d 	.word	0x2000010d
 8002b18:	08013744 	.word	0x08013744
 8002b1c:	080136cc 	.word	0x080136cc
 8002b20:	20000110 	.word	0x20000110
 8002b24:	08013758 	.word	0x08013758
 8002b28:	080136ec 	.word	0x080136ec
 8002b2c:	0801376c 	.word	0x0801376c
 8002b30:	08013714 	.word	0x08013714
 8002b34:	08013780 	.word	0x08013780
 8002b38:	08013790 	.word	0x08013790
 8002b3c:	08013734 	.word	0x08013734

08002b40 <calibProcessTask>:
void calibProcessTask(void *pvParameters){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
 8002b46:	6078      	str	r0, [r7, #4]


    MenuTaskParams_t *menuParams = (MenuTaskParams_t *)pvParameters;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	60fb      	str	r3, [r7, #12]
	for(;;){
		EventBits_t uxBits = xEventGroupWaitBits(calibEventGroup, CALIB_START_BIT,
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <calibProcessTask+0x78>)
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2300      	movs	r3, #0
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	f00d f906 	bl	800fd6c <xEventGroupWaitBits>
 8002b60:	60b8      	str	r0, [r7, #8]
		                                                   pdTRUE, pdFALSE, portMAX_DELAY);
		if (uxBits & CALIB_START_BIT) {
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d021      	beq.n	8002bb0 <calibProcessTask+0x70>
//		    LCD_I2C_Clear(&hlcd3);
//		    LCD_I2C_SetCursor(&hlcd3, 0, 0);
//		    LCD_I2C_printStr(&hlcd3, "Calibration Start");
//		    xSemaphoreGive(lcdMutex);
//		  }
     switch(g_calibSelection){
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <calibProcessTask+0x7c>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d013      	beq.n	8002b9e <calibProcessTask+0x5e>
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	dc19      	bgt.n	8002bae <calibProcessTask+0x6e>
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d002      	beq.n	8002b84 <calibProcessTask+0x44>
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d005      	beq.n	8002b8e <calibProcessTask+0x4e>
        case 3: // MANUAL
        RunManualCalibrationStateMachine(&hlcd3, &motors);
        currentState = MENU_STATE_CALIBRATION3;
        break;
        default:
        break;
 8002b82:	e014      	b.n	8002bae <calibProcessTask+0x6e>
        AutoCalibration(&axes,&motors); 
 8002b84:	490e      	ldr	r1, [pc, #56]	@ (8002bc0 <calibProcessTask+0x80>)
 8002b86:	480f      	ldr	r0, [pc, #60]	@ (8002bc4 <calibProcessTask+0x84>)
 8002b88:	f000 fb74 	bl	8003274 <AutoCalibration>
        break;
 8002b8c:	e010      	b.n	8002bb0 <calibProcessTask+0x70>
        RunSemiAutoCalibrationStateMachine(&hlcd3,&motors);
 8002b8e:	490c      	ldr	r1, [pc, #48]	@ (8002bc0 <calibProcessTask+0x80>)
 8002b90:	480d      	ldr	r0, [pc, #52]	@ (8002bc8 <calibProcessTask+0x88>)
 8002b92:	f7ff fd9d 	bl	80026d0 <RunSemiAutoCalibrationStateMachine>
        currentState = MENU_STATE_CALIBRATION2;
 8002b96:	4b0d      	ldr	r3, [pc, #52]	@ (8002bcc <calibProcessTask+0x8c>)
 8002b98:	2203      	movs	r2, #3
 8002b9a:	701a      	strb	r2, [r3, #0]
        break;
 8002b9c:	e008      	b.n	8002bb0 <calibProcessTask+0x70>
        RunManualCalibrationStateMachine(&hlcd3, &motors);
 8002b9e:	4908      	ldr	r1, [pc, #32]	@ (8002bc0 <calibProcessTask+0x80>)
 8002ba0:	4809      	ldr	r0, [pc, #36]	@ (8002bc8 <calibProcessTask+0x88>)
 8002ba2:	f7ff feb1 	bl	8002908 <RunManualCalibrationStateMachine>
        currentState = MENU_STATE_CALIBRATION3;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	@ (8002bcc <calibProcessTask+0x8c>)
 8002ba8:	2204      	movs	r2, #4
 8002baa:	701a      	strb	r2, [r3, #0]
        break;
 8002bac:	e000      	b.n	8002bb0 <calibProcessTask+0x70>
        break;
 8002bae:	bf00      	nop
        xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
    }
        // Short delay to let other tasks run.

       }
		vTaskDelay(pdMS_TO_TICKS(10));
 8002bb0:	200a      	movs	r0, #10
 8002bb2:	f00e fbed 	bl	8011390 <vTaskDelay>
	for(;;){
 8002bb6:	e7c9      	b.n	8002b4c <calibProcessTask+0xc>
 8002bb8:	20000114 	.word	0x20000114
 8002bbc:	2000011c 	.word	0x2000011c
 8002bc0:	20000fb4 	.word	0x20000fb4
 8002bc4:	20001234 	.word	0x20001234
 8002bc8:	20000018 	.word	0x20000018
 8002bcc:	2000010c 	.word	0x2000010c

08002bd0 <motorControlTask>:
   }
}



void motorControlTask(void *argument) {
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
		// Queue for motor cmds
	motorCommandQueue = xQueueCreate(10, sizeof(MotorCommand));
 8002bd8:	2200      	movs	r2, #0
 8002bda:	210c      	movs	r1, #12
 8002bdc:	200a      	movs	r0, #10
 8002bde:	f00d fbf8 	bl	80103d2 <xQueueGenericCreate>
 8002be2:	4603      	mov	r3, r0
 8002be4:	4a37      	ldr	r2, [pc, #220]	@ (8002cc4 <motorControlTask+0xf4>)
 8002be6:	6013      	str	r3, [r2, #0]
	configASSERT(motorCommandQueue != NULL);
 8002be8:	4b36      	ldr	r3, [pc, #216]	@ (8002cc4 <motorControlTask+0xf4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <motorControlTask+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	b672      	cpsid	i
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	b662      	cpsie	i
 8002c04:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c06:	bf00      	nop
 8002c08:	bf00      	nop
 8002c0a:	e7fd      	b.n	8002c08 <motorControlTask+0x38>

	MotorCommand cmd;

    for(;;) {
    // Wait for a command from the queue
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <motorControlTask+0xf4>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f107 0108 	add.w	r1, r7, #8
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f00d fe11 	bl	8010840 <xQueueReceive>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d146      	bne.n	8002cb2 <motorControlTask+0xe2>
    		switch (cmd.command){
 8002c24:	7a3b      	ldrb	r3, [r7, #8]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d842      	bhi.n	8002cb0 <motorControlTask+0xe0>
 8002c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <motorControlTask+0x60>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c59 	.word	0x08002c59
 8002c34:	08002c7d 	.word	0x08002c7d
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002c95 	.word	0x08002c95

    		case	MOTOR_CMD_START: // Start the motor
    				TMC2209_Start(&motors[cmd.motorIndex]);
 8002c40:	7abb      	ldrb	r3, [r7, #10]
 8002c42:	461a      	mov	r2, r3
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	015b      	lsls	r3, r3, #5
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <motorControlTask+0xf8>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe fba3 	bl	800139c <TMC2209_Start>
    				break;
 8002c56:	e02c      	b.n	8002cb2 <motorControlTask+0xe2>

    		case	MOTOR_CMD_MOVETO: // Move the motor to a target position
    				TMC2209_MoveTo(&axes[cmd.axisIndex], cmd.motorIndex, cmd.targetPositionMM);
 8002c58:	7a7b      	ldrb	r3, [r7, #9]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4a19      	ldr	r2, [pc, #100]	@ (8002ccc <motorControlTask+0xfc>)
 8002c66:	4413      	add	r3, r2
 8002c68:	7aba      	ldrb	r2, [r7, #10]
 8002c6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fe fbf7 	bl	8001468 <TMC2209_MoveTo>
    				break;
 8002c7a:	e01a      	b.n	8002cb2 <motorControlTask+0xe2>

    		case	MOTOR_CMD_STOP:	// Stop the motor
    				TMC2209_Stop(&motors[cmd.motorIndex]);
 8002c7c:	7abb      	ldrb	r3, [r7, #10]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	015b      	lsls	r3, r3, #5
 8002c88:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc8 <motorControlTask+0xf8>)
 8002c8a:	4413      	add	r3, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fb6f 	bl	8001370 <TMC2209_Stop>

    				break;
 8002c92:	e00e      	b.n	8002cb2 <motorControlTask+0xe2>

    		case 	MOTOR_CMD_DIRECTION:
    				TMC2209_SetDirection(&motors[cmd.motorIndex], cmd.direction);
 8002c94:	7abb      	ldrb	r3, [r7, #10]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	015b      	lsls	r3, r3, #5
 8002ca0:	4a09      	ldr	r2, [pc, #36]	@ (8002cc8 <motorControlTask+0xf8>)
 8002ca2:	4413      	add	r3, r2
 8002ca4:	7c3a      	ldrb	r2, [r7, #16]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe fad5 	bl	8001258 <TMC2209_SetDirection>
    				break;
 8002cae:	e000      	b.n	8002cb2 <motorControlTask+0xe2>
    		default: // unkown command
    				break;
 8002cb0:	bf00      	nop
    		}
    	}



    	taskYIELD();
 8002cb2:	4b07      	ldr	r3, [pc, #28]	@ (8002cd0 <motorControlTask+0x100>)
 8002cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb8:	601a      	str	r2, [r3, #0]
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	f3bf 8f6f 	isb	sy
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8002cc2:	e7a3      	b.n	8002c0c <motorControlTask+0x3c>
 8002cc4:	20000108 	.word	0x20000108
 8002cc8:	20000fb4 	.word	0x20000fb4
 8002ccc:	20001234 	.word	0x20001234
 8002cd0:	e000ed04 	.word	0xe000ed04

08002cd4 <stallMonitorTask>:

/*
 * Stall Monitor Task
 * This task will check the diag pin of each motor and send a stop command for the motor that stalled.
 */
void stallMonitorTask(void *argument) {
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
	MotorCommand stallCmd;
	stallCmd.command = MOTOR_CMD_STOP;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	723b      	strb	r3, [r7, #8]

    for(;;) {
        for(int i = 0; i < MAX_MOTORS; i++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e039      	b.n	8002d5a <stallMonitorTask+0x86>
        	motors[i].STALL = HAL_GPIO_ReadPin(motors[i].driver.diag_port, motors[i].driver.diag_pin);
 8002ce6:	4920      	ldr	r1, [pc, #128]	@ (8002d68 <stallMonitorTask+0x94>)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	015b      	lsls	r3, r3, #5
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3354      	adds	r3, #84	@ 0x54
 8002cf6:	6818      	ldr	r0, [r3, #0]
 8002cf8:	491b      	ldr	r1, [pc, #108]	@ (8002d68 <stallMonitorTask+0x94>)
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	015b      	lsls	r3, r3, #5
 8002d04:	440b      	add	r3, r1
 8002d06:	3358      	adds	r3, #88	@ 0x58
 8002d08:	881b      	ldrh	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f003 fed2 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4618      	mov	r0, r3
 8002d14:	4914      	ldr	r1, [pc, #80]	@ (8002d68 <stallMonitorTask+0x94>)
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	015b      	lsls	r3, r3, #5
 8002d20:	440b      	add	r3, r1
 8002d22:	339c      	adds	r3, #156	@ 0x9c
 8002d24:	4602      	mov	r2, r0
 8002d26:	701a      	strb	r2, [r3, #0]

            if(motors[i].STALL == GPIO_PIN_SET) {  // Stall detected
 8002d28:	490f      	ldr	r1, [pc, #60]	@ (8002d68 <stallMonitorTask+0x94>)
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	015b      	lsls	r3, r3, #5
 8002d34:	440b      	add	r3, r1
 8002d36:	339c      	adds	r3, #156	@ 0x9c
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10a      	bne.n	8002d54 <stallMonitorTask+0x80>
                stallCmd.motorIndex = i;
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	72bb      	strb	r3, [r7, #10]
                 1;
            xQueueSend(motorCommandQueue, &stallCmd, pdMS_TO_TICKS(10));
 8002d44:	4b09      	ldr	r3, [pc, #36]	@ (8002d6c <stallMonitorTask+0x98>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	f107 0108 	add.w	r1, r7, #8
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	220a      	movs	r2, #10
 8002d50:	f00d fbd4 	bl	80104fc <xQueueGenericSend>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	ddc2      	ble.n	8002ce6 <stallMonitorTask+0x12>

            }
        }
        vTaskDelay(pdMS_TO_TICKS(STALL_CHECK_INTERVAL_MS));
 8002d60:	2032      	movs	r0, #50	@ 0x32
 8002d62:	f00e fb15 	bl	8011390 <vTaskDelay>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8002d66:	e7bb      	b.n	8002ce0 <stallMonitorTask+0xc>
 8002d68:	20000fb4 	.word	0x20000fb4
 8002d6c:	20000108 	.word	0x20000108

08002d70 <vMainMenuTask>:
 * FreeRTOS task to handle the main menu.
 * This task will display the menu, wait for a selection,
 * and then call the handler for that selection.
 */
void vMainMenuTask(void *pvParameters)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08c      	sub	sp, #48	@ 0x30
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	6078      	str	r0, [r7, #4]
    currentState = MENU_STATE_CALIBRATION;
 8002d78:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	701a      	strb	r2, [r3, #0]
    MenuTaskParams_t *menuParams = (MenuTaskParams_t *)pvParameters;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	627b      	str	r3, [r7, #36]	@ 0x24

    for (;;) {

        switch (currentState) {
 8002d82:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	f200 808b 	bhi.w	8002ea2 <vMainMenuTask+0x132>
 8002d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <vMainMenuTask+0x24>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002dad 	.word	0x08002dad
 8002d98:	08002df3 	.word	0x08002df3
 8002d9c:	08002e03 	.word	0x08002e03
 8002da0:	08002ea3 	.word	0x08002ea3
 8002da4:	08002ea3 	.word	0x08002ea3
 8002da8:	08002e67 	.word	0x08002e67

            case MENU_STATE_MAIN:
                {
                    // Display main menu and get selection.
                	const char* menuItems[] = {"Test from SD", "Prepare Machine"};
 8002dac:	4a43      	ldr	r2, [pc, #268]	@ (8002ebc <vMainMenuTask+0x14c>)
 8002dae:	f107 0318 	add.w	r3, r7, #24
 8002db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002db6:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t mainSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1, menuItems,2, 0);
 8002dba:	f107 0218 	add.w	r2, r7, #24
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	493e      	ldr	r1, [pc, #248]	@ (8002ec0 <vMainMenuTask+0x150>)
 8002dc6:	483f      	ldr	r0, [pc, #252]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002dc8:	f7fd fdea 	bl	80009a0 <LCD_I2C_menuTemplate>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                    if (mainSelection == 0) {
 8002dd2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <vMainMenuTask+0x72>
                        currentState = MENU_STATE_SD_TEST;
 8002dda:	4b37      	ldr	r3, [pc, #220]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
                    } else if (mainSelection == 1) {
                        currentState = MENU_STATE_PREPARE_MACHINE;
                    } 
                }
                break;
 8002de0:	e063      	b.n	8002eaa <vMainMenuTask+0x13a>
                    } else if (mainSelection == 1) {
 8002de2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d15f      	bne.n	8002eaa <vMainMenuTask+0x13a>
                        currentState = MENU_STATE_PREPARE_MACHINE;
 8002dea:	4b33      	ldr	r3, [pc, #204]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002dec:	2205      	movs	r2, #5
 8002dee:	701a      	strb	r2, [r3, #0]
                break;
 8002df0:	e05b      	b.n	8002eaa <vMainMenuTask+0x13a>

            case MENU_STATE_SD_TEST:
                {
                    // Display SD card test menu or process SD card files.

                       LCD_I2C_DisplaySDMenu(&hlcd3, &henc1);
 8002df2:	4933      	ldr	r1, [pc, #204]	@ (8002ec0 <vMainMenuTask+0x150>)
 8002df4:	4833      	ldr	r0, [pc, #204]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002df6:	f7fe f83b 	bl	8000e70 <LCD_I2C_DisplaySDMenu>
                       currentState = MENU_STATE_CALIBRATION;
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	701a      	strb	r2, [r3, #0]


                        //currentState = MENU_STATE_MAIN;
                }
                break;
 8002e00:	e056      	b.n	8002eb0 <vMainMenuTask+0x140>
                {
                	//encButton = IsSensorTriggered(EncoderBtn_GPIO_Port,EncoderBtn_Pin);
                	//while(!encButton);
                	//LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
                	//osDelay(4);
                    const char* calibMenuItems[] = {"Auto Calibartion", "Semi-Auto Calibration", "Manual Calibration" };
 8002e02:	4a31      	ldr	r2, [pc, #196]	@ (8002ec8 <vMainMenuTask+0x158>)
 8002e04:	f107 030c 	add.w	r3, r7, #12
 8002e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                    uint8_t calibSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1,calibMenuItems,3, 1);
 8002e0e:	f107 020c 	add.w	r2, r7, #12
 8002e12:	2301      	movs	r3, #1
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2303      	movs	r3, #3
 8002e18:	4929      	ldr	r1, [pc, #164]	@ (8002ec0 <vMainMenuTask+0x150>)
 8002e1a:	482a      	ldr	r0, [pc, #168]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002e1c:	f7fd fdc0 	bl	80009a0 <LCD_I2C_menuTemplate>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                    if (calibSelection == 0) {  // "Back"
 8002e26:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d103      	bne.n	8002e36 <vMainMenuTask+0xc6>
                        currentState = MENU_STATE_MAIN;
 8002e2e:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]

                         //Calibration is complete. Return to the main menu or update as needed.
                        currentState = MENU_STATE_MAIN;
                    }
                }
                break;
 8002e34:	e03c      	b.n	8002eb0 <vMainMenuTask+0x140>
                    	g_calibSelection = calibSelection;
 8002e36:	4a25      	ldr	r2, [pc, #148]	@ (8002ecc <vMainMenuTask+0x15c>)
 8002e38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002e3c:	7013      	strb	r3, [r2, #0]
                    	xEventGroupSetBits(calibEventGroup, CALIB_START_BIT);
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <vMainMenuTask+0x160>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	4618      	mov	r0, r3
 8002e46:	f00d f86b 	bl	800ff20 <xEventGroupSetBits>
                    	xEventGroupWaitBits(calibEventGroup, CALIB_COMPLETE_BIT,
 8002e4a:	4b21      	ldr	r3, [pc, #132]	@ (8002ed0 <vMainMenuTask+0x160>)
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	2300      	movs	r3, #0
 8002e56:	2201      	movs	r2, #1
 8002e58:	2102      	movs	r1, #2
 8002e5a:	f00c ff87 	bl	800fd6c <xEventGroupWaitBits>
                        currentState = MENU_STATE_MAIN;
 8002e5e:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
                break;
 8002e64:	e024      	b.n	8002eb0 <vMainMenuTask+0x140>


            case MENU_STATE_PREPARE_MACHINE:
                {
                	LCD_I2C_ClearAllLines(&hlcd3);
 8002e66:	4817      	ldr	r0, [pc, #92]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002e68:	f7fd fd00 	bl	800086c <LCD_I2C_ClearAllLines>
                	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4814      	ldr	r0, [pc, #80]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002e72:	f7fd fccf 	bl	8000814 <LCD_I2C_SetCursor>
                    LCD_I2C_printStr(&hlcd3, "Preparing...");
 8002e76:	4917      	ldr	r1, [pc, #92]	@ (8002ed4 <vMainMenuTask+0x164>)
 8002e78:	4812      	ldr	r0, [pc, #72]	@ (8002ec4 <vMainMenuTask+0x154>)
 8002e7a:	f7fd fc91 	bl	80007a0 <LCD_I2C_printStr>
                    if(MotorsHoming(&motors) == 1){
 8002e7e:	4816      	ldr	r0, [pc, #88]	@ (8002ed8 <vMainMenuTask+0x168>)
 8002e80:	f000 f848 	bl	8002f14 <MotorsHoming>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d111      	bne.n	8002eae <vMainMenuTask+0x13e>
                       if(calibrationState()){
 8002e8a:	f000 fac3 	bl	8003414 <calibrationState>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <vMainMenuTask+0x12a>
                           currentState =MENU_STATE_CALIBRATION;
 8002e94:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
                        }
                       currentState = MENU_STATE_MAIN;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
   	                 }

                 }

                break;
 8002ea0:	e005      	b.n	8002eae <vMainMenuTask+0x13e>
            default:
                currentState = MENU_STATE_MAIN;
 8002ea2:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <vMainMenuTask+0x148>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	701a      	strb	r2, [r3, #0]
                break;
 8002ea8:	e002      	b.n	8002eb0 <vMainMenuTask+0x140>
                break;
 8002eaa:	bf00      	nop
 8002eac:	e000      	b.n	8002eb0 <vMainMenuTask+0x140>
                break;
 8002eae:	bf00      	nop
        }

        osDelay(1);  // Allow other tasks to run
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f00c fe62 	bl	800fb7a <osDelay>
        switch (currentState) {
 8002eb6:	e764      	b.n	8002d82 <vMainMenuTask+0x12>
 8002eb8:	2000010c 	.word	0x2000010c
 8002ebc:	080137d0 	.word	0x080137d0
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	20000018 	.word	0x20000018
 8002ec8:	08013818 	.word	0x08013818
 8002ecc:	2000011c 	.word	0x2000011c
 8002ed0:	20000114 	.word	0x20000114
 8002ed4:	080137a0 	.word	0x080137a0
 8002ed8:	20000fb4 	.word	0x20000fb4

08002edc <ResetMotorState>:
int32_t StepsBack[4]={0,0};
uint32_t LastSteps[3] = {0,0,0,0};
uint8_t x = 0;
bool testing = 0;

static void ResetMotorState(Motor *m, float homePosition) {
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	ed87 0a00 	vstr	s0, [r7]
    m->currentPositionMM = homePosition;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    m->stepsTaken = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	671a      	str	r2, [r3, #112]	@ 0x70
    m->StepsBack = 0;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    m->StepsFront = 0;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <MotorsHoming>:
      reset its state.
    • Then poll (with a short delay) until each motor reaches its home.
    • When a sensor is triggered during polling, a STOP command is sent,
      and the motor state is reset.
------------------------------------------------------------------*/
bool MotorsHoming(Motor *motor) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
    bool homed[4] = { false, false, false, false };
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
    MotorCommand cmd;  // Temporary command structure for queue commands

    /* Set servo positions for homing (adjust positions as needed) */
    SERVO_WritePosition(&hservo1, 105);
 8002f20:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 8003250 <MotorsHoming+0x33c>
 8002f24:	48cb      	ldr	r0, [pc, #812]	@ (8003254 <MotorsHoming+0x340>)
 8002f26:	f7ff fb67 	bl	80025f8 <SERVO_WritePosition>
    SERVO_WritePosition(&hservo2, 95);
 8002f2a:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 8003258 <MotorsHoming+0x344>
 8002f2e:	48cb      	ldr	r0, [pc, #812]	@ (800325c <MotorsHoming+0x348>)
 8002f30:	f7ff fb62 	bl	80025f8 <SERVO_WritePosition>

    /* --- Start each motor if not already at its home sensor --- */
    /* Motor 0: Uses EndStop2, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 0) {
 8002f34:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f38:	48c9      	ldr	r0, [pc, #804]	@ (8003260 <MotorsHoming+0x34c>)
 8002f3a:	f7ff faa3 	bl	8002484 <IsSensorTriggered>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	f083 0301 	eor.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01f      	beq.n	8002f8a <MotorsHoming+0x76>
        TMC2209_SetSpeed(&motor[0], 8000);
 8002f4a:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7fe f9ab 	bl	80012aa <TMC2209_SetSpeed>
        cmd.motorIndex = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8002f60:	4bc0      	ldr	r3, [pc, #768]	@ (8003264 <MotorsHoming+0x350>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	f107 0108 	add.w	r1, r7, #8
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6e:	f00d fac5 	bl	80104fc <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8002f72:	2302      	movs	r3, #2
 8002f74:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8002f76:	4bbb      	ldr	r3, [pc, #748]	@ (8003264 <MotorsHoming+0x350>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	f107 0108 	add.w	r1, r7, #8
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	f00d faba 	bl	80104fc <xQueueGenericSend>
 8002f88:	e006      	b.n	8002f98 <MotorsHoming+0x84>
    } else {
        homed[0] = true;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	753b      	strb	r3, [r7, #20]
        ResetMotorState(&motor[0], 0);
 8002f8e:	ed9f 0ab6 	vldr	s0, [pc, #728]	@ 8003268 <MotorsHoming+0x354>
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7ff ffa2 	bl	8002edc <ResetMotorState>
    }

    /* Motor 1: Uses EndStop4, home position = 450, direction = 0 */
    if (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 0) {
 8002f98:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f9c:	48b3      	ldr	r0, [pc, #716]	@ (800326c <MotorsHoming+0x358>)
 8002f9e:	f7ff fa71 	bl	8002484 <IsSensorTriggered>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d021      	beq.n	8002ff2 <MotorsHoming+0xde>
        TMC2209_SetSpeed(&motor[1], 8000);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	33a0      	adds	r3, #160	@ 0xa0
 8002fb2:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe f977 	bl	80012aa <TMC2209_SetSpeed>
        cmd.motorIndex = 1;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8002fc8:	4ba6      	ldr	r3, [pc, #664]	@ (8003264 <MotorsHoming+0x350>)
 8002fca:	6818      	ldr	r0, [r3, #0]
 8002fcc:	f107 0108 	add.w	r1, r7, #8
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd6:	f00d fa91 	bl	80104fc <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8002fde:	4ba1      	ldr	r3, [pc, #644]	@ (8003264 <MotorsHoming+0x350>)
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	f107 0108 	add.w	r1, r7, #8
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fec:	f00d fa86 	bl	80104fc <xQueueGenericSend>
 8002ff0:	e008      	b.n	8003004 <MotorsHoming+0xf0>
    } else {
        homed[1] = true;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	757b      	strb	r3, [r7, #21]
        ResetMotorState(&motor[1], 450);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	33a0      	adds	r3, #160	@ 0xa0
 8002ffa:	ed9f 0a9d 	vldr	s0, [pc, #628]	@ 8003270 <MotorsHoming+0x35c>
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff6c 	bl	8002edc <ResetMotorState>
    }

    /* Motor 2: Uses EndStop1, home position = 0, direction = 0 */
    if (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 0) {
 8003004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003008:	4898      	ldr	r0, [pc, #608]	@ (800326c <MotorsHoming+0x358>)
 800300a:	f7ff fa3b 	bl	8002484 <IsSensorTriggered>
 800300e:	4603      	mov	r3, r0
 8003010:	f083 0301 	eor.w	r3, r3, #1
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d022      	beq.n	8003060 <MotorsHoming+0x14c>
        TMC2209_SetSpeed(&motor[2], 8000);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003020:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003024:	4618      	mov	r0, r3
 8003026:	f7fe f940 	bl	80012aa <TMC2209_SetSpeed>
        cmd.motorIndex = 2;
 800302a:	2302      	movs	r3, #2
 800302c:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 800302e:	2303      	movs	r3, #3
 8003030:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003036:	4b8b      	ldr	r3, [pc, #556]	@ (8003264 <MotorsHoming+0x350>)
 8003038:	6818      	ldr	r0, [r3, #0]
 800303a:	f107 0108 	add.w	r1, r7, #8
 800303e:	2300      	movs	r3, #0
 8003040:	f04f 32ff 	mov.w	r2, #4294967295
 8003044:	f00d fa5a 	bl	80104fc <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8003048:	2302      	movs	r3, #2
 800304a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800304c:	4b85      	ldr	r3, [pc, #532]	@ (8003264 <MotorsHoming+0x350>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	f107 0108 	add.w	r1, r7, #8
 8003054:	2300      	movs	r3, #0
 8003056:	f04f 32ff 	mov.w	r2, #4294967295
 800305a:	f00d fa4f 	bl	80104fc <xQueueGenericSend>
 800305e:	e009      	b.n	8003074 <MotorsHoming+0x160>
    } else {
        homed[2] = true;
 8003060:	2301      	movs	r3, #1
 8003062:	75bb      	strb	r3, [r7, #22]
        ResetMotorState(&motor[2], 0);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800306a:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 8003268 <MotorsHoming+0x354>
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ff34 	bl	8002edc <ResetMotorState>
    }

    /* Motor 3: Uses EndStop3, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 0) {
 8003074:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003078:	4879      	ldr	r0, [pc, #484]	@ (8003260 <MotorsHoming+0x34c>)
 800307a:	f7ff fa03 	bl	8002484 <IsSensorTriggered>
 800307e:	4603      	mov	r3, r0
 8003080:	f083 0301 	eor.w	r3, r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d022      	beq.n	80030d0 <MotorsHoming+0x1bc>
        TMC2209_SetSpeed(&motor[3], 8000);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003090:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe f908 	bl	80012aa <TMC2209_SetSpeed>
        cmd.motorIndex = 3;
 800309a:	2303      	movs	r3, #3
 800309c:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 800309e:	2303      	movs	r3, #3
 80030a0:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80030a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003264 <MotorsHoming+0x350>)
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	f107 0108 	add.w	r1, r7, #8
 80030ae:	2300      	movs	r3, #0
 80030b0:	f04f 32ff 	mov.w	r2, #4294967295
 80030b4:	f00d fa22 	bl	80104fc <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 80030b8:	2302      	movs	r3, #2
 80030ba:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80030bc:	4b69      	ldr	r3, [pc, #420]	@ (8003264 <MotorsHoming+0x350>)
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	f107 0108 	add.w	r1, r7, #8
 80030c4:	2300      	movs	r3, #0
 80030c6:	f04f 32ff 	mov.w	r2, #4294967295
 80030ca:	f00d fa17 	bl	80104fc <xQueueGenericSend>
 80030ce:	e09d      	b.n	800320c <MotorsHoming+0x2f8>
    } else {
        homed[3] = true;
 80030d0:	2301      	movs	r3, #1
 80030d2:	75fb      	strb	r3, [r7, #23]
        ResetMotorState(&motor[3], 0);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80030da:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 8003268 <MotorsHoming+0x354>
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fefc 	bl	8002edc <ResetMotorState>
    }

    /* --- Poll sensors until all motors are homed --- */
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 80030e4:	e092      	b.n	800320c <MotorsHoming+0x2f8>
        if (!homed[0] && (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 1)) {
 80030e6:	7d3b      	ldrb	r3, [r7, #20]
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01b      	beq.n	800312a <MotorsHoming+0x216>
 80030f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80030f6:	485a      	ldr	r0, [pc, #360]	@ (8003260 <MotorsHoming+0x34c>)
 80030f8:	f7ff f9c4 	bl	8002484 <IsSensorTriggered>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d013      	beq.n	800312a <MotorsHoming+0x216>
            cmd.motorIndex = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8003106:	2301      	movs	r3, #1
 8003108:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800310a:	4b56      	ldr	r3, [pc, #344]	@ (8003264 <MotorsHoming+0x350>)
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	f107 0108 	add.w	r1, r7, #8
 8003112:	2300      	movs	r3, #0
 8003114:	f04f 32ff 	mov.w	r2, #4294967295
 8003118:	f00d f9f0 	bl	80104fc <xQueueGenericSend>
            ResetMotorState(&motor[0], 0);
 800311c:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 8003268 <MotorsHoming+0x354>
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fedb 	bl	8002edc <ResetMotorState>
            homed[0] = true;
 8003126:	2301      	movs	r3, #1
 8003128:	753b      	strb	r3, [r7, #20]
        }
        if (!homed[1] && (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 1)) {
 800312a:	7d7b      	ldrb	r3, [r7, #21]
 800312c:	f083 0301 	eor.w	r3, r3, #1
 8003130:	b2db      	uxtb	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01d      	beq.n	8003172 <MotorsHoming+0x25e>
 8003136:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800313a:	484c      	ldr	r0, [pc, #304]	@ (800326c <MotorsHoming+0x358>)
 800313c:	f7ff f9a2 	bl	8002484 <IsSensorTriggered>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d015      	beq.n	8003172 <MotorsHoming+0x25e>
            cmd.motorIndex = 1;
 8003146:	2301      	movs	r3, #1
 8003148:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 800314a:	2301      	movs	r3, #1
 800314c:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800314e:	4b45      	ldr	r3, [pc, #276]	@ (8003264 <MotorsHoming+0x350>)
 8003150:	6818      	ldr	r0, [r3, #0]
 8003152:	f107 0108 	add.w	r1, r7, #8
 8003156:	2300      	movs	r3, #0
 8003158:	f04f 32ff 	mov.w	r2, #4294967295
 800315c:	f00d f9ce 	bl	80104fc <xQueueGenericSend>
            ResetMotorState(&motor[1], 450);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	33a0      	adds	r3, #160	@ 0xa0
 8003164:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8003270 <MotorsHoming+0x35c>
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff feb7 	bl	8002edc <ResetMotorState>
            homed[1] = true;
 800316e:	2301      	movs	r3, #1
 8003170:	757b      	strb	r3, [r7, #21]
        }
        if (!homed[2] && (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 1)) {
 8003172:	7dbb      	ldrb	r3, [r7, #22]
 8003174:	f083 0301 	eor.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d01e      	beq.n	80031bc <MotorsHoming+0x2a8>
 800317e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003182:	483a      	ldr	r0, [pc, #232]	@ (800326c <MotorsHoming+0x358>)
 8003184:	f7ff f97e 	bl	8002484 <IsSensorTriggered>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <MotorsHoming+0x2a8>
            cmd.motorIndex = 2;
 800318e:	2302      	movs	r3, #2
 8003190:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8003192:	2301      	movs	r3, #1
 8003194:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003196:	4b33      	ldr	r3, [pc, #204]	@ (8003264 <MotorsHoming+0x350>)
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f107 0108 	add.w	r1, r7, #8
 800319e:	2300      	movs	r3, #0
 80031a0:	f04f 32ff 	mov.w	r2, #4294967295
 80031a4:	f00d f9aa 	bl	80104fc <xQueueGenericSend>
            ResetMotorState(&motor[2], 0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80031ae:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8003268 <MotorsHoming+0x354>
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fe92 	bl	8002edc <ResetMotorState>
            homed[2] = true;
 80031b8:	2301      	movs	r3, #1
 80031ba:	75bb      	strb	r3, [r7, #22]
        }
        if (!homed[3] && (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 1)) {
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01e      	beq.n	8003206 <MotorsHoming+0x2f2>
 80031c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031cc:	4824      	ldr	r0, [pc, #144]	@ (8003260 <MotorsHoming+0x34c>)
 80031ce:	f7ff f959 	bl	8002484 <IsSensorTriggered>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <MotorsHoming+0x2f2>
            cmd.motorIndex = 3;
 80031d8:	2303      	movs	r3, #3
 80031da:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80031dc:	2301      	movs	r3, #1
 80031de:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80031e0:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <MotorsHoming+0x350>)
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	f107 0108 	add.w	r1, r7, #8
 80031e8:	2300      	movs	r3, #0
 80031ea:	f04f 32ff 	mov.w	r2, #4294967295
 80031ee:	f00d f985 	bl	80104fc <xQueueGenericSend>
            ResetMotorState(&motor[3], 0);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80031f8:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8003268 <MotorsHoming+0x354>
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fe6d 	bl	8002edc <ResetMotorState>
            homed[3] = true;
 8003202:	2301      	movs	r3, #1
 8003204:	75fb      	strb	r3, [r7, #23]
        }
        /* Yield for 1 ms to allow other tasks to run */
        vTaskDelay(pdMS_TO_TICKS(1));
 8003206:	2001      	movs	r0, #1
 8003208:	f00e f8c2 	bl	8011390 <vTaskDelay>
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 800320c:	7d3b      	ldrb	r3, [r7, #20]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	f47f af66 	bne.w	80030e6 <MotorsHoming+0x1d2>
 800321a:	7d7b      	ldrb	r3, [r7, #21]
 800321c:	f083 0301 	eor.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	f47f af5f 	bne.w	80030e6 <MotorsHoming+0x1d2>
 8003228:	7dbb      	ldrb	r3, [r7, #22]
 800322a:	f083 0301 	eor.w	r3, r3, #1
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f af58 	bne.w	80030e6 <MotorsHoming+0x1d2>
 8003236:	7dfb      	ldrb	r3, [r7, #23]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f af51 	bne.w	80030e6 <MotorsHoming+0x1d2>
    }

    return true;
 8003244:	2301      	movs	r3, #1
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	42d20000 	.word	0x42d20000
 8003254:	2000002c 	.word	0x2000002c
 8003258:	42be0000 	.word	0x42be0000
 800325c:	2000003c 	.word	0x2000003c
 8003260:	40021000 	.word	0x40021000
 8003264:	20000108 	.word	0x20000108
 8003268:	00000000 	.word	0x00000000
 800326c:	40021400 	.word	0x40021400
 8003270:	43e10000 	.word	0x43e10000

08003274 <AutoCalibration>:
       to move each motor to its calibration positions.
    3. Uses nonblocking delays with vTaskDelay().

  Adjust axis/motor indexes, positions, and offsets as needed.
------------------------------------------------------------------*/
void AutoCalibration(Axis *axes, Motor *motors) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
    MotorCommand cmd;  // Temporary command structure

    /* First, perform homing */
    MotorsHoming(motors);
 800327e:	6838      	ldr	r0, [r7, #0]
 8003280:	f7ff fe48 	bl	8002f14 <MotorsHoming>

    /* Send a series of move commands via the queue */

    /* Move motor 0 on axis 0 to 79 mm */
    cmd.axisIndex = 0;
 8003284:	2300      	movs	r3, #0
 8003286:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 800328c:	2300      	movs	r3, #0
 800328e:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = 79.0f;
 8003290:	4b54      	ldr	r3, [pc, #336]	@ (80033e4 <AutoCalibration+0x170>)
 8003292:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003294:	4b54      	ldr	r3, [pc, #336]	@ (80033e8 <AutoCalibration+0x174>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	f107 010c 	add.w	r1, r7, #12
 800329c:	2300      	movs	r3, #0
 800329e:	f04f 32ff 	mov.w	r2, #4294967295
 80032a2:	f00d f92b 	bl	80104fc <xQueueGenericSend>

    /* Move motor 0 on axis 1 to -47.6 mm */
    cmd.axisIndex = 1;
 80032a6:	2301      	movs	r3, #1
 80032a8:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 80032ae:	2300      	movs	r3, #0
 80032b0:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = -47.6f;
 80032b2:	4b4e      	ldr	r3, [pc, #312]	@ (80033ec <AutoCalibration+0x178>)
 80032b4:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80032b6:	4b4c      	ldr	r3, [pc, #304]	@ (80033e8 <AutoCalibration+0x174>)
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	f107 010c 	add.w	r1, r7, #12
 80032be:	2300      	movs	r3, #0
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295
 80032c4:	f00d f91a 	bl	80104fc <xQueueGenericSend>

    /* Update current positions if needed */
    motors[0].currentPositionMM = 0;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    motors[2].currentPositionMM = 0;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Move motor 1 on axis 0 to -102.4 mm */
    cmd.axisIndex = 0;
 80032e0:	2300      	movs	r3, #0
 80032e2:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 1;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 80032e8:	2300      	movs	r3, #0
 80032ea:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = -102.4f;
 80032ec:	4b40      	ldr	r3, [pc, #256]	@ (80033f0 <AutoCalibration+0x17c>)
 80032ee:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80032f0:	4b3d      	ldr	r3, [pc, #244]	@ (80033e8 <AutoCalibration+0x174>)
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	f107 010c 	add.w	r1, r7, #12
 80032f8:	2300      	movs	r3, #0
 80032fa:	f04f 32ff 	mov.w	r2, #4294967295
 80032fe:	f00d f8fd 	bl	80104fc <xQueueGenericSend>

    /* Move motor 1 on axis 1 to 46.8 mm */
    cmd.axisIndex = 1;
 8003302:	2301      	movs	r3, #1
 8003304:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 800330a:	2300      	movs	r3, #0
 800330c:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = 46.8f;
 800330e:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <AutoCalibration+0x180>)
 8003310:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003312:	4b35      	ldr	r3, [pc, #212]	@ (80033e8 <AutoCalibration+0x174>)
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	f107 010c 	add.w	r1, r7, #12
 800331a:	2300      	movs	r3, #0
 800331c:	f04f 32ff 	mov.w	r2, #4294967295
 8003320:	f00d f8ec 	bl	80104fc <xQueueGenericSend>

    /* Update additional motor positions */
    motors[1].currentPositionMM = 100;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	33a0      	adds	r3, #160	@ 0xa0
 8003328:	4a33      	ldr	r2, [pc, #204]	@ (80033f8 <AutoCalibration+0x184>)
 800332a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    motors[3].currentPositionMM = 0;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* Wait 600 ms before issuing the next set of moves */
    vTaskDelay(pdMS_TO_TICKS(600));
 800333c:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8003340:	f00e f826 	bl	8011390 <vTaskDelay>

    /* Issue second set of moves: */
    /* Move motor 0 on axis 0 to 20.5995 mm */
    cmd.axisIndex = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 800334c:	2300      	movs	r3, #0
 800334e:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = 20.5995f;
 8003350:	4b2a      	ldr	r3, [pc, #168]	@ (80033fc <AutoCalibration+0x188>)
 8003352:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003354:	4b24      	ldr	r3, [pc, #144]	@ (80033e8 <AutoCalibration+0x174>)
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	f107 010c 	add.w	r1, r7, #12
 800335c:	2300      	movs	r3, #0
 800335e:	f04f 32ff 	mov.w	r2, #4294967295
 8003362:	f00d f8cb 	bl	80104fc <xQueueGenericSend>

    /* Move motor 0 on axis 1 to -37.5995 mm */
    cmd.axisIndex = 1;
 8003366:	2301      	movs	r3, #1
 8003368:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 800336e:	2300      	movs	r3, #0
 8003370:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = -37.5995f;
 8003372:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <AutoCalibration+0x18c>)
 8003374:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003376:	4b1c      	ldr	r3, [pc, #112]	@ (80033e8 <AutoCalibration+0x174>)
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	f107 010c 	add.w	r1, r7, #12
 800337e:	2300      	movs	r3, #0
 8003380:	f04f 32ff 	mov.w	r2, #4294967295
 8003384:	f00d f8ba 	bl	80104fc <xQueueGenericSend>

    /* Move motor 1 on axis 0 to 44.5995 mm */
    cmd.axisIndex = 0;
 8003388:	2300      	movs	r3, #0
 800338a:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 1;
 800338c:	2301      	movs	r3, #1
 800338e:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 8003390:	2300      	movs	r3, #0
 8003392:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = 44.5995f;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <AutoCalibration+0x190>)
 8003396:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003398:	4b13      	ldr	r3, [pc, #76]	@ (80033e8 <AutoCalibration+0x174>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	f107 010c 	add.w	r1, r7, #12
 80033a0:	2300      	movs	r3, #0
 80033a2:	f04f 32ff 	mov.w	r2, #4294967295
 80033a6:	f00d f8a9 	bl	80104fc <xQueueGenericSend>

    /* Move motor 1 on axis 1 to 20.5995 mm */
    cmd.axisIndex = 1;
 80033aa:	2301      	movs	r3, #1
 80033ac:	737b      	strb	r3, [r7, #13]
    cmd.motorIndex = 1;
 80033ae:	2301      	movs	r3, #1
 80033b0:	73bb      	strb	r3, [r7, #14]
    cmd.command = MOTOR_CMD_MOVETO;
 80033b2:	2300      	movs	r3, #0
 80033b4:	733b      	strb	r3, [r7, #12]
    cmd.targetPositionMM = 20.5995f;
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <AutoCalibration+0x188>)
 80033b8:	613b      	str	r3, [r7, #16]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80033ba:	4b0b      	ldr	r3, [pc, #44]	@ (80033e8 <AutoCalibration+0x174>)
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	f107 010c 	add.w	r1, r7, #12
 80033c2:	2300      	movs	r3, #0
 80033c4:	f04f 32ff 	mov.w	r2, #4294967295
 80033c8:	f00d f898 	bl	80104fc <xQueueGenericSend>

    //Finally, check connections between the testpoints 
    testing = CheckConnection(&hservo2, &hservo1);
 80033cc:	490e      	ldr	r1, [pc, #56]	@ (8003408 <AutoCalibration+0x194>)
 80033ce:	480f      	ldr	r0, [pc, #60]	@ (800340c <AutoCalibration+0x198>)
 80033d0:	f7ff f81c 	bl	800240c <CheckConnection>
 80033d4:	4603      	mov	r3, r0
 80033d6:	461a      	mov	r2, r3
 80033d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003410 <AutoCalibration+0x19c>)
 80033da:	701a      	strb	r2, [r3, #0]
}
 80033dc:	bf00      	nop
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	429e0000 	.word	0x429e0000
 80033e8:	20000108 	.word	0x20000108
 80033ec:	c23e6666 	.word	0xc23e6666
 80033f0:	c2cccccd 	.word	0xc2cccccd
 80033f4:	423b3333 	.word	0x423b3333
 80033f8:	42c80000 	.word	0x42c80000
 80033fc:	41a4cbc7 	.word	0x41a4cbc7
 8003400:	c21665e3 	.word	0xc21665e3
 8003404:	423265e3 	.word	0x423265e3
 8003408:	2000002c 	.word	0x2000002c
 800340c:	2000003c 	.word	0x2000003c
 8003410:	20000131 	.word	0x20000131

08003414 <calibrationState>:

bool calibrationState(void) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
    
    if (motors[0].calib[1] != 0 &&
 800341a:	4b75      	ldr	r3, [pc, #468]	@ (80035f0 <calibrationState+0x1dc>)
 800341c:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003420:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	f000 80dc 	beq.w	80035e4 <calibrationState+0x1d0>
        motors[2].calib[1] != 0 &&
 800342c:	4b70      	ldr	r3, [pc, #448]	@ (80035f0 <calibrationState+0x1dc>)
 800342e:	edd3 7a76 	vldr	s15, [r3, #472]	@ 0x1d8
    if (motors[0].calib[1] != 0 &&
 8003432:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343a:	f000 80d3 	beq.w	80035e4 <calibrationState+0x1d0>
        motors[3].calib[1] != 0 &&
 800343e:	4b6c      	ldr	r3, [pc, #432]	@ (80035f0 <calibrationState+0x1dc>)
 8003440:	edd3 7a9e 	vldr	s15, [r3, #632]	@ 0x278
        motors[2].calib[1] != 0 &&
 8003444:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344c:	f000 80ca 	beq.w	80035e4 <calibrationState+0x1d0>
        motors[1].calib[1] != 0)
 8003450:	4b67      	ldr	r3, [pc, #412]	@ (80035f0 <calibrationState+0x1dc>)
 8003452:	edd3 7a4e 	vldr	s15, [r3, #312]	@ 0x138
        motors[3].calib[1] != 0 &&
 8003456:	eef5 7a40 	vcmp.f32	s15, #0.0
 800345a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345e:	f000 80c1 	beq.w	80035e4 <calibrationState+0x1d0>
    {
        /* Perform homing first (this call is kept synchronous) */
        MotorsHoming(motors);
 8003462:	4863      	ldr	r0, [pc, #396]	@ (80035f0 <calibrationState+0x1dc>)
 8003464:	f7ff fd56 	bl	8002f14 <MotorsHoming>

        /* Set servo positions */
        SERVO_WritePosition(&hservo1, 80);
 8003468:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80035f4 <calibrationState+0x1e0>
 800346c:	4862      	ldr	r0, [pc, #392]	@ (80035f8 <calibrationState+0x1e4>)
 800346e:	f7ff f8c3 	bl	80025f8 <SERVO_WritePosition>
        SERVO_WritePosition(&hservo2, 80);
 8003472:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 80035f4 <calibrationState+0x1e0>
 8003476:	4861      	ldr	r0, [pc, #388]	@ (80035fc <calibrationState+0x1e8>)
 8003478:	f7ff f8be 	bl	80025f8 <SERVO_WritePosition>

        /* Post move commands to position each motor at its calibration value.
           Adjust the axisIndex and motorIndex as needed. */

        // Example: Move motor 0 on axis 0 to its calibration value plus an offset 
        cmd.axisIndex      = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	71bb      	strb	r3, [r7, #6]
        cmd.command        = MOTOR_CMD_MOVETO;
 8003484:	2300      	movs	r3, #0
 8003486:	713b      	strb	r3, [r7, #4]
        cmd.targetPositionMM = motors[0].calib[0] + 0.33f;
 8003488:	4b59      	ldr	r3, [pc, #356]	@ (80035f0 <calibrationState+0x1dc>)
 800348a:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800348e:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8003600 <calibrationState+0x1ec>
 8003492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003496:	edc7 7a02 	vstr	s15, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800349a:	4b5a      	ldr	r3, [pc, #360]	@ (8003604 <calibrationState+0x1f0>)
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	1d39      	adds	r1, r7, #4
 80034a0:	2300      	movs	r3, #0
 80034a2:	f04f 32ff 	mov.w	r2, #4294967295
 80034a6:	f00d f829 	bl	80104fc <xQueueGenericSend>

        /* Example: Move motor 0 (or its pair) on axis 1 to a negative offset */
        cmd.axisIndex      = 1;
 80034aa:	2301      	movs	r3, #1
 80034ac:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = -(motors[2].calib[1] + 0.5f);
 80034b2:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <calibrationState+0x1dc>)
 80034b4:	edd3 7a76 	vldr	s15, [r3, #472]	@ 0x1d8
 80034b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034c0:	eef1 7a67 	vneg.f32	s15, s15
 80034c4:	edc7 7a02 	vstr	s15, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80034c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003604 <calibrationState+0x1f0>)
 80034ca:	6818      	ldr	r0, [r3, #0]
 80034cc:	1d39      	adds	r1, r7, #4
 80034ce:	2300      	movs	r3, #0
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	f00d f812 	bl	80104fc <xQueueGenericSend>

        /* Example: Move motor 1 on axis 0 */
        cmd.axisIndex      = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 1;
 80034dc:	2301      	movs	r3, #1
 80034de:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = -(motors[1].calib[0] + 0.33f);
 80034e0:	4b43      	ldr	r3, [pc, #268]	@ (80035f0 <calibrationState+0x1dc>)
 80034e2:	edd3 7a4d 	vldr	s15, [r3, #308]	@ 0x134
 80034e6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8003600 <calibrationState+0x1ec>
 80034ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034ee:	eef1 7a67 	vneg.f32	s15, s15
 80034f2:	edc7 7a02 	vstr	s15, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80034f6:	4b43      	ldr	r3, [pc, #268]	@ (8003604 <calibrationState+0x1f0>)
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	1d39      	adds	r1, r7, #4
 80034fc:	2300      	movs	r3, #0
 80034fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003502:	f00c fffb 	bl	80104fc <xQueueGenericSend>

        /* Example: Move motor 1 on axis 1 */
        cmd.axisIndex      = 1;
 8003506:	2301      	movs	r3, #1
 8003508:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 1;
 800350a:	2301      	movs	r3, #1
 800350c:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = motors[3].calib[1] + 0.5f;
 800350e:	4b38      	ldr	r3, [pc, #224]	@ (80035f0 <calibrationState+0x1dc>)
 8003510:	edd3 7a9e 	vldr	s15, [r3, #632]	@ 0x278
 8003514:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003518:	ee77 7a87 	vadd.f32	s15, s15, s14
 800351c:	edc7 7a02 	vstr	s15, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003520:	4b38      	ldr	r3, [pc, #224]	@ (8003604 <calibrationState+0x1f0>)
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	1d39      	adds	r1, r7, #4
 8003526:	2300      	movs	r3, #0
 8003528:	f04f 32ff 	mov.w	r2, #4294967295
 800352c:	f00c ffe6 	bl	80104fc <xQueueGenericSend>

        /* Update current positions */
        motors[0].currentPositionMM = 0;
 8003530:	4b2f      	ldr	r3, [pc, #188]	@ (80035f0 <calibrationState+0x1dc>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        motors[1].currentPositionMM = 100;
 800353a:	4b2d      	ldr	r3, [pc, #180]	@ (80035f0 <calibrationState+0x1dc>)
 800353c:	4a32      	ldr	r2, [pc, #200]	@ (8003608 <calibrationState+0x1f4>)
 800353e:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        motors[2].currentPositionMM = 0;
 8003542:	4b2b      	ldr	r3, [pc, #172]	@ (80035f0 <calibrationState+0x1dc>)
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
        motors[3].currentPositionMM = 0;
 800354c:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <calibrationState+0x1dc>)
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

        /* Delay before doing the next move */
        vTaskDelay(pdMS_TO_TICKS(10));
 8003556:	200a      	movs	r0, #10
 8003558:	f00d ff1a 	bl	8011390 <vTaskDelay>

        /* Issue a second set of move commands */
        cmd.axisIndex      = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = 20.5995f;
 8003564:	4b29      	ldr	r3, [pc, #164]	@ (800360c <calibrationState+0x1f8>)
 8003566:	60bb      	str	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003568:	4b26      	ldr	r3, [pc, #152]	@ (8003604 <calibrationState+0x1f0>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	1d39      	adds	r1, r7, #4
 800356e:	2300      	movs	r3, #0
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	f00c ffc2 	bl	80104fc <xQueueGenericSend>

        cmd.axisIndex      = 1;
 8003578:	2301      	movs	r3, #1
 800357a:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = -37.5995f;
 8003580:	4b23      	ldr	r3, [pc, #140]	@ (8003610 <calibrationState+0x1fc>)
 8003582:	60bb      	str	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003584:	4b1f      	ldr	r3, [pc, #124]	@ (8003604 <calibrationState+0x1f0>)
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	1d39      	adds	r1, r7, #4
 800358a:	2300      	movs	r3, #0
 800358c:	f04f 32ff 	mov.w	r2, #4294967295
 8003590:	f00c ffb4 	bl	80104fc <xQueueGenericSend>

        cmd.axisIndex      = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 1;
 8003598:	2301      	movs	r3, #1
 800359a:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = 44.5995f;
 800359c:	4b1d      	ldr	r3, [pc, #116]	@ (8003614 <calibrationState+0x200>)
 800359e:	60bb      	str	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80035a0:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <calibrationState+0x1f0>)
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	1d39      	adds	r1, r7, #4
 80035a6:	2300      	movs	r3, #0
 80035a8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ac:	f00c ffa6 	bl	80104fc <xQueueGenericSend>

        cmd.axisIndex      = 1;
 80035b0:	2301      	movs	r3, #1
 80035b2:	717b      	strb	r3, [r7, #5]
        cmd.motorIndex     = 1;
 80035b4:	2301      	movs	r3, #1
 80035b6:	71bb      	strb	r3, [r7, #6]
        cmd.targetPositionMM = 20.5995f;
 80035b8:	4b14      	ldr	r3, [pc, #80]	@ (800360c <calibrationState+0x1f8>)
 80035ba:	60bb      	str	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80035bc:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <calibrationState+0x1f0>)
 80035be:	6818      	ldr	r0, [r3, #0]
 80035c0:	1d39      	adds	r1, r7, #4
 80035c2:	2300      	movs	r3, #0
 80035c4:	f04f 32ff 	mov.w	r2, #4294967295
 80035c8:	f00c ff98 	bl	80104fc <xQueueGenericSend>

        /* Check servo connection and update flag if needed */
        if (CheckConnection(&hservo2, &hservo1)) {
 80035cc:	490a      	ldr	r1, [pc, #40]	@ (80035f8 <calibrationState+0x1e4>)
 80035ce:	480b      	ldr	r0, [pc, #44]	@ (80035fc <calibrationState+0x1e8>)
 80035d0:	f7fe ff1c 	bl	800240c <CheckConnection>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <calibrationState+0x1cc>
            x = 1;
 80035da:	4b0f      	ldr	r3, [pc, #60]	@ (8003618 <calibrationState+0x204>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
        }
        return true;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <calibrationState+0x1d2>
    }
    else {
        return false;
 80035e4:	2300      	movs	r3, #0
    }
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	20000fb4 	.word	0x20000fb4
 80035f4:	42a00000 	.word	0x42a00000
 80035f8:	2000002c 	.word	0x2000002c
 80035fc:	2000003c 	.word	0x2000003c
 8003600:	3ea8f5c3 	.word	0x3ea8f5c3
 8003604:	20000108 	.word	0x20000108
 8003608:	42c80000 	.word	0x42c80000
 800360c:	41a4cbc7 	.word	0x41a4cbc7
 8003610:	c21665e3 	.word	0xc21665e3
 8003614:	423265e3 	.word	0x423265e3
 8003618:	20000130 	.word	0x20000130

0800361c <moveMotorUntilStallAndCalibrate>:
// Also assume that TMC2209_SetSpeed, TMC2209_checkStall, etc., are available.

void moveMotorUntilStallAndCalibrate(Axis *axes, Motor *motors,
                                     uint8_t motorIndex, uint32_t speed,
                                     GPIO_PinState direction, uint8_t calibrationIndex)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
    MotorCommand cmd;

    // Set the motor speed directly.
    // (If you want to queue speed commands, you could extend the command structure.)
    TMC2209_SetSpeed(&motors[motorIndex], speed);
 800362c:	79fa      	ldrb	r2, [r7, #7]
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	015b      	lsls	r3, r3, #5
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4413      	add	r3, r2
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fe33 	bl	80012aa <TMC2209_SetSpeed>

    // Set the direction via the queue.
    cmd.motorIndex = motorIndex;
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	75bb      	strb	r3, [r7, #22]
    cmd.command = MOTOR_CMD_DIRECTION;
 8003648:	2303      	movs	r3, #3
 800364a:	753b      	strb	r3, [r7, #20]
    cmd.direction = direction;
 800364c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003650:	773b      	strb	r3, [r7, #28]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003652:	4bba      	ldr	r3, [pc, #744]	@ (800393c <moveMotorUntilStallAndCalibrate+0x320>)
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	f107 0114 	add.w	r1, r7, #20
 800365a:	2300      	movs	r3, #0
 800365c:	f04f 32ff 	mov.w	r2, #4294967295
 8003660:	f00c ff4c 	bl	80104fc <xQueueGenericSend>

    // Start the motor via the queue.
    cmd.command = MOTOR_CMD_START;
 8003664:	2302      	movs	r3, #2
 8003666:	753b      	strb	r3, [r7, #20]
    xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003668:	4bb4      	ldr	r3, [pc, #720]	@ (800393c <moveMotorUntilStallAndCalibrate+0x320>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	f107 0114 	add.w	r1, r7, #20
 8003670:	2300      	movs	r3, #0
 8003672:	f04f 32ff 	mov.w	r2, #4294967295
 8003676:	f00c ff41 	bl	80104fc <xQueueGenericSend>

    // Loop until a stall is detected.
    for (;;) {
        TMC2209_checkStall(&motors[motorIndex]);
 800367a:	79fa      	ldrb	r2, [r7, #7]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	015b      	lsls	r3, r3, #5
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f7fe fadf 	bl	8001c4e <TMC2209_checkStall>
        if (motors[motorIndex].STALL) {
 8003690:	79fa      	ldrb	r2, [r7, #7]
 8003692:	4613      	mov	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	015b      	lsls	r3, r3, #5
 800369a:	461a      	mov	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4413      	add	r3, r2
 80036a0:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d010      	beq.n	80036ca <moveMotorUntilStallAndCalibrate+0xae>
            // When a stall is detected, stop the motor via the queue.
            cmd.command = MOTOR_CMD_STOP;
 80036a8:	2301      	movs	r3, #1
 80036aa:	753b      	strb	r3, [r7, #20]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80036ac:	4ba3      	ldr	r3, [pc, #652]	@ (800393c <moveMotorUntilStallAndCalibrate+0x320>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	f107 0114 	add.w	r1, r7, #20
 80036b4:	2300      	movs	r3, #0
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295
 80036ba:	f00c ff1f 	bl	80104fc <xQueueGenericSend>
            break;
 80036be:	bf00      	nop
        // Delay 1 ms to prevent a tight loop and yield to other tasks.
        vTaskDelay(pdMS_TO_TICKS(1));
    }

    // Calculate the calibrated position (in mm) using your step counts.
    if (motorIndex < 1) {  // For motor 0 (and its pair motor 2)
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 809c 	bne.w	8003800 <moveMotorUntilStallAndCalibrate+0x1e4>
 80036c8:	e003      	b.n	80036d2 <moveMotorUntilStallAndCalibrate+0xb6>
        vTaskDelay(pdMS_TO_TICKS(1));
 80036ca:	2001      	movs	r0, #1
 80036cc:	f00d fe60 	bl	8011390 <vTaskDelay>
        TMC2209_checkStall(&motors[motorIndex]);
 80036d0:	e7d3      	b.n	800367a <moveMotorUntilStallAndCalibrate+0x5e>
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 80036d2:	79fa      	ldrb	r2, [r7, #7]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4413      	add	r3, r2
 80036e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036e6:	ee07 3a90 	vmov	s15, r3
 80036ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                                      (float)motors[motorIndex].StepsBack) / axes[0].stepPerUnit;
 80036ee:	79fa      	ldrb	r2, [r7, #7]
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	461a      	mov	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4413      	add	r3, r2
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	ee07 3a90 	vmov	s15, r3
 8003706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 800370a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370e:	eef0 6ae7 	vabs.f32	s13, s15
                                                      (float)motors[motorIndex].StepsBack) / axes[0].stepPerUnit;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	ed93 7a04 	vldr	s14, [r3, #16]
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 8003718:	79fa      	ldrb	r2, [r7, #7]
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	015b      	lsls	r3, r3, #5
 8003722:	461a      	mov	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	4413      	add	r3, r2
                                                      (float)motors[motorIndex].StepsBack) / axes[0].stepPerUnit;
 8003728:	eec6 7a87 	vdiv.f32	s15, s13, s14
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 800372c:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
        motors[motorIndex].calib[calibrationIndex] = motors[motorIndex].currentPositionMM;
 8003730:	79fa      	ldrb	r2, [r7, #7]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	015b      	lsls	r3, r3, #5
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1898      	adds	r0, r3, r2
 8003740:	79fa      	ldrb	r2, [r7, #7]
 8003742:	4613      	mov	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	015b      	lsls	r3, r3, #5
 800374a:	461a      	mov	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	1899      	adds	r1, r3, r2
 8003750:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003754:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8003758:	3324      	adds	r3, #36	@ 0x24
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3304      	adds	r3, #4
 8003760:	601a      	str	r2, [r3, #0]

        motors[motorIndex + 2].currentPositionMM = fabs((float)motors[motorIndex + 2].StepsFront -
 8003762:	79fa      	ldrb	r2, [r7, #7]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	015b      	lsls	r3, r3, #5
 800376c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4413      	add	r3, r2
 8003774:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003778:	ee07 3a90 	vmov	s15, r3
 800377c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                                          (float)motors[motorIndex + 2].StepsBack) / axes[1].stepPerUnit;
 8003780:	79fa      	ldrb	r2, [r7, #7]
 8003782:	4613      	mov	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	015b      	lsls	r3, r3, #5
 800378a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	4413      	add	r3, r2
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        motors[motorIndex + 2].currentPositionMM = fabs((float)motors[motorIndex + 2].StepsFront -
 800379e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037a2:	eef0 6ae7 	vabs.f32	s13, s15
                                                          (float)motors[motorIndex + 2].StepsBack) / axes[1].stepPerUnit;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3328      	adds	r3, #40	@ 0x28
 80037aa:	ed93 7a04 	vldr	s14, [r3, #16]
        motors[motorIndex + 2].currentPositionMM = fabs((float)motors[motorIndex + 2].StepsFront -
 80037ae:	79fa      	ldrb	r2, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	4413      	add	r3, r2
                                                          (float)motors[motorIndex + 2].StepsBack) / axes[1].stepPerUnit;
 80037c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
        motors[motorIndex + 2].currentPositionMM = fabs((float)motors[motorIndex + 2].StepsFront -
 80037c4:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
        motors[motorIndex + 2].calib[calibrationIndex] = motors[motorIndex + 2].currentPositionMM;
 80037c8:	79fa      	ldrb	r2, [r7, #7]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	015b      	lsls	r3, r3, #5
 80037d2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	18d0      	adds	r0, r2, r3
 80037da:	79fa      	ldrb	r2, [r7, #7]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	015b      	lsls	r3, r3, #5
 80037e4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	18d1      	adds	r1, r2, r3
 80037ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80037f0:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 80037f4:	3324      	adds	r3, #36	@ 0x24
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3304      	adds	r3, #4
 80037fc:	601a      	str	r2, [r3, #0]

        motors[motorIndex - 2].currentPositionMM = fabs((float)motors[motorIndex - 2].StepsFront -
                                                          (float)motors[motorIndex - 2].StepsBack) / axes[0].stepPerUnit;
        motors[motorIndex - 2].calib[calibrationIndex] = motors[motorIndex - 2].currentPositionMM;
    }
}
 80037fe:	e099      	b.n	8003934 <moveMotorUntilStallAndCalibrate+0x318>
    } else if (motorIndex > 1) {  // For motor 2 or 3 (paired with motorIndex-2)
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	2b01      	cmp	r3, #1
 8003804:	f240 8096 	bls.w	8003934 <moveMotorUntilStallAndCalibrate+0x318>
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 8003808:	79fa      	ldrb	r2, [r7, #7]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	015b      	lsls	r3, r3, #5
 8003812:	461a      	mov	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4413      	add	r3, r2
 8003818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800381c:	ee07 3a90 	vmov	s15, r3
 8003820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                                      (float)motors[motorIndex].StepsBack) / axes[1].stepPerUnit;
 8003824:	79fa      	ldrb	r2, [r7, #7]
 8003826:	4613      	mov	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	015b      	lsls	r3, r3, #5
 800382e:	461a      	mov	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4413      	add	r3, r2
 8003834:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 8003840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003844:	eef0 6ae7 	vabs.f32	s13, s15
                                                      (float)motors[motorIndex].StepsBack) / axes[1].stepPerUnit;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3328      	adds	r3, #40	@ 0x28
 800384c:	ed93 7a04 	vldr	s14, [r3, #16]
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	4613      	mov	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4413      	add	r3, r2
 8003858:	015b      	lsls	r3, r3, #5
 800385a:	461a      	mov	r2, r3
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4413      	add	r3, r2
                                                      (float)motors[motorIndex].StepsBack) / axes[1].stepPerUnit;
 8003860:	eec6 7a87 	vdiv.f32	s15, s13, s14
        motors[motorIndex].currentPositionMM = fabs((float)motors[motorIndex].StepsFront -
 8003864:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
        motors[motorIndex].calib[calibrationIndex] = motors[motorIndex].currentPositionMM;
 8003868:	79fa      	ldrb	r2, [r7, #7]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	015b      	lsls	r3, r3, #5
 8003872:	461a      	mov	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	1898      	adds	r0, r3, r2
 8003878:	79fa      	ldrb	r2, [r7, #7]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	015b      	lsls	r3, r3, #5
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	1899      	adds	r1, r3, r2
 8003888:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800388c:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 8003890:	3324      	adds	r3, #36	@ 0x24
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	3304      	adds	r3, #4
 8003898:	601a      	str	r2, [r3, #0]
        motors[motorIndex - 2].currentPositionMM = fabs((float)motors[motorIndex - 2].StepsFront -
 800389a:	79fa      	ldrb	r2, [r7, #7]
 800389c:	4613      	mov	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	015b      	lsls	r3, r3, #5
 80038a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
                                                          (float)motors[motorIndex - 2].StepsBack) / axes[0].stepPerUnit;
 80038b8:	79fa      	ldrb	r2, [r7, #7]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4413      	add	r3, r2
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        motors[motorIndex - 2].currentPositionMM = fabs((float)motors[motorIndex - 2].StepsFront -
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	eef0 6ae7 	vabs.f32	s13, s15
                                                          (float)motors[motorIndex - 2].StepsBack) / axes[0].stepPerUnit;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	ed93 7a04 	vldr	s14, [r3, #16]
        motors[motorIndex - 2].currentPositionMM = fabs((float)motors[motorIndex - 2].StepsFront -
 80038e4:	79fa      	ldrb	r2, [r7, #7]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	015b      	lsls	r3, r3, #5
 80038ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4413      	add	r3, r2
                                                          (float)motors[motorIndex - 2].StepsBack) / axes[0].stepPerUnit;
 80038f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        motors[motorIndex - 2].currentPositionMM = fabs((float)motors[motorIndex - 2].StepsFront -
 80038fa:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
        motors[motorIndex - 2].calib[calibrationIndex] = motors[motorIndex - 2].currentPositionMM;
 80038fe:	79fa      	ldrb	r2, [r7, #7]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	015b      	lsls	r3, r3, #5
 8003908:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	18d0      	adds	r0, r2, r3
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	4613      	mov	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	015b      	lsls	r3, r3, #5
 800391a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	18d1      	adds	r1, r2, r3
 8003922:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003926:	f8d0 2080 	ldr.w	r2, [r0, #128]	@ 0x80
 800392a:	3324      	adds	r3, #36	@ 0x24
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	3304      	adds	r3, #4
 8003932:	601a      	str	r2, [r3, #0]
}
 8003934:	bf00      	nop
 8003936:	3720      	adds	r7, #32
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000108 	.word	0x20000108

08003940 <semiAutoCalibration>:

// Assume calibrationState(), HAL_GPIO_ReadPin(), and the GPIO definitions for BtnCtr, BtnUp, etc., are available.
// Also assume that motorGroup, StepsBack, motors, and axes are declared globally.

void semiAutoCalibration(Axis *axes, Motor *motors)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	@ 0x28
 8003944:	af02      	add	r7, sp, #8
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    // If a calibration is already in progress, exit.
    if (calibrationState()) {
 800394a:	f7ff fd63 	bl	8003414 <calibrationState>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 81fa 	bne.w	8003d4a <semiAutoCalibration+0x40a>

    // Static variables for button debounce and calibration step tracking.
    static uint8_t ctrPressedFlag = 0;
    static TickType_t pressStartTime = 0;
    static uint8_t calibrationStep = 0;
    const TickType_t debounceTime = pdMS_TO_TICKS(50);
 8003956:	2332      	movs	r3, #50	@ 0x32
 8003958:	61fb      	str	r3, [r7, #28]

    TickType_t currentTime = xTaskGetTickCount();
 800395a:	f00d fe65 	bl	8011628 <xTaskGetTickCount>
 800395e:	61b8      	str	r0, [r7, #24]

    // Check the calibration (Ctr) button.
    if (HAL_GPIO_ReadPin(BtnCtr_GPIO_Port, BtnCtr_Pin) == GPIO_PIN_SET) {
 8003960:	2101      	movs	r1, #1
 8003962:	48aa      	ldr	r0, [pc, #680]	@ (8003c0c <semiAutoCalibration+0x2cc>)
 8003964:	f003 f8a6 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003968:	4603      	mov	r3, r0
 800396a:	2b01      	cmp	r3, #1
 800396c:	d10a      	bne.n	8003984 <semiAutoCalibration+0x44>
        if (ctrPressedFlag == 0) {  // First edge detected.
 800396e:	4ba8      	ldr	r3, [pc, #672]	@ (8003c10 <semiAutoCalibration+0x2d0>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11a      	bne.n	80039ac <semiAutoCalibration+0x6c>
            pressStartTime = currentTime;
 8003976:	4aa7      	ldr	r2, [pc, #668]	@ (8003c14 <semiAutoCalibration+0x2d4>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6013      	str	r3, [r2, #0]
            ctrPressedFlag = 1;
 800397c:	4ba4      	ldr	r3, [pc, #656]	@ (8003c10 <semiAutoCalibration+0x2d0>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e013      	b.n	80039ac <semiAutoCalibration+0x6c>
        }
    } else {
        // On button release, if debounce time has passed, advance the calibration step.
        if (ctrPressedFlag == 1 && (currentTime - pressStartTime) >= debounceTime) {
 8003984:	4ba2      	ldr	r3, [pc, #648]	@ (8003c10 <semiAutoCalibration+0x2d0>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d10c      	bne.n	80039a6 <semiAutoCalibration+0x66>
 800398c:	4ba1      	ldr	r3, [pc, #644]	@ (8003c14 <semiAutoCalibration+0x2d4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d805      	bhi.n	80039a6 <semiAutoCalibration+0x66>
            calibrationStep++;
 800399a:	4b9f      	ldr	r3, [pc, #636]	@ (8003c18 <semiAutoCalibration+0x2d8>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	3301      	adds	r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b9d      	ldr	r3, [pc, #628]	@ (8003c18 <semiAutoCalibration+0x2d8>)
 80039a4:	701a      	strb	r2, [r3, #0]
        }
        ctrPressedFlag = 0;
 80039a6:	4b9a      	ldr	r3, [pc, #616]	@ (8003c10 <semiAutoCalibration+0x2d0>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
    }

    // Execute the calibration step.
    switch (calibrationStep) {
 80039ac:	4b9a      	ldr	r3, [pc, #616]	@ (8003c18 <semiAutoCalibration+0x2d8>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d857      	bhi.n	8003a66 <semiAutoCalibration+0x126>
 80039b6:	a201      	add	r2, pc, #4	@ (adr r2, 80039bc <semiAutoCalibration+0x7c>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	08003a17 	.word	0x08003a17
 80039c8:	08003a2f 	.word	0x08003a2f
        case 1:
            // Case 1: Move Motor 1 (index 0) in reverse until stall.
            moveMotorUntilStallAndCalibrate(axes, motors, 0, 7000, GPIO_PIN_RESET, 0);
 80039cc:	2300      	movs	r3, #0
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	2300      	movs	r3, #0
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80039d8:	2200      	movs	r2, #0
 80039da:	6839      	ldr	r1, [r7, #0]
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fe1d 	bl	800361c <moveMotorUntilStallAndCalibrate>
            break;
 80039e2:	e043      	b.n	8003a6c <semiAutoCalibration+0x12c>

        case 2:
            // Case 2: Move Motor 3 (index 2) in reverse until stall.
            moveMotorUntilStallAndCalibrate(axes, motors, 2, 7000, GPIO_PIN_SET, 1);
 80039e4:	2301      	movs	r3, #1
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2301      	movs	r3, #1
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80039f0:	2202      	movs	r2, #2
 80039f2:	6839      	ldr	r1, [r7, #0]
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff fe11 	bl	800361c <moveMotorUntilStallAndCalibrate>
            motorGroup++;
 80039fa:	4b88      	ldr	r3, [pc, #544]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4b86      	ldr	r3, [pc, #536]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a04:	701a      	strb	r2, [r3, #0]
            if (motorGroup >= 2) {
 8003a06:	4b85      	ldr	r3, [pc, #532]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d92d      	bls.n	8003a6a <semiAutoCalibration+0x12a>
                motorGroup = 0;  // Reset as needed.
 8003a0e:	4b83      	ldr	r3, [pc, #524]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
            }
            break;
 8003a14:	e029      	b.n	8003a6a <semiAutoCalibration+0x12a>

        case 3:
            // Case 3: Move Motor 2 (index 1) in reverse until stall.
            moveMotorUntilStallAndCalibrate(axes, motors, 1, 7000, GPIO_PIN_SET, 0);
 8003a16:	2300      	movs	r3, #0
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003a22:	2201      	movs	r2, #1
 8003a24:	6839      	ldr	r1, [r7, #0]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff fdf8 	bl	800361c <moveMotorUntilStallAndCalibrate>
            break;
 8003a2c:	e01e      	b.n	8003a6c <semiAutoCalibration+0x12c>

        case 4:
            // Case 4: Move Motor 4 (index 3) in reverse until stall.
            moveMotorUntilStallAndCalibrate(axes, motors, 3, 7000, GPIO_PIN_RESET, 1);
 8003a2e:	2301      	movs	r3, #1
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7ff fdec 	bl	800361c <moveMotorUntilStallAndCalibrate>
            motorGroup++;
 8003a44:	4b75      	ldr	r3, [pc, #468]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	4b73      	ldr	r3, [pc, #460]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a4e:	701a      	strb	r2, [r3, #0]
            if (motorGroup >= 2) {
 8003a50:	4b72      	ldr	r3, [pc, #456]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d902      	bls.n	8003a5e <semiAutoCalibration+0x11e>
                motorGroup = 0;
 8003a58:	4b70      	ldr	r3, [pc, #448]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
            }
            calibrationStep = 0;  // Reset calibration steps.
 8003a5e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c18 <semiAutoCalibration+0x2d8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
            break;
 8003a64:	e002      	b.n	8003a6c <semiAutoCalibration+0x12c>

        default:
            break;
 8003a66:	bf00      	nop
 8003a68:	e000      	b.n	8003a6c <semiAutoCalibration+0x12c>
            break;
 8003a6a:	bf00      	nop
    // --- Manual Control Using RTOS Commands ---
    // Instead of directly calling TMC2209 functions, we post commands to the queue.
    MotorCommand cmd;

    // Example for the "Up" button:
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	486c      	ldr	r0, [pc, #432]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003a70:	f003 f820 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d131      	bne.n	8003ade <semiAutoCalibration+0x19e>
        cmd.motorIndex = motorGroup;
 8003a7a:	4b68      	ldr	r3, [pc, #416]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_DIRECTION;
 8003a80:	2303      	movs	r3, #3
 8003a82:	733b      	strb	r3, [r7, #12]
        cmd.direction = GPIO_PIN_SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	753b      	strb	r3, [r7, #20]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003a88:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003a8a:	6818      	ldr	r0, [r3, #0]
 8003a8c:	f107 010c 	add.w	r1, r7, #12
 8003a90:	2300      	movs	r3, #0
 8003a92:	f04f 32ff 	mov.w	r2, #4294967295
 8003a96:	f00c fd31 	bl	80104fc <xQueueGenericSend>

        cmd.command = MOTOR_CMD_START;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003a9e:	4b61      	ldr	r3, [pc, #388]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	f107 010c 	add.w	r1, r7, #12
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8003aac:	f00c fd26 	bl	80104fc <xQueueGenericSend>

        // Wait while the button remains pressed.
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8003ab0:	e002      	b.n	8003ab8 <semiAutoCalibration+0x178>
            vTaskDelay(pdMS_TO_TICKS(10));
 8003ab2:	200a      	movs	r0, #10
 8003ab4:	f00d fc6c 	bl	8011390 <vTaskDelay>
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4859      	ldr	r0, [pc, #356]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003abc:	f002 fffa 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0f5      	beq.n	8003ab2 <semiAutoCalibration+0x172>
        }
        cmd.command = MOTOR_CMD_STOP;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003aca:	4b56      	ldr	r3, [pc, #344]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	f107 010c 	add.w	r1, r7, #12
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad8:	f00c fd10 	bl	80104fc <xQueueGenericSend>
 8003adc:	e014      	b.n	8003b08 <semiAutoCalibration+0x1c8>
    } else if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_SET) {
 8003ade:	2102      	movs	r1, #2
 8003ae0:	484f      	ldr	r0, [pc, #316]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003ae2:	f002 ffe7 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d10d      	bne.n	8003b08 <semiAutoCalibration+0x1c8>
        cmd.motorIndex = motorGroup;
 8003aec:	4b4b      	ldr	r3, [pc, #300]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003af2:	2301      	movs	r3, #1
 8003af4:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003af6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	f107 010c 	add.w	r1, r7, #12
 8003afe:	2300      	movs	r3, #0
 8003b00:	f04f 32ff 	mov.w	r2, #4294967295
 8003b04:	f00c fcfa 	bl	80104fc <xQueueGenericSend>
    }

    // Example for the "Down" button:
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4845      	ldr	r0, [pc, #276]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003b0c:	f002 ffd2 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d134      	bne.n	8003b80 <semiAutoCalibration+0x240>
        cmd.motorIndex = motorGroup;
 8003b16:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_DIRECTION;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	733b      	strb	r3, [r7, #12]
        cmd.direction = GPIO_PIN_RESET;
 8003b20:	2300      	movs	r3, #0
 8003b22:	753b      	strb	r3, [r7, #20]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003b24:	4b3f      	ldr	r3, [pc, #252]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003b26:	6818      	ldr	r0, [r3, #0]
 8003b28:	f107 010c 	add.w	r1, r7, #12
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b32:	f00c fce3 	bl	80104fc <xQueueGenericSend>

        cmd.command = MOTOR_CMD_START;
 8003b36:	2302      	movs	r3, #2
 8003b38:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	f107 010c 	add.w	r1, r7, #12
 8003b42:	2300      	movs	r3, #0
 8003b44:	f04f 32ff 	mov.w	r2, #4294967295
 8003b48:	f00c fcd8 	bl	80104fc <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8003b4c:	e002      	b.n	8003b54 <semiAutoCalibration+0x214>
            vTaskDelay(pdMS_TO_TICKS(10));
 8003b4e:	200a      	movs	r0, #10
 8003b50:	f00d fc1e 	bl	8011390 <vTaskDelay>
        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8003b54:	2101      	movs	r1, #1
 8003b56:	4832      	ldr	r0, [pc, #200]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003b58:	f002 ffac 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f5      	beq.n	8003b4e <semiAutoCalibration+0x20e>
        }
        cmd.motorIndex = motorGroup;
 8003b62:	4b2e      	ldr	r3, [pc, #184]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003b6e:	6818      	ldr	r0, [r3, #0]
 8003b70:	f107 010c 	add.w	r1, r7, #12
 8003b74:	2300      	movs	r3, #0
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7a:	f00c fcbf 	bl	80104fc <xQueueGenericSend>
 8003b7e:	e01a      	b.n	8003bb6 <semiAutoCalibration+0x276>
    } else if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_SET || StepsBack[0] > 28000) {
 8003b80:	2101      	movs	r1, #1
 8003b82:	4827      	ldr	r0, [pc, #156]	@ (8003c20 <semiAutoCalibration+0x2e0>)
 8003b84:	f002 ff96 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d005      	beq.n	8003b9a <semiAutoCalibration+0x25a>
 8003b8e:	4b26      	ldr	r3, [pc, #152]	@ (8003c28 <semiAutoCalibration+0x2e8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f646 5260 	movw	r2, #28000	@ 0x6d60
 8003b96:	4293      	cmp	r3, r2
 8003b98:	dd0d      	ble.n	8003bb6 <semiAutoCalibration+0x276>
        cmd.motorIndex = motorGroup;
 8003b9a:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	f107 010c 	add.w	r1, r7, #12
 8003bac:	2300      	movs	r3, #0
 8003bae:	f04f 32ff 	mov.w	r2, #4294967295
 8003bb2:	f00c fca3 	bl	80104fc <xQueueGenericSend>
    }

    // Example for the "Right" button:
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4814      	ldr	r0, [pc, #80]	@ (8003c0c <semiAutoCalibration+0x2cc>)
 8003bba:	f002 ff7b 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d14e      	bne.n	8003c62 <semiAutoCalibration+0x322>
        cmd.motorIndex = motorGroup + 2;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	3302      	adds	r3, #2
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_DIRECTION;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	733b      	strb	r3, [r7, #12]
        cmd.direction = GPIO_PIN_SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	753b      	strb	r3, [r7, #20]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003bd6:	4b13      	ldr	r3, [pc, #76]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	f107 010c 	add.w	r1, r7, #12
 8003bde:	2300      	movs	r3, #0
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	f00c fc8a 	bl	80104fc <xQueueGenericSend>

        cmd.motorIndex = motorGroup + 2;
 8003be8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c1c <semiAutoCalibration+0x2dc>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3302      	adds	r3, #2
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_START;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <semiAutoCalibration+0x2e4>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f107 010c 	add.w	r1, r7, #12
 8003bfe:	2300      	movs	r3, #0
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	f00c fc7a 	bl	80104fc <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8003c08:	e013      	b.n	8003c32 <semiAutoCalibration+0x2f2>
 8003c0a:	bf00      	nop
 8003c0c:	40020c00 	.word	0x40020c00
 8003c10:	20000132 	.word	0x20000132
 8003c14:	20000134 	.word	0x20000134
 8003c18:	20000138 	.word	0x20000138
 8003c1c:	2000011d 	.word	0x2000011d
 8003c20:	40021400 	.word	0x40021400
 8003c24:	20000108 	.word	0x20000108
 8003c28:	20000120 	.word	0x20000120
            vTaskDelay(pdMS_TO_TICKS(10));
 8003c2c:	200a      	movs	r0, #10
 8003c2e:	f00d fbaf 	bl	8011390 <vTaskDelay>
        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8003c32:	2102      	movs	r1, #2
 8003c34:	4847      	ldr	r0, [pc, #284]	@ (8003d54 <semiAutoCalibration+0x414>)
 8003c36:	f002 ff3d 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f5      	beq.n	8003c2c <semiAutoCalibration+0x2ec>
        }
        cmd.motorIndex = motorGroup + 2;
 8003c40:	4b45      	ldr	r3, [pc, #276]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	3302      	adds	r3, #2
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003c4e:	4b43      	ldr	r3, [pc, #268]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f107 010c 	add.w	r1, r7, #12
 8003c56:	2300      	movs	r3, #0
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	f00c fc4e 	bl	80104fc <xQueueGenericSend>
 8003c60:	e016      	b.n	8003c90 <semiAutoCalibration+0x350>
    } else if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_SET) {
 8003c62:	2102      	movs	r1, #2
 8003c64:	483b      	ldr	r0, [pc, #236]	@ (8003d54 <semiAutoCalibration+0x414>)
 8003c66:	f002 ff25 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d10f      	bne.n	8003c90 <semiAutoCalibration+0x350>
        cmd.motorIndex = motorGroup + 2;
 8003c70:	4b39      	ldr	r3, [pc, #228]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	3302      	adds	r3, #2
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003c7e:	4b37      	ldr	r3, [pc, #220]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	f107 010c 	add.w	r1, r7, #12
 8003c86:	2300      	movs	r3, #0
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	f00c fc36 	bl	80104fc <xQueueGenericSend>
    }

    // Example for the "Left" button:
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8003c90:	2101      	movs	r1, #1
 8003c92:	4833      	ldr	r0, [pc, #204]	@ (8003d60 <semiAutoCalibration+0x420>)
 8003c94:	f002 ff0e 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d13d      	bne.n	8003d1a <semiAutoCalibration+0x3da>
        cmd.motorIndex = motorGroup + 2;
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	3302      	adds	r3, #2
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_DIRECTION;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	733b      	strb	r3, [r7, #12]
        cmd.direction = GPIO_PIN_RESET;
 8003cac:	2300      	movs	r3, #0
 8003cae:	753b      	strb	r3, [r7, #20]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	f107 010c 	add.w	r1, r7, #12
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbe:	f00c fc1d 	bl	80104fc <xQueueGenericSend>

        cmd.motorIndex = motorGroup + 2;
 8003cc2:	4b25      	ldr	r3, [pc, #148]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_START;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003cd0:	4b22      	ldr	r3, [pc, #136]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	f107 010c 	add.w	r1, r7, #12
 8003cd8:	2300      	movs	r3, #0
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295
 8003cde:	f00c fc0d 	bl	80104fc <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8003ce2:	e002      	b.n	8003cea <semiAutoCalibration+0x3aa>
            vTaskDelay(pdMS_TO_TICKS(10));
 8003ce4:	200a      	movs	r0, #10
 8003ce6:	f00d fb53 	bl	8011390 <vTaskDelay>
        while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8003cea:	2101      	movs	r1, #1
 8003cec:	481c      	ldr	r0, [pc, #112]	@ (8003d60 <semiAutoCalibration+0x420>)
 8003cee:	f002 fee1 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f5      	beq.n	8003ce4 <semiAutoCalibration+0x3a4>
        }
        cmd.motorIndex = motorGroup + 2;
 8003cf8:	4b17      	ldr	r3, [pc, #92]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003d06:	4b15      	ldr	r3, [pc, #84]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	f107 010c 	add.w	r1, r7, #12
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	f00c fbf2 	bl	80104fc <xQueueGenericSend>
 8003d18:	e018      	b.n	8003d4c <semiAutoCalibration+0x40c>
    } else if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_SET) {
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4810      	ldr	r0, [pc, #64]	@ (8003d60 <semiAutoCalibration+0x420>)
 8003d1e:	f002 fec9 	bl	8006ab4 <HAL_GPIO_ReadPin>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d111      	bne.n	8003d4c <semiAutoCalibration+0x40c>
        cmd.motorIndex = motorGroup + 2;
 8003d28:	4b0b      	ldr	r3, [pc, #44]	@ (8003d58 <semiAutoCalibration+0x418>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	73bb      	strb	r3, [r7, #14]
        cmd.command = MOTOR_CMD_STOP;
 8003d32:	2301      	movs	r3, #1
 8003d34:	733b      	strb	r3, [r7, #12]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8003d36:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <semiAutoCalibration+0x41c>)
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	f107 010c 	add.w	r1, r7, #12
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	f00c fbda 	bl	80104fc <xQueueGenericSend>
 8003d48:	e000      	b.n	8003d4c <semiAutoCalibration+0x40c>
        return;
 8003d4a:	bf00      	nop
    }
}
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40020c00 	.word	0x40020c00
 8003d58:	2000011d 	.word	0x2000011d
 8003d5c:	20000108 	.word	0x20000108
 8003d60:	40021800 	.word	0x40021800

08003d64 <Iscalib1Done>:
bool Iscalib1Done(Motor *motor1,Motor *motor2){
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
    if(motor1->calib[0] != 0 && motor2->calib[0] != 0){
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003d74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7c:	d009      	beq.n	8003d92 <Iscalib1Done+0x2e>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8003d84:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d8c:	d001      	beq.n	8003d92 <Iscalib1Done+0x2e>
        return true;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <Iscalib1Done+0x30>
    }
    return false;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <Iscalib2Done>:
bool Iscalib2Done(Motor *motor1,Motor *motor2){
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    if(motor1->calib[1] != 0 && motor2->calib[1] != 0){
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003db0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db8:	d009      	beq.n	8003dce <Iscalib2Done+0x2e>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8003dc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dc8:	d001      	beq.n	8003dce <Iscalib2Done+0x2e>
        return true;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <Iscalib2Done+0x30>
    }
    return false;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a07      	ldr	r2, [pc, #28]	@ (8003e20 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	4a06      	ldr	r2, [pc, #24]	@ (8003e24 <vApplicationGetIdleTaskMemory+0x30>)
 8003e0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2280      	movs	r2, #128	@ 0x80
 8003e10:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8003e12:	bf00      	nop
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	2000013c 	.word	0x2000013c
 8003e24:	20000190 	.word	0x20000190

08003e28 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e38:	d102      	bne.n	8003e40 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 8003e3a:	4b04      	ldr	r3, [pc, #16]	@ (8003e4c <HAL_GPIO_EXTI_Callback+0x24>)
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	701a      	strb	r2, [r3, #0]
    }

}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	20001284 	.word	0x20001284

08003e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e50:	b5b0      	push	{r4, r5, r7, lr}
 8003e52:	b08a      	sub	sp, #40	@ 0x28
 8003e54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e56:	f001 ff44 	bl	8005ce2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e5a:	f000 f8dd 	bl	8004018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e5e:	f000 fe5b 	bl	8004b18 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e62:	f000 fe17 	bl	8004a94 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8003e66:	f000 fd87 	bl	8004978 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003e6a:	f000 fde5 	bl	8004a38 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8003e6e:	f000 fc0d 	bl	800468c <MX_TIM7_Init>
  MX_TIM4_Init();
 8003e72:	f000 fb59 	bl	8004528 <MX_TIM4_Init>
  MX_TIM2_Init();
 8003e76:	f000 fa67 	bl	8004348 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003e7a:	f000 fd4d 	bl	8004918 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003e7e:	f008 fe43 	bl	800cb08 <MX_FATFS_Init>
  MX_SPI2_Init();
 8003e82:	f000 f977 	bl	8004174 <MX_SPI2_Init>
  MX_TIM3_Init();
 8003e86:	f000 fad7 	bl	8004438 <MX_TIM3_Init>
  MX_TIM14_Init();
 8003e8a:	f000 fc97 	bl	80047bc <MX_TIM14_Init>
  MX_TIM5_Init();
 8003e8e:	f000 fba1 	bl	80045d4 <MX_TIM5_Init>
  MX_TIM9_Init();
 8003e92:	f000 fc31 	bl	80046f8 <MX_TIM9_Init>
  MX_I2C1_Init();
 8003e96:	f000 f92d 	bl	80040f4 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8003e9a:	f000 fd9d 	bl	80049d8 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8003e9e:	f000 fcdb 	bl	8004858 <MX_UART4_Init>
  MX_UART5_Init();
 8003ea2:	f000 fd09 	bl	80048b8 <MX_UART5_Init>
  MX_TIM1_Init();
 8003ea6:	f000 f9a3 	bl	80041f0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8003eaa:	4846      	ldr	r0, [pc, #280]	@ (8003fc4 <main+0x174>)
 8003eac:	f7fc fc14 	bl	80006d8 <LCD_I2C_Init>
  LCD_I2C_Clear(&hlcd3);
 8003eb0:	4844      	ldr	r0, [pc, #272]	@ (8003fc4 <main+0x174>)
 8003eb2:	f7fc fccf 	bl	8000854 <LCD_I2C_Clear>
  LCD_I2C_DisplaySequentialGlossyText(&hlcd3,2);
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	4842      	ldr	r0, [pc, #264]	@ (8003fc4 <main+0x174>)
 8003eba:	f7fc fd1f 	bl	80008fc <LCD_I2C_DisplaySequentialGlossyText>

  SERVO_Init(&hservo1);
 8003ebe:	4842      	ldr	r0, [pc, #264]	@ (8003fc8 <main+0x178>)
 8003ec0:	f7fe fb86 	bl	80025d0 <SERVO_Init>
  SERVO_Init(&hservo2);
 8003ec4:	4841      	ldr	r0, [pc, #260]	@ (8003fcc <main+0x17c>)
 8003ec6:	f7fe fb83 	bl	80025d0 <SERVO_Init>

  ENC_Init(&henc1);
 8003eca:	4841      	ldr	r0, [pc, #260]	@ (8003fd0 <main+0x180>)
 8003ecc:	f7fe fa62 	bl	8002394 <ENC_Init>


  initializeMotors();
 8003ed0:	f7fd fece 	bl	8001c70 <initializeMotors>
  initializeSystem();
 8003ed4:	f7fe fa38 	bl	8002348 <initializeSystem>

  TMC2209_setMotorsConfiguration(motors,16,1);
 8003ed8:	2201      	movs	r2, #1
 8003eda:	2110      	movs	r1, #16
 8003edc:	483d      	ldr	r0, [pc, #244]	@ (8003fd4 <main+0x184>)
 8003ede:	f7fd fe4a 	bl	8001b76 <TMC2209_setMotorsConfiguration>

  TMC2209_EnableDriver(&motors[0], 1);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	483b      	ldr	r0, [pc, #236]	@ (8003fd4 <main+0x184>)
 8003ee6:	f7fd f9cd 	bl	8001284 <TMC2209_EnableDriver>
  TMC2209_EnableDriver(&motors[1], 1);
 8003eea:	2101      	movs	r1, #1
 8003eec:	483a      	ldr	r0, [pc, #232]	@ (8003fd8 <main+0x188>)
 8003eee:	f7fd f9c9 	bl	8001284 <TMC2209_EnableDriver>
  TMC2209_EnableDriver(&motors[2], 1);
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4839      	ldr	r0, [pc, #228]	@ (8003fdc <main+0x18c>)
 8003ef6:	f7fd f9c5 	bl	8001284 <TMC2209_EnableDriver>
  TMC2209_EnableDriver(&motors[3], 1);
 8003efa:	2101      	movs	r1, #1
 8003efc:	4838      	ldr	r0, [pc, #224]	@ (8003fe0 <main+0x190>)
 8003efe:	f7fd f9c1 	bl	8001284 <TMC2209_EnableDriver>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  calibEventGroup = xEventGroupCreate();
 8003f02:	f00b ff18 	bl	800fd36 <xEventGroupCreate>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a36      	ldr	r2, [pc, #216]	@ (8003fe4 <main+0x194>)
 8003f0a:	6013      	str	r3, [r2, #0]
  configASSERT(calibEventGroup != NULL);
 8003f0c:	4b35      	ldr	r3, [pc, #212]	@ (8003fe4 <main+0x194>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10d      	bne.n	8003f30 <main+0xe0>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f18:	b672      	cpsid	i
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	b662      	cpsie	i
 8003f28:	61fb      	str	r3, [r7, #28]
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	e7fd      	b.n	8003f2c <main+0xdc>

  lcdMutex = xSemaphoreCreateMutex();
 8003f30:	2001      	movs	r0, #1
 8003f32:	f00c faca 	bl	80104ca <xQueueCreateMutex>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe8 <main+0x198>)
 8003f3a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8003f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <main+0x19c>)
 8003f3e:	463c      	mov	r4, r7
 8003f40:	461d      	mov	r5, r3
 8003f42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f46:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003f4e:	463b      	mov	r3, r7
 8003f50:	2100      	movs	r1, #0
 8003f52:	4618      	mov	r0, r3
 8003f54:	f00b fdc5 	bl	800fae2 <osThreadCreate>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4a25      	ldr	r2, [pc, #148]	@ (8003ff0 <main+0x1a0>)
 8003f5c:	6013      	str	r3, [r2, #0]
      .henc = &henc1
  };


  /* Create the main menu task */
  xTaskCreate(
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9301      	str	r3, [sp, #4]
 8003f62:	2302      	movs	r3, #2
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	2300      	movs	r3, #0
 8003f68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f6c:	4921      	ldr	r1, [pc, #132]	@ (8003ff4 <main+0x1a4>)
 8003f6e:	4822      	ldr	r0, [pc, #136]	@ (8003ff8 <main+0x1a8>)
 8003f70:	f00d f8cc 	bl	801110c <xTaskCreate>
      NULL,         /* Task parameters */
	  osPriorityHigh,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8003f74:	2300      	movs	r3, #0
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f82:	491e      	ldr	r1, [pc, #120]	@ (8003ffc <main+0x1ac>)
 8003f84:	481e      	ldr	r0, [pc, #120]	@ (8004000 <main+0x1b0>)
 8003f86:	f00d f8c1 	bl	801110c <xTaskCreate>
      NULL,                     /* Task parameters */
      osPriorityNormal,     /* Task priority */
      NULL                       /* Task handle (optional) */
  );

  xTaskCreate(
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	9301      	str	r3, [sp, #4]
 8003f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <main+0x1b4>)
 8003f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f9a:	491b      	ldr	r1, [pc, #108]	@ (8004008 <main+0x1b8>)
 8003f9c:	481b      	ldr	r0, [pc, #108]	@ (800400c <main+0x1bc>)
 8003f9e:	f00d f8b5 	bl	801110c <xTaskCreate>
	  osPriorityBelowNormal,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );


  xTaskCreate(
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003fb0:	4917      	ldr	r1, [pc, #92]	@ (8004010 <main+0x1c0>)
 8003fb2:	4818      	ldr	r0, [pc, #96]	@ (8004014 <main+0x1c4>)
 8003fb4:	f00d f8aa 	bl	801110c <xTaskCreate>
  );



  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 8003fb8:	f00d fa22 	bl	8011400 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003fbc:	f00b fd8a 	bl	800fad4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
 8003fc0:	bf00      	nop
 8003fc2:	e7fd      	b.n	8003fc0 <main+0x170>
 8003fc4:	20000018 	.word	0x20000018
 8003fc8:	2000002c 	.word	0x2000002c
 8003fcc:	2000003c 	.word	0x2000003c
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000fb4 	.word	0x20000fb4
 8003fd8:	20001054 	.word	0x20001054
 8003fdc:	200010f4 	.word	0x200010f4
 8003fe0:	20001194 	.word	0x20001194
 8003fe4:	20000114 	.word	0x20000114
 8003fe8:	20000118 	.word	0x20000118
 8003fec:	0801387c 	.word	0x0801387c
 8003ff0:	20000fb0 	.word	0x20000fb0
 8003ff4:	08013824 	.word	0x08013824
 8003ff8:	08002bd1 	.word	0x08002bd1
 8003ffc:	08013838 	.word	0x08013838
 8004000:	08002cd5 	.word	0x08002cd5
 8004004:	2000004c 	.word	0x2000004c
 8004008:	0801384c 	.word	0x0801384c
 800400c:	08002d71 	.word	0x08002d71
 8004010:	0801385c 	.word	0x0801385c
 8004014:	08002b41 	.word	0x08002b41

08004018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b094      	sub	sp, #80	@ 0x50
 800401c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800401e:	f107 0320 	add.w	r3, r7, #32
 8004022:	2230      	movs	r2, #48	@ 0x30
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f00e fd9c 	bl	8012b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800403c:	f003 fb24 	bl	8007688 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004040:	4b2a      	ldr	r3, [pc, #168]	@ (80040ec <SystemClock_Config+0xd4>)
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	4a29      	ldr	r2, [pc, #164]	@ (80040ec <SystemClock_Config+0xd4>)
 8004046:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800404a:	6413      	str	r3, [r2, #64]	@ 0x40
 800404c:	4b27      	ldr	r3, [pc, #156]	@ (80040ec <SystemClock_Config+0xd4>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004058:	4b25      	ldr	r3, [pc, #148]	@ (80040f0 <SystemClock_Config+0xd8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a24      	ldr	r2, [pc, #144]	@ (80040f0 <SystemClock_Config+0xd8>)
 800405e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b22      	ldr	r3, [pc, #136]	@ (80040f0 <SystemClock_Config+0xd8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004070:	2301      	movs	r3, #1
 8004072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800407a:	2302      	movs	r3, #2
 800407c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800407e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004084:	2304      	movs	r3, #4
 8004086:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004088:	23d8      	movs	r3, #216	@ 0xd8
 800408a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800408c:	2302      	movs	r3, #2
 800408e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004090:	2309      	movs	r3, #9
 8004092:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004094:	f107 0320 	add.w	r3, r7, #32
 8004098:	4618      	mov	r0, r3
 800409a:	f003 fb55 	bl	8007748 <HAL_RCC_OscConfig>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d001      	beq.n	80040a8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80040a4:	f000 fe96 	bl	8004dd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80040a8:	f003 fafe 	bl	80076a8 <HAL_PWREx_EnableOverDrive>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80040b2:	f000 fe8f 	bl	8004dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040b6:	230f      	movs	r3, #15
 80040b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ba:	2302      	movs	r3, #2
 80040bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80040c2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80040c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80040c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80040cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80040ce:	f107 030c 	add.w	r3, r7, #12
 80040d2:	2107      	movs	r1, #7
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fddb 	bl	8007c90 <HAL_RCC_ClockConfig>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80040e0:	f000 fe78 	bl	8004dd4 <Error_Handler>
  }
}
 80040e4:	bf00      	nop
 80040e6:	3750      	adds	r7, #80	@ 0x50
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000

080040f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <MX_I2C1_Init+0x74>)
 80040fa:	4a1c      	ldr	r2, [pc, #112]	@ (800416c <MX_I2C1_Init+0x78>)
 80040fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80040fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004100:	4a1b      	ldr	r2, [pc, #108]	@ (8004170 <MX_I2C1_Init+0x7c>)
 8004102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004104:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004106:	2200      	movs	r2, #0
 8004108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800410a:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <MX_I2C1_Init+0x74>)
 800410c:	2201      	movs	r2, #1
 800410e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004110:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004116:	4b14      	ldr	r3, [pc, #80]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <MX_I2C1_Init+0x74>)
 800411e:	2200      	movs	r2, #0
 8004120:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004122:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004124:	2200      	movs	r2, #0
 8004126:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004128:	4b0f      	ldr	r3, [pc, #60]	@ (8004168 <MX_I2C1_Init+0x74>)
 800412a:	2200      	movs	r2, #0
 800412c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800412e:	480e      	ldr	r0, [pc, #56]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004130:	f002 fd0a 	bl	8006b48 <HAL_I2C_Init>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800413a:	f000 fe4b 	bl	8004dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800413e:	2100      	movs	r1, #0
 8004140:	4809      	ldr	r0, [pc, #36]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004142:	f003 f8cf 	bl	80072e4 <HAL_I2CEx_ConfigAnalogFilter>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800414c:	f000 fe42 	bl	8004dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004150:	2100      	movs	r1, #0
 8004152:	4805      	ldr	r0, [pc, #20]	@ (8004168 <MX_I2C1_Init+0x74>)
 8004154:	f003 f911 	bl	800737a <HAL_I2CEx_ConfigDigitalFilter>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800415e:	f000 fe39 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20000390 	.word	0x20000390
 800416c:	40005400 	.word	0x40005400
 8004170:	20404768 	.word	0x20404768

08004174 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <MX_SPI2_Init+0x74>)
 800417a:	4a1c      	ldr	r2, [pc, #112]	@ (80041ec <MX_SPI2_Init+0x78>)
 800417c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <MX_SPI2_Init+0x74>)
 8004180:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004184:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004186:	4b18      	ldr	r3, [pc, #96]	@ (80041e8 <MX_SPI2_Init+0x74>)
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800418c:	4b16      	ldr	r3, [pc, #88]	@ (80041e8 <MX_SPI2_Init+0x74>)
 800418e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004192:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004194:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <MX_SPI2_Init+0x74>)
 8004196:	2200      	movs	r2, #0
 8004198:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800419a:	4b13      	ldr	r3, [pc, #76]	@ (80041e8 <MX_SPI2_Init+0x74>)
 800419c:	2200      	movs	r2, #0
 800419e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80041a0:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80041a8:	4b0f      	ldr	r3, [pc, #60]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041aa:	2238      	movs	r2, #56	@ 0x38
 80041ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041ae:	4b0e      	ldr	r3, [pc, #56]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041b4:	4b0c      	ldr	r3, [pc, #48]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ba:	4b0b      	ldr	r3, [pc, #44]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041bc:	2200      	movs	r2, #0
 80041be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80041c0:	4b09      	ldr	r3, [pc, #36]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041c2:	2207      	movs	r2, #7
 80041c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80041c6:	4b08      	ldr	r3, [pc, #32]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80041cc:	4b06      	ldr	r3, [pc, #24]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041ce:	2208      	movs	r2, #8
 80041d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041d2:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <MX_SPI2_Init+0x74>)
 80041d4:	f004 fba4 	bl	8008920 <HAL_SPI_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80041de:	f000 fdf9 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200003e4 	.word	0x200003e4
 80041ec:	40003800 	.word	0x40003800

080041f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b09a      	sub	sp, #104	@ 0x68
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004204:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004208:	2200      	movs	r2, #0
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	605a      	str	r2, [r3, #4]
 800420e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
 8004220:	615a      	str	r2, [r3, #20]
 8004222:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	222c      	movs	r2, #44	@ 0x2c
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f00e fc9a 	bl	8012b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004230:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004232:	4a44      	ldr	r2, [pc, #272]	@ (8004344 <MX_TIM1_Init+0x154>)
 8004234:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8004236:	4b42      	ldr	r3, [pc, #264]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004238:	22d7      	movs	r2, #215	@ 0xd7
 800423a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800423c:	4b40      	ldr	r3, [pc, #256]	@ (8004340 <MX_TIM1_Init+0x150>)
 800423e:	2200      	movs	r2, #0
 8004240:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8004242:	4b3f      	ldr	r3, [pc, #252]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004244:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004248:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800424a:	4b3d      	ldr	r3, [pc, #244]	@ (8004340 <MX_TIM1_Init+0x150>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004250:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004256:	4b3a      	ldr	r3, [pc, #232]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004258:	2200      	movs	r2, #0
 800425a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800425c:	4838      	ldr	r0, [pc, #224]	@ (8004340 <MX_TIM1_Init+0x150>)
 800425e:	f005 f929 	bl	80094b4 <HAL_TIM_Base_Init>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004268:	f000 fdb4 	bl	8004dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800426c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004270:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004272:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004276:	4619      	mov	r1, r3
 8004278:	4831      	ldr	r0, [pc, #196]	@ (8004340 <MX_TIM1_Init+0x150>)
 800427a:	f006 f93b 	bl	800a4f4 <HAL_TIM_ConfigClockSource>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004284:	f000 fda6 	bl	8004dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004288:	482d      	ldr	r0, [pc, #180]	@ (8004340 <MX_TIM1_Init+0x150>)
 800428a:	f005 fa7b 	bl	8009784 <HAL_TIM_PWM_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004294:	f000 fd9e 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004298:	2300      	movs	r3, #0
 800429a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800429c:	2300      	movs	r3, #0
 800429e:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80042a8:	4619      	mov	r1, r3
 80042aa:	4825      	ldr	r0, [pc, #148]	@ (8004340 <MX_TIM1_Init+0x150>)
 80042ac:	f006 fdd4 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80042b6:	f000 fd8d 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042ba:	2360      	movs	r3, #96	@ 0x60
 80042bc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 80042be:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80042c2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042c4:	2300      	movs	r3, #0
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80042cc:	2300      	movs	r3, #0
 80042ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80042d8:	220c      	movs	r2, #12
 80042da:	4619      	mov	r1, r3
 80042dc:	4818      	ldr	r0, [pc, #96]	@ (8004340 <MX_TIM1_Init+0x150>)
 80042de:	f005 fff5 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80042e8:	f000 fd74 	bl	8004dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800430e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004318:	2300      	movs	r3, #0
 800431a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800431c:	1d3b      	adds	r3, r7, #4
 800431e:	4619      	mov	r1, r3
 8004320:	4807      	ldr	r0, [pc, #28]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004322:	f006 fe27 	bl	800af74 <HAL_TIMEx_ConfigBreakDeadTime>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 800432c:	f000 fd52 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004330:	4803      	ldr	r0, [pc, #12]	@ (8004340 <MX_TIM1_Init+0x150>)
 8004332:	f000 ff49 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 8004336:	bf00      	nop
 8004338:	3768      	adds	r7, #104	@ 0x68
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000448 	.word	0x20000448
 8004344:	40010000 	.word	0x40010000

08004348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	@ 0x38
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800434e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	609a      	str	r2, [r3, #8]
 800435a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800435c:	f107 031c 	add.w	r3, r7, #28
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	605a      	str	r2, [r3, #4]
 8004366:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004368:	463b      	mov	r3, r7
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	605a      	str	r2, [r3, #4]
 8004370:	609a      	str	r2, [r3, #8]
 8004372:	60da      	str	r2, [r3, #12]
 8004374:	611a      	str	r2, [r3, #16]
 8004376:	615a      	str	r2, [r3, #20]
 8004378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800437a:	4b2e      	ldr	r3, [pc, #184]	@ (8004434 <MX_TIM2_Init+0xec>)
 800437c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004380:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 8004382:	4b2c      	ldr	r3, [pc, #176]	@ (8004434 <MX_TIM2_Init+0xec>)
 8004384:	22d7      	movs	r2, #215	@ 0xd7
 8004386:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004388:	4b2a      	ldr	r3, [pc, #168]	@ (8004434 <MX_TIM2_Init+0xec>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800438e:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <MX_TIM2_Init+0xec>)
 8004390:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004394:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004396:	4b27      	ldr	r3, [pc, #156]	@ (8004434 <MX_TIM2_Init+0xec>)
 8004398:	2200      	movs	r2, #0
 800439a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800439c:	4b25      	ldr	r3, [pc, #148]	@ (8004434 <MX_TIM2_Init+0xec>)
 800439e:	2200      	movs	r2, #0
 80043a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043a2:	4824      	ldr	r0, [pc, #144]	@ (8004434 <MX_TIM2_Init+0xec>)
 80043a4:	f005 f886 	bl	80094b4 <HAL_TIM_Base_Init>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80043ae:	f000 fd11 	bl	8004dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80043bc:	4619      	mov	r1, r3
 80043be:	481d      	ldr	r0, [pc, #116]	@ (8004434 <MX_TIM2_Init+0xec>)
 80043c0:	f006 f898 	bl	800a4f4 <HAL_TIM_ConfigClockSource>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80043ca:	f000 fd03 	bl	8004dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80043ce:	4819      	ldr	r0, [pc, #100]	@ (8004434 <MX_TIM2_Init+0xec>)
 80043d0:	f005 f9d8 	bl	8009784 <HAL_TIM_PWM_Init>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80043da:	f000 fcfb 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043de:	2300      	movs	r3, #0
 80043e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80043e6:	f107 031c 	add.w	r3, r7, #28
 80043ea:	4619      	mov	r1, r3
 80043ec:	4811      	ldr	r0, [pc, #68]	@ (8004434 <MX_TIM2_Init+0xec>)
 80043ee:	f006 fd33 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d001      	beq.n	80043fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80043f8:	f000 fcec 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043fc:	2360      	movs	r3, #96	@ 0x60
 80043fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8004400:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004404:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800440e:	463b      	mov	r3, r7
 8004410:	2208      	movs	r2, #8
 8004412:	4619      	mov	r1, r3
 8004414:	4807      	ldr	r0, [pc, #28]	@ (8004434 <MX_TIM2_Init+0xec>)
 8004416:	f005 ff59 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004420:	f000 fcd8 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004424:	4803      	ldr	r0, [pc, #12]	@ (8004434 <MX_TIM2_Init+0xec>)
 8004426:	f000 fecf 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 800442a:	bf00      	nop
 800442c:	3738      	adds	r7, #56	@ 0x38
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20000494 	.word	0x20000494

08004438 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08e      	sub	sp, #56	@ 0x38
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800443e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
 8004448:	609a      	str	r2, [r3, #8]
 800444a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444c:	f107 031c 	add.w	r3, r7, #28
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004458:	463b      	mov	r3, r7
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	609a      	str	r2, [r3, #8]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	611a      	str	r2, [r3, #16]
 8004466:	615a      	str	r2, [r3, #20]
 8004468:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800446a:	4b2d      	ldr	r3, [pc, #180]	@ (8004520 <MX_TIM3_Init+0xe8>)
 800446c:	4a2d      	ldr	r2, [pc, #180]	@ (8004524 <MX_TIM3_Init+0xec>)
 800446e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8004470:	4b2b      	ldr	r3, [pc, #172]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004472:	22d7      	movs	r2, #215	@ 0xd7
 8004474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004476:	4b2a      	ldr	r3, [pc, #168]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004478:	2200      	movs	r2, #0
 800447a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800447c:	4b28      	ldr	r3, [pc, #160]	@ (8004520 <MX_TIM3_Init+0xe8>)
 800447e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004482:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004484:	4b26      	ldr	r3, [pc, #152]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800448a:	4b25      	ldr	r3, [pc, #148]	@ (8004520 <MX_TIM3_Init+0xe8>)
 800448c:	2200      	movs	r2, #0
 800448e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004490:	4823      	ldr	r0, [pc, #140]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004492:	f005 f80f 	bl	80094b4 <HAL_TIM_Base_Init>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800449c:	f000 fc9a 	bl	8004dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80044a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80044aa:	4619      	mov	r1, r3
 80044ac:	481c      	ldr	r0, [pc, #112]	@ (8004520 <MX_TIM3_Init+0xe8>)
 80044ae:	f006 f821 	bl	800a4f4 <HAL_TIM_ConfigClockSource>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80044b8:	f000 fc8c 	bl	8004dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80044bc:	4818      	ldr	r0, [pc, #96]	@ (8004520 <MX_TIM3_Init+0xe8>)
 80044be:	f005 f961 	bl	8009784 <HAL_TIM_PWM_Init>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80044c8:	f000 fc84 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044d0:	2300      	movs	r3, #0
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044d4:	f107 031c 	add.w	r3, r7, #28
 80044d8:	4619      	mov	r1, r3
 80044da:	4811      	ldr	r0, [pc, #68]	@ (8004520 <MX_TIM3_Init+0xe8>)
 80044dc:	f006 fcbc 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80044e6:	f000 fc75 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044ea:	2360      	movs	r3, #96	@ 0x60
 80044ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80044ee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80044f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80044fc:	463b      	mov	r3, r7
 80044fe:	2208      	movs	r2, #8
 8004500:	4619      	mov	r1, r3
 8004502:	4807      	ldr	r0, [pc, #28]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004504:	f005 fee2 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800450e:	f000 fc61 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004512:	4803      	ldr	r0, [pc, #12]	@ (8004520 <MX_TIM3_Init+0xe8>)
 8004514:	f000 fe58 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 8004518:	bf00      	nop
 800451a:	3738      	adds	r7, #56	@ 0x38
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200004e0 	.word	0x200004e0
 8004524:	40000400 	.word	0x40000400

08004528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08c      	sub	sp, #48	@ 0x30
 800452c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	2224      	movs	r2, #36	@ 0x24
 8004534:	2100      	movs	r1, #0
 8004536:	4618      	mov	r0, r3
 8004538:	f00e fb14 	bl	8012b64 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800453c:	463b      	mov	r3, r7
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004546:	4b21      	ldr	r3, [pc, #132]	@ (80045cc <MX_TIM4_Init+0xa4>)
 8004548:	4a21      	ldr	r2, [pc, #132]	@ (80045d0 <MX_TIM4_Init+0xa8>)
 800454a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800454c:	4b1f      	ldr	r3, [pc, #124]	@ (80045cc <MX_TIM4_Init+0xa4>)
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004552:	4b1e      	ldr	r3, [pc, #120]	@ (80045cc <MX_TIM4_Init+0xa4>)
 8004554:	2200      	movs	r2, #0
 8004556:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8004558:	4b1c      	ldr	r3, [pc, #112]	@ (80045cc <MX_TIM4_Init+0xa4>)
 800455a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800455e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004560:	4b1a      	ldr	r3, [pc, #104]	@ (80045cc <MX_TIM4_Init+0xa4>)
 8004562:	2200      	movs	r2, #0
 8004564:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004566:	4b19      	ldr	r3, [pc, #100]	@ (80045cc <MX_TIM4_Init+0xa4>)
 8004568:	2200      	movs	r2, #0
 800456a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800456c:	2303      	movs	r3, #3
 800456e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004574:	2301      	movs	r3, #1
 8004576:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800457c:	230f      	movs	r3, #15
 800457e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004580:	2300      	movs	r3, #0
 8004582:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004584:	2301      	movs	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004588:	2300      	movs	r3, #0
 800458a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800458c:	230f      	movs	r3, #15
 800458e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4619      	mov	r1, r3
 8004596:	480d      	ldr	r0, [pc, #52]	@ (80045cc <MX_TIM4_Init+0xa4>)
 8004598:	f005 fc5c 	bl	8009e54 <HAL_TIM_Encoder_Init>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80045a2:	f000 fc17 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045a6:	2300      	movs	r3, #0
 80045a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80045ae:	463b      	mov	r3, r7
 80045b0:	4619      	mov	r1, r3
 80045b2:	4806      	ldr	r0, [pc, #24]	@ (80045cc <MX_TIM4_Init+0xa4>)
 80045b4:	f006 fc50 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d001      	beq.n	80045c2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80045be:	f000 fc09 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80045c2:	bf00      	nop
 80045c4:	3730      	adds	r7, #48	@ 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000052c 	.word	0x2000052c
 80045d0:	40000800 	.word	0x40000800

080045d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08a      	sub	sp, #40	@ 0x28
 80045d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045da:	f107 031c 	add.w	r3, r7, #28
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	605a      	str	r2, [r3, #4]
 80045e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045e6:	463b      	mov	r3, r7
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
 80045f4:	615a      	str	r2, [r3, #20]
 80045f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80045f8:	4b22      	ldr	r3, [pc, #136]	@ (8004684 <MX_TIM5_Init+0xb0>)
 80045fa:	4a23      	ldr	r2, [pc, #140]	@ (8004688 <MX_TIM5_Init+0xb4>)
 80045fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 80045fe:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004600:	22d7      	movs	r2, #215	@ 0xd7
 8004602:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004604:	4b1f      	ldr	r3, [pc, #124]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 800460a:	4b1e      	ldr	r3, [pc, #120]	@ (8004684 <MX_TIM5_Init+0xb0>)
 800460c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004610:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004612:	4b1c      	ldr	r3, [pc, #112]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004614:	2200      	movs	r2, #0
 8004616:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004618:	4b1a      	ldr	r3, [pc, #104]	@ (8004684 <MX_TIM5_Init+0xb0>)
 800461a:	2200      	movs	r2, #0
 800461c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800461e:	4819      	ldr	r0, [pc, #100]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004620:	f005 f8b0 	bl	8009784 <HAL_TIM_PWM_Init>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 800462a:	f000 fbd3 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800462e:	2300      	movs	r3, #0
 8004630:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004632:	2300      	movs	r3, #0
 8004634:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004636:	f107 031c 	add.w	r3, r7, #28
 800463a:	4619      	mov	r1, r3
 800463c:	4811      	ldr	r0, [pc, #68]	@ (8004684 <MX_TIM5_Init+0xb0>)
 800463e:	f006 fc0b 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8004648:	f000 fbc4 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800464c:	2360      	movs	r3, #96	@ 0x60
 800464e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8004650:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004654:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004656:	2300      	movs	r3, #0
 8004658:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800465e:	463b      	mov	r3, r7
 8004660:	2200      	movs	r2, #0
 8004662:	4619      	mov	r1, r3
 8004664:	4807      	ldr	r0, [pc, #28]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004666:	f005 fe31 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8004670:	f000 fbb0 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004674:	4803      	ldr	r0, [pc, #12]	@ (8004684 <MX_TIM5_Init+0xb0>)
 8004676:	f000 fda7 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	@ 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000578 	.word	0x20000578
 8004688:	40000c00 	.word	0x40000c00

0800468c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2200      	movs	r2, #0
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	605a      	str	r2, [r3, #4]
 800469a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <MX_TIM7_Init+0x64>)
 800469e:	4a15      	ldr	r2, [pc, #84]	@ (80046f4 <MX_TIM7_Init+0x68>)
 80046a0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80046a2:	4b13      	ldr	r3, [pc, #76]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046a4:	22d7      	movs	r2, #215	@ 0xd7
 80046a6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80046ae:	4b10      	ldr	r3, [pc, #64]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80046b4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046b6:	4b0e      	ldr	r3, [pc, #56]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046bc:	480c      	ldr	r0, [pc, #48]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046be:	f004 fef9 	bl	80094b4 <HAL_TIM_Base_Init>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80046c8:	f000 fb84 	bl	8004dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80046d4:	1d3b      	adds	r3, r7, #4
 80046d6:	4619      	mov	r1, r3
 80046d8:	4805      	ldr	r0, [pc, #20]	@ (80046f0 <MX_TIM7_Init+0x64>)
 80046da:	f006 fbbd 	bl	800ae58 <HAL_TIMEx_MasterConfigSynchronization>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80046e4:	f000 fb76 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80046e8:	bf00      	nop
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	200005c4 	.word	0x200005c4
 80046f4:	40001400 	.word	0x40001400

080046f8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b08c      	sub	sp, #48	@ 0x30
 80046fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	605a      	str	r2, [r3, #4]
 8004708:	609a      	str	r2, [r3, #8]
 800470a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	60da      	str	r2, [r3, #12]
 8004718:	611a      	str	r2, [r3, #16]
 800471a:	615a      	str	r2, [r3, #20]
 800471c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800471e:	4b25      	ldr	r3, [pc, #148]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004720:	4a25      	ldr	r2, [pc, #148]	@ (80047b8 <MX_TIM9_Init+0xc0>)
 8004722:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8004724:	4b23      	ldr	r3, [pc, #140]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004726:	226b      	movs	r2, #107	@ 0x6b
 8004728:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800472a:	4b22      	ldr	r3, [pc, #136]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 800472c:	2200      	movs	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8004730:	4b20      	ldr	r3, [pc, #128]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004732:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004736:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004738:	4b1e      	ldr	r3, [pc, #120]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 800473a:	2200      	movs	r2, #0
 800473c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800473e:	4b1d      	ldr	r3, [pc, #116]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004740:	2200      	movs	r2, #0
 8004742:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004744:	481b      	ldr	r0, [pc, #108]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004746:	f004 feb5 	bl	80094b4 <HAL_TIM_Base_Init>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8004750:	f000 fb40 	bl	8004dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004758:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800475a:	f107 0320 	add.w	r3, r7, #32
 800475e:	4619      	mov	r1, r3
 8004760:	4814      	ldr	r0, [pc, #80]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004762:	f005 fec7 	bl	800a4f4 <HAL_TIM_ConfigClockSource>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800476c:	f000 fb32 	bl	8004dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8004770:	4810      	ldr	r0, [pc, #64]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004772:	f005 f807 	bl	8009784 <HAL_TIM_PWM_Init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800477c:	f000 fb2a 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004780:	2360      	movs	r3, #96	@ 0x60
 8004782:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8004784:	230a      	movs	r3, #10
 8004786:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004790:	1d3b      	adds	r3, r7, #4
 8004792:	2200      	movs	r2, #0
 8004794:	4619      	mov	r1, r3
 8004796:	4807      	ldr	r0, [pc, #28]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 8004798:	f005 fd98 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80047a2:	f000 fb17 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80047a6:	4803      	ldr	r0, [pc, #12]	@ (80047b4 <MX_TIM9_Init+0xbc>)
 80047a8:	f000 fd0e 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 80047ac:	bf00      	nop
 80047ae:	3730      	adds	r7, #48	@ 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000610 	.word	0x20000610
 80047b8:	40014000 	.word	0x40014000

080047bc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	609a      	str	r2, [r3, #8]
 80047cc:	60da      	str	r2, [r3, #12]
 80047ce:	611a      	str	r2, [r3, #16]
 80047d0:	615a      	str	r2, [r3, #20]
 80047d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80047d4:	4b1e      	ldr	r3, [pc, #120]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004854 <MX_TIM14_Init+0x98>)
 80047d8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 80047da:	4b1d      	ldr	r3, [pc, #116]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047dc:	226b      	movs	r2, #107	@ 0x6b
 80047de:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80047e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047e8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80047ec:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ee:	4b18      	ldr	r3, [pc, #96]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047f4:	4b16      	ldr	r3, [pc, #88]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80047fa:	4815      	ldr	r0, [pc, #84]	@ (8004850 <MX_TIM14_Init+0x94>)
 80047fc:	f004 fe5a 	bl	80094b4 <HAL_TIM_Base_Init>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8004806:	f000 fae5 	bl	8004dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800480a:	4811      	ldr	r0, [pc, #68]	@ (8004850 <MX_TIM14_Init+0x94>)
 800480c:	f004 ffba 	bl	8009784 <HAL_TIM_PWM_Init>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8004816:	f000 fadd 	bl	8004dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800481a:	2360      	movs	r3, #96	@ 0x60
 800481c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800481e:	230a      	movs	r3, #10
 8004820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	2200      	movs	r2, #0
 800482e:	4619      	mov	r1, r3
 8004830:	4807      	ldr	r0, [pc, #28]	@ (8004850 <MX_TIM14_Init+0x94>)
 8004832:	f005 fd4b 	bl	800a2cc <HAL_TIM_PWM_ConfigChannel>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800483c:	f000 faca 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8004840:	4803      	ldr	r0, [pc, #12]	@ (8004850 <MX_TIM14_Init+0x94>)
 8004842:	f000 fcc1 	bl	80051c8 <HAL_TIM_MspPostInit>

}
 8004846:	bf00      	nop
 8004848:	3720      	adds	r7, #32
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	2000065c 	.word	0x2000065c
 8004854:	40002000 	.word	0x40002000

08004858 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <MX_UART4_Init+0x58>)
 800485e:	4a15      	ldr	r2, [pc, #84]	@ (80048b4 <MX_UART4_Init+0x5c>)
 8004860:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004868:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800486a:	4b11      	ldr	r3, [pc, #68]	@ (80048b0 <MX_UART4_Init+0x58>)
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004870:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004876:	4b0e      	ldr	r3, [pc, #56]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004878:	2200      	movs	r2, #0
 800487a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800487c:	4b0c      	ldr	r3, [pc, #48]	@ (80048b0 <MX_UART4_Init+0x58>)
 800487e:	220c      	movs	r2, #12
 8004880:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004888:	4b09      	ldr	r3, [pc, #36]	@ (80048b0 <MX_UART4_Init+0x58>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800488e:	4b08      	ldr	r3, [pc, #32]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004890:	2200      	movs	r2, #0
 8004892:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <MX_UART4_Init+0x58>)
 8004896:	2200      	movs	r2, #0
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800489a:	4805      	ldr	r0, [pc, #20]	@ (80048b0 <MX_UART4_Init+0x58>)
 800489c:	f006 fc06 	bl	800b0ac <HAL_UART_Init>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80048a6:	f000 fa95 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	200006a8 	.word	0x200006a8
 80048b4:	40004c00 	.word	0x40004c00

080048b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80048bc:	4b14      	ldr	r3, [pc, #80]	@ (8004910 <MX_UART5_Init+0x58>)
 80048be:	4a15      	ldr	r2, [pc, #84]	@ (8004914 <MX_UART5_Init+0x5c>)
 80048c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80048c2:	4b13      	ldr	r3, [pc, #76]	@ (8004910 <MX_UART5_Init+0x58>)
 80048c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80048c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80048ca:	4b11      	ldr	r3, [pc, #68]	@ (8004910 <MX_UART5_Init+0x58>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80048d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004910 <MX_UART5_Init+0x58>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80048d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004910 <MX_UART5_Init+0x58>)
 80048d8:	2200      	movs	r2, #0
 80048da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80048dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004910 <MX_UART5_Init+0x58>)
 80048de:	220c      	movs	r2, #12
 80048e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <MX_UART5_Init+0x58>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80048e8:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <MX_UART5_Init+0x58>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048ee:	4b08      	ldr	r3, [pc, #32]	@ (8004910 <MX_UART5_Init+0x58>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048f4:	4b06      	ldr	r3, [pc, #24]	@ (8004910 <MX_UART5_Init+0x58>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80048fa:	4805      	ldr	r0, [pc, #20]	@ (8004910 <MX_UART5_Init+0x58>)
 80048fc:	f006 fbd6 	bl	800b0ac <HAL_UART_Init>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8004906:	f000 fa65 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800490a:	bf00      	nop
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000730 	.word	0x20000730
 8004914:	40005000 	.word	0x40005000

08004918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800491c:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 800491e:	4a15      	ldr	r2, [pc, #84]	@ (8004974 <MX_USART2_UART_Init+0x5c>)
 8004920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004922:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004924:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800492a:	4b11      	ldr	r3, [pc, #68]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 800492c:	2200      	movs	r2, #0
 800492e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004930:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004936:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004938:	2200      	movs	r2, #0
 800493a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800493c:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 800493e:	220c      	movs	r2, #12
 8004940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004942:	4b0b      	ldr	r3, [pc, #44]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004948:	4b09      	ldr	r3, [pc, #36]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800494e:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004950:	2200      	movs	r2, #0
 8004952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 8004956:	2200      	movs	r2, #0
 8004958:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800495a:	4805      	ldr	r0, [pc, #20]	@ (8004970 <MX_USART2_UART_Init+0x58>)
 800495c:	f006 fba6 	bl	800b0ac <HAL_UART_Init>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004966:	f000 fa35 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800496a:	bf00      	nop
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	200007b8 	.word	0x200007b8
 8004974:	40004400 	.word	0x40004400

08004978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800497c:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 800497e:	4a15      	ldr	r2, [pc, #84]	@ (80049d4 <MX_USART3_UART_Init+0x5c>)
 8004980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8004982:	4b13      	ldr	r3, [pc, #76]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 8004984:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8004988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800498a:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 800498c:	2200      	movs	r2, #0
 800498e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004990:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004996:	4b0e      	ldr	r3, [pc, #56]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 8004998:	2200      	movs	r2, #0
 800499a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800499c:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 800499e:	220c      	movs	r2, #12
 80049a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049a2:	4b0b      	ldr	r3, [pc, #44]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80049a8:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80049ae:	4b08      	ldr	r3, [pc, #32]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80049ba:	4805      	ldr	r0, [pc, #20]	@ (80049d0 <MX_USART3_UART_Init+0x58>)
 80049bc:	f006 fb76 	bl	800b0ac <HAL_UART_Init>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80049c6:	f000 fa05 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000840 	.word	0x20000840
 80049d4:	40004800 	.word	0x40004800

080049d8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80049dc:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049de:	4a15      	ldr	r2, [pc, #84]	@ (8004a34 <MX_USART6_UART_Init+0x5c>)
 80049e0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80049e2:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80049e8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80049ea:	4b11      	ldr	r3, [pc, #68]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80049f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80049f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80049fc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 80049fe:	220c      	movs	r2, #12
 8004a00:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a02:	4b0b      	ldr	r3, [pc, #44]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a08:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a0e:	4b08      	ldr	r3, [pc, #32]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004a1a:	4805      	ldr	r0, [pc, #20]	@ (8004a30 <MX_USART6_UART_Init+0x58>)
 8004a1c:	f006 fb46 	bl	800b0ac <HAL_UART_Init>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004a26:	f000 f9d5 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200008c8 	.word	0x200008c8
 8004a34:	40011400 	.word	0x40011400

08004a38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004a3c:	4b14      	ldr	r3, [pc, #80]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004a42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004a44:	4b12      	ldr	r3, [pc, #72]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a46:	2206      	movs	r2, #6
 8004a48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004a50:	4b0f      	ldr	r3, [pc, #60]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004a56:	4b0e      	ldr	r3, [pc, #56]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a58:	2202      	movs	r2, #2
 8004a5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004a62:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004a68:	4b09      	ldr	r3, [pc, #36]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004a6e:	4b08      	ldr	r3, [pc, #32]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004a74:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004a7a:	4805      	ldr	r0, [pc, #20]	@ (8004a90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004a7c:	f002 fcc9 	bl	8007412 <HAL_PCD_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8004a86:	f000 f9a5 	bl	8004dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20000ad0 	.word	0x20000ad0

08004a94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004aa0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ab2:	4b18      	ldr	r3, [pc, #96]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	4a17      	ldr	r2, [pc, #92]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004abe:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <MX_DMA_Init+0x80>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004aca:	2200      	movs	r2, #0
 8004acc:	2105      	movs	r1, #5
 8004ace:	200b      	movs	r0, #11
 8004ad0:	f001 fa10 	bl	8005ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004ad4:	200b      	movs	r0, #11
 8004ad6:	f001 fa29 	bl	8005f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2105      	movs	r1, #5
 8004ade:	200d      	movs	r0, #13
 8004ae0:	f001 fa08 	bl	8005ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004ae4:	200d      	movs	r0, #13
 8004ae6:	f001 fa21 	bl	8005f2c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004aea:	2200      	movs	r2, #0
 8004aec:	2105      	movs	r1, #5
 8004aee:	2010      	movs	r0, #16
 8004af0:	f001 fa00 	bl	8005ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004af4:	2010      	movs	r0, #16
 8004af6:	f001 fa19 	bl	8005f2c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004afa:	2200      	movs	r2, #0
 8004afc:	2105      	movs	r1, #5
 8004afe:	2039      	movs	r0, #57	@ 0x39
 8004b00:	f001 f9f8 	bl	8005ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004b04:	2039      	movs	r0, #57	@ 0x39
 8004b06:	f001 fa11 	bl	8005f2c <HAL_NVIC_EnableIRQ>

}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800

08004b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	@ 0x38
 8004b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	609a      	str	r2, [r3, #8]
 8004b2a:	60da      	str	r2, [r3, #12]
 8004b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b2e:	4b94      	ldr	r3, [pc, #592]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b32:	4a93      	ldr	r2, [pc, #588]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b34:	f043 0310 	orr.w	r3, r3, #16
 8004b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b3a:	4b91      	ldr	r3, [pc, #580]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	623b      	str	r3, [r7, #32]
 8004b44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b46:	4b8e      	ldr	r3, [pc, #568]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	4a8d      	ldr	r2, [pc, #564]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b52:	4b8b      	ldr	r3, [pc, #556]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b5e:	4b88      	ldr	r3, [pc, #544]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b62:	4a87      	ldr	r2, [pc, #540]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b64:	f043 0320 	orr.w	r3, r3, #32
 8004b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b6a:	4b85      	ldr	r3, [pc, #532]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b76:	4b82      	ldr	r3, [pc, #520]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7a:	4a81      	ldr	r2, [pc, #516]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b82:	4b7f      	ldr	r3, [pc, #508]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	4a7b      	ldr	r2, [pc, #492]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b9a:	4b79      	ldr	r3, [pc, #484]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba6:	4b76      	ldr	r3, [pc, #472]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004baa:	4a75      	ldr	r2, [pc, #468]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bb2:	4b73      	ldr	r3, [pc, #460]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004bbe:	4b70      	ldr	r3, [pc, #448]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	4a6f      	ldr	r2, [pc, #444]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004bca:	4b6d      	ldr	r3, [pc, #436]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	60bb      	str	r3, [r7, #8]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bda:	4a69      	ldr	r2, [pc, #420]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004bdc:	f043 0308 	orr.w	r3, r3, #8
 8004be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004be2:	4b67      	ldr	r3, [pc, #412]	@ (8004d80 <MX_GPIO_Init+0x268>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be6:	f003 0308 	and.w	r3, r3, #8
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f249 5185 	movw	r1, #38277	@ 0x9585
 8004bf4:	4863      	ldr	r0, [pc, #396]	@ (8004d84 <MX_GPIO_Init+0x26c>)
 8004bf6:	f001 ff75 	bl	8006ae4 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004c00:	4861      	ldr	r0, [pc, #388]	@ (8004d88 <MX_GPIO_Init+0x270>)
 8004c02:	f001 ff6f 	bl	8006ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8004c06:	2200      	movs	r2, #0
 8004c08:	2140      	movs	r1, #64	@ 0x40
 8004c0a:	4860      	ldr	r0, [pc, #384]	@ (8004d8c <MX_GPIO_Init+0x274>)
 8004c0c:	f001 ff6a 	bl	8006ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8004c10:	f249 5385 	movw	r3, #38277	@ 0x9585
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c16:	2301      	movs	r3, #1
 8004c18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	4619      	mov	r1, r3
 8004c28:	4856      	ldr	r0, [pc, #344]	@ (8004d84 <MX_GPIO_Init+0x26c>)
 8004c2a:	f001 fd97 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8004c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c42:	4619      	mov	r1, r3
 8004c44:	4852      	ldr	r0, [pc, #328]	@ (8004d90 <MX_GPIO_Init+0x278>)
 8004c46:	f001 fd89 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8004c4a:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8004c4e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c54:	2301      	movs	r3, #1
 8004c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	484d      	ldr	r0, [pc, #308]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004c60:	f001 fd7c 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG4_Pin */
  GPIO_InitStruct.Pin = DIAG4_Pin;
 8004c64:	2310      	movs	r3, #16
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIAG4_GPIO_Port, &GPIO_InitStruct);
 8004c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c74:	4619      	mov	r1, r3
 8004c76:	4847      	ldr	r0, [pc, #284]	@ (8004d94 <MX_GPIO_Init+0x27c>)
 8004c78:	f001 fd70 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG2_Pin DIAG3_Pin */
  GPIO_InitStruct.Pin = DIAG2_Pin|DIAG3_Pin;
 8004c7c:	2344      	movs	r3, #68	@ 0x44
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	483e      	ldr	r0, [pc, #248]	@ (8004d88 <MX_GPIO_Init+0x270>)
 8004c90:	f001 fd64 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLeft_Pin;
 8004c94:	2301      	movs	r3, #1
 8004c96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BtnLeft_GPIO_Port, &GPIO_InitStruct);
 8004ca0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4839      	ldr	r0, [pc, #228]	@ (8004d8c <MX_GPIO_Init+0x274>)
 8004ca8:	f001 fd58 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8004cac:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8004cb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4830      	ldr	r0, [pc, #192]	@ (8004d84 <MX_GPIO_Init+0x26c>)
 8004cc2:	f001 fd4b 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8004cc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8004cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cd8:	4619      	mov	r1, r3
 8004cda:	482a      	ldr	r0, [pc, #168]	@ (8004d84 <MX_GPIO_Init+0x26c>)
 8004cdc:	f001 fd3e 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8004ce0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4823      	ldr	r0, [pc, #140]	@ (8004d88 <MX_GPIO_Init+0x270>)
 8004cfa:	f001 fd2f 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8004cfe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8004d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d10:	4619      	mov	r1, r3
 8004d12:	4821      	ldr	r0, [pc, #132]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004d14:	f001 fd22 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8004d18:	2340      	movs	r3, #64	@ 0x40
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d24:	2300      	movs	r3, #0
 8004d26:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8004d28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4817      	ldr	r0, [pc, #92]	@ (8004d8c <MX_GPIO_Init+0x274>)
 8004d30:	f001 fd14 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin DIAG1_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|DIAG1_Pin;
 8004d34:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d46:	4619      	mov	r1, r3
 8004d48:	4810      	ldr	r0, [pc, #64]	@ (8004d8c <MX_GPIO_Init+0x274>)
 8004d4a:	f001 fd07 	bl	800675c <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d52:	2300      	movs	r3, #0
 8004d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d56:	2301      	movs	r3, #1
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d5e:	4619      	mov	r1, r3
 8004d60:	480d      	ldr	r0, [pc, #52]	@ (8004d98 <MX_GPIO_Init+0x280>)
 8004d62:	f001 fcfb 	bl	800675c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2105      	movs	r1, #5
 8004d6a:	2028      	movs	r0, #40	@ 0x28
 8004d6c:	f001 f8c2 	bl	8005ef4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004d70:	2028      	movs	r0, #40	@ 0x28
 8004d72:	f001 f8db 	bl	8005f2c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004d76:	bf00      	nop
 8004d78:	3738      	adds	r7, #56	@ 0x38
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40021000 	.word	0x40021000
 8004d88:	40020400 	.word	0x40020400
 8004d8c:	40021800 	.word	0x40021800
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40021400 	.word	0x40021400
 8004d98:	40020c00 	.word	0x40020c00

08004d9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
////  for(;;)
////  {
////    osDelay(1);
////  }
  /* USER CODE END 5 */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004dc2:	f000 ff9b 	bl	8005cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40001000 	.word	0x40001000

08004dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd8:	b672      	cpsid	i
}
 8004dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <Error_Handler+0x8>

08004de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004de6:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dea:	4a10      	ldr	r2, [pc, #64]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e02:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e0a:	4b08      	ldr	r3, [pc, #32]	@ (8004e2c <HAL_MspInit+0x4c>)
 8004e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e12:	603b      	str	r3, [r7, #0]
 8004e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004e16:	2200      	movs	r2, #0
 8004e18:	210f      	movs	r1, #15
 8004e1a:	f06f 0001 	mvn.w	r0, #1
 8004e1e:	f001 f869 	bl	8005ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e22:	bf00      	nop
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	40023800 	.word	0x40023800

08004e30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b0aa      	sub	sp, #168	@ 0xa8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e38:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	2284      	movs	r2, #132	@ 0x84
 8004e4e:	2100      	movs	r1, #0
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00d fe87 	bl	8012b64 <memset>
  if(hi2c->Instance==I2C1)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ee4 <HAL_I2C_MspInit+0xb4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d13c      	bne.n	8004eda <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004e60:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e66:	2300      	movs	r3, #0
 8004e68:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004e6a:	f107 0310 	add.w	r3, r7, #16
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f003 f966 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004e7a:	f7ff ffab 	bl	8004dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e82:	4a19      	ldr	r2, [pc, #100]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004e84:	f043 0302 	orr.w	r3, r3, #2
 8004e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e8a:	4b17      	ldr	r3, [pc, #92]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004e96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004e9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e9e:	2312      	movs	r3, #18
 8004ea0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004eba:	4619      	mov	r1, r3
 8004ebc:	480b      	ldr	r0, [pc, #44]	@ (8004eec <HAL_I2C_MspInit+0xbc>)
 8004ebe:	f001 fc4d 	bl	800675c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	4a08      	ldr	r2, [pc, #32]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004ec8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_I2C_MspInit+0xb8>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004eda:	bf00      	nop
 8004edc:	37a8      	adds	r7, #168	@ 0xa8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40005400 	.word	0x40005400
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	40020400 	.word	0x40020400

08004ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	60da      	str	r2, [r3, #12]
 8004f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a25      	ldr	r2, [pc, #148]	@ (8004fa4 <HAL_SPI_MspInit+0xb4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d144      	bne.n	8004f9c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f12:	4b25      	ldr	r3, [pc, #148]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f16:	4a24      	ldr	r2, [pc, #144]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f1e:	4b22      	ldr	r3, [pc, #136]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2e:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f30:	f043 0304 	orr.w	r3, r3, #4
 8004f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f36:	4b1c      	ldr	r3, [pc, #112]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3a:	f003 0304 	and.w	r3, r3, #4
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f42:	4b19      	ldr	r3, [pc, #100]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	4a18      	ldr	r2, [pc, #96]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f48:	f043 0302 	orr.w	r3, r3, #2
 8004f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f4e:	4b16      	ldr	r3, [pc, #88]	@ (8004fa8 <HAL_SPI_MspInit+0xb8>)
 8004f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f5a:	2304      	movs	r3, #4
 8004f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f5e:	2302      	movs	r3, #2
 8004f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f66:	2303      	movs	r3, #3
 8004f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f6a:	2305      	movs	r3, #5
 8004f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f6e:	f107 0314 	add.w	r3, r7, #20
 8004f72:	4619      	mov	r1, r3
 8004f74:	480d      	ldr	r0, [pc, #52]	@ (8004fac <HAL_SPI_MspInit+0xbc>)
 8004f76:	f001 fbf1 	bl	800675c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f7a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8004f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f8c:	2305      	movs	r3, #5
 8004f8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	4619      	mov	r1, r3
 8004f96:	4806      	ldr	r0, [pc, #24]	@ (8004fb0 <HAL_SPI_MspInit+0xc0>)
 8004f98:	f001 fbe0 	bl	800675c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8004f9c:	bf00      	nop
 8004f9e:	3728      	adds	r7, #40	@ 0x28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40003800 	.word	0x40003800
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40020800 	.word	0x40020800
 8004fb0:	40020400 	.word	0x40020400

08004fb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a42      	ldr	r2, [pc, #264]	@ (80050cc <HAL_TIM_Base_MspInit+0x118>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d114      	bne.n	8004ff0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fc6:	4b42      	ldr	r3, [pc, #264]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fca:	4a41      	ldr	r2, [pc, #260]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	61fb      	str	r3, [r7, #28]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2105      	movs	r1, #5
 8004fe2:	201b      	movs	r0, #27
 8004fe4:	f000 ff86 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004fe8:	201b      	movs	r0, #27
 8004fea:	f000 ff9f 	bl	8005f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004fee:	e068      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff8:	d114      	bne.n	8005024 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ffa:	4b35      	ldr	r3, [pc, #212]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffe:	4a34      	ldr	r2, [pc, #208]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	6413      	str	r3, [r2, #64]	@ 0x40
 8005006:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	2105      	movs	r1, #5
 8005016:	201c      	movs	r0, #28
 8005018:	f000 ff6c 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800501c:	201c      	movs	r0, #28
 800501e:	f000 ff85 	bl	8005f2c <HAL_NVIC_EnableIRQ>
}
 8005022:	e04e      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_TIM_Base_MspInit+0x120>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d114      	bne.n	8005058 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800502e:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	4a27      	ldr	r2, [pc, #156]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005034:	f043 0302 	orr.w	r3, r3, #2
 8005038:	6413      	str	r3, [r2, #64]	@ 0x40
 800503a:	4b25      	ldr	r3, [pc, #148]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2105      	movs	r1, #5
 800504a:	201d      	movs	r0, #29
 800504c:	f000 ff52 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005050:	201d      	movs	r0, #29
 8005052:	f000 ff6b 	bl	8005f2c <HAL_NVIC_EnableIRQ>
}
 8005056:	e034      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1e      	ldr	r2, [pc, #120]	@ (80050d8 <HAL_TIM_Base_MspInit+0x124>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d10c      	bne.n	800507c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	4a1a      	ldr	r2, [pc, #104]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005068:	f043 0320 	orr.w	r3, r3, #32
 800506c:	6413      	str	r3, [r2, #64]	@ 0x40
 800506e:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
}
 800507a:	e022      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	@ (80050dc <HAL_TIM_Base_MspInit+0x128>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d10c      	bne.n	80050a0 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800508a:	4a11      	ldr	r2, [pc, #68]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 800508c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005090:	6453      	str	r3, [r2, #68]	@ 0x44
 8005092:	4b0f      	ldr	r3, [pc, #60]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
}
 800509e:	e010      	b.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0e      	ldr	r2, [pc, #56]	@ (80050e0 <HAL_TIM_Base_MspInit+0x12c>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10b      	bne.n	80050c2 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80050aa:	4b09      	ldr	r3, [pc, #36]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ae:	4a08      	ldr	r2, [pc, #32]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 80050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b6:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <HAL_TIM_Base_MspInit+0x11c>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
}
 80050c2:	bf00      	nop
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40001400 	.word	0x40001400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40002000 	.word	0x40002000

080050e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b08a      	sub	sp, #40	@ 0x28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ec:	f107 0314 	add.w	r3, r7, #20
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1b      	ldr	r2, [pc, #108]	@ (8005170 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d130      	bne.n	8005168 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005106:	4b1b      	ldr	r3, [pc, #108]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	4a1a      	ldr	r2, [pc, #104]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	6413      	str	r3, [r2, #64]	@ 0x40
 8005112:	4b18      	ldr	r3, [pc, #96]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800511e:	4b15      	ldr	r3, [pc, #84]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005122:	4a14      	ldr	r2, [pc, #80]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 8005124:	f043 0308 	orr.w	r3, r3, #8
 8005128:	6313      	str	r3, [r2, #48]	@ 0x30
 800512a:	4b12      	ldr	r3, [pc, #72]	@ (8005174 <HAL_TIM_Encoder_MspInit+0x90>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8005136:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800513a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005144:	2300      	movs	r3, #0
 8005146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005148:	2302      	movs	r3, #2
 800514a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4619      	mov	r1, r3
 8005152:	4809      	ldr	r0, [pc, #36]	@ (8005178 <HAL_TIM_Encoder_MspInit+0x94>)
 8005154:	f001 fb02 	bl	800675c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8005158:	2200      	movs	r2, #0
 800515a:	2105      	movs	r1, #5
 800515c:	201e      	movs	r0, #30
 800515e:	f000 fec9 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005162:	201e      	movs	r0, #30
 8005164:	f000 fee2 	bl	8005f2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8005168:	bf00      	nop
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40000800 	.word	0x40000800
 8005174:	40023800 	.word	0x40023800
 8005178:	40020c00 	.word	0x40020c00

0800517c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a0d      	ldr	r2, [pc, #52]	@ (80051c0 <HAL_TIM_PWM_MspInit+0x44>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d113      	bne.n	80051b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800518e:	4b0d      	ldr	r3, [pc, #52]	@ (80051c4 <HAL_TIM_PWM_MspInit+0x48>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	4a0c      	ldr	r2, [pc, #48]	@ (80051c4 <HAL_TIM_PWM_MspInit+0x48>)
 8005194:	f043 0308 	orr.w	r3, r3, #8
 8005198:	6413      	str	r3, [r2, #64]	@ 0x40
 800519a:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <HAL_TIM_PWM_MspInit+0x48>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2105      	movs	r1, #5
 80051aa:	2032      	movs	r0, #50	@ 0x32
 80051ac:	f000 fea2 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80051b0:	2032      	movs	r0, #50	@ 0x32
 80051b2:	f000 febb 	bl	8005f2c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40023800 	.word	0x40023800

080051c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08e      	sub	sp, #56	@ 0x38
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	605a      	str	r2, [r3, #4]
 80051da:	609a      	str	r2, [r3, #8]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a67      	ldr	r2, [pc, #412]	@ (8005384 <HAL_TIM_MspPostInit+0x1bc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d11d      	bne.n	8005226 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ea:	4b67      	ldr	r3, [pc, #412]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80051ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ee:	4a66      	ldr	r2, [pc, #408]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80051f0:	f043 0310 	orr.w	r3, r3, #16
 80051f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80051f6:	4b64      	ldr	r3, [pc, #400]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 8005202:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005208:	2302      	movs	r3, #2
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520c:	2300      	movs	r3, #0
 800520e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005210:	2300      	movs	r3, #0
 8005212:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005214:	2301      	movs	r3, #1
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8005218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800521c:	4619      	mov	r1, r3
 800521e:	485b      	ldr	r0, [pc, #364]	@ (800538c <HAL_TIM_MspPostInit+0x1c4>)
 8005220:	f001 fa9c 	bl	800675c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8005224:	e0a9      	b.n	800537a <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522e:	d11d      	bne.n	800526c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005230:	4b55      	ldr	r3, [pc, #340]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005234:	4a54      	ldr	r2, [pc, #336]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005236:	f043 0302 	orr.w	r3, r3, #2
 800523a:	6313      	str	r3, [r2, #48]	@ 0x30
 800523c:	4b52      	ldr	r3, [pc, #328]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 800523e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	61fb      	str	r3, [r7, #28]
 8005246:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8005248:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800524e:	2302      	movs	r3, #2
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005252:	2300      	movs	r3, #0
 8005254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005256:	2300      	movs	r3, #0
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800525a:	2301      	movs	r3, #1
 800525c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 800525e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005262:	4619      	mov	r1, r3
 8005264:	484a      	ldr	r0, [pc, #296]	@ (8005390 <HAL_TIM_MspPostInit+0x1c8>)
 8005266:	f001 fa79 	bl	800675c <HAL_GPIO_Init>
}
 800526a:	e086      	b.n	800537a <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a48      	ldr	r2, [pc, #288]	@ (8005394 <HAL_TIM_MspPostInit+0x1cc>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d11c      	bne.n	80052b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005276:	4b44      	ldr	r3, [pc, #272]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	4a43      	ldr	r2, [pc, #268]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 800527c:	f043 0302 	orr.w	r3, r3, #2
 8005280:	6313      	str	r3, [r2, #48]	@ 0x30
 8005282:	4b41      	ldr	r3, [pc, #260]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 800528e:	2301      	movs	r3, #1
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005292:	2302      	movs	r3, #2
 8005294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005296:	2300      	movs	r3, #0
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529a:	2300      	movs	r3, #0
 800529c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800529e:	2302      	movs	r3, #2
 80052a0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80052a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052a6:	4619      	mov	r1, r3
 80052a8:	4839      	ldr	r0, [pc, #228]	@ (8005390 <HAL_TIM_MspPostInit+0x1c8>)
 80052aa:	f001 fa57 	bl	800675c <HAL_GPIO_Init>
}
 80052ae:	e064      	b.n	800537a <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a38      	ldr	r2, [pc, #224]	@ (8005398 <HAL_TIM_MspPostInit+0x1d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d11c      	bne.n	80052f4 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ba:	4b33      	ldr	r3, [pc, #204]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052be:	4a32      	ldr	r2, [pc, #200]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80052c0:	f043 0301 	orr.w	r3, r3, #1
 80052c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80052c6:	4b30      	ldr	r3, [pc, #192]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 80052d2:	2301      	movs	r3, #1
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d6:	2302      	movs	r3, #2
 80052d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052da:	2300      	movs	r3, #0
 80052dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052de:	2300      	movs	r3, #0
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80052e2:	2302      	movs	r3, #2
 80052e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 80052e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ea:	4619      	mov	r1, r3
 80052ec:	482b      	ldr	r0, [pc, #172]	@ (800539c <HAL_TIM_MspPostInit+0x1d4>)
 80052ee:	f001 fa35 	bl	800675c <HAL_GPIO_Init>
}
 80052f2:	e042      	b.n	800537a <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a29      	ldr	r2, [pc, #164]	@ (80053a0 <HAL_TIM_MspPostInit+0x1d8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d11c      	bne.n	8005338 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052fe:	4b22      	ldr	r3, [pc, #136]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005302:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005304:	f043 0310 	orr.w	r3, r3, #16
 8005308:	6313      	str	r3, [r2, #48]	@ 0x30
 800530a:	4b1f      	ldr	r3, [pc, #124]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 800530c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 8005316:	2320      	movs	r3, #32
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531a:	2302      	movs	r3, #2
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531e:	2300      	movs	r3, #0
 8005320:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005322:	2300      	movs	r3, #0
 8005324:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8005326:	2303      	movs	r3, #3
 8005328:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 800532a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800532e:	4619      	mov	r1, r3
 8005330:	4816      	ldr	r0, [pc, #88]	@ (800538c <HAL_TIM_MspPostInit+0x1c4>)
 8005332:	f001 fa13 	bl	800675c <HAL_GPIO_Init>
}
 8005336:	e020      	b.n	800537a <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a19      	ldr	r2, [pc, #100]	@ (80053a4 <HAL_TIM_MspPostInit+0x1dc>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d11b      	bne.n	800537a <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005342:	4b11      	ldr	r3, [pc, #68]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005346:	4a10      	ldr	r2, [pc, #64]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005348:	f043 0301 	orr.w	r3, r3, #1
 800534c:	6313      	str	r3, [r2, #48]	@ 0x30
 800534e:	4b0e      	ldr	r3, [pc, #56]	@ (8005388 <HAL_TIM_MspPostInit+0x1c0>)
 8005350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	60fb      	str	r3, [r7, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 800535a:	2380      	movs	r3, #128	@ 0x80
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535e:	2302      	movs	r3, #2
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005362:	2300      	movs	r3, #0
 8005364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005366:	2300      	movs	r3, #0
 8005368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 800536a:	2309      	movs	r3, #9
 800536c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 800536e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005372:	4619      	mov	r1, r3
 8005374:	4809      	ldr	r0, [pc, #36]	@ (800539c <HAL_TIM_MspPostInit+0x1d4>)
 8005376:	f001 f9f1 	bl	800675c <HAL_GPIO_Init>
}
 800537a:	bf00      	nop
 800537c:	3738      	adds	r7, #56	@ 0x38
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40010000 	.word	0x40010000
 8005388:	40023800 	.word	0x40023800
 800538c:	40021000 	.word	0x40021000
 8005390:	40020400 	.word	0x40020400
 8005394:	40000400 	.word	0x40000400
 8005398:	40000c00 	.word	0x40000c00
 800539c:	40020000 	.word	0x40020000
 80053a0:	40014000 	.word	0x40014000
 80053a4:	40002000 	.word	0x40002000

080053a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b0b4      	sub	sp, #208	@ 0xd0
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053b0:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	605a      	str	r2, [r3, #4]
 80053ba:	609a      	str	r2, [r3, #8]
 80053bc:	60da      	str	r2, [r3, #12]
 80053be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80053c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80053c4:	2284      	movs	r2, #132	@ 0x84
 80053c6:	2100      	movs	r1, #0
 80053c8:	4618      	mov	r0, r3
 80053ca:	f00d fbcb 	bl	8012b64 <memset>
  if(huart->Instance==UART4)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a8a      	ldr	r2, [pc, #552]	@ (80055fc <HAL_UART_MspInit+0x254>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d174      	bne.n	80054c2 <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80053d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80053dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80053de:	2300      	movs	r3, #0
 80053e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 fea9 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80053f4:	f7ff fcee 	bl	8004dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80053f8:	4b81      	ldr	r3, [pc, #516]	@ (8005600 <HAL_UART_MspInit+0x258>)
 80053fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fc:	4a80      	ldr	r2, [pc, #512]	@ (8005600 <HAL_UART_MspInit+0x258>)
 80053fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005402:	6413      	str	r3, [r2, #64]	@ 0x40
 8005404:	4b7e      	ldr	r3, [pc, #504]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005408:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800540c:	637b      	str	r3, [r7, #52]	@ 0x34
 800540e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005410:	4b7b      	ldr	r3, [pc, #492]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	4a7a      	ldr	r2, [pc, #488]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005416:	f043 0304 	orr.w	r3, r3, #4
 800541a:	6313      	str	r3, [r2, #48]	@ 0x30
 800541c:	4b78      	ldr	r3, [pc, #480]	@ (8005600 <HAL_UART_MspInit+0x258>)
 800541e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005420:	f003 0304 	and.w	r3, r3, #4
 8005424:	633b      	str	r3, [r7, #48]	@ 0x30
 8005426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005428:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800542c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005430:	2302      	movs	r3, #2
 8005432:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005436:	2300      	movs	r3, #0
 8005438:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800543c:	2303      	movs	r3, #3
 800543e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005442:	2308      	movs	r3, #8
 8005444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005448:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800544c:	4619      	mov	r1, r3
 800544e:	486d      	ldr	r0, [pc, #436]	@ (8005604 <HAL_UART_MspInit+0x25c>)
 8005450:	f001 f984 	bl	800675c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005454:	4b6c      	ldr	r3, [pc, #432]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005456:	4a6d      	ldr	r2, [pc, #436]	@ (800560c <HAL_UART_MspInit+0x264>)
 8005458:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800545a:	4b6b      	ldr	r3, [pc, #428]	@ (8005608 <HAL_UART_MspInit+0x260>)
 800545c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005460:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005462:	4b69      	ldr	r3, [pc, #420]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005468:	4b67      	ldr	r3, [pc, #412]	@ (8005608 <HAL_UART_MspInit+0x260>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800546e:	4b66      	ldr	r3, [pc, #408]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005470:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005474:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005476:	4b64      	ldr	r3, [pc, #400]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800547c:	4b62      	ldr	r3, [pc, #392]	@ (8005608 <HAL_UART_MspInit+0x260>)
 800547e:	2200      	movs	r2, #0
 8005480:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005482:	4b61      	ldr	r3, [pc, #388]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005484:	2200      	movs	r2, #0
 8005486:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005488:	4b5f      	ldr	r3, [pc, #380]	@ (8005608 <HAL_UART_MspInit+0x260>)
 800548a:	2200      	movs	r2, #0
 800548c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800548e:	4b5e      	ldr	r3, [pc, #376]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005490:	2200      	movs	r2, #0
 8005492:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005494:	485c      	ldr	r0, [pc, #368]	@ (8005608 <HAL_UART_MspInit+0x260>)
 8005496:	f000 fd57 	bl	8005f48 <HAL_DMA_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80054a0:	f7ff fc98 	bl	8004dd4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a58      	ldr	r2, [pc, #352]	@ (8005608 <HAL_UART_MspInit+0x260>)
 80054a8:	675a      	str	r2, [r3, #116]	@ 0x74
 80054aa:	4a57      	ldr	r2, [pc, #348]	@ (8005608 <HAL_UART_MspInit+0x260>)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80054b0:	2200      	movs	r2, #0
 80054b2:	2105      	movs	r1, #5
 80054b4:	2034      	movs	r0, #52	@ 0x34
 80054b6:	f000 fd1d 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80054ba:	2034      	movs	r0, #52	@ 0x34
 80054bc:	f000 fd36 	bl	8005f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80054c0:	e1e2      	b.n	8005888 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==UART5)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a52      	ldr	r2, [pc, #328]	@ (8005610 <HAL_UART_MspInit+0x268>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	f040 80a9 	bne.w	8005620 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80054ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80054de:	4618      	mov	r0, r3
 80054e0:	f002 fe2e 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <HAL_UART_MspInit+0x146>
      Error_Handler();
 80054ea:	f7ff fc73 	bl	8004dd4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80054ee:	4b44      	ldr	r3, [pc, #272]	@ (8005600 <HAL_UART_MspInit+0x258>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f2:	4a43      	ldr	r2, [pc, #268]	@ (8005600 <HAL_UART_MspInit+0x258>)
 80054f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80054f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80054fa:	4b41      	ldr	r3, [pc, #260]	@ (8005600 <HAL_UART_MspInit+0x258>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005502:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005506:	4b3e      	ldr	r3, [pc, #248]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550a:	4a3d      	ldr	r2, [pc, #244]	@ (8005600 <HAL_UART_MspInit+0x258>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	6313      	str	r3, [r2, #48]	@ 0x30
 8005512:	4b3b      	ldr	r3, [pc, #236]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800551e:	4b38      	ldr	r3, [pc, #224]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	4a37      	ldr	r2, [pc, #220]	@ (8005600 <HAL_UART_MspInit+0x258>)
 8005524:	f043 0308 	orr.w	r3, r3, #8
 8005528:	6313      	str	r3, [r2, #48]	@ 0x30
 800552a:	4b35      	ldr	r3, [pc, #212]	@ (8005600 <HAL_UART_MspInit+0x258>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800553a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553e:	2302      	movs	r3, #2
 8005540:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005544:	2300      	movs	r3, #0
 8005546:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800554a:	2303      	movs	r3, #3
 800554c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005550:	2308      	movs	r3, #8
 8005552:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005556:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800555a:	4619      	mov	r1, r3
 800555c:	4829      	ldr	r0, [pc, #164]	@ (8005604 <HAL_UART_MspInit+0x25c>)
 800555e:	f001 f8fd 	bl	800675c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005562:	2304      	movs	r3, #4
 8005564:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005568:	2302      	movs	r3, #2
 800556a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800556e:	2300      	movs	r3, #0
 8005570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005574:	2303      	movs	r3, #3
 8005576:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800557a:	2308      	movs	r3, #8
 800557c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005580:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8005584:	4619      	mov	r1, r3
 8005586:	4823      	ldr	r0, [pc, #140]	@ (8005614 <HAL_UART_MspInit+0x26c>)
 8005588:	f001 f8e8 	bl	800675c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800558c:	4b22      	ldr	r3, [pc, #136]	@ (8005618 <HAL_UART_MspInit+0x270>)
 800558e:	4a23      	ldr	r2, [pc, #140]	@ (800561c <HAL_UART_MspInit+0x274>)
 8005590:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005592:	4b21      	ldr	r3, [pc, #132]	@ (8005618 <HAL_UART_MspInit+0x270>)
 8005594:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005598:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800559a:	4b1f      	ldr	r3, [pc, #124]	@ (8005618 <HAL_UART_MspInit+0x270>)
 800559c:	2200      	movs	r2, #0
 800559e:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80055ac:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055b4:	4b18      	ldr	r3, [pc, #96]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 80055ba:	4b17      	ldr	r3, [pc, #92]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055bc:	2200      	movs	r2, #0
 80055be:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055c0:	4b15      	ldr	r3, [pc, #84]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055c6:	4b14      	ldr	r3, [pc, #80]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80055cc:	4812      	ldr	r0, [pc, #72]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055ce:	f000 fcbb 	bl	8005f48 <HAL_DMA_Init>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_UART_MspInit+0x234>
      Error_Handler();
 80055d8:	f7ff fbfc 	bl	8004dd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a0e      	ldr	r2, [pc, #56]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055e0:	675a      	str	r2, [r3, #116]	@ 0x74
 80055e2:	4a0d      	ldr	r2, [pc, #52]	@ (8005618 <HAL_UART_MspInit+0x270>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80055e8:	2200      	movs	r2, #0
 80055ea:	2105      	movs	r1, #5
 80055ec:	2035      	movs	r0, #53	@ 0x35
 80055ee:	f000 fc81 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80055f2:	2035      	movs	r0, #53	@ 0x35
 80055f4:	f000 fc9a 	bl	8005f2c <HAL_NVIC_EnableIRQ>
}
 80055f8:	e146      	b.n	8005888 <HAL_UART_MspInit+0x4e0>
 80055fa:	bf00      	nop
 80055fc:	40004c00 	.word	0x40004c00
 8005600:	40023800 	.word	0x40023800
 8005604:	40020800 	.word	0x40020800
 8005608:	20000950 	.word	0x20000950
 800560c:	40026040 	.word	0x40026040
 8005610:	40005000 	.word	0x40005000
 8005614:	40020c00 	.word	0x40020c00
 8005618:	200009b0 	.word	0x200009b0
 800561c:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a9a      	ldr	r2, [pc, #616]	@ (8005890 <HAL_UART_MspInit+0x4e8>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d172      	bne.n	8005710 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800562e:	2300      	movs	r3, #0
 8005630:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005634:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005638:	4618      	mov	r0, r3
 800563a:	f002 fd81 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d001      	beq.n	8005648 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 8005644:	f7ff fbc6 	bl	8004dd4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005648:	4b92      	ldr	r3, [pc, #584]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 800564a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564c:	4a91      	ldr	r2, [pc, #580]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 800564e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005652:	6413      	str	r3, [r2, #64]	@ 0x40
 8005654:	4b8f      	ldr	r3, [pc, #572]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005660:	4b8c      	ldr	r3, [pc, #560]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005664:	4a8b      	ldr	r2, [pc, #556]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005666:	f043 0308 	orr.w	r3, r3, #8
 800566a:	6313      	str	r3, [r2, #48]	@ 0x30
 800566c:	4b89      	ldr	r3, [pc, #548]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	61fb      	str	r3, [r7, #28]
 8005676:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005678:	2360      	movs	r3, #96	@ 0x60
 800567a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800567e:	2302      	movs	r3, #2
 8005680:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800568a:	2303      	movs	r3, #3
 800568c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005690:	2307      	movs	r3, #7
 8005692:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005696:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800569a:	4619      	mov	r1, r3
 800569c:	487e      	ldr	r0, [pc, #504]	@ (8005898 <HAL_UART_MspInit+0x4f0>)
 800569e:	f001 f85d 	bl	800675c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80056a2:	4b7e      	ldr	r3, [pc, #504]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056a4:	4a7e      	ldr	r2, [pc, #504]	@ (80058a0 <HAL_UART_MspInit+0x4f8>)
 80056a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80056a8:	4b7c      	ldr	r3, [pc, #496]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056aa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80056ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056b0:	4b7a      	ldr	r3, [pc, #488]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056b6:	4b79      	ldr	r3, [pc, #484]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056bc:	4b77      	ldr	r3, [pc, #476]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056c4:	4b75      	ldr	r3, [pc, #468]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056ca:	4b74      	ldr	r3, [pc, #464]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80056d0:	4b72      	ldr	r3, [pc, #456]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80056d6:	4b71      	ldr	r3, [pc, #452]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056d8:	2200      	movs	r2, #0
 80056da:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056dc:	4b6f      	ldr	r3, [pc, #444]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056de:	2200      	movs	r2, #0
 80056e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80056e2:	486e      	ldr	r0, [pc, #440]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056e4:	f000 fc30 	bl	8005f48 <HAL_DMA_Init>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_UART_MspInit+0x34a>
      Error_Handler();
 80056ee:	f7ff fb71 	bl	8004dd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a69      	ldr	r2, [pc, #420]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056f6:	675a      	str	r2, [r3, #116]	@ 0x74
 80056f8:	4a68      	ldr	r2, [pc, #416]	@ (800589c <HAL_UART_MspInit+0x4f4>)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80056fe:	2200      	movs	r2, #0
 8005700:	2105      	movs	r1, #5
 8005702:	2026      	movs	r0, #38	@ 0x26
 8005704:	f000 fbf6 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005708:	2026      	movs	r0, #38	@ 0x26
 800570a:	f000 fc0f 	bl	8005f2c <HAL_NVIC_EnableIRQ>
}
 800570e:	e0bb      	b.n	8005888 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART3)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a63      	ldr	r2, [pc, #396]	@ (80058a4 <HAL_UART_MspInit+0x4fc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d13e      	bne.n	8005798 <HAL_UART_MspInit+0x3f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800571a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800571e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005720:	2300      	movs	r3, #0
 8005722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005726:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800572a:	4618      	mov	r0, r3
 800572c:	f002 fd08 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_UART_MspInit+0x392>
      Error_Handler();
 8005736:	f7ff fb4d 	bl	8004dd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800573a:	4b56      	ldr	r3, [pc, #344]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 800573c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573e:	4a55      	ldr	r2, [pc, #340]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005744:	6413      	str	r3, [r2, #64]	@ 0x40
 8005746:	4b53      	ldr	r3, [pc, #332]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005752:	4b50      	ldr	r3, [pc, #320]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	4a4f      	ldr	r2, [pc, #316]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005758:	f043 0308 	orr.w	r3, r3, #8
 800575c:	6313      	str	r3, [r2, #48]	@ 0x30
 800575e:	4b4d      	ldr	r3, [pc, #308]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 8005760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	617b      	str	r3, [r7, #20]
 8005768:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800576a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800576e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005772:	2302      	movs	r3, #2
 8005774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005778:	2301      	movs	r3, #1
 800577a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800577e:	2303      	movs	r3, #3
 8005780:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005784:	2307      	movs	r3, #7
 8005786:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800578a:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800578e:	4619      	mov	r1, r3
 8005790:	4841      	ldr	r0, [pc, #260]	@ (8005898 <HAL_UART_MspInit+0x4f0>)
 8005792:	f000 ffe3 	bl	800675c <HAL_GPIO_Init>
}
 8005796:	e077      	b.n	8005888 <HAL_UART_MspInit+0x4e0>
  else if(huart->Instance==USART6)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a42      	ldr	r2, [pc, #264]	@ (80058a8 <HAL_UART_MspInit+0x500>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d172      	bne.n	8005888 <HAL_UART_MspInit+0x4e0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80057a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80057a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80057a8:	2300      	movs	r3, #0
 80057aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80057ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80057b2:	4618      	mov	r0, r3
 80057b4:	f002 fcc4 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_UART_MspInit+0x41a>
      Error_Handler();
 80057be:	f7ff fb09 	bl	8004dd4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80057c2:	4b34      	ldr	r3, [pc, #208]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	4a33      	ldr	r2, [pc, #204]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057c8:	f043 0320 	orr.w	r3, r3, #32
 80057cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80057ce:	4b31      	ldr	r3, [pc, #196]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	613b      	str	r3, [r7, #16]
 80057d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057da:	4b2e      	ldr	r3, [pc, #184]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057de:	4a2d      	ldr	r2, [pc, #180]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057e0:	f043 0304 	orr.w	r3, r3, #4
 80057e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005894 <HAL_UART_MspInit+0x4ec>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80057f2:	23c0      	movs	r3, #192	@ 0xc0
 80057f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f8:	2302      	movs	r3, #2
 80057fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005804:	2303      	movs	r3, #3
 8005806:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800580a:	2308      	movs	r3, #8
 800580c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005810:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8005814:	4619      	mov	r1, r3
 8005816:	4825      	ldr	r0, [pc, #148]	@ (80058ac <HAL_UART_MspInit+0x504>)
 8005818:	f000 ffa0 	bl	800675c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800581c:	4b24      	ldr	r3, [pc, #144]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 800581e:	4a25      	ldr	r2, [pc, #148]	@ (80058b4 <HAL_UART_MspInit+0x50c>)
 8005820:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005822:	4b23      	ldr	r3, [pc, #140]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005824:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005828:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800582a:	4b21      	ldr	r3, [pc, #132]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005830:	4b1f      	ldr	r3, [pc, #124]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005836:	4b1e      	ldr	r3, [pc, #120]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800583c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800583e:	4b1c      	ldr	r3, [pc, #112]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005840:	2200      	movs	r2, #0
 8005842:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005844:	4b1a      	ldr	r3, [pc, #104]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005846:	2200      	movs	r2, #0
 8005848:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800584a:	4b19      	ldr	r3, [pc, #100]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 800584c:	2200      	movs	r2, #0
 800584e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005850:	4b17      	ldr	r3, [pc, #92]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005852:	2200      	movs	r2, #0
 8005854:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005856:	4b16      	ldr	r3, [pc, #88]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005858:	2200      	movs	r2, #0
 800585a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800585c:	4814      	ldr	r0, [pc, #80]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 800585e:	f000 fb73 	bl	8005f48 <HAL_DMA_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_MspInit+0x4c4>
      Error_Handler();
 8005868:	f7ff fab4 	bl	8004dd4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a10      	ldr	r2, [pc, #64]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005870:	675a      	str	r2, [r3, #116]	@ 0x74
 8005872:	4a0f      	ldr	r2, [pc, #60]	@ (80058b0 <HAL_UART_MspInit+0x508>)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8005878:	2200      	movs	r2, #0
 800587a:	2105      	movs	r1, #5
 800587c:	2047      	movs	r0, #71	@ 0x47
 800587e:	f000 fb39 	bl	8005ef4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005882:	2047      	movs	r0, #71	@ 0x47
 8005884:	f000 fb52 	bl	8005f2c <HAL_NVIC_EnableIRQ>
}
 8005888:	bf00      	nop
 800588a:	37d0      	adds	r7, #208	@ 0xd0
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40004400 	.word	0x40004400
 8005894:	40023800 	.word	0x40023800
 8005898:	40020c00 	.word	0x40020c00
 800589c:	20000a10 	.word	0x20000a10
 80058a0:	40026088 	.word	0x40026088
 80058a4:	40004800 	.word	0x40004800
 80058a8:	40011400 	.word	0x40011400
 80058ac:	40020800 	.word	0x40020800
 80058b0:	20000a70 	.word	0x20000a70
 80058b4:	40026428 	.word	0x40026428

080058b8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b0ac      	sub	sp, #176	@ 0xb0
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
 80058c8:	605a      	str	r2, [r3, #4]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	60da      	str	r2, [r3, #12]
 80058ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058d0:	f107 0318 	add.w	r3, r7, #24
 80058d4:	2284      	movs	r2, #132	@ 0x84
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f00d f943 	bl	8012b64 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058e6:	d159      	bne.n	800599c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80058e8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80058ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058f4:	f107 0318 	add.w	r3, r7, #24
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 fc21 	bl	8008140 <HAL_RCCEx_PeriphCLKConfig>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	d001      	beq.n	8005908 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8005904:	f7ff fa66 	bl	8004dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005908:	4b26      	ldr	r3, [pc, #152]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	4a25      	ldr	r2, [pc, #148]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 800590e:	f043 0301 	orr.w	r3, r3, #1
 8005912:	6313      	str	r3, [r2, #48]	@ 0x30
 8005914:	4b23      	ldr	r3, [pc, #140]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 8005916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8005920:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8005924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005928:	2302      	movs	r3, #2
 800592a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592e:	2300      	movs	r3, #0
 8005930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005934:	2303      	movs	r3, #3
 8005936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800593a:	230a      	movs	r3, #10
 800593c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005944:	4619      	mov	r1, r3
 8005946:	4818      	ldr	r0, [pc, #96]	@ (80059a8 <HAL_PCD_MspInit+0xf0>)
 8005948:	f000 ff08 	bl	800675c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800594c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005954:	2300      	movs	r3, #0
 8005956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005960:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005964:	4619      	mov	r1, r3
 8005966:	4810      	ldr	r0, [pc, #64]	@ (80059a8 <HAL_PCD_MspInit+0xf0>)
 8005968:	f000 fef8 	bl	800675c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800596c:	4b0d      	ldr	r3, [pc, #52]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 800596e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005970:	4a0c      	ldr	r2, [pc, #48]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 8005972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005976:	6353      	str	r3, [r2, #52]	@ 0x34
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 800597a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800597c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 8005986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005988:	4a06      	ldr	r2, [pc, #24]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 800598a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800598e:	6453      	str	r3, [r2, #68]	@ 0x44
 8005990:	4b04      	ldr	r3, [pc, #16]	@ (80059a4 <HAL_PCD_MspInit+0xec>)
 8005992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005994:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005998:	60fb      	str	r3, [r7, #12]
 800599a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800599c:	bf00      	nop
 800599e:	37b0      	adds	r7, #176	@ 0xb0
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40020000 	.word	0x40020000

080059ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08e      	sub	sp, #56	@ 0x38
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80059b4:	2300      	movs	r3, #0
 80059b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80059bc:	4b33      	ldr	r3, [pc, #204]	@ (8005a8c <HAL_InitTick+0xe0>)
 80059be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c0:	4a32      	ldr	r2, [pc, #200]	@ (8005a8c <HAL_InitTick+0xe0>)
 80059c2:	f043 0310 	orr.w	r3, r3, #16
 80059c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80059c8:	4b30      	ldr	r3, [pc, #192]	@ (8005a8c <HAL_InitTick+0xe0>)
 80059ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059d4:	f107 0210 	add.w	r2, r7, #16
 80059d8:	f107 0314 	add.w	r3, r7, #20
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f002 fb7c 	bl	80080dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d103      	bne.n	80059f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80059ee:	f002 fb4d 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 80059f2:	6378      	str	r0, [r7, #52]	@ 0x34
 80059f4:	e004      	b.n	8005a00 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80059f6:	f002 fb49 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 80059fa:	4603      	mov	r3, r0
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a02:	4a23      	ldr	r2, [pc, #140]	@ (8005a90 <HAL_InitTick+0xe4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	0c9b      	lsrs	r3, r3, #18
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005a0e:	4b21      	ldr	r3, [pc, #132]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a10:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <HAL_InitTick+0xec>)
 8005a12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005a14:	4b1f      	ldr	r3, [pc, #124]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005a1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a28:	4b1a      	ldr	r3, [pc, #104]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a2e:	4b19      	ldr	r3, [pc, #100]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005a34:	4817      	ldr	r0, [pc, #92]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a36:	f003 fd3d 	bl	80094b4 <HAL_TIM_Base_Init>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8005a40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11b      	bne.n	8005a80 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005a48:	4812      	ldr	r0, [pc, #72]	@ (8005a94 <HAL_InitTick+0xe8>)
 8005a4a:	f003 fe23 	bl	8009694 <HAL_TIM_Base_Start_IT>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8005a54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d111      	bne.n	8005a80 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a5c:	2036      	movs	r0, #54	@ 0x36
 8005a5e:	f000 fa65 	bl	8005f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b0f      	cmp	r3, #15
 8005a66:	d808      	bhi.n	8005a7a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005a68:	2200      	movs	r2, #0
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	2036      	movs	r0, #54	@ 0x36
 8005a6e:	f000 fa41 	bl	8005ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a72:	4a0a      	ldr	r2, [pc, #40]	@ (8005a9c <HAL_InitTick+0xf0>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	e002      	b.n	8005a80 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005a80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3738      	adds	r7, #56	@ 0x38
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40023800 	.word	0x40023800
 8005a90:	431bde83 	.word	0x431bde83
 8005a94:	20001288 	.word	0x20001288
 8005a98:	40001000 	.word	0x40001000
 8005a9c:	20000058 	.word	0x20000058

08005aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005aa4:	bf00      	nop
 8005aa6:	e7fd      	b.n	8005aa4 <NMI_Handler+0x4>

08005aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005aac:	bf00      	nop
 8005aae:	e7fd      	b.n	8005aac <HardFault_Handler+0x4>

08005ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ab4:	bf00      	nop
 8005ab6:	e7fd      	b.n	8005ab4 <MemManage_Handler+0x4>

08005ab8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <BusFault_Handler+0x4>

08005ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ac4:	bf00      	nop
 8005ac6:	e7fd      	b.n	8005ac4 <UsageFault_Handler+0x4>

08005ac8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005acc:	bf00      	nop
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005adc:	4802      	ldr	r0, [pc, #8]	@ (8005ae8 <DMA1_Stream0_IRQHandler+0x10>)
 8005ade:	f000 fbd3 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200009b0 	.word	0x200009b0

08005aec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005af0:	4802      	ldr	r0, [pc, #8]	@ (8005afc <DMA1_Stream2_IRQHandler+0x10>)
 8005af2:	f000 fbc9 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000950 	.word	0x20000950

08005b00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b04:	4802      	ldr	r0, [pc, #8]	@ (8005b10 <DMA1_Stream5_IRQHandler+0x10>)
 8005b06:	f000 fbbf 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20000a10 	.word	0x20000a10

08005b14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b18:	4802      	ldr	r0, [pc, #8]	@ (8005b24 <TIM1_CC_IRQHandler+0x10>)
 8005b1a:	f004 facf 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000448 	.word	0x20000448

08005b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005b2c:	4802      	ldr	r0, [pc, #8]	@ (8005b38 <TIM2_IRQHandler+0x10>)
 8005b2e:	f004 fac5 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000494 	.word	0x20000494

08005b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005b40:	4802      	ldr	r0, [pc, #8]	@ (8005b4c <TIM3_IRQHandler+0x10>)
 8005b42:	f004 fabb 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	200004e0 	.word	0x200004e0

08005b50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005b54:	4802      	ldr	r0, [pc, #8]	@ (8005b60 <TIM4_IRQHandler+0x10>)
 8005b56:	f004 fab1 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	2000052c 	.word	0x2000052c

08005b64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b68:	4802      	ldr	r0, [pc, #8]	@ (8005b74 <USART2_IRQHandler+0x10>)
 8005b6a:	f005 fbbb 	bl	800b2e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	200007b8 	.word	0x200007b8

08005b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8005b7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005b80:	f000 ffca 	bl	8006b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005b84:	bf00      	nop
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005b8c:	4802      	ldr	r0, [pc, #8]	@ (8005b98 <TIM5_IRQHandler+0x10>)
 8005b8e:	f004 fa95 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005b92:	bf00      	nop
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	20000578 	.word	0x20000578

08005b9c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005ba0:	4802      	ldr	r0, [pc, #8]	@ (8005bac <UART4_IRQHandler+0x10>)
 8005ba2:	f005 fb9f 	bl	800b2e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005ba6:	bf00      	nop
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	200006a8 	.word	0x200006a8

08005bb0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005bb4:	4802      	ldr	r0, [pc, #8]	@ (8005bc0 <UART5_IRQHandler+0x10>)
 8005bb6:	f005 fb95 	bl	800b2e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000730 	.word	0x20000730

08005bc4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005bc8:	4802      	ldr	r0, [pc, #8]	@ (8005bd4 <TIM6_DAC_IRQHandler+0x10>)
 8005bca:	f004 fa77 	bl	800a0bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005bce:	bf00      	nop
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20001288 	.word	0x20001288

08005bd8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005bdc:	4802      	ldr	r0, [pc, #8]	@ (8005be8 <DMA2_Stream1_IRQHandler+0x10>)
 8005bde:	f000 fb53 	bl	8006288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20000a70 	.word	0x20000a70

08005bec <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005bf0:	4802      	ldr	r0, [pc, #8]	@ (8005bfc <USART6_IRQHandler+0x10>)
 8005bf2:	f005 fb77 	bl	800b2e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005bf6:	bf00      	nop
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	200008c8 	.word	0x200008c8

08005c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c08:	4a14      	ldr	r2, [pc, #80]	@ (8005c5c <_sbrk+0x5c>)
 8005c0a:	4b15      	ldr	r3, [pc, #84]	@ (8005c60 <_sbrk+0x60>)
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c14:	4b13      	ldr	r3, [pc, #76]	@ (8005c64 <_sbrk+0x64>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d102      	bne.n	8005c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c1c:	4b11      	ldr	r3, [pc, #68]	@ (8005c64 <_sbrk+0x64>)
 8005c1e:	4a12      	ldr	r2, [pc, #72]	@ (8005c68 <_sbrk+0x68>)
 8005c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c22:	4b10      	ldr	r3, [pc, #64]	@ (8005c64 <_sbrk+0x64>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4413      	add	r3, r2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d207      	bcs.n	8005c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c30:	f00c ffa0 	bl	8012b74 <__errno>
 8005c34:	4603      	mov	r3, r0
 8005c36:	220c      	movs	r2, #12
 8005c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	e009      	b.n	8005c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c40:	4b08      	ldr	r3, [pc, #32]	@ (8005c64 <_sbrk+0x64>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c46:	4b07      	ldr	r3, [pc, #28]	@ (8005c64 <_sbrk+0x64>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	4a05      	ldr	r2, [pc, #20]	@ (8005c64 <_sbrk+0x64>)
 8005c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20050000 	.word	0x20050000
 8005c60:	00000400 	.word	0x00000400
 8005c64:	200012d4 	.word	0x200012d4
 8005c68:	20009600 	.word	0x20009600

08005c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <SystemInit+0x20>)
 8005c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c76:	4a05      	ldr	r2, [pc, #20]	@ (8005c8c <SystemInit+0x20>)
 8005c78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	e000ed00 	.word	0xe000ed00

08005c90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8005c90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005cc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c94:	f7ff ffea 	bl	8005c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c98:	480c      	ldr	r0, [pc, #48]	@ (8005ccc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005c9a:	490d      	ldr	r1, [pc, #52]	@ (8005cd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005c9c:	4a0d      	ldr	r2, [pc, #52]	@ (8005cd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ca0:	e002      	b.n	8005ca8 <LoopCopyDataInit>

08005ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ca6:	3304      	adds	r3, #4

08005ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005cac:	d3f9      	bcc.n	8005ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005cae:	4a0a      	ldr	r2, [pc, #40]	@ (8005cd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8005cdc <LoopFillZerobss+0x22>)
  movs r3, #0
 8005cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005cb4:	e001      	b.n	8005cba <LoopFillZerobss>

08005cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005cb8:	3204      	adds	r2, #4

08005cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005cbc:	d3fb      	bcc.n	8005cb6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8005cbe:	f00c ff5f 	bl	8012b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005cc2:	f7fe f8c5 	bl	8003e50 <main>
  bx  lr    
 8005cc6:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8005cc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005ccc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cd0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8005cd4:	08013d90 	.word	0x08013d90
  ldr r2, =_sbss
 8005cd8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8005cdc:	200095fc 	.word	0x200095fc

08005ce0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005ce0:	e7fe      	b.n	8005ce0 <ADC_IRQHandler>

08005ce2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ce6:	2003      	movs	r0, #3
 8005ce8:	f000 f8f9 	bl	8005ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005cec:	200f      	movs	r0, #15
 8005cee:	f7ff fe5d 	bl	80059ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005cf2:	f7ff f875 	bl	8004de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005d00:	4b06      	ldr	r3, [pc, #24]	@ (8005d1c <HAL_IncTick+0x20>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <HAL_IncTick+0x24>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <HAL_IncTick+0x24>)
 8005d0e:	6013      	str	r3, [r2, #0]
}
 8005d10:	bf00      	nop
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000005c 	.word	0x2000005c
 8005d20:	200012d8 	.word	0x200012d8

08005d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  return uwTick;
 8005d28:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <HAL_GetTick+0x14>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	200012d8 	.word	0x200012d8

08005d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005d44:	f7ff ffee 	bl	8005d24 <HAL_GetTick>
 8005d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d54:	d005      	beq.n	8005d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d56:	4b0a      	ldr	r3, [pc, #40]	@ (8005d80 <HAL_Delay+0x44>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d62:	bf00      	nop
 8005d64:	f7ff ffde 	bl	8005d24 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d8f7      	bhi.n	8005d64 <HAL_Delay+0x28>
  {
  }
}
 8005d74:	bf00      	nop
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000005c 	.word	0x2000005c

08005d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d94:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005da0:	4013      	ands	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005db2:	4a04      	ldr	r2, [pc, #16]	@ (8005dc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	60d3      	str	r3, [r2, #12]
}
 8005db8:	bf00      	nop
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	e000ed00 	.word	0xe000ed00
 8005dc8:	05fa0000 	.word	0x05fa0000

08005dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005dd0:	4b04      	ldr	r3, [pc, #16]	@ (8005de4 <__NVIC_GetPriorityGrouping+0x18>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	0a1b      	lsrs	r3, r3, #8
 8005dd6:	f003 0307 	and.w	r3, r3, #7
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	4603      	mov	r3, r0
 8005df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	db0b      	blt.n	8005e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dfa:	79fb      	ldrb	r3, [r7, #7]
 8005dfc:	f003 021f 	and.w	r2, r3, #31
 8005e00:	4907      	ldr	r1, [pc, #28]	@ (8005e20 <__NVIC_EnableIRQ+0x38>)
 8005e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e06:	095b      	lsrs	r3, r3, #5
 8005e08:	2001      	movs	r0, #1
 8005e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	e000e100 	.word	0xe000e100

08005e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	db0a      	blt.n	8005e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	b2da      	uxtb	r2, r3
 8005e3c:	490c      	ldr	r1, [pc, #48]	@ (8005e70 <__NVIC_SetPriority+0x4c>)
 8005e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e42:	0112      	lsls	r2, r2, #4
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	440b      	add	r3, r1
 8005e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005e4c:	e00a      	b.n	8005e64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4908      	ldr	r1, [pc, #32]	@ (8005e74 <__NVIC_SetPriority+0x50>)
 8005e54:	79fb      	ldrb	r3, [r7, #7]
 8005e56:	f003 030f 	and.w	r3, r3, #15
 8005e5a:	3b04      	subs	r3, #4
 8005e5c:	0112      	lsls	r2, r2, #4
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	440b      	add	r3, r1
 8005e62:	761a      	strb	r2, [r3, #24]
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	e000e100 	.word	0xe000e100
 8005e74:	e000ed00 	.word	0xe000ed00

08005e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b089      	sub	sp, #36	@ 0x24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f1c3 0307 	rsb	r3, r3, #7
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	bf28      	it	cs
 8005e96:	2304      	movcs	r3, #4
 8005e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d902      	bls.n	8005ea8 <NVIC_EncodePriority+0x30>
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3b03      	subs	r3, #3
 8005ea6:	e000      	b.n	8005eaa <NVIC_EncodePriority+0x32>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005eac:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	401a      	ands	r2, r3
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8005eca:	43d9      	mvns	r1, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ed0:	4313      	orrs	r3, r2
         );
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3724      	adds	r7, #36	@ 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff4c 	bl	8005d84 <__NVIC_SetPriorityGrouping>
}
 8005eec:	bf00      	nop
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b086      	sub	sp, #24
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f06:	f7ff ff61 	bl	8005dcc <__NVIC_GetPriorityGrouping>
 8005f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	6978      	ldr	r0, [r7, #20]
 8005f12:	f7ff ffb1 	bl	8005e78 <NVIC_EncodePriority>
 8005f16:	4602      	mov	r2, r0
 8005f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7ff ff80 	bl	8005e24 <__NVIC_SetPriority>
}
 8005f24:	bf00      	nop
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	4603      	mov	r3, r0
 8005f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff ff54 	bl	8005de8 <__NVIC_EnableIRQ>
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f54:	f7ff fee6 	bl	8005d24 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e099      	b.n	8006098 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f84:	e00f      	b.n	8005fa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f86:	f7ff fecd 	bl	8005d24 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b05      	cmp	r3, #5
 8005f92:	d908      	bls.n	8005fa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e078      	b.n	8006098 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d1e8      	bne.n	8005f86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4b38      	ldr	r3, [pc, #224]	@ (80060a0 <HAL_DMA_Init+0x158>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fde:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d107      	bne.n	8006010 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	4313      	orrs	r3, r2
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006036:	2b04      	cmp	r3, #4
 8006038:	d117      	bne.n	800606a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00e      	beq.n	800606a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 fb09 	bl	8006664 <DMA_CheckFifoParam>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2240      	movs	r2, #64	@ 0x40
 800605c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006066:	2301      	movs	r3, #1
 8006068:	e016      	b.n	8006098 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 fac0 	bl	80065f8 <DMA_CalcBaseAndBitshift>
 8006078:	4603      	mov	r3, r0
 800607a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006080:	223f      	movs	r2, #63	@ 0x3f
 8006082:	409a      	lsls	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	f010803f 	.word	0xf010803f

080060a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_DMA_Start_IT+0x26>
 80060c6:	2302      	movs	r3, #2
 80060c8:	e048      	b.n	800615c <HAL_DMA_Start_IT+0xb8>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d137      	bne.n	800614e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2202      	movs	r2, #2
 80060e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	68b9      	ldr	r1, [r7, #8]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f000 fa52 	bl	800659c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fc:	223f      	movs	r2, #63	@ 0x3f
 80060fe:	409a      	lsls	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f042 0216 	orr.w	r2, r2, #22
 8006112:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006122:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f042 0208 	orr.w	r2, r2, #8
 800613a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]
 800614c:	e005      	b.n	800615a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006156:	2302      	movs	r3, #2
 8006158:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006170:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006172:	f7ff fdd7 	bl	8005d24 <HAL_GetTick>
 8006176:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b02      	cmp	r3, #2
 8006182:	d008      	beq.n	8006196 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2280      	movs	r2, #128	@ 0x80
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e052      	b.n	800623c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0216 	bic.w	r2, r2, #22
 80061a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695a      	ldr	r2, [r3, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d103      	bne.n	80061c6 <HAL_DMA_Abort+0x62>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d007      	beq.n	80061d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f022 0208 	bic.w	r2, r2, #8
 80061d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f022 0201 	bic.w	r2, r2, #1
 80061e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80061e6:	e013      	b.n	8006210 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061e8:	f7ff fd9c 	bl	8005d24 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	2b05      	cmp	r3, #5
 80061f4:	d90c      	bls.n	8006210 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2220      	movs	r2, #32
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2203      	movs	r2, #3
 8006200:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e015      	b.n	800623c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d1e4      	bne.n	80061e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006222:	223f      	movs	r2, #63	@ 0x3f
 8006224:	409a      	lsls	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d004      	beq.n	8006262 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2280      	movs	r2, #128	@ 0x80
 800625c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e00c      	b.n	800627c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2205      	movs	r2, #5
 8006266:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0201 	bic.w	r2, r2, #1
 8006278:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006290:	2300      	movs	r3, #0
 8006292:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006294:	4b8e      	ldr	r3, [pc, #568]	@ (80064d0 <HAL_DMA_IRQHandler+0x248>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a8e      	ldr	r2, [pc, #568]	@ (80064d4 <HAL_DMA_IRQHandler+0x24c>)
 800629a:	fba2 2303 	umull	r2, r3, r2, r3
 800629e:	0a9b      	lsrs	r3, r3, #10
 80062a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062b2:	2208      	movs	r2, #8
 80062b4:	409a      	lsls	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4013      	ands	r3, r2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01a      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0304 	and.w	r3, r3, #4
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d013      	beq.n	80062f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e0:	2208      	movs	r2, #8
 80062e2:	409a      	lsls	r2, r3
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ec:	f043 0201 	orr.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062f8:	2201      	movs	r2, #1
 80062fa:	409a      	lsls	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4013      	ands	r3, r2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d012      	beq.n	800632a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006316:	2201      	movs	r2, #1
 8006318:	409a      	lsls	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006322:	f043 0202 	orr.w	r2, r3, #2
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632e:	2204      	movs	r2, #4
 8006330:	409a      	lsls	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0302 	and.w	r3, r3, #2
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00b      	beq.n	8006360 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800634c:	2204      	movs	r2, #4
 800634e:	409a      	lsls	r2, r3
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006358:	f043 0204 	orr.w	r2, r3, #4
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006364:	2210      	movs	r2, #16
 8006366:	409a      	lsls	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d043      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03c      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006382:	2210      	movs	r2, #16
 8006384:	409a      	lsls	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d018      	beq.n	80063ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d108      	bne.n	80063b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d024      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	4798      	blx	r3
 80063b6:	e01f      	b.n	80063f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01b      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	4798      	blx	r3
 80063c8:	e016      	b.n	80063f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0208 	bic.w	r2, r2, #8
 80063e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fc:	2220      	movs	r2, #32
 80063fe:	409a      	lsls	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	f000 808f 	beq.w	8006528 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8087 	beq.w	8006528 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800641e:	2220      	movs	r2, #32
 8006420:	409a      	lsls	r2, r3
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800642c:	b2db      	uxtb	r3, r3
 800642e:	2b05      	cmp	r3, #5
 8006430:	d136      	bne.n	80064a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0216 	bic.w	r2, r2, #22
 8006440:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006450:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	2b00      	cmp	r3, #0
 8006458:	d103      	bne.n	8006462 <HAL_DMA_IRQHandler+0x1da>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0208 	bic.w	r2, r2, #8
 8006470:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006476:	223f      	movs	r2, #63	@ 0x3f
 8006478:	409a      	lsls	r2, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d07e      	beq.n	8006594 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
        }
        return;
 800649e:	e079      	b.n	8006594 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d01d      	beq.n	80064ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10d      	bne.n	80064d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d031      	beq.n	8006528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
 80064cc:	e02c      	b.n	8006528 <HAL_DMA_IRQHandler+0x2a0>
 80064ce:	bf00      	nop
 80064d0:	20000054 	.word	0x20000054
 80064d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d023      	beq.n	8006528 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	4798      	blx	r3
 80064e8:	e01e      	b.n	8006528 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10f      	bne.n	8006518 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0210 	bic.w	r2, r2, #16
 8006506:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	2b00      	cmp	r3, #0
 800652e:	d032      	beq.n	8006596 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d022      	beq.n	8006582 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2205      	movs	r2, #5
 8006540:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	3301      	adds	r3, #1
 8006558:	60bb      	str	r3, [r7, #8]
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	429a      	cmp	r2, r3
 800655e:	d307      	bcc.n	8006570 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1f2      	bne.n	8006554 <HAL_DMA_IRQHandler+0x2cc>
 800656e:	e000      	b.n	8006572 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006570:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
 8006592:	e000      	b.n	8006596 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006594:	bf00      	nop
    }
  }
}
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80065b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	2b40      	cmp	r3, #64	@ 0x40
 80065c8:	d108      	bne.n	80065dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80065da:	e007      	b.n	80065ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	60da      	str	r2, [r3, #12]
}
 80065ec:	bf00      	nop
 80065ee:	3714      	adds	r7, #20
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	3b10      	subs	r3, #16
 8006608:	4a13      	ldr	r2, [pc, #76]	@ (8006658 <DMA_CalcBaseAndBitshift+0x60>)
 800660a:	fba2 2303 	umull	r2, r3, r2, r3
 800660e:	091b      	lsrs	r3, r3, #4
 8006610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006612:	4a12      	ldr	r2, [pc, #72]	@ (800665c <DMA_CalcBaseAndBitshift+0x64>)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4413      	add	r3, r2
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	461a      	mov	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2b03      	cmp	r3, #3
 8006624:	d908      	bls.n	8006638 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <DMA_CalcBaseAndBitshift+0x68>)
 800662e:	4013      	ands	r3, r2
 8006630:	1d1a      	adds	r2, r3, #4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	659a      	str	r2, [r3, #88]	@ 0x58
 8006636:	e006      	b.n	8006646 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	461a      	mov	r2, r3
 800663e:	4b08      	ldr	r3, [pc, #32]	@ (8006660 <DMA_CalcBaseAndBitshift+0x68>)
 8006640:	4013      	ands	r3, r2
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800664a:	4618      	mov	r0, r3
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	aaaaaaab 	.word	0xaaaaaaab
 800665c:	08013904 	.word	0x08013904
 8006660:	fffffc00 	.word	0xfffffc00

08006664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d11f      	bne.n	80066be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b03      	cmp	r3, #3
 8006682:	d856      	bhi.n	8006732 <DMA_CheckFifoParam+0xce>
 8006684:	a201      	add	r2, pc, #4	@ (adr r2, 800668c <DMA_CheckFifoParam+0x28>)
 8006686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800668a:	bf00      	nop
 800668c:	0800669d 	.word	0x0800669d
 8006690:	080066af 	.word	0x080066af
 8006694:	0800669d 	.word	0x0800669d
 8006698:	08006733 	.word	0x08006733
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d046      	beq.n	8006736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066ac:	e043      	b.n	8006736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80066b6:	d140      	bne.n	800673a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066bc:	e03d      	b.n	800673a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066c6:	d121      	bne.n	800670c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d837      	bhi.n	800673e <DMA_CheckFifoParam+0xda>
 80066ce:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <DMA_CheckFifoParam+0x70>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066e5 	.word	0x080066e5
 80066d8:	080066eb 	.word	0x080066eb
 80066dc:	080066e5 	.word	0x080066e5
 80066e0:	080066fd 	.word	0x080066fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e030      	b.n	800674c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d025      	beq.n	8006742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066fa:	e022      	b.n	8006742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006704:	d11f      	bne.n	8006746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800670a:	e01c      	b.n	8006746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b02      	cmp	r3, #2
 8006710:	d903      	bls.n	800671a <DMA_CheckFifoParam+0xb6>
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d003      	beq.n	8006720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006718:	e018      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	73fb      	strb	r3, [r7, #15]
      break;
 800671e:	e015      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00e      	beq.n	800674a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	73fb      	strb	r3, [r7, #15]
      break;
 8006730:	e00b      	b.n	800674a <DMA_CheckFifoParam+0xe6>
      break;
 8006732:	bf00      	nop
 8006734:	e00a      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;
 8006736:	bf00      	nop
 8006738:	e008      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;
 800673a:	bf00      	nop
 800673c:	e006      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;
 800673e:	bf00      	nop
 8006740:	e004      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;
 8006742:	bf00      	nop
 8006744:	e002      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;   
 8006746:	bf00      	nop
 8006748:	e000      	b.n	800674c <DMA_CheckFifoParam+0xe8>
      break;
 800674a:	bf00      	nop
    }
  } 
  
  return status; 
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop

0800675c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800675c:	b480      	push	{r7}
 800675e:	b089      	sub	sp, #36	@ 0x24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006766:	2300      	movs	r3, #0
 8006768:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800676e:	2300      	movs	r3, #0
 8006770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8006776:	2300      	movs	r3, #0
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e175      	b.n	8006a68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800677c:	2201      	movs	r2, #1
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	697a      	ldr	r2, [r7, #20]
 800678c:	4013      	ands	r3, r2
 800678e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	429a      	cmp	r2, r3
 8006796:	f040 8164 	bne.w	8006a62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d005      	beq.n	80067b2 <HAL_GPIO_Init+0x56>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d130      	bne.n	8006814 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	2203      	movs	r2, #3
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	43db      	mvns	r3, r3
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4013      	ands	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	4313      	orrs	r3, r2
 80067da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067e8:	2201      	movs	r2, #1
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	fa02 f303 	lsl.w	r3, r2, r3
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	091b      	lsrs	r3, r3, #4
 80067fe:	f003 0201 	and.w	r2, r3, #1
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	fa02 f303 	lsl.w	r3, r2, r3
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	4313      	orrs	r3, r2
 800680c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	69ba      	ldr	r2, [r7, #24]
 8006812:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 0303 	and.w	r3, r3, #3
 800681c:	2b03      	cmp	r3, #3
 800681e:	d017      	beq.n	8006850 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	2203      	movs	r2, #3
 800682c:	fa02 f303 	lsl.w	r3, r2, r3
 8006830:	43db      	mvns	r3, r3
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	4013      	ands	r3, r2
 8006836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	fa02 f303 	lsl.w	r3, r2, r3
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	4313      	orrs	r3, r2
 8006848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f003 0303 	and.w	r3, r3, #3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d123      	bne.n	80068a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	08da      	lsrs	r2, r3, #3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3208      	adds	r2, #8
 8006864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006868:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	f003 0307 	and.w	r3, r3, #7
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	220f      	movs	r2, #15
 8006874:	fa02 f303 	lsl.w	r3, r2, r3
 8006878:	43db      	mvns	r3, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4013      	ands	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	691a      	ldr	r2, [r3, #16]
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	fa02 f303 	lsl.w	r3, r2, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4313      	orrs	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	08da      	lsrs	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3208      	adds	r2, #8
 800689e:	69b9      	ldr	r1, [r7, #24]
 80068a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	005b      	lsls	r3, r3, #1
 80068ae:	2203      	movs	r2, #3
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	43db      	mvns	r3, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4013      	ands	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f003 0203 	and.w	r2, r3, #3
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	fa02 f303 	lsl.w	r3, r2, r3
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80be 	beq.w	8006a62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068e6:	4b66      	ldr	r3, [pc, #408]	@ (8006a80 <HAL_GPIO_Init+0x324>)
 80068e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ea:	4a65      	ldr	r2, [pc, #404]	@ (8006a80 <HAL_GPIO_Init+0x324>)
 80068ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80068f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80068f2:	4b63      	ldr	r3, [pc, #396]	@ (8006a80 <HAL_GPIO_Init+0x324>)
 80068f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80068fe:	4a61      	ldr	r2, [pc, #388]	@ (8006a84 <HAL_GPIO_Init+0x328>)
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	089b      	lsrs	r3, r3, #2
 8006904:	3302      	adds	r3, #2
 8006906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	220f      	movs	r2, #15
 8006916:	fa02 f303 	lsl.w	r3, r2, r3
 800691a:	43db      	mvns	r3, r3
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	4013      	ands	r3, r2
 8006920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a58      	ldr	r2, [pc, #352]	@ (8006a88 <HAL_GPIO_Init+0x32c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d037      	beq.n	800699a <HAL_GPIO_Init+0x23e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a57      	ldr	r2, [pc, #348]	@ (8006a8c <HAL_GPIO_Init+0x330>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d031      	beq.n	8006996 <HAL_GPIO_Init+0x23a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a56      	ldr	r2, [pc, #344]	@ (8006a90 <HAL_GPIO_Init+0x334>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d02b      	beq.n	8006992 <HAL_GPIO_Init+0x236>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a55      	ldr	r2, [pc, #340]	@ (8006a94 <HAL_GPIO_Init+0x338>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d025      	beq.n	800698e <HAL_GPIO_Init+0x232>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a54      	ldr	r2, [pc, #336]	@ (8006a98 <HAL_GPIO_Init+0x33c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d01f      	beq.n	800698a <HAL_GPIO_Init+0x22e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a53      	ldr	r2, [pc, #332]	@ (8006a9c <HAL_GPIO_Init+0x340>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d019      	beq.n	8006986 <HAL_GPIO_Init+0x22a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a52      	ldr	r2, [pc, #328]	@ (8006aa0 <HAL_GPIO_Init+0x344>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d013      	beq.n	8006982 <HAL_GPIO_Init+0x226>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a51      	ldr	r2, [pc, #324]	@ (8006aa4 <HAL_GPIO_Init+0x348>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00d      	beq.n	800697e <HAL_GPIO_Init+0x222>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a50      	ldr	r2, [pc, #320]	@ (8006aa8 <HAL_GPIO_Init+0x34c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <HAL_GPIO_Init+0x21e>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a4f      	ldr	r2, [pc, #316]	@ (8006aac <HAL_GPIO_Init+0x350>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d101      	bne.n	8006976 <HAL_GPIO_Init+0x21a>
 8006972:	2309      	movs	r3, #9
 8006974:	e012      	b.n	800699c <HAL_GPIO_Init+0x240>
 8006976:	230a      	movs	r3, #10
 8006978:	e010      	b.n	800699c <HAL_GPIO_Init+0x240>
 800697a:	2308      	movs	r3, #8
 800697c:	e00e      	b.n	800699c <HAL_GPIO_Init+0x240>
 800697e:	2307      	movs	r3, #7
 8006980:	e00c      	b.n	800699c <HAL_GPIO_Init+0x240>
 8006982:	2306      	movs	r3, #6
 8006984:	e00a      	b.n	800699c <HAL_GPIO_Init+0x240>
 8006986:	2305      	movs	r3, #5
 8006988:	e008      	b.n	800699c <HAL_GPIO_Init+0x240>
 800698a:	2304      	movs	r3, #4
 800698c:	e006      	b.n	800699c <HAL_GPIO_Init+0x240>
 800698e:	2303      	movs	r3, #3
 8006990:	e004      	b.n	800699c <HAL_GPIO_Init+0x240>
 8006992:	2302      	movs	r3, #2
 8006994:	e002      	b.n	800699c <HAL_GPIO_Init+0x240>
 8006996:	2301      	movs	r3, #1
 8006998:	e000      	b.n	800699c <HAL_GPIO_Init+0x240>
 800699a:	2300      	movs	r3, #0
 800699c:	69fa      	ldr	r2, [r7, #28]
 800699e:	f002 0203 	and.w	r2, r2, #3
 80069a2:	0092      	lsls	r2, r2, #2
 80069a4:	4093      	lsls	r3, r2
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80069ac:	4935      	ldr	r1, [pc, #212]	@ (8006a84 <HAL_GPIO_Init+0x328>)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	089b      	lsrs	r3, r3, #2
 80069b2:	3302      	adds	r3, #2
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80069ba:	4b3d      	ldr	r3, [pc, #244]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	43db      	mvns	r3, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4013      	ands	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80069d6:	69ba      	ldr	r2, [r7, #24]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	4313      	orrs	r3, r2
 80069dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80069de:	4a34      	ldr	r2, [pc, #208]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80069e4:	4b32      	ldr	r3, [pc, #200]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d003      	beq.n	8006a08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	4313      	orrs	r3, r2
 8006a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006a08:	4a29      	ldr	r2, [pc, #164]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006a0e:	4b28      	ldr	r3, [pc, #160]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	43db      	mvns	r3, r3
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006a32:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006a38:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	69ba      	ldr	r2, [r7, #24]
 8006a44:	4013      	ands	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006a5c:	4a14      	ldr	r2, [pc, #80]	@ (8006ab0 <HAL_GPIO_Init+0x354>)
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	f67f ae86 	bls.w	800677c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006a70:	bf00      	nop
 8006a72:	bf00      	nop
 8006a74:	3724      	adds	r7, #36	@ 0x24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40023800 	.word	0x40023800
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40020000 	.word	0x40020000
 8006a8c:	40020400 	.word	0x40020400
 8006a90:	40020800 	.word	0x40020800
 8006a94:	40020c00 	.word	0x40020c00
 8006a98:	40021000 	.word	0x40021000
 8006a9c:	40021400 	.word	0x40021400
 8006aa0:	40021800 	.word	0x40021800
 8006aa4:	40021c00 	.word	0x40021c00
 8006aa8:	40022000 	.word	0x40022000
 8006aac:	40022400 	.word	0x40022400
 8006ab0:	40013c00 	.word	0x40013c00

08006ab4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	887b      	ldrh	r3, [r7, #2]
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006acc:	2301      	movs	r3, #1
 8006ace:	73fb      	strb	r3, [r7, #15]
 8006ad0:	e001      	b.n	8006ad6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3714      	adds	r7, #20
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	807b      	strh	r3, [r7, #2]
 8006af0:	4613      	mov	r3, r2
 8006af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006af4:	787b      	ldrb	r3, [r7, #1]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006afa:	887a      	ldrh	r2, [r7, #2]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006b00:	e003      	b.n	8006b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006b02:	887b      	ldrh	r3, [r7, #2]
 8006b04:	041a      	lsls	r2, r3, #16
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	619a      	str	r2, [r3, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	370c      	adds	r7, #12
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
	...

08006b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006b22:	4b08      	ldr	r3, [pc, #32]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b24:	695a      	ldr	r2, [r3, #20]
 8006b26:	88fb      	ldrh	r3, [r7, #6]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006b2e:	4a05      	ldr	r2, [pc, #20]	@ (8006b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006b30:	88fb      	ldrh	r3, [r7, #6]
 8006b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006b34:	88fb      	ldrh	r3, [r7, #6]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fd f976 	bl	8003e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40013c00 	.word	0x40013c00

08006b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e08b      	b.n	8006c72 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d106      	bne.n	8006b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f7fe f95e 	bl	8004e30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2224      	movs	r2, #36	@ 0x24
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f022 0201 	bic.w	r2, r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	689a      	ldr	r2, [r3, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d107      	bne.n	8006bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bbe:	609a      	str	r2, [r3, #8]
 8006bc0:	e006      	b.n	8006bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d108      	bne.n	8006bea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006be6:	605a      	str	r2, [r3, #4]
 8006be8:	e007      	b.n	8006bfa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6859      	ldr	r1, [r3, #4]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <HAL_I2C_Init+0x134>)
 8006c06:	430b      	orrs	r3, r1
 8006c08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691a      	ldr	r2, [r3, #16]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	69d9      	ldr	r1, [r3, #28]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a1a      	ldr	r2, [r3, #32]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f042 0201 	orr.w	r2, r2, #1
 8006c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	02008000 	.word	0x02008000

08006c80 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b088      	sub	sp, #32
 8006c84:	af02      	add	r7, sp, #8
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	817b      	strh	r3, [r7, #10]
 8006c90:	4613      	mov	r3, r2
 8006c92:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b20      	cmp	r3, #32
 8006c9e:	f040 80fd 	bne.w	8006e9c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2C_Master_Transmit+0x30>
 8006cac:	2302      	movs	r3, #2
 8006cae:	e0f6      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cb8:	f7ff f834 	bl	8005d24 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	2319      	movs	r3, #25
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f914 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e0e1      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2221      	movs	r2, #33	@ 0x21
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2210      	movs	r2, #16
 8006ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	893a      	ldrh	r2, [r7, #8]
 8006cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	2bff      	cmp	r3, #255	@ 0xff
 8006d0a:	d906      	bls.n	8006d1a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	22ff      	movs	r2, #255	@ 0xff
 8006d10:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006d12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e007      	b.n	8006d2a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d28:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d024      	beq.n	8006d7c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	781a      	ldrb	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	3301      	adds	r3, #1
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	8979      	ldrh	r1, [r7, #10]
 8006d6e:	4b4e      	ldr	r3, [pc, #312]	@ (8006ea8 <HAL_I2C_Master_Transmit+0x228>)
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fa83 	bl	8007280 <I2C_TransferConfig>
 8006d7a:	e066      	b.n	8006e4a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	8979      	ldrh	r1, [r7, #10]
 8006d84:	4b48      	ldr	r3, [pc, #288]	@ (8006ea8 <HAL_I2C_Master_Transmit+0x228>)
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fa78 	bl	8007280 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006d90:	e05b      	b.n	8006e4a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	6a39      	ldr	r1, [r7, #32]
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 f907 	bl	8006faa <I2C_WaitOnTXISFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e07b      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006daa:	781a      	ldrb	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db6:	1c5a      	adds	r2, r3, #1
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d034      	beq.n	8006e4a <HAL_I2C_Master_Transmit+0x1ca>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d130      	bne.n	8006e4a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	2200      	movs	r2, #0
 8006df0:	2180      	movs	r1, #128	@ 0x80
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f000 f880 	bl	8006ef8 <I2C_WaitOnFlagUntilTimeout>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e04d      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	2bff      	cmp	r3, #255	@ 0xff
 8006e0a:	d90e      	bls.n	8006e2a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	22ff      	movs	r2, #255	@ 0xff
 8006e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	8979      	ldrh	r1, [r7, #10]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fa2c 	bl	8007280 <I2C_TransferConfig>
 8006e28:	e00f      	b.n	8006e4a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	8979      	ldrh	r1, [r7, #10]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 fa1b 	bl	8007280 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d19e      	bne.n	8006d92 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	6a39      	ldr	r1, [r7, #32]
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f8ed 	bl	8007038 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d001      	beq.n	8006e68 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e01a      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2220      	movs	r2, #32
 8006e6e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6859      	ldr	r1, [r3, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006eac <HAL_I2C_Master_Transmit+0x22c>)
 8006e7c:	400b      	ands	r3, r1
 8006e7e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	e000      	b.n	8006e9e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006e9c:	2302      	movs	r3, #2
  }
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	80002000 	.word	0x80002000
 8006eac:	fe00e800 	.word	0xfe00e800

08006eb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d103      	bne.n	8006ece <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d007      	beq.n	8006eec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	619a      	str	r2, [r3, #24]
  }
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	4613      	mov	r3, r2
 8006f06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f08:	e03b      	b.n	8006f82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f8d6 	bl	80070c0 <I2C_IsErrorOccurred>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e041      	b.n	8006fa2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f24:	d02d      	beq.n	8006f82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f26:	f7fe fefd 	bl	8005d24 <HAL_GetTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	683a      	ldr	r2, [r7, #0]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d302      	bcc.n	8006f3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d122      	bne.n	8006f82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	699a      	ldr	r2, [r3, #24]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d113      	bne.n	8006f82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5e:	f043 0220 	orr.w	r2, r3, #32
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e00f      	b.n	8006fa2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	bf0c      	ite	eq
 8006f92:	2301      	moveq	r3, #1
 8006f94:	2300      	movne	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d0b4      	beq.n	8006f0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	60f8      	str	r0, [r7, #12]
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fb6:	e033      	b.n	8007020 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	68b9      	ldr	r1, [r7, #8]
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 f87f 	bl	80070c0 <I2C_IsErrorOccurred>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d001      	beq.n	8006fcc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e031      	b.n	8007030 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd2:	d025      	beq.n	8007020 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd4:	f7fe fea6 	bl	8005d24 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d302      	bcc.n	8006fea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d11a      	bne.n	8007020 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d013      	beq.n	8007020 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ffc:	f043 0220 	orr.w	r2, r3, #32
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2220      	movs	r2, #32
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e007      	b.n	8007030 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d1c4      	bne.n	8006fb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007044:	e02f      	b.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	68b9      	ldr	r1, [r7, #8]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 f838 	bl	80070c0 <I2C_IsErrorOccurred>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e02d      	b.n	80070b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800705a:	f7fe fe63 	bl	8005d24 <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	429a      	cmp	r2, r3
 8007068:	d302      	bcc.n	8007070 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11a      	bne.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b20      	cmp	r3, #32
 800707c:	d013      	beq.n	80070a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007082:	f043 0220 	orr.w	r2, r3, #32
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e007      	b.n	80070b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	d1c8      	bne.n	8007046 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	@ 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	f003 0310 	and.w	r3, r3, #16
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d068      	beq.n	80071be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2210      	movs	r2, #16
 80070f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070f4:	e049      	b.n	800718a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d045      	beq.n	800718a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070fe:	f7fe fe11 	bl	8005d24 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	d302      	bcc.n	8007114 <I2C_IsErrorOccurred+0x54>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d13a      	bne.n	800718a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800711e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007126:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007136:	d121      	bne.n	800717c <I2C_IsErrorOccurred+0xbc>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800713e:	d01d      	beq.n	800717c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b20      	cmp	r3, #32
 8007144:	d01a      	beq.n	800717c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007154:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007156:	f7fe fde5 	bl	8005d24 <HAL_GetTick>
 800715a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800715c:	e00e      	b.n	800717c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800715e:	f7fe fde1 	bl	8005d24 <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b19      	cmp	r3, #25
 800716a:	d907      	bls.n	800717c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	f043 0320 	orr.w	r3, r3, #32
 8007172:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800717a:	e006      	b.n	800718a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f003 0320 	and.w	r3, r3, #32
 8007186:	2b20      	cmp	r3, #32
 8007188:	d1e9      	bne.n	800715e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	f003 0320 	and.w	r3, r3, #32
 8007194:	2b20      	cmp	r3, #32
 8007196:	d003      	beq.n	80071a0 <I2C_IsErrorOccurred+0xe0>
 8007198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0aa      	beq.n	80070f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80071a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2220      	movs	r2, #32
 80071ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80071b0:	6a3b      	ldr	r3, [r7, #32]
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	f043 0301 	orr.w	r3, r3, #1
 80071d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80071e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f043 0308 	orr.w	r3, r3, #8
 80071f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007202:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	f043 0302 	orr.w	r3, r3, #2
 800721a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007224:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800722c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007230:	2b00      	cmp	r3, #0
 8007232:	d01c      	beq.n	800726e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff fe3b 	bl	8006eb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6859      	ldr	r1, [r3, #4]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <I2C_IsErrorOccurred+0x1bc>)
 8007246:	400b      	ands	r3, r1
 8007248:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800724e:	6a3b      	ldr	r3, [r7, #32]
 8007250:	431a      	orrs	r2, r3
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2220      	movs	r2, #32
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800726e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007272:	4618      	mov	r0, r3
 8007274:	3728      	adds	r7, #40	@ 0x28
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	fe00e800 	.word	0xfe00e800

08007280 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	607b      	str	r3, [r7, #4]
 800728a:	460b      	mov	r3, r1
 800728c:	817b      	strh	r3, [r7, #10]
 800728e:	4613      	mov	r3, r2
 8007290:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007292:	897b      	ldrh	r3, [r7, #10]
 8007294:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007298:	7a7b      	ldrb	r3, [r7, #9]
 800729a:	041b      	lsls	r3, r3, #16
 800729c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80072a6:	6a3b      	ldr	r3, [r7, #32]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	0d5b      	lsrs	r3, r3, #21
 80072ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80072be:	4b08      	ldr	r3, [pc, #32]	@ (80072e0 <I2C_TransferConfig+0x60>)
 80072c0:	430b      	orrs	r3, r1
 80072c2:	43db      	mvns	r3, r3
 80072c4:	ea02 0103 	and.w	r1, r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072d2:	bf00      	nop
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	03ff63ff 	.word	0x03ff63ff

080072e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b20      	cmp	r3, #32
 80072f8:	d138      	bne.n	800736c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007304:	2302      	movs	r3, #2
 8007306:	e032      	b.n	800736e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2224      	movs	r2, #36	@ 0x24
 8007314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0201 	bic.w	r2, r2, #1
 8007326:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007336:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6819      	ldr	r1, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	430a      	orrs	r2, r1
 8007346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f042 0201 	orr.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2220      	movs	r2, #32
 800735c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	e000      	b.n	800736e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800736c:	2302      	movs	r3, #2
  }
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b20      	cmp	r3, #32
 800738e:	d139      	bne.n	8007404 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800739a:	2302      	movs	r3, #2
 800739c:	e033      	b.n	8007406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2224      	movs	r2, #36	@ 0x24
 80073aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 0201 	bic.w	r2, r2, #1
 80073bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80073cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	021b      	lsls	r3, r3, #8
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0201 	orr.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e000      	b.n	8007406 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007404:	2302      	movs	r3, #2
  }
}
 8007406:	4618      	mov	r0, r3
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af02      	add	r7, sp, #8
 8007418:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e108      	b.n	8007636 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f7fe fa3a 	bl	80058b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2203      	movs	r2, #3
 8007448:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007452:	d102      	bne.n	800745a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f005 f8bc 	bl	800c5dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7c1a      	ldrb	r2, [r3, #16]
 800746c:	f88d 2000 	strb.w	r2, [sp]
 8007470:	3304      	adds	r3, #4
 8007472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007474:	f005 f858 	bl	800c528 <USB_CoreInit>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d005      	beq.n	800748a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2202      	movs	r2, #2
 8007482:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e0d5      	b.n	8007636 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2100      	movs	r1, #0
 8007490:	4618      	mov	r0, r3
 8007492:	f005 f8b4 	bl	800c5fe <USB_SetCurrentMode>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2202      	movs	r2, #2
 80074a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e0c6      	b.n	8007636 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074a8:	2300      	movs	r3, #0
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	e04a      	b.n	8007544 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074ae:	7bfa      	ldrb	r2, [r7, #15]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	00db      	lsls	r3, r3, #3
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	3315      	adds	r3, #21
 80074be:	2201      	movs	r2, #1
 80074c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80074c2:	7bfa      	ldrb	r2, [r7, #15]
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	00db      	lsls	r3, r3, #3
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	3314      	adds	r3, #20
 80074d2:	7bfa      	ldrb	r2, [r7, #15]
 80074d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80074d6:	7bfa      	ldrb	r2, [r7, #15]
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	b298      	uxth	r0, r3
 80074dc:	6879      	ldr	r1, [r7, #4]
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	440b      	add	r3, r1
 80074e8:	332e      	adds	r3, #46	@ 0x2e
 80074ea:	4602      	mov	r2, r0
 80074ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80074ee:	7bfa      	ldrb	r2, [r7, #15]
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	00db      	lsls	r3, r3, #3
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	3318      	adds	r3, #24
 80074fe:	2200      	movs	r2, #0
 8007500:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007502:	7bfa      	ldrb	r2, [r7, #15]
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	331c      	adds	r3, #28
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	6879      	ldr	r1, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	440b      	add	r3, r1
 8007524:	3320      	adds	r3, #32
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800752a:	7bfa      	ldrb	r2, [r7, #15]
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3324      	adds	r3, #36	@ 0x24
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	3301      	adds	r3, #1
 8007542:	73fb      	strb	r3, [r7, #15]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	791b      	ldrb	r3, [r3, #4]
 8007548:	7bfa      	ldrb	r2, [r7, #15]
 800754a:	429a      	cmp	r2, r3
 800754c:	d3af      	bcc.n	80074ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
 8007552:	e044      	b.n	80075de <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007554:	7bfa      	ldrb	r2, [r7, #15]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	00db      	lsls	r3, r3, #3
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800756a:	7bfa      	ldrb	r2, [r7, #15]
 800756c:	6879      	ldr	r1, [r7, #4]
 800756e:	4613      	mov	r3, r2
 8007570:	00db      	lsls	r3, r3, #3
 8007572:	4413      	add	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	440b      	add	r3, r1
 8007578:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007580:	7bfa      	ldrb	r2, [r7, #15]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4613      	mov	r3, r2
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4413      	add	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	440b      	add	r3, r1
 800758e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007596:	7bfa      	ldrb	r2, [r7, #15]
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	00db      	lsls	r3, r3, #3
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80075a8:	2200      	movs	r2, #0
 80075aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075ac:	7bfa      	ldrb	r2, [r7, #15]
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	4613      	mov	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	4413      	add	r3, r2
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	440b      	add	r3, r1
 80075ba:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80075be:	2200      	movs	r2, #0
 80075c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075c2:	7bfa      	ldrb	r2, [r7, #15]
 80075c4:	6879      	ldr	r1, [r7, #4]
 80075c6:	4613      	mov	r3, r2
 80075c8:	00db      	lsls	r3, r3, #3
 80075ca:	4413      	add	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	440b      	add	r3, r1
 80075d0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	3301      	adds	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	791b      	ldrb	r3, [r3, #4]
 80075e2:	7bfa      	ldrb	r2, [r7, #15]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3b5      	bcc.n	8007554 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6818      	ldr	r0, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	7c1a      	ldrb	r2, [r3, #16]
 80075f0:	f88d 2000 	strb.w	r2, [sp]
 80075f4:	3304      	adds	r3, #4
 80075f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075f8:	f005 f84e 	bl	800c698 <USB_DevInit>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	e013      	b.n	8007636 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	7b1b      	ldrb	r3, [r3, #12]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d102      	bne.n	800762a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 f80b 	bl	8007640 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4618      	mov	r0, r3
 8007630:	f005 fa09 	bl	800ca46 <USB_DevDisconnect>

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800766e:	4b05      	ldr	r3, [pc, #20]	@ (8007684 <HAL_PCDEx_ActivateLPM+0x44>)
 8007670:	4313      	orrs	r3, r2
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3714      	adds	r7, #20
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	10000003 	.word	0x10000003

08007688 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800768c:	4b05      	ldr	r3, [pc, #20]	@ (80076a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a04      	ldr	r2, [pc, #16]	@ (80076a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007696:	6013      	str	r3, [r2, #0]
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40007000 	.word	0x40007000

080076a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80076b2:	4b23      	ldr	r3, [pc, #140]	@ (8007740 <HAL_PWREx_EnableOverDrive+0x98>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	4a22      	ldr	r2, [pc, #136]	@ (8007740 <HAL_PWREx_EnableOverDrive+0x98>)
 80076b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80076be:	4b20      	ldr	r3, [pc, #128]	@ (8007740 <HAL_PWREx_EnableOverDrive+0x98>)
 80076c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80076ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076d6:	f7fe fb25 	bl	8005d24 <HAL_GetTick>
 80076da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076dc:	e009      	b.n	80076f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076de:	f7fe fb21 	bl	8005d24 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076ec:	d901      	bls.n	80076f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e022      	b.n	8007738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076f2:	4b14      	ldr	r3, [pc, #80]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fe:	d1ee      	bne.n	80076de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007700:	4b10      	ldr	r3, [pc, #64]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a0f      	ldr	r2, [pc, #60]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800770a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800770c:	f7fe fb0a 	bl	8005d24 <HAL_GetTick>
 8007710:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007712:	e009      	b.n	8007728 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007714:	f7fe fb06 	bl	8005d24 <HAL_GetTick>
 8007718:	4602      	mov	r2, r0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	1ad3      	subs	r3, r2, r3
 800771e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007722:	d901      	bls.n	8007728 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e007      	b.n	8007738 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007728:	4b06      	ldr	r3, [pc, #24]	@ (8007744 <HAL_PWREx_EnableOverDrive+0x9c>)
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007734:	d1ee      	bne.n	8007714 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	40023800 	.word	0x40023800
 8007744:	40007000 	.word	0x40007000

08007748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007750:	2300      	movs	r3, #0
 8007752:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e291      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0301 	and.w	r3, r3, #1
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 8087 	beq.w	800787a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800776c:	4b96      	ldr	r3, [pc, #600]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 030c 	and.w	r3, r3, #12
 8007774:	2b04      	cmp	r3, #4
 8007776:	d00c      	beq.n	8007792 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007778:	4b93      	ldr	r3, [pc, #588]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f003 030c 	and.w	r3, r3, #12
 8007780:	2b08      	cmp	r3, #8
 8007782:	d112      	bne.n	80077aa <HAL_RCC_OscConfig+0x62>
 8007784:	4b90      	ldr	r3, [pc, #576]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800778c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007790:	d10b      	bne.n	80077aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007792:	4b8d      	ldr	r3, [pc, #564]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d06c      	beq.n	8007878 <HAL_RCC_OscConfig+0x130>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d168      	bne.n	8007878 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e26b      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077b2:	d106      	bne.n	80077c2 <HAL_RCC_OscConfig+0x7a>
 80077b4:	4b84      	ldr	r3, [pc, #528]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a83      	ldr	r2, [pc, #524]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	e02e      	b.n	8007820 <HAL_RCC_OscConfig+0xd8>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10c      	bne.n	80077e4 <HAL_RCC_OscConfig+0x9c>
 80077ca:	4b7f      	ldr	r3, [pc, #508]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a7e      	ldr	r2, [pc, #504]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	4b7c      	ldr	r3, [pc, #496]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a7b      	ldr	r2, [pc, #492]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	e01d      	b.n	8007820 <HAL_RCC_OscConfig+0xd8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80077ec:	d10c      	bne.n	8007808 <HAL_RCC_OscConfig+0xc0>
 80077ee:	4b76      	ldr	r3, [pc, #472]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a75      	ldr	r2, [pc, #468]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	4b73      	ldr	r3, [pc, #460]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a72      	ldr	r2, [pc, #456]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	e00b      	b.n	8007820 <HAL_RCC_OscConfig+0xd8>
 8007808:	4b6f      	ldr	r3, [pc, #444]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a6e      	ldr	r2, [pc, #440]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800780e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	4b6c      	ldr	r3, [pc, #432]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a6b      	ldr	r2, [pc, #428]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800781a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800781e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d013      	beq.n	8007850 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fe fa7c 	bl	8005d24 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007830:	f7fe fa78 	bl	8005d24 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b64      	cmp	r3, #100	@ 0x64
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e21f      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007842:	4b61      	ldr	r3, [pc, #388]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0xe8>
 800784e:	e014      	b.n	800787a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fe fa68 	bl	8005d24 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007858:	f7fe fa64 	bl	8005d24 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b64      	cmp	r3, #100	@ 0x64
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e20b      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800786a:	4b57      	ldr	r3, [pc, #348]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f0      	bne.n	8007858 <HAL_RCC_OscConfig+0x110>
 8007876:	e000      	b.n	800787a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d069      	beq.n	800795a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007886:	4b50      	ldr	r3, [pc, #320]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f003 030c 	and.w	r3, r3, #12
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00b      	beq.n	80078aa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007892:	4b4d      	ldr	r3, [pc, #308]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f003 030c 	and.w	r3, r3, #12
 800789a:	2b08      	cmp	r3, #8
 800789c:	d11c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x190>
 800789e:	4b4a      	ldr	r3, [pc, #296]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d116      	bne.n	80078d8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078aa:	4b47      	ldr	r3, [pc, #284]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d005      	beq.n	80078c2 <HAL_RCC_OscConfig+0x17a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d001      	beq.n	80078c2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e1df      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078c2:	4b41      	ldr	r3, [pc, #260]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	00db      	lsls	r3, r3, #3
 80078d0:	493d      	ldr	r1, [pc, #244]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078d6:	e040      	b.n	800795a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d023      	beq.n	8007928 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078e0:	4b39      	ldr	r3, [pc, #228]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a38      	ldr	r2, [pc, #224]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80078e6:	f043 0301 	orr.w	r3, r3, #1
 80078ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fe fa1a 	bl	8005d24 <HAL_GetTick>
 80078f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078f4:	f7fe fa16 	bl	8005d24 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e1bd      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007906:	4b30      	ldr	r3, [pc, #192]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0302 	and.w	r3, r3, #2
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f0      	beq.n	80078f4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007912:	4b2d      	ldr	r3, [pc, #180]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	4929      	ldr	r1, [pc, #164]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007922:	4313      	orrs	r3, r2
 8007924:	600b      	str	r3, [r1, #0]
 8007926:	e018      	b.n	800795a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007928:	4b27      	ldr	r3, [pc, #156]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a26      	ldr	r2, [pc, #152]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 800792e:	f023 0301 	bic.w	r3, r3, #1
 8007932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007934:	f7fe f9f6 	bl	8005d24 <HAL_GetTick>
 8007938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800793a:	e008      	b.n	800794e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800793c:	f7fe f9f2 	bl	8005d24 <HAL_GetTick>
 8007940:	4602      	mov	r2, r0
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	1ad3      	subs	r3, r2, r3
 8007946:	2b02      	cmp	r3, #2
 8007948:	d901      	bls.n	800794e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800794a:	2303      	movs	r3, #3
 800794c:	e199      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800794e:	4b1e      	ldr	r3, [pc, #120]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0302 	and.w	r3, r3, #2
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f0      	bne.n	800793c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0308 	and.w	r3, r3, #8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d038      	beq.n	80079d8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	695b      	ldr	r3, [r3, #20]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d019      	beq.n	80079a2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800796e:	4b16      	ldr	r3, [pc, #88]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007970:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007972:	4a15      	ldr	r2, [pc, #84]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007974:	f043 0301 	orr.w	r3, r3, #1
 8007978:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797a:	f7fe f9d3 	bl	8005d24 <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007982:	f7fe f9cf 	bl	8005d24 <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e176      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007994:	4b0c      	ldr	r3, [pc, #48]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 8007996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0f0      	beq.n	8007982 <HAL_RCC_OscConfig+0x23a>
 80079a0:	e01a      	b.n	80079d8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079a2:	4b09      	ldr	r3, [pc, #36]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80079a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079a6:	4a08      	ldr	r2, [pc, #32]	@ (80079c8 <HAL_RCC_OscConfig+0x280>)
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ae:	f7fe f9b9 	bl	8005d24 <HAL_GetTick>
 80079b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079b4:	e00a      	b.n	80079cc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079b6:	f7fe f9b5 	bl	8005d24 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d903      	bls.n	80079cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e15c      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
 80079c8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079cc:	4b91      	ldr	r3, [pc, #580]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 80079ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079d0:	f003 0302 	and.w	r3, r3, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1ee      	bne.n	80079b6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0304 	and.w	r3, r3, #4
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a4 	beq.w	8007b2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 80079e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10d      	bne.n	8007a0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079f2:	4b88      	ldr	r3, [pc, #544]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 80079f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f6:	4a87      	ldr	r2, [pc, #540]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 80079f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80079fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80079fe:	4b85      	ldr	r3, [pc, #532]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a06:	60bb      	str	r3, [r7, #8]
 8007a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a0e:	4b82      	ldr	r3, [pc, #520]	@ (8007c18 <HAL_RCC_OscConfig+0x4d0>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d118      	bne.n	8007a4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007a1a:	4b7f      	ldr	r3, [pc, #508]	@ (8007c18 <HAL_RCC_OscConfig+0x4d0>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c18 <HAL_RCC_OscConfig+0x4d0>)
 8007a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a26:	f7fe f97d 	bl	8005d24 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a2c:	e008      	b.n	8007a40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a2e:	f7fe f979 	bl	8005d24 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b64      	cmp	r3, #100	@ 0x64
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e120      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a40:	4b75      	ldr	r3, [pc, #468]	@ (8007c18 <HAL_RCC_OscConfig+0x4d0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d106      	bne.n	8007a62 <HAL_RCC_OscConfig+0x31a>
 8007a54:	4b6f      	ldr	r3, [pc, #444]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a58:	4a6e      	ldr	r2, [pc, #440]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a60:	e02d      	b.n	8007abe <HAL_RCC_OscConfig+0x376>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10c      	bne.n	8007a84 <HAL_RCC_OscConfig+0x33c>
 8007a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a6e:	4a69      	ldr	r2, [pc, #420]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a70:	f023 0301 	bic.w	r3, r3, #1
 8007a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a76:	4b67      	ldr	r3, [pc, #412]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a7a:	4a66      	ldr	r2, [pc, #408]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a7c:	f023 0304 	bic.w	r3, r3, #4
 8007a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a82:	e01c      	b.n	8007abe <HAL_RCC_OscConfig+0x376>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	2b05      	cmp	r3, #5
 8007a8a:	d10c      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x35e>
 8007a8c:	4b61      	ldr	r3, [pc, #388]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a90:	4a60      	ldr	r2, [pc, #384]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a92:	f043 0304 	orr.w	r3, r3, #4
 8007a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a98:	4b5e      	ldr	r3, [pc, #376]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007a9e:	f043 0301 	orr.w	r3, r3, #1
 8007aa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aa4:	e00b      	b.n	8007abe <HAL_RCC_OscConfig+0x376>
 8007aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aaa:	4a5a      	ldr	r2, [pc, #360]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007aac:	f023 0301 	bic.w	r3, r3, #1
 8007ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ab2:	4b58      	ldr	r3, [pc, #352]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab6:	4a57      	ldr	r2, [pc, #348]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007ab8:	f023 0304 	bic.w	r3, r3, #4
 8007abc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d015      	beq.n	8007af2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac6:	f7fe f92d 	bl	8005d24 <HAL_GetTick>
 8007aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007acc:	e00a      	b.n	8007ae4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ace:	f7fe f929 	bl	8005d24 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d901      	bls.n	8007ae4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	e0ce      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae4:	4b4b      	ldr	r3, [pc, #300]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae8:	f003 0302 	and.w	r3, r3, #2
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d0ee      	beq.n	8007ace <HAL_RCC_OscConfig+0x386>
 8007af0:	e014      	b.n	8007b1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007af2:	f7fe f917 	bl	8005d24 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007af8:	e00a      	b.n	8007b10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afa:	f7fe f913 	bl	8005d24 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d901      	bls.n	8007b10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e0b8      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b10:	4b40      	ldr	r3, [pc, #256]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1ee      	bne.n	8007afa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b1c:	7dfb      	ldrb	r3, [r7, #23]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d105      	bne.n	8007b2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b22:	4b3c      	ldr	r3, [pc, #240]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b26:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	f000 80a4 	beq.w	8007c80 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b38:	4b36      	ldr	r3, [pc, #216]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f003 030c 	and.w	r3, r3, #12
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	d06b      	beq.n	8007c1c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d149      	bne.n	8007be0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b4c:	4b31      	ldr	r3, [pc, #196]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a30      	ldr	r2, [pc, #192]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b58:	f7fe f8e4 	bl	8005d24 <HAL_GetTick>
 8007b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b60:	f7fe f8e0 	bl	8005d24 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e087      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b72:	4b28      	ldr	r3, [pc, #160]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f0      	bne.n	8007b60 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69da      	ldr	r2, [r3, #28]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	019b      	lsls	r3, r3, #6
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b94:	085b      	lsrs	r3, r3, #1
 8007b96:	3b01      	subs	r3, #1
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	4a1b      	ldr	r2, [pc, #108]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007ba6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007baa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bac:	4b19      	ldr	r3, [pc, #100]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a18      	ldr	r2, [pc, #96]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb8:	f7fe f8b4 	bl	8005d24 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc0:	f7fe f8b0 	bl	8005d24 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e057      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bd2:	4b10      	ldr	r3, [pc, #64]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0f0      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x478>
 8007bde:	e04f      	b.n	8007c80 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be0:	4b0c      	ldr	r3, [pc, #48]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a0b      	ldr	r2, [pc, #44]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bec:	f7fe f89a 	bl	8005d24 <HAL_GetTick>
 8007bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf2:	e008      	b.n	8007c06 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bf4:	f7fe f896 	bl	8005d24 <HAL_GetTick>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	1ad3      	subs	r3, r2, r3
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d901      	bls.n	8007c06 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e03d      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c06:	4b03      	ldr	r3, [pc, #12]	@ (8007c14 <HAL_RCC_OscConfig+0x4cc>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f0      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x4ac>
 8007c12:	e035      	b.n	8007c80 <HAL_RCC_OscConfig+0x538>
 8007c14:	40023800 	.word	0x40023800
 8007c18:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007c8c <HAL_RCC_OscConfig+0x544>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d028      	beq.n	8007c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d121      	bne.n	8007c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c42:	429a      	cmp	r2, r3
 8007c44:	d11a      	bne.n	8007c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c52:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d111      	bne.n	8007c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c62:	085b      	lsrs	r3, r3, #1
 8007c64:	3b01      	subs	r3, #1
 8007c66:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d107      	bne.n	8007c7c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c76:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d001      	beq.n	8007c80 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800

08007c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e0d0      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ca8:	4b6a      	ldr	r3, [pc, #424]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d910      	bls.n	8007cd8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb6:	4b67      	ldr	r3, [pc, #412]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f023 020f 	bic.w	r2, r3, #15
 8007cbe:	4965      	ldr	r1, [pc, #404]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cc6:	4b63      	ldr	r3, [pc, #396]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d001      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0b8      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d020      	beq.n	8007d26 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d005      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cf0:	4b59      	ldr	r3, [pc, #356]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	4a58      	ldr	r2, [pc, #352]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007cfa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d005      	beq.n	8007d14 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d08:	4b53      	ldr	r3, [pc, #332]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	4a52      	ldr	r2, [pc, #328]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d14:	4b50      	ldr	r3, [pc, #320]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	494d      	ldr	r1, [pc, #308]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d040      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d107      	bne.n	8007d4a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d3a:	4b47      	ldr	r3, [pc, #284]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d115      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e07f      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d107      	bne.n	8007d62 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d52:	4b41      	ldr	r3, [pc, #260]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d109      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	e073      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d62:	4b3d      	ldr	r3, [pc, #244]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e06b      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d72:	4b39      	ldr	r3, [pc, #228]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f023 0203 	bic.w	r2, r3, #3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	4936      	ldr	r1, [pc, #216]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007d80:	4313      	orrs	r3, r2
 8007d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d84:	f7fd ffce 	bl	8005d24 <HAL_GetTick>
 8007d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d8a:	e00a      	b.n	8007da2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d8c:	f7fd ffca 	bl	8005d24 <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d901      	bls.n	8007da2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e053      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007da2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 020c 	and.w	r2, r3, #12
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d1eb      	bne.n	8007d8c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007db4:	4b27      	ldr	r3, [pc, #156]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	683a      	ldr	r2, [r7, #0]
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d210      	bcs.n	8007de4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dc2:	4b24      	ldr	r3, [pc, #144]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f023 020f 	bic.w	r2, r3, #15
 8007dca:	4922      	ldr	r1, [pc, #136]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dd2:	4b20      	ldr	r3, [pc, #128]	@ (8007e54 <HAL_RCC_ClockConfig+0x1c4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 030f 	and.w	r3, r3, #15
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d001      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e032      	b.n	8007e4a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0304 	and.w	r3, r3, #4
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d008      	beq.n	8007e02 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007df0:	4b19      	ldr	r3, [pc, #100]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	4916      	ldr	r1, [pc, #88]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0308 	and.w	r3, r3, #8
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d009      	beq.n	8007e22 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007e0e:	4b12      	ldr	r3, [pc, #72]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007e10:	689b      	ldr	r3, [r3, #8]
 8007e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	00db      	lsls	r3, r3, #3
 8007e1c:	490e      	ldr	r1, [pc, #56]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e22:	f000 f821 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 8007e26:	4602      	mov	r2, r0
 8007e28:	4b0b      	ldr	r3, [pc, #44]	@ (8007e58 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	091b      	lsrs	r3, r3, #4
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	490a      	ldr	r1, [pc, #40]	@ (8007e5c <HAL_RCC_ClockConfig+0x1cc>)
 8007e34:	5ccb      	ldrb	r3, [r1, r3]
 8007e36:	fa22 f303 	lsr.w	r3, r2, r3
 8007e3a:	4a09      	ldr	r2, [pc, #36]	@ (8007e60 <HAL_RCC_ClockConfig+0x1d0>)
 8007e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e3e:	4b09      	ldr	r3, [pc, #36]	@ (8007e64 <HAL_RCC_ClockConfig+0x1d4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd fdb2 	bl	80059ac <HAL_InitTick>

  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40023c00 	.word	0x40023c00
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	080138ec 	.word	0x080138ec
 8007e60:	20000054 	.word	0x20000054
 8007e64:	20000058 	.word	0x20000058

08007e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e6c:	b094      	sub	sp, #80	@ 0x50
 8007e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e74:	2300      	movs	r3, #0
 8007e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e78:	2300      	movs	r3, #0
 8007e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e80:	4b79      	ldr	r3, [pc, #484]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f003 030c 	and.w	r3, r3, #12
 8007e88:	2b08      	cmp	r3, #8
 8007e8a:	d00d      	beq.n	8007ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	f200 80e1 	bhi.w	8008054 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d002      	beq.n	8007e9c <HAL_RCC_GetSysClockFreq+0x34>
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d003      	beq.n	8007ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8007e9a:	e0db      	b.n	8008054 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e9c:	4b73      	ldr	r3, [pc, #460]	@ (800806c <HAL_RCC_GetSysClockFreq+0x204>)
 8007e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ea0:	e0db      	b.n	800805a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ea2:	4b73      	ldr	r3, [pc, #460]	@ (8008070 <HAL_RCC_GetSysClockFreq+0x208>)
 8007ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ea6:	e0d8      	b.n	800805a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ea8:	4b6f      	ldr	r3, [pc, #444]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007eb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007eb2:	4b6d      	ldr	r3, [pc, #436]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d063      	beq.n	8007f86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	099b      	lsrs	r3, r3, #6
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ed0:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ed6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007eda:	4622      	mov	r2, r4
 8007edc:	462b      	mov	r3, r5
 8007ede:	f04f 0000 	mov.w	r0, #0
 8007ee2:	f04f 0100 	mov.w	r1, #0
 8007ee6:	0159      	lsls	r1, r3, #5
 8007ee8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eec:	0150      	lsls	r0, r2, #5
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	1a51      	subs	r1, r2, r1
 8007ef6:	6139      	str	r1, [r7, #16]
 8007ef8:	4629      	mov	r1, r5
 8007efa:	eb63 0301 	sbc.w	r3, r3, r1
 8007efe:	617b      	str	r3, [r7, #20]
 8007f00:	f04f 0200 	mov.w	r2, #0
 8007f04:	f04f 0300 	mov.w	r3, #0
 8007f08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f0c:	4659      	mov	r1, fp
 8007f0e:	018b      	lsls	r3, r1, #6
 8007f10:	4651      	mov	r1, sl
 8007f12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007f16:	4651      	mov	r1, sl
 8007f18:	018a      	lsls	r2, r1, #6
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	ebb2 0801 	subs.w	r8, r2, r1
 8007f20:	4659      	mov	r1, fp
 8007f22:	eb63 0901 	sbc.w	r9, r3, r1
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	f04f 0300 	mov.w	r3, #0
 8007f2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f3a:	4690      	mov	r8, r2
 8007f3c:	4699      	mov	r9, r3
 8007f3e:	4623      	mov	r3, r4
 8007f40:	eb18 0303 	adds.w	r3, r8, r3
 8007f44:	60bb      	str	r3, [r7, #8]
 8007f46:	462b      	mov	r3, r5
 8007f48:	eb49 0303 	adc.w	r3, r9, r3
 8007f4c:	60fb      	str	r3, [r7, #12]
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	024b      	lsls	r3, r1, #9
 8007f5e:	4621      	mov	r1, r4
 8007f60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007f64:	4621      	mov	r1, r4
 8007f66:	024a      	lsls	r2, r1, #9
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f6e:	2200      	movs	r2, #0
 8007f70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f78:	f7f8 f9a2 	bl	80002c0 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4613      	mov	r3, r2
 8007f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f84:	e058      	b.n	8008038 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f86:	4b38      	ldr	r3, [pc, #224]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	099b      	lsrs	r3, r3, #6
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	4611      	mov	r1, r2
 8007f92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007f96:	623b      	str	r3, [r7, #32]
 8007f98:	2300      	movs	r3, #0
 8007f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007fa0:	4642      	mov	r2, r8
 8007fa2:	464b      	mov	r3, r9
 8007fa4:	f04f 0000 	mov.w	r0, #0
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	0159      	lsls	r1, r3, #5
 8007fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fb2:	0150      	lsls	r0, r2, #5
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4641      	mov	r1, r8
 8007fba:	ebb2 0a01 	subs.w	sl, r2, r1
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8007fc4:	f04f 0200 	mov.w	r2, #0
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007fd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007fd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007fd8:	ebb2 040a 	subs.w	r4, r2, sl
 8007fdc:	eb63 050b 	sbc.w	r5, r3, fp
 8007fe0:	f04f 0200 	mov.w	r2, #0
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	00eb      	lsls	r3, r5, #3
 8007fea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fee:	00e2      	lsls	r2, r4, #3
 8007ff0:	4614      	mov	r4, r2
 8007ff2:	461d      	mov	r5, r3
 8007ff4:	4643      	mov	r3, r8
 8007ff6:	18e3      	adds	r3, r4, r3
 8007ff8:	603b      	str	r3, [r7, #0]
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	eb45 0303 	adc.w	r3, r5, r3
 8008000:	607b      	str	r3, [r7, #4]
 8008002:	f04f 0200 	mov.w	r2, #0
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800800e:	4629      	mov	r1, r5
 8008010:	028b      	lsls	r3, r1, #10
 8008012:	4621      	mov	r1, r4
 8008014:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008018:	4621      	mov	r1, r4
 800801a:	028a      	lsls	r2, r1, #10
 800801c:	4610      	mov	r0, r2
 800801e:	4619      	mov	r1, r3
 8008020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008022:	2200      	movs	r2, #0
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	61fa      	str	r2, [r7, #28]
 8008028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800802c:	f7f8 f948 	bl	80002c0 <__aeabi_uldivmod>
 8008030:	4602      	mov	r2, r0
 8008032:	460b      	mov	r3, r1
 8008034:	4613      	mov	r3, r2
 8008036:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008038:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <HAL_RCC_GetSysClockFreq+0x200>)
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	0c1b      	lsrs	r3, r3, #16
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	3301      	adds	r3, #1
 8008044:	005b      	lsls	r3, r3, #1
 8008046:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800804a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800804c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008050:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008052:	e002      	b.n	800805a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008054:	4b05      	ldr	r3, [pc, #20]	@ (800806c <HAL_RCC_GetSysClockFreq+0x204>)
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800805a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800805c:	4618      	mov	r0, r3
 800805e:	3750      	adds	r7, #80	@ 0x50
 8008060:	46bd      	mov	sp, r7
 8008062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008066:	bf00      	nop
 8008068:	40023800 	.word	0x40023800
 800806c:	00f42400 	.word	0x00f42400
 8008070:	007a1200 	.word	0x007a1200

08008074 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008078:	4b03      	ldr	r3, [pc, #12]	@ (8008088 <HAL_RCC_GetHCLKFreq+0x14>)
 800807a:	681b      	ldr	r3, [r3, #0]
}
 800807c:	4618      	mov	r0, r3
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000054 	.word	0x20000054

0800808c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008090:	f7ff fff0 	bl	8008074 <HAL_RCC_GetHCLKFreq>
 8008094:	4602      	mov	r2, r0
 8008096:	4b05      	ldr	r3, [pc, #20]	@ (80080ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	0a9b      	lsrs	r3, r3, #10
 800809c:	f003 0307 	and.w	r3, r3, #7
 80080a0:	4903      	ldr	r1, [pc, #12]	@ (80080b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080a2:	5ccb      	ldrb	r3, [r1, r3]
 80080a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40023800 	.word	0x40023800
 80080b0:	080138fc 	.word	0x080138fc

080080b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080b8:	f7ff ffdc 	bl	8008074 <HAL_RCC_GetHCLKFreq>
 80080bc:	4602      	mov	r2, r0
 80080be:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	0b5b      	lsrs	r3, r3, #13
 80080c4:	f003 0307 	and.w	r3, r3, #7
 80080c8:	4903      	ldr	r1, [pc, #12]	@ (80080d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080ca:	5ccb      	ldrb	r3, [r1, r3]
 80080cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	40023800 	.word	0x40023800
 80080d8:	080138fc 	.word	0x080138fc

080080dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	220f      	movs	r2, #15
 80080ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80080ec:	4b12      	ldr	r3, [pc, #72]	@ (8008138 <HAL_RCC_GetClockConfig+0x5c>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 0203 	and.w	r2, r3, #3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80080f8:	4b0f      	ldr	r3, [pc, #60]	@ (8008138 <HAL_RCC_GetClockConfig+0x5c>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008104:	4b0c      	ldr	r3, [pc, #48]	@ (8008138 <HAL_RCC_GetClockConfig+0x5c>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008110:	4b09      	ldr	r3, [pc, #36]	@ (8008138 <HAL_RCC_GetClockConfig+0x5c>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	08db      	lsrs	r3, r3, #3
 8008116:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800811e:	4b07      	ldr	r3, [pc, #28]	@ (800813c <HAL_RCC_GetClockConfig+0x60>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 020f 	and.w	r2, r3, #15
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	601a      	str	r2, [r3, #0]
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	40023800 	.word	0x40023800
 800813c:	40023c00 	.word	0x40023c00

08008140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b088      	sub	sp, #32
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008148:	2300      	movs	r3, #0
 800814a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0301 	and.w	r3, r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	d012      	beq.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008168:	4b69      	ldr	r3, [pc, #420]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	4a68      	ldr	r2, [pc, #416]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008172:	6093      	str	r3, [r2, #8]
 8008174:	4b66      	ldr	r3, [pc, #408]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008176:	689a      	ldr	r2, [r3, #8]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800817c:	4964      	ldr	r1, [pc, #400]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800817e:	4313      	orrs	r3, r2
 8008180:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008186:	2b00      	cmp	r3, #0
 8008188:	d101      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d017      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800819a:	4b5d      	ldr	r3, [pc, #372]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081a8:	4959      	ldr	r1, [pc, #356]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b8:	d101      	bne.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80081ba:	2301      	movs	r3, #1
 80081bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d101      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80081c6:	2301      	movs	r3, #1
 80081c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d017      	beq.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80081d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081dc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e4:	494a      	ldr	r1, [pc, #296]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e6:	4313      	orrs	r3, r2
 80081e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80081f4:	d101      	bne.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80081f6:	2301      	movs	r3, #1
 80081f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008202:	2301      	movs	r3, #1
 8008204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008212:	2301      	movs	r3, #1
 8008214:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 808b 	beq.w	800833a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008224:	4b3a      	ldr	r3, [pc, #232]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008228:	4a39      	ldr	r2, [pc, #228]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800822e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008230:	4b37      	ldr	r3, [pc, #220]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008234:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800823c:	4b35      	ldr	r3, [pc, #212]	@ (8008314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a34      	ldr	r2, [pc, #208]	@ (8008314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008248:	f7fd fd6c 	bl	8005d24 <HAL_GetTick>
 800824c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800824e:	e008      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008250:	f7fd fd68 	bl	8005d24 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b64      	cmp	r3, #100	@ 0x64
 800825c:	d901      	bls.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e357      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008262:	4b2c      	ldr	r3, [pc, #176]	@ (8008314 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d0f0      	beq.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800826e:	4b28      	ldr	r3, [pc, #160]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008276:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d035      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008282:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	429a      	cmp	r2, r3
 800828a:	d02e      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800828c:	4b20      	ldr	r3, [pc, #128]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800828e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008290:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008294:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008296:	4b1e      	ldr	r3, [pc, #120]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800829a:	4a1d      	ldr	r2, [pc, #116]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800829c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082a0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082a6:	4a1a      	ldr	r2, [pc, #104]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80082ae:	4a18      	ldr	r2, [pc, #96]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082b4:	4b16      	ldr	r3, [pc, #88]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d114      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fd fd30 	bl	8005d24 <HAL_GetTick>
 80082c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082c6:	e00a      	b.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082c8:	f7fd fd2c 	bl	8005d24 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d901      	bls.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e319      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082de:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e2:	f003 0302 	and.w	r3, r3, #2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0ee      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082f6:	d111      	bne.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80082f8:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008304:	4b04      	ldr	r3, [pc, #16]	@ (8008318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008306:	400b      	ands	r3, r1
 8008308:	4901      	ldr	r1, [pc, #4]	@ (8008310 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]
 800830e:	e00b      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008310:	40023800 	.word	0x40023800
 8008314:	40007000 	.word	0x40007000
 8008318:	0ffffcff 	.word	0x0ffffcff
 800831c:	4baa      	ldr	r3, [pc, #680]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	4aa9      	ldr	r2, [pc, #676]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008322:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008326:	6093      	str	r3, [r2, #8]
 8008328:	4ba7      	ldr	r3, [pc, #668]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800832a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008334:	49a4      	ldr	r1, [pc, #656]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008336:	4313      	orrs	r3, r2
 8008338:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0310 	and.w	r3, r3, #16
 8008342:	2b00      	cmp	r3, #0
 8008344:	d010      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008346:	4ba0      	ldr	r3, [pc, #640]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008348:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800834c:	4a9e      	ldr	r2, [pc, #632]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008352:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008356:	4b9c      	ldr	r3, [pc, #624]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008358:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008360:	4999      	ldr	r1, [pc, #612]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008374:	4b94      	ldr	r3, [pc, #592]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800837a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008382:	4991      	ldr	r1, [pc, #580]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008384:	4313      	orrs	r3, r2
 8008386:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00a      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008396:	4b8c      	ldr	r3, [pc, #560]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800839c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80083a4:	4988      	ldr	r1, [pc, #544]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00a      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80083b8:	4b83      	ldr	r3, [pc, #524]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083c6:	4980      	ldr	r1, [pc, #512]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00a      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083da:	4b7b      	ldr	r3, [pc, #492]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e8:	4977      	ldr	r1, [pc, #476]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00a      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80083fc:	4b72      	ldr	r3, [pc, #456]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008402:	f023 0203 	bic.w	r2, r3, #3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840a:	496f      	ldr	r1, [pc, #444]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00a      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800841e:	4b6a      	ldr	r3, [pc, #424]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008424:	f023 020c 	bic.w	r2, r3, #12
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800842c:	4966      	ldr	r1, [pc, #408]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842e:	4313      	orrs	r3, r2
 8008430:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00a      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008440:	4b61      	ldr	r3, [pc, #388]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008446:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800844e:	495e      	ldr	r1, [pc, #376]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008450:	4313      	orrs	r3, r2
 8008452:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00a      	beq.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008462:	4b59      	ldr	r3, [pc, #356]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008464:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008468:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008470:	4955      	ldr	r1, [pc, #340]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008472:	4313      	orrs	r3, r2
 8008474:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008480:	2b00      	cmp	r3, #0
 8008482:	d00a      	beq.n	800849a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008484:	4b50      	ldr	r3, [pc, #320]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008492:	494d      	ldr	r1, [pc, #308]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008494:	4313      	orrs	r3, r2
 8008496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80084a6:	4b48      	ldr	r3, [pc, #288]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ac:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b4:	4944      	ldr	r1, [pc, #272]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	4313      	orrs	r3, r2
 80084b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80084c8:	4b3f      	ldr	r3, [pc, #252]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084ce:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084d6:	493c      	ldr	r1, [pc, #240]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00a      	beq.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80084ea:	4b37      	ldr	r3, [pc, #220]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084f0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084f8:	4933      	ldr	r1, [pc, #204]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00a      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800850c:	4b2e      	ldr	r3, [pc, #184]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008512:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800851a:	492b      	ldr	r1, [pc, #172]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851c:	4313      	orrs	r3, r2
 800851e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d011      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800852e:	4b26      	ldr	r3, [pc, #152]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008534:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853c:	4922      	ldr	r1, [pc, #136]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853e:	4313      	orrs	r3, r2
 8008540:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008548:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800854c:	d101      	bne.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800854e:	2301      	movs	r3, #1
 8008550:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0308 	and.w	r3, r3, #8
 800855a:	2b00      	cmp	r3, #0
 800855c:	d001      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800855e:	2301      	movs	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800856e:	4b16      	ldr	r3, [pc, #88]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008574:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800857c:	4912      	ldr	r1, [pc, #72]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008590:	4b0d      	ldr	r3, [pc, #52]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008596:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085a0:	4909      	ldr	r1, [pc, #36]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d006      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80d9 	beq.w	800876e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80085bc:	4b02      	ldr	r3, [pc, #8]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a01      	ldr	r2, [pc, #4]	@ (80085c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085c6:	e001      	b.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80085c8:	40023800 	.word	0x40023800
 80085cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085ce:	f7fd fba9 	bl	8005d24 <HAL_GetTick>
 80085d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085d4:	e008      	b.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085d6:	f7fd fba5 	bl	8005d24 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b64      	cmp	r3, #100	@ 0x64
 80085e2:	d901      	bls.n	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e194      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80085e8:	4b6c      	ldr	r3, [pc, #432]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1f0      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d021      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008604:	2b00      	cmp	r3, #0
 8008606:	d11d      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008608:	4b64      	ldr	r3, [pc, #400]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800860a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800860e:	0c1b      	lsrs	r3, r3, #16
 8008610:	f003 0303 	and.w	r3, r3, #3
 8008614:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008616:	4b61      	ldr	r3, [pc, #388]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861c:	0e1b      	lsrs	r3, r3, #24
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	019a      	lsls	r2, r3, #6
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	041b      	lsls	r3, r3, #16
 800862e:	431a      	orrs	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	061b      	lsls	r3, r3, #24
 8008634:	431a      	orrs	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	071b      	lsls	r3, r3, #28
 800863c:	4957      	ldr	r1, [pc, #348]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863e:	4313      	orrs	r3, r2
 8008640:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008654:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008658:	d00a      	beq.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008662:	2b00      	cmp	r3, #0
 8008664:	d02e      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800866a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800866e:	d129      	bne.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008670:	4b4a      	ldr	r3, [pc, #296]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008672:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008676:	0c1b      	lsrs	r3, r3, #16
 8008678:	f003 0303 	and.w	r3, r3, #3
 800867c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800867e:	4b47      	ldr	r3, [pc, #284]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008680:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008684:	0f1b      	lsrs	r3, r3, #28
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	019a      	lsls	r2, r3, #6
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	041b      	lsls	r3, r3, #16
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	061b      	lsls	r3, r3, #24
 800869e:	431a      	orrs	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	071b      	lsls	r3, r3, #28
 80086a4:	493d      	ldr	r1, [pc, #244]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086ac:	4b3b      	ldr	r3, [pc, #236]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b2:	f023 021f 	bic.w	r2, r3, #31
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	3b01      	subs	r3, #1
 80086bc:	4937      	ldr	r1, [pc, #220]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01d      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80086d0:	4b32      	ldr	r3, [pc, #200]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086d6:	0e1b      	lsrs	r3, r3, #24
 80086d8:	f003 030f 	and.w	r3, r3, #15
 80086dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086de:	4b2f      	ldr	r3, [pc, #188]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80086e4:	0f1b      	lsrs	r3, r3, #28
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	019a      	lsls	r2, r3, #6
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	431a      	orrs	r2, r3
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	061b      	lsls	r3, r3, #24
 80086fe:	431a      	orrs	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	071b      	lsls	r3, r3, #28
 8008704:	4925      	ldr	r1, [pc, #148]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d011      	beq.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	019a      	lsls	r2, r3, #6
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	041b      	lsls	r3, r3, #16
 8008724:	431a      	orrs	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68db      	ldr	r3, [r3, #12]
 800872a:	061b      	lsls	r3, r3, #24
 800872c:	431a      	orrs	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	071b      	lsls	r3, r3, #28
 8008734:	4919      	ldr	r1, [pc, #100]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800873c:	4b17      	ldr	r3, [pc, #92]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a16      	ldr	r2, [pc, #88]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008742:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008746:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008748:	f7fd faec 	bl	8005d24 <HAL_GetTick>
 800874c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800874e:	e008      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008750:	f7fd fae8 	bl	8005d24 <HAL_GetTick>
 8008754:	4602      	mov	r2, r0
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	1ad3      	subs	r3, r2, r3
 800875a:	2b64      	cmp	r3, #100	@ 0x64
 800875c:	d901      	bls.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800875e:	2303      	movs	r3, #3
 8008760:	e0d7      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008762:	4b0e      	ldr	r3, [pc, #56]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d0f0      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b01      	cmp	r3, #1
 8008772:	f040 80cd 	bne.w	8008910 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008776:	4b09      	ldr	r3, [pc, #36]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a08      	ldr	r2, [pc, #32]	@ (800879c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008780:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008782:	f7fd facf 	bl	8005d24 <HAL_GetTick>
 8008786:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008788:	e00a      	b.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800878a:	f7fd facb 	bl	8005d24 <HAL_GetTick>
 800878e:	4602      	mov	r2, r0
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	2b64      	cmp	r3, #100	@ 0x64
 8008796:	d903      	bls.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008798:	2303      	movs	r3, #3
 800879a:	e0ba      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800879c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087a0:	4b5e      	ldr	r3, [pc, #376]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ac:	d0ed      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d02e      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d12a      	bne.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80087d6:	4b51      	ldr	r3, [pc, #324]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087dc:	0c1b      	lsrs	r3, r3, #16
 80087de:	f003 0303 	and.w	r3, r3, #3
 80087e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80087e4:	4b4d      	ldr	r3, [pc, #308]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ea:	0f1b      	lsrs	r3, r3, #28
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	019a      	lsls	r2, r3, #6
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	041b      	lsls	r3, r3, #16
 80087fc:	431a      	orrs	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	061b      	lsls	r3, r3, #24
 8008804:	431a      	orrs	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	071b      	lsls	r3, r3, #28
 800880a:	4944      	ldr	r1, [pc, #272]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008812:	4b42      	ldr	r3, [pc, #264]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008814:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008818:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008820:	3b01      	subs	r3, #1
 8008822:	021b      	lsls	r3, r3, #8
 8008824:	493d      	ldr	r1, [pc, #244]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008826:	4313      	orrs	r3, r2
 8008828:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008834:	2b00      	cmp	r3, #0
 8008836:	d022      	beq.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800883c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008840:	d11d      	bne.n	800887e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008842:	4b36      	ldr	r3, [pc, #216]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008848:	0e1b      	lsrs	r3, r3, #24
 800884a:	f003 030f 	and.w	r3, r3, #15
 800884e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008850:	4b32      	ldr	r3, [pc, #200]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008856:	0f1b      	lsrs	r3, r3, #28
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	019a      	lsls	r2, r3, #6
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	431a      	orrs	r2, r3
 800886c:	693b      	ldr	r3, [r7, #16]
 800886e:	061b      	lsls	r3, r3, #24
 8008870:	431a      	orrs	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	071b      	lsls	r3, r3, #28
 8008876:	4929      	ldr	r1, [pc, #164]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008878:	4313      	orrs	r3, r2
 800887a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0308 	and.w	r3, r3, #8
 8008886:	2b00      	cmp	r3, #0
 8008888:	d028      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800888a:	4b24      	ldr	r3, [pc, #144]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008898:	4b20      	ldr	r3, [pc, #128]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800889a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800889e:	0c1b      	lsrs	r3, r3, #16
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	695b      	ldr	r3, [r3, #20]
 80088aa:	019a      	lsls	r2, r3, #6
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	041b      	lsls	r3, r3, #16
 80088b0:	431a      	orrs	r2, r3
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	061b      	lsls	r3, r3, #24
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	69db      	ldr	r3, [r3, #28]
 80088bc:	071b      	lsls	r3, r3, #28
 80088be:	4917      	ldr	r1, [pc, #92]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80088c6:	4b15      	ldr	r3, [pc, #84]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d4:	4911      	ldr	r1, [pc, #68]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80088dc:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a0e      	ldr	r2, [pc, #56]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e8:	f7fd fa1c 	bl	8005d24 <HAL_GetTick>
 80088ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80088ee:	e008      	b.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088f0:	f7fd fa18 	bl	8005d24 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b64      	cmp	r3, #100	@ 0x64
 80088fc:	d901      	bls.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e007      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008902:	4b06      	ldr	r3, [pc, #24]	@ (800891c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800890a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800890e:	d1ef      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	40023800 	.word	0x40023800

08008920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e09d      	b.n	8008a6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008936:	2b00      	cmp	r3, #0
 8008938:	d108      	bne.n	800894c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008942:	d009      	beq.n	8008958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	61da      	str	r2, [r3, #28]
 800894a:	e005      	b.n	8008958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2200      	movs	r2, #0
 800895c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7fc fabc 	bl	8004ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800898e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008998:	d902      	bls.n	80089a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800899a:	2300      	movs	r3, #0
 800899c:	60fb      	str	r3, [r7, #12]
 800899e:	e002      	b.n	80089a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80089ae:	d007      	beq.n	80089c0 <HAL_SPI_Init+0xa0>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80089b8:	d002      	beq.n	80089c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ee:	431a      	orrs	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	69db      	ldr	r3, [r3, #28]
 80089f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089f8:	431a      	orrs	r2, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a1b      	ldr	r3, [r3, #32]
 80089fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a02:	ea42 0103 	orr.w	r1, r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	0c1b      	lsrs	r3, r3, #16
 8008a1c:	f003 0204 	and.w	r2, r3, #4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a24:	f003 0310 	and.w	r3, r3, #16
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008a3c:	ea42 0103 	orr.w	r1, r2, r3
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b088      	sub	sp, #32
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	603b      	str	r3, [r7, #0]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d101      	bne.n	8008a98 <HAL_SPI_Transmit+0x22>
 8008a94:	2302      	movs	r3, #2
 8008a96:	e15f      	b.n	8008d58 <HAL_SPI_Transmit+0x2e2>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aa0:	f7fd f940 	bl	8005d24 <HAL_GetTick>
 8008aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008aa6:	88fb      	ldrh	r3, [r7, #6]
 8008aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d002      	beq.n	8008abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008aba:	e148      	b.n	8008d4e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_SPI_Transmit+0x52>
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d102      	bne.n	8008ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008acc:	e13f      	b.n	8008d4e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2203      	movs	r2, #3
 8008ad2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	88fa      	ldrh	r2, [r7, #6]
 8008ae6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	88fa      	ldrh	r2, [r7, #6]
 8008aec:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2200      	movs	r2, #0
 8008b00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b18:	d10f      	bne.n	8008b3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b44:	2b40      	cmp	r3, #64	@ 0x40
 8008b46:	d007      	beq.n	8008b58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008b56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b60:	d94f      	bls.n	8008c02 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d002      	beq.n	8008b70 <HAL_SPI_Transmit+0xfa>
 8008b6a:	8afb      	ldrh	r3, [r7, #22]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d142      	bne.n	8008bf6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b74:	881a      	ldrh	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b80:	1c9a      	adds	r2, r3, #2
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b94:	e02f      	b.n	8008bf6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d112      	bne.n	8008bca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba8:	881a      	ldrh	r2, [r3, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb4:	1c9a      	adds	r2, r3, #2
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	3b01      	subs	r3, #1
 8008bc2:	b29a      	uxth	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008bc8:	e015      	b.n	8008bf6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bca:	f7fd f8ab 	bl	8005d24 <HAL_GetTick>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	69bb      	ldr	r3, [r7, #24]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d803      	bhi.n	8008be2 <HAL_SPI_Transmit+0x16c>
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be0:	d102      	bne.n	8008be8 <HAL_SPI_Transmit+0x172>
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d106      	bne.n	8008bf6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008bf4:	e0ab      	b.n	8008d4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1ca      	bne.n	8008b96 <HAL_SPI_Transmit+0x120>
 8008c00:	e080      	b.n	8008d04 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d002      	beq.n	8008c10 <HAL_SPI_Transmit+0x19a>
 8008c0a:	8afb      	ldrh	r3, [r7, #22]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d174      	bne.n	8008cfa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d912      	bls.n	8008c40 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1e:	881a      	ldrh	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c2a:	1c9a      	adds	r2, r3, #2
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b02      	subs	r3, #2
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008c3e:	e05c      	b.n	8008cfa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	7812      	ldrb	r2, [r2, #0]
 8008c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c52:	1c5a      	adds	r2, r3, #1
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c66:	e048      	b.n	8008cfa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d12b      	bne.n	8008cce <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d912      	bls.n	8008ca6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	881a      	ldrh	r2, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c90:	1c9a      	adds	r2, r3, #2
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	3b02      	subs	r3, #2
 8008c9e:	b29a      	uxth	r2, r3
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ca4:	e029      	b.n	8008cfa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	330c      	adds	r3, #12
 8008cb0:	7812      	ldrb	r2, [r2, #0]
 8008cb2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ccc:	e015      	b.n	8008cfa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cce:	f7fd f829 	bl	8005d24 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d803      	bhi.n	8008ce6 <HAL_SPI_Transmit+0x270>
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d102      	bne.n	8008cec <HAL_SPI_Transmit+0x276>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d106      	bne.n	8008cfa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8008cec:	2303      	movs	r3, #3
 8008cee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008cf8:	e029      	b.n	8008d4e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1b1      	bne.n	8008c68 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f000 fb69 	bl	80093e0 <SPI_EndRxTxTransaction>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d22:	2300      	movs	r3, #0
 8008d24:	613b      	str	r3, [r7, #16]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	613b      	str	r3, [r7, #16]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	613b      	str	r3, [r7, #16]
 8008d36:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d002      	beq.n	8008d46 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8008d40:	2301      	movs	r3, #1
 8008d42:	77fb      	strb	r3, [r7, #31]
 8008d44:	e003      	b.n	8008d4e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008d56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3720      	adds	r7, #32
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b08a      	sub	sp, #40	@ 0x28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
 8008d6c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d72:	2300      	movs	r3, #0
 8008d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d101      	bne.n	8008d86 <HAL_SPI_TransmitReceive+0x26>
 8008d82:	2302      	movs	r3, #2
 8008d84:	e20a      	b.n	800919c <HAL_SPI_TransmitReceive+0x43c>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d8e:	f7fc ffc9 	bl	8005d24 <HAL_GetTick>
 8008d92:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008d9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008da2:	887b      	ldrh	r3, [r7, #2]
 8008da4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008daa:	7efb      	ldrb	r3, [r7, #27]
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	d00e      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x6e>
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008db6:	d106      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <HAL_SPI_TransmitReceive+0x66>
 8008dc0:	7efb      	ldrb	r3, [r7, #27]
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d003      	beq.n	8008dce <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008dc6:	2302      	movs	r3, #2
 8008dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008dcc:	e1e0      	b.n	8009190 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <HAL_SPI_TransmitReceive+0x80>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d002      	beq.n	8008de0 <HAL_SPI_TransmitReceive+0x80>
 8008dda:	887b      	ldrh	r3, [r7, #2]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d103      	bne.n	8008de8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008de0:	2301      	movs	r3, #1
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008de6:	e1d3      	b.n	8009190 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	d003      	beq.n	8008dfc <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2205      	movs	r2, #5
 8008df8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	887a      	ldrh	r2, [r7, #2]
 8008e0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	887a      	ldrh	r2, [r7, #2]
 8008e14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	887a      	ldrh	r2, [r7, #2]
 8008e22:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	887a      	ldrh	r2, [r7, #2]
 8008e28:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e3e:	d802      	bhi.n	8008e46 <HAL_SPI_TransmitReceive+0xe6>
 8008e40:	8a3b      	ldrh	r3, [r7, #16]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d908      	bls.n	8008e58 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685a      	ldr	r2, [r3, #4]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e54:	605a      	str	r2, [r3, #4]
 8008e56:	e007      	b.n	8008e68 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685a      	ldr	r2, [r3, #4]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e72:	2b40      	cmp	r3, #64	@ 0x40
 8008e74:	d007      	beq.n	8008e86 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	68db      	ldr	r3, [r3, #12]
 8008e8a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e8e:	f240 8081 	bls.w	8008f94 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d002      	beq.n	8008ea0 <HAL_SPI_TransmitReceive+0x140>
 8008e9a:	8a7b      	ldrh	r3, [r7, #18]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d16d      	bne.n	8008f7c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea4:	881a      	ldrh	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb0:	1c9a      	adds	r2, r3, #2
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec4:	e05a      	b.n	8008f7c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d11b      	bne.n	8008f0c <HAL_SPI_TransmitReceive+0x1ac>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d016      	beq.n	8008f0c <HAL_SPI_TransmitReceive+0x1ac>
 8008ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d113      	bne.n	8008f0c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef4:	1c9a      	adds	r2, r3, #2
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	3b01      	subs	r3, #1
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d11c      	bne.n	8008f54 <HAL_SPI_TransmitReceive+0x1f4>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d016      	beq.n	8008f54 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	b292      	uxth	r2, r2
 8008f32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f38:	1c9a      	adds	r2, r3, #2
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	3b01      	subs	r3, #1
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f50:	2301      	movs	r3, #1
 8008f52:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f54:	f7fc fee6 	bl	8005d24 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d80b      	bhi.n	8008f7c <HAL_SPI_TransmitReceive+0x21c>
 8008f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6a:	d007      	beq.n	8008f7c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2201      	movs	r2, #1
 8008f76:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8008f7a:	e109      	b.n	8009190 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d19f      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x166>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d199      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x166>
 8008f92:	e0e3      	b.n	800915c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_SPI_TransmitReceive+0x244>
 8008f9c:	8a7b      	ldrh	r3, [r7, #18]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	f040 80cf 	bne.w	8009142 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d912      	bls.n	8008fd4 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fb2:	881a      	ldrh	r2, [r3, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbe:	1c9a      	adds	r2, r3, #2
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b02      	subs	r3, #2
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008fd2:	e0b6      	b.n	8009142 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	330c      	adds	r3, #12
 8008fde:	7812      	ldrb	r2, [r2, #0]
 8008fe0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe6:	1c5a      	adds	r2, r3, #1
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ffa:	e0a2      	b.n	8009142 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f003 0302 	and.w	r3, r3, #2
 8009006:	2b02      	cmp	r3, #2
 8009008:	d134      	bne.n	8009074 <HAL_SPI_TransmitReceive+0x314>
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800900e:	b29b      	uxth	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d02f      	beq.n	8009074 <HAL_SPI_TransmitReceive+0x314>
 8009014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009016:	2b01      	cmp	r3, #1
 8009018:	d12c      	bne.n	8009074 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800901e:	b29b      	uxth	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d912      	bls.n	800904a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009028:	881a      	ldrh	r2, [r3, #0]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009034:	1c9a      	adds	r2, r3, #2
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800903e:	b29b      	uxth	r3, r3
 8009040:	3b02      	subs	r3, #2
 8009042:	b29a      	uxth	r2, r3
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009048:	e012      	b.n	8009070 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	7812      	ldrb	r2, [r2, #0]
 8009056:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800905c:	1c5a      	adds	r2, r3, #1
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009066:	b29b      	uxth	r3, r3
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	2b01      	cmp	r3, #1
 8009080:	d148      	bne.n	8009114 <HAL_SPI_TransmitReceive+0x3b4>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009088:	b29b      	uxth	r3, r3
 800908a:	2b00      	cmp	r3, #0
 800908c:	d042      	beq.n	8009114 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b01      	cmp	r3, #1
 8009098:	d923      	bls.n	80090e2 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a4:	b292      	uxth	r2, r2
 80090a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ac:	1c9a      	adds	r2, r3, #2
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	3b02      	subs	r3, #2
 80090bc:	b29a      	uxth	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d81f      	bhi.n	8009110 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	685a      	ldr	r2, [r3, #4]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090de:	605a      	str	r2, [r3, #4]
 80090e0:	e016      	b.n	8009110 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f103 020c 	add.w	r2, r3, #12
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ee:	7812      	ldrb	r2, [r2, #0]
 80090f0:	b2d2      	uxtb	r2, r2
 80090f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009104:	b29b      	uxth	r3, r3
 8009106:	3b01      	subs	r3, #1
 8009108:	b29a      	uxth	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009110:	2301      	movs	r3, #1
 8009112:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009114:	f7fc fe06 	bl	8005d24 <HAL_GetTick>
 8009118:	4602      	mov	r2, r0
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009120:	429a      	cmp	r2, r3
 8009122:	d803      	bhi.n	800912c <HAL_SPI_TransmitReceive+0x3cc>
 8009124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d102      	bne.n	8009132 <HAL_SPI_TransmitReceive+0x3d2>
 800912c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912e:	2b00      	cmp	r3, #0
 8009130:	d107      	bne.n	8009142 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009132:	2303      	movs	r3, #3
 8009134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009140:	e026      	b.n	8009190 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009146:	b29b      	uxth	r3, r3
 8009148:	2b00      	cmp	r3, #0
 800914a:	f47f af57 	bne.w	8008ffc <HAL_SPI_TransmitReceive+0x29c>
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009154:	b29b      	uxth	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	f47f af50 	bne.w	8008ffc <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800915c:	69fa      	ldr	r2, [r7, #28]
 800915e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009160:	68f8      	ldr	r0, [r7, #12]
 8009162:	f000 f93d 	bl	80093e0 <SPI_EndRxTxTransaction>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2220      	movs	r2, #32
 8009176:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800917c:	2b00      	cmp	r3, #0
 800917e:	d003      	beq.n	8009188 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009180:	2301      	movs	r3, #1
 8009182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009186:	e003      	b.n	8009190 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009198:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800919c:	4618      	mov	r0, r3
 800919e:	3728      	adds	r7, #40	@ 0x28
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b088      	sub	sp, #32
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	603b      	str	r3, [r7, #0]
 80091b0:	4613      	mov	r3, r2
 80091b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80091b4:	f7fc fdb6 	bl	8005d24 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091bc:	1a9b      	subs	r3, r3, r2
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	4413      	add	r3, r2
 80091c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80091c4:	f7fc fdae 	bl	8005d24 <HAL_GetTick>
 80091c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80091ca:	4b39      	ldr	r3, [pc, #228]	@ (80092b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	015b      	lsls	r3, r3, #5
 80091d0:	0d1b      	lsrs	r3, r3, #20
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	fb02 f303 	mul.w	r3, r2, r3
 80091d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80091da:	e054      	b.n	8009286 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e2:	d050      	beq.n	8009286 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80091e4:	f7fc fd9e 	bl	8005d24 <HAL_GetTick>
 80091e8:	4602      	mov	r2, r0
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	1ad3      	subs	r3, r2, r3
 80091ee:	69fa      	ldr	r2, [r7, #28]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d902      	bls.n	80091fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d13d      	bne.n	8009276 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009208:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009212:	d111      	bne.n	8009238 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800921c:	d004      	beq.n	8009228 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009226:	d107      	bne.n	8009238 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009236:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009240:	d10f      	bne.n	8009262 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009260:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e017      	b.n	80092a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	3b01      	subs	r3, #1
 8009284:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4013      	ands	r3, r2
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	429a      	cmp	r2, r3
 8009294:	bf0c      	ite	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	2300      	movne	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	461a      	mov	r2, r3
 800929e:	79fb      	ldrb	r3, [r7, #7]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d19b      	bne.n	80091dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3720      	adds	r7, #32
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20000054 	.word	0x20000054

080092b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b08a      	sub	sp, #40	@ 0x28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80092c6:	f7fc fd2d 	bl	8005d24 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ce:	1a9b      	subs	r3, r3, r2
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	4413      	add	r3, r2
 80092d4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80092d6:	f7fc fd25 	bl	8005d24 <HAL_GetTick>
 80092da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80092e4:	4b3d      	ldr	r3, [pc, #244]	@ (80093dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	00da      	lsls	r2, r3, #3
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	0d1b      	lsrs	r3, r3, #20
 80092f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092f6:	fb02 f303 	mul.w	r3, r2, r3
 80092fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80092fc:	e060      	b.n	80093c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009304:	d107      	bne.n	8009316 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d104      	bne.n	8009316 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	781b      	ldrb	r3, [r3, #0]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009314:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800931c:	d050      	beq.n	80093c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800931e:	f7fc fd01 	bl	8005d24 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	6a3b      	ldr	r3, [r7, #32]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800932a:	429a      	cmp	r2, r3
 800932c:	d902      	bls.n	8009334 <SPI_WaitFifoStateUntilTimeout+0x80>
 800932e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009330:	2b00      	cmp	r3, #0
 8009332:	d13d      	bne.n	80093b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009342:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800934c:	d111      	bne.n	8009372 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009356:	d004      	beq.n	8009362 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009360:	d107      	bne.n	8009372 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009370:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800937a:	d10f      	bne.n	800939c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800939a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e010      	b.n	80093d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d101      	bne.n	80093ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	3b01      	subs	r3, #1
 80093be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	4013      	ands	r3, r2
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d196      	bne.n	80092fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3728      	adds	r7, #40	@ 0x28
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	20000054 	.word	0x20000054

080093e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b088      	sub	sp, #32
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80093f8:	68f8      	ldr	r0, [r7, #12]
 80093fa:	f7ff ff5b 	bl	80092b4 <SPI_WaitFifoStateUntilTimeout>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d007      	beq.n	8009414 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009408:	f043 0220 	orr.w	r2, r3, #32
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e046      	b.n	80094a2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009414:	4b25      	ldr	r3, [pc, #148]	@ (80094ac <SPI_EndRxTxTransaction+0xcc>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a25      	ldr	r2, [pc, #148]	@ (80094b0 <SPI_EndRxTxTransaction+0xd0>)
 800941a:	fba2 2303 	umull	r2, r3, r2, r3
 800941e:	0d5b      	lsrs	r3, r3, #21
 8009420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009424:	fb02 f303 	mul.w	r3, r2, r3
 8009428:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009432:	d112      	bne.n	800945a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2200      	movs	r2, #0
 800943c:	2180      	movs	r1, #128	@ 0x80
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff feb0 	bl	80091a4 <SPI_WaitFlagStateUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d016      	beq.n	8009478 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800944e:	f043 0220 	orr.w	r2, r3, #32
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e023      	b.n	80094a2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00a      	beq.n	8009476 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	3b01      	subs	r3, #1
 8009464:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009470:	2b80      	cmp	r3, #128	@ 0x80
 8009472:	d0f2      	beq.n	800945a <SPI_EndRxTxTransaction+0x7a>
 8009474:	e000      	b.n	8009478 <SPI_EndRxTxTransaction+0x98>
        break;
 8009476:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	9300      	str	r3, [sp, #0]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2200      	movs	r2, #0
 8009480:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f7ff ff15 	bl	80092b4 <SPI_WaitFifoStateUntilTimeout>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d007      	beq.n	80094a0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009494:	f043 0220 	orr.w	r2, r3, #32
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800949c:	2303      	movs	r3, #3
 800949e:	e000      	b.n	80094a2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000054 	.word	0x20000054
 80094b0:	165e9f81 	.word	0x165e9f81

080094b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e049      	b.n	800955a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fb fd6a 	bl	8004fb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f001 f8e6 	bl	800a6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d001      	beq.n	800957c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e04c      	b.n	8009616 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a26      	ldr	r2, [pc, #152]	@ (8009624 <HAL_TIM_Base_Start+0xc0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d022      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009596:	d01d      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a22      	ldr	r2, [pc, #136]	@ (8009628 <HAL_TIM_Base_Start+0xc4>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d018      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a21      	ldr	r2, [pc, #132]	@ (800962c <HAL_TIM_Base_Start+0xc8>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d013      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a1f      	ldr	r2, [pc, #124]	@ (8009630 <HAL_TIM_Base_Start+0xcc>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d00e      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009634 <HAL_TIM_Base_Start+0xd0>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d009      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009638 <HAL_TIM_Base_Start+0xd4>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d004      	beq.n	80095d4 <HAL_TIM_Base_Start+0x70>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1b      	ldr	r2, [pc, #108]	@ (800963c <HAL_TIM_Base_Start+0xd8>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d115      	bne.n	8009600 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689a      	ldr	r2, [r3, #8]
 80095da:	4b19      	ldr	r3, [pc, #100]	@ (8009640 <HAL_TIM_Base_Start+0xdc>)
 80095dc:	4013      	ands	r3, r2
 80095de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b06      	cmp	r3, #6
 80095e4:	d015      	beq.n	8009612 <HAL_TIM_Base_Start+0xae>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095ec:	d011      	beq.n	8009612 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f042 0201 	orr.w	r2, r2, #1
 80095fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095fe:	e008      	b.n	8009612 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	681a      	ldr	r2, [r3, #0]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0201 	orr.w	r2, r2, #1
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	e000      	b.n	8009614 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	40010000 	.word	0x40010000
 8009628:	40000400 	.word	0x40000400
 800962c:	40000800 	.word	0x40000800
 8009630:	40000c00 	.word	0x40000c00
 8009634:	40010400 	.word	0x40010400
 8009638:	40014000 	.word	0x40014000
 800963c:	40001800 	.word	0x40001800
 8009640:	00010007 	.word	0x00010007

08009644 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6a1a      	ldr	r2, [r3, #32]
 8009652:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009656:	4013      	ands	r3, r2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10f      	bne.n	800967c <HAL_TIM_Base_Stop+0x38>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6a1a      	ldr	r2, [r3, #32]
 8009662:	f240 4344 	movw	r3, #1092	@ 0x444
 8009666:	4013      	ands	r3, r2
 8009668:	2b00      	cmp	r3, #0
 800966a:	d107      	bne.n	800967c <HAL_TIM_Base_Stop+0x38>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f022 0201 	bic.w	r2, r2, #1
 800967a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009684:	2300      	movs	r3, #0
}
 8009686:	4618      	mov	r0, r3
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
	...

08009694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009694:	b480      	push	{r7}
 8009696:	b085      	sub	sp, #20
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d001      	beq.n	80096ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e054      	b.n	8009756 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2202      	movs	r2, #2
 80096b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	68da      	ldr	r2, [r3, #12]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a26      	ldr	r2, [pc, #152]	@ (8009764 <HAL_TIM_Base_Start_IT+0xd0>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d022      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096d6:	d01d      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a22      	ldr	r2, [pc, #136]	@ (8009768 <HAL_TIM_Base_Start_IT+0xd4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d018      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a21      	ldr	r2, [pc, #132]	@ (800976c <HAL_TIM_Base_Start_IT+0xd8>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d013      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a1f      	ldr	r2, [pc, #124]	@ (8009770 <HAL_TIM_Base_Start_IT+0xdc>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d00e      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a1e      	ldr	r2, [pc, #120]	@ (8009774 <HAL_TIM_Base_Start_IT+0xe0>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d009      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a1c      	ldr	r2, [pc, #112]	@ (8009778 <HAL_TIM_Base_Start_IT+0xe4>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d004      	beq.n	8009714 <HAL_TIM_Base_Start_IT+0x80>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a1b      	ldr	r2, [pc, #108]	@ (800977c <HAL_TIM_Base_Start_IT+0xe8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d115      	bne.n	8009740 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	4b19      	ldr	r3, [pc, #100]	@ (8009780 <HAL_TIM_Base_Start_IT+0xec>)
 800971c:	4013      	ands	r3, r2
 800971e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b06      	cmp	r3, #6
 8009724:	d015      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0xbe>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800972c:	d011      	beq.n	8009752 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f042 0201 	orr.w	r2, r2, #1
 800973c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800973e:	e008      	b.n	8009752 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	e000      	b.n	8009754 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009754:	2300      	movs	r3, #0
}
 8009756:	4618      	mov	r0, r3
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	40010000 	.word	0x40010000
 8009768:	40000400 	.word	0x40000400
 800976c:	40000800 	.word	0x40000800
 8009770:	40000c00 	.word	0x40000c00
 8009774:	40010400 	.word	0x40010400
 8009778:	40014000 	.word	0x40014000
 800977c:	40001800 	.word	0x40001800
 8009780:	00010007 	.word	0x00010007

08009784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e049      	b.n	800982a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800979c:	b2db      	uxtb	r3, r3
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d106      	bne.n	80097b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2200      	movs	r2, #0
 80097a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fb fce6 	bl	800517c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2202      	movs	r2, #2
 80097b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681a      	ldr	r2, [r3, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	3304      	adds	r3, #4
 80097c0:	4619      	mov	r1, r3
 80097c2:	4610      	mov	r0, r2
 80097c4:	f000 ff7e 	bl	800a6c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d109      	bne.n	8009858 <HAL_TIM_PWM_Start+0x24>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b01      	cmp	r3, #1
 800984e:	bf14      	ite	ne
 8009850:	2301      	movne	r3, #1
 8009852:	2300      	moveq	r3, #0
 8009854:	b2db      	uxtb	r3, r3
 8009856:	e03c      	b.n	80098d2 <HAL_TIM_PWM_Start+0x9e>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	2b04      	cmp	r3, #4
 800985c:	d109      	bne.n	8009872 <HAL_TIM_PWM_Start+0x3e>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b01      	cmp	r3, #1
 8009868:	bf14      	ite	ne
 800986a:	2301      	movne	r3, #1
 800986c:	2300      	moveq	r3, #0
 800986e:	b2db      	uxtb	r3, r3
 8009870:	e02f      	b.n	80098d2 <HAL_TIM_PWM_Start+0x9e>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b08      	cmp	r3, #8
 8009876:	d109      	bne.n	800988c <HAL_TIM_PWM_Start+0x58>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	bf14      	ite	ne
 8009884:	2301      	movne	r3, #1
 8009886:	2300      	moveq	r3, #0
 8009888:	b2db      	uxtb	r3, r3
 800988a:	e022      	b.n	80098d2 <HAL_TIM_PWM_Start+0x9e>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b0c      	cmp	r3, #12
 8009890:	d109      	bne.n	80098a6 <HAL_TIM_PWM_Start+0x72>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b01      	cmp	r3, #1
 800989c:	bf14      	ite	ne
 800989e:	2301      	movne	r3, #1
 80098a0:	2300      	moveq	r3, #0
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	e015      	b.n	80098d2 <HAL_TIM_PWM_Start+0x9e>
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	2b10      	cmp	r3, #16
 80098aa:	d109      	bne.n	80098c0 <HAL_TIM_PWM_Start+0x8c>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	bf14      	ite	ne
 80098b8:	2301      	movne	r3, #1
 80098ba:	2300      	moveq	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	e008      	b.n	80098d2 <HAL_TIM_PWM_Start+0x9e>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	bf14      	ite	ne
 80098cc:	2301      	movne	r3, #1
 80098ce:	2300      	moveq	r3, #0
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80098d6:	2301      	movs	r3, #1
 80098d8:	e092      	b.n	8009a00 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d104      	bne.n	80098ea <HAL_TIM_PWM_Start+0xb6>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2202      	movs	r2, #2
 80098e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80098e8:	e023      	b.n	8009932 <HAL_TIM_PWM_Start+0xfe>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b04      	cmp	r3, #4
 80098ee:	d104      	bne.n	80098fa <HAL_TIM_PWM_Start+0xc6>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80098f8:	e01b      	b.n	8009932 <HAL_TIM_PWM_Start+0xfe>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	2b08      	cmp	r3, #8
 80098fe:	d104      	bne.n	800990a <HAL_TIM_PWM_Start+0xd6>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2202      	movs	r2, #2
 8009904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009908:	e013      	b.n	8009932 <HAL_TIM_PWM_Start+0xfe>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b0c      	cmp	r3, #12
 800990e:	d104      	bne.n	800991a <HAL_TIM_PWM_Start+0xe6>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009918:	e00b      	b.n	8009932 <HAL_TIM_PWM_Start+0xfe>
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b10      	cmp	r3, #16
 800991e:	d104      	bne.n	800992a <HAL_TIM_PWM_Start+0xf6>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2202      	movs	r2, #2
 8009924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009928:	e003      	b.n	8009932 <HAL_TIM_PWM_Start+0xfe>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2201      	movs	r2, #1
 8009938:	6839      	ldr	r1, [r7, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f001 fa66 	bl	800ae0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a30      	ldr	r2, [pc, #192]	@ (8009a08 <HAL_TIM_PWM_Start+0x1d4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d004      	beq.n	8009954 <HAL_TIM_PWM_Start+0x120>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a2f      	ldr	r2, [pc, #188]	@ (8009a0c <HAL_TIM_PWM_Start+0x1d8>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d101      	bne.n	8009958 <HAL_TIM_PWM_Start+0x124>
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <HAL_TIM_PWM_Start+0x126>
 8009958:	2300      	movs	r3, #0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d007      	beq.n	800996e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800996c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a25      	ldr	r2, [pc, #148]	@ (8009a08 <HAL_TIM_PWM_Start+0x1d4>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d022      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009980:	d01d      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a22      	ldr	r2, [pc, #136]	@ (8009a10 <HAL_TIM_PWM_Start+0x1dc>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d018      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a20      	ldr	r2, [pc, #128]	@ (8009a14 <HAL_TIM_PWM_Start+0x1e0>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d013      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a1f      	ldr	r2, [pc, #124]	@ (8009a18 <HAL_TIM_PWM_Start+0x1e4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d00e      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a19      	ldr	r2, [pc, #100]	@ (8009a0c <HAL_TIM_PWM_Start+0x1d8>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d009      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1b      	ldr	r2, [pc, #108]	@ (8009a1c <HAL_TIM_PWM_Start+0x1e8>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d004      	beq.n	80099be <HAL_TIM_PWM_Start+0x18a>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a19      	ldr	r2, [pc, #100]	@ (8009a20 <HAL_TIM_PWM_Start+0x1ec>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d115      	bne.n	80099ea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	4b17      	ldr	r3, [pc, #92]	@ (8009a24 <HAL_TIM_PWM_Start+0x1f0>)
 80099c6:	4013      	ands	r3, r2
 80099c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b06      	cmp	r3, #6
 80099ce:	d015      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1c8>
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099d6:	d011      	beq.n	80099fc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f042 0201 	orr.w	r2, r2, #1
 80099e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e8:	e008      	b.n	80099fc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 0201 	orr.w	r2, r2, #1
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	e000      	b.n	80099fe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	40010000 	.word	0x40010000
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40000400 	.word	0x40000400
 8009a14:	40000800 	.word	0x40000800
 8009a18:	40000c00 	.word	0x40000c00
 8009a1c:	40014000 	.word	0x40014000
 8009a20:	40001800 	.word	0x40001800
 8009a24:	00010007 	.word	0x00010007

08009a28 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d109      	bne.n	8009a50 <HAL_TIM_PWM_Start_IT+0x28>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	bf14      	ite	ne
 8009a48:	2301      	movne	r3, #1
 8009a4a:	2300      	moveq	r3, #0
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	e03c      	b.n	8009aca <HAL_TIM_PWM_Start_IT+0xa2>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d109      	bne.n	8009a6a <HAL_TIM_PWM_Start_IT+0x42>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	bf14      	ite	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	2300      	moveq	r3, #0
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	e02f      	b.n	8009aca <HAL_TIM_PWM_Start_IT+0xa2>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b08      	cmp	r3, #8
 8009a6e:	d109      	bne.n	8009a84 <HAL_TIM_PWM_Start_IT+0x5c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	bf14      	ite	ne
 8009a7c:	2301      	movne	r3, #1
 8009a7e:	2300      	moveq	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	e022      	b.n	8009aca <HAL_TIM_PWM_Start_IT+0xa2>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	2b0c      	cmp	r3, #12
 8009a88:	d109      	bne.n	8009a9e <HAL_TIM_PWM_Start_IT+0x76>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	2b01      	cmp	r3, #1
 8009a94:	bf14      	ite	ne
 8009a96:	2301      	movne	r3, #1
 8009a98:	2300      	moveq	r3, #0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	e015      	b.n	8009aca <HAL_TIM_PWM_Start_IT+0xa2>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b10      	cmp	r3, #16
 8009aa2:	d109      	bne.n	8009ab8 <HAL_TIM_PWM_Start_IT+0x90>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	bf14      	ite	ne
 8009ab0:	2301      	movne	r3, #1
 8009ab2:	2300      	moveq	r3, #0
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	e008      	b.n	8009aca <HAL_TIM_PWM_Start_IT+0xa2>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	bf14      	ite	ne
 8009ac4:	2301      	movne	r3, #1
 8009ac6:	2300      	moveq	r3, #0
 8009ac8:	b2db      	uxtb	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	e0dd      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d104      	bne.n	8009ae2 <HAL_TIM_PWM_Start_IT+0xba>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2202      	movs	r2, #2
 8009adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ae0:	e023      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x102>
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2b04      	cmp	r3, #4
 8009ae6:	d104      	bne.n	8009af2 <HAL_TIM_PWM_Start_IT+0xca>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2202      	movs	r2, #2
 8009aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009af0:	e01b      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x102>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b08      	cmp	r3, #8
 8009af6:	d104      	bne.n	8009b02 <HAL_TIM_PWM_Start_IT+0xda>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b00:	e013      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x102>
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	2b0c      	cmp	r3, #12
 8009b06:	d104      	bne.n	8009b12 <HAL_TIM_PWM_Start_IT+0xea>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b10:	e00b      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x102>
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	2b10      	cmp	r3, #16
 8009b16:	d104      	bne.n	8009b22 <HAL_TIM_PWM_Start_IT+0xfa>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b20:	e003      	b.n	8009b2a <HAL_TIM_PWM_Start_IT+0x102>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b0c      	cmp	r3, #12
 8009b2e:	d841      	bhi.n	8009bb4 <HAL_TIM_PWM_Start_IT+0x18c>
 8009b30:	a201      	add	r2, pc, #4	@ (adr r2, 8009b38 <HAL_TIM_PWM_Start_IT+0x110>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b6d 	.word	0x08009b6d
 8009b3c:	08009bb5 	.word	0x08009bb5
 8009b40:	08009bb5 	.word	0x08009bb5
 8009b44:	08009bb5 	.word	0x08009bb5
 8009b48:	08009b7f 	.word	0x08009b7f
 8009b4c:	08009bb5 	.word	0x08009bb5
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009bb5 	.word	0x08009bb5
 8009b58:	08009b91 	.word	0x08009b91
 8009b5c:	08009bb5 	.word	0x08009bb5
 8009b60:	08009bb5 	.word	0x08009bb5
 8009b64:	08009bb5 	.word	0x08009bb5
 8009b68:	08009ba3 	.word	0x08009ba3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0202 	orr.w	r2, r2, #2
 8009b7a:	60da      	str	r2, [r3, #12]
      break;
 8009b7c:	e01d      	b.n	8009bba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68da      	ldr	r2, [r3, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0204 	orr.w	r2, r2, #4
 8009b8c:	60da      	str	r2, [r3, #12]
      break;
 8009b8e:	e014      	b.n	8009bba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0208 	orr.w	r2, r2, #8
 8009b9e:	60da      	str	r2, [r3, #12]
      break;
 8009ba0:	e00b      	b.n	8009bba <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	68da      	ldr	r2, [r3, #12]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f042 0210 	orr.w	r2, r2, #16
 8009bb0:	60da      	str	r2, [r3, #12]
      break;
 8009bb2:	e002      	b.n	8009bba <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8009bb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d165      	bne.n	8009c8c <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	6839      	ldr	r1, [r7, #0]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f001 f91f 	bl	800ae0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a31      	ldr	r2, [pc, #196]	@ (8009c98 <HAL_TIM_PWM_Start_IT+0x270>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d004      	beq.n	8009be2 <HAL_TIM_PWM_Start_IT+0x1ba>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a2f      	ldr	r2, [pc, #188]	@ (8009c9c <HAL_TIM_PWM_Start_IT+0x274>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d101      	bne.n	8009be6 <HAL_TIM_PWM_Start_IT+0x1be>
 8009be2:	2301      	movs	r3, #1
 8009be4:	e000      	b.n	8009be8 <HAL_TIM_PWM_Start_IT+0x1c0>
 8009be6:	2300      	movs	r3, #0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d007      	beq.n	8009bfc <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a25      	ldr	r2, [pc, #148]	@ (8009c98 <HAL_TIM_PWM_Start_IT+0x270>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d022      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c0e:	d01d      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a22      	ldr	r2, [pc, #136]	@ (8009ca0 <HAL_TIM_PWM_Start_IT+0x278>)
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d018      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4a21      	ldr	r2, [pc, #132]	@ (8009ca4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d013      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a1f      	ldr	r2, [pc, #124]	@ (8009ca8 <HAL_TIM_PWM_Start_IT+0x280>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d00e      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1a      	ldr	r2, [pc, #104]	@ (8009c9c <HAL_TIM_PWM_Start_IT+0x274>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d009      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009cac <HAL_TIM_PWM_Start_IT+0x284>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d004      	beq.n	8009c4c <HAL_TIM_PWM_Start_IT+0x224>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a1a      	ldr	r2, [pc, #104]	@ (8009cb0 <HAL_TIM_PWM_Start_IT+0x288>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d115      	bne.n	8009c78 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689a      	ldr	r2, [r3, #8]
 8009c52:	4b18      	ldr	r3, [pc, #96]	@ (8009cb4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b06      	cmp	r3, #6
 8009c5c:	d015      	beq.n	8009c8a <HAL_TIM_PWM_Start_IT+0x262>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c64:	d011      	beq.n	8009c8a <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0201 	orr.w	r2, r2, #1
 8009c74:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c76:	e008      	b.n	8009c8a <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f042 0201 	orr.w	r2, r2, #1
 8009c86:	601a      	str	r2, [r3, #0]
 8009c88:	e000      	b.n	8009c8c <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c8a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3710      	adds	r7, #16
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	bf00      	nop
 8009c98:	40010000 	.word	0x40010000
 8009c9c:	40010400 	.word	0x40010400
 8009ca0:	40000400 	.word	0x40000400
 8009ca4:	40000800 	.word	0x40000800
 8009ca8:	40000c00 	.word	0x40000c00
 8009cac:	40014000 	.word	0x40014000
 8009cb0:	40001800 	.word	0x40001800
 8009cb4:	00010007 	.word	0x00010007

08009cb8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	2b0c      	cmp	r3, #12
 8009cca:	d841      	bhi.n	8009d50 <HAL_TIM_PWM_Stop_IT+0x98>
 8009ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009d09 	.word	0x08009d09
 8009cd8:	08009d51 	.word	0x08009d51
 8009cdc:	08009d51 	.word	0x08009d51
 8009ce0:	08009d51 	.word	0x08009d51
 8009ce4:	08009d1b 	.word	0x08009d1b
 8009ce8:	08009d51 	.word	0x08009d51
 8009cec:	08009d51 	.word	0x08009d51
 8009cf0:	08009d51 	.word	0x08009d51
 8009cf4:	08009d2d 	.word	0x08009d2d
 8009cf8:	08009d51 	.word	0x08009d51
 8009cfc:	08009d51 	.word	0x08009d51
 8009d00:	08009d51 	.word	0x08009d51
 8009d04:	08009d3f 	.word	0x08009d3f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f022 0202 	bic.w	r2, r2, #2
 8009d16:	60da      	str	r2, [r3, #12]
      break;
 8009d18:	e01d      	b.n	8009d56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	68da      	ldr	r2, [r3, #12]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0204 	bic.w	r2, r2, #4
 8009d28:	60da      	str	r2, [r3, #12]
      break;
 8009d2a:	e014      	b.n	8009d56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0208 	bic.w	r2, r2, #8
 8009d3a:	60da      	str	r2, [r3, #12]
      break;
 8009d3c:	e00b      	b.n	8009d56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0210 	bic.w	r2, r2, #16
 8009d4c:	60da      	str	r2, [r3, #12]
      break;
 8009d4e:	e002      	b.n	8009d56 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
      break;
 8009d54:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d171      	bne.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2200      	movs	r2, #0
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 f851 	bl	800ae0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a37      	ldr	r2, [pc, #220]	@ (8009e4c <HAL_TIM_PWM_Stop_IT+0x194>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d004      	beq.n	8009d7e <HAL_TIM_PWM_Stop_IT+0xc6>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a35      	ldr	r2, [pc, #212]	@ (8009e50 <HAL_TIM_PWM_Stop_IT+0x198>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d101      	bne.n	8009d82 <HAL_TIM_PWM_Stop_IT+0xca>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e000      	b.n	8009d84 <HAL_TIM_PWM_Stop_IT+0xcc>
 8009d82:	2300      	movs	r3, #0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d017      	beq.n	8009db8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	6a1a      	ldr	r2, [r3, #32]
 8009d8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d10f      	bne.n	8009db8 <HAL_TIM_PWM_Stop_IT+0x100>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6a1a      	ldr	r2, [r3, #32]
 8009d9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8009da2:	4013      	ands	r3, r2
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d107      	bne.n	8009db8 <HAL_TIM_PWM_Stop_IT+0x100>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009db6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	6a1a      	ldr	r2, [r3, #32]
 8009dbe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10f      	bne.n	8009de8 <HAL_TIM_PWM_Stop_IT+0x130>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	6a1a      	ldr	r2, [r3, #32]
 8009dce:	f240 4344 	movw	r3, #1092	@ 0x444
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d107      	bne.n	8009de8 <HAL_TIM_PWM_Stop_IT+0x130>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f022 0201 	bic.w	r2, r2, #1
 8009de6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d104      	bne.n	8009df8 <HAL_TIM_PWM_Stop_IT+0x140>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009df6:	e023      	b.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	d104      	bne.n	8009e08 <HAL_TIM_PWM_Stop_IT+0x150>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e06:	e01b      	b.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b08      	cmp	r3, #8
 8009e0c:	d104      	bne.n	8009e18 <HAL_TIM_PWM_Stop_IT+0x160>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e16:	e013      	b.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b0c      	cmp	r3, #12
 8009e1c:	d104      	bne.n	8009e28 <HAL_TIM_PWM_Stop_IT+0x170>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e26:	e00b      	b.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d104      	bne.n	8009e38 <HAL_TIM_PWM_Stop_IT+0x180>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e36:	e003      	b.n	8009e40 <HAL_TIM_PWM_Stop_IT+0x188>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	40010000 	.word	0x40010000
 8009e50:	40010400 	.word	0x40010400

08009e54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e64:	2301      	movs	r3, #1
 8009e66:	e08f      	b.n	8009f88 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d106      	bne.n	8009e82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f7fb f931 	bl	80050e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	6899      	ldr	r1, [r3, #8]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	4b3e      	ldr	r3, [pc, #248]	@ (8009f90 <HAL_TIM_Encoder_Init+0x13c>)
 8009e96:	400b      	ands	r3, r1
 8009e98:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f000 fc0d 	bl	800a6c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ecc:	693a      	ldr	r2, [r7, #16]
 8009ece:	4b31      	ldr	r3, [pc, #196]	@ (8009f94 <HAL_TIM_Encoder_Init+0x140>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	689a      	ldr	r2, [r3, #8]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	699b      	ldr	r3, [r3, #24]
 8009edc:	021b      	lsls	r3, r3, #8
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ee6:	693a      	ldr	r2, [r7, #16]
 8009ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8009f98 <HAL_TIM_Encoder_Init+0x144>)
 8009eea:	4013      	ands	r3, r2
 8009eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8009f9c <HAL_TIM_Encoder_Init+0x148>)
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	4313      	orrs	r3, r2
 8009f02:	693a      	ldr	r2, [r7, #16]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	011a      	lsls	r2, r3, #4
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	031b      	lsls	r3, r3, #12
 8009f14:	4313      	orrs	r3, r2
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8009f22:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8009f2a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	695b      	ldr	r3, [r3, #20]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	4313      	orrs	r3, r2
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2201      	movs	r2, #1
 8009f6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2201      	movs	r2, #1
 8009f72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2201      	movs	r2, #1
 8009f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f86:	2300      	movs	r3, #0
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	3718      	adds	r7, #24
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	fffebff8 	.word	0xfffebff8
 8009f94:	fffffcfc 	.word	0xfffffcfc
 8009f98:	fffff3f3 	.word	0xfffff3f3
 8009f9c:	ffff0f0f 	.word	0xffff0f0f

08009fa0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fc8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d110      	bne.n	8009ff2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d102      	bne.n	8009fdc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fd6:	7b7b      	ldrb	r3, [r7, #13]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d001      	beq.n	8009fe0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e069      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2202      	movs	r2, #2
 8009fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ff0:	e031      	b.n	800a056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	2b04      	cmp	r3, #4
 8009ff6:	d110      	bne.n	800a01a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d102      	bne.n	800a004 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ffe:	7b3b      	ldrb	r3, [r7, #12]
 800a000:	2b01      	cmp	r3, #1
 800a002:	d001      	beq.n	800a008 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e055      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2202      	movs	r2, #2
 800a00c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a018:	e01d      	b.n	800a056 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a01a:	7bfb      	ldrb	r3, [r7, #15]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d108      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d105      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a026:	7b7b      	ldrb	r3, [r7, #13]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d102      	bne.n	800a032 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a02c:	7b3b      	ldrb	r3, [r7, #12]
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e03e      	b.n	800a0b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2202      	movs	r2, #2
 800a03a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2202      	movs	r2, #2
 800a042:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2202      	movs	r2, #2
 800a04a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <HAL_TIM_Encoder_Start+0xc4>
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d008      	beq.n	800a074 <HAL_TIM_Encoder_Start+0xd4>
 800a062:	e00f      	b.n	800a084 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2201      	movs	r2, #1
 800a06a:	2100      	movs	r1, #0
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fecd 	bl	800ae0c <TIM_CCxChannelCmd>
      break;
 800a072:	e016      	b.n	800a0a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2201      	movs	r2, #1
 800a07a:	2104      	movs	r1, #4
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fec5 	bl	800ae0c <TIM_CCxChannelCmd>
      break;
 800a082:	e00e      	b.n	800a0a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	2100      	movs	r1, #0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 febd 	bl	800ae0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2201      	movs	r2, #1
 800a098:	2104      	movs	r1, #4
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 feb6 	bl	800ae0c <TIM_CCxChannelCmd>
      break;
 800a0a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f042 0201 	orr.w	r2, r2, #1
 800a0b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	691b      	ldr	r3, [r3, #16]
 800a0d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f003 0302 	and.w	r3, r3, #2
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d020      	beq.n	800a120 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 0302 	and.w	r3, r3, #2
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01b      	beq.n	800a120 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0202 	mvn.w	r2, #2
 800a0f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fac8 	bl	800a69c <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 faba 	bl	800a688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f7f6 ffcf 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f003 0304 	and.w	r3, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	d020      	beq.n	800a16c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01b      	beq.n	800a16c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0204 	mvn.w	r2, #4
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 faa2 	bl	800a69c <HAL_TIM_IC_CaptureCallback>
 800a158:	e005      	b.n	800a166 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 fa94 	bl	800a688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7f6 ffa9 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0308 	and.w	r3, r3, #8
 800a172:	2b00      	cmp	r3, #0
 800a174:	d020      	beq.n	800a1b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f003 0308 	and.w	r3, r3, #8
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d01b      	beq.n	800a1b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0208 	mvn.w	r2, #8
 800a188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2204      	movs	r2, #4
 800a18e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69db      	ldr	r3, [r3, #28]
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa7c 	bl	800a69c <HAL_TIM_IC_CaptureCallback>
 800a1a4:	e005      	b.n	800a1b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 fa6e 	bl	800a688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7f6 ff83 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	f003 0310 	and.w	r3, r3, #16
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d020      	beq.n	800a204 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f003 0310 	and.w	r3, r3, #16
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01b      	beq.n	800a204 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f06f 0210 	mvn.w	r2, #16
 800a1d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2208      	movs	r2, #8
 800a1da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fa56 	bl	800a69c <HAL_TIM_IC_CaptureCallback>
 800a1f0:	e005      	b.n	800a1fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fa48 	bl	800a688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f7f6 ff5d 	bl	80010b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00c      	beq.n	800a228 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f003 0301 	and.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0201 	mvn.w	r2, #1
 800a220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f7fa fdc4 	bl	8004db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d104      	bne.n	800a23c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00c      	beq.n	800a256 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a242:	2b00      	cmp	r3, #0
 800a244:	d007      	beq.n	800a256 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 ff17 	bl	800b084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00c      	beq.n	800a27a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 ff0f 	bl	800b098 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00c      	beq.n	800a29e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	f000 fa09 	bl	800a6b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d00c      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d007      	beq.n	800a2c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f06f 0220 	mvn.w	r2, #32
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fed7 	bl	800b070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2c2:	bf00      	nop
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
	...

0800a2cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	e0ff      	b.n	800a4ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2b14      	cmp	r3, #20
 800a2f6:	f200 80f0 	bhi.w	800a4da <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a355 	.word	0x0800a355
 800a304:	0800a4db 	.word	0x0800a4db
 800a308:	0800a4db 	.word	0x0800a4db
 800a30c:	0800a4db 	.word	0x0800a4db
 800a310:	0800a395 	.word	0x0800a395
 800a314:	0800a4db 	.word	0x0800a4db
 800a318:	0800a4db 	.word	0x0800a4db
 800a31c:	0800a4db 	.word	0x0800a4db
 800a320:	0800a3d7 	.word	0x0800a3d7
 800a324:	0800a4db 	.word	0x0800a4db
 800a328:	0800a4db 	.word	0x0800a4db
 800a32c:	0800a4db 	.word	0x0800a4db
 800a330:	0800a417 	.word	0x0800a417
 800a334:	0800a4db 	.word	0x0800a4db
 800a338:	0800a4db 	.word	0x0800a4db
 800a33c:	0800a4db 	.word	0x0800a4db
 800a340:	0800a459 	.word	0x0800a459
 800a344:	0800a4db 	.word	0x0800a4db
 800a348:	0800a4db 	.word	0x0800a4db
 800a34c:	0800a4db 	.word	0x0800a4db
 800a350:	0800a499 	.word	0x0800a499
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fa5e 	bl	800a81c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	699a      	ldr	r2, [r3, #24]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0208 	orr.w	r2, r2, #8
 800a36e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	699a      	ldr	r2, [r3, #24]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0204 	bic.w	r2, r2, #4
 800a37e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6999      	ldr	r1, [r3, #24]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	691a      	ldr	r2, [r3, #16]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	430a      	orrs	r2, r1
 800a390:	619a      	str	r2, [r3, #24]
      break;
 800a392:	e0a5      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fab0 	bl	800a900 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6999      	ldr	r1, [r3, #24]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	021a      	lsls	r2, r3, #8
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	430a      	orrs	r2, r1
 800a3d2:	619a      	str	r2, [r3, #24]
      break;
 800a3d4:	e084      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68b9      	ldr	r1, [r7, #8]
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f000 fb07 	bl	800a9f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69da      	ldr	r2, [r3, #28]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0208 	orr.w	r2, r2, #8
 800a3f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	69da      	ldr	r2, [r3, #28]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f022 0204 	bic.w	r2, r2, #4
 800a400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	69d9      	ldr	r1, [r3, #28]
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	61da      	str	r2, [r3, #28]
      break;
 800a414:	e064      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fb5d 	bl	800aadc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69d9      	ldr	r1, [r3, #28]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	021a      	lsls	r2, r3, #8
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	430a      	orrs	r2, r1
 800a454:	61da      	str	r2, [r3, #28]
      break;
 800a456:	e043      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	68b9      	ldr	r1, [r7, #8]
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fb94 	bl	800ab8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0208 	orr.w	r2, r2, #8
 800a472:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 0204 	bic.w	r2, r2, #4
 800a482:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	691a      	ldr	r2, [r3, #16]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a496:	e023      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fbc6 	bl	800ac30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691b      	ldr	r3, [r3, #16]
 800a4ce:	021a      	lsls	r2, r3, #8
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	430a      	orrs	r2, r1
 800a4d6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a4d8:	e002      	b.n	800a4e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop

0800a4f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d101      	bne.n	800a510 <HAL_TIM_ConfigClockSource+0x1c>
 800a50c:	2302      	movs	r3, #2
 800a50e:	e0b4      	b.n	800a67a <HAL_TIM_ConfigClockSource+0x186>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2202      	movs	r2, #2
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	4b56      	ldr	r3, [pc, #344]	@ (800a684 <HAL_TIM_ConfigClockSource+0x190>)
 800a52c:	4013      	ands	r3, r2
 800a52e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a536:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a548:	d03e      	beq.n	800a5c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a54a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a54e:	f200 8087 	bhi.w	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a552:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a556:	f000 8086 	beq.w	800a666 <HAL_TIM_ConfigClockSource+0x172>
 800a55a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a55e:	d87f      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a560:	2b70      	cmp	r3, #112	@ 0x70
 800a562:	d01a      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0xa6>
 800a564:	2b70      	cmp	r3, #112	@ 0x70
 800a566:	d87b      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a568:	2b60      	cmp	r3, #96	@ 0x60
 800a56a:	d050      	beq.n	800a60e <HAL_TIM_ConfigClockSource+0x11a>
 800a56c:	2b60      	cmp	r3, #96	@ 0x60
 800a56e:	d877      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a570:	2b50      	cmp	r3, #80	@ 0x50
 800a572:	d03c      	beq.n	800a5ee <HAL_TIM_ConfigClockSource+0xfa>
 800a574:	2b50      	cmp	r3, #80	@ 0x50
 800a576:	d873      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a578:	2b40      	cmp	r3, #64	@ 0x40
 800a57a:	d058      	beq.n	800a62e <HAL_TIM_ConfigClockSource+0x13a>
 800a57c:	2b40      	cmp	r3, #64	@ 0x40
 800a57e:	d86f      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a580:	2b30      	cmp	r3, #48	@ 0x30
 800a582:	d064      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0x15a>
 800a584:	2b30      	cmp	r3, #48	@ 0x30
 800a586:	d86b      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a588:	2b20      	cmp	r3, #32
 800a58a:	d060      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0x15a>
 800a58c:	2b20      	cmp	r3, #32
 800a58e:	d867      	bhi.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d05c      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0x15a>
 800a594:	2b10      	cmp	r3, #16
 800a596:	d05a      	beq.n	800a64e <HAL_TIM_ConfigClockSource+0x15a>
 800a598:	e062      	b.n	800a660 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5aa:	f000 fc0f 	bl	800adcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a5bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	68ba      	ldr	r2, [r7, #8]
 800a5c4:	609a      	str	r2, [r3, #8]
      break;
 800a5c6:	e04f      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5d8:	f000 fbf8 	bl	800adcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a5ea:	609a      	str	r2, [r3, #8]
      break;
 800a5ec:	e03c      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	f000 fb6c 	bl	800acd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2150      	movs	r1, #80	@ 0x50
 800a606:	4618      	mov	r0, r3
 800a608:	f000 fbc5 	bl	800ad96 <TIM_ITRx_SetConfig>
      break;
 800a60c:	e02c      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a61a:	461a      	mov	r2, r3
 800a61c:	f000 fb8b 	bl	800ad36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	2160      	movs	r1, #96	@ 0x60
 800a626:	4618      	mov	r0, r3
 800a628:	f000 fbb5 	bl	800ad96 <TIM_ITRx_SetConfig>
      break;
 800a62c:	e01c      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a63a:	461a      	mov	r2, r3
 800a63c:	f000 fb4c 	bl	800acd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	2140      	movs	r1, #64	@ 0x40
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fba5 	bl	800ad96 <TIM_ITRx_SetConfig>
      break;
 800a64c:	e00c      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681a      	ldr	r2, [r3, #0]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4619      	mov	r1, r3
 800a658:	4610      	mov	r0, r2
 800a65a:	f000 fb9c 	bl	800ad96 <TIM_ITRx_SetConfig>
      break;
 800a65e:	e003      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a660:	2301      	movs	r3, #1
 800a662:	73fb      	strb	r3, [r7, #15]
      break;
 800a664:	e000      	b.n	800a668 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a666:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2200      	movs	r2, #0
 800a674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a678:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	fffeff88 	.word	0xfffeff88

0800a688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4a46      	ldr	r2, [pc, #280]	@ (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d013      	beq.n	800a704 <TIM_Base_SetConfig+0x40>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6e2:	d00f      	beq.n	800a704 <TIM_Base_SetConfig+0x40>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	4a43      	ldr	r2, [pc, #268]	@ (800a7f4 <TIM_Base_SetConfig+0x130>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d00b      	beq.n	800a704 <TIM_Base_SetConfig+0x40>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	4a42      	ldr	r2, [pc, #264]	@ (800a7f8 <TIM_Base_SetConfig+0x134>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d007      	beq.n	800a704 <TIM_Base_SetConfig+0x40>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	4a41      	ldr	r2, [pc, #260]	@ (800a7fc <TIM_Base_SetConfig+0x138>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d003      	beq.n	800a704 <TIM_Base_SetConfig+0x40>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	4a40      	ldr	r2, [pc, #256]	@ (800a800 <TIM_Base_SetConfig+0x13c>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d108      	bne.n	800a716 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a70a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	4313      	orrs	r3, r2
 800a714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4a35      	ldr	r2, [pc, #212]	@ (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d02b      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a724:	d027      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	4a32      	ldr	r2, [pc, #200]	@ (800a7f4 <TIM_Base_SetConfig+0x130>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d023      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	4a31      	ldr	r2, [pc, #196]	@ (800a7f8 <TIM_Base_SetConfig+0x134>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d01f      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a30      	ldr	r2, [pc, #192]	@ (800a7fc <TIM_Base_SetConfig+0x138>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d01b      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a2f      	ldr	r2, [pc, #188]	@ (800a800 <TIM_Base_SetConfig+0x13c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d017      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a2e      	ldr	r2, [pc, #184]	@ (800a804 <TIM_Base_SetConfig+0x140>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d013      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a2d      	ldr	r2, [pc, #180]	@ (800a808 <TIM_Base_SetConfig+0x144>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d00f      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4a2c      	ldr	r2, [pc, #176]	@ (800a80c <TIM_Base_SetConfig+0x148>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d00b      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	4a2b      	ldr	r2, [pc, #172]	@ (800a810 <TIM_Base_SetConfig+0x14c>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d007      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	4a2a      	ldr	r2, [pc, #168]	@ (800a814 <TIM_Base_SetConfig+0x150>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d003      	beq.n	800a776 <TIM_Base_SetConfig+0xb2>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4a29      	ldr	r2, [pc, #164]	@ (800a818 <TIM_Base_SetConfig+0x154>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d108      	bne.n	800a788 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a77c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4313      	orrs	r3, r2
 800a786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a10      	ldr	r2, [pc, #64]	@ (800a7f0 <TIM_Base_SetConfig+0x12c>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d003      	beq.n	800a7bc <TIM_Base_SetConfig+0xf8>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	4a12      	ldr	r2, [pc, #72]	@ (800a800 <TIM_Base_SetConfig+0x13c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d103      	bne.n	800a7c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	691a      	ldr	r2, [r3, #16]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	f003 0301 	and.w	r3, r3, #1
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d105      	bne.n	800a7e2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	f023 0201 	bic.w	r2, r3, #1
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	611a      	str	r2, [r3, #16]
  }
}
 800a7e2:	bf00      	nop
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
 800a7ee:	bf00      	nop
 800a7f0:	40010000 	.word	0x40010000
 800a7f4:	40000400 	.word	0x40000400
 800a7f8:	40000800 	.word	0x40000800
 800a7fc:	40000c00 	.word	0x40000c00
 800a800:	40010400 	.word	0x40010400
 800a804:	40014000 	.word	0x40014000
 800a808:	40014400 	.word	0x40014400
 800a80c:	40014800 	.word	0x40014800
 800a810:	40001800 	.word	0x40001800
 800a814:	40001c00 	.word	0x40001c00
 800a818:	40002000 	.word	0x40002000

0800a81c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6a1b      	ldr	r3, [r3, #32]
 800a830:	f023 0201 	bic.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a844:	68fa      	ldr	r2, [r7, #12]
 800a846:	4b2b      	ldr	r3, [pc, #172]	@ (800a8f4 <TIM_OC1_SetConfig+0xd8>)
 800a848:	4013      	ands	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68fa      	ldr	r2, [r7, #12]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f023 0302 	bic.w	r3, r3, #2
 800a864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a21      	ldr	r2, [pc, #132]	@ (800a8f8 <TIM_OC1_SetConfig+0xdc>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_OC1_SetConfig+0x64>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a20      	ldr	r2, [pc, #128]	@ (800a8fc <TIM_OC1_SetConfig+0xe0>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d10c      	bne.n	800a89a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f023 0308 	bic.w	r3, r3, #8
 800a886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f023 0304 	bic.w	r3, r3, #4
 800a898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a16      	ldr	r2, [pc, #88]	@ (800a8f8 <TIM_OC1_SetConfig+0xdc>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d003      	beq.n	800a8aa <TIM_OC1_SetConfig+0x8e>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	4a15      	ldr	r2, [pc, #84]	@ (800a8fc <TIM_OC1_SetConfig+0xe0>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d111      	bne.n	800a8ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	693a      	ldr	r2, [r7, #16]
 800a8ca:	4313      	orrs	r3, r2
 800a8cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	685a      	ldr	r2, [r3, #4]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	697a      	ldr	r2, [r7, #20]
 800a8e6:	621a      	str	r2, [r3, #32]
}
 800a8e8:	bf00      	nop
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	fffeff8f 	.word	0xfffeff8f
 800a8f8:	40010000 	.word	0x40010000
 800a8fc:	40010400 	.word	0x40010400

0800a900 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a900:	b480      	push	{r7}
 800a902:	b087      	sub	sp, #28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6a1b      	ldr	r3, [r3, #32]
 800a90e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6a1b      	ldr	r3, [r3, #32]
 800a914:	f023 0210 	bic.w	r2, r3, #16
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	699b      	ldr	r3, [r3, #24]
 800a926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4b2e      	ldr	r3, [pc, #184]	@ (800a9e4 <TIM_OC2_SetConfig+0xe4>)
 800a92c:	4013      	ands	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	021b      	lsls	r3, r3, #8
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	4313      	orrs	r3, r2
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f023 0320 	bic.w	r3, r3, #32
 800a94a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	011b      	lsls	r3, r3, #4
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	4313      	orrs	r3, r2
 800a956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a23      	ldr	r2, [pc, #140]	@ (800a9e8 <TIM_OC2_SetConfig+0xe8>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_OC2_SetConfig+0x68>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a22      	ldr	r2, [pc, #136]	@ (800a9ec <TIM_OC2_SetConfig+0xec>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d10d      	bne.n	800a984 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	4313      	orrs	r3, r2
 800a97a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a982:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	4a18      	ldr	r2, [pc, #96]	@ (800a9e8 <TIM_OC2_SetConfig+0xe8>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d003      	beq.n	800a994 <TIM_OC2_SetConfig+0x94>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a17      	ldr	r2, [pc, #92]	@ (800a9ec <TIM_OC2_SetConfig+0xec>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d113      	bne.n	800a9bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a99a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	693a      	ldr	r2, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685a      	ldr	r2, [r3, #4]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	feff8fff 	.word	0xfeff8fff
 800a9e8:	40010000 	.word	0x40010000
 800a9ec:	40010400 	.word	0x40010400

0800a9f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a1b      	ldr	r3, [r3, #32]
 800a9fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a1b      	ldr	r3, [r3, #32]
 800aa04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4b2d      	ldr	r3, [pc, #180]	@ (800aad0 <TIM_OC3_SetConfig+0xe0>)
 800aa1c:	4013      	ands	r3, r2
 800aa1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0303 	bic.w	r3, r3, #3
 800aa26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aa38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	021b      	lsls	r3, r3, #8
 800aa40:	697a      	ldr	r2, [r7, #20]
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a22      	ldr	r2, [pc, #136]	@ (800aad4 <TIM_OC3_SetConfig+0xe4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d003      	beq.n	800aa56 <TIM_OC3_SetConfig+0x66>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a21      	ldr	r2, [pc, #132]	@ (800aad8 <TIM_OC3_SetConfig+0xe8>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d10d      	bne.n	800aa72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	021b      	lsls	r3, r3, #8
 800aa64:	697a      	ldr	r2, [r7, #20]
 800aa66:	4313      	orrs	r3, r2
 800aa68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a17      	ldr	r2, [pc, #92]	@ (800aad4 <TIM_OC3_SetConfig+0xe4>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d003      	beq.n	800aa82 <TIM_OC3_SetConfig+0x92>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a16      	ldr	r2, [pc, #88]	@ (800aad8 <TIM_OC3_SetConfig+0xe8>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d113      	bne.n	800aaaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800aa90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	011b      	lsls	r3, r3, #4
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	011b      	lsls	r3, r3, #4
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	693a      	ldr	r2, [r7, #16]
 800aaae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	621a      	str	r2, [r3, #32]
}
 800aac4:	bf00      	nop
 800aac6:	371c      	adds	r7, #28
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr
 800aad0:	fffeff8f 	.word	0xfffeff8f
 800aad4:	40010000 	.word	0x40010000
 800aad8:	40010400 	.word	0x40010400

0800aadc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aadc:	b480      	push	{r7}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	6a1b      	ldr	r3, [r3, #32]
 800aaea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	69db      	ldr	r3, [r3, #28]
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4b1e      	ldr	r3, [pc, #120]	@ (800ab80 <TIM_OC4_SetConfig+0xa4>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	021b      	lsls	r3, r3, #8
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ab26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	031b      	lsls	r3, r3, #12
 800ab2e:	693a      	ldr	r2, [r7, #16]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	4a13      	ldr	r2, [pc, #76]	@ (800ab84 <TIM_OC4_SetConfig+0xa8>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d003      	beq.n	800ab44 <TIM_OC4_SetConfig+0x68>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	4a12      	ldr	r2, [pc, #72]	@ (800ab88 <TIM_OC4_SetConfig+0xac>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d109      	bne.n	800ab58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	695b      	ldr	r3, [r3, #20]
 800ab50:	019b      	lsls	r3, r3, #6
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	4313      	orrs	r3, r2
 800ab56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	685a      	ldr	r2, [r3, #4]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	621a      	str	r2, [r3, #32]
}
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	feff8fff 	.word	0xfeff8fff
 800ab84:	40010000 	.word	0x40010000
 800ab88:	40010400 	.word	0x40010400

0800ab8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b087      	sub	sp, #28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
 800ab94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a1b      	ldr	r3, [r3, #32]
 800ab9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	4b1b      	ldr	r3, [pc, #108]	@ (800ac24 <TIM_OC5_SetConfig+0x98>)
 800abb8:	4013      	ands	r3, r2
 800abba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800abcc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	041b      	lsls	r3, r3, #16
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a12      	ldr	r2, [pc, #72]	@ (800ac28 <TIM_OC5_SetConfig+0x9c>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d003      	beq.n	800abea <TIM_OC5_SetConfig+0x5e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a11      	ldr	r2, [pc, #68]	@ (800ac2c <TIM_OC5_SetConfig+0xa0>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d109      	bne.n	800abfe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800abf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	021b      	lsls	r3, r3, #8
 800abf8:	697a      	ldr	r2, [r7, #20]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685a      	ldr	r2, [r3, #4]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	621a      	str	r2, [r3, #32]
}
 800ac18:	bf00      	nop
 800ac1a:	371c      	adds	r7, #28
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr
 800ac24:	fffeff8f 	.word	0xfffeff8f
 800ac28:	40010000 	.word	0x40010000
 800ac2c:	40010400 	.word	0x40010400

0800ac30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b087      	sub	sp, #28
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a1b      	ldr	r3, [r3, #32]
 800ac44:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4b1c      	ldr	r3, [pc, #112]	@ (800accc <TIM_OC6_SetConfig+0x9c>)
 800ac5c:	4013      	ands	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	021b      	lsls	r3, r3, #8
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4313      	orrs	r3, r2
 800ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ac72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	051b      	lsls	r3, r3, #20
 800ac7a:	693a      	ldr	r2, [r7, #16]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a13      	ldr	r2, [pc, #76]	@ (800acd0 <TIM_OC6_SetConfig+0xa0>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_OC6_SetConfig+0x60>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a12      	ldr	r2, [pc, #72]	@ (800acd4 <TIM_OC6_SetConfig+0xa4>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d109      	bne.n	800aca4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	695b      	ldr	r3, [r3, #20]
 800ac9c:	029b      	lsls	r3, r3, #10
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	4313      	orrs	r3, r2
 800aca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	693a      	ldr	r2, [r7, #16]
 800acbc:	621a      	str	r2, [r3, #32]
}
 800acbe:	bf00      	nop
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	feff8fff 	.word	0xfeff8fff
 800acd0:	40010000 	.word	0x40010000
 800acd4:	40010400 	.word	0x40010400

0800acd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800acd8:	b480      	push	{r7}
 800acda:	b087      	sub	sp, #28
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	6a1b      	ldr	r3, [r3, #32]
 800ace8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	f023 0201 	bic.w	r2, r3, #1
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	699b      	ldr	r3, [r3, #24]
 800acfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ad02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	011b      	lsls	r3, r3, #4
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f023 030a 	bic.w	r3, r3, #10
 800ad14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	621a      	str	r2, [r3, #32]
}
 800ad2a:	bf00      	nop
 800ad2c:	371c      	adds	r7, #28
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr

0800ad36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad36:	b480      	push	{r7}
 800ad38:	b087      	sub	sp, #28
 800ad3a:	af00      	add	r7, sp, #0
 800ad3c:	60f8      	str	r0, [r7, #12]
 800ad3e:	60b9      	str	r1, [r7, #8]
 800ad40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a1b      	ldr	r3, [r3, #32]
 800ad46:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6a1b      	ldr	r3, [r3, #32]
 800ad4c:	f023 0210 	bic.w	r2, r3, #16
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ad60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	031b      	lsls	r3, r3, #12
 800ad66:	693a      	ldr	r2, [r7, #16]
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ad72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	011b      	lsls	r3, r3, #4
 800ad78:	697a      	ldr	r2, [r7, #20]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	697a      	ldr	r2, [r7, #20]
 800ad88:	621a      	str	r2, [r3, #32]
}
 800ad8a:	bf00      	nop
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800adae:	683a      	ldr	r2, [r7, #0]
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	4313      	orrs	r3, r2
 800adb4:	f043 0307 	orr.w	r3, r3, #7
 800adb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	609a      	str	r2, [r3, #8]
}
 800adc0:	bf00      	nop
 800adc2:	3714      	adds	r7, #20
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ade6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	021a      	lsls	r2, r3, #8
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	431a      	orrs	r2, r3
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	4313      	orrs	r3, r2
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	697a      	ldr	r2, [r7, #20]
 800adfe:	609a      	str	r2, [r3, #8]
}
 800ae00:	bf00      	nop
 800ae02:	371c      	adds	r7, #28
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60f8      	str	r0, [r7, #12]
 800ae14:	60b9      	str	r1, [r7, #8]
 800ae16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	f003 031f 	and.w	r3, r3, #31
 800ae1e:	2201      	movs	r2, #1
 800ae20:	fa02 f303 	lsl.w	r3, r2, r3
 800ae24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1a      	ldr	r2, [r3, #32]
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	43db      	mvns	r3, r3
 800ae2e:	401a      	ands	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6a1a      	ldr	r2, [r3, #32]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f003 031f 	and.w	r3, r3, #31
 800ae3e:	6879      	ldr	r1, [r7, #4]
 800ae40:	fa01 f303 	lsl.w	r3, r1, r3
 800ae44:	431a      	orrs	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	621a      	str	r2, [r3, #32]
}
 800ae4a:	bf00      	nop
 800ae4c:	371c      	adds	r7, #28
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
	...

0800ae58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d101      	bne.n	800ae70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae6c:	2302      	movs	r3, #2
 800ae6e:	e06d      	b.n	800af4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a30      	ldr	r2, [pc, #192]	@ (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d004      	beq.n	800aea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a2f      	ldr	r2, [pc, #188]	@ (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d108      	bne.n	800aeb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aeaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	4a20      	ldr	r2, [pc, #128]	@ (800af58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d022      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aee2:	d01d      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4a1d      	ldr	r2, [pc, #116]	@ (800af60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d018      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	4a1c      	ldr	r2, [pc, #112]	@ (800af64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d013      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a1a      	ldr	r2, [pc, #104]	@ (800af68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00e      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4a15      	ldr	r2, [pc, #84]	@ (800af5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d009      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a16      	ldr	r2, [pc, #88]	@ (800af6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d004      	beq.n	800af20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4a15      	ldr	r2, [pc, #84]	@ (800af70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d10c      	bne.n	800af3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	68ba      	ldr	r2, [r7, #8]
 800af2e:	4313      	orrs	r3, r2
 800af30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2201      	movs	r2, #1
 800af3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr
 800af58:	40010000 	.word	0x40010000
 800af5c:	40010400 	.word	0x40010400
 800af60:	40000400 	.word	0x40000400
 800af64:	40000800 	.word	0x40000800
 800af68:	40000c00 	.word	0x40000c00
 800af6c:	40014000 	.word	0x40014000
 800af70:	40001800 	.word	0x40001800

0800af74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d101      	bne.n	800af90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af8c:	2302      	movs	r3, #2
 800af8e:	e065      	b.n	800b05c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	691b      	ldr	r3, [r3, #16]
 800afda:	4313      	orrs	r3, r2
 800afdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	4313      	orrs	r3, r2
 800afea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	699b      	ldr	r3, [r3, #24]
 800b004:	041b      	lsls	r3, r3, #16
 800b006:	4313      	orrs	r3, r2
 800b008:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	4a16      	ldr	r2, [pc, #88]	@ (800b068 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d004      	beq.n	800b01e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4a14      	ldr	r2, [pc, #80]	@ (800b06c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d115      	bne.n	800b04a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b028:	051b      	lsls	r3, r3, #20
 800b02a:	4313      	orrs	r3, r2
 800b02c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	68fa      	ldr	r2, [r7, #12]
 800b050:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3714      	adds	r7, #20
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	40010000 	.word	0x40010000
 800b06c:	40010400 	.word	0x40010400

0800b070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b084:	b480      	push	{r7}
 800b086:	b083      	sub	sp, #12
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b08c:	bf00      	nop
 800b08e:	370c      	adds	r7, #12
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b0a0:	bf00      	nop
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d101      	bne.n	800b0be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e040      	b.n	800b140 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d106      	bne.n	800b0d4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7fa f96a 	bl	80053a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2224      	movs	r2, #36	@ 0x24
 800b0d8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0201 	bic.w	r2, r2, #1
 800b0e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fe56 	bl	800bda4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fbef 	bl	800b8dc <UART_SetConfig>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b01      	cmp	r3, #1
 800b102:	d101      	bne.n	800b108 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e01b      	b.n	800b140 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	685a      	ldr	r2, [r3, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b116:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	689a      	ldr	r2, [r3, #8]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b126:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f042 0201 	orr.w	r2, r2, #1
 800b136:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fed5 	bl	800bee8 <UART_CheckIdleState>
 800b13e:	4603      	mov	r3, r0
}
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08a      	sub	sp, #40	@ 0x28
 800b14c:	af02      	add	r7, sp, #8
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b15c:	2b20      	cmp	r3, #32
 800b15e:	d177      	bne.n	800b250 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d002      	beq.n	800b16c <HAL_UART_Transmit+0x24>
 800b166:	88fb      	ldrh	r3, [r7, #6]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e070      	b.n	800b252 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2200      	movs	r2, #0
 800b174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2221      	movs	r2, #33	@ 0x21
 800b17c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b17e:	f7fa fdd1 	bl	8005d24 <HAL_GetTick>
 800b182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	88fa      	ldrh	r2, [r7, #6]
 800b188:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	88fa      	ldrh	r2, [r7, #6]
 800b190:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b19c:	d108      	bne.n	800b1b0 <HAL_UART_Transmit+0x68>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d104      	bne.n	800b1b0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	61bb      	str	r3, [r7, #24]
 800b1ae:	e003      	b.n	800b1b8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b1b8:	e02f      	b.n	800b21a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2180      	movs	r1, #128	@ 0x80
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f000 fee6 	bl	800bf96 <UART_WaitOnFlagUntilTimeout>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d004      	beq.n	800b1da <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2220      	movs	r2, #32
 800b1d4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800b1d6:	2303      	movs	r3, #3
 800b1d8:	e03b      	b.n	800b252 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d10b      	bne.n	800b1f8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	3302      	adds	r3, #2
 800b1f4:	61bb      	str	r3, [r7, #24]
 800b1f6:	e007      	b.n	800b208 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	781a      	ldrb	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	3301      	adds	r3, #1
 800b206:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b20e:	b29b      	uxth	r3, r3
 800b210:	3b01      	subs	r3, #1
 800b212:	b29a      	uxth	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800b220:	b29b      	uxth	r3, r3
 800b222:	2b00      	cmp	r3, #0
 800b224:	d1c9      	bne.n	800b1ba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	2200      	movs	r2, #0
 800b22e:	2140      	movs	r1, #64	@ 0x40
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f000 feb0 	bl	800bf96 <UART_WaitOnFlagUntilTimeout>
 800b236:	4603      	mov	r3, r0
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d004      	beq.n	800b246 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2220      	movs	r2, #32
 800b240:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e005      	b.n	800b252 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2220      	movs	r2, #32
 800b24a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	e000      	b.n	800b252 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800b250:	2302      	movs	r3, #2
  }
}
 800b252:	4618      	mov	r0, r3
 800b254:	3720      	adds	r7, #32
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}

0800b25a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b25a:	b580      	push	{r7, lr}
 800b25c:	b08a      	sub	sp, #40	@ 0x28
 800b25e:	af00      	add	r7, sp, #0
 800b260:	60f8      	str	r0, [r7, #12]
 800b262:	60b9      	str	r1, [r7, #8]
 800b264:	4613      	mov	r3, r2
 800b266:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b26e:	2b20      	cmp	r3, #32
 800b270:	d132      	bne.n	800b2d8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <HAL_UART_Receive_DMA+0x24>
 800b278:	88fb      	ldrh	r3, [r7, #6]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e02b      	b.n	800b2da <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	e853 3f00 	ldrex	r3, [r3]
 800b2a2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b2aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b4:	623b      	str	r3, [r7, #32]
 800b2b6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b8:	69f9      	ldr	r1, [r7, #28]
 800b2ba:	6a3a      	ldr	r2, [r7, #32]
 800b2bc:	e841 2300 	strex	r3, r2, [r1]
 800b2c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1e6      	bne.n	800b296 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b2c8:	88fb      	ldrh	r3, [r7, #6]
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f000 fece 	bl	800c070 <UART_Start_Receive_DMA>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	e000      	b.n	800b2da <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800b2d8:	2302      	movs	r3, #2
  }
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3728      	adds	r7, #40	@ 0x28
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b0ba      	sub	sp, #232	@ 0xe8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b30a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b30e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b312:	4013      	ands	r3, r2
 800b314:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d115      	bne.n	800b34c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b324:	f003 0320 	and.w	r3, r3, #32
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d00f      	beq.n	800b34c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b32c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b330:	f003 0320 	and.w	r3, r3, #32
 800b334:	2b00      	cmp	r3, #0
 800b336:	d009      	beq.n	800b34c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f000 8297 	beq.w	800b870 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	4798      	blx	r3
      }
      return;
 800b34a:	e291      	b.n	800b870 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b34c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 8117 	beq.w	800b584 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d106      	bne.n	800b370 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b366:	4b85      	ldr	r3, [pc, #532]	@ (800b57c <HAL_UART_IRQHandler+0x298>)
 800b368:	4013      	ands	r3, r2
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	f000 810a 	beq.w	800b584 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d011      	beq.n	800b3a0 <HAL_UART_IRQHandler+0xbc>
 800b37c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b384:	2b00      	cmp	r3, #0
 800b386:	d00b      	beq.n	800b3a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2201      	movs	r2, #1
 800b38e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b396:	f043 0201 	orr.w	r2, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d011      	beq.n	800b3d0 <HAL_UART_IRQHandler+0xec>
 800b3ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3b0:	f003 0301 	and.w	r3, r3, #1
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00b      	beq.n	800b3d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	2202      	movs	r2, #2
 800b3be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3c6:	f043 0204 	orr.w	r2, r3, #4
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b3d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d011      	beq.n	800b400 <HAL_UART_IRQHandler+0x11c>
 800b3dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3e0:	f003 0301 	and.w	r3, r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2204      	movs	r2, #4
 800b3ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3f6:	f043 0202 	orr.w	r2, r3, #2
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d017      	beq.n	800b43c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b40c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b410:	f003 0320 	and.w	r3, r3, #32
 800b414:	2b00      	cmp	r3, #0
 800b416:	d105      	bne.n	800b424 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b41c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00b      	beq.n	800b43c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2208      	movs	r2, #8
 800b42a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b432:	f043 0208 	orr.w	r2, r3, #8
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b444:	2b00      	cmp	r3, #0
 800b446:	d012      	beq.n	800b46e <HAL_UART_IRQHandler+0x18a>
 800b448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b44c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d00c      	beq.n	800b46e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b45c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b464:	f043 0220 	orr.w	r2, r3, #32
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b474:	2b00      	cmp	r3, #0
 800b476:	f000 81fd 	beq.w	800b874 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b47a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b47e:	f003 0320 	and.w	r3, r3, #32
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00d      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b48a:	f003 0320 	and.w	r3, r3, #32
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b496:	2b00      	cmp	r3, #0
 800b498:	d003      	beq.n	800b4a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4b6:	2b40      	cmp	r3, #64	@ 0x40
 800b4b8:	d005      	beq.n	800b4c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b4ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b4be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d04f      	beq.n	800b566 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fe98 	bl	800c1fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4d6:	2b40      	cmp	r3, #64	@ 0x40
 800b4d8:	d141      	bne.n	800b55e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	3308      	adds	r3, #8
 800b4e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3308      	adds	r3, #8
 800b502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b506:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b50a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1d9      	bne.n	800b4da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d013      	beq.n	800b556 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b532:	4a13      	ldr	r2, [pc, #76]	@ (800b580 <HAL_UART_IRQHandler+0x29c>)
 800b534:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fa fe82 	bl	8006244 <HAL_DMA_Abort_IT>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d017      	beq.n	800b576 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b54a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b54c:	687a      	ldr	r2, [r7, #4]
 800b54e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b554:	e00f      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 f9aa 	bl	800b8b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b55c:	e00b      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f9a6 	bl	800b8b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b564:	e007      	b.n	800b576 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f9a2 	bl	800b8b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b574:	e17e      	b.n	800b874 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b576:	bf00      	nop
    return;
 800b578:	e17c      	b.n	800b874 <HAL_UART_IRQHandler+0x590>
 800b57a:	bf00      	nop
 800b57c:	04000120 	.word	0x04000120
 800b580:	0800c4a9 	.word	0x0800c4a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b588:	2b01      	cmp	r3, #1
 800b58a:	f040 814c 	bne.w	800b826 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b592:	f003 0310 	and.w	r3, r3, #16
 800b596:	2b00      	cmp	r3, #0
 800b598:	f000 8145 	beq.w	800b826 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 813e 	beq.w	800b826 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2210      	movs	r2, #16
 800b5b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5bc:	2b40      	cmp	r3, #64	@ 0x40
 800b5be:	f040 80b6 	bne.w	800b72e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f000 8150 	beq.w	800b878 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b5de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	f080 8148 	bcs.w	800b878 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b5ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5fc:	f000 8086 	beq.w	800b70c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b608:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b60c:	e853 3f00 	ldrex	r3, [r3]
 800b610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b614:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b61c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	461a      	mov	r2, r3
 800b626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b62a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b62e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b632:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b646:	2b00      	cmp	r3, #0
 800b648:	d1da      	bne.n	800b600 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	3308      	adds	r3, #8
 800b650:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b654:	e853 3f00 	ldrex	r3, [r3]
 800b658:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b65a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b65c:	f023 0301 	bic.w	r3, r3, #1
 800b660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	3308      	adds	r3, #8
 800b66a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b66e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b672:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b674:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b676:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b67a:	e841 2300 	strex	r3, r2, [r1]
 800b67e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b682:	2b00      	cmp	r3, #0
 800b684:	d1e1      	bne.n	800b64a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	3308      	adds	r3, #8
 800b68c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b68e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b690:	e853 3f00 	ldrex	r3, [r3]
 800b694:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b69c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b6aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b6ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b6b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b6b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1e3      	bne.n	800b686 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6d4:	e853 3f00 	ldrex	r3, [r3]
 800b6d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b6da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b6dc:	f023 0310 	bic.w	r3, r3, #16
 800b6e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b6ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b6f0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b6f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b6f6:	e841 2300 	strex	r3, r2, [r1]
 800b6fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1e4      	bne.n	800b6cc <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b706:	4618      	mov	r0, r3
 800b708:	f7fa fd2c 	bl	8006164 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b71e:	b29b      	uxth	r3, r3
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	b29b      	uxth	r3, r3
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f000 f8cc 	bl	800b8c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b72c:	e0a4      	b.n	800b878 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b748:	b29b      	uxth	r3, r3
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f000 8096 	beq.w	800b87c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b750:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b754:	2b00      	cmp	r3, #0
 800b756:	f000 8091 	beq.w	800b87c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b762:	e853 3f00 	ldrex	r3, [r3]
 800b766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b76a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b76e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	461a      	mov	r2, r3
 800b778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b77c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b77e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b780:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b784:	e841 2300 	strex	r3, r2, [r1]
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1e4      	bne.n	800b75a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3308      	adds	r3, #8
 800b796:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79a:	e853 3f00 	ldrex	r3, [r3]
 800b79e:	623b      	str	r3, [r7, #32]
   return(result);
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	f023 0301 	bic.w	r3, r3, #1
 800b7a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3308      	adds	r3, #8
 800b7b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b7b4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d1e3      	bne.n	800b790 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2220      	movs	r2, #32
 800b7cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	e853 3f00 	ldrex	r3, [r3]
 800b7e8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f023 0310 	bic.w	r3, r3, #16
 800b7f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	461a      	mov	r2, r3
 800b7fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b7fe:	61fb      	str	r3, [r7, #28]
 800b800:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b802:	69b9      	ldr	r1, [r7, #24]
 800b804:	69fa      	ldr	r2, [r7, #28]
 800b806:	e841 2300 	strex	r3, r2, [r1]
 800b80a:	617b      	str	r3, [r7, #20]
   return(result);
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1e4      	bne.n	800b7dc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2202      	movs	r2, #2
 800b816:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b81c:	4619      	mov	r1, r3
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f850 	bl	800b8c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b824:	e02a      	b.n	800b87c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b82a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d00e      	beq.n	800b850 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d008      	beq.n	800b850 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b842:	2b00      	cmp	r3, #0
 800b844:	d01c      	beq.n	800b880 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	4798      	blx	r3
    }
    return;
 800b84e:	e017      	b.n	800b880 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d012      	beq.n	800b882 <HAL_UART_IRQHandler+0x59e>
 800b85c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00c      	beq.n	800b882 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fe33 	bl	800c4d4 <UART_EndTransmit_IT>
    return;
 800b86e:	e008      	b.n	800b882 <HAL_UART_IRQHandler+0x59e>
      return;
 800b870:	bf00      	nop
 800b872:	e006      	b.n	800b882 <HAL_UART_IRQHandler+0x59e>
    return;
 800b874:	bf00      	nop
 800b876:	e004      	b.n	800b882 <HAL_UART_IRQHandler+0x59e>
      return;
 800b878:	bf00      	nop
 800b87a:	e002      	b.n	800b882 <HAL_UART_IRQHandler+0x59e>
      return;
 800b87c:	bf00      	nop
 800b87e:	e000      	b.n	800b882 <HAL_UART_IRQHandler+0x59e>
    return;
 800b880:	bf00      	nop
  }

}
 800b882:	37e8      	adds	r7, #232	@ 0xe8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8d0:	bf00      	nop
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	689a      	ldr	r2, [r3, #8]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	691b      	ldr	r3, [r3, #16]
 800b8f0:	431a      	orrs	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	431a      	orrs	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	4ba6      	ldr	r3, [pc, #664]	@ (800bba0 <UART_SetConfig+0x2c4>)
 800b908:	4013      	ands	r3, r2
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	6812      	ldr	r2, [r2, #0]
 800b90e:	6979      	ldr	r1, [r7, #20]
 800b910:	430b      	orrs	r3, r1
 800b912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	68da      	ldr	r2, [r3, #12]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	697a      	ldr	r2, [r7, #20]
 800b936:	4313      	orrs	r3, r2
 800b938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	697a      	ldr	r2, [r7, #20]
 800b94a:	430a      	orrs	r2, r1
 800b94c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a94      	ldr	r2, [pc, #592]	@ (800bba4 <UART_SetConfig+0x2c8>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d120      	bne.n	800b99a <UART_SetConfig+0xbe>
 800b958:	4b93      	ldr	r3, [pc, #588]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800b95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b95e:	f003 0303 	and.w	r3, r3, #3
 800b962:	2b03      	cmp	r3, #3
 800b964:	d816      	bhi.n	800b994 <UART_SetConfig+0xb8>
 800b966:	a201      	add	r2, pc, #4	@ (adr r2, 800b96c <UART_SetConfig+0x90>)
 800b968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96c:	0800b97d 	.word	0x0800b97d
 800b970:	0800b989 	.word	0x0800b989
 800b974:	0800b983 	.word	0x0800b983
 800b978:	0800b98f 	.word	0x0800b98f
 800b97c:	2301      	movs	r3, #1
 800b97e:	77fb      	strb	r3, [r7, #31]
 800b980:	e150      	b.n	800bc24 <UART_SetConfig+0x348>
 800b982:	2302      	movs	r3, #2
 800b984:	77fb      	strb	r3, [r7, #31]
 800b986:	e14d      	b.n	800bc24 <UART_SetConfig+0x348>
 800b988:	2304      	movs	r3, #4
 800b98a:	77fb      	strb	r3, [r7, #31]
 800b98c:	e14a      	b.n	800bc24 <UART_SetConfig+0x348>
 800b98e:	2308      	movs	r3, #8
 800b990:	77fb      	strb	r3, [r7, #31]
 800b992:	e147      	b.n	800bc24 <UART_SetConfig+0x348>
 800b994:	2310      	movs	r3, #16
 800b996:	77fb      	strb	r3, [r7, #31]
 800b998:	e144      	b.n	800bc24 <UART_SetConfig+0x348>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a83      	ldr	r2, [pc, #524]	@ (800bbac <UART_SetConfig+0x2d0>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d132      	bne.n	800ba0a <UART_SetConfig+0x12e>
 800b9a4:	4b80      	ldr	r3, [pc, #512]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800b9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9aa:	f003 030c 	and.w	r3, r3, #12
 800b9ae:	2b0c      	cmp	r3, #12
 800b9b0:	d828      	bhi.n	800ba04 <UART_SetConfig+0x128>
 800b9b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9b8 <UART_SetConfig+0xdc>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9ed 	.word	0x0800b9ed
 800b9bc:	0800ba05 	.word	0x0800ba05
 800b9c0:	0800ba05 	.word	0x0800ba05
 800b9c4:	0800ba05 	.word	0x0800ba05
 800b9c8:	0800b9f9 	.word	0x0800b9f9
 800b9cc:	0800ba05 	.word	0x0800ba05
 800b9d0:	0800ba05 	.word	0x0800ba05
 800b9d4:	0800ba05 	.word	0x0800ba05
 800b9d8:	0800b9f3 	.word	0x0800b9f3
 800b9dc:	0800ba05 	.word	0x0800ba05
 800b9e0:	0800ba05 	.word	0x0800ba05
 800b9e4:	0800ba05 	.word	0x0800ba05
 800b9e8:	0800b9ff 	.word	0x0800b9ff
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	77fb      	strb	r3, [r7, #31]
 800b9f0:	e118      	b.n	800bc24 <UART_SetConfig+0x348>
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	77fb      	strb	r3, [r7, #31]
 800b9f6:	e115      	b.n	800bc24 <UART_SetConfig+0x348>
 800b9f8:	2304      	movs	r3, #4
 800b9fa:	77fb      	strb	r3, [r7, #31]
 800b9fc:	e112      	b.n	800bc24 <UART_SetConfig+0x348>
 800b9fe:	2308      	movs	r3, #8
 800ba00:	77fb      	strb	r3, [r7, #31]
 800ba02:	e10f      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba04:	2310      	movs	r3, #16
 800ba06:	77fb      	strb	r3, [r7, #31]
 800ba08:	e10c      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a68      	ldr	r2, [pc, #416]	@ (800bbb0 <UART_SetConfig+0x2d4>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d120      	bne.n	800ba56 <UART_SetConfig+0x17a>
 800ba14:	4b64      	ldr	r3, [pc, #400]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800ba16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ba1e:	2b30      	cmp	r3, #48	@ 0x30
 800ba20:	d013      	beq.n	800ba4a <UART_SetConfig+0x16e>
 800ba22:	2b30      	cmp	r3, #48	@ 0x30
 800ba24:	d814      	bhi.n	800ba50 <UART_SetConfig+0x174>
 800ba26:	2b20      	cmp	r3, #32
 800ba28:	d009      	beq.n	800ba3e <UART_SetConfig+0x162>
 800ba2a:	2b20      	cmp	r3, #32
 800ba2c:	d810      	bhi.n	800ba50 <UART_SetConfig+0x174>
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <UART_SetConfig+0x15c>
 800ba32:	2b10      	cmp	r3, #16
 800ba34:	d006      	beq.n	800ba44 <UART_SetConfig+0x168>
 800ba36:	e00b      	b.n	800ba50 <UART_SetConfig+0x174>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	77fb      	strb	r3, [r7, #31]
 800ba3c:	e0f2      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba3e:	2302      	movs	r3, #2
 800ba40:	77fb      	strb	r3, [r7, #31]
 800ba42:	e0ef      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba44:	2304      	movs	r3, #4
 800ba46:	77fb      	strb	r3, [r7, #31]
 800ba48:	e0ec      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba4a:	2308      	movs	r3, #8
 800ba4c:	77fb      	strb	r3, [r7, #31]
 800ba4e:	e0e9      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba50:	2310      	movs	r3, #16
 800ba52:	77fb      	strb	r3, [r7, #31]
 800ba54:	e0e6      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a56      	ldr	r2, [pc, #344]	@ (800bbb4 <UART_SetConfig+0x2d8>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d120      	bne.n	800baa2 <UART_SetConfig+0x1c6>
 800ba60:	4b51      	ldr	r3, [pc, #324]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800ba62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ba6a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba6c:	d013      	beq.n	800ba96 <UART_SetConfig+0x1ba>
 800ba6e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba70:	d814      	bhi.n	800ba9c <UART_SetConfig+0x1c0>
 800ba72:	2b80      	cmp	r3, #128	@ 0x80
 800ba74:	d009      	beq.n	800ba8a <UART_SetConfig+0x1ae>
 800ba76:	2b80      	cmp	r3, #128	@ 0x80
 800ba78:	d810      	bhi.n	800ba9c <UART_SetConfig+0x1c0>
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d002      	beq.n	800ba84 <UART_SetConfig+0x1a8>
 800ba7e:	2b40      	cmp	r3, #64	@ 0x40
 800ba80:	d006      	beq.n	800ba90 <UART_SetConfig+0x1b4>
 800ba82:	e00b      	b.n	800ba9c <UART_SetConfig+0x1c0>
 800ba84:	2300      	movs	r3, #0
 800ba86:	77fb      	strb	r3, [r7, #31]
 800ba88:	e0cc      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	77fb      	strb	r3, [r7, #31]
 800ba8e:	e0c9      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba90:	2304      	movs	r3, #4
 800ba92:	77fb      	strb	r3, [r7, #31]
 800ba94:	e0c6      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba96:	2308      	movs	r3, #8
 800ba98:	77fb      	strb	r3, [r7, #31]
 800ba9a:	e0c3      	b.n	800bc24 <UART_SetConfig+0x348>
 800ba9c:	2310      	movs	r3, #16
 800ba9e:	77fb      	strb	r3, [r7, #31]
 800baa0:	e0c0      	b.n	800bc24 <UART_SetConfig+0x348>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a44      	ldr	r2, [pc, #272]	@ (800bbb8 <UART_SetConfig+0x2dc>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d125      	bne.n	800baf8 <UART_SetConfig+0x21c>
 800baac:	4b3e      	ldr	r3, [pc, #248]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800baae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800baba:	d017      	beq.n	800baec <UART_SetConfig+0x210>
 800babc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bac0:	d817      	bhi.n	800baf2 <UART_SetConfig+0x216>
 800bac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bac6:	d00b      	beq.n	800bae0 <UART_SetConfig+0x204>
 800bac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bacc:	d811      	bhi.n	800baf2 <UART_SetConfig+0x216>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <UART_SetConfig+0x1fe>
 800bad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bad6:	d006      	beq.n	800bae6 <UART_SetConfig+0x20a>
 800bad8:	e00b      	b.n	800baf2 <UART_SetConfig+0x216>
 800bada:	2300      	movs	r3, #0
 800badc:	77fb      	strb	r3, [r7, #31]
 800bade:	e0a1      	b.n	800bc24 <UART_SetConfig+0x348>
 800bae0:	2302      	movs	r3, #2
 800bae2:	77fb      	strb	r3, [r7, #31]
 800bae4:	e09e      	b.n	800bc24 <UART_SetConfig+0x348>
 800bae6:	2304      	movs	r3, #4
 800bae8:	77fb      	strb	r3, [r7, #31]
 800baea:	e09b      	b.n	800bc24 <UART_SetConfig+0x348>
 800baec:	2308      	movs	r3, #8
 800baee:	77fb      	strb	r3, [r7, #31]
 800baf0:	e098      	b.n	800bc24 <UART_SetConfig+0x348>
 800baf2:	2310      	movs	r3, #16
 800baf4:	77fb      	strb	r3, [r7, #31]
 800baf6:	e095      	b.n	800bc24 <UART_SetConfig+0x348>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a2f      	ldr	r2, [pc, #188]	@ (800bbbc <UART_SetConfig+0x2e0>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d125      	bne.n	800bb4e <UART_SetConfig+0x272>
 800bb02:	4b29      	ldr	r3, [pc, #164]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800bb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb10:	d017      	beq.n	800bb42 <UART_SetConfig+0x266>
 800bb12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb16:	d817      	bhi.n	800bb48 <UART_SetConfig+0x26c>
 800bb18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb1c:	d00b      	beq.n	800bb36 <UART_SetConfig+0x25a>
 800bb1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb22:	d811      	bhi.n	800bb48 <UART_SetConfig+0x26c>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <UART_SetConfig+0x254>
 800bb28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb2c:	d006      	beq.n	800bb3c <UART_SetConfig+0x260>
 800bb2e:	e00b      	b.n	800bb48 <UART_SetConfig+0x26c>
 800bb30:	2301      	movs	r3, #1
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e076      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb36:	2302      	movs	r3, #2
 800bb38:	77fb      	strb	r3, [r7, #31]
 800bb3a:	e073      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb3c:	2304      	movs	r3, #4
 800bb3e:	77fb      	strb	r3, [r7, #31]
 800bb40:	e070      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb42:	2308      	movs	r3, #8
 800bb44:	77fb      	strb	r3, [r7, #31]
 800bb46:	e06d      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb48:	2310      	movs	r3, #16
 800bb4a:	77fb      	strb	r3, [r7, #31]
 800bb4c:	e06a      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a1b      	ldr	r2, [pc, #108]	@ (800bbc0 <UART_SetConfig+0x2e4>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d138      	bne.n	800bbca <UART_SetConfig+0x2ee>
 800bb58:	4b13      	ldr	r3, [pc, #76]	@ (800bba8 <UART_SetConfig+0x2cc>)
 800bb5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bb5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800bb62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb66:	d017      	beq.n	800bb98 <UART_SetConfig+0x2bc>
 800bb68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bb6c:	d82a      	bhi.n	800bbc4 <UART_SetConfig+0x2e8>
 800bb6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb72:	d00b      	beq.n	800bb8c <UART_SetConfig+0x2b0>
 800bb74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bb78:	d824      	bhi.n	800bbc4 <UART_SetConfig+0x2e8>
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <UART_SetConfig+0x2aa>
 800bb7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bb82:	d006      	beq.n	800bb92 <UART_SetConfig+0x2b6>
 800bb84:	e01e      	b.n	800bbc4 <UART_SetConfig+0x2e8>
 800bb86:	2300      	movs	r3, #0
 800bb88:	77fb      	strb	r3, [r7, #31]
 800bb8a:	e04b      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	77fb      	strb	r3, [r7, #31]
 800bb90:	e048      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb92:	2304      	movs	r3, #4
 800bb94:	77fb      	strb	r3, [r7, #31]
 800bb96:	e045      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb98:	2308      	movs	r3, #8
 800bb9a:	77fb      	strb	r3, [r7, #31]
 800bb9c:	e042      	b.n	800bc24 <UART_SetConfig+0x348>
 800bb9e:	bf00      	nop
 800bba0:	efff69f3 	.word	0xefff69f3
 800bba4:	40011000 	.word	0x40011000
 800bba8:	40023800 	.word	0x40023800
 800bbac:	40004400 	.word	0x40004400
 800bbb0:	40004800 	.word	0x40004800
 800bbb4:	40004c00 	.word	0x40004c00
 800bbb8:	40005000 	.word	0x40005000
 800bbbc:	40011400 	.word	0x40011400
 800bbc0:	40007800 	.word	0x40007800
 800bbc4:	2310      	movs	r3, #16
 800bbc6:	77fb      	strb	r3, [r7, #31]
 800bbc8:	e02c      	b.n	800bc24 <UART_SetConfig+0x348>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a72      	ldr	r2, [pc, #456]	@ (800bd98 <UART_SetConfig+0x4bc>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d125      	bne.n	800bc20 <UART_SetConfig+0x344>
 800bbd4:	4b71      	ldr	r3, [pc, #452]	@ (800bd9c <UART_SetConfig+0x4c0>)
 800bbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bbda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800bbde:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbe2:	d017      	beq.n	800bc14 <UART_SetConfig+0x338>
 800bbe4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bbe8:	d817      	bhi.n	800bc1a <UART_SetConfig+0x33e>
 800bbea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbee:	d00b      	beq.n	800bc08 <UART_SetConfig+0x32c>
 800bbf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbf4:	d811      	bhi.n	800bc1a <UART_SetConfig+0x33e>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <UART_SetConfig+0x326>
 800bbfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bbfe:	d006      	beq.n	800bc0e <UART_SetConfig+0x332>
 800bc00:	e00b      	b.n	800bc1a <UART_SetConfig+0x33e>
 800bc02:	2300      	movs	r3, #0
 800bc04:	77fb      	strb	r3, [r7, #31]
 800bc06:	e00d      	b.n	800bc24 <UART_SetConfig+0x348>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	77fb      	strb	r3, [r7, #31]
 800bc0c:	e00a      	b.n	800bc24 <UART_SetConfig+0x348>
 800bc0e:	2304      	movs	r3, #4
 800bc10:	77fb      	strb	r3, [r7, #31]
 800bc12:	e007      	b.n	800bc24 <UART_SetConfig+0x348>
 800bc14:	2308      	movs	r3, #8
 800bc16:	77fb      	strb	r3, [r7, #31]
 800bc18:	e004      	b.n	800bc24 <UART_SetConfig+0x348>
 800bc1a:	2310      	movs	r3, #16
 800bc1c:	77fb      	strb	r3, [r7, #31]
 800bc1e:	e001      	b.n	800bc24 <UART_SetConfig+0x348>
 800bc20:	2310      	movs	r3, #16
 800bc22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	69db      	ldr	r3, [r3, #28]
 800bc28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc2c:	d15b      	bne.n	800bce6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800bc2e:	7ffb      	ldrb	r3, [r7, #31]
 800bc30:	2b08      	cmp	r3, #8
 800bc32:	d828      	bhi.n	800bc86 <UART_SetConfig+0x3aa>
 800bc34:	a201      	add	r2, pc, #4	@ (adr r2, 800bc3c <UART_SetConfig+0x360>)
 800bc36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc3a:	bf00      	nop
 800bc3c:	0800bc61 	.word	0x0800bc61
 800bc40:	0800bc69 	.word	0x0800bc69
 800bc44:	0800bc71 	.word	0x0800bc71
 800bc48:	0800bc87 	.word	0x0800bc87
 800bc4c:	0800bc77 	.word	0x0800bc77
 800bc50:	0800bc87 	.word	0x0800bc87
 800bc54:	0800bc87 	.word	0x0800bc87
 800bc58:	0800bc87 	.word	0x0800bc87
 800bc5c:	0800bc7f 	.word	0x0800bc7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc60:	f7fc fa14 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 800bc64:	61b8      	str	r0, [r7, #24]
        break;
 800bc66:	e013      	b.n	800bc90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc68:	f7fc fa24 	bl	80080b4 <HAL_RCC_GetPCLK2Freq>
 800bc6c:	61b8      	str	r0, [r7, #24]
        break;
 800bc6e:	e00f      	b.n	800bc90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc70:	4b4b      	ldr	r3, [pc, #300]	@ (800bda0 <UART_SetConfig+0x4c4>)
 800bc72:	61bb      	str	r3, [r7, #24]
        break;
 800bc74:	e00c      	b.n	800bc90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc76:	f7fc f8f7 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 800bc7a:	61b8      	str	r0, [r7, #24]
        break;
 800bc7c:	e008      	b.n	800bc90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc82:	61bb      	str	r3, [r7, #24]
        break;
 800bc84:	e004      	b.n	800bc90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	77bb      	strb	r3, [r7, #30]
        break;
 800bc8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d074      	beq.n	800bd80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	005a      	lsls	r2, r3, #1
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	085b      	lsrs	r3, r3, #1
 800bca0:	441a      	add	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2b0f      	cmp	r3, #15
 800bcb0:	d916      	bls.n	800bce0 <UART_SetConfig+0x404>
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcb8:	d212      	bcs.n	800bce0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	f023 030f 	bic.w	r3, r3, #15
 800bcc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	f003 0307 	and.w	r3, r3, #7
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	89fb      	ldrh	r3, [r7, #14]
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	89fa      	ldrh	r2, [r7, #14]
 800bcdc:	60da      	str	r2, [r3, #12]
 800bcde:	e04f      	b.n	800bd80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	77bb      	strb	r3, [r7, #30]
 800bce4:	e04c      	b.n	800bd80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bce6:	7ffb      	ldrb	r3, [r7, #31]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d828      	bhi.n	800bd3e <UART_SetConfig+0x462>
 800bcec:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf4 <UART_SetConfig+0x418>)
 800bcee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf2:	bf00      	nop
 800bcf4:	0800bd19 	.word	0x0800bd19
 800bcf8:	0800bd21 	.word	0x0800bd21
 800bcfc:	0800bd29 	.word	0x0800bd29
 800bd00:	0800bd3f 	.word	0x0800bd3f
 800bd04:	0800bd2f 	.word	0x0800bd2f
 800bd08:	0800bd3f 	.word	0x0800bd3f
 800bd0c:	0800bd3f 	.word	0x0800bd3f
 800bd10:	0800bd3f 	.word	0x0800bd3f
 800bd14:	0800bd37 	.word	0x0800bd37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd18:	f7fc f9b8 	bl	800808c <HAL_RCC_GetPCLK1Freq>
 800bd1c:	61b8      	str	r0, [r7, #24]
        break;
 800bd1e:	e013      	b.n	800bd48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd20:	f7fc f9c8 	bl	80080b4 <HAL_RCC_GetPCLK2Freq>
 800bd24:	61b8      	str	r0, [r7, #24]
        break;
 800bd26:	e00f      	b.n	800bd48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd28:	4b1d      	ldr	r3, [pc, #116]	@ (800bda0 <UART_SetConfig+0x4c4>)
 800bd2a:	61bb      	str	r3, [r7, #24]
        break;
 800bd2c:	e00c      	b.n	800bd48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd2e:	f7fc f89b 	bl	8007e68 <HAL_RCC_GetSysClockFreq>
 800bd32:	61b8      	str	r0, [r7, #24]
        break;
 800bd34:	e008      	b.n	800bd48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd3a:	61bb      	str	r3, [r7, #24]
        break;
 800bd3c:	e004      	b.n	800bd48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800bd42:	2301      	movs	r3, #1
 800bd44:	77bb      	strb	r3, [r7, #30]
        break;
 800bd46:	bf00      	nop
    }

    if (pclk != 0U)
 800bd48:	69bb      	ldr	r3, [r7, #24]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d018      	beq.n	800bd80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	085a      	lsrs	r2, r3, #1
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	441a      	add	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	2b0f      	cmp	r3, #15
 800bd66:	d909      	bls.n	800bd7c <UART_SetConfig+0x4a0>
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd6e:	d205      	bcs.n	800bd7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	b29a      	uxth	r2, r3
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60da      	str	r2, [r3, #12]
 800bd7a:	e001      	b.n	800bd80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2200      	movs	r2, #0
 800bd84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2200      	movs	r2, #0
 800bd8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800bd8c:	7fbb      	ldrb	r3, [r7, #30]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3720      	adds	r7, #32
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	40007c00 	.word	0x40007c00
 800bd9c:	40023800 	.word	0x40023800
 800bda0:	00f42400 	.word	0x00f42400

0800bda4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb0:	f003 0308 	and.w	r3, r3, #8
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d00a      	beq.n	800bdce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	430a      	orrs	r2, r1
 800bdcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdd2:	f003 0301 	and.w	r3, r3, #1
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00a      	beq.n	800bdf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685b      	ldr	r3, [r3, #4]
 800bde0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	430a      	orrs	r2, r1
 800bdee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00a      	beq.n	800be12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	430a      	orrs	r2, r1
 800be10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be16:	f003 0304 	and.w	r3, r3, #4
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00a      	beq.n	800be34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	430a      	orrs	r2, r1
 800be32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be38:	f003 0310 	and.w	r3, r3, #16
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d00a      	beq.n	800be56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5a:	f003 0320 	and.w	r3, r3, #32
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	689b      	ldr	r3, [r3, #8]
 800be68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	430a      	orrs	r2, r1
 800be76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d01a      	beq.n	800beba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	430a      	orrs	r2, r1
 800be98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bea2:	d10a      	bne.n	800beba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	430a      	orrs	r2, r1
 800beb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	430a      	orrs	r2, r1
 800beda:	605a      	str	r2, [r3, #4]
  }
}
 800bedc:	bf00      	nop
 800bede:	370c      	adds	r7, #12
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08c      	sub	sp, #48	@ 0x30
 800beec:	af02      	add	r7, sp, #8
 800beee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bef8:	f7f9 ff14 	bl	8005d24 <HAL_GetTick>
 800befc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f003 0308 	and.w	r3, r3, #8
 800bf08:	2b08      	cmp	r3, #8
 800bf0a:	d12e      	bne.n	800bf6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf10:	9300      	str	r3, [sp, #0]
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	2200      	movs	r2, #0
 800bf16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f83b 	bl	800bf96 <UART_WaitOnFlagUntilTimeout>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d021      	beq.n	800bf6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	e853 3f00 	ldrex	r3, [r3]
 800bf32:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf3a:	623b      	str	r3, [r7, #32]
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	461a      	mov	r2, r3
 800bf42:	6a3b      	ldr	r3, [r7, #32]
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	69fa      	ldr	r2, [r7, #28]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	617b      	str	r3, [r7, #20]
   return(result);
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e6      	bne.n	800bf26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2220      	movs	r2, #32
 800bf5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e011      	b.n	800bf8e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2220      	movs	r2, #32
 800bf6e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2220      	movs	r2, #32
 800bf74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2200      	movs	r2, #0
 800bf82:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2200      	movs	r2, #0
 800bf88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bf8c:	2300      	movs	r3, #0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	3728      	adds	r7, #40	@ 0x28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	bd80      	pop	{r7, pc}

0800bf96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bf96:	b580      	push	{r7, lr}
 800bf98:	b084      	sub	sp, #16
 800bf9a:	af00      	add	r7, sp, #0
 800bf9c:	60f8      	str	r0, [r7, #12]
 800bf9e:	60b9      	str	r1, [r7, #8]
 800bfa0:	603b      	str	r3, [r7, #0]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bfa6:	e04f      	b.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfae:	d04b      	beq.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfb0:	f7f9 feb8 	bl	8005d24 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d302      	bcc.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0x30>
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d101      	bne.n	800bfca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e04e      	b.n	800c068 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d037      	beq.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	2b80      	cmp	r3, #128	@ 0x80
 800bfdc:	d034      	beq.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	2b40      	cmp	r3, #64	@ 0x40
 800bfe2:	d031      	beq.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	69db      	ldr	r3, [r3, #28]
 800bfea:	f003 0308 	and.w	r3, r3, #8
 800bfee:	2b08      	cmp	r3, #8
 800bff0:	d110      	bne.n	800c014 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2208      	movs	r2, #8
 800bff8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f000 f8fe 	bl	800c1fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2208      	movs	r2, #8
 800c004:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	2200      	movs	r2, #0
 800c00c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e029      	b.n	800c068 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69db      	ldr	r3, [r3, #28]
 800c01a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c01e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c022:	d111      	bne.n	800c048 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c02c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 f8e4 	bl	800c1fc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2220      	movs	r2, #32
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e00f      	b.n	800c068 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	69da      	ldr	r2, [r3, #28]
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	4013      	ands	r3, r2
 800c052:	68ba      	ldr	r2, [r7, #8]
 800c054:	429a      	cmp	r2, r3
 800c056:	bf0c      	ite	eq
 800c058:	2301      	moveq	r3, #1
 800c05a:	2300      	movne	r3, #0
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	461a      	mov	r2, r3
 800c060:	79fb      	ldrb	r3, [r7, #7]
 800c062:	429a      	cmp	r2, r3
 800c064:	d0a0      	beq.n	800bfa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b096      	sub	sp, #88	@ 0x58
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	4613      	mov	r3, r2
 800c07c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	68ba      	ldr	r2, [r7, #8]
 800c082:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	88fa      	ldrh	r2, [r7, #6]
 800c088:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2222      	movs	r2, #34	@ 0x22
 800c098:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d028      	beq.n	800c0f6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0a8:	4a3e      	ldr	r2, [pc, #248]	@ (800c1a4 <UART_Start_Receive_DMA+0x134>)
 800c0aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0b0:	4a3d      	ldr	r2, [pc, #244]	@ (800c1a8 <UART_Start_Receive_DMA+0x138>)
 800c0b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0b8:	4a3c      	ldr	r2, [pc, #240]	@ (800c1ac <UART_Start_Receive_DMA+0x13c>)
 800c0ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3324      	adds	r3, #36	@ 0x24
 800c0ce:	4619      	mov	r1, r3
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	88fb      	ldrh	r3, [r7, #6]
 800c0d8:	f7f9 ffe4 	bl	80060a4 <HAL_DMA_Start_IT>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d009      	beq.n	800c0f6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2210      	movs	r2, #16
 800c0e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2220      	movs	r2, #32
 800c0ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e051      	b.n	800c19a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d018      	beq.n	800c130 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c104:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c106:	e853 3f00 	ldrex	r3, [r3]
 800c10a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c10e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c112:	657b      	str	r3, [r7, #84]	@ 0x54
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	461a      	mov	r2, r3
 800c11a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c11c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c11e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c124:	e841 2300 	strex	r3, r2, [r1]
 800c128:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800c12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1e6      	bne.n	800c0fe <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3308      	adds	r3, #8
 800c136:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c142:	f043 0301 	orr.w	r3, r3, #1
 800c146:	653b      	str	r3, [r7, #80]	@ 0x50
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3308      	adds	r3, #8
 800c14e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c150:	637a      	str	r2, [r7, #52]	@ 0x34
 800c152:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c154:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c158:	e841 2300 	strex	r3, r2, [r1]
 800c15c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800c15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e5      	bne.n	800c130 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	3308      	adds	r3, #8
 800c16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	e853 3f00 	ldrex	r3, [r3]
 800c172:	613b      	str	r3, [r7, #16]
   return(result);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c17a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3308      	adds	r3, #8
 800c182:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c184:	623a      	str	r2, [r7, #32]
 800c186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c188:	69f9      	ldr	r1, [r7, #28]
 800c18a:	6a3a      	ldr	r2, [r7, #32]
 800c18c:	e841 2300 	strex	r3, r2, [r1]
 800c190:	61bb      	str	r3, [r7, #24]
   return(result);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e5      	bne.n	800c164 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800c198:	2300      	movs	r3, #0
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	3758      	adds	r7, #88	@ 0x58
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	bd80      	pop	{r7, pc}
 800c1a2:	bf00      	nop
 800c1a4:	0800c2c5 	.word	0x0800c2c5
 800c1a8:	0800c3ed 	.word	0x0800c3ed
 800c1ac:	0800c42b 	.word	0x0800c42b

0800c1b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b089      	sub	sp, #36	@ 0x24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	e853 3f00 	ldrex	r3, [r3]
 800c1c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c1cc:	61fb      	str	r3, [r7, #28]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	69fb      	ldr	r3, [r7, #28]
 800c1d6:	61bb      	str	r3, [r7, #24]
 800c1d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1da:	6979      	ldr	r1, [r7, #20]
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	e841 2300 	strex	r3, r2, [r1]
 800c1e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d1e6      	bne.n	800c1b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800c1f0:	bf00      	nop
 800c1f2:	3724      	adds	r7, #36	@ 0x24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr

0800c1fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b095      	sub	sp, #84	@ 0x54
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c20c:	e853 3f00 	ldrex	r3, [r3]
 800c210:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c218:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	461a      	mov	r2, r3
 800c220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c222:	643b      	str	r3, [r7, #64]	@ 0x40
 800c224:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c226:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c228:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c22a:	e841 2300 	strex	r3, r2, [r1]
 800c22e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1e6      	bne.n	800c204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	3308      	adds	r3, #8
 800c23c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c23e:	6a3b      	ldr	r3, [r7, #32]
 800c240:	e853 3f00 	ldrex	r3, [r3]
 800c244:	61fb      	str	r3, [r7, #28]
   return(result);
 800c246:	69fb      	ldr	r3, [r7, #28]
 800c248:	f023 0301 	bic.w	r3, r3, #1
 800c24c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	3308      	adds	r3, #8
 800c254:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c258:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c25a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c25c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c25e:	e841 2300 	strex	r3, r2, [r1]
 800c262:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c266:	2b00      	cmp	r3, #0
 800c268:	d1e5      	bne.n	800c236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d118      	bne.n	800c2a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	e853 3f00 	ldrex	r3, [r3]
 800c27e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f023 0310 	bic.w	r3, r3, #16
 800c286:	647b      	str	r3, [r7, #68]	@ 0x44
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	461a      	mov	r2, r3
 800c28e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c290:	61bb      	str	r3, [r7, #24]
 800c292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c294:	6979      	ldr	r1, [r7, #20]
 800c296:	69ba      	ldr	r2, [r7, #24]
 800c298:	e841 2300 	strex	r3, r2, [r1]
 800c29c:	613b      	str	r3, [r7, #16]
   return(result);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e6      	bne.n	800c272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2220      	movs	r2, #32
 800c2a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c2b8:	bf00      	nop
 800c2ba:	3754      	adds	r7, #84	@ 0x54
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b09c      	sub	sp, #112	@ 0x70
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2d0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	69db      	ldr	r3, [r3, #28]
 800c2d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c2da:	d071      	beq.n	800c3c0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800c2dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2ec:	e853 3f00 	ldrex	r3, [r3]
 800c2f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c2f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c2f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c2fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c302:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c304:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c306:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c308:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c30a:	e841 2300 	strex	r3, r2, [r1]
 800c30e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c312:	2b00      	cmp	r3, #0
 800c314:	d1e6      	bne.n	800c2e4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	3308      	adds	r3, #8
 800c31c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c328:	f023 0301 	bic.w	r3, r3, #1
 800c32c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c32e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	3308      	adds	r3, #8
 800c334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c336:	647a      	str	r2, [r7, #68]	@ 0x44
 800c338:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c33c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c33e:	e841 2300 	strex	r3, r2, [r1]
 800c342:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e5      	bne.n	800c316 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	3308      	adds	r3, #8
 800c350:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	623b      	str	r3, [r7, #32]
   return(result);
 800c35a:	6a3b      	ldr	r3, [r7, #32]
 800c35c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c360:	663b      	str	r3, [r7, #96]	@ 0x60
 800c362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	3308      	adds	r3, #8
 800c368:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c36a:	633a      	str	r2, [r7, #48]	@ 0x30
 800c36c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c372:	e841 2300 	strex	r3, r2, [r1]
 800c376:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1e5      	bne.n	800c34a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c37e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c380:	2220      	movs	r2, #32
 800c382:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d118      	bne.n	800c3c0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c38e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	e853 3f00 	ldrex	r3, [r3]
 800c39a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f023 0310 	bic.w	r3, r3, #16
 800c3a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c3a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	461a      	mov	r2, r3
 800c3aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c3ac:	61fb      	str	r3, [r7, #28]
 800c3ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b0:	69b9      	ldr	r1, [r7, #24]
 800c3b2:	69fa      	ldr	r2, [r7, #28]
 800c3b4:	e841 2300 	strex	r3, r2, [r1]
 800c3b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d1e6      	bne.n	800c38e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d107      	bne.n	800c3de <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c3ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3d8:	f7ff fa74 	bl	800b8c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c3dc:	e002      	b.n	800c3e4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800c3de:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c3e0:	f7f6 f942 	bl	8002668 <HAL_UART_RxCpltCallback>
}
 800c3e4:	bf00      	nop
 800c3e6:	3770      	adds	r7, #112	@ 0x70
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3f8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2201      	movs	r2, #1
 800c3fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c404:	2b01      	cmp	r3, #1
 800c406:	d109      	bne.n	800c41c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c40e:	085b      	lsrs	r3, r3, #1
 800c410:	b29b      	uxth	r3, r3
 800c412:	4619      	mov	r1, r3
 800c414:	68f8      	ldr	r0, [r7, #12]
 800c416:	f7ff fa55 	bl	800b8c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c41a:	e002      	b.n	800c422 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800c41c:	68f8      	ldr	r0, [r7, #12]
 800c41e:	f7ff fa3d 	bl	800b89c <HAL_UART_RxHalfCpltCallback>
}
 800c422:	bf00      	nop
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b086      	sub	sp, #24
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c436:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c43c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c444:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c450:	2b80      	cmp	r3, #128	@ 0x80
 800c452:	d109      	bne.n	800c468 <UART_DMAError+0x3e>
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	2b21      	cmp	r3, #33	@ 0x21
 800c458:	d106      	bne.n	800c468 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	2200      	movs	r2, #0
 800c45e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c462:	6978      	ldr	r0, [r7, #20]
 800c464:	f7ff fea4 	bl	800c1b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c472:	2b40      	cmp	r3, #64	@ 0x40
 800c474:	d109      	bne.n	800c48a <UART_DMAError+0x60>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2b22      	cmp	r3, #34	@ 0x22
 800c47a:	d106      	bne.n	800c48a <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	2200      	movs	r2, #0
 800c480:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c484:	6978      	ldr	r0, [r7, #20]
 800c486:	f7ff feb9 	bl	800c1fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c490:	f043 0210 	orr.w	r2, r3, #16
 800c494:	697b      	ldr	r3, [r7, #20]
 800c496:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c49a:	6978      	ldr	r0, [r7, #20]
 800c49c:	f7ff fa08 	bl	800b8b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4a0:	bf00      	nop
 800c4a2:	3718      	adds	r7, #24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff f9f2 	bl	800b8b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
 800c4e8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	61bb      	str	r3, [r7, #24]
 800c4fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4fe:	6979      	ldr	r1, [r7, #20]
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	e841 2300 	strex	r3, r2, [r1]
 800c506:	613b      	str	r3, [r7, #16]
   return(result);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1e6      	bne.n	800c4dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2220      	movs	r2, #32
 800c512:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff f9b4 	bl	800b888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c520:	bf00      	nop
 800c522:	3720      	adds	r7, #32
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c528:	b084      	sub	sp, #16
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
 800c532:	f107 001c 	add.w	r0, r7, #28
 800c536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c53a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d121      	bne.n	800c586 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c546:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68da      	ldr	r2, [r3, #12]
 800c552:	4b21      	ldr	r3, [pc, #132]	@ (800c5d8 <USB_CoreInit+0xb0>)
 800c554:	4013      	ands	r3, r2
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	68db      	ldr	r3, [r3, #12]
 800c55e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c566:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d105      	bne.n	800c57a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa92 	bl	800caa4 <USB_CoreReset>
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]
 800c584:	e010      	b.n	800c5a8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fa86 	bl	800caa4 <USB_CoreReset>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800c5a8:	7fbb      	ldrb	r3, [r7, #30]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d10b      	bne.n	800c5c6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f043 0206 	orr.w	r2, r3, #6
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	689b      	ldr	r3, [r3, #8]
 800c5be:	f043 0220 	orr.w	r2, r3, #32
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3710      	adds	r7, #16
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c5d2:	b004      	add	sp, #16
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	ffbdffbf 	.word	0xffbdffbf

0800c5dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	f023 0201 	bic.w	r2, r3, #1
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	370c      	adds	r7, #12
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c5fe:	b580      	push	{r7, lr}
 800c600:	b084      	sub	sp, #16
 800c602:	af00      	add	r7, sp, #0
 800c604:	6078      	str	r0, [r7, #4]
 800c606:	460b      	mov	r3, r1
 800c608:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c60a:	2300      	movs	r3, #0
 800c60c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c61a:	78fb      	ldrb	r3, [r7, #3]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d115      	bne.n	800c64c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c62c:	200a      	movs	r0, #10
 800c62e:	f7f9 fb85 	bl	8005d3c <HAL_Delay>
      ms += 10U;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	330a      	adds	r3, #10
 800c636:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa25 	bl	800ca88 <USB_GetMode>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b01      	cmp	r3, #1
 800c642:	d01e      	beq.n	800c682 <USB_SetCurrentMode+0x84>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2bc7      	cmp	r3, #199	@ 0xc7
 800c648:	d9f0      	bls.n	800c62c <USB_SetCurrentMode+0x2e>
 800c64a:	e01a      	b.n	800c682 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c64c:	78fb      	ldrb	r3, [r7, #3]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d115      	bne.n	800c67e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800c65e:	200a      	movs	r0, #10
 800c660:	f7f9 fb6c 	bl	8005d3c <HAL_Delay>
      ms += 10U;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	330a      	adds	r3, #10
 800c668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 fa0c 	bl	800ca88 <USB_GetMode>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d005      	beq.n	800c682 <USB_SetCurrentMode+0x84>
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2bc7      	cmp	r3, #199	@ 0xc7
 800c67a:	d9f0      	bls.n	800c65e <USB_SetCurrentMode+0x60>
 800c67c:	e001      	b.n	800c682 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e005      	b.n	800c68e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2bc8      	cmp	r3, #200	@ 0xc8
 800c686:	d101      	bne.n	800c68c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	e000      	b.n	800c68e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c68c:	2300      	movs	r3, #0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3710      	adds	r7, #16
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c698:	b084      	sub	sp, #16
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b086      	sub	sp, #24
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
 800c6a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800c6a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	613b      	str	r3, [r7, #16]
 800c6b6:	e009      	b.n	800c6cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c6b8:	687a      	ldr	r2, [r7, #4]
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	3340      	adds	r3, #64	@ 0x40
 800c6be:	009b      	lsls	r3, r3, #2
 800c6c0:	4413      	add	r3, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	3301      	adds	r3, #1
 800c6ca:	613b      	str	r3, [r7, #16]
 800c6cc:	693b      	ldr	r3, [r7, #16]
 800c6ce:	2b0e      	cmp	r3, #14
 800c6d0:	d9f2      	bls.n	800c6b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c6d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d11c      	bne.n	800c714 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6e8:	f043 0302 	orr.w	r3, r3, #2
 800c6ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	601a      	str	r2, [r3, #0]
 800c712:	e005      	b.n	800c720 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c718:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c726:	461a      	mov	r2, r3
 800c728:	2300      	movs	r3, #0
 800c72a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c72c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c730:	2b01      	cmp	r3, #1
 800c732:	d10d      	bne.n	800c750 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d104      	bne.n	800c746 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c73c:	2100      	movs	r1, #0
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f968 	bl	800ca14 <USB_SetDevSpeed>
 800c744:	e008      	b.n	800c758 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c746:	2101      	movs	r1, #1
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f000 f963 	bl	800ca14 <USB_SetDevSpeed>
 800c74e:	e003      	b.n	800c758 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c750:	2103      	movs	r1, #3
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f000 f95e 	bl	800ca14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c758:	2110      	movs	r1, #16
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f000 f8fa 	bl	800c954 <USB_FlushTxFifo>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d001      	beq.n	800c76a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f924 	bl	800c9b8 <USB_FlushRxFifo>
 800c770:	4603      	mov	r3, r0
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c780:	461a      	mov	r2, r3
 800c782:	2300      	movs	r3, #0
 800c784:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c78c:	461a      	mov	r2, r3
 800c78e:	2300      	movs	r3, #0
 800c790:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c798:	461a      	mov	r2, r3
 800c79a:	2300      	movs	r3, #0
 800c79c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c79e:	2300      	movs	r3, #0
 800c7a0:	613b      	str	r3, [r7, #16]
 800c7a2:	e043      	b.n	800c82c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c7a4:	693b      	ldr	r3, [r7, #16]
 800c7a6:	015a      	lsls	r2, r3, #5
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c7b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c7ba:	d118      	bne.n	800c7ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d10a      	bne.n	800c7d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c7d4:	6013      	str	r3, [r2, #0]
 800c7d6:	e013      	b.n	800c800 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c7d8:	693b      	ldr	r3, [r7, #16]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7e4:	461a      	mov	r2, r3
 800c7e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c7ea:	6013      	str	r3, [r2, #0]
 800c7ec:	e008      	b.n	800c800 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	015a      	lsls	r2, r3, #5
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	4413      	add	r3, r2
 800c808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c80c:	461a      	mov	r2, r3
 800c80e:	2300      	movs	r3, #0
 800c810:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c81e:	461a      	mov	r2, r3
 800c820:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	3301      	adds	r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
 800c82c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c830:	461a      	mov	r2, r3
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	4293      	cmp	r3, r2
 800c836:	d3b5      	bcc.n	800c7a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c838:	2300      	movs	r3, #0
 800c83a:	613b      	str	r3, [r7, #16]
 800c83c:	e043      	b.n	800c8c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c850:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c854:	d118      	bne.n	800c888 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d10a      	bne.n	800c872 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	015a      	lsls	r2, r3, #5
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4413      	add	r3, r2
 800c864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c868:	461a      	mov	r2, r3
 800c86a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c86e:	6013      	str	r3, [r2, #0]
 800c870:	e013      	b.n	800c89a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	015a      	lsls	r2, r3, #5
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	4413      	add	r3, r2
 800c87a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c87e:	461a      	mov	r2, r3
 800c880:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800c884:	6013      	str	r3, [r2, #0]
 800c886:	e008      	b.n	800c89a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c894:	461a      	mov	r2, r3
 800c896:	2300      	movs	r3, #0
 800c898:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	015a      	lsls	r2, r3, #5
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c8be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	613b      	str	r3, [r7, #16]
 800c8c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d3b5      	bcc.n	800c83e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8d8:	691b      	ldr	r3, [r3, #16]
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c8e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800c8f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c8f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d105      	bne.n	800c908 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	f043 0210 	orr.w	r2, r3, #16
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	699a      	ldr	r2, [r3, #24]
 800c90c:	4b0f      	ldr	r3, [pc, #60]	@ (800c94c <USB_DevInit+0x2b4>)
 800c90e:	4313      	orrs	r3, r2
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c914:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d005      	beq.n	800c928 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	699b      	ldr	r3, [r3, #24]
 800c920:	f043 0208 	orr.w	r2, r3, #8
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c928:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d105      	bne.n	800c93c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	699a      	ldr	r2, [r3, #24]
 800c934:	4b06      	ldr	r3, [pc, #24]	@ (800c950 <USB_DevInit+0x2b8>)
 800c936:	4313      	orrs	r3, r2
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c948:	b004      	add	sp, #16
 800c94a:	4770      	bx	lr
 800c94c:	803c3800 	.word	0x803c3800
 800c950:	40000004 	.word	0x40000004

0800c954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c95e:	2300      	movs	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c96e:	d901      	bls.n	800c974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c970:	2303      	movs	r3, #3
 800c972:	e01b      	b.n	800c9ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	691b      	ldr	r3, [r3, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	daf2      	bge.n	800c962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	019b      	lsls	r3, r3, #6
 800c984:	f043 0220 	orr.w	r2, r3, #32
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	3301      	adds	r3, #1
 800c990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c998:	d901      	bls.n	800c99e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800c99a:	2303      	movs	r3, #3
 800c99c:	e006      	b.n	800c9ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	f003 0320 	and.w	r3, r3, #32
 800c9a6:	2b20      	cmp	r3, #32
 800c9a8:	d0f0      	beq.n	800c98c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9d0:	d901      	bls.n	800c9d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e018      	b.n	800ca08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	daf2      	bge.n	800c9c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2210      	movs	r2, #16
 800c9e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c9f4:	d901      	bls.n	800c9fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e006      	b.n	800ca08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	691b      	ldr	r3, [r3, #16]
 800c9fe:	f003 0310 	and.w	r3, r3, #16
 800ca02:	2b10      	cmp	r3, #16
 800ca04:	d0f0      	beq.n	800c9e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr

0800ca14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	78fb      	ldrb	r3, [r7, #3]
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ca34:	4313      	orrs	r3, r2
 800ca36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3714      	adds	r7, #20
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr

0800ca46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca46:	b480      	push	{r7}
 800ca48:	b085      	sub	sp, #20
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68fa      	ldr	r2, [r7, #12]
 800ca5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ca60:	f023 0303 	bic.w	r3, r3, #3
 800ca64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ca74:	f043 0302 	orr.w	r3, r3, #2
 800ca78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr

0800ca88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	695b      	ldr	r3, [r3, #20]
 800ca94:	f003 0301 	and.w	r3, r3, #1
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800caac:	2300      	movs	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	3301      	adds	r3, #1
 800cab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cabc:	d901      	bls.n	800cac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cabe:	2303      	movs	r3, #3
 800cac0:	e01b      	b.n	800cafa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	daf2      	bge.n	800cab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800caca:	2300      	movs	r3, #0
 800cacc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f043 0201 	orr.w	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	3301      	adds	r3, #1
 800cade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800cae6:	d901      	bls.n	800caec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cae8:	2303      	movs	r3, #3
 800caea:	e006      	b.n	800cafa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691b      	ldr	r3, [r3, #16]
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d0f0      	beq.n	800cada <USB_CoreReset+0x36>

  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3714      	adds	r7, #20
 800cafe:	46bd      	mov	sp, r7
 800cb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb04:	4770      	bx	lr
	...

0800cb08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800cb0c:	4904      	ldr	r1, [pc, #16]	@ (800cb20 <MX_FATFS_Init+0x18>)
 800cb0e:	4805      	ldr	r0, [pc, #20]	@ (800cb24 <MX_FATFS_Init+0x1c>)
 800cb10:	f002 fe94 	bl	800f83c <FATFS_LinkDriver>
 800cb14:	4603      	mov	r3, r0
 800cb16:	461a      	mov	r2, r3
 800cb18:	4b03      	ldr	r3, [pc, #12]	@ (800cb28 <MX_FATFS_Init+0x20>)
 800cb1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cb1c:	bf00      	nop
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	200012e0 	.word	0x200012e0
 800cb24:	20000060 	.word	0x20000060
 800cb28:	200012dc 	.word	0x200012dc

0800cb2c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	4603      	mov	r3, r0
 800cb34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f000 f9d7 	bl	800ceec <USER_SPI_initialize>
 800cb3e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b082      	sub	sp, #8
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	4618      	mov	r0, r3
 800cb56:	f000 fabd 	bl	800d0d4 <USER_SPI_status>
 800cb5a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	3708      	adds	r7, #8
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}

0800cb64 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	60b9      	str	r1, [r7, #8]
 800cb6c:	607a      	str	r2, [r7, #4]
 800cb6e:	603b      	str	r3, [r7, #0]
 800cb70:	4603      	mov	r3, r0
 800cb72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800cb74:	7bf8      	ldrb	r0, [r7, #15]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	68b9      	ldr	r1, [r7, #8]
 800cb7c:	f000 fac0 	bl	800d100 <USER_SPI_read>
 800cb80:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b084      	sub	sp, #16
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
 800cb96:	4603      	mov	r3, r0
 800cb98:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800cb9a:	7bf8      	ldrb	r0, [r7, #15]
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	68b9      	ldr	r1, [r7, #8]
 800cba2:	f000 fb13 	bl	800d1cc <USER_SPI_write>
 800cba6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3710      	adds	r7, #16
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	603a      	str	r2, [r7, #0]
 800cbba:	71fb      	strb	r3, [r7, #7]
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800cbc0:	79b9      	ldrb	r1, [r7, #6]
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	683a      	ldr	r2, [r7, #0]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f000 fb7c 	bl	800d2c4 <USER_SPI_ioctl>
 800cbcc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
	...

0800cbd8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800cbe0:	f7f9 f8a0 	bl	8005d24 <HAL_GetTick>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	4a04      	ldr	r2, [pc, #16]	@ (800cbf8 <SPI_Timer_On+0x20>)
 800cbe8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800cbea:	4a04      	ldr	r2, [pc, #16]	@ (800cbfc <SPI_Timer_On+0x24>)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6013      	str	r3, [r2, #0]
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	200012ec 	.word	0x200012ec
 800cbfc:	200012f0 	.word	0x200012f0

0800cc00 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800cc00:	b580      	push	{r7, lr}
 800cc02:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800cc04:	f7f9 f88e 	bl	8005d24 <HAL_GetTick>
 800cc08:	4602      	mov	r2, r0
 800cc0a:	4b06      	ldr	r3, [pc, #24]	@ (800cc24 <SPI_Timer_Status+0x24>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	1ad2      	subs	r2, r2, r3
 800cc10:	4b05      	ldr	r3, [pc, #20]	@ (800cc28 <SPI_Timer_Status+0x28>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	bf34      	ite	cc
 800cc18:	2301      	movcc	r3, #1
 800cc1a:	2300      	movcs	r3, #0
 800cc1c:	b2db      	uxtb	r3, r3
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200012ec 	.word	0x200012ec
 800cc28:	200012f0 	.word	0x200012f0

0800cc2c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af02      	add	r7, sp, #8
 800cc32:	4603      	mov	r3, r0
 800cc34:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800cc36:	f107 020f 	add.w	r2, r7, #15
 800cc3a:	1df9      	adds	r1, r7, #7
 800cc3c:	2332      	movs	r3, #50	@ 0x32
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	2301      	movs	r3, #1
 800cc42:	4804      	ldr	r0, [pc, #16]	@ (800cc54 <xchg_spi+0x28>)
 800cc44:	f7fc f88c 	bl	8008d60 <HAL_SPI_TransmitReceive>
    return rxDat;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	200003e4 	.word	0x200003e4

0800cc58 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800cc62:	2300      	movs	r3, #0
 800cc64:	60fb      	str	r3, [r7, #12]
 800cc66:	e00a      	b.n	800cc7e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	18d4      	adds	r4, r2, r3
 800cc6e:	20ff      	movs	r0, #255	@ 0xff
 800cc70:	f7ff ffdc 	bl	800cc2c <xchg_spi>
 800cc74:	4603      	mov	r3, r0
 800cc76:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d3f0      	bcc.n	800cc68 <rcvr_spi_multi+0x10>
	}
}
 800cc86:	bf00      	nop
 800cc88:	bf00      	nop
 800cc8a:	3714      	adds	r7, #20
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd90      	pop	{r4, r7, pc}

0800cc90 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b082      	sub	sp, #8
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	4803      	ldr	r0, [pc, #12]	@ (800ccb4 <xmit_spi_multi+0x24>)
 800cca6:	f7fb fee6 	bl	8008a76 <HAL_SPI_Transmit>
}
 800ccaa:	bf00      	nop
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	200003e4 	.word	0x200003e4

0800ccb8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b086      	sub	sp, #24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ccc0:	f7f9 f830 	bl	8005d24 <HAL_GetTick>
 800ccc4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ccca:	20ff      	movs	r0, #255	@ 0xff
 800cccc:	f7ff ffae 	bl	800cc2c <xchg_spi>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
 800ccd6:	2bff      	cmp	r3, #255	@ 0xff
 800ccd8:	d007      	beq.n	800ccea <wait_ready+0x32>
 800ccda:	f7f9 f823 	bl	8005d24 <HAL_GetTick>
 800ccde:	4602      	mov	r2, r0
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	1ad3      	subs	r3, r2, r3
 800cce4:	693a      	ldr	r2, [r7, #16]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d8ef      	bhi.n	800ccca <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800ccea:	7bfb      	ldrb	r3, [r7, #15]
 800ccec:	2bff      	cmp	r3, #255	@ 0xff
 800ccee:	bf0c      	ite	eq
 800ccf0:	2301      	moveq	r3, #1
 800ccf2:	2300      	movne	r3, #0
 800ccf4:	b2db      	uxtb	r3, r3
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3718      	adds	r7, #24
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
	...

0800cd00 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800cd04:	2201      	movs	r2, #1
 800cd06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800cd0a:	4804      	ldr	r0, [pc, #16]	@ (800cd1c <despiselect+0x1c>)
 800cd0c:	f7f9 feea 	bl	8006ae4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800cd10:	20ff      	movs	r0, #255	@ 0xff
 800cd12:	f7ff ff8b 	bl	800cc2c <xchg_spi>

}
 800cd16:	bf00      	nop
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	40020400 	.word	0x40020400

0800cd20 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800cd24:	2200      	movs	r2, #0
 800cd26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800cd2a:	480a      	ldr	r0, [pc, #40]	@ (800cd54 <spiselect+0x34>)
 800cd2c:	f7f9 feda 	bl	8006ae4 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800cd30:	20ff      	movs	r0, #255	@ 0xff
 800cd32:	f7ff ff7b 	bl	800cc2c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800cd36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800cd3a:	f7ff ffbd 	bl	800ccb8 <wait_ready>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <spiselect+0x28>
 800cd44:	2301      	movs	r3, #1
 800cd46:	e002      	b.n	800cd4e <spiselect+0x2e>

	despiselect();
 800cd48:	f7ff ffda 	bl	800cd00 <despiselect>
	return 0;	/* Timeout */
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	40020400 	.word	0x40020400

0800cd58 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b084      	sub	sp, #16
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
 800cd60:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800cd62:	20c8      	movs	r0, #200	@ 0xc8
 800cd64:	f7ff ff38 	bl	800cbd8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800cd68:	20ff      	movs	r0, #255	@ 0xff
 800cd6a:	f7ff ff5f 	bl	800cc2c <xchg_spi>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
 800cd74:	2bff      	cmp	r3, #255	@ 0xff
 800cd76:	d104      	bne.n	800cd82 <rcvr_datablock+0x2a>
 800cd78:	f7ff ff42 	bl	800cc00 <SPI_Timer_Status>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1f2      	bne.n	800cd68 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800cd82:	7bfb      	ldrb	r3, [r7, #15]
 800cd84:	2bfe      	cmp	r3, #254	@ 0xfe
 800cd86:	d001      	beq.n	800cd8c <rcvr_datablock+0x34>
 800cd88:	2300      	movs	r3, #0
 800cd8a:	e00a      	b.n	800cda2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f7ff ff62 	bl	800cc58 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800cd94:	20ff      	movs	r0, #255	@ 0xff
 800cd96:	f7ff ff49 	bl	800cc2c <xchg_spi>
 800cd9a:	20ff      	movs	r0, #255	@ 0xff
 800cd9c:	f7ff ff46 	bl	800cc2c <xchg_spi>

	return 1;						/* Function succeeded */
 800cda0:	2301      	movs	r3, #1
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b084      	sub	sp, #16
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6078      	str	r0, [r7, #4]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800cdb6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800cdba:	f7ff ff7d 	bl	800ccb8 <wait_ready>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d101      	bne.n	800cdc8 <xmit_datablock+0x1e>
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e01e      	b.n	800ce06 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800cdc8:	78fb      	ldrb	r3, [r7, #3]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7ff ff2e 	bl	800cc2c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800cdd0:	78fb      	ldrb	r3, [r7, #3]
 800cdd2:	2bfd      	cmp	r3, #253	@ 0xfd
 800cdd4:	d016      	beq.n	800ce04 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800cdd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff ff58 	bl	800cc90 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800cde0:	20ff      	movs	r0, #255	@ 0xff
 800cde2:	f7ff ff23 	bl	800cc2c <xchg_spi>
 800cde6:	20ff      	movs	r0, #255	@ 0xff
 800cde8:	f7ff ff20 	bl	800cc2c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800cdec:	20ff      	movs	r0, #255	@ 0xff
 800cdee:	f7ff ff1d 	bl	800cc2c <xchg_spi>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800cdf6:	7bfb      	ldrb	r3, [r7, #15]
 800cdf8:	f003 031f 	and.w	r3, r3, #31
 800cdfc:	2b05      	cmp	r3, #5
 800cdfe:	d001      	beq.n	800ce04 <xmit_datablock+0x5a>
 800ce00:	2300      	movs	r3, #0
 800ce02:	e000      	b.n	800ce06 <xmit_datablock+0x5c>
	}
	return 1;
 800ce04:	2301      	movs	r3, #1
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b084      	sub	sp, #16
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	4603      	mov	r3, r0
 800ce16:	6039      	str	r1, [r7, #0]
 800ce18:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ce1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	da0e      	bge.n	800ce40 <send_cmd+0x32>
		cmd &= 0x7F;
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ce28:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	2037      	movs	r0, #55	@ 0x37
 800ce2e:	f7ff ffee 	bl	800ce0e <send_cmd>
 800ce32:	4603      	mov	r3, r0
 800ce34:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b01      	cmp	r3, #1
 800ce3a:	d901      	bls.n	800ce40 <send_cmd+0x32>
 800ce3c:	7bbb      	ldrb	r3, [r7, #14]
 800ce3e:	e051      	b.n	800cee4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	2b0c      	cmp	r3, #12
 800ce44:	d008      	beq.n	800ce58 <send_cmd+0x4a>
		despiselect();
 800ce46:	f7ff ff5b 	bl	800cd00 <despiselect>
		if (!spiselect()) return 0xFF;
 800ce4a:	f7ff ff69 	bl	800cd20 <spiselect>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d101      	bne.n	800ce58 <send_cmd+0x4a>
 800ce54:	23ff      	movs	r3, #255	@ 0xff
 800ce56:	e045      	b.n	800cee4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	4618      	mov	r0, r3
 800ce62:	f7ff fee3 	bl	800cc2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	0e1b      	lsrs	r3, r3, #24
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7ff fedd 	bl	800cc2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	0c1b      	lsrs	r3, r3, #16
 800ce76:	b2db      	uxtb	r3, r3
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff fed7 	bl	800cc2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	0a1b      	lsrs	r3, r3, #8
 800ce82:	b2db      	uxtb	r3, r3
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7ff fed1 	bl	800cc2c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7ff fecc 	bl	800cc2c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ce94:	2301      	movs	r3, #1
 800ce96:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ce98:	79fb      	ldrb	r3, [r7, #7]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <send_cmd+0x94>
 800ce9e:	2395      	movs	r3, #149	@ 0x95
 800cea0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b08      	cmp	r3, #8
 800cea6:	d101      	bne.n	800ceac <send_cmd+0x9e>
 800cea8:	2387      	movs	r3, #135	@ 0x87
 800ceaa:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff febc 	bl	800cc2c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b0c      	cmp	r3, #12
 800ceb8:	d102      	bne.n	800cec0 <send_cmd+0xb2>
 800ceba:	20ff      	movs	r0, #255	@ 0xff
 800cebc:	f7ff feb6 	bl	800cc2c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800cec0:	230a      	movs	r3, #10
 800cec2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800cec4:	20ff      	movs	r0, #255	@ 0xff
 800cec6:	f7ff feb1 	bl	800cc2c <xchg_spi>
 800ceca:	4603      	mov	r3, r0
 800cecc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800cece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	da05      	bge.n	800cee2 <send_cmd+0xd4>
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	3b01      	subs	r3, #1
 800ceda:	73fb      	strb	r3, [r7, #15]
 800cedc:	7bfb      	ldrb	r3, [r7, #15]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f0      	bne.n	800cec4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800cee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ceec:	b590      	push	{r4, r7, lr}
 800ceee:	b085      	sub	sp, #20
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <USER_SPI_initialize+0x14>
 800cefc:	2301      	movs	r3, #1
 800cefe:	e0dc      	b.n	800d0ba <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800cf00:	4b70      	ldr	r3, [pc, #448]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	f003 0302 	and.w	r3, r3, #2
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <USER_SPI_initialize+0x2a>
 800cf0e:	4b6d      	ldr	r3, [pc, #436]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	e0d1      	b.n	800d0ba <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800cf16:	4b6b      	ldr	r3, [pc, #428]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	4b6a      	ldr	r3, [pc, #424]	@ (800d0c8 <USER_SPI_initialize+0x1dc>)
 800cf20:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800cf22:	4b6a      	ldr	r3, [pc, #424]	@ (800d0cc <USER_SPI_initialize+0x1e0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800cf2c:	4b67      	ldr	r3, [pc, #412]	@ (800d0cc <USER_SPI_initialize+0x1e0>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800cf34:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800cf36:	230a      	movs	r3, #10
 800cf38:	73fb      	strb	r3, [r7, #15]
 800cf3a:	e005      	b.n	800cf48 <USER_SPI_initialize+0x5c>
 800cf3c:	20ff      	movs	r0, #255	@ 0xff
 800cf3e:	f7ff fe75 	bl	800cc2c <xchg_spi>
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	3b01      	subs	r3, #1
 800cf46:	73fb      	strb	r3, [r7, #15]
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d1f6      	bne.n	800cf3c <USER_SPI_initialize+0x50>

	ty = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800cf52:	2100      	movs	r1, #0
 800cf54:	2000      	movs	r0, #0
 800cf56:	f7ff ff5a 	bl	800ce0e <send_cmd>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	f040 808b 	bne.w	800d078 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800cf62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cf66:	f7ff fe37 	bl	800cbd8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800cf6a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800cf6e:	2008      	movs	r0, #8
 800cf70:	f7ff ff4d 	bl	800ce0e <send_cmd>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d151      	bne.n	800d01e <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	73fb      	strb	r3, [r7, #15]
 800cf7e:	e00d      	b.n	800cf9c <USER_SPI_initialize+0xb0>
 800cf80:	7bfc      	ldrb	r4, [r7, #15]
 800cf82:	20ff      	movs	r0, #255	@ 0xff
 800cf84:	f7ff fe52 	bl	800cc2c <xchg_spi>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	f104 0310 	add.w	r3, r4, #16
 800cf90:	443b      	add	r3, r7
 800cf92:	f803 2c08 	strb.w	r2, [r3, #-8]
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
 800cf98:	3301      	adds	r3, #1
 800cf9a:	73fb      	strb	r3, [r7, #15]
 800cf9c:	7bfb      	ldrb	r3, [r7, #15]
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d9ee      	bls.n	800cf80 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800cfa2:	7abb      	ldrb	r3, [r7, #10]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d167      	bne.n	800d078 <USER_SPI_initialize+0x18c>
 800cfa8:	7afb      	ldrb	r3, [r7, #11]
 800cfaa:	2baa      	cmp	r3, #170	@ 0xaa
 800cfac:	d164      	bne.n	800d078 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800cfae:	bf00      	nop
 800cfb0:	f7ff fe26 	bl	800cc00 <SPI_Timer_Status>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d007      	beq.n	800cfca <USER_SPI_initialize+0xde>
 800cfba:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800cfbe:	20a9      	movs	r0, #169	@ 0xa9
 800cfc0:	f7ff ff25 	bl	800ce0e <send_cmd>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1f2      	bne.n	800cfb0 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800cfca:	f7ff fe19 	bl	800cc00 <SPI_Timer_Status>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d051      	beq.n	800d078 <USER_SPI_initialize+0x18c>
 800cfd4:	2100      	movs	r1, #0
 800cfd6:	203a      	movs	r0, #58	@ 0x3a
 800cfd8:	f7ff ff19 	bl	800ce0e <send_cmd>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d14a      	bne.n	800d078 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	73fb      	strb	r3, [r7, #15]
 800cfe6:	e00d      	b.n	800d004 <USER_SPI_initialize+0x118>
 800cfe8:	7bfc      	ldrb	r4, [r7, #15]
 800cfea:	20ff      	movs	r0, #255	@ 0xff
 800cfec:	f7ff fe1e 	bl	800cc2c <xchg_spi>
 800cff0:	4603      	mov	r3, r0
 800cff2:	461a      	mov	r2, r3
 800cff4:	f104 0310 	add.w	r3, r4, #16
 800cff8:	443b      	add	r3, r7
 800cffa:	f803 2c08 	strb.w	r2, [r3, #-8]
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	3301      	adds	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
 800d004:	7bfb      	ldrb	r3, [r7, #15]
 800d006:	2b03      	cmp	r3, #3
 800d008:	d9ee      	bls.n	800cfe8 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800d00a:	7a3b      	ldrb	r3, [r7, #8]
 800d00c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <USER_SPI_initialize+0x12c>
 800d014:	230c      	movs	r3, #12
 800d016:	e000      	b.n	800d01a <USER_SPI_initialize+0x12e>
 800d018:	2304      	movs	r3, #4
 800d01a:	737b      	strb	r3, [r7, #13]
 800d01c:	e02c      	b.n	800d078 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800d01e:	2100      	movs	r1, #0
 800d020:	20a9      	movs	r0, #169	@ 0xa9
 800d022:	f7ff fef4 	bl	800ce0e <send_cmd>
 800d026:	4603      	mov	r3, r0
 800d028:	2b01      	cmp	r3, #1
 800d02a:	d804      	bhi.n	800d036 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800d02c:	2302      	movs	r3, #2
 800d02e:	737b      	strb	r3, [r7, #13]
 800d030:	23a9      	movs	r3, #169	@ 0xa9
 800d032:	73bb      	strb	r3, [r7, #14]
 800d034:	e003      	b.n	800d03e <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800d036:	2301      	movs	r3, #1
 800d038:	737b      	strb	r3, [r7, #13]
 800d03a:	2301      	movs	r3, #1
 800d03c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800d03e:	bf00      	nop
 800d040:	f7ff fdde 	bl	800cc00 <SPI_Timer_Status>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d007      	beq.n	800d05a <USER_SPI_initialize+0x16e>
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	2100      	movs	r1, #0
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fedd 	bl	800ce0e <send_cmd>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d1f2      	bne.n	800d040 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800d05a:	f7ff fdd1 	bl	800cc00 <SPI_Timer_Status>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b00      	cmp	r3, #0
 800d062:	d007      	beq.n	800d074 <USER_SPI_initialize+0x188>
 800d064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d068:	2010      	movs	r0, #16
 800d06a:	f7ff fed0 	bl	800ce0e <send_cmd>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <USER_SPI_initialize+0x18c>
				ty = 0;
 800d074:	2300      	movs	r3, #0
 800d076:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800d078:	4a15      	ldr	r2, [pc, #84]	@ (800d0d0 <USER_SPI_initialize+0x1e4>)
 800d07a:	7b7b      	ldrb	r3, [r7, #13]
 800d07c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800d07e:	f7ff fe3f 	bl	800cd00 <despiselect>

	if (ty) {			/* OK */
 800d082:	7b7b      	ldrb	r3, [r7, #13]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d012      	beq.n	800d0ae <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800d088:	4b10      	ldr	r3, [pc, #64]	@ (800d0cc <USER_SPI_initialize+0x1e0>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800d092:	4b0e      	ldr	r3, [pc, #56]	@ (800d0cc <USER_SPI_initialize+0x1e0>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f042 0210 	orr.w	r2, r2, #16
 800d09a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800d09c:	4b09      	ldr	r3, [pc, #36]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	b2db      	uxtb	r3, r3
 800d0a2:	f023 0301 	bic.w	r3, r3, #1
 800d0a6:	b2da      	uxtb	r2, r3
 800d0a8:	4b06      	ldr	r3, [pc, #24]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800d0aa:	701a      	strb	r2, [r3, #0]
 800d0ac:	e002      	b.n	800d0b4 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800d0ae:	4b05      	ldr	r3, [pc, #20]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800d0b0:	2201      	movs	r2, #1
 800d0b2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800d0b4:	4b03      	ldr	r3, [pc, #12]	@ (800d0c4 <USER_SPI_initialize+0x1d8>)
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	b2db      	uxtb	r3, r3
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd90      	pop	{r4, r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000074 	.word	0x20000074
 800d0c8:	200012e4 	.word	0x200012e4
 800d0cc:	200003e4 	.word	0x200003e4
 800d0d0:	200012e8 	.word	0x200012e8

0800d0d4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	b083      	sub	sp, #12
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800d0de:	79fb      	ldrb	r3, [r7, #7]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d001      	beq.n	800d0e8 <USER_SPI_status+0x14>
 800d0e4:	2301      	movs	r3, #1
 800d0e6:	e002      	b.n	800d0ee <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800d0e8:	4b04      	ldr	r3, [pc, #16]	@ (800d0fc <USER_SPI_status+0x28>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b2db      	uxtb	r3, r3
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr
 800d0fa:	bf00      	nop
 800d0fc:	20000074 	.word	0x20000074

0800d100 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	60b9      	str	r1, [r7, #8]
 800d108:	607a      	str	r2, [r7, #4]
 800d10a:	603b      	str	r3, [r7, #0]
 800d10c:	4603      	mov	r3, r0
 800d10e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d110:	7bfb      	ldrb	r3, [r7, #15]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d102      	bne.n	800d11c <USER_SPI_read+0x1c>
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d101      	bne.n	800d120 <USER_SPI_read+0x20>
 800d11c:	2304      	movs	r3, #4
 800d11e:	e04d      	b.n	800d1bc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d120:	4b28      	ldr	r3, [pc, #160]	@ (800d1c4 <USER_SPI_read+0xc4>)
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	b2db      	uxtb	r3, r3
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <USER_SPI_read+0x32>
 800d12e:	2303      	movs	r3, #3
 800d130:	e044      	b.n	800d1bc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800d132:	4b25      	ldr	r3, [pc, #148]	@ (800d1c8 <USER_SPI_read+0xc8>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	f003 0308 	and.w	r3, r3, #8
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d102      	bne.n	800d144 <USER_SPI_read+0x44>
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	025b      	lsls	r3, r3, #9
 800d142:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	2b01      	cmp	r3, #1
 800d148:	d111      	bne.n	800d16e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	2011      	movs	r0, #17
 800d14e:	f7ff fe5e 	bl	800ce0e <send_cmd>
 800d152:	4603      	mov	r3, r0
 800d154:	2b00      	cmp	r3, #0
 800d156:	d129      	bne.n	800d1ac <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800d158:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d15c:	68b8      	ldr	r0, [r7, #8]
 800d15e:	f7ff fdfb 	bl	800cd58 <rcvr_datablock>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d021      	beq.n	800d1ac <USER_SPI_read+0xac>
			count = 0;
 800d168:	2300      	movs	r3, #0
 800d16a:	603b      	str	r3, [r7, #0]
 800d16c:	e01e      	b.n	800d1ac <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	2012      	movs	r0, #18
 800d172:	f7ff fe4c 	bl	800ce0e <send_cmd>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d117      	bne.n	800d1ac <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800d17c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d180:	68b8      	ldr	r0, [r7, #8]
 800d182:	f7ff fde9 	bl	800cd58 <rcvr_datablock>
 800d186:	4603      	mov	r3, r0
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00a      	beq.n	800d1a2 <USER_SPI_read+0xa2>
				buff += 512;
 800d18c:	68bb      	ldr	r3, [r7, #8]
 800d18e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d192:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	3b01      	subs	r3, #1
 800d198:	603b      	str	r3, [r7, #0]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1ed      	bne.n	800d17c <USER_SPI_read+0x7c>
 800d1a0:	e000      	b.n	800d1a4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800d1a2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800d1a4:	2100      	movs	r1, #0
 800d1a6:	200c      	movs	r0, #12
 800d1a8:	f7ff fe31 	bl	800ce0e <send_cmd>
		}
	}
	despiselect();
 800d1ac:	f7ff fda8 	bl	800cd00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	bf14      	ite	ne
 800d1b6:	2301      	movne	r3, #1
 800d1b8:	2300      	moveq	r3, #0
 800d1ba:	b2db      	uxtb	r3, r3
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3710      	adds	r7, #16
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	bd80      	pop	{r7, pc}
 800d1c4:	20000074 	.word	0x20000074
 800d1c8:	200012e8 	.word	0x200012e8

0800d1cc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
 800d1d6:	603b      	str	r3, [r7, #0]
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d102      	bne.n	800d1e8 <USER_SPI_write+0x1c>
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <USER_SPI_write+0x20>
 800d1e8:	2304      	movs	r3, #4
 800d1ea:	e063      	b.n	800d2b4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800d1ec:	4b33      	ldr	r3, [pc, #204]	@ (800d2bc <USER_SPI_write+0xf0>)
 800d1ee:	781b      	ldrb	r3, [r3, #0]
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d001      	beq.n	800d1fe <USER_SPI_write+0x32>
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	e05a      	b.n	800d2b4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800d1fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d2bc <USER_SPI_write+0xf0>)
 800d200:	781b      	ldrb	r3, [r3, #0]
 800d202:	b2db      	uxtb	r3, r3
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <USER_SPI_write+0x44>
 800d20c:	2302      	movs	r3, #2
 800d20e:	e051      	b.n	800d2b4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800d210:	4b2b      	ldr	r3, [pc, #172]	@ (800d2c0 <USER_SPI_write+0xf4>)
 800d212:	781b      	ldrb	r3, [r3, #0]
 800d214:	f003 0308 	and.w	r3, r3, #8
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d102      	bne.n	800d222 <USER_SPI_write+0x56>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	025b      	lsls	r3, r3, #9
 800d220:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d110      	bne.n	800d24a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	2018      	movs	r0, #24
 800d22c:	f7ff fdef 	bl	800ce0e <send_cmd>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d136      	bne.n	800d2a4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800d236:	21fe      	movs	r1, #254	@ 0xfe
 800d238:	68b8      	ldr	r0, [r7, #8]
 800d23a:	f7ff fdb6 	bl	800cdaa <xmit_datablock>
 800d23e:	4603      	mov	r3, r0
 800d240:	2b00      	cmp	r3, #0
 800d242:	d02f      	beq.n	800d2a4 <USER_SPI_write+0xd8>
			count = 0;
 800d244:	2300      	movs	r3, #0
 800d246:	603b      	str	r3, [r7, #0]
 800d248:	e02c      	b.n	800d2a4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800d24a:	4b1d      	ldr	r3, [pc, #116]	@ (800d2c0 <USER_SPI_write+0xf4>)
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	f003 0306 	and.w	r3, r3, #6
 800d252:	2b00      	cmp	r3, #0
 800d254:	d003      	beq.n	800d25e <USER_SPI_write+0x92>
 800d256:	6839      	ldr	r1, [r7, #0]
 800d258:	2097      	movs	r0, #151	@ 0x97
 800d25a:	f7ff fdd8 	bl	800ce0e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800d25e:	6879      	ldr	r1, [r7, #4]
 800d260:	2019      	movs	r0, #25
 800d262:	f7ff fdd4 	bl	800ce0e <send_cmd>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d11b      	bne.n	800d2a4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800d26c:	21fc      	movs	r1, #252	@ 0xfc
 800d26e:	68b8      	ldr	r0, [r7, #8]
 800d270:	f7ff fd9b 	bl	800cdaa <xmit_datablock>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <USER_SPI_write+0xc4>
				buff += 512;
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800d280:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	3b01      	subs	r3, #1
 800d286:	603b      	str	r3, [r7, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d1ee      	bne.n	800d26c <USER_SPI_write+0xa0>
 800d28e:	e000      	b.n	800d292 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800d290:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800d292:	21fd      	movs	r1, #253	@ 0xfd
 800d294:	2000      	movs	r0, #0
 800d296:	f7ff fd88 	bl	800cdaa <xmit_datablock>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <USER_SPI_write+0xd8>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800d2a4:	f7ff fd2c 	bl	800cd00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	bf14      	ite	ne
 800d2ae:	2301      	movne	r3, #1
 800d2b0:	2300      	moveq	r3, #0
 800d2b2:	b2db      	uxtb	r3, r3
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	20000074 	.word	0x20000074
 800d2c0:	200012e8 	.word	0x200012e8

0800d2c4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b08c      	sub	sp, #48	@ 0x30
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	603a      	str	r2, [r7, #0]
 800d2ce:	71fb      	strb	r3, [r7, #7]
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800d2d4:	79fb      	ldrb	r3, [r7, #7]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <USER_SPI_ioctl+0x1a>
 800d2da:	2304      	movs	r3, #4
 800d2dc:	e15a      	b.n	800d594 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800d2de:	4baf      	ldr	r3, [pc, #700]	@ (800d59c <USER_SPI_ioctl+0x2d8>)
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	f003 0301 	and.w	r3, r3, #1
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d001      	beq.n	800d2f0 <USER_SPI_ioctl+0x2c>
 800d2ec:	2303      	movs	r3, #3
 800d2ee:	e151      	b.n	800d594 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800d2f6:	79bb      	ldrb	r3, [r7, #6]
 800d2f8:	2b04      	cmp	r3, #4
 800d2fa:	f200 8136 	bhi.w	800d56a <USER_SPI_ioctl+0x2a6>
 800d2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d304 <USER_SPI_ioctl+0x40>)
 800d300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d304:	0800d319 	.word	0x0800d319
 800d308:	0800d32d 	.word	0x0800d32d
 800d30c:	0800d56b 	.word	0x0800d56b
 800d310:	0800d3d9 	.word	0x0800d3d9
 800d314:	0800d4cf 	.word	0x0800d4cf
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800d318:	f7ff fd02 	bl	800cd20 <spiselect>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f000 8127 	beq.w	800d572 <USER_SPI_ioctl+0x2ae>
 800d324:	2300      	movs	r3, #0
 800d326:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800d32a:	e122      	b.n	800d572 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800d32c:	2100      	movs	r1, #0
 800d32e:	2009      	movs	r0, #9
 800d330:	f7ff fd6d 	bl	800ce0e <send_cmd>
 800d334:	4603      	mov	r3, r0
 800d336:	2b00      	cmp	r3, #0
 800d338:	f040 811d 	bne.w	800d576 <USER_SPI_ioctl+0x2b2>
 800d33c:	f107 030c 	add.w	r3, r7, #12
 800d340:	2110      	movs	r1, #16
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fd08 	bl	800cd58 <rcvr_datablock>
 800d348:	4603      	mov	r3, r0
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 8113 	beq.w	800d576 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800d350:	7b3b      	ldrb	r3, [r7, #12]
 800d352:	099b      	lsrs	r3, r3, #6
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b01      	cmp	r3, #1
 800d358:	d111      	bne.n	800d37e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800d35a:	7d7b      	ldrb	r3, [r7, #21]
 800d35c:	461a      	mov	r2, r3
 800d35e:	7d3b      	ldrb	r3, [r7, #20]
 800d360:	021b      	lsls	r3, r3, #8
 800d362:	4413      	add	r3, r2
 800d364:	461a      	mov	r2, r3
 800d366:	7cfb      	ldrb	r3, [r7, #19]
 800d368:	041b      	lsls	r3, r3, #16
 800d36a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800d36e:	4413      	add	r3, r2
 800d370:	3301      	adds	r3, #1
 800d372:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800d374:	69fb      	ldr	r3, [r7, #28]
 800d376:	029a      	lsls	r2, r3, #10
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	601a      	str	r2, [r3, #0]
 800d37c:	e028      	b.n	800d3d0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800d37e:	7c7b      	ldrb	r3, [r7, #17]
 800d380:	f003 030f 	and.w	r3, r3, #15
 800d384:	b2da      	uxtb	r2, r3
 800d386:	7dbb      	ldrb	r3, [r7, #22]
 800d388:	09db      	lsrs	r3, r3, #7
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	4413      	add	r3, r2
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	7d7b      	ldrb	r3, [r7, #21]
 800d392:	005b      	lsls	r3, r3, #1
 800d394:	b2db      	uxtb	r3, r3
 800d396:	f003 0306 	and.w	r3, r3, #6
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	4413      	add	r3, r2
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	3302      	adds	r3, #2
 800d3a2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800d3a6:	7d3b      	ldrb	r3, [r7, #20]
 800d3a8:	099b      	lsrs	r3, r3, #6
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	7cfb      	ldrb	r3, [r7, #19]
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	441a      	add	r2, r3
 800d3b4:	7cbb      	ldrb	r3, [r7, #18]
 800d3b6:	029b      	lsls	r3, r3, #10
 800d3b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800d3bc:	4413      	add	r3, r2
 800d3be:	3301      	adds	r3, #1
 800d3c0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800d3c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d3c6:	3b09      	subs	r3, #9
 800d3c8:	69fa      	ldr	r2, [r7, #28]
 800d3ca:	409a      	lsls	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800d3d6:	e0ce      	b.n	800d576 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800d3d8:	4b71      	ldr	r3, [pc, #452]	@ (800d5a0 <USER_SPI_ioctl+0x2dc>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	f003 0304 	and.w	r3, r3, #4
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d031      	beq.n	800d448 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	208d      	movs	r0, #141	@ 0x8d
 800d3e8:	f7ff fd11 	bl	800ce0e <send_cmd>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f040 80c3 	bne.w	800d57a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800d3f4:	20ff      	movs	r0, #255	@ 0xff
 800d3f6:	f7ff fc19 	bl	800cc2c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800d3fa:	f107 030c 	add.w	r3, r7, #12
 800d3fe:	2110      	movs	r1, #16
 800d400:	4618      	mov	r0, r3
 800d402:	f7ff fca9 	bl	800cd58 <rcvr_datablock>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f000 80b6 	beq.w	800d57a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800d40e:	2330      	movs	r3, #48	@ 0x30
 800d410:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800d414:	e007      	b.n	800d426 <USER_SPI_ioctl+0x162>
 800d416:	20ff      	movs	r0, #255	@ 0xff
 800d418:	f7ff fc08 	bl	800cc2c <xchg_spi>
 800d41c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d420:	3b01      	subs	r3, #1
 800d422:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800d426:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1f3      	bne.n	800d416 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800d42e:	7dbb      	ldrb	r3, [r7, #22]
 800d430:	091b      	lsrs	r3, r3, #4
 800d432:	b2db      	uxtb	r3, r3
 800d434:	461a      	mov	r2, r3
 800d436:	2310      	movs	r3, #16
 800d438:	fa03 f202 	lsl.w	r2, r3, r2
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800d440:	2300      	movs	r3, #0
 800d442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800d446:	e098      	b.n	800d57a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800d448:	2100      	movs	r1, #0
 800d44a:	2009      	movs	r0, #9
 800d44c:	f7ff fcdf 	bl	800ce0e <send_cmd>
 800d450:	4603      	mov	r3, r0
 800d452:	2b00      	cmp	r3, #0
 800d454:	f040 8091 	bne.w	800d57a <USER_SPI_ioctl+0x2b6>
 800d458:	f107 030c 	add.w	r3, r7, #12
 800d45c:	2110      	movs	r1, #16
 800d45e:	4618      	mov	r0, r3
 800d460:	f7ff fc7a 	bl	800cd58 <rcvr_datablock>
 800d464:	4603      	mov	r3, r0
 800d466:	2b00      	cmp	r3, #0
 800d468:	f000 8087 	beq.w	800d57a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800d46c:	4b4c      	ldr	r3, [pc, #304]	@ (800d5a0 <USER_SPI_ioctl+0x2dc>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	f003 0302 	and.w	r3, r3, #2
 800d474:	2b00      	cmp	r3, #0
 800d476:	d012      	beq.n	800d49e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800d478:	7dbb      	ldrb	r3, [r7, #22]
 800d47a:	005b      	lsls	r3, r3, #1
 800d47c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800d480:	7dfa      	ldrb	r2, [r7, #23]
 800d482:	09d2      	lsrs	r2, r2, #7
 800d484:	b2d2      	uxtb	r2, r2
 800d486:	4413      	add	r3, r2
 800d488:	1c5a      	adds	r2, r3, #1
 800d48a:	7e7b      	ldrb	r3, [r7, #25]
 800d48c:	099b      	lsrs	r3, r3, #6
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	3b01      	subs	r3, #1
 800d492:	fa02 f303 	lsl.w	r3, r2, r3
 800d496:	461a      	mov	r2, r3
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]
 800d49c:	e013      	b.n	800d4c6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800d49e:	7dbb      	ldrb	r3, [r7, #22]
 800d4a0:	109b      	asrs	r3, r3, #2
 800d4a2:	b29b      	uxth	r3, r3
 800d4a4:	f003 031f 	and.w	r3, r3, #31
 800d4a8:	3301      	adds	r3, #1
 800d4aa:	7dfa      	ldrb	r2, [r7, #23]
 800d4ac:	00d2      	lsls	r2, r2, #3
 800d4ae:	f002 0218 	and.w	r2, r2, #24
 800d4b2:	7df9      	ldrb	r1, [r7, #23]
 800d4b4:	0949      	lsrs	r1, r1, #5
 800d4b6:	b2c9      	uxtb	r1, r1
 800d4b8:	440a      	add	r2, r1
 800d4ba:	3201      	adds	r2, #1
 800d4bc:	fb02 f303 	mul.w	r3, r2, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800d4cc:	e055      	b.n	800d57a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d4ce:	4b34      	ldr	r3, [pc, #208]	@ (800d5a0 <USER_SPI_ioctl+0x2dc>)
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	f003 0306 	and.w	r3, r3, #6
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d051      	beq.n	800d57e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d4da:	f107 020c 	add.w	r2, r7, #12
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	210b      	movs	r1, #11
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff feee 	bl	800d2c4 <USER_SPI_ioctl>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d149      	bne.n	800d582 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d4ee:	7b3b      	ldrb	r3, [r7, #12]
 800d4f0:	099b      	lsrs	r3, r3, #6
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d104      	bne.n	800d502 <USER_SPI_ioctl+0x23e>
 800d4f8:	7dbb      	ldrb	r3, [r7, #22]
 800d4fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d041      	beq.n	800d586 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	623b      	str	r3, [r7, #32]
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800d512:	4b23      	ldr	r3, [pc, #140]	@ (800d5a0 <USER_SPI_ioctl+0x2dc>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	f003 0308 	and.w	r3, r3, #8
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d105      	bne.n	800d52a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800d51e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d520:	025b      	lsls	r3, r3, #9
 800d522:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d526:	025b      	lsls	r3, r3, #9
 800d528:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800d52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d52c:	2020      	movs	r0, #32
 800d52e:	f7ff fc6e 	bl	800ce0e <send_cmd>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d128      	bne.n	800d58a <USER_SPI_ioctl+0x2c6>
 800d538:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d53a:	2021      	movs	r0, #33	@ 0x21
 800d53c:	f7ff fc67 	bl	800ce0e <send_cmd>
 800d540:	4603      	mov	r3, r0
 800d542:	2b00      	cmp	r3, #0
 800d544:	d121      	bne.n	800d58a <USER_SPI_ioctl+0x2c6>
 800d546:	2100      	movs	r1, #0
 800d548:	2026      	movs	r0, #38	@ 0x26
 800d54a:	f7ff fc60 	bl	800ce0e <send_cmd>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b00      	cmp	r3, #0
 800d552:	d11a      	bne.n	800d58a <USER_SPI_ioctl+0x2c6>
 800d554:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d558:	f7ff fbae 	bl	800ccb8 <wait_ready>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d013      	beq.n	800d58a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800d562:	2300      	movs	r3, #0
 800d564:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800d568:	e00f      	b.n	800d58a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800d56a:	2304      	movs	r3, #4
 800d56c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d570:	e00c      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		break;
 800d572:	bf00      	nop
 800d574:	e00a      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		break;
 800d576:	bf00      	nop
 800d578:	e008      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		break;
 800d57a:	bf00      	nop
 800d57c:	e006      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800d57e:	bf00      	nop
 800d580:	e004      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800d582:	bf00      	nop
 800d584:	e002      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800d586:	bf00      	nop
 800d588:	e000      	b.n	800d58c <USER_SPI_ioctl+0x2c8>
		break;
 800d58a:	bf00      	nop
	}

	despiselect();
 800d58c:	f7ff fbb8 	bl	800cd00 <despiselect>

	return res;
 800d590:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d594:	4618      	mov	r0, r3
 800d596:	3730      	adds	r7, #48	@ 0x30
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20000074 	.word	0x20000074
 800d5a0:	200012e8 	.word	0x200012e8

0800d5a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	4a08      	ldr	r2, [pc, #32]	@ (800d5d4 <disk_status+0x30>)
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	4413      	add	r3, r2
 800d5b6:	685b      	ldr	r3, [r3, #4]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	79fa      	ldrb	r2, [r7, #7]
 800d5bc:	4905      	ldr	r1, [pc, #20]	@ (800d5d4 <disk_status+0x30>)
 800d5be:	440a      	add	r2, r1
 800d5c0:	7a12      	ldrb	r2, [r2, #8]
 800d5c2:	4610      	mov	r0, r2
 800d5c4:	4798      	blx	r3
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3710      	adds	r7, #16
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	2000131c 	.word	0x2000131c

0800d5d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b084      	sub	sp, #16
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	4a0d      	ldr	r2, [pc, #52]	@ (800d620 <disk_initialize+0x48>)
 800d5ea:	5cd3      	ldrb	r3, [r2, r3]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d111      	bne.n	800d614 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	4a0b      	ldr	r2, [pc, #44]	@ (800d620 <disk_initialize+0x48>)
 800d5f4:	2101      	movs	r1, #1
 800d5f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d5f8:	79fb      	ldrb	r3, [r7, #7]
 800d5fa:	4a09      	ldr	r2, [pc, #36]	@ (800d620 <disk_initialize+0x48>)
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	685b      	ldr	r3, [r3, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	79fa      	ldrb	r2, [r7, #7]
 800d606:	4906      	ldr	r1, [pc, #24]	@ (800d620 <disk_initialize+0x48>)
 800d608:	440a      	add	r2, r1
 800d60a:	7a12      	ldrb	r2, [r2, #8]
 800d60c:	4610      	mov	r0, r2
 800d60e:	4798      	blx	r3
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	2000131c 	.word	0x2000131c

0800d624 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d624:	b590      	push	{r4, r7, lr}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60b9      	str	r1, [r7, #8]
 800d62c:	607a      	str	r2, [r7, #4]
 800d62e:	603b      	str	r3, [r7, #0]
 800d630:	4603      	mov	r3, r0
 800d632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d634:	7bfb      	ldrb	r3, [r7, #15]
 800d636:	4a0a      	ldr	r2, [pc, #40]	@ (800d660 <disk_read+0x3c>)
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	689c      	ldr	r4, [r3, #8]
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	4a07      	ldr	r2, [pc, #28]	@ (800d660 <disk_read+0x3c>)
 800d644:	4413      	add	r3, r2
 800d646:	7a18      	ldrb	r0, [r3, #8]
 800d648:	683b      	ldr	r3, [r7, #0]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	68b9      	ldr	r1, [r7, #8]
 800d64e:	47a0      	blx	r4
 800d650:	4603      	mov	r3, r0
 800d652:	75fb      	strb	r3, [r7, #23]
  return res;
 800d654:	7dfb      	ldrb	r3, [r7, #23]
}
 800d656:	4618      	mov	r0, r3
 800d658:	371c      	adds	r7, #28
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd90      	pop	{r4, r7, pc}
 800d65e:	bf00      	nop
 800d660:	2000131c 	.word	0x2000131c

0800d664 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d664:	b590      	push	{r4, r7, lr}
 800d666:	b087      	sub	sp, #28
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60b9      	str	r1, [r7, #8]
 800d66c:	607a      	str	r2, [r7, #4]
 800d66e:	603b      	str	r3, [r7, #0]
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	4a0a      	ldr	r2, [pc, #40]	@ (800d6a0 <disk_write+0x3c>)
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	685b      	ldr	r3, [r3, #4]
 800d67e:	68dc      	ldr	r4, [r3, #12]
 800d680:	7bfb      	ldrb	r3, [r7, #15]
 800d682:	4a07      	ldr	r2, [pc, #28]	@ (800d6a0 <disk_write+0x3c>)
 800d684:	4413      	add	r3, r2
 800d686:	7a18      	ldrb	r0, [r3, #8]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	68b9      	ldr	r1, [r7, #8]
 800d68e:	47a0      	blx	r4
 800d690:	4603      	mov	r3, r0
 800d692:	75fb      	strb	r3, [r7, #23]
  return res;
 800d694:	7dfb      	ldrb	r3, [r7, #23]
}
 800d696:	4618      	mov	r0, r3
 800d698:	371c      	adds	r7, #28
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd90      	pop	{r4, r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	2000131c 	.word	0x2000131c

0800d6a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b085      	sub	sp, #20
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d6b4:	89fb      	ldrh	r3, [r7, #14]
 800d6b6:	021b      	lsls	r3, r3, #8
 800d6b8:	b21a      	sxth	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	b21b      	sxth	r3, r3
 800d6c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3714      	adds	r7, #20
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d6d4:	b480      	push	{r7}
 800d6d6:	b085      	sub	sp, #20
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3303      	adds	r3, #3
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	021b      	lsls	r3, r3, #8
 800d6e8:	687a      	ldr	r2, [r7, #4]
 800d6ea:	3202      	adds	r2, #2
 800d6ec:	7812      	ldrb	r2, [r2, #0]
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	3201      	adds	r2, #1
 800d6fa:	7812      	ldrb	r2, [r2, #0]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	021b      	lsls	r3, r3, #8
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	7812      	ldrb	r2, [r2, #0]
 800d708:	4313      	orrs	r3, r2
 800d70a:	60fb      	str	r3, [r7, #12]
	return rv;
 800d70c:	68fb      	ldr	r3, [r7, #12]
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3714      	adds	r7, #20
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d71a:	b480      	push	{r7}
 800d71c:	b083      	sub	sp, #12
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	460b      	mov	r3, r1
 800d724:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	607a      	str	r2, [r7, #4]
 800d72c:	887a      	ldrh	r2, [r7, #2]
 800d72e:	b2d2      	uxtb	r2, r2
 800d730:	701a      	strb	r2, [r3, #0]
 800d732:	887b      	ldrh	r3, [r7, #2]
 800d734:	0a1b      	lsrs	r3, r3, #8
 800d736:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	1c5a      	adds	r2, r3, #1
 800d73c:	607a      	str	r2, [r7, #4]
 800d73e:	887a      	ldrh	r2, [r7, #2]
 800d740:	b2d2      	uxtb	r2, r2
 800d742:	701a      	strb	r2, [r3, #0]
}
 800d744:	bf00      	nop
 800d746:	370c      	adds	r7, #12
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr

0800d750 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	0a1b      	lsrs	r3, r3, #8
 800d76a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	0a1b      	lsrs	r3, r3, #8
 800d77c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	1c5a      	adds	r2, r3, #1
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	683a      	ldr	r2, [r7, #0]
 800d786:	b2d2      	uxtb	r2, r2
 800d788:	701a      	strb	r2, [r3, #0]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	0a1b      	lsrs	r3, r3, #8
 800d78e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	1c5a      	adds	r2, r3, #1
 800d794:	607a      	str	r2, [r7, #4]
 800d796:	683a      	ldr	r2, [r7, #0]
 800d798:	b2d2      	uxtb	r2, r2
 800d79a:	701a      	strb	r2, [r3, #0]
}
 800d79c:	bf00      	nop
 800d79e:	370c      	adds	r7, #12
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr

0800d7a8 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d7a8:	b480      	push	{r7}
 800d7aa:	b087      	sub	sp, #28
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	1c5a      	adds	r2, r3, #1
 800d7bc:	617a      	str	r2, [r7, #20]
 800d7be:	68ba      	ldr	r2, [r7, #8]
 800d7c0:	b2d2      	uxtb	r2, r2
 800d7c2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3b01      	subs	r3, #1
 800d7c8:	607b      	str	r3, [r7, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1f3      	bne.n	800d7b8 <mem_set+0x10>
}
 800d7d0:	bf00      	nop
 800d7d2:	bf00      	nop
 800d7d4:	371c      	adds	r7, #28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr

0800d7de <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d7de:	b480      	push	{r7}
 800d7e0:	b089      	sub	sp, #36	@ 0x24
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	60f8      	str	r0, [r7, #12]
 800d7e6:	60b9      	str	r1, [r7, #8]
 800d7e8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	61fb      	str	r3, [r7, #28]
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	1c5a      	adds	r2, r3, #1
 800d7fa:	61fa      	str	r2, [r7, #28]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	4619      	mov	r1, r3
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	61ba      	str	r2, [r7, #24]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	1acb      	subs	r3, r1, r3
 800d80a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3b01      	subs	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d002      	beq.n	800d81e <mem_cmp+0x40>
 800d818:	697b      	ldr	r3, [r7, #20]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0eb      	beq.n	800d7f6 <mem_cmp+0x18>

	return r;
 800d81e:	697b      	ldr	r3, [r7, #20]
}
 800d820:	4618      	mov	r0, r3
 800d822:	3724      	adds	r7, #36	@ 0x24
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d836:	e002      	b.n	800d83e <chk_chr+0x12>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	3301      	adds	r3, #1
 800d83c:	607b      	str	r3, [r7, #4]
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d005      	beq.n	800d852 <chk_chr+0x26>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	461a      	mov	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	4293      	cmp	r3, r2
 800d850:	d1f2      	bne.n	800d838 <chk_chr+0xc>
	return *str;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	781b      	ldrb	r3, [r3, #0]
}
 800d856:	4618      	mov	r0, r3
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr

0800d862 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d862:	b580      	push	{r7, lr}
 800d864:	b082      	sub	sp, #8
 800d866:	af00      	add	r7, sp, #0
 800d868:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d009      	beq.n	800d884 <lock_fs+0x22>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	4618      	mov	r0, r3
 800d876:	f002 f8e3 	bl	800fa40 <ff_req_grant>
 800d87a:	4603      	mov	r3, r0
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d001      	beq.n	800d884 <lock_fs+0x22>
 800d880:	2301      	movs	r3, #1
 800d882:	e000      	b.n	800d886 <lock_fs+0x24>
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	460b      	mov	r3, r1
 800d898:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00d      	beq.n	800d8bc <unlock_fs+0x2e>
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	2b0c      	cmp	r3, #12
 800d8a4:	d00a      	beq.n	800d8bc <unlock_fs+0x2e>
 800d8a6:	78fb      	ldrb	r3, [r7, #3]
 800d8a8:	2b0b      	cmp	r3, #11
 800d8aa:	d007      	beq.n	800d8bc <unlock_fs+0x2e>
 800d8ac:	78fb      	ldrb	r3, [r7, #3]
 800d8ae:	2b0f      	cmp	r3, #15
 800d8b0:	d004      	beq.n	800d8bc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f002 f8d7 	bl	800fa6a <ff_rel_grant>
	}
}
 800d8bc:	bf00      	nop
 800d8be:	3708      	adds	r7, #8
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	60fb      	str	r3, [r7, #12]
 800d8d2:	e01f      	b.n	800d914 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d8d4:	4a41      	ldr	r2, [pc, #260]	@ (800d9dc <inc_lock+0x118>)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	4413      	add	r3, r2
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d113      	bne.n	800d90e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d8e6:	4a3d      	ldr	r2, [pc, #244]	@ (800d9dc <inc_lock+0x118>)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	011b      	lsls	r3, r3, #4
 800d8ec:	4413      	add	r3, r2
 800d8ee:	3304      	adds	r3, #4
 800d8f0:	681a      	ldr	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d109      	bne.n	800d90e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d8fa:	4a38      	ldr	r2, [pc, #224]	@ (800d9dc <inc_lock+0x118>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	4413      	add	r3, r2
 800d902:	3308      	adds	r3, #8
 800d904:	681a      	ldr	r2, [r3, #0]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d006      	beq.n	800d91c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	3301      	adds	r3, #1
 800d912:	60fb      	str	r3, [r7, #12]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2b01      	cmp	r3, #1
 800d918:	d9dc      	bls.n	800d8d4 <inc_lock+0x10>
 800d91a:	e000      	b.n	800d91e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d91c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b02      	cmp	r3, #2
 800d922:	d132      	bne.n	800d98a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d924:	2300      	movs	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	e002      	b.n	800d930 <inc_lock+0x6c>
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3301      	adds	r3, #1
 800d92e:	60fb      	str	r3, [r7, #12]
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2b01      	cmp	r3, #1
 800d934:	d806      	bhi.n	800d944 <inc_lock+0x80>
 800d936:	4a29      	ldr	r2, [pc, #164]	@ (800d9dc <inc_lock+0x118>)
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	011b      	lsls	r3, r3, #4
 800d93c:	4413      	add	r3, r2
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d1f2      	bne.n	800d92a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b02      	cmp	r3, #2
 800d948:	d101      	bne.n	800d94e <inc_lock+0x8a>
 800d94a:	2300      	movs	r3, #0
 800d94c:	e040      	b.n	800d9d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	4922      	ldr	r1, [pc, #136]	@ (800d9dc <inc_lock+0x118>)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	440b      	add	r3, r1
 800d95a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	689a      	ldr	r2, [r3, #8]
 800d960:	491e      	ldr	r1, [pc, #120]	@ (800d9dc <inc_lock+0x118>)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	011b      	lsls	r3, r3, #4
 800d966:	440b      	add	r3, r1
 800d968:	3304      	adds	r3, #4
 800d96a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	695a      	ldr	r2, [r3, #20]
 800d970:	491a      	ldr	r1, [pc, #104]	@ (800d9dc <inc_lock+0x118>)
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	011b      	lsls	r3, r3, #4
 800d976:	440b      	add	r3, r1
 800d978:	3308      	adds	r3, #8
 800d97a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d97c:	4a17      	ldr	r2, [pc, #92]	@ (800d9dc <inc_lock+0x118>)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	011b      	lsls	r3, r3, #4
 800d982:	4413      	add	r3, r2
 800d984:	330c      	adds	r3, #12
 800d986:	2200      	movs	r2, #0
 800d988:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d009      	beq.n	800d9a4 <inc_lock+0xe0>
 800d990:	4a12      	ldr	r2, [pc, #72]	@ (800d9dc <inc_lock+0x118>)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	011b      	lsls	r3, r3, #4
 800d996:	4413      	add	r3, r2
 800d998:	330c      	adds	r3, #12
 800d99a:	881b      	ldrh	r3, [r3, #0]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d001      	beq.n	800d9a4 <inc_lock+0xe0>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e015      	b.n	800d9d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d108      	bne.n	800d9bc <inc_lock+0xf8>
 800d9aa:	4a0c      	ldr	r2, [pc, #48]	@ (800d9dc <inc_lock+0x118>)
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	011b      	lsls	r3, r3, #4
 800d9b0:	4413      	add	r3, r2
 800d9b2:	330c      	adds	r3, #12
 800d9b4:	881b      	ldrh	r3, [r3, #0]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	b29a      	uxth	r2, r3
 800d9ba:	e001      	b.n	800d9c0 <inc_lock+0xfc>
 800d9bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d9c0:	4906      	ldr	r1, [pc, #24]	@ (800d9dc <inc_lock+0x118>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	011b      	lsls	r3, r3, #4
 800d9c6:	440b      	add	r3, r1
 800d9c8:	330c      	adds	r3, #12
 800d9ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	3301      	adds	r3, #1
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3714      	adds	r7, #20
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	200012fc 	.word	0x200012fc

0800d9e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3b01      	subs	r3, #1
 800d9ec:	607b      	str	r3, [r7, #4]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d825      	bhi.n	800da40 <dec_lock+0x60>
		n = Files[i].ctr;
 800d9f4:	4a17      	ldr	r2, [pc, #92]	@ (800da54 <dec_lock+0x74>)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	011b      	lsls	r3, r3, #4
 800d9fa:	4413      	add	r3, r2
 800d9fc:	330c      	adds	r3, #12
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800da02:	89fb      	ldrh	r3, [r7, #14]
 800da04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da08:	d101      	bne.n	800da0e <dec_lock+0x2e>
 800da0a:	2300      	movs	r3, #0
 800da0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800da0e:	89fb      	ldrh	r3, [r7, #14]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d002      	beq.n	800da1a <dec_lock+0x3a>
 800da14:	89fb      	ldrh	r3, [r7, #14]
 800da16:	3b01      	subs	r3, #1
 800da18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800da1a:	4a0e      	ldr	r2, [pc, #56]	@ (800da54 <dec_lock+0x74>)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	011b      	lsls	r3, r3, #4
 800da20:	4413      	add	r3, r2
 800da22:	330c      	adds	r3, #12
 800da24:	89fa      	ldrh	r2, [r7, #14]
 800da26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800da28:	89fb      	ldrh	r3, [r7, #14]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d105      	bne.n	800da3a <dec_lock+0x5a>
 800da2e:	4a09      	ldr	r2, [pc, #36]	@ (800da54 <dec_lock+0x74>)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	011b      	lsls	r3, r3, #4
 800da34:	4413      	add	r3, r2
 800da36:	2200      	movs	r2, #0
 800da38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	737b      	strb	r3, [r7, #13]
 800da3e:	e001      	b.n	800da44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800da40:	2302      	movs	r3, #2
 800da42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800da44:	7b7b      	ldrb	r3, [r7, #13]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	200012fc 	.word	0x200012fc

0800da58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da58:	b480      	push	{r7}
 800da5a:	b085      	sub	sp, #20
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da60:	2300      	movs	r3, #0
 800da62:	60fb      	str	r3, [r7, #12]
 800da64:	e010      	b.n	800da88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da66:	4a0d      	ldr	r2, [pc, #52]	@ (800da9c <clear_lock+0x44>)
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	011b      	lsls	r3, r3, #4
 800da6c:	4413      	add	r3, r2
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d105      	bne.n	800da82 <clear_lock+0x2a>
 800da76:	4a09      	ldr	r2, [pc, #36]	@ (800da9c <clear_lock+0x44>)
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	011b      	lsls	r3, r3, #4
 800da7c:	4413      	add	r3, r2
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	3301      	adds	r3, #1
 800da86:	60fb      	str	r3, [r7, #12]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d9eb      	bls.n	800da66 <clear_lock+0xe>
	}
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr
 800da9c:	200012fc 	.word	0x200012fc

0800daa0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b086      	sub	sp, #24
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	78db      	ldrb	r3, [r3, #3]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d034      	beq.n	800db1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	7858      	ldrb	r0, [r3, #1]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dac4:	2301      	movs	r3, #1
 800dac6:	697a      	ldr	r2, [r7, #20]
 800dac8:	f7ff fdcc 	bl	800d664 <disk_write>
 800dacc:	4603      	mov	r3, r0
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d002      	beq.n	800dad8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dad2:	2301      	movs	r3, #1
 800dad4:	73fb      	strb	r3, [r7, #15]
 800dad6:	e022      	b.n	800db1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2200      	movs	r2, #0
 800dadc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae2:	697a      	ldr	r2, [r7, #20]
 800dae4:	1ad2      	subs	r2, r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	429a      	cmp	r2, r3
 800daec:	d217      	bcs.n	800db1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	789b      	ldrb	r3, [r3, #2]
 800daf2:	613b      	str	r3, [r7, #16]
 800daf4:	e010      	b.n	800db18 <sync_window+0x78>
					wsect += fs->fsize;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	6a1b      	ldr	r3, [r3, #32]
 800dafa:	697a      	ldr	r2, [r7, #20]
 800dafc:	4413      	add	r3, r2
 800dafe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	7858      	ldrb	r0, [r3, #1]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800db0a:	2301      	movs	r3, #1
 800db0c:	697a      	ldr	r2, [r7, #20]
 800db0e:	f7ff fda9 	bl	800d664 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	3b01      	subs	r3, #1
 800db16:	613b      	str	r3, [r7, #16]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d8eb      	bhi.n	800daf6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800db1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db20:	4618      	mov	r0, r3
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800db32:	2300      	movs	r3, #0
 800db34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db3a:	683a      	ldr	r2, [r7, #0]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d01b      	beq.n	800db78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff ffad 	bl	800daa0 <sync_window>
 800db46:	4603      	mov	r3, r0
 800db48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800db4a:	7bfb      	ldrb	r3, [r7, #15]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d113      	bne.n	800db78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	7858      	ldrb	r0, [r3, #1]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800db5a:	2301      	movs	r3, #1
 800db5c:	683a      	ldr	r2, [r7, #0]
 800db5e:	f7ff fd61 	bl	800d624 <disk_read>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d004      	beq.n	800db72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db68:	f04f 33ff 	mov.w	r3, #4294967295
 800db6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db6e:	2301      	movs	r3, #1
 800db70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800db78:	7bfb      	ldrb	r3, [r7, #15]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db82:	b480      	push	{r7}
 800db84:	b083      	sub	sp, #12
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	3b02      	subs	r3, #2
 800db90:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	69db      	ldr	r3, [r3, #28]
 800db96:	3b02      	subs	r3, #2
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d301      	bcc.n	800dba2 <clust2sect+0x20>
 800db9e:	2300      	movs	r3, #0
 800dba0:	e008      	b.n	800dbb4 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	895b      	ldrh	r3, [r3, #10]
 800dba6:	461a      	mov	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	fb03 f202 	mul.w	r2, r3, r2
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbb2:	4413      	add	r3, r2
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	370c      	adds	r7, #12
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d904      	bls.n	800dbe0 <get_fat+0x20>
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	69db      	ldr	r3, [r3, #28]
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d302      	bcc.n	800dbe6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	617b      	str	r3, [r7, #20]
 800dbe4:	e08e      	b.n	800dd04 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dbe6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbea:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800dbec:	693b      	ldr	r3, [r7, #16]
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b03      	cmp	r3, #3
 800dbf2:	d061      	beq.n	800dcb8 <get_fat+0xf8>
 800dbf4:	2b03      	cmp	r3, #3
 800dbf6:	dc7b      	bgt.n	800dcf0 <get_fat+0x130>
 800dbf8:	2b01      	cmp	r3, #1
 800dbfa:	d002      	beq.n	800dc02 <get_fat+0x42>
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d041      	beq.n	800dc84 <get_fat+0xc4>
 800dc00:	e076      	b.n	800dcf0 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	60fb      	str	r3, [r7, #12]
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	085b      	lsrs	r3, r3, #1
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	0a5b      	lsrs	r3, r3, #9
 800dc18:	4413      	add	r3, r2
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	6938      	ldr	r0, [r7, #16]
 800dc1e:	f7ff ff83 	bl	800db28 <move_window>
 800dc22:	4603      	mov	r3, r0
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d166      	bne.n	800dcf6 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	60fa      	str	r2, [r7, #12]
 800dc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	4413      	add	r3, r2
 800dc36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc3a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	0a5b      	lsrs	r3, r3, #9
 800dc44:	4413      	add	r3, r2
 800dc46:	4619      	mov	r1, r3
 800dc48:	6938      	ldr	r0, [r7, #16]
 800dc4a:	f7ff ff6d 	bl	800db28 <move_window>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d152      	bne.n	800dcfa <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc5a:	693a      	ldr	r2, [r7, #16]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dc62:	021b      	lsls	r3, r3, #8
 800dc64:	68ba      	ldr	r2, [r7, #8]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d002      	beq.n	800dc7a <get_fat+0xba>
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	091b      	lsrs	r3, r3, #4
 800dc78:	e002      	b.n	800dc80 <get_fat+0xc0>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc80:	617b      	str	r3, [r7, #20]
			break;
 800dc82:	e03f      	b.n	800dd04 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	0a1b      	lsrs	r3, r3, #8
 800dc8c:	4413      	add	r3, r2
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6938      	ldr	r0, [r7, #16]
 800dc92:	f7ff ff49 	bl	800db28 <move_window>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d130      	bne.n	800dcfe <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	005b      	lsls	r3, r3, #1
 800dca6:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dcaa:	4413      	add	r3, r2
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7ff fcf9 	bl	800d6a4 <ld_word>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	617b      	str	r3, [r7, #20]
			break;
 800dcb6:	e025      	b.n	800dd04 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	09db      	lsrs	r3, r3, #7
 800dcc0:	4413      	add	r3, r2
 800dcc2:	4619      	mov	r1, r3
 800dcc4:	6938      	ldr	r0, [r7, #16]
 800dcc6:	f7ff ff2f 	bl	800db28 <move_window>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d118      	bne.n	800dd02 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dcd0:	693b      	ldr	r3, [r7, #16]
 800dcd2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dcde:	4413      	add	r3, r2
 800dce0:	4618      	mov	r0, r3
 800dce2:	f7ff fcf7 	bl	800d6d4 <ld_dword>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dcec:	617b      	str	r3, [r7, #20]
			break;
 800dcee:	e009      	b.n	800dd04 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dcf0:	2301      	movs	r3, #1
 800dcf2:	617b      	str	r3, [r7, #20]
 800dcf4:	e006      	b.n	800dd04 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcf6:	bf00      	nop
 800dcf8:	e004      	b.n	800dd04 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcfa:	bf00      	nop
 800dcfc:	e002      	b.n	800dd04 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dcfe:	bf00      	nop
 800dd00:	e000      	b.n	800dd04 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd02:	bf00      	nop
		}
	}

	return val;
 800dd04:	697b      	ldr	r3, [r7, #20]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	3718      	adds	r7, #24
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dd0e:	b590      	push	{r4, r7, lr}
 800dd10:	b089      	sub	sp, #36	@ 0x24
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	60f8      	str	r0, [r7, #12]
 800dd16:	60b9      	str	r1, [r7, #8]
 800dd18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dd1a:	2302      	movs	r3, #2
 800dd1c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	f240 80d9 	bls.w	800ded8 <put_fat+0x1ca>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	f080 80d3 	bcs.w	800ded8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	f000 8096 	beq.w	800de68 <put_fat+0x15a>
 800dd3c:	2b03      	cmp	r3, #3
 800dd3e:	f300 80cb 	bgt.w	800ded8 <put_fat+0x1ca>
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	d002      	beq.n	800dd4c <put_fat+0x3e>
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d06e      	beq.n	800de28 <put_fat+0x11a>
 800dd4a:	e0c5      	b.n	800ded8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dd4c:	68bb      	ldr	r3, [r7, #8]
 800dd4e:	61bb      	str	r3, [r7, #24]
 800dd50:	69bb      	ldr	r3, [r7, #24]
 800dd52:	085b      	lsrs	r3, r3, #1
 800dd54:	69ba      	ldr	r2, [r7, #24]
 800dd56:	4413      	add	r3, r2
 800dd58:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	0a5b      	lsrs	r3, r3, #9
 800dd62:	4413      	add	r3, r2
 800dd64:	4619      	mov	r1, r3
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f7ff fede 	bl	800db28 <move_window>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd70:	7ffb      	ldrb	r3, [r7, #31]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f040 80a9 	bne.w	800deca <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dd7e:	69bb      	ldr	r3, [r7, #24]
 800dd80:	1c59      	adds	r1, r3, #1
 800dd82:	61b9      	str	r1, [r7, #24]
 800dd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd88:	4413      	add	r3, r2
 800dd8a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	f003 0301 	and.w	r3, r3, #1
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00d      	beq.n	800ddb2 <put_fat+0xa4>
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	b25b      	sxtb	r3, r3
 800dd9c:	f003 030f 	and.w	r3, r3, #15
 800dda0:	b25a      	sxtb	r2, r3
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	011b      	lsls	r3, r3, #4
 800dda8:	b25b      	sxtb	r3, r3
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	b25b      	sxtb	r3, r3
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	e001      	b.n	800ddb6 <put_fat+0xa8>
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	0a5b      	lsrs	r3, r3, #9
 800ddc8:	4413      	add	r3, r2
 800ddca:	4619      	mov	r1, r3
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f7ff feab 	bl	800db28 <move_window>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddd6:	7ffb      	ldrb	r3, [r7, #31]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d178      	bne.n	800dece <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dde2:	69bb      	ldr	r3, [r7, #24]
 800dde4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde8:	4413      	add	r3, r2
 800ddea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	f003 0301 	and.w	r3, r3, #1
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <put_fat+0xf0>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	091b      	lsrs	r3, r3, #4
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	e00e      	b.n	800de1c <put_fat+0x10e>
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	b25b      	sxtb	r3, r3
 800de04:	f023 030f 	bic.w	r3, r3, #15
 800de08:	b25a      	sxtb	r2, r3
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	0a1b      	lsrs	r3, r3, #8
 800de0e:	b25b      	sxtb	r3, r3
 800de10:	f003 030f 	and.w	r3, r3, #15
 800de14:	b25b      	sxtb	r3, r3
 800de16:	4313      	orrs	r3, r2
 800de18:	b25b      	sxtb	r3, r3
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	697a      	ldr	r2, [r7, #20]
 800de1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2201      	movs	r2, #1
 800de24:	70da      	strb	r2, [r3, #3]
			break;
 800de26:	e057      	b.n	800ded8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	0a1b      	lsrs	r3, r3, #8
 800de30:	4413      	add	r3, r2
 800de32:	4619      	mov	r1, r3
 800de34:	68f8      	ldr	r0, [r7, #12]
 800de36:	f7ff fe77 	bl	800db28 <move_window>
 800de3a:	4603      	mov	r3, r0
 800de3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de3e:	7ffb      	ldrb	r3, [r7, #31]
 800de40:	2b00      	cmp	r3, #0
 800de42:	d146      	bne.n	800ded2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	005b      	lsls	r3, r3, #1
 800de4e:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800de52:	4413      	add	r3, r2
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	b292      	uxth	r2, r2
 800de58:	4611      	mov	r1, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fc5d 	bl	800d71a <st_word>
			fs->wflag = 1;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2201      	movs	r2, #1
 800de64:	70da      	strb	r2, [r3, #3]
			break;
 800de66:	e037      	b.n	800ded8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	09db      	lsrs	r3, r3, #7
 800de70:	4413      	add	r3, r2
 800de72:	4619      	mov	r1, r3
 800de74:	68f8      	ldr	r0, [r7, #12]
 800de76:	f7ff fe57 	bl	800db28 <move_window>
 800de7a:	4603      	mov	r3, r0
 800de7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de7e:	7ffb      	ldrb	r3, [r7, #31]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d128      	bne.n	800ded6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de98:	4413      	add	r3, r2
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7ff fc1a 	bl	800d6d4 <ld_dword>
 800dea0:	4603      	mov	r3, r0
 800dea2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800dea6:	4323      	orrs	r3, r4
 800dea8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	009b      	lsls	r3, r3, #2
 800deb4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800deb8:	4413      	add	r3, r2
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	4618      	mov	r0, r3
 800debe:	f7ff fc47 	bl	800d750 <st_dword>
			fs->wflag = 1;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2201      	movs	r2, #1
 800dec6:	70da      	strb	r2, [r3, #3]
			break;
 800dec8:	e006      	b.n	800ded8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800deca:	bf00      	nop
 800decc:	e004      	b.n	800ded8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800dece:	bf00      	nop
 800ded0:	e002      	b.n	800ded8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ded2:	bf00      	nop
 800ded4:	e000      	b.n	800ded8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ded6:	bf00      	nop
		}
	}
	return res;
 800ded8:	7ffb      	ldrb	r3, [r7, #31]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3724      	adds	r7, #36	@ 0x24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd90      	pop	{r4, r7, pc}

0800dee2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dee2:	b580      	push	{r7, lr}
 800dee4:	b088      	sub	sp, #32
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
 800deea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10d      	bne.n	800df14 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	695b      	ldr	r3, [r3, #20]
 800defc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d004      	beq.n	800df0e <create_chain+0x2c>
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	69db      	ldr	r3, [r3, #28]
 800df08:	69ba      	ldr	r2, [r7, #24]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d31b      	bcc.n	800df46 <create_chain+0x64>
 800df0e:	2301      	movs	r3, #1
 800df10:	61bb      	str	r3, [r7, #24]
 800df12:	e018      	b.n	800df46 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df14:	6839      	ldr	r1, [r7, #0]
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7ff fe52 	bl	800dbc0 <get_fat>
 800df1c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d801      	bhi.n	800df28 <create_chain+0x46>
 800df24:	2301      	movs	r3, #1
 800df26:	e070      	b.n	800e00a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2e:	d101      	bne.n	800df34 <create_chain+0x52>
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	e06a      	b.n	800e00a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	69db      	ldr	r3, [r3, #28]
 800df38:	68fa      	ldr	r2, [r7, #12]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d201      	bcs.n	800df42 <create_chain+0x60>
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	e063      	b.n	800e00a <create_chain+0x128>
		scl = clst;
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800df4a:	69fb      	ldr	r3, [r7, #28]
 800df4c:	3301      	adds	r3, #1
 800df4e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	69db      	ldr	r3, [r3, #28]
 800df54:	69fa      	ldr	r2, [r7, #28]
 800df56:	429a      	cmp	r2, r3
 800df58:	d307      	bcc.n	800df6a <create_chain+0x88>
				ncl = 2;
 800df5a:	2302      	movs	r3, #2
 800df5c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800df5e:	69fa      	ldr	r2, [r7, #28]
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	429a      	cmp	r2, r3
 800df64:	d901      	bls.n	800df6a <create_chain+0x88>
 800df66:	2300      	movs	r3, #0
 800df68:	e04f      	b.n	800e00a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800df6a:	69f9      	ldr	r1, [r7, #28]
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f7ff fe27 	bl	800dbc0 <get_fat>
 800df72:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00e      	beq.n	800df98 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d003      	beq.n	800df88 <create_chain+0xa6>
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df86:	d101      	bne.n	800df8c <create_chain+0xaa>
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	e03e      	b.n	800e00a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800df8c:	69fa      	ldr	r2, [r7, #28]
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	429a      	cmp	r2, r3
 800df92:	d1da      	bne.n	800df4a <create_chain+0x68>
 800df94:	2300      	movs	r3, #0
 800df96:	e038      	b.n	800e00a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800df98:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800df9a:	f04f 32ff 	mov.w	r2, #4294967295
 800df9e:	69f9      	ldr	r1, [r7, #28]
 800dfa0:	6938      	ldr	r0, [r7, #16]
 800dfa2:	f7ff feb4 	bl	800dd0e <put_fat>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d109      	bne.n	800dfc4 <create_chain+0xe2>
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d006      	beq.n	800dfc4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dfb6:	69fa      	ldr	r2, [r7, #28]
 800dfb8:	6839      	ldr	r1, [r7, #0]
 800dfba:	6938      	ldr	r0, [r7, #16]
 800dfbc:	f7ff fea7 	bl	800dd0e <put_fat>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dfc4:	7dfb      	ldrb	r3, [r7, #23]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d116      	bne.n	800dff8 <create_chain+0x116>
		fs->last_clst = ncl;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	69fa      	ldr	r2, [r7, #28]
 800dfce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	699a      	ldr	r2, [r3, #24]
 800dfd4:	693b      	ldr	r3, [r7, #16]
 800dfd6:	69db      	ldr	r3, [r3, #28]
 800dfd8:	3b02      	subs	r3, #2
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d804      	bhi.n	800dfe8 <create_chain+0x106>
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	699b      	ldr	r3, [r3, #24]
 800dfe2:	1e5a      	subs	r2, r3, #1
 800dfe4:	693b      	ldr	r3, [r7, #16]
 800dfe6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	791b      	ldrb	r3, [r3, #4]
 800dfec:	f043 0301 	orr.w	r3, r3, #1
 800dff0:	b2da      	uxtb	r2, r3
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	711a      	strb	r2, [r3, #4]
 800dff6:	e007      	b.n	800e008 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d102      	bne.n	800e004 <create_chain+0x122>
 800dffe:	f04f 33ff 	mov.w	r3, #4294967295
 800e002:	e000      	b.n	800e006 <create_chain+0x124>
 800e004:	2301      	movs	r3, #1
 800e006:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e008:	69fb      	ldr	r3, [r7, #28]
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3720      	adds	r7, #32
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}

0800e012 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e012:	b580      	push	{r7, lr}
 800e014:	b086      	sub	sp, #24
 800e016:	af00      	add	r7, sp, #0
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e028:	d204      	bcs.n	800e034 <dir_sdi+0x22>
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	f003 031f 	and.w	r3, r3, #31
 800e030:	2b00      	cmp	r3, #0
 800e032:	d001      	beq.n	800e038 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e034:	2302      	movs	r3, #2
 800e036:	e063      	b.n	800e100 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <dir_sdi+0x46>
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b02      	cmp	r3, #2
 800e050:	d902      	bls.n	800e058 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e056:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10c      	bne.n	800e078 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	095b      	lsrs	r3, r3, #5
 800e062:	693a      	ldr	r2, [r7, #16]
 800e064:	8912      	ldrh	r2, [r2, #8]
 800e066:	4293      	cmp	r3, r2
 800e068:	d301      	bcc.n	800e06e <dir_sdi+0x5c>
 800e06a:	2302      	movs	r3, #2
 800e06c:	e048      	b.n	800e100 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	61da      	str	r2, [r3, #28]
 800e076:	e029      	b.n	800e0cc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	895b      	ldrh	r3, [r3, #10]
 800e07c:	025b      	lsls	r3, r3, #9
 800e07e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e080:	e019      	b.n	800e0b6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6979      	ldr	r1, [r7, #20]
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff fd9a 	bl	800dbc0 <get_fat>
 800e08c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e094:	d101      	bne.n	800e09a <dir_sdi+0x88>
 800e096:	2301      	movs	r3, #1
 800e098:	e032      	b.n	800e100 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d904      	bls.n	800e0aa <dir_sdi+0x98>
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	69db      	ldr	r3, [r3, #28]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	429a      	cmp	r2, r3
 800e0a8:	d301      	bcc.n	800e0ae <dir_sdi+0x9c>
 800e0aa:	2302      	movs	r3, #2
 800e0ac:	e028      	b.n	800e100 <dir_sdi+0xee>
			ofs -= csz;
 800e0ae:	683a      	ldr	r2, [r7, #0]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	1ad3      	subs	r3, r2, r3
 800e0b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d2e1      	bcs.n	800e082 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e0be:	6979      	ldr	r1, [r7, #20]
 800e0c0:	6938      	ldr	r0, [r7, #16]
 800e0c2:	f7ff fd5e 	bl	800db82 <clust2sect>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	697a      	ldr	r2, [r7, #20]
 800e0d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	69db      	ldr	r3, [r3, #28]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d101      	bne.n	800e0de <dir_sdi+0xcc>
 800e0da:	2302      	movs	r3, #2
 800e0dc:	e010      	b.n	800e100 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	69da      	ldr	r2, [r3, #28]
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	0a5b      	lsrs	r3, r3, #9
 800e0e6:	441a      	add	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e0ec:	693b      	ldr	r3, [r7, #16]
 800e0ee:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f8:	441a      	add	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e0fe:	2300      	movs	r3, #0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3718      	adds	r7, #24
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b086      	sub	sp, #24
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
 800e110:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	695b      	ldr	r3, [r3, #20]
 800e11c:	3320      	adds	r3, #32
 800e11e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	69db      	ldr	r3, [r3, #28]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <dir_next+0x28>
 800e128:	68bb      	ldr	r3, [r7, #8]
 800e12a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e12e:	d301      	bcc.n	800e134 <dir_next+0x2c>
 800e130:	2304      	movs	r3, #4
 800e132:	e0aa      	b.n	800e28a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f040 8098 	bne.w	800e270 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	69db      	ldr	r3, [r3, #28]
 800e144:	1c5a      	adds	r2, r3, #1
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d10b      	bne.n	800e16a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	095b      	lsrs	r3, r3, #5
 800e156:	68fa      	ldr	r2, [r7, #12]
 800e158:	8912      	ldrh	r2, [r2, #8]
 800e15a:	4293      	cmp	r3, r2
 800e15c:	f0c0 8088 	bcc.w	800e270 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	61da      	str	r2, [r3, #28]
 800e166:	2304      	movs	r3, #4
 800e168:	e08f      	b.n	800e28a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	0a5b      	lsrs	r3, r3, #9
 800e16e:	68fa      	ldr	r2, [r7, #12]
 800e170:	8952      	ldrh	r2, [r2, #10]
 800e172:	3a01      	subs	r2, #1
 800e174:	4013      	ands	r3, r2
 800e176:	2b00      	cmp	r3, #0
 800e178:	d17a      	bne.n	800e270 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f7ff fd1c 	bl	800dbc0 <get_fat>
 800e188:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b01      	cmp	r3, #1
 800e18e:	d801      	bhi.n	800e194 <dir_next+0x8c>
 800e190:	2302      	movs	r3, #2
 800e192:	e07a      	b.n	800e28a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e19a:	d101      	bne.n	800e1a0 <dir_next+0x98>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e074      	b.n	800e28a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	69db      	ldr	r3, [r3, #28]
 800e1a4:	697a      	ldr	r2, [r7, #20]
 800e1a6:	429a      	cmp	r2, r3
 800e1a8:	d358      	bcc.n	800e25c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d104      	bne.n	800e1ba <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	61da      	str	r2, [r3, #28]
 800e1b6:	2304      	movs	r3, #4
 800e1b8:	e067      	b.n	800e28a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e1ba:	687a      	ldr	r2, [r7, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	699b      	ldr	r3, [r3, #24]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f7ff fe8d 	bl	800dee2 <create_chain>
 800e1c8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e1ca:	697b      	ldr	r3, [r7, #20]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <dir_next+0xcc>
 800e1d0:	2307      	movs	r3, #7
 800e1d2:	e05a      	b.n	800e28a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d101      	bne.n	800e1de <dir_next+0xd6>
 800e1da:	2302      	movs	r3, #2
 800e1dc:	e055      	b.n	800e28a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e4:	d101      	bne.n	800e1ea <dir_next+0xe2>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e04f      	b.n	800e28a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff fc58 	bl	800daa0 <sync_window>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <dir_next+0xf2>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	e047      	b.n	800e28a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	3338      	adds	r3, #56	@ 0x38
 800e1fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e202:	2100      	movs	r1, #0
 800e204:	4618      	mov	r0, r3
 800e206:	f7ff facf 	bl	800d7a8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e20a:	2300      	movs	r3, #0
 800e20c:	613b      	str	r3, [r7, #16]
 800e20e:	6979      	ldr	r1, [r7, #20]
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff fcb6 	bl	800db82 <clust2sect>
 800e216:	4602      	mov	r2, r0
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	635a      	str	r2, [r3, #52]	@ 0x34
 800e21c:	e012      	b.n	800e244 <dir_next+0x13c>
						fs->wflag = 1;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2201      	movs	r2, #1
 800e222:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	f7ff fc3b 	bl	800daa0 <sync_window>
 800e22a:	4603      	mov	r3, r0
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d001      	beq.n	800e234 <dir_next+0x12c>
 800e230:	2301      	movs	r3, #1
 800e232:	e02a      	b.n	800e28a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	3301      	adds	r3, #1
 800e238:	613b      	str	r3, [r7, #16]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e23e:	1c5a      	adds	r2, r3, #1
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	635a      	str	r2, [r3, #52]	@ 0x34
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	895b      	ldrh	r3, [r3, #10]
 800e248:	461a      	mov	r2, r3
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d3e6      	bcc.n	800e21e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	1ad2      	subs	r2, r2, r3
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e262:	6979      	ldr	r1, [r7, #20]
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f7ff fc8c 	bl	800db82 <clust2sect>
 800e26a:	4602      	mov	r2, r0
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e282:	441a      	add	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3718      	adds	r7, #24
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b084      	sub	sp, #16
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	331a      	adds	r3, #26
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f7ff f9ff 	bl	800d6a4 <ld_word>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d109      	bne.n	800e2c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	3314      	adds	r3, #20
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f7ff f9f4 	bl	800d6a4 <ld_word>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	041b      	lsls	r3, r3, #16
 800e2c0:	68fa      	ldr	r2, [r7, #12]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e2c6:	68fb      	ldr	r3, [r7, #12]
}
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}

0800e2d0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e2d0:	b590      	push	{r4, r7, lr}
 800e2d2:	b087      	sub	sp, #28
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
 800e2d8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	331a      	adds	r3, #26
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff f9e0 	bl	800d6a4 <ld_word>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d001      	beq.n	800e2ee <cmp_lfn+0x1e>
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	e059      	b.n	800e3a2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2f6:	1e5a      	subs	r2, r3, #1
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	005b      	lsls	r3, r3, #1
 800e2fc:	4413      	add	r3, r2
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	4413      	add	r3, r2
 800e302:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e304:	2301      	movs	r3, #1
 800e306:	81fb      	strh	r3, [r7, #14]
 800e308:	2300      	movs	r3, #0
 800e30a:	613b      	str	r3, [r7, #16]
 800e30c:	e033      	b.n	800e376 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e30e:	4a27      	ldr	r2, [pc, #156]	@ (800e3ac <cmp_lfn+0xdc>)
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	4413      	add	r3, r2
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	461a      	mov	r2, r3
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	4413      	add	r3, r2
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff f9c1 	bl	800d6a4 <ld_word>
 800e322:	4603      	mov	r3, r0
 800e324:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e326:	89fb      	ldrh	r3, [r7, #14]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d01a      	beq.n	800e362 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e330:	d812      	bhi.n	800e358 <cmp_lfn+0x88>
 800e332:	89bb      	ldrh	r3, [r7, #12]
 800e334:	4618      	mov	r0, r3
 800e336:	f001 facd 	bl	800f8d4 <ff_wtoupper>
 800e33a:	4603      	mov	r3, r0
 800e33c:	461c      	mov	r4, r3
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	617a      	str	r2, [r7, #20]
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	4413      	add	r3, r2
 800e34a:	881b      	ldrh	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f001 fac1 	bl	800f8d4 <ff_wtoupper>
 800e352:	4603      	mov	r3, r0
 800e354:	429c      	cmp	r4, r3
 800e356:	d001      	beq.n	800e35c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e358:	2300      	movs	r3, #0
 800e35a:	e022      	b.n	800e3a2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e35c:	89bb      	ldrh	r3, [r7, #12]
 800e35e:	81fb      	strh	r3, [r7, #14]
 800e360:	e006      	b.n	800e370 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e362:	89bb      	ldrh	r3, [r7, #12]
 800e364:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e368:	4293      	cmp	r3, r2
 800e36a:	d001      	beq.n	800e370 <cmp_lfn+0xa0>
 800e36c:	2300      	movs	r3, #0
 800e36e:	e018      	b.n	800e3a2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	3301      	adds	r3, #1
 800e374:	613b      	str	r3, [r7, #16]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	2b0c      	cmp	r3, #12
 800e37a:	d9c8      	bls.n	800e30e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00b      	beq.n	800e3a0 <cmp_lfn+0xd0>
 800e388:	89fb      	ldrh	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d008      	beq.n	800e3a0 <cmp_lfn+0xd0>
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	005b      	lsls	r3, r3, #1
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	4413      	add	r3, r2
 800e396:	881b      	ldrh	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <cmp_lfn+0xd0>
 800e39c:	2300      	movs	r3, #0
 800e39e:	e000      	b.n	800e3a2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e3a0:	2301      	movs	r3, #1
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	371c      	adds	r7, #28
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd90      	pop	{r4, r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	0801398c 	.word	0x0801398c

0800e3b0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b086      	sub	sp, #24
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	331a      	adds	r3, #26
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f7ff f970 	bl	800d6a4 <ld_word>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <pick_lfn+0x1e>
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e04d      	b.n	800e46a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e3d6:	1e5a      	subs	r2, r3, #1
 800e3d8:	4613      	mov	r3, r2
 800e3da:	005b      	lsls	r3, r3, #1
 800e3dc:	4413      	add	r3, r2
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	4413      	add	r3, r2
 800e3e2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	81fb      	strh	r3, [r7, #14]
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	613b      	str	r3, [r7, #16]
 800e3ec:	e028      	b.n	800e440 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e3ee:	4a21      	ldr	r2, [pc, #132]	@ (800e474 <pick_lfn+0xc4>)
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	4413      	add	r3, r2
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	4413      	add	r3, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7ff f951 	bl	800d6a4 <ld_word>
 800e402:	4603      	mov	r3, r0
 800e404:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e406:	89fb      	ldrh	r3, [r7, #14]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00f      	beq.n	800e42c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	2bfe      	cmp	r3, #254	@ 0xfe
 800e410:	d901      	bls.n	800e416 <pick_lfn+0x66>
 800e412:	2300      	movs	r3, #0
 800e414:	e029      	b.n	800e46a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e416:	89bb      	ldrh	r3, [r7, #12]
 800e418:	81fb      	strh	r3, [r7, #14]
 800e41a:	697b      	ldr	r3, [r7, #20]
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	617a      	str	r2, [r7, #20]
 800e420:	005b      	lsls	r3, r3, #1
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	4413      	add	r3, r2
 800e426:	89fa      	ldrh	r2, [r7, #14]
 800e428:	801a      	strh	r2, [r3, #0]
 800e42a:	e006      	b.n	800e43a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e42c:	89bb      	ldrh	r3, [r7, #12]
 800e42e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e432:	4293      	cmp	r3, r2
 800e434:	d001      	beq.n	800e43a <pick_lfn+0x8a>
 800e436:	2300      	movs	r3, #0
 800e438:	e017      	b.n	800e46a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	3301      	adds	r3, #1
 800e43e:	613b      	str	r3, [r7, #16]
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	2b0c      	cmp	r3, #12
 800e444:	d9d3      	bls.n	800e3ee <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00a      	beq.n	800e468 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	2bfe      	cmp	r3, #254	@ 0xfe
 800e456:	d901      	bls.n	800e45c <pick_lfn+0xac>
 800e458:	2300      	movs	r3, #0
 800e45a:	e006      	b.n	800e46a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	005b      	lsls	r3, r3, #1
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	4413      	add	r3, r2
 800e464:	2200      	movs	r2, #0
 800e466:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e468:	2301      	movs	r3, #1
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3718      	adds	r7, #24
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	0801398c 	.word	0x0801398c

0800e478 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e478:	b480      	push	{r7}
 800e47a:	b085      	sub	sp, #20
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e480:	2300      	movs	r3, #0
 800e482:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e484:	230b      	movs	r3, #11
 800e486:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e488:	7bfb      	ldrb	r3, [r7, #15]
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	0852      	lsrs	r2, r2, #1
 800e48e:	01db      	lsls	r3, r3, #7
 800e490:	4313      	orrs	r3, r2
 800e492:	b2da      	uxtb	r2, r3
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	1c59      	adds	r1, r3, #1
 800e498:	6079      	str	r1, [r7, #4]
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	4413      	add	r3, r2
 800e49e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	60bb      	str	r3, [r7, #8]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d1ed      	bne.n	800e488 <sum_sfn+0x10>
	return sum;
 800e4ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3714      	adds	r7, #20
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b8:	4770      	bx	lr

0800e4ba <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b086      	sub	sp, #24
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e4c4:	2304      	movs	r3, #4
 800e4c6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e4ce:	23ff      	movs	r3, #255	@ 0xff
 800e4d0:	757b      	strb	r3, [r7, #21]
 800e4d2:	23ff      	movs	r3, #255	@ 0xff
 800e4d4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e4d6:	e081      	b.n	800e5dc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	69db      	ldr	r3, [r3, #28]
 800e4dc:	4619      	mov	r1, r3
 800e4de:	6938      	ldr	r0, [r7, #16]
 800e4e0:	f7ff fb22 	bl	800db28 <move_window>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4e8:	7dfb      	ldrb	r3, [r7, #23]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d17c      	bne.n	800e5e8 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6a1b      	ldr	r3, [r3, #32]
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e4f6:	7dbb      	ldrb	r3, [r7, #22]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d102      	bne.n	800e502 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	75fb      	strb	r3, [r7, #23]
 800e500:	e077      	b.n	800e5f2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	330b      	adds	r3, #11
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e50e:	73fb      	strb	r3, [r7, #15]
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	7bfa      	ldrb	r2, [r7, #15]
 800e514:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e516:	7dbb      	ldrb	r3, [r7, #22]
 800e518:	2be5      	cmp	r3, #229	@ 0xe5
 800e51a:	d00e      	beq.n	800e53a <dir_read+0x80>
 800e51c:	7dbb      	ldrb	r3, [r7, #22]
 800e51e:	2b2e      	cmp	r3, #46	@ 0x2e
 800e520:	d00b      	beq.n	800e53a <dir_read+0x80>
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	f023 0320 	bic.w	r3, r3, #32
 800e528:	2b08      	cmp	r3, #8
 800e52a:	bf0c      	ite	eq
 800e52c:	2301      	moveq	r3, #1
 800e52e:	2300      	movne	r3, #0
 800e530:	b2db      	uxtb	r3, r3
 800e532:	461a      	mov	r2, r3
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	4293      	cmp	r3, r2
 800e538:	d002      	beq.n	800e540 <dir_read+0x86>
				ord = 0xFF;
 800e53a:	23ff      	movs	r3, #255	@ 0xff
 800e53c:	757b      	strb	r3, [r7, #21]
 800e53e:	e044      	b.n	800e5ca <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e540:	7bfb      	ldrb	r3, [r7, #15]
 800e542:	2b0f      	cmp	r3, #15
 800e544:	d12f      	bne.n	800e5a6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e546:	7dbb      	ldrb	r3, [r7, #22]
 800e548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d00d      	beq.n	800e56c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6a1b      	ldr	r3, [r3, #32]
 800e554:	7b5b      	ldrb	r3, [r3, #13]
 800e556:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e558:	7dbb      	ldrb	r3, [r7, #22]
 800e55a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e55e:	75bb      	strb	r3, [r7, #22]
 800e560:	7dbb      	ldrb	r3, [r7, #22]
 800e562:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	695a      	ldr	r2, [r3, #20]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e56c:	7dba      	ldrb	r2, [r7, #22]
 800e56e:	7d7b      	ldrb	r3, [r7, #21]
 800e570:	429a      	cmp	r2, r3
 800e572:	d115      	bne.n	800e5a0 <dir_read+0xe6>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6a1b      	ldr	r3, [r3, #32]
 800e578:	330d      	adds	r3, #13
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	7d3a      	ldrb	r2, [r7, #20]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d10e      	bne.n	800e5a0 <dir_read+0xe6>
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	68da      	ldr	r2, [r3, #12]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a1b      	ldr	r3, [r3, #32]
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7ff ff0f 	bl	800e3b0 <pick_lfn>
 800e592:	4603      	mov	r3, r0
 800e594:	2b00      	cmp	r3, #0
 800e596:	d003      	beq.n	800e5a0 <dir_read+0xe6>
 800e598:	7d7b      	ldrb	r3, [r7, #21]
 800e59a:	3b01      	subs	r3, #1
 800e59c:	b2db      	uxtb	r3, r3
 800e59e:	e000      	b.n	800e5a2 <dir_read+0xe8>
 800e5a0:	23ff      	movs	r3, #255	@ 0xff
 800e5a2:	757b      	strb	r3, [r7, #21]
 800e5a4:	e011      	b.n	800e5ca <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e5a6:	7d7b      	ldrb	r3, [r7, #21]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d109      	bne.n	800e5c0 <dir_read+0x106>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6a1b      	ldr	r3, [r3, #32]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff ff61 	bl	800e478 <sum_sfn>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	7d3b      	ldrb	r3, [r7, #20]
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d015      	beq.n	800e5ec <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c6:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800e5c8:	e010      	b.n	800e5ec <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e5ca:	2100      	movs	r1, #0
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f7ff fd9b 	bl	800e108 <dir_next>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5d6:	7dfb      	ldrb	r3, [r7, #23]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d109      	bne.n	800e5f0 <dir_read+0x136>
	while (dp->sect) {
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	69db      	ldr	r3, [r3, #28]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	f47f af79 	bne.w	800e4d8 <dir_read+0x1e>
 800e5e6:	e004      	b.n	800e5f2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e5e8:	bf00      	nop
 800e5ea:	e002      	b.n	800e5f2 <dir_read+0x138>
					break;
 800e5ec:	bf00      	nop
 800e5ee:	e000      	b.n	800e5f2 <dir_read+0x138>
		if (res != FR_OK) break;
 800e5f0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e5f2:	7dfb      	ldrb	r3, [r7, #23]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <dir_read+0x144>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	61da      	str	r2, [r3, #28]
	return res;
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e616:	2100      	movs	r1, #0
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f7ff fcfa 	bl	800e012 <dir_sdi>
 800e61e:	4603      	mov	r3, r0
 800e620:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d001      	beq.n	800e62c <dir_find+0x24>
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	e0a9      	b.n	800e780 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e62c:	23ff      	movs	r3, #255	@ 0xff
 800e62e:	753b      	strb	r3, [r7, #20]
 800e630:	7d3b      	ldrb	r3, [r7, #20]
 800e632:	757b      	strb	r3, [r7, #21]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f04f 32ff 	mov.w	r2, #4294967295
 800e63a:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	69db      	ldr	r3, [r3, #28]
 800e640:	4619      	mov	r1, r3
 800e642:	6938      	ldr	r0, [r7, #16]
 800e644:	f7ff fa70 	bl	800db28 <move_window>
 800e648:	4603      	mov	r3, r0
 800e64a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	f040 8090 	bne.w	800e774 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6a1b      	ldr	r3, [r3, #32]
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e65c:	7dbb      	ldrb	r3, [r7, #22]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d102      	bne.n	800e668 <dir_find+0x60>
 800e662:	2304      	movs	r3, #4
 800e664:	75fb      	strb	r3, [r7, #23]
 800e666:	e08a      	b.n	800e77e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6a1b      	ldr	r3, [r3, #32]
 800e66c:	330b      	adds	r3, #11
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e674:	73fb      	strb	r3, [r7, #15]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	7bfa      	ldrb	r2, [r7, #15]
 800e67a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e67c:	7dbb      	ldrb	r3, [r7, #22]
 800e67e:	2be5      	cmp	r3, #229	@ 0xe5
 800e680:	d007      	beq.n	800e692 <dir_find+0x8a>
 800e682:	7bfb      	ldrb	r3, [r7, #15]
 800e684:	f003 0308 	and.w	r3, r3, #8
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d009      	beq.n	800e6a0 <dir_find+0x98>
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
 800e68e:	2b0f      	cmp	r3, #15
 800e690:	d006      	beq.n	800e6a0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e692:	23ff      	movs	r3, #255	@ 0xff
 800e694:	757b      	strb	r3, [r7, #21]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f04f 32ff 	mov.w	r2, #4294967295
 800e69c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e69e:	e05e      	b.n	800e75e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e6a0:	7bfb      	ldrb	r3, [r7, #15]
 800e6a2:	2b0f      	cmp	r3, #15
 800e6a4:	d136      	bne.n	800e714 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e6ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d154      	bne.n	800e75e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e6b4:	7dbb      	ldrb	r3, [r7, #22]
 800e6b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00d      	beq.n	800e6da <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	7b5b      	ldrb	r3, [r3, #13]
 800e6c4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e6c6:	7dbb      	ldrb	r3, [r7, #22]
 800e6c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6cc:	75bb      	strb	r3, [r7, #22]
 800e6ce:	7dbb      	ldrb	r3, [r7, #22]
 800e6d0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	695a      	ldr	r2, [r3, #20]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e6da:	7dba      	ldrb	r2, [r7, #22]
 800e6dc:	7d7b      	ldrb	r3, [r7, #21]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d115      	bne.n	800e70e <dir_find+0x106>
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	6a1b      	ldr	r3, [r3, #32]
 800e6e6:	330d      	adds	r3, #13
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	7d3a      	ldrb	r2, [r7, #20]
 800e6ec:	429a      	cmp	r2, r3
 800e6ee:	d10e      	bne.n	800e70e <dir_find+0x106>
 800e6f0:	693b      	ldr	r3, [r7, #16]
 800e6f2:	68da      	ldr	r2, [r3, #12]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6a1b      	ldr	r3, [r3, #32]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4610      	mov	r0, r2
 800e6fc:	f7ff fde8 	bl	800e2d0 <cmp_lfn>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d003      	beq.n	800e70e <dir_find+0x106>
 800e706:	7d7b      	ldrb	r3, [r7, #21]
 800e708:	3b01      	subs	r3, #1
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	e000      	b.n	800e710 <dir_find+0x108>
 800e70e:	23ff      	movs	r3, #255	@ 0xff
 800e710:	757b      	strb	r3, [r7, #21]
 800e712:	e024      	b.n	800e75e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e714:	7d7b      	ldrb	r3, [r7, #21]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d109      	bne.n	800e72e <dir_find+0x126>
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	4618      	mov	r0, r3
 800e720:	f7ff feaa 	bl	800e478 <sum_sfn>
 800e724:	4603      	mov	r3, r0
 800e726:	461a      	mov	r2, r3
 800e728:	7d3b      	ldrb	r3, [r7, #20]
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d024      	beq.n	800e778 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10a      	bne.n	800e752 <dir_find+0x14a>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6a18      	ldr	r0, [r3, #32]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	3324      	adds	r3, #36	@ 0x24
 800e744:	220b      	movs	r2, #11
 800e746:	4619      	mov	r1, r3
 800e748:	f7ff f849 	bl	800d7de <mem_cmp>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d014      	beq.n	800e77c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e752:	23ff      	movs	r3, #255	@ 0xff
 800e754:	757b      	strb	r3, [r7, #21]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f04f 32ff 	mov.w	r2, #4294967295
 800e75c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e75e:	2100      	movs	r1, #0
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f7ff fcd1 	bl	800e108 <dir_next>
 800e766:	4603      	mov	r3, r0
 800e768:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e76a:	7dfb      	ldrb	r3, [r7, #23]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	f43f af65 	beq.w	800e63c <dir_find+0x34>
 800e772:	e004      	b.n	800e77e <dir_find+0x176>
		if (res != FR_OK) break;
 800e774:	bf00      	nop
 800e776:	e002      	b.n	800e77e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e778:	bf00      	nop
 800e77a:	e000      	b.n	800e77e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e77c:	bf00      	nop

	return res;
 800e77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3718      	adds	r7, #24
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}

0800e788 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	b088      	sub	sp, #32
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	2200      	movs	r2, #0
 800e79c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	69db      	ldr	r3, [r3, #28]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	f000 80ca 	beq.w	800e93c <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b0:	d032      	beq.n	800e818 <get_fileinfo+0x90>
			i = j = 0;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	61bb      	str	r3, [r7, #24]
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e7ba:	e01b      	b.n	800e7f4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800e7bc:	89fb      	ldrh	r3, [r7, #14]
 800e7be:	2100      	movs	r1, #0
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f001 f84b 	bl	800f85c <ff_convert>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800e7ca:	89fb      	ldrh	r3, [r7, #14]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d102      	bne.n	800e7d6 <get_fileinfo+0x4e>
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	61fb      	str	r3, [r7, #28]
 800e7d4:	e01a      	b.n	800e80c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e7da:	d902      	bls.n	800e7e2 <get_fileinfo+0x5a>
 800e7dc:	2300      	movs	r3, #0
 800e7de:	61fb      	str	r3, [r7, #28]
 800e7e0:	e014      	b.n	800e80c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	1c5a      	adds	r2, r3, #1
 800e7e6:	61fa      	str	r2, [r7, #28]
 800e7e8:	89fa      	ldrh	r2, [r7, #14]
 800e7ea:	b2d1      	uxtb	r1, r2
 800e7ec:	683a      	ldr	r2, [r7, #0]
 800e7ee:	4413      	add	r3, r2
 800e7f0:	460a      	mov	r2, r1
 800e7f2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	68da      	ldr	r2, [r3, #12]
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	1c59      	adds	r1, r3, #1
 800e7fc:	61b9      	str	r1, [r7, #24]
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	4413      	add	r3, r2
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	81fb      	strh	r3, [r7, #14]
 800e806:	89fb      	ldrh	r3, [r7, #14]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1d7      	bne.n	800e7bc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800e80c:	683a      	ldr	r2, [r7, #0]
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	4413      	add	r3, r2
 800e812:	3316      	adds	r3, #22
 800e814:	2200      	movs	r2, #0
 800e816:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	61bb      	str	r3, [r7, #24]
 800e81c:	69bb      	ldr	r3, [r7, #24]
 800e81e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800e820:	683a      	ldr	r2, [r7, #0]
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	3316      	adds	r3, #22
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800e82c:	e04d      	b.n	800e8ca <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6a1a      	ldr	r2, [r3, #32]
 800e832:	69fb      	ldr	r3, [r7, #28]
 800e834:	1c59      	adds	r1, r3, #1
 800e836:	61f9      	str	r1, [r7, #28]
 800e838:	4413      	add	r3, r2
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
 800e840:	2b20      	cmp	r3, #32
 800e842:	d041      	beq.n	800e8c8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b05      	cmp	r3, #5
 800e848:	d101      	bne.n	800e84e <get_fileinfo+0xc6>
 800e84a:	23e5      	movs	r3, #229	@ 0xe5
 800e84c:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	2b09      	cmp	r3, #9
 800e852:	d10f      	bne.n	800e874 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800e854:	89bb      	ldrh	r3, [r7, #12]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d105      	bne.n	800e866 <get_fileinfo+0xde>
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	69bb      	ldr	r3, [r7, #24]
 800e85e:	4413      	add	r3, r2
 800e860:	3316      	adds	r3, #22
 800e862:	222e      	movs	r2, #46	@ 0x2e
 800e864:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	61ba      	str	r2, [r7, #24]
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	4413      	add	r3, r2
 800e870:	222e      	movs	r2, #46	@ 0x2e
 800e872:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800e874:	683a      	ldr	r2, [r7, #0]
 800e876:	69bb      	ldr	r3, [r7, #24]
 800e878:	4413      	add	r3, r2
 800e87a:	3309      	adds	r3, #9
 800e87c:	7dfa      	ldrb	r2, [r7, #23]
 800e87e:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800e880:	89bb      	ldrh	r3, [r7, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d11c      	bne.n	800e8c0 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800e886:	7dfb      	ldrb	r3, [r7, #23]
 800e888:	2b40      	cmp	r3, #64	@ 0x40
 800e88a:	d913      	bls.n	800e8b4 <get_fileinfo+0x12c>
 800e88c:	7dfb      	ldrb	r3, [r7, #23]
 800e88e:	2b5a      	cmp	r3, #90	@ 0x5a
 800e890:	d810      	bhi.n	800e8b4 <get_fileinfo+0x12c>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6a1b      	ldr	r3, [r3, #32]
 800e896:	330c      	adds	r3, #12
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	461a      	mov	r2, r3
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d901      	bls.n	800e8a6 <get_fileinfo+0x11e>
 800e8a2:	2310      	movs	r3, #16
 800e8a4:	e000      	b.n	800e8a8 <get_fileinfo+0x120>
 800e8a6:	2308      	movs	r3, #8
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 800e8ae:	7dfb      	ldrb	r3, [r7, #23]
 800e8b0:	3320      	adds	r3, #32
 800e8b2:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	3316      	adds	r3, #22
 800e8bc:	7dfa      	ldrb	r2, [r7, #23]
 800e8be:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	e000      	b.n	800e8ca <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 800e8c8:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	2b0a      	cmp	r3, #10
 800e8ce:	d9ae      	bls.n	800e82e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800e8d0:	89bb      	ldrh	r3, [r7, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d10d      	bne.n	800e8f2 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800e8d6:	683a      	ldr	r2, [r7, #0]
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	4413      	add	r3, r2
 800e8dc:	3316      	adds	r3, #22
 800e8de:	2200      	movs	r2, #0
 800e8e0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	6a1b      	ldr	r3, [r3, #32]
 800e8e6:	330c      	adds	r3, #12
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d101      	bne.n	800e8f2 <get_fileinfo+0x16a>
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	3309      	adds	r3, #9
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a1b      	ldr	r3, [r3, #32]
 800e902:	7ada      	ldrb	r2, [r3, #11]
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6a1b      	ldr	r3, [r3, #32]
 800e90c:	331c      	adds	r3, #28
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fe fee0 	bl	800d6d4 <ld_dword>
 800e914:	4602      	mov	r2, r0
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	3316      	adds	r3, #22
 800e920:	4618      	mov	r0, r3
 800e922:	f7fe fed7 	bl	800d6d4 <ld_dword>
 800e926:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	80da      	strh	r2, [r3, #6]
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	0c1b      	lsrs	r3, r3, #16
 800e934:	b29a      	uxth	r2, r3
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	809a      	strh	r2, [r3, #4]
 800e93a:	e000      	b.n	800e93e <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e93c:	bf00      	nop
}
 800e93e:	3720      	adds	r7, #32
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}

0800e944 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e944:	b580      	push	{r7, lr}
 800e946:	b08a      	sub	sp, #40	@ 0x28
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	60fb      	str	r3, [r7, #12]
 800e95c:	2300      	movs	r3, #0
 800e95e:	617b      	str	r3, [r7, #20]
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800e964:	69bb      	ldr	r3, [r7, #24]
 800e966:	1c5a      	adds	r2, r3, #1
 800e968:	61ba      	str	r2, [r7, #24]
 800e96a:	693a      	ldr	r2, [r7, #16]
 800e96c:	4413      	add	r3, r2
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800e972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e974:	2b1f      	cmp	r3, #31
 800e976:	d940      	bls.n	800e9fa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e978:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e97a:	2b2f      	cmp	r3, #47	@ 0x2f
 800e97c:	d006      	beq.n	800e98c <create_name+0x48>
 800e97e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e980:	2b5c      	cmp	r3, #92	@ 0x5c
 800e982:	d110      	bne.n	800e9a6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e984:	e002      	b.n	800e98c <create_name+0x48>
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	3301      	adds	r3, #1
 800e98a:	61bb      	str	r3, [r7, #24]
 800e98c:	693a      	ldr	r2, [r7, #16]
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	4413      	add	r3, r2
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b2f      	cmp	r3, #47	@ 0x2f
 800e996:	d0f6      	beq.n	800e986 <create_name+0x42>
 800e998:	693a      	ldr	r2, [r7, #16]
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	4413      	add	r3, r2
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e9a2:	d0f0      	beq.n	800e986 <create_name+0x42>
			break;
 800e9a4:	e02a      	b.n	800e9fc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2bfe      	cmp	r3, #254	@ 0xfe
 800e9aa:	d901      	bls.n	800e9b0 <create_name+0x6c>
 800e9ac:	2306      	movs	r3, #6
 800e9ae:	e17d      	b.n	800ecac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800e9b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e9b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9b8:	2101      	movs	r1, #1
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 ff4e 	bl	800f85c <ff_convert>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e9c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d101      	bne.n	800e9ce <create_name+0x8a>
 800e9ca:	2306      	movs	r3, #6
 800e9cc:	e16e      	b.n	800ecac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e9ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d0:	2b7f      	cmp	r3, #127	@ 0x7f
 800e9d2:	d809      	bhi.n	800e9e8 <create_name+0xa4>
 800e9d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	488d      	ldr	r0, [pc, #564]	@ (800ec10 <create_name+0x2cc>)
 800e9da:	f7fe ff27 	bl	800d82c <chk_chr>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d001      	beq.n	800e9e8 <create_name+0xa4>
 800e9e4:	2306      	movs	r3, #6
 800e9e6:	e161      	b.n	800ecac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	617a      	str	r2, [r7, #20]
 800e9ee:	005b      	lsls	r3, r3, #1
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e9f6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800e9f8:	e7b4      	b.n	800e964 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800e9fa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	69bb      	ldr	r3, [r7, #24]
 800ea00:	441a      	add	r2, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ea06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea08:	2b1f      	cmp	r3, #31
 800ea0a:	d801      	bhi.n	800ea10 <create_name+0xcc>
 800ea0c:	2304      	movs	r3, #4
 800ea0e:	e000      	b.n	800ea12 <create_name+0xce>
 800ea10:	2300      	movs	r3, #0
 800ea12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea16:	e011      	b.n	800ea3c <create_name+0xf8>
		w = lfn[di - 1];
 800ea18:	697a      	ldr	r2, [r7, #20]
 800ea1a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ea1e:	4413      	add	r3, r2
 800ea20:	005b      	lsls	r3, r3, #1
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ea2a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea2c:	2b20      	cmp	r3, #32
 800ea2e:	d002      	beq.n	800ea36 <create_name+0xf2>
 800ea30:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ea32:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea34:	d106      	bne.n	800ea44 <create_name+0x100>
		di--;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d1ea      	bne.n	800ea18 <create_name+0xd4>
 800ea42:	e000      	b.n	800ea46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ea44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	005b      	lsls	r3, r3, #1
 800ea4a:	68fa      	ldr	r2, [r7, #12]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	2200      	movs	r2, #0
 800ea50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d101      	bne.n	800ea5c <create_name+0x118>
 800ea58:	2306      	movs	r3, #6
 800ea5a:	e127      	b.n	800ecac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	3324      	adds	r3, #36	@ 0x24
 800ea60:	220b      	movs	r2, #11
 800ea62:	2120      	movs	r1, #32
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe fe9f 	bl	800d7a8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	61bb      	str	r3, [r7, #24]
 800ea6e:	e002      	b.n	800ea76 <create_name+0x132>
 800ea70:	69bb      	ldr	r3, [r7, #24]
 800ea72:	3301      	adds	r3, #1
 800ea74:	61bb      	str	r3, [r7, #24]
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	005b      	lsls	r3, r3, #1
 800ea7a:	68fa      	ldr	r2, [r7, #12]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	881b      	ldrh	r3, [r3, #0]
 800ea80:	2b20      	cmp	r3, #32
 800ea82:	d0f5      	beq.n	800ea70 <create_name+0x12c>
 800ea84:	69bb      	ldr	r3, [r7, #24]
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	68fa      	ldr	r2, [r7, #12]
 800ea8a:	4413      	add	r3, r2
 800ea8c:	881b      	ldrh	r3, [r3, #0]
 800ea8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea90:	d0ee      	beq.n	800ea70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d009      	beq.n	800eaac <create_name+0x168>
 800ea98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea9c:	f043 0303 	orr.w	r3, r3, #3
 800eaa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eaa4:	e002      	b.n	800eaac <create_name+0x168>
 800eaa6:	697b      	ldr	r3, [r7, #20]
 800eaa8:	3b01      	subs	r3, #1
 800eaaa:	617b      	str	r3, [r7, #20]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <create_name+0x182>
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800eab8:	4413      	add	r3, r2
 800eaba:	005b      	lsls	r3, r3, #1
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	4413      	add	r3, r2
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eac4:	d1ef      	bne.n	800eaa6 <create_name+0x162>

	i = b = 0; ni = 8;
 800eac6:	2300      	movs	r3, #0
 800eac8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eacc:	2300      	movs	r3, #0
 800eace:	623b      	str	r3, [r7, #32]
 800ead0:	2308      	movs	r3, #8
 800ead2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	1c5a      	adds	r2, r3, #1
 800ead8:	61ba      	str	r2, [r7, #24]
 800eada:	005b      	lsls	r3, r3, #1
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4413      	add	r3, r2
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eae4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	f000 8090 	beq.w	800ec0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800eaec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eaee:	2b20      	cmp	r3, #32
 800eaf0:	d006      	beq.n	800eb00 <create_name+0x1bc>
 800eaf2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eaf4:	2b2e      	cmp	r3, #46	@ 0x2e
 800eaf6:	d10a      	bne.n	800eb0e <create_name+0x1ca>
 800eaf8:	69ba      	ldr	r2, [r7, #24]
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d006      	beq.n	800eb0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eb00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb04:	f043 0303 	orr.w	r3, r3, #3
 800eb08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb0c:	e07d      	b.n	800ec0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800eb0e:	6a3a      	ldr	r2, [r7, #32]
 800eb10:	69fb      	ldr	r3, [r7, #28]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d203      	bcs.n	800eb1e <create_name+0x1da>
 800eb16:	69ba      	ldr	r2, [r7, #24]
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d123      	bne.n	800eb66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	2b0b      	cmp	r3, #11
 800eb22:	d106      	bne.n	800eb32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eb24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb28:	f043 0303 	orr.w	r3, r3, #3
 800eb2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800eb30:	e075      	b.n	800ec1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800eb32:	69ba      	ldr	r2, [r7, #24]
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d005      	beq.n	800eb46 <create_name+0x202>
 800eb3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb3e:	f043 0303 	orr.w	r3, r3, #3
 800eb42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800eb46:	69ba      	ldr	r2, [r7, #24]
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d866      	bhi.n	800ec1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	2308      	movs	r3, #8
 800eb54:	623b      	str	r3, [r7, #32]
 800eb56:	230b      	movs	r3, #11
 800eb58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800eb5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800eb5e:	009b      	lsls	r3, r3, #2
 800eb60:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800eb64:	e051      	b.n	800ec0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800eb66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb68:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb6a:	d914      	bls.n	800eb96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eb6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb6e:	2100      	movs	r1, #0
 800eb70:	4618      	mov	r0, r3
 800eb72:	f000 fe73 	bl	800f85c <ff_convert>
 800eb76:	4603      	mov	r3, r0
 800eb78:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800eb7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d004      	beq.n	800eb8a <create_name+0x246>
 800eb80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb82:	3b80      	subs	r3, #128	@ 0x80
 800eb84:	4a23      	ldr	r2, [pc, #140]	@ (800ec14 <create_name+0x2d0>)
 800eb86:	5cd3      	ldrb	r3, [r2, r3]
 800eb88:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800eb8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800eb8e:	f043 0302 	orr.w	r3, r3, #2
 800eb92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800eb96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d007      	beq.n	800ebac <create_name+0x268>
 800eb9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb9e:	4619      	mov	r1, r3
 800eba0:	481d      	ldr	r0, [pc, #116]	@ (800ec18 <create_name+0x2d4>)
 800eba2:	f7fe fe43 	bl	800d82c <chk_chr>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d008      	beq.n	800ebbe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ebac:	235f      	movs	r3, #95	@ 0x5f
 800ebae:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ebb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebb4:	f043 0303 	orr.w	r3, r3, #3
 800ebb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ebbc:	e01b      	b.n	800ebf6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ebbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebc0:	2b40      	cmp	r3, #64	@ 0x40
 800ebc2:	d909      	bls.n	800ebd8 <create_name+0x294>
 800ebc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebc6:	2b5a      	cmp	r3, #90	@ 0x5a
 800ebc8:	d806      	bhi.n	800ebd8 <create_name+0x294>
					b |= 2;
 800ebca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebce:	f043 0302 	orr.w	r3, r3, #2
 800ebd2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebd6:	e00e      	b.n	800ebf6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ebd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebda:	2b60      	cmp	r3, #96	@ 0x60
 800ebdc:	d90b      	bls.n	800ebf6 <create_name+0x2b2>
 800ebde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebe0:	2b7a      	cmp	r3, #122	@ 0x7a
 800ebe2:	d808      	bhi.n	800ebf6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ebe4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ebe8:	f043 0301 	orr.w	r3, r3, #1
 800ebec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ebf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebf2:	3b20      	subs	r3, #32
 800ebf4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ebf6:	6a3b      	ldr	r3, [r7, #32]
 800ebf8:	1c5a      	adds	r2, r3, #1
 800ebfa:	623a      	str	r2, [r7, #32]
 800ebfc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ebfe:	b2d1      	uxtb	r1, r2
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	4413      	add	r3, r2
 800ec04:	460a      	mov	r2, r1
 800ec06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ec0a:	e763      	b.n	800ead4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ec0c:	bf00      	nop
 800ec0e:	e006      	b.n	800ec1e <create_name+0x2da>
 800ec10:	08013898 	.word	0x08013898
 800ec14:	0801390c 	.word	0x0801390c
 800ec18:	080138a4 	.word	0x080138a4
			if (si > di) break;			/* No extension */
 800ec1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800ec24:	2be5      	cmp	r3, #229	@ 0xe5
 800ec26:	d103      	bne.n	800ec30 <create_name+0x2ec>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2205      	movs	r2, #5
 800ec2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	2b08      	cmp	r3, #8
 800ec34:	d104      	bne.n	800ec40 <create_name+0x2fc>
 800ec36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ec40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec44:	f003 030c 	and.w	r3, r3, #12
 800ec48:	2b0c      	cmp	r3, #12
 800ec4a:	d005      	beq.n	800ec58 <create_name+0x314>
 800ec4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec50:	f003 0303 	and.w	r3, r3, #3
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d105      	bne.n	800ec64 <create_name+0x320>
 800ec58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec5c:	f043 0302 	orr.w	r3, r3, #2
 800ec60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ec64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec68:	f003 0302 	and.w	r3, r3, #2
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d117      	bne.n	800eca0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ec70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec74:	f003 0303 	and.w	r3, r3, #3
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d105      	bne.n	800ec88 <create_name+0x344>
 800ec7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec80:	f043 0310 	orr.w	r3, r3, #16
 800ec84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ec88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ec8c:	f003 030c 	and.w	r3, r3, #12
 800ec90:	2b04      	cmp	r3, #4
 800ec92:	d105      	bne.n	800eca0 <create_name+0x35c>
 800ec94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec98:	f043 0308 	orr.w	r3, r3, #8
 800ec9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800eca6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ecaa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3728      	adds	r7, #40	@ 0x28
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b086      	sub	sp, #24
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
 800ecbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ecc8:	e002      	b.n	800ecd0 <follow_path+0x1c>
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	3301      	adds	r3, #1
 800ecce:	603b      	str	r3, [r7, #0]
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b2f      	cmp	r3, #47	@ 0x2f
 800ecd6:	d0f8      	beq.n	800ecca <follow_path+0x16>
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	2b5c      	cmp	r3, #92	@ 0x5c
 800ecde:	d0f4      	beq.n	800ecca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	2200      	movs	r2, #0
 800ece4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	781b      	ldrb	r3, [r3, #0]
 800ecea:	2b1f      	cmp	r3, #31
 800ecec:	d80a      	bhi.n	800ed04 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2280      	movs	r2, #128	@ 0x80
 800ecf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f7ff f98a 	bl	800e012 <dir_sdi>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	75fb      	strb	r3, [r7, #23]
 800ed02:	e043      	b.n	800ed8c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed04:	463b      	mov	r3, r7
 800ed06:	4619      	mov	r1, r3
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f7ff fe1b 	bl	800e944 <create_name>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed12:	7dfb      	ldrb	r3, [r7, #23]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d134      	bne.n	800ed82 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7ff fc75 	bl	800e608 <dir_find>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800ed28:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ed2a:	7dfb      	ldrb	r3, [r7, #23]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d00a      	beq.n	800ed46 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ed30:	7dfb      	ldrb	r3, [r7, #23]
 800ed32:	2b04      	cmp	r3, #4
 800ed34:	d127      	bne.n	800ed86 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ed36:	7afb      	ldrb	r3, [r7, #11]
 800ed38:	f003 0304 	and.w	r3, r3, #4
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d122      	bne.n	800ed86 <follow_path+0xd2>
 800ed40:	2305      	movs	r3, #5
 800ed42:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ed44:	e01f      	b.n	800ed86 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed46:	7afb      	ldrb	r3, [r7, #11]
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d11c      	bne.n	800ed8a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	799b      	ldrb	r3, [r3, #6]
 800ed54:	f003 0310 	and.w	r3, r3, #16
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d102      	bne.n	800ed62 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ed5c:	2305      	movs	r3, #5
 800ed5e:	75fb      	strb	r3, [r7, #23]
 800ed60:	e014      	b.n	800ed8c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	695b      	ldr	r3, [r3, #20]
 800ed6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed70:	4413      	add	r3, r2
 800ed72:	4619      	mov	r1, r3
 800ed74:	68f8      	ldr	r0, [r7, #12]
 800ed76:	f7ff fa8c 	bl	800e292 <ld_clust>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ed80:	e7c0      	b.n	800ed04 <follow_path+0x50>
			if (res != FR_OK) break;
 800ed82:	bf00      	nop
 800ed84:	e002      	b.n	800ed8c <follow_path+0xd8>
				break;
 800ed86:	bf00      	nop
 800ed88:	e000      	b.n	800ed8c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed8a:	bf00      	nop
			}
		}
	}

	return res;
 800ed8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ed96:	b480      	push	{r7}
 800ed98:	b087      	sub	sp, #28
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d031      	beq.n	800ee10 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	617b      	str	r3, [r7, #20]
 800edb2:	e002      	b.n	800edba <get_ldnumber+0x24>
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	3301      	adds	r3, #1
 800edb8:	617b      	str	r3, [r7, #20]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	2b1f      	cmp	r3, #31
 800edc0:	d903      	bls.n	800edca <get_ldnumber+0x34>
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	781b      	ldrb	r3, [r3, #0]
 800edc6:	2b3a      	cmp	r3, #58	@ 0x3a
 800edc8:	d1f4      	bne.n	800edb4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	781b      	ldrb	r3, [r3, #0]
 800edce:	2b3a      	cmp	r3, #58	@ 0x3a
 800edd0:	d11c      	bne.n	800ee0c <get_ldnumber+0x76>
			tp = *path;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	1c5a      	adds	r2, r3, #1
 800eddc:	60fa      	str	r2, [r7, #12]
 800edde:	781b      	ldrb	r3, [r3, #0]
 800ede0:	3b30      	subs	r3, #48	@ 0x30
 800ede2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b09      	cmp	r3, #9
 800ede8:	d80e      	bhi.n	800ee08 <get_ldnumber+0x72>
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d10a      	bne.n	800ee08 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d107      	bne.n	800ee08 <get_ldnumber+0x72>
					vol = (int)i;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	3301      	adds	r3, #1
 800ee00:	617b      	str	r3, [r7, #20]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	e002      	b.n	800ee12 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ee10:	693b      	ldr	r3, [r7, #16]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
	...

0800ee20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	70da      	strb	r2, [r3, #3]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f04f 32ff 	mov.w	r2, #4294967295
 800ee36:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7fe fe74 	bl	800db28 <move_window>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <check_fs+0x2a>
 800ee46:	2304      	movs	r3, #4
 800ee48:	e038      	b.n	800eebc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	3338      	adds	r3, #56	@ 0x38
 800ee4e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fe fc26 	bl	800d6a4 <ld_word>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d001      	beq.n	800ee68 <check_fs+0x48>
 800ee64:	2303      	movs	r3, #3
 800ee66:	e029      	b.n	800eebc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee6e:	2be9      	cmp	r3, #233	@ 0xe9
 800ee70:	d009      	beq.n	800ee86 <check_fs+0x66>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ee78:	2beb      	cmp	r3, #235	@ 0xeb
 800ee7a:	d11e      	bne.n	800eeba <check_fs+0x9a>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800ee82:	2b90      	cmp	r3, #144	@ 0x90
 800ee84:	d119      	bne.n	800eeba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	3338      	adds	r3, #56	@ 0x38
 800ee8a:	3336      	adds	r3, #54	@ 0x36
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe fc21 	bl	800d6d4 <ld_dword>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ee98:	4a0a      	ldr	r2, [pc, #40]	@ (800eec4 <check_fs+0xa4>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d101      	bne.n	800eea2 <check_fs+0x82>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	e00c      	b.n	800eebc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3338      	adds	r3, #56	@ 0x38
 800eea6:	3352      	adds	r3, #82	@ 0x52
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe fc13 	bl	800d6d4 <ld_dword>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	4a05      	ldr	r2, [pc, #20]	@ (800eec8 <check_fs+0xa8>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d101      	bne.n	800eeba <check_fs+0x9a>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	e000      	b.n	800eebc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800eeba:	2302      	movs	r3, #2
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	00544146 	.word	0x00544146
 800eec8:	33544146 	.word	0x33544146

0800eecc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b096      	sub	sp, #88	@ 0x58
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	4613      	mov	r3, r2
 800eed8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eeda:	68bb      	ldr	r3, [r7, #8]
 800eedc:	2200      	movs	r2, #0
 800eede:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f7ff ff58 	bl	800ed96 <get_ldnumber>
 800eee6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	da01      	bge.n	800eef2 <find_volume+0x26>
 800eeee:	230b      	movs	r3, #11
 800eef0:	e235      	b.n	800f35e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eef2:	4aa5      	ldr	r2, [pc, #660]	@ (800f188 <find_volume+0x2bc>)
 800eef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eefa:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d101      	bne.n	800ef06 <find_volume+0x3a>
 800ef02:	230c      	movs	r3, #12
 800ef04:	e22b      	b.n	800f35e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ef06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ef08:	f7fe fcab 	bl	800d862 <lock_fs>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <find_volume+0x4a>
 800ef12:	230f      	movs	r3, #15
 800ef14:	e223      	b.n	800f35e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ef1a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ef1c:	79fb      	ldrb	r3, [r7, #7]
 800ef1e:	f023 0301 	bic.w	r3, r3, #1
 800ef22:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ef24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d01a      	beq.n	800ef62 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ef2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef2e:	785b      	ldrb	r3, [r3, #1]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe fb37 	bl	800d5a4 <disk_status>
 800ef36:	4603      	mov	r3, r0
 800ef38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ef3c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d10c      	bne.n	800ef62 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ef48:	79fb      	ldrb	r3, [r7, #7]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d007      	beq.n	800ef5e <find_volume+0x92>
 800ef4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef52:	f003 0304 	and.w	r3, r3, #4
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d001      	beq.n	800ef5e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ef5a:	230a      	movs	r3, #10
 800ef5c:	e1ff      	b.n	800f35e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ef5e:	2300      	movs	r3, #0
 800ef60:	e1fd      	b.n	800f35e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ef62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef64:	2200      	movs	r2, #0
 800ef66:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ef68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef6a:	b2da      	uxtb	r2, r3
 800ef6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef6e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ef70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ef72:	785b      	ldrb	r3, [r3, #1]
 800ef74:	4618      	mov	r0, r3
 800ef76:	f7fe fb2f 	bl	800d5d8 <disk_initialize>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ef80:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef84:	f003 0301 	and.w	r3, r3, #1
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ef8c:	2303      	movs	r3, #3
 800ef8e:	e1e6      	b.n	800f35e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ef90:	79fb      	ldrb	r3, [r7, #7]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d007      	beq.n	800efa6 <find_volume+0xda>
 800ef96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ef9a:	f003 0304 	and.w	r3, r3, #4
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d001      	beq.n	800efa6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800efa2:	230a      	movs	r3, #10
 800efa4:	e1db      	b.n	800f35e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800efa6:	2300      	movs	r3, #0
 800efa8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800efaa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800efac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800efae:	f7ff ff37 	bl	800ee20 <check_fs>
 800efb2:	4603      	mov	r3, r0
 800efb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800efb8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d149      	bne.n	800f054 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800efc0:	2300      	movs	r3, #0
 800efc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800efc4:	e01e      	b.n	800f004 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800efc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efc8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800efcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efce:	011b      	lsls	r3, r3, #4
 800efd0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800efd4:	4413      	add	r3, r2
 800efd6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800efd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efda:	3304      	adds	r3, #4
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d006      	beq.n	800eff0 <find_volume+0x124>
 800efe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800efe4:	3308      	adds	r3, #8
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7fe fb74 	bl	800d6d4 <ld_dword>
 800efec:	4602      	mov	r2, r0
 800efee:	e000      	b.n	800eff2 <find_volume+0x126>
 800eff0:	2200      	movs	r2, #0
 800eff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eff4:	009b      	lsls	r3, r3, #2
 800eff6:	3358      	adds	r3, #88	@ 0x58
 800eff8:	443b      	add	r3, r7
 800effa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800effe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f000:	3301      	adds	r3, #1
 800f002:	643b      	str	r3, [r7, #64]	@ 0x40
 800f004:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f006:	2b03      	cmp	r3, #3
 800f008:	d9dd      	bls.n	800efc6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f00a:	2300      	movs	r3, #0
 800f00c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f00e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <find_volume+0x14e>
 800f014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f016:	3b01      	subs	r3, #1
 800f018:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f01a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	3358      	adds	r3, #88	@ 0x58
 800f020:	443b      	add	r3, r7
 800f022:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f026:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f028:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d005      	beq.n	800f03a <find_volume+0x16e>
 800f02e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f030:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f032:	f7ff fef5 	bl	800ee20 <check_fs>
 800f036:	4603      	mov	r3, r0
 800f038:	e000      	b.n	800f03c <find_volume+0x170>
 800f03a:	2303      	movs	r3, #3
 800f03c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f040:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f044:	2b01      	cmp	r3, #1
 800f046:	d905      	bls.n	800f054 <find_volume+0x188>
 800f048:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f04a:	3301      	adds	r3, #1
 800f04c:	643b      	str	r3, [r7, #64]	@ 0x40
 800f04e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f050:	2b03      	cmp	r3, #3
 800f052:	d9e2      	bls.n	800f01a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f054:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f058:	2b04      	cmp	r3, #4
 800f05a:	d101      	bne.n	800f060 <find_volume+0x194>
 800f05c:	2301      	movs	r3, #1
 800f05e:	e17e      	b.n	800f35e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f060:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f064:	2b01      	cmp	r3, #1
 800f066:	d901      	bls.n	800f06c <find_volume+0x1a0>
 800f068:	230d      	movs	r3, #13
 800f06a:	e178      	b.n	800f35e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06e:	3338      	adds	r3, #56	@ 0x38
 800f070:	330b      	adds	r3, #11
 800f072:	4618      	mov	r0, r3
 800f074:	f7fe fb16 	bl	800d6a4 <ld_word>
 800f078:	4603      	mov	r3, r0
 800f07a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f07e:	d001      	beq.n	800f084 <find_volume+0x1b8>
 800f080:	230d      	movs	r3, #13
 800f082:	e16c      	b.n	800f35e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f086:	3338      	adds	r3, #56	@ 0x38
 800f088:	3316      	adds	r3, #22
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7fe fb0a 	bl	800d6a4 <ld_word>
 800f090:	4603      	mov	r3, r0
 800f092:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f094:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f096:	2b00      	cmp	r3, #0
 800f098:	d106      	bne.n	800f0a8 <find_volume+0x1dc>
 800f09a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f09c:	3338      	adds	r3, #56	@ 0x38
 800f09e:	3324      	adds	r3, #36	@ 0x24
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f7fe fb17 	bl	800d6d4 <ld_dword>
 800f0a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f0ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800f0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ba:	789b      	ldrb	r3, [r3, #2]
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d005      	beq.n	800f0cc <find_volume+0x200>
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0c2:	789b      	ldrb	r3, [r3, #2]
 800f0c4:	2b02      	cmp	r3, #2
 800f0c6:	d001      	beq.n	800f0cc <find_volume+0x200>
 800f0c8:	230d      	movs	r3, #13
 800f0ca:	e148      	b.n	800f35e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ce:	789b      	ldrb	r3, [r3, #2]
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f0d4:	fb02 f303 	mul.w	r3, r2, r3
 800f0d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f0da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f0e0:	461a      	mov	r2, r3
 800f0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0e8:	895b      	ldrh	r3, [r3, #10]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d008      	beq.n	800f100 <find_volume+0x234>
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f0:	895b      	ldrh	r3, [r3, #10]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0f6:	895b      	ldrh	r3, [r3, #10]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	4013      	ands	r3, r2
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d001      	beq.n	800f104 <find_volume+0x238>
 800f100:	230d      	movs	r3, #13
 800f102:	e12c      	b.n	800f35e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f106:	3338      	adds	r3, #56	@ 0x38
 800f108:	3311      	adds	r3, #17
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe faca 	bl	800d6a4 <ld_word>
 800f110:	4603      	mov	r3, r0
 800f112:	461a      	mov	r2, r3
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11a:	891b      	ldrh	r3, [r3, #8]
 800f11c:	f003 030f 	and.w	r3, r3, #15
 800f120:	b29b      	uxth	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <find_volume+0x25e>
 800f126:	230d      	movs	r3, #13
 800f128:	e119      	b.n	800f35e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f12c:	3338      	adds	r3, #56	@ 0x38
 800f12e:	3313      	adds	r3, #19
 800f130:	4618      	mov	r0, r3
 800f132:	f7fe fab7 	bl	800d6a4 <ld_word>
 800f136:	4603      	mov	r3, r0
 800f138:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f13a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d106      	bne.n	800f14e <find_volume+0x282>
 800f140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f142:	3338      	adds	r3, #56	@ 0x38
 800f144:	3320      	adds	r3, #32
 800f146:	4618      	mov	r0, r3
 800f148:	f7fe fac4 	bl	800d6d4 <ld_dword>
 800f14c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f150:	3338      	adds	r3, #56	@ 0x38
 800f152:	330e      	adds	r3, #14
 800f154:	4618      	mov	r0, r3
 800f156:	f7fe faa5 	bl	800d6a4 <ld_word>
 800f15a:	4603      	mov	r3, r0
 800f15c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f15e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f160:	2b00      	cmp	r3, #0
 800f162:	d101      	bne.n	800f168 <find_volume+0x29c>
 800f164:	230d      	movs	r3, #13
 800f166:	e0fa      	b.n	800f35e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f168:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f16c:	4413      	add	r3, r2
 800f16e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f170:	8912      	ldrh	r2, [r2, #8]
 800f172:	0912      	lsrs	r2, r2, #4
 800f174:	b292      	uxth	r2, r2
 800f176:	4413      	add	r3, r2
 800f178:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f17a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f17e:	429a      	cmp	r2, r3
 800f180:	d204      	bcs.n	800f18c <find_volume+0x2c0>
 800f182:	230d      	movs	r3, #13
 800f184:	e0eb      	b.n	800f35e <find_volume+0x492>
 800f186:	bf00      	nop
 800f188:	200012f4 	.word	0x200012f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f18c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f194:	8952      	ldrh	r2, [r2, #10]
 800f196:	fbb3 f3f2 	udiv	r3, r3, r2
 800f19a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <find_volume+0x2da>
 800f1a2:	230d      	movs	r3, #13
 800f1a4:	e0db      	b.n	800f35e <find_volume+0x492>
		fmt = FS_FAT32;
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d802      	bhi.n	800f1bc <find_volume+0x2f0>
 800f1b6:	2302      	movs	r3, #2
 800f1b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d802      	bhi.n	800f1cc <find_volume+0x300>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ce:	1c9a      	adds	r2, r3, #2
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1d8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f1da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f1dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1de:	441a      	add	r2, r3
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1e2:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f1e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e8:	441a      	add	r2, r3
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ec:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800f1ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f1f2:	2b03      	cmp	r3, #3
 800f1f4:	d11e      	bne.n	800f234 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1f8:	3338      	adds	r3, #56	@ 0x38
 800f1fa:	332a      	adds	r3, #42	@ 0x2a
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fe fa51 	bl	800d6a4 <ld_word>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <find_volume+0x340>
 800f208:	230d      	movs	r3, #13
 800f20a:	e0a8      	b.n	800f35e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f20e:	891b      	ldrh	r3, [r3, #8]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <find_volume+0x34c>
 800f214:	230d      	movs	r3, #13
 800f216:	e0a2      	b.n	800f35e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f21a:	3338      	adds	r3, #56	@ 0x38
 800f21c:	332c      	adds	r3, #44	@ 0x2c
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fe fa58 	bl	800d6d4 <ld_dword>
 800f224:	4602      	mov	r2, r0
 800f226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f228:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22c:	69db      	ldr	r3, [r3, #28]
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	647b      	str	r3, [r7, #68]	@ 0x44
 800f232:	e01f      	b.n	800f274 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f236:	891b      	ldrh	r3, [r3, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d101      	bne.n	800f240 <find_volume+0x374>
 800f23c:	230d      	movs	r3, #13
 800f23e:	e08e      	b.n	800f35e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f244:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f246:	441a      	add	r2, r3
 800f248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f24a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f24c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f250:	2b02      	cmp	r3, #2
 800f252:	d103      	bne.n	800f25c <find_volume+0x390>
 800f254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f256:	69db      	ldr	r3, [r3, #28]
 800f258:	005b      	lsls	r3, r3, #1
 800f25a:	e00a      	b.n	800f272 <find_volume+0x3a6>
 800f25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	4613      	mov	r3, r2
 800f262:	005b      	lsls	r3, r3, #1
 800f264:	4413      	add	r3, r2
 800f266:	085a      	lsrs	r2, r3, #1
 800f268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	f003 0301 	and.w	r3, r3, #1
 800f270:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f272:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f276:	6a1a      	ldr	r2, [r3, #32]
 800f278:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f27a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f27e:	0a5b      	lsrs	r3, r3, #9
 800f280:	429a      	cmp	r2, r3
 800f282:	d201      	bcs.n	800f288 <find_volume+0x3bc>
 800f284:	230d      	movs	r3, #13
 800f286:	e06a      	b.n	800f35e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28a:	f04f 32ff 	mov.w	r2, #4294967295
 800f28e:	619a      	str	r2, [r3, #24]
 800f290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f292:	699a      	ldr	r2, [r3, #24]
 800f294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f296:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29a:	2280      	movs	r2, #128	@ 0x80
 800f29c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f29e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f2a2:	2b03      	cmp	r3, #3
 800f2a4:	d149      	bne.n	800f33a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2a8:	3338      	adds	r3, #56	@ 0x38
 800f2aa:	3330      	adds	r3, #48	@ 0x30
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe f9f9 	bl	800d6a4 <ld_word>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d140      	bne.n	800f33a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f2b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f2c0:	f7fe fc32 	bl	800db28 <move_window>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d137      	bne.n	800f33a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800f2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d2:	3338      	adds	r3, #56	@ 0x38
 800f2d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fe f9e3 	bl	800d6a4 <ld_word>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	461a      	mov	r2, r3
 800f2e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d127      	bne.n	800f33a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f2ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ec:	3338      	adds	r3, #56	@ 0x38
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe f9f0 	bl	800d6d4 <ld_dword>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	4a1c      	ldr	r2, [pc, #112]	@ (800f368 <find_volume+0x49c>)
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d11e      	bne.n	800f33a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fe:	3338      	adds	r3, #56	@ 0x38
 800f300:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f304:	4618      	mov	r0, r3
 800f306:	f7fe f9e5 	bl	800d6d4 <ld_dword>
 800f30a:	4603      	mov	r3, r0
 800f30c:	4a17      	ldr	r2, [pc, #92]	@ (800f36c <find_volume+0x4a0>)
 800f30e:	4293      	cmp	r3, r2
 800f310:	d113      	bne.n	800f33a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f314:	3338      	adds	r3, #56	@ 0x38
 800f316:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f31a:	4618      	mov	r0, r3
 800f31c:	f7fe f9da 	bl	800d6d4 <ld_dword>
 800f320:	4602      	mov	r2, r0
 800f322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f324:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f328:	3338      	adds	r3, #56	@ 0x38
 800f32a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fe f9d0 	bl	800d6d4 <ld_dword>
 800f334:	4602      	mov	r2, r0
 800f336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f338:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f33a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f33c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f340:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f342:	4b0b      	ldr	r3, [pc, #44]	@ (800f370 <find_volume+0x4a4>)
 800f344:	881b      	ldrh	r3, [r3, #0]
 800f346:	3301      	adds	r3, #1
 800f348:	b29a      	uxth	r2, r3
 800f34a:	4b09      	ldr	r3, [pc, #36]	@ (800f370 <find_volume+0x4a4>)
 800f34c:	801a      	strh	r2, [r3, #0]
 800f34e:	4b08      	ldr	r3, [pc, #32]	@ (800f370 <find_volume+0x4a4>)
 800f350:	881a      	ldrh	r2, [r3, #0]
 800f352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f354:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f356:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f358:	f7fe fb7e 	bl	800da58 <clear_lock>
#endif
	return FR_OK;
 800f35c:	2300      	movs	r3, #0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3758      	adds	r7, #88	@ 0x58
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	41615252 	.word	0x41615252
 800f36c:	61417272 	.word	0x61417272
 800f370:	200012f8 	.word	0x200012f8

0800f374 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f37e:	2309      	movs	r3, #9
 800f380:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d02e      	beq.n	800f3e6 <validate+0x72>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d02a      	beq.n	800f3e6 <validate+0x72>
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d025      	beq.n	800f3e6 <validate+0x72>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	889a      	ldrh	r2, [r3, #4]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	88db      	ldrh	r3, [r3, #6]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d11e      	bne.n	800f3e6 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fe fa58 	bl	800d862 <lock_fs>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d014      	beq.n	800f3e2 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	785b      	ldrb	r3, [r3, #1]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe f8f0 	bl	800d5a4 <disk_status>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f003 0301 	and.w	r3, r3, #1
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d102      	bne.n	800f3d4 <validate+0x60>
				res = FR_OK;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	73fb      	strb	r3, [r7, #15]
 800f3d2:	e008      	b.n	800f3e6 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2100      	movs	r1, #0
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f7fe fa57 	bl	800d88e <unlock_fs>
 800f3e0:	e001      	b.n	800f3e6 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f3e2:	230f      	movs	r3, #15
 800f3e4:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d102      	bne.n	800f3f2 <validate+0x7e>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	e000      	b.n	800f3f4 <validate+0x80>
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	6013      	str	r3, [r2, #0]
	return res;
 800f3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3710      	adds	r7, #16
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}
	...

0800f404 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b088      	sub	sp, #32
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	4613      	mov	r3, r2
 800f410:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f416:	f107 0310 	add.w	r3, r7, #16
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7ff fcbb 	bl	800ed96 <get_ldnumber>
 800f420:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	2b00      	cmp	r3, #0
 800f426:	da01      	bge.n	800f42c <f_mount+0x28>
 800f428:	230b      	movs	r3, #11
 800f42a:	e048      	b.n	800f4be <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f42c:	4a26      	ldr	r2, [pc, #152]	@ (800f4c8 <f_mount+0xc4>)
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f434:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d00f      	beq.n	800f45c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f43c:	69b8      	ldr	r0, [r7, #24]
 800f43e:	f7fe fb0b 	bl	800da58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	4618      	mov	r0, r3
 800f448:	f000 faee 	bl	800fa28 <ff_del_syncobj>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d101      	bne.n	800f456 <f_mount+0x52>
 800f452:	2302      	movs	r3, #2
 800f454:	e033      	b.n	800f4be <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	2200      	movs	r2, #0
 800f45a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00f      	beq.n	800f482 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	b2da      	uxtb	r2, r3
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3310      	adds	r3, #16
 800f470:	4619      	mov	r1, r3
 800f472:	4610      	mov	r0, r2
 800f474:	f000 fab8 	bl	800f9e8 <ff_cre_syncobj>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d101      	bne.n	800f482 <f_mount+0x7e>
 800f47e:	2302      	movs	r3, #2
 800f480:	e01d      	b.n	800f4be <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	4910      	ldr	r1, [pc, #64]	@ (800f4c8 <f_mount+0xc4>)
 800f486:	69fb      	ldr	r3, [r7, #28]
 800f488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d002      	beq.n	800f498 <f_mount+0x94>
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	2b01      	cmp	r3, #1
 800f496:	d001      	beq.n	800f49c <f_mount+0x98>
 800f498:	2300      	movs	r3, #0
 800f49a:	e010      	b.n	800f4be <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f49c:	f107 010c 	add.w	r1, r7, #12
 800f4a0:	f107 0308 	add.w	r3, r7, #8
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7ff fd10 	bl	800eecc <find_volume>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	7dfa      	ldrb	r2, [r7, #23]
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f7fe f9e9 	bl	800d88e <unlock_fs>
 800f4bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3720      	adds	r7, #32
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	200012f4 	.word	0x200012f4

0800f4cc <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f4d8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f4dc:	6018      	str	r0, [r3, #0]
 800f4de:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f4e2:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800f4e6:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800f4e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f4ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <f_opendir+0x2e>
 800f4f6:	2309      	movs	r3, #9
 800f4f8:	e0a8      	b.n	800f64c <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 800f4fa:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f4fe:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 800f508:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 800f50c:	463b      	mov	r3, r7
 800f50e:	2200      	movs	r2, #0
 800f510:	4618      	mov	r0, r3
 800f512:	f7ff fcdb 	bl	800eecc <find_volume>
 800f516:	4603      	mov	r3, r0
 800f518:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 800f51c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f520:	2b00      	cmp	r3, #0
 800f522:	f040 8081 	bne.w	800f628 <f_opendir+0x15c>
		obj->fs = fs;
 800f526:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800f52a:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f52e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800f530:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f534:	f107 020c 	add.w	r2, r7, #12
 800f538:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800f53a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f53e:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 800f542:	681a      	ldr	r2, [r3, #0]
 800f544:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f548:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f54c:	4611      	mov	r1, r2
 800f54e:	6818      	ldr	r0, [r3, #0]
 800f550:	f7ff fbb0 	bl	800ecb4 <follow_path>
 800f554:	4603      	mov	r3, r0
 800f556:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 800f55a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d15b      	bne.n	800f61a <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800f562:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f566:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f570:	b25b      	sxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	db1a      	blt.n	800f5ac <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800f576:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f57a:	799b      	ldrb	r3, [r3, #6]
 800f57c:	f003 0310 	and.w	r3, r3, #16
 800f580:	2b00      	cmp	r3, #0
 800f582:	d010      	beq.n	800f5a6 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800f584:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 800f588:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f58c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	6a1b      	ldr	r3, [r3, #32]
 800f594:	4619      	mov	r1, r3
 800f596:	4610      	mov	r0, r2
 800f598:	f7fe fe7b 	bl	800e292 <ld_clust>
 800f59c:	4602      	mov	r2, r0
 800f59e:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f5a2:	609a      	str	r2, [r3, #8]
 800f5a4:	e002      	b.n	800f5ac <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800f5a6:	2305      	movs	r3, #5
 800f5a8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 800f5ac:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d132      	bne.n	800f61a <f_opendir+0x14e>
				obj->id = fs->id;
 800f5b4:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f5b8:	88da      	ldrh	r2, [r3, #6]
 800f5ba:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f5be:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800f5c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f5c4:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f5c8:	2100      	movs	r1, #0
 800f5ca:	6818      	ldr	r0, [r3, #0]
 800f5cc:	f7fe fd21 	bl	800e012 <dir_sdi>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800f5d6:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d11d      	bne.n	800f61a <f_opendir+0x14e>
					if (obj->sclust) {
 800f5de:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f5e2:	689b      	ldr	r3, [r3, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d014      	beq.n	800f612 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800f5e8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f5ec:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	6818      	ldr	r0, [r3, #0]
 800f5f4:	f7fe f966 	bl	800d8c4 <inc_lock>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f5fe:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800f600:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f604:	691b      	ldr	r3, [r3, #16]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d107      	bne.n	800f61a <f_opendir+0x14e>
 800f60a:	2312      	movs	r3, #18
 800f60c:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 800f610:	e003      	b.n	800f61a <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800f612:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f616:	2200      	movs	r2, #0
 800f618:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800f61a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f61e:	2b04      	cmp	r3, #4
 800f620:	d102      	bne.n	800f628 <f_opendir+0x15c>
 800f622:	2305      	movs	r3, #5
 800f624:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800f628:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d003      	beq.n	800f638 <f_opendir+0x16c>
 800f630:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f638:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 800f63c:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 800f640:	4611      	mov	r1, r2
 800f642:	4618      	mov	r0, r3
 800f644:	f7fe f923 	bl	800d88e <unlock_fs>
 800f648:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800f656:	b580      	push	{r7, lr}
 800f658:	b084      	sub	sp, #16
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f107 0208 	add.w	r2, r7, #8
 800f664:	4611      	mov	r1, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff fe84 	bl	800f374 <validate>
 800f66c:	4603      	mov	r3, r0
 800f66e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d115      	bne.n	800f6a2 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	691b      	ldr	r3, [r3, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d006      	beq.n	800f68c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	691b      	ldr	r3, [r3, #16]
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe f9ac 	bl	800d9e0 <dec_lock>
 800f688:	4603      	mov	r3, r0
 800f68a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d102      	bne.n	800f698 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2200      	movs	r2, #0
 800f696:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	2100      	movs	r1, #0
 800f69c:	4618      	mov	r0, r3
 800f69e:	f7fe f8f6 	bl	800d88e <unlock_fs>
#endif
	}
	return res;
 800f6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f6b8:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f6bc:	6018      	str	r0, [r3, #0]
 800f6be:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f6c2:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f6c6:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800f6c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f6cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7ff fe4b 	bl	800f374 <validate>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 800f6e4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d14b      	bne.n	800f784 <f_readdir+0xd8>
		if (!fno) {
 800f6ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f6f0:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10b      	bne.n	800f712 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800f6fa:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f6fe:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f702:	2100      	movs	r1, #0
 800f704:	6818      	ldr	r0, [r3, #0]
 800f706:	f7fe fc84 	bl	800e012 <dir_sdi>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 800f710:	e038      	b.n	800f784 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 800f712:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800f716:	f107 0208 	add.w	r2, r7, #8
 800f71a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800f71c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f720:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f724:	2100      	movs	r1, #0
 800f726:	6818      	ldr	r0, [r3, #0]
 800f728:	f7fe fec7 	bl	800e4ba <dir_read>
 800f72c:	4603      	mov	r3, r0
 800f72e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800f732:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800f736:	2b04      	cmp	r3, #4
 800f738:	d102      	bne.n	800f740 <f_readdir+0x94>
 800f73a:	2300      	movs	r3, #0
 800f73c:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800f740:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800f744:	2b00      	cmp	r3, #0
 800f746:	d11d      	bne.n	800f784 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 800f748:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f74c:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 800f750:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f754:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f758:	6811      	ldr	r1, [r2, #0]
 800f75a:	6818      	ldr	r0, [r3, #0]
 800f75c:	f7ff f814 	bl	800e788 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800f760:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 800f764:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 800f768:	2100      	movs	r1, #0
 800f76a:	6818      	ldr	r0, [r3, #0]
 800f76c:	f7fe fccc 	bl	800e108 <dir_next>
 800f770:	4603      	mov	r3, r0
 800f772:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800f776:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 800f77a:	2b04      	cmp	r3, #4
 800f77c:	d102      	bne.n	800f784 <f_readdir+0xd8>
 800f77e:	2300      	movs	r3, #0
 800f780:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800f784:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 800f788:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fe f87d 	bl	800d88e <unlock_fs>
 800f794:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 800f798:	4618      	mov	r0, r3
 800f79a:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}
	...

0800f7a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b087      	sub	sp, #28
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	60f8      	str	r0, [r7, #12]
 800f7ac:	60b9      	str	r1, [r7, #8]
 800f7ae:	4613      	mov	r3, r2
 800f7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f7b6:	2300      	movs	r3, #0
 800f7b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f7ba:	4b1f      	ldr	r3, [pc, #124]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7bc:	7a5b      	ldrb	r3, [r3, #9]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d131      	bne.n	800f828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f7c4:	4b1c      	ldr	r3, [pc, #112]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7c6:	7a5b      	ldrb	r3, [r3, #9]
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f7d2:	4b19      	ldr	r3, [pc, #100]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7d4:	7a5b      	ldrb	r3, [r3, #9]
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	4a17      	ldr	r2, [pc, #92]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7da:	009b      	lsls	r3, r3, #2
 800f7dc:	4413      	add	r3, r2
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f7e2:	4b15      	ldr	r3, [pc, #84]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7e4:	7a5b      	ldrb	r3, [r3, #9]
 800f7e6:	b2db      	uxtb	r3, r3
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4b13      	ldr	r3, [pc, #76]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7ec:	4413      	add	r3, r2
 800f7ee:	79fa      	ldrb	r2, [r7, #7]
 800f7f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f7f2:	4b11      	ldr	r3, [pc, #68]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7f4:	7a5b      	ldrb	r3, [r3, #9]
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	1c5a      	adds	r2, r3, #1
 800f7fa:	b2d1      	uxtb	r1, r2
 800f7fc:	4a0e      	ldr	r2, [pc, #56]	@ (800f838 <FATFS_LinkDriverEx+0x94>)
 800f7fe:	7251      	strb	r1, [r2, #9]
 800f800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f802:	7dbb      	ldrb	r3, [r7, #22]
 800f804:	3330      	adds	r3, #48	@ 0x30
 800f806:	b2da      	uxtb	r2, r3
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	3301      	adds	r3, #1
 800f810:	223a      	movs	r2, #58	@ 0x3a
 800f812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	3302      	adds	r3, #2
 800f818:	222f      	movs	r2, #47	@ 0x2f
 800f81a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	3303      	adds	r3, #3
 800f820:	2200      	movs	r2, #0
 800f822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f828:	7dfb      	ldrb	r3, [r7, #23]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	371c      	adds	r7, #28
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	2000131c 	.word	0x2000131c

0800f83c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f846:	2200      	movs	r2, #0
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7ff ffaa 	bl	800f7a4 <FATFS_LinkDriverEx>
 800f850:	4603      	mov	r3, r0
}
 800f852:	4618      	mov	r0, r3
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
	...

0800f85c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b085      	sub	sp, #20
 800f860:	af00      	add	r7, sp, #0
 800f862:	4603      	mov	r3, r0
 800f864:	6039      	str	r1, [r7, #0]
 800f866:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f868:	88fb      	ldrh	r3, [r7, #6]
 800f86a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f86c:	d802      	bhi.n	800f874 <ff_convert+0x18>
		c = chr;
 800f86e:	88fb      	ldrh	r3, [r7, #6]
 800f870:	81fb      	strh	r3, [r7, #14]
 800f872:	e025      	b.n	800f8c0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d00b      	beq.n	800f892 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f87a:	88fb      	ldrh	r3, [r7, #6]
 800f87c:	2bff      	cmp	r3, #255	@ 0xff
 800f87e:	d805      	bhi.n	800f88c <ff_convert+0x30>
 800f880:	88fb      	ldrh	r3, [r7, #6]
 800f882:	3b80      	subs	r3, #128	@ 0x80
 800f884:	4a12      	ldr	r2, [pc, #72]	@ (800f8d0 <ff_convert+0x74>)
 800f886:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f88a:	e000      	b.n	800f88e <ff_convert+0x32>
 800f88c:	2300      	movs	r3, #0
 800f88e:	81fb      	strh	r3, [r7, #14]
 800f890:	e016      	b.n	800f8c0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f892:	2300      	movs	r3, #0
 800f894:	81fb      	strh	r3, [r7, #14]
 800f896:	e009      	b.n	800f8ac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f898:	89fb      	ldrh	r3, [r7, #14]
 800f89a:	4a0d      	ldr	r2, [pc, #52]	@ (800f8d0 <ff_convert+0x74>)
 800f89c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f8a0:	88fa      	ldrh	r2, [r7, #6]
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d006      	beq.n	800f8b4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f8a6:	89fb      	ldrh	r3, [r7, #14]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	81fb      	strh	r3, [r7, #14]
 800f8ac:	89fb      	ldrh	r3, [r7, #14]
 800f8ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800f8b0:	d9f2      	bls.n	800f898 <ff_convert+0x3c>
 800f8b2:	e000      	b.n	800f8b6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f8b4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f8b6:	89fb      	ldrh	r3, [r7, #14]
 800f8b8:	3380      	adds	r3, #128	@ 0x80
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f8c0:	89fb      	ldrh	r3, [r7, #14]
}
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	3714      	adds	r7, #20
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8cc:	4770      	bx	lr
 800f8ce:	bf00      	nop
 800f8d0:	0801399c 	.word	0x0801399c

0800f8d4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	4603      	mov	r3, r0
 800f8dc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f8de:	88fb      	ldrh	r3, [r7, #6]
 800f8e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8e4:	d201      	bcs.n	800f8ea <ff_wtoupper+0x16>
 800f8e6:	4b3e      	ldr	r3, [pc, #248]	@ (800f9e0 <ff_wtoupper+0x10c>)
 800f8e8:	e000      	b.n	800f8ec <ff_wtoupper+0x18>
 800f8ea:	4b3e      	ldr	r3, [pc, #248]	@ (800f9e4 <ff_wtoupper+0x110>)
 800f8ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	1c9a      	adds	r2, r3, #2
 800f8f2:	617a      	str	r2, [r7, #20]
 800f8f4:	881b      	ldrh	r3, [r3, #0]
 800f8f6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f8f8:	8a7b      	ldrh	r3, [r7, #18]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d068      	beq.n	800f9d0 <ff_wtoupper+0xfc>
 800f8fe:	88fa      	ldrh	r2, [r7, #6]
 800f900:	8a7b      	ldrh	r3, [r7, #18]
 800f902:	429a      	cmp	r2, r3
 800f904:	d364      	bcc.n	800f9d0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	1c9a      	adds	r2, r3, #2
 800f90a:	617a      	str	r2, [r7, #20]
 800f90c:	881b      	ldrh	r3, [r3, #0]
 800f90e:	823b      	strh	r3, [r7, #16]
 800f910:	8a3b      	ldrh	r3, [r7, #16]
 800f912:	0a1b      	lsrs	r3, r3, #8
 800f914:	81fb      	strh	r3, [r7, #14]
 800f916:	8a3b      	ldrh	r3, [r7, #16]
 800f918:	b2db      	uxtb	r3, r3
 800f91a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f91c:	88fa      	ldrh	r2, [r7, #6]
 800f91e:	8a79      	ldrh	r1, [r7, #18]
 800f920:	8a3b      	ldrh	r3, [r7, #16]
 800f922:	440b      	add	r3, r1
 800f924:	429a      	cmp	r2, r3
 800f926:	da49      	bge.n	800f9bc <ff_wtoupper+0xe8>
			switch (cmd) {
 800f928:	89fb      	ldrh	r3, [r7, #14]
 800f92a:	2b08      	cmp	r3, #8
 800f92c:	d84f      	bhi.n	800f9ce <ff_wtoupper+0xfa>
 800f92e:	a201      	add	r2, pc, #4	@ (adr r2, 800f934 <ff_wtoupper+0x60>)
 800f930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f934:	0800f959 	.word	0x0800f959
 800f938:	0800f96b 	.word	0x0800f96b
 800f93c:	0800f981 	.word	0x0800f981
 800f940:	0800f989 	.word	0x0800f989
 800f944:	0800f991 	.word	0x0800f991
 800f948:	0800f999 	.word	0x0800f999
 800f94c:	0800f9a1 	.word	0x0800f9a1
 800f950:	0800f9a9 	.word	0x0800f9a9
 800f954:	0800f9b1 	.word	0x0800f9b1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f958:	88fa      	ldrh	r2, [r7, #6]
 800f95a:	8a7b      	ldrh	r3, [r7, #18]
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	005b      	lsls	r3, r3, #1
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	4413      	add	r3, r2
 800f964:	881b      	ldrh	r3, [r3, #0]
 800f966:	80fb      	strh	r3, [r7, #6]
 800f968:	e027      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f96a:	88fa      	ldrh	r2, [r7, #6]
 800f96c:	8a7b      	ldrh	r3, [r7, #18]
 800f96e:	1ad3      	subs	r3, r2, r3
 800f970:	b29b      	uxth	r3, r3
 800f972:	f003 0301 	and.w	r3, r3, #1
 800f976:	b29b      	uxth	r3, r3
 800f978:	88fa      	ldrh	r2, [r7, #6]
 800f97a:	1ad3      	subs	r3, r2, r3
 800f97c:	80fb      	strh	r3, [r7, #6]
 800f97e:	e01c      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f980:	88fb      	ldrh	r3, [r7, #6]
 800f982:	3b10      	subs	r3, #16
 800f984:	80fb      	strh	r3, [r7, #6]
 800f986:	e018      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f988:	88fb      	ldrh	r3, [r7, #6]
 800f98a:	3b20      	subs	r3, #32
 800f98c:	80fb      	strh	r3, [r7, #6]
 800f98e:	e014      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f990:	88fb      	ldrh	r3, [r7, #6]
 800f992:	3b30      	subs	r3, #48	@ 0x30
 800f994:	80fb      	strh	r3, [r7, #6]
 800f996:	e010      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f998:	88fb      	ldrh	r3, [r7, #6]
 800f99a:	3b1a      	subs	r3, #26
 800f99c:	80fb      	strh	r3, [r7, #6]
 800f99e:	e00c      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f9a0:	88fb      	ldrh	r3, [r7, #6]
 800f9a2:	3308      	adds	r3, #8
 800f9a4:	80fb      	strh	r3, [r7, #6]
 800f9a6:	e008      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f9a8:	88fb      	ldrh	r3, [r7, #6]
 800f9aa:	3b50      	subs	r3, #80	@ 0x50
 800f9ac:	80fb      	strh	r3, [r7, #6]
 800f9ae:	e004      	b.n	800f9ba <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f9b0:	88fb      	ldrh	r3, [r7, #6]
 800f9b2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f9b6:	80fb      	strh	r3, [r7, #6]
 800f9b8:	bf00      	nop
			}
			break;
 800f9ba:	e008      	b.n	800f9ce <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f9bc:	89fb      	ldrh	r3, [r7, #14]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d195      	bne.n	800f8ee <ff_wtoupper+0x1a>
 800f9c2:	8a3b      	ldrh	r3, [r7, #16]
 800f9c4:	005b      	lsls	r3, r3, #1
 800f9c6:	697a      	ldr	r2, [r7, #20]
 800f9c8:	4413      	add	r3, r2
 800f9ca:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f9cc:	e78f      	b.n	800f8ee <ff_wtoupper+0x1a>
			break;
 800f9ce:	bf00      	nop
	}

	return chr;
 800f9d0:	88fb      	ldrh	r3, [r7, #6]
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	371c      	adds	r7, #28
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9dc:	4770      	bx	lr
 800f9de:	bf00      	nop
 800f9e0:	08013a9c 	.word	0x08013a9c
 800f9e4:	08013c90 	.word	0x08013c90

0800f9e8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b086      	sub	sp, #24
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	6039      	str	r1, [r7, #0]
 800f9f2:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800f9fc:	f107 030c 	add.w	r3, r7, #12
 800fa00:	2101      	movs	r1, #1
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 f8cd 	bl	800fba2 <osSemaphoreCreate>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	bf14      	ite	ne
 800fa16:	2301      	movne	r3, #1
 800fa18:	2300      	moveq	r3, #0
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	617b      	str	r3, [r7, #20]

    return ret;
 800fa1e:	697b      	ldr	r3, [r7, #20]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 f96d 	bl	800fd10 <osSemaphoreDelete>
#endif
    return 1;
 800fa36:	2301      	movs	r3, #1
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b084      	sub	sp, #16
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800fa4c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f000 f8d9 	bl	800fc08 <osSemaphoreWait>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d101      	bne.n	800fa60 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fa60:	68fb      	ldr	r3, [r7, #12]
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b082      	sub	sp, #8
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f916 	bl	800fca4 <osSemaphoreRelease>
#endif
}
 800fa78:	bf00      	nop
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fa8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa92:	2b84      	cmp	r3, #132	@ 0x84
 800fa94:	d005      	beq.n	800faa2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fa96:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	4413      	add	r3, r2
 800fa9e:	3303      	adds	r3, #3
 800faa0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800faa2:	68fb      	ldr	r3, [r7, #12]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3714      	adds	r7, #20
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fab6:	f3ef 8305 	mrs	r3, IPSR
 800faba:	607b      	str	r3, [r7, #4]
  return(result);
 800fabc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	bf14      	ite	ne
 800fac2:	2301      	movne	r3, #1
 800fac4:	2300      	moveq	r3, #0
 800fac6:	b2db      	uxtb	r3, r3
}
 800fac8:	4618      	mov	r0, r3
 800faca:	370c      	adds	r7, #12
 800facc:	46bd      	mov	sp, r7
 800face:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad2:	4770      	bx	lr

0800fad4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fad8:	f001 fc92 	bl	8011400 <vTaskStartScheduler>
  
  return osOK;
 800fadc:	2300      	movs	r3, #0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	bd80      	pop	{r7, pc}

0800fae2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800fae2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fae4:	b089      	sub	sp, #36	@ 0x24
 800fae6:	af04      	add	r7, sp, #16
 800fae8:	6078      	str	r0, [r7, #4]
 800faea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	695b      	ldr	r3, [r3, #20]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d020      	beq.n	800fb36 <osThreadCreate+0x54>
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	699b      	ldr	r3, [r3, #24]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d01c      	beq.n	800fb36 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	685c      	ldr	r4, [r3, #4]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	691e      	ldr	r6, [r3, #16]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7ff ffb6 	bl	800fa80 <makeFreeRtosPriority>
 800fb14:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	695b      	ldr	r3, [r3, #20]
 800fb1a:	687a      	ldr	r2, [r7, #4]
 800fb1c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb1e:	9202      	str	r2, [sp, #8]
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	9100      	str	r1, [sp, #0]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	4632      	mov	r2, r6
 800fb28:	4629      	mov	r1, r5
 800fb2a:	4620      	mov	r0, r4
 800fb2c:	f001 fa88 	bl	8011040 <xTaskCreateStatic>
 800fb30:	4603      	mov	r3, r0
 800fb32:	60fb      	str	r3, [r7, #12]
 800fb34:	e01c      	b.n	800fb70 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	685c      	ldr	r4, [r3, #4]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb42:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff ff98 	bl	800fa80 <makeFreeRtosPriority>
 800fb50:	4602      	mov	r2, r0
 800fb52:	f107 030c 	add.w	r3, r7, #12
 800fb56:	9301      	str	r3, [sp, #4]
 800fb58:	9200      	str	r2, [sp, #0]
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	4632      	mov	r2, r6
 800fb5e:	4629      	mov	r1, r5
 800fb60:	4620      	mov	r0, r4
 800fb62:	f001 fad3 	bl	801110c <xTaskCreate>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b01      	cmp	r3, #1
 800fb6a:	d001      	beq.n	800fb70 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	e000      	b.n	800fb72 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fb70:	68fb      	ldr	r3, [r7, #12]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3714      	adds	r7, #20
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b084      	sub	sp, #16
 800fb7e:	af00      	add	r7, sp, #0
 800fb80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d001      	beq.n	800fb90 <osDelay+0x16>
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	e000      	b.n	800fb92 <osDelay+0x18>
 800fb90:	2301      	movs	r3, #1
 800fb92:	4618      	mov	r0, r3
 800fb94:	f001 fbfc 	bl	8011390 <vTaskDelay>
  
  return osOK;
 800fb98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b086      	sub	sp, #24
 800fba6:	af02      	add	r7, sp, #8
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00f      	beq.n	800fbd4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d10a      	bne.n	800fbd0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	2203      	movs	r2, #3
 800fbc0:	9200      	str	r2, [sp, #0]
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	2001      	movs	r0, #1
 800fbc8:	f000 fb7c 	bl	80102c4 <xQueueGenericCreateStatic>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	e016      	b.n	800fbfe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	e014      	b.n	800fbfe <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d110      	bne.n	800fbfc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800fbda:	2203      	movs	r2, #3
 800fbdc:	2100      	movs	r1, #0
 800fbde:	2001      	movs	r0, #1
 800fbe0:	f000 fbf7 	bl	80103d2 <xQueueGenericCreate>
 800fbe4:	60f8      	str	r0, [r7, #12]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d005      	beq.n	800fbf8 <osSemaphoreCreate+0x56>
 800fbec:	2300      	movs	r3, #0
 800fbee:	2200      	movs	r2, #0
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	68f8      	ldr	r0, [r7, #12]
 800fbf4:	f000 fc82 	bl	80104fc <xQueueGenericSend>
      return sema;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	e000      	b.n	800fbfe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800fbfc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
	...

0800fc08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b084      	sub	sp, #16
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800fc12:	2300      	movs	r3, #0
 800fc14:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d101      	bne.n	800fc20 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800fc1c:	2380      	movs	r3, #128	@ 0x80
 800fc1e:	e03a      	b.n	800fc96 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800fc20:	2300      	movs	r3, #0
 800fc22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2a:	d103      	bne.n	800fc34 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800fc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800fc30:	60fb      	str	r3, [r7, #12]
 800fc32:	e009      	b.n	800fc48 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d006      	beq.n	800fc48 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d101      	bne.n	800fc48 <osSemaphoreWait+0x40>
      ticks = 1;
 800fc44:	2301      	movs	r3, #1
 800fc46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800fc48:	f7ff ff32 	bl	800fab0 <inHandlerMode>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d017      	beq.n	800fc82 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fc52:	f107 0308 	add.w	r3, r7, #8
 800fc56:	461a      	mov	r2, r3
 800fc58:	2100      	movs	r1, #0
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fff0 	bl	8010c40 <xQueueReceiveFromISR>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b01      	cmp	r3, #1
 800fc64:	d001      	beq.n	800fc6a <osSemaphoreWait+0x62>
      return osErrorOS;
 800fc66:	23ff      	movs	r3, #255	@ 0xff
 800fc68:	e015      	b.n	800fc96 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d011      	beq.n	800fc94 <osSemaphoreWait+0x8c>
 800fc70:	4b0b      	ldr	r3, [pc, #44]	@ (800fca0 <osSemaphoreWait+0x98>)
 800fc72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc76:	601a      	str	r2, [r3, #0]
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	f3bf 8f6f 	isb	sy
 800fc80:	e008      	b.n	800fc94 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800fc82:	68f9      	ldr	r1, [r7, #12]
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f000 fec3 	bl	8010a10 <xQueueSemaphoreTake>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b01      	cmp	r3, #1
 800fc8e:	d001      	beq.n	800fc94 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800fc90:	23ff      	movs	r3, #255	@ 0xff
 800fc92:	e000      	b.n	800fc96 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3710      	adds	r7, #16
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	bd80      	pop	{r7, pc}
 800fc9e:	bf00      	nop
 800fca0:	e000ed04 	.word	0xe000ed04

0800fca4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800fcb4:	f7ff fefc 	bl	800fab0 <inHandlerMode>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d016      	beq.n	800fcec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800fcbe:	f107 0308 	add.w	r3, r7, #8
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f000 fd23 	bl	8010710 <xQueueGiveFromISR>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d001      	beq.n	800fcd4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800fcd0:	23ff      	movs	r3, #255	@ 0xff
 800fcd2:	e017      	b.n	800fd04 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d013      	beq.n	800fd02 <osSemaphoreRelease+0x5e>
 800fcda:	4b0c      	ldr	r3, [pc, #48]	@ (800fd0c <osSemaphoreRelease+0x68>)
 800fcdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fce0:	601a      	str	r2, [r3, #0]
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	e00a      	b.n	800fd02 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800fcec:	2300      	movs	r3, #0
 800fcee:	2200      	movs	r2, #0
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f000 fc02 	bl	80104fc <xQueueGenericSend>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	2b01      	cmp	r3, #1
 800fcfc:	d001      	beq.n	800fd02 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800fcfe:	23ff      	movs	r3, #255	@ 0xff
 800fd00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800fd02:	68fb      	ldr	r3, [r7, #12]
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3710      	adds	r7, #16
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	e000ed04 	.word	0xe000ed04

0800fd10 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b082      	sub	sp, #8
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800fd18:	f7ff feca 	bl	800fab0 <inHandlerMode>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800fd22:	2382      	movs	r3, #130	@ 0x82
 800fd24:	e003      	b.n	800fd2e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f001 f812 	bl	8010d50 <vQueueDelete>

  return osOK; 
 800fd2c:	2300      	movs	r3, #0
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}

0800fd36 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800fd36:	b580      	push	{r7, lr}
 800fd38:	b082      	sub	sp, #8
 800fd3a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800fd3c:	201c      	movs	r0, #28
 800fd3e:	f002 fcf3 	bl	8012728 <pvPortMalloc>
 800fd42:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00a      	beq.n	800fd60 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	3304      	adds	r3, #4
 800fd54:	4618      	mov	r0, r3
 800fd56:	f000 f995 	bl	8010084 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800fd60:	687b      	ldr	r3, [r7, #4]
	}
 800fd62:	4618      	mov	r0, r3
 800fd64:	3708      	adds	r7, #8
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}
	...

0800fd6c <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b090      	sub	sp, #64	@ 0x40
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	60f8      	str	r0, [r7, #12]
 800fd74:	60b9      	str	r1, [r7, #8]
 800fd76:	607a      	str	r2, [r7, #4]
 800fd78:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800fd82:	2300      	movs	r3, #0
 800fd84:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d10d      	bne.n	800fda8 <xEventGroupWaitBits+0x3c>
	__asm volatile
 800fd8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd90:	b672      	cpsid	i
 800fd92:	f383 8811 	msr	BASEPRI, r3
 800fd96:	f3bf 8f6f 	isb	sy
 800fd9a:	f3bf 8f4f 	dsb	sy
 800fd9e:	b662      	cpsie	i
 800fda0:	623b      	str	r3, [r7, #32]
}
 800fda2:	bf00      	nop
 800fda4:	bf00      	nop
 800fda6:	e7fd      	b.n	800fda4 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fdae:	d30d      	bcc.n	800fdcc <xEventGroupWaitBits+0x60>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	b672      	cpsid	i
 800fdb6:	f383 8811 	msr	BASEPRI, r3
 800fdba:	f3bf 8f6f 	isb	sy
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	b662      	cpsie	i
 800fdc4:	61fb      	str	r3, [r7, #28]
}
 800fdc6:	bf00      	nop
 800fdc8:	bf00      	nop
 800fdca:	e7fd      	b.n	800fdc8 <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d10d      	bne.n	800fdee <xEventGroupWaitBits+0x82>
	__asm volatile
 800fdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdd6:	b672      	cpsid	i
 800fdd8:	f383 8811 	msr	BASEPRI, r3
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	b662      	cpsie	i
 800fde6:	61bb      	str	r3, [r7, #24]
}
 800fde8:	bf00      	nop
 800fdea:	bf00      	nop
 800fdec:	e7fd      	b.n	800fdea <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fdee:	f002 f805 	bl	8011dfc <xTaskGetSchedulerState>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d102      	bne.n	800fdfe <xEventGroupWaitBits+0x92>
 800fdf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <xEventGroupWaitBits+0x96>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e000      	b.n	800fe04 <xEventGroupWaitBits+0x98>
 800fe02:	2300      	movs	r3, #0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d10d      	bne.n	800fe24 <xEventGroupWaitBits+0xb8>
	__asm volatile
 800fe08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0c:	b672      	cpsid	i
 800fe0e:	f383 8811 	msr	BASEPRI, r3
 800fe12:	f3bf 8f6f 	isb	sy
 800fe16:	f3bf 8f4f 	dsb	sy
 800fe1a:	b662      	cpsie	i
 800fe1c:	617b      	str	r3, [r7, #20]
}
 800fe1e:	bf00      	nop
 800fe20:	bf00      	nop
 800fe22:	e7fd      	b.n	800fe20 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 800fe24:	f001 fb52 	bl	80114cc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800fe28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	68b9      	ldr	r1, [r7, #8]
 800fe32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800fe34:	f000 f904 	bl	8010040 <prvTestWaitCondition>
 800fe38:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 800fe3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00e      	beq.n	800fe5e <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800fe40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe42:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d028      	beq.n	800fea0 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fe4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe50:	681a      	ldr	r2, [r3, #0]
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	43db      	mvns	r3, r3
 800fe56:	401a      	ands	r2, r3
 800fe58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe5a:	601a      	str	r2, [r3, #0]
 800fe5c:	e020      	b.n	800fea0 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800fe5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d104      	bne.n	800fe6e <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800fe64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe66:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe6c:	e018      	b.n	800fea0 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d003      	beq.n	800fe7c <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800fe74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fe7a:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d003      	beq.n	800fe8a <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800fe82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fe88:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fe8c:	1d18      	adds	r0, r3, #4
 800fe8e:	68ba      	ldr	r2, [r7, #8]
 800fe90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe92:	4313      	orrs	r3, r2
 800fe94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe96:	4619      	mov	r1, r3
 800fe98:	f001 fd3e 	bl	8011918 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800fea0:	f001 fb22 	bl	80114e8 <xTaskResumeAll>
 800fea4:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800fea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d031      	beq.n	800ff10 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 800feac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d107      	bne.n	800fec2 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 800feb2:	4b1a      	ldr	r3, [pc, #104]	@ (800ff1c <xEventGroupWaitBits+0x1b0>)
 800feb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800feb8:	601a      	str	r2, [r3, #0]
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800fec2:	f002 f965 	bl	8012190 <uxTaskResetEventItemValue>
 800fec6:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800fec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800feca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d11a      	bne.n	800ff08 <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 800fed2:	f002 fafb 	bl	80124cc <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800fed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800fedc:	683a      	ldr	r2, [r7, #0]
 800fede:	68b9      	ldr	r1, [r7, #8]
 800fee0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fee2:	f000 f8ad 	bl	8010040 <prvTestWaitCondition>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d009      	beq.n	800ff00 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d006      	beq.n	800ff00 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800fef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fef4:	681a      	ldr	r2, [r3, #0]
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	43db      	mvns	r3, r3
 800fefa:	401a      	ands	r2, r3
 800fefc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fefe:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800ff00:	2301      	movs	r3, #1
 800ff02:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800ff04:	f002 fb18 	bl	8012538 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ff08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff0a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ff0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800ff10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3740      	adds	r7, #64	@ 0x40
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	e000ed04 	.word	0xe000ed04

0800ff20 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b08e      	sub	sp, #56	@ 0x38
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800ff32:	2300      	movs	r3, #0
 800ff34:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10d      	bne.n	800ff58 <xEventGroupSetBits+0x38>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff40:	b672      	cpsid	i
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	b662      	cpsie	i
 800ff50:	613b      	str	r3, [r7, #16]
}
 800ff52:	bf00      	nop
 800ff54:	bf00      	nop
 800ff56:	e7fd      	b.n	800ff54 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ff5e:	d30d      	bcc.n	800ff7c <xEventGroupSetBits+0x5c>
	__asm volatile
 800ff60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff64:	b672      	cpsid	i
 800ff66:	f383 8811 	msr	BASEPRI, r3
 800ff6a:	f3bf 8f6f 	isb	sy
 800ff6e:	f3bf 8f4f 	dsb	sy
 800ff72:	b662      	cpsie	i
 800ff74:	60fb      	str	r3, [r7, #12]
}
 800ff76:	bf00      	nop
 800ff78:	bf00      	nop
 800ff7a:	e7fd      	b.n	800ff78 <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800ff7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7e:	3304      	adds	r3, #4
 800ff80:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ff82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff84:	3308      	adds	r3, #8
 800ff86:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800ff88:	f001 faa0 	bl	80114cc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800ff8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800ff92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	431a      	orrs	r2, r3
 800ff9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff9c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800ff9e:	e03c      	b.n	801001a <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 800ffa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800ffa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800ffac:	2300      	movs	r3, #0
 800ffae:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ffb6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ffbe:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d108      	bne.n	800ffdc <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800ffca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffcc:	681a      	ldr	r2, [r3, #0]
 800ffce:	69bb      	ldr	r3, [r7, #24]
 800ffd0:	4013      	ands	r3, r2
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d00b      	beq.n	800ffee <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ffda:	e008      	b.n	800ffee <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ffdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	69ba      	ldr	r2, [r7, #24]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d101      	bne.n	800ffee <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ffea:	2301      	movs	r3, #1
 800ffec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ffee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d010      	beq.n	8010016 <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800fff4:	697b      	ldr	r3, [r7, #20]
 800fff6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d003      	beq.n	8010006 <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800fffe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	4313      	orrs	r3, r2
 8010004:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8010006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801000e:	4619      	mov	r1, r3
 8010010:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8010012:	f001 fd29 	bl	8011a68 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8010016:	69fb      	ldr	r3, [r7, #28]
 8010018:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 801001a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	429a      	cmp	r2, r3
 8010020:	d1be      	bne.n	800ffa0 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8010022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010024:	681a      	ldr	r2, [r3, #0]
 8010026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010028:	43db      	mvns	r3, r3
 801002a:	401a      	ands	r2, r3
 801002c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801002e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8010030:	f001 fa5a 	bl	80114e8 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8010034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010036:	681b      	ldr	r3, [r3, #0]
}
 8010038:	4618      	mov	r0, r3
 801003a:	3738      	adds	r7, #56	@ 0x38
 801003c:	46bd      	mov	sp, r7
 801003e:	bd80      	pop	{r7, pc}

08010040 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8010040:	b480      	push	{r7}
 8010042:	b087      	sub	sp, #28
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801004c:	2300      	movs	r3, #0
 801004e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d107      	bne.n	8010066 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8010056:	68fa      	ldr	r2, [r7, #12]
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	4013      	ands	r3, r2
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00a      	beq.n	8010076 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010060:	2301      	movs	r3, #1
 8010062:	617b      	str	r3, [r7, #20]
 8010064:	e007      	b.n	8010076 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8010066:	68fa      	ldr	r2, [r7, #12]
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	4013      	ands	r3, r2
 801006c:	68ba      	ldr	r2, [r7, #8]
 801006e:	429a      	cmp	r2, r3
 8010070:	d101      	bne.n	8010076 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8010072:	2301      	movs	r3, #1
 8010074:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8010076:	697b      	ldr	r3, [r7, #20]
}
 8010078:	4618      	mov	r0, r3
 801007a:	371c      	adds	r7, #28
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f103 0208 	add.w	r2, r3, #8
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f04f 32ff 	mov.w	r2, #4294967295
 801009c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f103 0208 	add.w	r2, r3, #8
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f103 0208 	add.w	r2, r3, #8
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80100b8:	bf00      	nop
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80100c4:	b480      	push	{r7}
 80100c6:	b083      	sub	sp, #12
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	2200      	movs	r2, #0
 80100d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80100d2:	bf00      	nop
 80100d4:	370c      	adds	r7, #12
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr

080100de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100de:	b480      	push	{r7}
 80100e0:	b085      	sub	sp, #20
 80100e2:	af00      	add	r7, sp, #0
 80100e4:	6078      	str	r0, [r7, #4]
 80100e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	68fa      	ldr	r2, [r7, #12]
 80100f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	683b      	ldr	r3, [r7, #0]
 80100fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	683a      	ldr	r2, [r7, #0]
 8010102:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	683a      	ldr	r2, [r7, #0]
 8010108:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	601a      	str	r2, [r3, #0]
}
 801011a:	bf00      	nop
 801011c:	3714      	adds	r7, #20
 801011e:	46bd      	mov	sp, r7
 8010120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010124:	4770      	bx	lr

08010126 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010126:	b480      	push	{r7}
 8010128:	b085      	sub	sp, #20
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
 801012e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013c:	d103      	bne.n	8010146 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	60fb      	str	r3, [r7, #12]
 8010144:	e00c      	b.n	8010160 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	3308      	adds	r3, #8
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	e002      	b.n	8010154 <vListInsert+0x2e>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	60fb      	str	r3, [r7, #12]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	68ba      	ldr	r2, [r7, #8]
 801015c:	429a      	cmp	r2, r3
 801015e:	d2f6      	bcs.n	801014e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	685a      	ldr	r2, [r3, #4]
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	683a      	ldr	r2, [r7, #0]
 801016e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	68fa      	ldr	r2, [r7, #12]
 8010174:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	1c5a      	adds	r2, r3, #1
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	601a      	str	r2, [r3, #0]
}
 801018c:	bf00      	nop
 801018e:	3714      	adds	r7, #20
 8010190:	46bd      	mov	sp, r7
 8010192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010196:	4770      	bx	lr

08010198 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010198:	b480      	push	{r7}
 801019a:	b085      	sub	sp, #20
 801019c:	af00      	add	r7, sp, #0
 801019e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	691b      	ldr	r3, [r3, #16]
 80101a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	6892      	ldr	r2, [r2, #8]
 80101ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	689b      	ldr	r3, [r3, #8]
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	6852      	ldr	r2, [r2, #4]
 80101b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d103      	bne.n	80101cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	689a      	ldr	r2, [r3, #8]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2200      	movs	r2, #0
 80101d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	1e5a      	subs	r2, r3, #1
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	681b      	ldr	r3, [r3, #0]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
 80101f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10d      	bne.n	801021c <xQueueGenericReset+0x30>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010204:	b672      	cpsid	i
 8010206:	f383 8811 	msr	BASEPRI, r3
 801020a:	f3bf 8f6f 	isb	sy
 801020e:	f3bf 8f4f 	dsb	sy
 8010212:	b662      	cpsie	i
 8010214:	60bb      	str	r3, [r7, #8]
}
 8010216:	bf00      	nop
 8010218:	bf00      	nop
 801021a:	e7fd      	b.n	8010218 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 801021c:	f002 f956 	bl	80124cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010228:	68f9      	ldr	r1, [r7, #12]
 801022a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801022c:	fb01 f303 	mul.w	r3, r1, r3
 8010230:	441a      	add	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2200      	movs	r2, #0
 801023a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801024c:	3b01      	subs	r3, #1
 801024e:	68f9      	ldr	r1, [r7, #12]
 8010250:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010252:	fb01 f303 	mul.w	r3, r1, r3
 8010256:	441a      	add	r2, r3
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	22ff      	movs	r2, #255	@ 0xff
 8010260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	22ff      	movs	r2, #255	@ 0xff
 8010268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d114      	bne.n	801029c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d01a      	beq.n	80102b0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3310      	adds	r3, #16
 801027e:	4618      	mov	r0, r3
 8010280:	f001 fb8c 	bl	801199c <xTaskRemoveFromEventList>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d012      	beq.n	80102b0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801028a:	4b0d      	ldr	r3, [pc, #52]	@ (80102c0 <xQueueGenericReset+0xd4>)
 801028c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010290:	601a      	str	r2, [r3, #0]
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	e009      	b.n	80102b0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3310      	adds	r3, #16
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff feef 	bl	8010084 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	3324      	adds	r3, #36	@ 0x24
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff feea 	bl	8010084 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80102b0:	f002 f942 	bl	8012538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80102b4:	2301      	movs	r3, #1
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	e000ed04 	.word	0xe000ed04

080102c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b08e      	sub	sp, #56	@ 0x38
 80102c8:	af02      	add	r7, sp, #8
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	607a      	str	r2, [r7, #4]
 80102d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d10d      	bne.n	80102f4 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102dc:	b672      	cpsid	i
 80102de:	f383 8811 	msr	BASEPRI, r3
 80102e2:	f3bf 8f6f 	isb	sy
 80102e6:	f3bf 8f4f 	dsb	sy
 80102ea:	b662      	cpsie	i
 80102ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80102ee:	bf00      	nop
 80102f0:	bf00      	nop
 80102f2:	e7fd      	b.n	80102f0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d10d      	bne.n	8010316 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80102fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fe:	b672      	cpsid	i
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	b662      	cpsie	i
 801030e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010310:	bf00      	nop
 8010312:	bf00      	nop
 8010314:	e7fd      	b.n	8010312 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d002      	beq.n	8010322 <xQueueGenericCreateStatic+0x5e>
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <xQueueGenericCreateStatic+0x62>
 8010322:	2301      	movs	r3, #1
 8010324:	e000      	b.n	8010328 <xQueueGenericCreateStatic+0x64>
 8010326:	2300      	movs	r3, #0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d10d      	bne.n	8010348 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 801032c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010330:	b672      	cpsid	i
 8010332:	f383 8811 	msr	BASEPRI, r3
 8010336:	f3bf 8f6f 	isb	sy
 801033a:	f3bf 8f4f 	dsb	sy
 801033e:	b662      	cpsie	i
 8010340:	623b      	str	r3, [r7, #32]
}
 8010342:	bf00      	nop
 8010344:	bf00      	nop
 8010346:	e7fd      	b.n	8010344 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d102      	bne.n	8010354 <xQueueGenericCreateStatic+0x90>
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d101      	bne.n	8010358 <xQueueGenericCreateStatic+0x94>
 8010354:	2301      	movs	r3, #1
 8010356:	e000      	b.n	801035a <xQueueGenericCreateStatic+0x96>
 8010358:	2300      	movs	r3, #0
 801035a:	2b00      	cmp	r3, #0
 801035c:	d10d      	bne.n	801037a <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 801035e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010362:	b672      	cpsid	i
 8010364:	f383 8811 	msr	BASEPRI, r3
 8010368:	f3bf 8f6f 	isb	sy
 801036c:	f3bf 8f4f 	dsb	sy
 8010370:	b662      	cpsie	i
 8010372:	61fb      	str	r3, [r7, #28]
}
 8010374:	bf00      	nop
 8010376:	bf00      	nop
 8010378:	e7fd      	b.n	8010376 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801037a:	2348      	movs	r3, #72	@ 0x48
 801037c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	2b48      	cmp	r3, #72	@ 0x48
 8010382:	d00d      	beq.n	80103a0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8010384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010388:	b672      	cpsid	i
 801038a:	f383 8811 	msr	BASEPRI, r3
 801038e:	f3bf 8f6f 	isb	sy
 8010392:	f3bf 8f4f 	dsb	sy
 8010396:	b662      	cpsie	i
 8010398:	61bb      	str	r3, [r7, #24]
}
 801039a:	bf00      	nop
 801039c:	bf00      	nop
 801039e:	e7fd      	b.n	801039c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80103a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80103a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d00d      	beq.n	80103c8 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80103ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80103b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ba:	9300      	str	r3, [sp, #0]
 80103bc:	4613      	mov	r3, r2
 80103be:	687a      	ldr	r2, [r7, #4]
 80103c0:	68b9      	ldr	r1, [r7, #8]
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f000 f848 	bl	8010458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80103ca:	4618      	mov	r0, r3
 80103cc:	3730      	adds	r7, #48	@ 0x30
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}

080103d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80103d2:	b580      	push	{r7, lr}
 80103d4:	b08a      	sub	sp, #40	@ 0x28
 80103d6:	af02      	add	r7, sp, #8
 80103d8:	60f8      	str	r0, [r7, #12]
 80103da:	60b9      	str	r1, [r7, #8]
 80103dc:	4613      	mov	r3, r2
 80103de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d10d      	bne.n	8010402 <xQueueGenericCreate+0x30>
	__asm volatile
 80103e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ea:	b672      	cpsid	i
 80103ec:	f383 8811 	msr	BASEPRI, r3
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	f3bf 8f4f 	dsb	sy
 80103f8:	b662      	cpsie	i
 80103fa:	613b      	str	r3, [r7, #16]
}
 80103fc:	bf00      	nop
 80103fe:	bf00      	nop
 8010400:	e7fd      	b.n	80103fe <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010402:	68bb      	ldr	r3, [r7, #8]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d102      	bne.n	801040e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010408:	2300      	movs	r3, #0
 801040a:	61fb      	str	r3, [r7, #28]
 801040c:	e004      	b.n	8010418 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	68ba      	ldr	r2, [r7, #8]
 8010412:	fb02 f303 	mul.w	r3, r2, r3
 8010416:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	3348      	adds	r3, #72	@ 0x48
 801041c:	4618      	mov	r0, r3
 801041e:	f002 f983 	bl	8012728 <pvPortMalloc>
 8010422:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d011      	beq.n	801044e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801042a:	69bb      	ldr	r3, [r7, #24]
 801042c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801042e:	697b      	ldr	r3, [r7, #20]
 8010430:	3348      	adds	r3, #72	@ 0x48
 8010432:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	2200      	movs	r2, #0
 8010438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801043c:	79fa      	ldrb	r2, [r7, #7]
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	4613      	mov	r3, r2
 8010444:	697a      	ldr	r2, [r7, #20]
 8010446:	68b9      	ldr	r1, [r7, #8]
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f000 f805 	bl	8010458 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801044e:	69bb      	ldr	r3, [r7, #24]
	}
 8010450:	4618      	mov	r0, r3
 8010452:	3720      	adds	r7, #32
 8010454:	46bd      	mov	sp, r7
 8010456:	bd80      	pop	{r7, pc}

08010458 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b084      	sub	sp, #16
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	607a      	str	r2, [r7, #4]
 8010464:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d103      	bne.n	8010474 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801046c:	69bb      	ldr	r3, [r7, #24]
 801046e:	69ba      	ldr	r2, [r7, #24]
 8010470:	601a      	str	r2, [r3, #0]
 8010472:	e002      	b.n	801047a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	68fa      	ldr	r2, [r7, #12]
 801047e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	68ba      	ldr	r2, [r7, #8]
 8010484:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010486:	2101      	movs	r1, #1
 8010488:	69b8      	ldr	r0, [r7, #24]
 801048a:	f7ff feaf 	bl	80101ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801048e:	bf00      	nop
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010496:	b580      	push	{r7, lr}
 8010498:	b082      	sub	sp, #8
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d00e      	beq.n	80104c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2200      	movs	r2, #0
 80104a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80104b6:	2300      	movs	r3, #0
 80104b8:	2200      	movs	r2, #0
 80104ba:	2100      	movs	r1, #0
 80104bc:	6878      	ldr	r0, [r7, #4]
 80104be:	f000 f81d 	bl	80104fc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80104c2:	bf00      	nop
 80104c4:	3708      	adds	r7, #8
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b086      	sub	sp, #24
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	4603      	mov	r3, r0
 80104d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80104d4:	2301      	movs	r3, #1
 80104d6:	617b      	str	r3, [r7, #20]
 80104d8:	2300      	movs	r3, #0
 80104da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80104dc:	79fb      	ldrb	r3, [r7, #7]
 80104de:	461a      	mov	r2, r3
 80104e0:	6939      	ldr	r1, [r7, #16]
 80104e2:	6978      	ldr	r0, [r7, #20]
 80104e4:	f7ff ff75 	bl	80103d2 <xQueueGenericCreate>
 80104e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80104ea:	68f8      	ldr	r0, [r7, #12]
 80104ec:	f7ff ffd3 	bl	8010496 <prvInitialiseMutex>

		return xNewQueue;
 80104f0:	68fb      	ldr	r3, [r7, #12]
	}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3718      	adds	r7, #24
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
	...

080104fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b08e      	sub	sp, #56	@ 0x38
 8010500:	af00      	add	r7, sp, #0
 8010502:	60f8      	str	r0, [r7, #12]
 8010504:	60b9      	str	r1, [r7, #8]
 8010506:	607a      	str	r2, [r7, #4]
 8010508:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801050a:	2300      	movs	r3, #0
 801050c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010514:	2b00      	cmp	r3, #0
 8010516:	d10d      	bne.n	8010534 <xQueueGenericSend+0x38>
	__asm volatile
 8010518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801051c:	b672      	cpsid	i
 801051e:	f383 8811 	msr	BASEPRI, r3
 8010522:	f3bf 8f6f 	isb	sy
 8010526:	f3bf 8f4f 	dsb	sy
 801052a:	b662      	cpsie	i
 801052c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801052e:	bf00      	nop
 8010530:	bf00      	nop
 8010532:	e7fd      	b.n	8010530 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <xQueueGenericSend+0x46>
 801053a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801053c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801053e:	2b00      	cmp	r3, #0
 8010540:	d101      	bne.n	8010546 <xQueueGenericSend+0x4a>
 8010542:	2301      	movs	r3, #1
 8010544:	e000      	b.n	8010548 <xQueueGenericSend+0x4c>
 8010546:	2300      	movs	r3, #0
 8010548:	2b00      	cmp	r3, #0
 801054a:	d10d      	bne.n	8010568 <xQueueGenericSend+0x6c>
	__asm volatile
 801054c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010550:	b672      	cpsid	i
 8010552:	f383 8811 	msr	BASEPRI, r3
 8010556:	f3bf 8f6f 	isb	sy
 801055a:	f3bf 8f4f 	dsb	sy
 801055e:	b662      	cpsie	i
 8010560:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010562:	bf00      	nop
 8010564:	bf00      	nop
 8010566:	e7fd      	b.n	8010564 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	2b02      	cmp	r3, #2
 801056c:	d103      	bne.n	8010576 <xQueueGenericSend+0x7a>
 801056e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010572:	2b01      	cmp	r3, #1
 8010574:	d101      	bne.n	801057a <xQueueGenericSend+0x7e>
 8010576:	2301      	movs	r3, #1
 8010578:	e000      	b.n	801057c <xQueueGenericSend+0x80>
 801057a:	2300      	movs	r3, #0
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10d      	bne.n	801059c <xQueueGenericSend+0xa0>
	__asm volatile
 8010580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010584:	b672      	cpsid	i
 8010586:	f383 8811 	msr	BASEPRI, r3
 801058a:	f3bf 8f6f 	isb	sy
 801058e:	f3bf 8f4f 	dsb	sy
 8010592:	b662      	cpsie	i
 8010594:	623b      	str	r3, [r7, #32]
}
 8010596:	bf00      	nop
 8010598:	bf00      	nop
 801059a:	e7fd      	b.n	8010598 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801059c:	f001 fc2e 	bl	8011dfc <xTaskGetSchedulerState>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d102      	bne.n	80105ac <xQueueGenericSend+0xb0>
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d101      	bne.n	80105b0 <xQueueGenericSend+0xb4>
 80105ac:	2301      	movs	r3, #1
 80105ae:	e000      	b.n	80105b2 <xQueueGenericSend+0xb6>
 80105b0:	2300      	movs	r3, #0
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d10d      	bne.n	80105d2 <xQueueGenericSend+0xd6>
	__asm volatile
 80105b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105ba:	b672      	cpsid	i
 80105bc:	f383 8811 	msr	BASEPRI, r3
 80105c0:	f3bf 8f6f 	isb	sy
 80105c4:	f3bf 8f4f 	dsb	sy
 80105c8:	b662      	cpsie	i
 80105ca:	61fb      	str	r3, [r7, #28]
}
 80105cc:	bf00      	nop
 80105ce:	bf00      	nop
 80105d0:	e7fd      	b.n	80105ce <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80105d2:	f001 ff7b 	bl	80124cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80105d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80105da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80105de:	429a      	cmp	r2, r3
 80105e0:	d302      	bcc.n	80105e8 <xQueueGenericSend+0xec>
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	2b02      	cmp	r3, #2
 80105e6:	d129      	bne.n	801063c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80105e8:	683a      	ldr	r2, [r7, #0]
 80105ea:	68b9      	ldr	r1, [r7, #8]
 80105ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80105ee:	f000 fbed 	bl	8010dcc <prvCopyDataToQueue>
 80105f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d010      	beq.n	801061e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80105fe:	3324      	adds	r3, #36	@ 0x24
 8010600:	4618      	mov	r0, r3
 8010602:	f001 f9cb 	bl	801199c <xTaskRemoveFromEventList>
 8010606:	4603      	mov	r3, r0
 8010608:	2b00      	cmp	r3, #0
 801060a:	d013      	beq.n	8010634 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801060c:	4b3f      	ldr	r3, [pc, #252]	@ (801070c <xQueueGenericSend+0x210>)
 801060e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010612:	601a      	str	r2, [r3, #0]
 8010614:	f3bf 8f4f 	dsb	sy
 8010618:	f3bf 8f6f 	isb	sy
 801061c:	e00a      	b.n	8010634 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801061e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d007      	beq.n	8010634 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010624:	4b39      	ldr	r3, [pc, #228]	@ (801070c <xQueueGenericSend+0x210>)
 8010626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801062a:	601a      	str	r2, [r3, #0]
 801062c:	f3bf 8f4f 	dsb	sy
 8010630:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010634:	f001 ff80 	bl	8012538 <vPortExitCritical>
				return pdPASS;
 8010638:	2301      	movs	r3, #1
 801063a:	e063      	b.n	8010704 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d103      	bne.n	801064a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010642:	f001 ff79 	bl	8012538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010646:	2300      	movs	r3, #0
 8010648:	e05c      	b.n	8010704 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 801064a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801064c:	2b00      	cmp	r3, #0
 801064e:	d106      	bne.n	801065e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010650:	f107 0314 	add.w	r3, r7, #20
 8010654:	4618      	mov	r0, r3
 8010656:	f001 fa6f 	bl	8011b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801065a:	2301      	movs	r3, #1
 801065c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801065e:	f001 ff6b 	bl	8012538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010662:	f000 ff33 	bl	80114cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010666:	f001 ff31 	bl	80124cc <vPortEnterCritical>
 801066a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801066c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010670:	b25b      	sxtb	r3, r3
 8010672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010676:	d103      	bne.n	8010680 <xQueueGenericSend+0x184>
 8010678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801067a:	2200      	movs	r2, #0
 801067c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010682:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010686:	b25b      	sxtb	r3, r3
 8010688:	f1b3 3fff 	cmp.w	r3, #4294967295
 801068c:	d103      	bne.n	8010696 <xQueueGenericSend+0x19a>
 801068e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010696:	f001 ff4f 	bl	8012538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801069a:	1d3a      	adds	r2, r7, #4
 801069c:	f107 0314 	add.w	r3, r7, #20
 80106a0:	4611      	mov	r1, r2
 80106a2:	4618      	mov	r0, r3
 80106a4:	f001 fa5e 	bl	8011b64 <xTaskCheckForTimeOut>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d124      	bne.n	80106f8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80106ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106b0:	f000 fc84 	bl	8010fbc <prvIsQueueFull>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d018      	beq.n	80106ec <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80106ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106bc:	3310      	adds	r3, #16
 80106be:	687a      	ldr	r2, [r7, #4]
 80106c0:	4611      	mov	r1, r2
 80106c2:	4618      	mov	r0, r3
 80106c4:	f001 f900 	bl	80118c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80106c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106ca:	f000 fc0f 	bl	8010eec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80106ce:	f000 ff0b 	bl	80114e8 <xTaskResumeAll>
 80106d2:	4603      	mov	r3, r0
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f47f af7c 	bne.w	80105d2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80106da:	4b0c      	ldr	r3, [pc, #48]	@ (801070c <xQueueGenericSend+0x210>)
 80106dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106e0:	601a      	str	r2, [r3, #0]
 80106e2:	f3bf 8f4f 	dsb	sy
 80106e6:	f3bf 8f6f 	isb	sy
 80106ea:	e772      	b.n	80105d2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80106ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106ee:	f000 fbfd 	bl	8010eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80106f2:	f000 fef9 	bl	80114e8 <xTaskResumeAll>
 80106f6:	e76c      	b.n	80105d2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80106f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80106fa:	f000 fbf7 	bl	8010eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80106fe:	f000 fef3 	bl	80114e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010702:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010704:	4618      	mov	r0, r3
 8010706:	3738      	adds	r7, #56	@ 0x38
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	e000ed04 	.word	0xe000ed04

08010710 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b08e      	sub	sp, #56	@ 0x38
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801071e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10d      	bne.n	8010740 <xQueueGiveFromISR+0x30>
	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010728:	b672      	cpsid	i
 801072a:	f383 8811 	msr	BASEPRI, r3
 801072e:	f3bf 8f6f 	isb	sy
 8010732:	f3bf 8f4f 	dsb	sy
 8010736:	b662      	cpsie	i
 8010738:	623b      	str	r3, [r7, #32]
}
 801073a:	bf00      	nop
 801073c:	bf00      	nop
 801073e:	e7fd      	b.n	801073c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010744:	2b00      	cmp	r3, #0
 8010746:	d00d      	beq.n	8010764 <xQueueGiveFromISR+0x54>
	__asm volatile
 8010748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801074c:	b672      	cpsid	i
 801074e:	f383 8811 	msr	BASEPRI, r3
 8010752:	f3bf 8f6f 	isb	sy
 8010756:	f3bf 8f4f 	dsb	sy
 801075a:	b662      	cpsie	i
 801075c:	61fb      	str	r3, [r7, #28]
}
 801075e:	bf00      	nop
 8010760:	bf00      	nop
 8010762:	e7fd      	b.n	8010760 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d103      	bne.n	8010774 <xQueueGiveFromISR+0x64>
 801076c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d101      	bne.n	8010778 <xQueueGiveFromISR+0x68>
 8010774:	2301      	movs	r3, #1
 8010776:	e000      	b.n	801077a <xQueueGiveFromISR+0x6a>
 8010778:	2300      	movs	r3, #0
 801077a:	2b00      	cmp	r3, #0
 801077c:	d10d      	bne.n	801079a <xQueueGiveFromISR+0x8a>
	__asm volatile
 801077e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010782:	b672      	cpsid	i
 8010784:	f383 8811 	msr	BASEPRI, r3
 8010788:	f3bf 8f6f 	isb	sy
 801078c:	f3bf 8f4f 	dsb	sy
 8010790:	b662      	cpsie	i
 8010792:	61bb      	str	r3, [r7, #24]
}
 8010794:	bf00      	nop
 8010796:	bf00      	nop
 8010798:	e7fd      	b.n	8010796 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801079a:	f001 ff7f 	bl	801269c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801079e:	f3ef 8211 	mrs	r2, BASEPRI
 80107a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107a6:	b672      	cpsid	i
 80107a8:	f383 8811 	msr	BASEPRI, r3
 80107ac:	f3bf 8f6f 	isb	sy
 80107b0:	f3bf 8f4f 	dsb	sy
 80107b4:	b662      	cpsie	i
 80107b6:	617a      	str	r2, [r7, #20]
 80107b8:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80107ba:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80107bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80107be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80107c2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80107c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d22b      	bcs.n	8010826 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80107ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80107d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107da:	1c5a      	adds	r2, r3, #1
 80107dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80107e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80107e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e8:	d112      	bne.n	8010810 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80107ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d016      	beq.n	8010820 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80107f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f4:	3324      	adds	r3, #36	@ 0x24
 80107f6:	4618      	mov	r0, r3
 80107f8:	f001 f8d0 	bl	801199c <xTaskRemoveFromEventList>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00e      	beq.n	8010820 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010802:	683b      	ldr	r3, [r7, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00b      	beq.n	8010820 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010808:	683b      	ldr	r3, [r7, #0]
 801080a:	2201      	movs	r2, #1
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	e007      	b.n	8010820 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010810:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010814:	3301      	adds	r3, #1
 8010816:	b2db      	uxtb	r3, r3
 8010818:	b25a      	sxtb	r2, r3
 801081a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801081c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010820:	2301      	movs	r3, #1
 8010822:	637b      	str	r3, [r7, #52]	@ 0x34
 8010824:	e001      	b.n	801082a <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010826:	2300      	movs	r3, #0
 8010828:	637b      	str	r3, [r7, #52]	@ 0x34
 801082a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801082c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010834:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010838:	4618      	mov	r0, r3
 801083a:	3738      	adds	r7, #56	@ 0x38
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b08c      	sub	sp, #48	@ 0x30
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801084c:	2300      	movs	r3, #0
 801084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010856:	2b00      	cmp	r3, #0
 8010858:	d10d      	bne.n	8010876 <xQueueReceive+0x36>
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801085e:	b672      	cpsid	i
 8010860:	f383 8811 	msr	BASEPRI, r3
 8010864:	f3bf 8f6f 	isb	sy
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	b662      	cpsie	i
 801086e:	623b      	str	r3, [r7, #32]
}
 8010870:	bf00      	nop
 8010872:	bf00      	nop
 8010874:	e7fd      	b.n	8010872 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010876:	68bb      	ldr	r3, [r7, #8]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d103      	bne.n	8010884 <xQueueReceive+0x44>
 801087c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010880:	2b00      	cmp	r3, #0
 8010882:	d101      	bne.n	8010888 <xQueueReceive+0x48>
 8010884:	2301      	movs	r3, #1
 8010886:	e000      	b.n	801088a <xQueueReceive+0x4a>
 8010888:	2300      	movs	r3, #0
 801088a:	2b00      	cmp	r3, #0
 801088c:	d10d      	bne.n	80108aa <xQueueReceive+0x6a>
	__asm volatile
 801088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010892:	b672      	cpsid	i
 8010894:	f383 8811 	msr	BASEPRI, r3
 8010898:	f3bf 8f6f 	isb	sy
 801089c:	f3bf 8f4f 	dsb	sy
 80108a0:	b662      	cpsie	i
 80108a2:	61fb      	str	r3, [r7, #28]
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop
 80108a8:	e7fd      	b.n	80108a6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80108aa:	f001 faa7 	bl	8011dfc <xTaskGetSchedulerState>
 80108ae:	4603      	mov	r3, r0
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d102      	bne.n	80108ba <xQueueReceive+0x7a>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d101      	bne.n	80108be <xQueueReceive+0x7e>
 80108ba:	2301      	movs	r3, #1
 80108bc:	e000      	b.n	80108c0 <xQueueReceive+0x80>
 80108be:	2300      	movs	r3, #0
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d10d      	bne.n	80108e0 <xQueueReceive+0xa0>
	__asm volatile
 80108c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108c8:	b672      	cpsid	i
 80108ca:	f383 8811 	msr	BASEPRI, r3
 80108ce:	f3bf 8f6f 	isb	sy
 80108d2:	f3bf 8f4f 	dsb	sy
 80108d6:	b662      	cpsie	i
 80108d8:	61bb      	str	r3, [r7, #24]
}
 80108da:	bf00      	nop
 80108dc:	bf00      	nop
 80108de:	e7fd      	b.n	80108dc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80108e0:	f001 fdf4 	bl	80124cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108e8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d01f      	beq.n	8010930 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108f0:	68b9      	ldr	r1, [r7, #8]
 80108f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80108f4:	f000 fad4 	bl	8010ea0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108fa:	1e5a      	subs	r2, r3, #1
 80108fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108fe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d00f      	beq.n	8010928 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801090a:	3310      	adds	r3, #16
 801090c:	4618      	mov	r0, r3
 801090e:	f001 f845 	bl	801199c <xTaskRemoveFromEventList>
 8010912:	4603      	mov	r3, r0
 8010914:	2b00      	cmp	r3, #0
 8010916:	d007      	beq.n	8010928 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010918:	4b3c      	ldr	r3, [pc, #240]	@ (8010a0c <xQueueReceive+0x1cc>)
 801091a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801091e:	601a      	str	r2, [r3, #0]
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010928:	f001 fe06 	bl	8012538 <vPortExitCritical>
				return pdPASS;
 801092c:	2301      	movs	r3, #1
 801092e:	e069      	b.n	8010a04 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d103      	bne.n	801093e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010936:	f001 fdff 	bl	8012538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801093a:	2300      	movs	r3, #0
 801093c:	e062      	b.n	8010a04 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010940:	2b00      	cmp	r3, #0
 8010942:	d106      	bne.n	8010952 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010944:	f107 0310 	add.w	r3, r7, #16
 8010948:	4618      	mov	r0, r3
 801094a:	f001 f8f5 	bl	8011b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801094e:	2301      	movs	r3, #1
 8010950:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010952:	f001 fdf1 	bl	8012538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010956:	f000 fdb9 	bl	80114cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801095a:	f001 fdb7 	bl	80124cc <vPortEnterCritical>
 801095e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010964:	b25b      	sxtb	r3, r3
 8010966:	f1b3 3fff 	cmp.w	r3, #4294967295
 801096a:	d103      	bne.n	8010974 <xQueueReceive+0x134>
 801096c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801096e:	2200      	movs	r2, #0
 8010970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010976:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801097a:	b25b      	sxtb	r3, r3
 801097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010980:	d103      	bne.n	801098a <xQueueReceive+0x14a>
 8010982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010984:	2200      	movs	r2, #0
 8010986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801098a:	f001 fdd5 	bl	8012538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801098e:	1d3a      	adds	r2, r7, #4
 8010990:	f107 0310 	add.w	r3, r7, #16
 8010994:	4611      	mov	r1, r2
 8010996:	4618      	mov	r0, r3
 8010998:	f001 f8e4 	bl	8011b64 <xTaskCheckForTimeOut>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d123      	bne.n	80109ea <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109a4:	f000 faf4 	bl	8010f90 <prvIsQueueEmpty>
 80109a8:	4603      	mov	r3, r0
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d017      	beq.n	80109de <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80109ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109b0:	3324      	adds	r3, #36	@ 0x24
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	4611      	mov	r1, r2
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 ff86 	bl	80118c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80109bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109be:	f000 fa95 	bl	8010eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80109c2:	f000 fd91 	bl	80114e8 <xTaskResumeAll>
 80109c6:	4603      	mov	r3, r0
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d189      	bne.n	80108e0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80109cc:	4b0f      	ldr	r3, [pc, #60]	@ (8010a0c <xQueueReceive+0x1cc>)
 80109ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109d2:	601a      	str	r2, [r3, #0]
 80109d4:	f3bf 8f4f 	dsb	sy
 80109d8:	f3bf 8f6f 	isb	sy
 80109dc:	e780      	b.n	80108e0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80109de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109e0:	f000 fa84 	bl	8010eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80109e4:	f000 fd80 	bl	80114e8 <xTaskResumeAll>
 80109e8:	e77a      	b.n	80108e0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80109ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109ec:	f000 fa7e 	bl	8010eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80109f0:	f000 fd7a 	bl	80114e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80109f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80109f6:	f000 facb 	bl	8010f90 <prvIsQueueEmpty>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	f43f af6f 	beq.w	80108e0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010a02:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3730      	adds	r7, #48	@ 0x30
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	e000ed04 	.word	0xe000ed04

08010a10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b08e      	sub	sp, #56	@ 0x38
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010a22:	2300      	movs	r3, #0
 8010a24:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10d      	bne.n	8010a48 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8010a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a30:	b672      	cpsid	i
 8010a32:	f383 8811 	msr	BASEPRI, r3
 8010a36:	f3bf 8f6f 	isb	sy
 8010a3a:	f3bf 8f4f 	dsb	sy
 8010a3e:	b662      	cpsie	i
 8010a40:	623b      	str	r3, [r7, #32]
}
 8010a42:	bf00      	nop
 8010a44:	bf00      	nop
 8010a46:	e7fd      	b.n	8010a44 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d00d      	beq.n	8010a6c <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a54:	b672      	cpsid	i
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	b662      	cpsie	i
 8010a64:	61fb      	str	r3, [r7, #28]
}
 8010a66:	bf00      	nop
 8010a68:	bf00      	nop
 8010a6a:	e7fd      	b.n	8010a68 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010a6c:	f001 f9c6 	bl	8011dfc <xTaskGetSchedulerState>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d102      	bne.n	8010a7c <xQueueSemaphoreTake+0x6c>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d101      	bne.n	8010a80 <xQueueSemaphoreTake+0x70>
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e000      	b.n	8010a82 <xQueueSemaphoreTake+0x72>
 8010a80:	2300      	movs	r3, #0
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d10d      	bne.n	8010aa2 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8010a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a8a:	b672      	cpsid	i
 8010a8c:	f383 8811 	msr	BASEPRI, r3
 8010a90:	f3bf 8f6f 	isb	sy
 8010a94:	f3bf 8f4f 	dsb	sy
 8010a98:	b662      	cpsie	i
 8010a9a:	61bb      	str	r3, [r7, #24]
}
 8010a9c:	bf00      	nop
 8010a9e:	bf00      	nop
 8010aa0:	e7fd      	b.n	8010a9e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010aa2:	f001 fd13 	bl	80124cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010aaa:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d024      	beq.n	8010afc <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ab4:	1e5a      	subs	r2, r3, #1
 8010ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d104      	bne.n	8010acc <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010ac2:	f001 fb7d 	bl	80121c0 <pvTaskIncrementMutexHeldCount>
 8010ac6:	4602      	mov	r2, r0
 8010ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aca:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ace:	691b      	ldr	r3, [r3, #16]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d00f      	beq.n	8010af4 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad6:	3310      	adds	r3, #16
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f000 ff5f 	bl	801199c <xTaskRemoveFromEventList>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d007      	beq.n	8010af4 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010ae4:	4b55      	ldr	r3, [pc, #340]	@ (8010c3c <xQueueSemaphoreTake+0x22c>)
 8010ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010aea:	601a      	str	r2, [r3, #0]
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010af4:	f001 fd20 	bl	8012538 <vPortExitCritical>
				return pdPASS;
 8010af8:	2301      	movs	r3, #1
 8010afa:	e09a      	b.n	8010c32 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010afc:	683b      	ldr	r3, [r7, #0]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d114      	bne.n	8010b2c <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00d      	beq.n	8010b24 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8010b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b0c:	b672      	cpsid	i
 8010b0e:	f383 8811 	msr	BASEPRI, r3
 8010b12:	f3bf 8f6f 	isb	sy
 8010b16:	f3bf 8f4f 	dsb	sy
 8010b1a:	b662      	cpsie	i
 8010b1c:	617b      	str	r3, [r7, #20]
}
 8010b1e:	bf00      	nop
 8010b20:	bf00      	nop
 8010b22:	e7fd      	b.n	8010b20 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010b24:	f001 fd08 	bl	8012538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	e082      	b.n	8010c32 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010b2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d106      	bne.n	8010b40 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010b32:	f107 030c 	add.w	r3, r7, #12
 8010b36:	4618      	mov	r0, r3
 8010b38:	f000 fffe 	bl	8011b38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010b3c:	2301      	movs	r3, #1
 8010b3e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010b40:	f001 fcfa 	bl	8012538 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010b44:	f000 fcc2 	bl	80114cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010b48:	f001 fcc0 	bl	80124cc <vPortEnterCritical>
 8010b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b52:	b25b      	sxtb	r3, r3
 8010b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b58:	d103      	bne.n	8010b62 <xQueueSemaphoreTake+0x152>
 8010b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010b68:	b25b      	sxtb	r3, r3
 8010b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6e:	d103      	bne.n	8010b78 <xQueueSemaphoreTake+0x168>
 8010b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b72:	2200      	movs	r2, #0
 8010b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010b78:	f001 fcde 	bl	8012538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010b7c:	463a      	mov	r2, r7
 8010b7e:	f107 030c 	add.w	r3, r7, #12
 8010b82:	4611      	mov	r1, r2
 8010b84:	4618      	mov	r0, r3
 8010b86:	f000 ffed 	bl	8011b64 <xTaskCheckForTimeOut>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d132      	bne.n	8010bf6 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b92:	f000 f9fd 	bl	8010f90 <prvIsQueueEmpty>
 8010b96:	4603      	mov	r3, r0
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d026      	beq.n	8010bea <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d109      	bne.n	8010bb8 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8010ba4:	f001 fc92 	bl	80124cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f001 f943 	bl	8011e38 <xTaskPriorityInherit>
 8010bb2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8010bb4:	f001 fcc0 	bl	8012538 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bba:	3324      	adds	r3, #36	@ 0x24
 8010bbc:	683a      	ldr	r2, [r7, #0]
 8010bbe:	4611      	mov	r1, r2
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f000 fe81 	bl	80118c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bc8:	f000 f990 	bl	8010eec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010bcc:	f000 fc8c 	bl	80114e8 <xTaskResumeAll>
 8010bd0:	4603      	mov	r3, r0
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	f47f af65 	bne.w	8010aa2 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8010bd8:	4b18      	ldr	r3, [pc, #96]	@ (8010c3c <xQueueSemaphoreTake+0x22c>)
 8010bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bde:	601a      	str	r2, [r3, #0]
 8010be0:	f3bf 8f4f 	dsb	sy
 8010be4:	f3bf 8f6f 	isb	sy
 8010be8:	e75b      	b.n	8010aa2 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010bea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bec:	f000 f97e 	bl	8010eec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010bf0:	f000 fc7a 	bl	80114e8 <xTaskResumeAll>
 8010bf4:	e755      	b.n	8010aa2 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010bf6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010bf8:	f000 f978 	bl	8010eec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010bfc:	f000 fc74 	bl	80114e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c00:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c02:	f000 f9c5 	bl	8010f90 <prvIsQueueEmpty>
 8010c06:	4603      	mov	r3, r0
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	f43f af4a 	beq.w	8010aa2 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00d      	beq.n	8010c30 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010c14:	f001 fc5a 	bl	80124cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010c18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c1a:	f000 f8bf 	bl	8010d9c <prvGetDisinheritPriorityAfterTimeout>
 8010c1e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c22:	689b      	ldr	r3, [r3, #8]
 8010c24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010c26:	4618      	mov	r0, r3
 8010c28:	f001 fa12 	bl	8012050 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010c2c:	f001 fc84 	bl	8012538 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3738      	adds	r7, #56	@ 0x38
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	e000ed04 	.word	0xe000ed04

08010c40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b08e      	sub	sp, #56	@ 0x38
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d10d      	bne.n	8010c72 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8010c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5a:	b672      	cpsid	i
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	b662      	cpsie	i
 8010c6a:	623b      	str	r3, [r7, #32]
}
 8010c6c:	bf00      	nop
 8010c6e:	bf00      	nop
 8010c70:	e7fd      	b.n	8010c6e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d103      	bne.n	8010c80 <xQueueReceiveFromISR+0x40>
 8010c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d101      	bne.n	8010c84 <xQueueReceiveFromISR+0x44>
 8010c80:	2301      	movs	r3, #1
 8010c82:	e000      	b.n	8010c86 <xQueueReceiveFromISR+0x46>
 8010c84:	2300      	movs	r3, #0
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d10d      	bne.n	8010ca6 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8010c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c8e:	b672      	cpsid	i
 8010c90:	f383 8811 	msr	BASEPRI, r3
 8010c94:	f3bf 8f6f 	isb	sy
 8010c98:	f3bf 8f4f 	dsb	sy
 8010c9c:	b662      	cpsie	i
 8010c9e:	61fb      	str	r3, [r7, #28]
}
 8010ca0:	bf00      	nop
 8010ca2:	bf00      	nop
 8010ca4:	e7fd      	b.n	8010ca2 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ca6:	f001 fcf9 	bl	801269c <vPortValidateInterruptPriority>
	__asm volatile
 8010caa:	f3ef 8211 	mrs	r2, BASEPRI
 8010cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cb2:	b672      	cpsid	i
 8010cb4:	f383 8811 	msr	BASEPRI, r3
 8010cb8:	f3bf 8f6f 	isb	sy
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	b662      	cpsie	i
 8010cc2:	61ba      	str	r2, [r7, #24]
 8010cc4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010cc6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d02f      	beq.n	8010d36 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010ce0:	68b9      	ldr	r1, [r7, #8]
 8010ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ce4:	f000 f8dc 	bl	8010ea0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cea:	1e5a      	subs	r2, r3, #1
 8010cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cee:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010cf0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cf8:	d112      	bne.n	8010d20 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d016      	beq.n	8010d30 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d04:	3310      	adds	r3, #16
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 fe48 	bl	801199c <xTaskRemoveFromEventList>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00e      	beq.n	8010d30 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00b      	beq.n	8010d30 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	2201      	movs	r2, #1
 8010d1c:	601a      	str	r2, [r3, #0]
 8010d1e:	e007      	b.n	8010d30 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010d20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d24:	3301      	adds	r3, #1
 8010d26:	b2db      	uxtb	r3, r3
 8010d28:	b25a      	sxtb	r2, r3
 8010d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8010d30:	2301      	movs	r3, #1
 8010d32:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d34:	e001      	b.n	8010d3a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f383 8811 	msr	BASEPRI, r3
}
 8010d44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3738      	adds	r7, #56	@ 0x38
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}

08010d50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b084      	sub	sp, #16
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d10d      	bne.n	8010d7e <vQueueDelete+0x2e>
	__asm volatile
 8010d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d66:	b672      	cpsid	i
 8010d68:	f383 8811 	msr	BASEPRI, r3
 8010d6c:	f3bf 8f6f 	isb	sy
 8010d70:	f3bf 8f4f 	dsb	sy
 8010d74:	b662      	cpsie	i
 8010d76:	60bb      	str	r3, [r7, #8]
}
 8010d78:	bf00      	nop
 8010d7a:	bf00      	nop
 8010d7c:	e7fd      	b.n	8010d7a <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010d7e:	68f8      	ldr	r0, [r7, #12]
 8010d80:	f000 f934 	bl	8010fec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d102      	bne.n	8010d94 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 8010d8e:	68f8      	ldr	r0, [r7, #12]
 8010d90:	f001 fd98 	bl	80128c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010d94:	bf00      	nop
 8010d96:	3710      	adds	r7, #16
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	bd80      	pop	{r7, pc}

08010d9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b085      	sub	sp, #20
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d006      	beq.n	8010dba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f1c3 0307 	rsb	r3, r3, #7
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	e001      	b.n	8010dbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
	}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3714      	adds	r7, #20
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b086      	sub	sp, #24
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010de0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10d      	bne.n	8010e06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d14d      	bne.n	8010e8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	689b      	ldr	r3, [r3, #8]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f001 f89e 	bl	8011f38 <xTaskPriorityDisinherit>
 8010dfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2200      	movs	r2, #0
 8010e02:	609a      	str	r2, [r3, #8]
 8010e04:	e043      	b.n	8010e8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d119      	bne.n	8010e40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	6858      	ldr	r0, [r3, #4]
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e14:	461a      	mov	r2, r3
 8010e16:	68b9      	ldr	r1, [r7, #8]
 8010e18:	f001 fed8 	bl	8012bcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	685a      	ldr	r2, [r3, #4]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e24:	441a      	add	r2, r3
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	685a      	ldr	r2, [r3, #4]
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	689b      	ldr	r3, [r3, #8]
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d32b      	bcc.n	8010e8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681a      	ldr	r2, [r3, #0]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	605a      	str	r2, [r3, #4]
 8010e3e:	e026      	b.n	8010e8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	68d8      	ldr	r0, [r3, #12]
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e48:	461a      	mov	r2, r3
 8010e4a:	68b9      	ldr	r1, [r7, #8]
 8010e4c:	f001 febe 	bl	8012bcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	68da      	ldr	r2, [r3, #12]
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e58:	425b      	negs	r3, r3
 8010e5a:	441a      	add	r2, r3
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	68da      	ldr	r2, [r3, #12]
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d207      	bcs.n	8010e7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	689a      	ldr	r2, [r3, #8]
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e74:	425b      	negs	r3, r3
 8010e76:	441a      	add	r2, r3
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	d105      	bne.n	8010e8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d002      	beq.n	8010e8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	1c5a      	adds	r2, r3, #1
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010e96:	697b      	ldr	r3, [r7, #20]
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3718      	adds	r7, #24
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b082      	sub	sp, #8
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d018      	beq.n	8010ee4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	68da      	ldr	r2, [r3, #12]
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010eba:	441a      	add	r2, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	68da      	ldr	r2, [r3, #12]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	689b      	ldr	r3, [r3, #8]
 8010ec8:	429a      	cmp	r2, r3
 8010eca:	d303      	bcc.n	8010ed4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681a      	ldr	r2, [r3, #0]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	68d9      	ldr	r1, [r3, #12]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010edc:	461a      	mov	r2, r3
 8010ede:	6838      	ldr	r0, [r7, #0]
 8010ee0:	f001 fe74 	bl	8012bcc <memcpy>
	}
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}

08010eec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b084      	sub	sp, #16
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010ef4:	f001 faea 	bl	80124cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010efe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f00:	e011      	b.n	8010f26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d012      	beq.n	8010f30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	3324      	adds	r3, #36	@ 0x24
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f000 fd44 	bl	801199c <xTaskRemoveFromEventList>
 8010f14:	4603      	mov	r3, r0
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d001      	beq.n	8010f1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010f1a:	f000 fe8b 	bl	8011c34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010f1e:	7bfb      	ldrb	r3, [r7, #15]
 8010f20:	3b01      	subs	r3, #1
 8010f22:	b2db      	uxtb	r3, r3
 8010f24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	dce9      	bgt.n	8010f02 <prvUnlockQueue+0x16>
 8010f2e:	e000      	b.n	8010f32 <prvUnlockQueue+0x46>
					break;
 8010f30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	22ff      	movs	r2, #255	@ 0xff
 8010f36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010f3a:	f001 fafd 	bl	8012538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010f3e:	f001 fac5 	bl	80124cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010f48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f4a:	e011      	b.n	8010f70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	691b      	ldr	r3, [r3, #16]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d012      	beq.n	8010f7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	3310      	adds	r3, #16
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f000 fd1f 	bl	801199c <xTaskRemoveFromEventList>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010f64:	f000 fe66 	bl	8011c34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010f68:	7bbb      	ldrb	r3, [r7, #14]
 8010f6a:	3b01      	subs	r3, #1
 8010f6c:	b2db      	uxtb	r3, r3
 8010f6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010f70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	dce9      	bgt.n	8010f4c <prvUnlockQueue+0x60>
 8010f78:	e000      	b.n	8010f7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010f7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	22ff      	movs	r2, #255	@ 0xff
 8010f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010f84:	f001 fad8 	bl	8012538 <vPortExitCritical>
}
 8010f88:	bf00      	nop
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010f98:	f001 fa98 	bl	80124cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d102      	bne.n	8010faa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	60fb      	str	r3, [r7, #12]
 8010fa8:	e001      	b.n	8010fae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010faa:	2300      	movs	r3, #0
 8010fac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fae:	f001 fac3 	bl	8012538 <vPortExitCritical>

	return xReturn;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010fc4:	f001 fa82 	bl	80124cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fd0:	429a      	cmp	r2, r3
 8010fd2:	d102      	bne.n	8010fda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	60fb      	str	r3, [r7, #12]
 8010fd8:	e001      	b.n	8010fde <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010fde:	f001 faab 	bl	8012538 <vPortExitCritical>

	return xReturn;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	60fb      	str	r3, [r7, #12]
 8010ff8:	e016      	b.n	8011028 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010ffa:	4a10      	ldr	r2, [pc, #64]	@ (801103c <vQueueUnregisterQueue+0x50>)
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	00db      	lsls	r3, r3, #3
 8011000:	4413      	add	r3, r2
 8011002:	685b      	ldr	r3, [r3, #4]
 8011004:	687a      	ldr	r2, [r7, #4]
 8011006:	429a      	cmp	r2, r3
 8011008:	d10b      	bne.n	8011022 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801100a:	4a0c      	ldr	r2, [pc, #48]	@ (801103c <vQueueUnregisterQueue+0x50>)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2100      	movs	r1, #0
 8011010:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011014:	4a09      	ldr	r2, [pc, #36]	@ (801103c <vQueueUnregisterQueue+0x50>)
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	4413      	add	r3, r2
 801101c:	2200      	movs	r2, #0
 801101e:	605a      	str	r2, [r3, #4]
				break;
 8011020:	e006      	b.n	8011030 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	3301      	adds	r3, #1
 8011026:	60fb      	str	r3, [r7, #12]
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	2b07      	cmp	r3, #7
 801102c:	d9e5      	bls.n	8010ffa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801102e:	bf00      	nop
 8011030:	bf00      	nop
 8011032:	3714      	adds	r7, #20
 8011034:	46bd      	mov	sp, r7
 8011036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103a:	4770      	bx	lr
 801103c:	20001328 	.word	0x20001328

08011040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011040:	b580      	push	{r7, lr}
 8011042:	b08e      	sub	sp, #56	@ 0x38
 8011044:	af04      	add	r7, sp, #16
 8011046:	60f8      	str	r0, [r7, #12]
 8011048:	60b9      	str	r1, [r7, #8]
 801104a:	607a      	str	r2, [r7, #4]
 801104c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801104e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011050:	2b00      	cmp	r3, #0
 8011052:	d10d      	bne.n	8011070 <xTaskCreateStatic+0x30>
	__asm volatile
 8011054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011058:	b672      	cpsid	i
 801105a:	f383 8811 	msr	BASEPRI, r3
 801105e:	f3bf 8f6f 	isb	sy
 8011062:	f3bf 8f4f 	dsb	sy
 8011066:	b662      	cpsie	i
 8011068:	623b      	str	r3, [r7, #32]
}
 801106a:	bf00      	nop
 801106c:	bf00      	nop
 801106e:	e7fd      	b.n	801106c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011072:	2b00      	cmp	r3, #0
 8011074:	d10d      	bne.n	8011092 <xTaskCreateStatic+0x52>
	__asm volatile
 8011076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801107a:	b672      	cpsid	i
 801107c:	f383 8811 	msr	BASEPRI, r3
 8011080:	f3bf 8f6f 	isb	sy
 8011084:	f3bf 8f4f 	dsb	sy
 8011088:	b662      	cpsie	i
 801108a:	61fb      	str	r3, [r7, #28]
}
 801108c:	bf00      	nop
 801108e:	bf00      	nop
 8011090:	e7fd      	b.n	801108e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011092:	2354      	movs	r3, #84	@ 0x54
 8011094:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011096:	693b      	ldr	r3, [r7, #16]
 8011098:	2b54      	cmp	r3, #84	@ 0x54
 801109a:	d00d      	beq.n	80110b8 <xTaskCreateStatic+0x78>
	__asm volatile
 801109c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a0:	b672      	cpsid	i
 80110a2:	f383 8811 	msr	BASEPRI, r3
 80110a6:	f3bf 8f6f 	isb	sy
 80110aa:	f3bf 8f4f 	dsb	sy
 80110ae:	b662      	cpsie	i
 80110b0:	61bb      	str	r3, [r7, #24]
}
 80110b2:	bf00      	nop
 80110b4:	bf00      	nop
 80110b6:	e7fd      	b.n	80110b4 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80110b8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80110ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d01e      	beq.n	80110fe <xTaskCreateStatic+0xbe>
 80110c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d01b      	beq.n	80110fe <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80110c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80110ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110cc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110ce:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80110d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110d2:	2202      	movs	r2, #2
 80110d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80110d8:	2300      	movs	r3, #0
 80110da:	9303      	str	r3, [sp, #12]
 80110dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110de:	9302      	str	r3, [sp, #8]
 80110e0:	f107 0314 	add.w	r3, r7, #20
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	687a      	ldr	r2, [r7, #4]
 80110ee:	68b9      	ldr	r1, [r7, #8]
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f000 f850 	bl	8011196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80110f8:	f000 f8e0 	bl	80112bc <prvAddNewTaskToReadyList>
 80110fc:	e001      	b.n	8011102 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80110fe:	2300      	movs	r3, #0
 8011100:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011102:	697b      	ldr	r3, [r7, #20]
	}
 8011104:	4618      	mov	r0, r3
 8011106:	3728      	adds	r7, #40	@ 0x28
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801110c:	b580      	push	{r7, lr}
 801110e:	b08c      	sub	sp, #48	@ 0x30
 8011110:	af04      	add	r7, sp, #16
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	4613      	mov	r3, r2
 801111a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801111c:	88fb      	ldrh	r3, [r7, #6]
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4618      	mov	r0, r3
 8011122:	f001 fb01 	bl	8012728 <pvPortMalloc>
 8011126:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011128:	697b      	ldr	r3, [r7, #20]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00e      	beq.n	801114c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801112e:	2054      	movs	r0, #84	@ 0x54
 8011130:	f001 fafa 	bl	8012728 <pvPortMalloc>
 8011134:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d003      	beq.n	8011144 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	631a      	str	r2, [r3, #48]	@ 0x30
 8011142:	e005      	b.n	8011150 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011144:	6978      	ldr	r0, [r7, #20]
 8011146:	f001 fbbd 	bl	80128c4 <vPortFree>
 801114a:	e001      	b.n	8011150 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801114c:	2300      	movs	r3, #0
 801114e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	2b00      	cmp	r3, #0
 8011154:	d017      	beq.n	8011186 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	2200      	movs	r2, #0
 801115a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801115e:	88fa      	ldrh	r2, [r7, #6]
 8011160:	2300      	movs	r3, #0
 8011162:	9303      	str	r3, [sp, #12]
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	9302      	str	r3, [sp, #8]
 8011168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801116a:	9301      	str	r3, [sp, #4]
 801116c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	68b9      	ldr	r1, [r7, #8]
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f000 f80e 	bl	8011196 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801117a:	69f8      	ldr	r0, [r7, #28]
 801117c:	f000 f89e 	bl	80112bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011180:	2301      	movs	r3, #1
 8011182:	61bb      	str	r3, [r7, #24]
 8011184:	e002      	b.n	801118c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011186:	f04f 33ff 	mov.w	r3, #4294967295
 801118a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801118c:	69bb      	ldr	r3, [r7, #24]
	}
 801118e:	4618      	mov	r0, r3
 8011190:	3720      	adds	r7, #32
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}

08011196 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011196:	b580      	push	{r7, lr}
 8011198:	b088      	sub	sp, #32
 801119a:	af00      	add	r7, sp, #0
 801119c:	60f8      	str	r0, [r7, #12]
 801119e:	60b9      	str	r1, [r7, #8]
 80111a0:	607a      	str	r2, [r7, #4]
 80111a2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80111a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	009b      	lsls	r3, r3, #2
 80111ac:	461a      	mov	r2, r3
 80111ae:	21a5      	movs	r1, #165	@ 0xa5
 80111b0:	f001 fcd8 	bl	8012b64 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80111b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80111b8:	6879      	ldr	r1, [r7, #4]
 80111ba:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80111be:	440b      	add	r3, r1
 80111c0:	009b      	lsls	r3, r3, #2
 80111c2:	4413      	add	r3, r2
 80111c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	f023 0307 	bic.w	r3, r3, #7
 80111cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	f003 0307 	and.w	r3, r3, #7
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d00d      	beq.n	80111f4 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80111d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111dc:	b672      	cpsid	i
 80111de:	f383 8811 	msr	BASEPRI, r3
 80111e2:	f3bf 8f6f 	isb	sy
 80111e6:	f3bf 8f4f 	dsb	sy
 80111ea:	b662      	cpsie	i
 80111ec:	617b      	str	r3, [r7, #20]
}
 80111ee:	bf00      	nop
 80111f0:	bf00      	nop
 80111f2:	e7fd      	b.n	80111f0 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d01f      	beq.n	801123a <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80111fa:	2300      	movs	r3, #0
 80111fc:	61fb      	str	r3, [r7, #28]
 80111fe:	e012      	b.n	8011226 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	4413      	add	r3, r2
 8011206:	7819      	ldrb	r1, [r3, #0]
 8011208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	4413      	add	r3, r2
 801120e:	3334      	adds	r3, #52	@ 0x34
 8011210:	460a      	mov	r2, r1
 8011212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011214:	68ba      	ldr	r2, [r7, #8]
 8011216:	69fb      	ldr	r3, [r7, #28]
 8011218:	4413      	add	r3, r2
 801121a:	781b      	ldrb	r3, [r3, #0]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d006      	beq.n	801122e <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	3301      	adds	r3, #1
 8011224:	61fb      	str	r3, [r7, #28]
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	2b0f      	cmp	r3, #15
 801122a:	d9e9      	bls.n	8011200 <prvInitialiseNewTask+0x6a>
 801122c:	e000      	b.n	8011230 <prvInitialiseNewTask+0x9a>
			{
				break;
 801122e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011232:	2200      	movs	r2, #0
 8011234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011238:	e003      	b.n	8011242 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801123a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801123c:	2200      	movs	r2, #0
 801123e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011244:	2b06      	cmp	r3, #6
 8011246:	d901      	bls.n	801124c <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011248:	2306      	movs	r3, #6
 801124a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801124c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801124e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011250:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011256:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801125a:	2200      	movs	r2, #0
 801125c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801125e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011260:	3304      	adds	r3, #4
 8011262:	4618      	mov	r0, r3
 8011264:	f7fe ff2e 	bl	80100c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801126a:	3318      	adds	r3, #24
 801126c:	4618      	mov	r0, r3
 801126e:	f7fe ff29 	bl	80100c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127a:	f1c3 0207 	rsb	r2, r3, #7
 801127e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011286:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801128a:	2200      	movs	r2, #0
 801128c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801128e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011290:	2200      	movs	r2, #0
 8011292:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	68f9      	ldr	r1, [r7, #12]
 801129a:	69b8      	ldr	r0, [r7, #24]
 801129c:	f001 f80a 	bl	80122b4 <pxPortInitialiseStack>
 80112a0:	4602      	mov	r2, r0
 80112a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80112a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d002      	beq.n	80112b2 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80112ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112b2:	bf00      	nop
 80112b4:	3720      	adds	r7, #32
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}
	...

080112bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80112c4:	f001 f902 	bl	80124cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80112c8:	4b2a      	ldr	r3, [pc, #168]	@ (8011374 <prvAddNewTaskToReadyList+0xb8>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	3301      	adds	r3, #1
 80112ce:	4a29      	ldr	r2, [pc, #164]	@ (8011374 <prvAddNewTaskToReadyList+0xb8>)
 80112d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80112d2:	4b29      	ldr	r3, [pc, #164]	@ (8011378 <prvAddNewTaskToReadyList+0xbc>)
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d109      	bne.n	80112ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80112da:	4a27      	ldr	r2, [pc, #156]	@ (8011378 <prvAddNewTaskToReadyList+0xbc>)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80112e0:	4b24      	ldr	r3, [pc, #144]	@ (8011374 <prvAddNewTaskToReadyList+0xb8>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	d110      	bne.n	801130a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80112e8:	f000 fcc8 	bl	8011c7c <prvInitialiseTaskLists>
 80112ec:	e00d      	b.n	801130a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80112ee:	4b23      	ldr	r3, [pc, #140]	@ (801137c <prvAddNewTaskToReadyList+0xc0>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d109      	bne.n	801130a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80112f6:	4b20      	ldr	r3, [pc, #128]	@ (8011378 <prvAddNewTaskToReadyList+0xbc>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011300:	429a      	cmp	r2, r3
 8011302:	d802      	bhi.n	801130a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011304:	4a1c      	ldr	r2, [pc, #112]	@ (8011378 <prvAddNewTaskToReadyList+0xbc>)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801130a:	4b1d      	ldr	r3, [pc, #116]	@ (8011380 <prvAddNewTaskToReadyList+0xc4>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	3301      	adds	r3, #1
 8011310:	4a1b      	ldr	r2, [pc, #108]	@ (8011380 <prvAddNewTaskToReadyList+0xc4>)
 8011312:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011318:	2201      	movs	r2, #1
 801131a:	409a      	lsls	r2, r3
 801131c:	4b19      	ldr	r3, [pc, #100]	@ (8011384 <prvAddNewTaskToReadyList+0xc8>)
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	4313      	orrs	r3, r2
 8011322:	4a18      	ldr	r2, [pc, #96]	@ (8011384 <prvAddNewTaskToReadyList+0xc8>)
 8011324:	6013      	str	r3, [r2, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801132a:	4613      	mov	r3, r2
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	4413      	add	r3, r2
 8011330:	009b      	lsls	r3, r3, #2
 8011332:	4a15      	ldr	r2, [pc, #84]	@ (8011388 <prvAddNewTaskToReadyList+0xcc>)
 8011334:	441a      	add	r2, r3
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	3304      	adds	r3, #4
 801133a:	4619      	mov	r1, r3
 801133c:	4610      	mov	r0, r2
 801133e:	f7fe fece 	bl	80100de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011342:	f001 f8f9 	bl	8012538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011346:	4b0d      	ldr	r3, [pc, #52]	@ (801137c <prvAddNewTaskToReadyList+0xc0>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d00e      	beq.n	801136c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801134e:	4b0a      	ldr	r3, [pc, #40]	@ (8011378 <prvAddNewTaskToReadyList+0xbc>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011358:	429a      	cmp	r2, r3
 801135a:	d207      	bcs.n	801136c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801135c:	4b0b      	ldr	r3, [pc, #44]	@ (801138c <prvAddNewTaskToReadyList+0xd0>)
 801135e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011362:	601a      	str	r2, [r3, #0]
 8011364:	f3bf 8f4f 	dsb	sy
 8011368:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801136c:	bf00      	nop
 801136e:	3708      	adds	r7, #8
 8011370:	46bd      	mov	sp, r7
 8011372:	bd80      	pop	{r7, pc}
 8011374:	20001468 	.word	0x20001468
 8011378:	20001368 	.word	0x20001368
 801137c:	20001474 	.word	0x20001474
 8011380:	20001484 	.word	0x20001484
 8011384:	20001470 	.word	0x20001470
 8011388:	2000136c 	.word	0x2000136c
 801138c:	e000ed04 	.word	0xe000ed04

08011390 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011390:	b580      	push	{r7, lr}
 8011392:	b084      	sub	sp, #16
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011398:	2300      	movs	r3, #0
 801139a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d01a      	beq.n	80113d8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80113a2:	4b15      	ldr	r3, [pc, #84]	@ (80113f8 <vTaskDelay+0x68>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00d      	beq.n	80113c6 <vTaskDelay+0x36>
	__asm volatile
 80113aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113ae:	b672      	cpsid	i
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	b662      	cpsie	i
 80113be:	60bb      	str	r3, [r7, #8]
}
 80113c0:	bf00      	nop
 80113c2:	bf00      	nop
 80113c4:	e7fd      	b.n	80113c2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80113c6:	f000 f881 	bl	80114cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80113ca:	2100      	movs	r1, #0
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f000 ff0b 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80113d2:	f000 f889 	bl	80114e8 <xTaskResumeAll>
 80113d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d107      	bne.n	80113ee <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80113de:	4b07      	ldr	r3, [pc, #28]	@ (80113fc <vTaskDelay+0x6c>)
 80113e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	f3bf 8f4f 	dsb	sy
 80113ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80113ee:	bf00      	nop
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	20001490 	.word	0x20001490
 80113fc:	e000ed04 	.word	0xe000ed04

08011400 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b08a      	sub	sp, #40	@ 0x28
 8011404:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011406:	2300      	movs	r3, #0
 8011408:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801140a:	2300      	movs	r3, #0
 801140c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801140e:	463a      	mov	r2, r7
 8011410:	1d39      	adds	r1, r7, #4
 8011412:	f107 0308 	add.w	r3, r7, #8
 8011416:	4618      	mov	r0, r3
 8011418:	f7f2 fcec 	bl	8003df4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801141c:	6839      	ldr	r1, [r7, #0]
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68ba      	ldr	r2, [r7, #8]
 8011422:	9202      	str	r2, [sp, #8]
 8011424:	9301      	str	r3, [sp, #4]
 8011426:	2300      	movs	r3, #0
 8011428:	9300      	str	r3, [sp, #0]
 801142a:	2300      	movs	r3, #0
 801142c:	460a      	mov	r2, r1
 801142e:	4921      	ldr	r1, [pc, #132]	@ (80114b4 <vTaskStartScheduler+0xb4>)
 8011430:	4821      	ldr	r0, [pc, #132]	@ (80114b8 <vTaskStartScheduler+0xb8>)
 8011432:	f7ff fe05 	bl	8011040 <xTaskCreateStatic>
 8011436:	4603      	mov	r3, r0
 8011438:	4a20      	ldr	r2, [pc, #128]	@ (80114bc <vTaskStartScheduler+0xbc>)
 801143a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801143c:	4b1f      	ldr	r3, [pc, #124]	@ (80114bc <vTaskStartScheduler+0xbc>)
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d002      	beq.n	801144a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011444:	2301      	movs	r3, #1
 8011446:	617b      	str	r3, [r7, #20]
 8011448:	e001      	b.n	801144e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801144a:	2300      	movs	r3, #0
 801144c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	2b01      	cmp	r3, #1
 8011452:	d118      	bne.n	8011486 <vTaskStartScheduler+0x86>
	__asm volatile
 8011454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011458:	b672      	cpsid	i
 801145a:	f383 8811 	msr	BASEPRI, r3
 801145e:	f3bf 8f6f 	isb	sy
 8011462:	f3bf 8f4f 	dsb	sy
 8011466:	b662      	cpsie	i
 8011468:	613b      	str	r3, [r7, #16]
}
 801146a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801146c:	4b14      	ldr	r3, [pc, #80]	@ (80114c0 <vTaskStartScheduler+0xc0>)
 801146e:	f04f 32ff 	mov.w	r2, #4294967295
 8011472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011474:	4b13      	ldr	r3, [pc, #76]	@ (80114c4 <vTaskStartScheduler+0xc4>)
 8011476:	2201      	movs	r2, #1
 8011478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801147a:	4b13      	ldr	r3, [pc, #76]	@ (80114c8 <vTaskStartScheduler+0xc8>)
 801147c:	2200      	movs	r2, #0
 801147e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011480:	f000 ffa6 	bl	80123d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011484:	e011      	b.n	80114aa <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011486:	697b      	ldr	r3, [r7, #20]
 8011488:	f1b3 3fff 	cmp.w	r3, #4294967295
 801148c:	d10d      	bne.n	80114aa <vTaskStartScheduler+0xaa>
	__asm volatile
 801148e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011492:	b672      	cpsid	i
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	b662      	cpsie	i
 80114a2:	60fb      	str	r3, [r7, #12]
}
 80114a4:	bf00      	nop
 80114a6:	bf00      	nop
 80114a8:	e7fd      	b.n	80114a6 <vTaskStartScheduler+0xa6>
}
 80114aa:	bf00      	nop
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	080138e0 	.word	0x080138e0
 80114b8:	08011c4d 	.word	0x08011c4d
 80114bc:	2000148c 	.word	0x2000148c
 80114c0:	20001488 	.word	0x20001488
 80114c4:	20001474 	.word	0x20001474
 80114c8:	2000146c 	.word	0x2000146c

080114cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80114cc:	b480      	push	{r7}
 80114ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80114d0:	4b04      	ldr	r3, [pc, #16]	@ (80114e4 <vTaskSuspendAll+0x18>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3301      	adds	r3, #1
 80114d6:	4a03      	ldr	r2, [pc, #12]	@ (80114e4 <vTaskSuspendAll+0x18>)
 80114d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80114da:	bf00      	nop
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	20001490 	.word	0x20001490

080114e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80114ee:	2300      	movs	r3, #0
 80114f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80114f2:	2300      	movs	r3, #0
 80114f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80114f6:	4b43      	ldr	r3, [pc, #268]	@ (8011604 <xTaskResumeAll+0x11c>)
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d10d      	bne.n	801151a <xTaskResumeAll+0x32>
	__asm volatile
 80114fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011502:	b672      	cpsid	i
 8011504:	f383 8811 	msr	BASEPRI, r3
 8011508:	f3bf 8f6f 	isb	sy
 801150c:	f3bf 8f4f 	dsb	sy
 8011510:	b662      	cpsie	i
 8011512:	603b      	str	r3, [r7, #0]
}
 8011514:	bf00      	nop
 8011516:	bf00      	nop
 8011518:	e7fd      	b.n	8011516 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801151a:	f000 ffd7 	bl	80124cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801151e:	4b39      	ldr	r3, [pc, #228]	@ (8011604 <xTaskResumeAll+0x11c>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	3b01      	subs	r3, #1
 8011524:	4a37      	ldr	r2, [pc, #220]	@ (8011604 <xTaskResumeAll+0x11c>)
 8011526:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011528:	4b36      	ldr	r3, [pc, #216]	@ (8011604 <xTaskResumeAll+0x11c>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d161      	bne.n	80115f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011530:	4b35      	ldr	r3, [pc, #212]	@ (8011608 <xTaskResumeAll+0x120>)
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d05d      	beq.n	80115f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011538:	e02e      	b.n	8011598 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801153a:	4b34      	ldr	r3, [pc, #208]	@ (801160c <xTaskResumeAll+0x124>)
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	3318      	adds	r3, #24
 8011546:	4618      	mov	r0, r3
 8011548:	f7fe fe26 	bl	8010198 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	3304      	adds	r3, #4
 8011550:	4618      	mov	r0, r3
 8011552:	f7fe fe21 	bl	8010198 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801155a:	2201      	movs	r2, #1
 801155c:	409a      	lsls	r2, r3
 801155e:	4b2c      	ldr	r3, [pc, #176]	@ (8011610 <xTaskResumeAll+0x128>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	4313      	orrs	r3, r2
 8011564:	4a2a      	ldr	r2, [pc, #168]	@ (8011610 <xTaskResumeAll+0x128>)
 8011566:	6013      	str	r3, [r2, #0]
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801156c:	4613      	mov	r3, r2
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	4413      	add	r3, r2
 8011572:	009b      	lsls	r3, r3, #2
 8011574:	4a27      	ldr	r2, [pc, #156]	@ (8011614 <xTaskResumeAll+0x12c>)
 8011576:	441a      	add	r2, r3
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	3304      	adds	r3, #4
 801157c:	4619      	mov	r1, r3
 801157e:	4610      	mov	r0, r2
 8011580:	f7fe fdad 	bl	80100de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011588:	4b23      	ldr	r3, [pc, #140]	@ (8011618 <xTaskResumeAll+0x130>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801158e:	429a      	cmp	r2, r3
 8011590:	d302      	bcc.n	8011598 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011592:	4b22      	ldr	r3, [pc, #136]	@ (801161c <xTaskResumeAll+0x134>)
 8011594:	2201      	movs	r2, #1
 8011596:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011598:	4b1c      	ldr	r3, [pc, #112]	@ (801160c <xTaskResumeAll+0x124>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d1cc      	bne.n	801153a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d001      	beq.n	80115aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80115a6:	f000 fc09 	bl	8011dbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80115aa:	4b1d      	ldr	r3, [pc, #116]	@ (8011620 <xTaskResumeAll+0x138>)
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d010      	beq.n	80115d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80115b6:	f000 f847 	bl	8011648 <xTaskIncrementTick>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80115c0:	4b16      	ldr	r3, [pc, #88]	@ (801161c <xTaskResumeAll+0x134>)
 80115c2:	2201      	movs	r2, #1
 80115c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	3b01      	subs	r3, #1
 80115ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d1f1      	bne.n	80115b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80115d2:	4b13      	ldr	r3, [pc, #76]	@ (8011620 <xTaskResumeAll+0x138>)
 80115d4:	2200      	movs	r2, #0
 80115d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80115d8:	4b10      	ldr	r3, [pc, #64]	@ (801161c <xTaskResumeAll+0x134>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d009      	beq.n	80115f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80115e0:	2301      	movs	r3, #1
 80115e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80115e4:	4b0f      	ldr	r3, [pc, #60]	@ (8011624 <xTaskResumeAll+0x13c>)
 80115e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80115ea:	601a      	str	r2, [r3, #0]
 80115ec:	f3bf 8f4f 	dsb	sy
 80115f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80115f4:	f000 ffa0 	bl	8012538 <vPortExitCritical>

	return xAlreadyYielded;
 80115f8:	68bb      	ldr	r3, [r7, #8]
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3710      	adds	r7, #16
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	20001490 	.word	0x20001490
 8011608:	20001468 	.word	0x20001468
 801160c:	20001428 	.word	0x20001428
 8011610:	20001470 	.word	0x20001470
 8011614:	2000136c 	.word	0x2000136c
 8011618:	20001368 	.word	0x20001368
 801161c:	2000147c 	.word	0x2000147c
 8011620:	20001478 	.word	0x20001478
 8011624:	e000ed04 	.word	0xe000ed04

08011628 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011628:	b480      	push	{r7}
 801162a:	b083      	sub	sp, #12
 801162c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801162e:	4b05      	ldr	r3, [pc, #20]	@ (8011644 <xTaskGetTickCount+0x1c>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011634:	687b      	ldr	r3, [r7, #4]
}
 8011636:	4618      	mov	r0, r3
 8011638:	370c      	adds	r7, #12
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	2000146c 	.word	0x2000146c

08011648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b086      	sub	sp, #24
 801164c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801164e:	2300      	movs	r3, #0
 8011650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011652:	4b50      	ldr	r3, [pc, #320]	@ (8011794 <xTaskIncrementTick+0x14c>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	f040 808b 	bne.w	8011772 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801165c:	4b4e      	ldr	r3, [pc, #312]	@ (8011798 <xTaskIncrementTick+0x150>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	3301      	adds	r3, #1
 8011662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011664:	4a4c      	ldr	r2, [pc, #304]	@ (8011798 <xTaskIncrementTick+0x150>)
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	2b00      	cmp	r3, #0
 801166e:	d123      	bne.n	80116b8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8011670:	4b4a      	ldr	r3, [pc, #296]	@ (801179c <xTaskIncrementTick+0x154>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00d      	beq.n	8011696 <xTaskIncrementTick+0x4e>
	__asm volatile
 801167a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801167e:	b672      	cpsid	i
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	b662      	cpsie	i
 801168e:	603b      	str	r3, [r7, #0]
}
 8011690:	bf00      	nop
 8011692:	bf00      	nop
 8011694:	e7fd      	b.n	8011692 <xTaskIncrementTick+0x4a>
 8011696:	4b41      	ldr	r3, [pc, #260]	@ (801179c <xTaskIncrementTick+0x154>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	4b40      	ldr	r3, [pc, #256]	@ (80117a0 <xTaskIncrementTick+0x158>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4a3e      	ldr	r2, [pc, #248]	@ (801179c <xTaskIncrementTick+0x154>)
 80116a2:	6013      	str	r3, [r2, #0]
 80116a4:	4a3e      	ldr	r2, [pc, #248]	@ (80117a0 <xTaskIncrementTick+0x158>)
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	6013      	str	r3, [r2, #0]
 80116aa:	4b3e      	ldr	r3, [pc, #248]	@ (80117a4 <xTaskIncrementTick+0x15c>)
 80116ac:	681b      	ldr	r3, [r3, #0]
 80116ae:	3301      	adds	r3, #1
 80116b0:	4a3c      	ldr	r2, [pc, #240]	@ (80117a4 <xTaskIncrementTick+0x15c>)
 80116b2:	6013      	str	r3, [r2, #0]
 80116b4:	f000 fb82 	bl	8011dbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80116b8:	4b3b      	ldr	r3, [pc, #236]	@ (80117a8 <xTaskIncrementTick+0x160>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	693a      	ldr	r2, [r7, #16]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d348      	bcc.n	8011754 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116c2:	4b36      	ldr	r3, [pc, #216]	@ (801179c <xTaskIncrementTick+0x154>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d104      	bne.n	80116d6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116cc:	4b36      	ldr	r3, [pc, #216]	@ (80117a8 <xTaskIncrementTick+0x160>)
 80116ce:	f04f 32ff 	mov.w	r2, #4294967295
 80116d2:	601a      	str	r2, [r3, #0]
					break;
 80116d4:	e03e      	b.n	8011754 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116d6:	4b31      	ldr	r3, [pc, #196]	@ (801179c <xTaskIncrementTick+0x154>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68db      	ldr	r3, [r3, #12]
 80116dc:	68db      	ldr	r3, [r3, #12]
 80116de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80116e6:	693a      	ldr	r2, [r7, #16]
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d203      	bcs.n	80116f6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80116ee:	4a2e      	ldr	r2, [pc, #184]	@ (80117a8 <xTaskIncrementTick+0x160>)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80116f4:	e02e      	b.n	8011754 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	3304      	adds	r3, #4
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fe fd4c 	bl	8010198 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011704:	2b00      	cmp	r3, #0
 8011706:	d004      	beq.n	8011712 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	3318      	adds	r3, #24
 801170c:	4618      	mov	r0, r3
 801170e:	f7fe fd43 	bl	8010198 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011716:	2201      	movs	r2, #1
 8011718:	409a      	lsls	r2, r3
 801171a:	4b24      	ldr	r3, [pc, #144]	@ (80117ac <xTaskIncrementTick+0x164>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	4313      	orrs	r3, r2
 8011720:	4a22      	ldr	r2, [pc, #136]	@ (80117ac <xTaskIncrementTick+0x164>)
 8011722:	6013      	str	r3, [r2, #0]
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011728:	4613      	mov	r3, r2
 801172a:	009b      	lsls	r3, r3, #2
 801172c:	4413      	add	r3, r2
 801172e:	009b      	lsls	r3, r3, #2
 8011730:	4a1f      	ldr	r2, [pc, #124]	@ (80117b0 <xTaskIncrementTick+0x168>)
 8011732:	441a      	add	r2, r3
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	3304      	adds	r3, #4
 8011738:	4619      	mov	r1, r3
 801173a:	4610      	mov	r0, r2
 801173c:	f7fe fccf 	bl	80100de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011744:	4b1b      	ldr	r3, [pc, #108]	@ (80117b4 <xTaskIncrementTick+0x16c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801174a:	429a      	cmp	r2, r3
 801174c:	d3b9      	bcc.n	80116c2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 801174e:	2301      	movs	r3, #1
 8011750:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011752:	e7b6      	b.n	80116c2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011754:	4b17      	ldr	r3, [pc, #92]	@ (80117b4 <xTaskIncrementTick+0x16c>)
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175a:	4915      	ldr	r1, [pc, #84]	@ (80117b0 <xTaskIncrementTick+0x168>)
 801175c:	4613      	mov	r3, r2
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4413      	add	r3, r2
 8011762:	009b      	lsls	r3, r3, #2
 8011764:	440b      	add	r3, r1
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	2b01      	cmp	r3, #1
 801176a:	d907      	bls.n	801177c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 801176c:	2301      	movs	r3, #1
 801176e:	617b      	str	r3, [r7, #20]
 8011770:	e004      	b.n	801177c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011772:	4b11      	ldr	r3, [pc, #68]	@ (80117b8 <xTaskIncrementTick+0x170>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	3301      	adds	r3, #1
 8011778:	4a0f      	ldr	r2, [pc, #60]	@ (80117b8 <xTaskIncrementTick+0x170>)
 801177a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801177c:	4b0f      	ldr	r3, [pc, #60]	@ (80117bc <xTaskIncrementTick+0x174>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d001      	beq.n	8011788 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011784:	2301      	movs	r3, #1
 8011786:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011788:	697b      	ldr	r3, [r7, #20]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3718      	adds	r7, #24
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20001490 	.word	0x20001490
 8011798:	2000146c 	.word	0x2000146c
 801179c:	20001420 	.word	0x20001420
 80117a0:	20001424 	.word	0x20001424
 80117a4:	20001480 	.word	0x20001480
 80117a8:	20001488 	.word	0x20001488
 80117ac:	20001470 	.word	0x20001470
 80117b0:	2000136c 	.word	0x2000136c
 80117b4:	20001368 	.word	0x20001368
 80117b8:	20001478 	.word	0x20001478
 80117bc:	2000147c 	.word	0x2000147c

080117c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b088      	sub	sp, #32
 80117c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80117c6:	4b3b      	ldr	r3, [pc, #236]	@ (80118b4 <vTaskSwitchContext+0xf4>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d003      	beq.n	80117d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80117ce:	4b3a      	ldr	r3, [pc, #232]	@ (80118b8 <vTaskSwitchContext+0xf8>)
 80117d0:	2201      	movs	r2, #1
 80117d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80117d4:	e069      	b.n	80118aa <vTaskSwitchContext+0xea>
		xYieldPending = pdFALSE;
 80117d6:	4b38      	ldr	r3, [pc, #224]	@ (80118b8 <vTaskSwitchContext+0xf8>)
 80117d8:	2200      	movs	r2, #0
 80117da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80117dc:	4b37      	ldr	r3, [pc, #220]	@ (80118bc <vTaskSwitchContext+0xfc>)
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80117e2:	61fb      	str	r3, [r7, #28]
 80117e4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 80117e8:	61bb      	str	r3, [r7, #24]
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	69ba      	ldr	r2, [r7, #24]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d111      	bne.n	8011818 <vTaskSwitchContext+0x58>
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	3304      	adds	r3, #4
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	69ba      	ldr	r2, [r7, #24]
 80117fc:	429a      	cmp	r2, r3
 80117fe:	d10b      	bne.n	8011818 <vTaskSwitchContext+0x58>
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	3308      	adds	r3, #8
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	69ba      	ldr	r2, [r7, #24]
 8011808:	429a      	cmp	r2, r3
 801180a:	d105      	bne.n	8011818 <vTaskSwitchContext+0x58>
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	330c      	adds	r3, #12
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	69ba      	ldr	r2, [r7, #24]
 8011814:	429a      	cmp	r2, r3
 8011816:	d008      	beq.n	801182a <vTaskSwitchContext+0x6a>
 8011818:	4b28      	ldr	r3, [pc, #160]	@ (80118bc <vTaskSwitchContext+0xfc>)
 801181a:	681a      	ldr	r2, [r3, #0]
 801181c:	4b27      	ldr	r3, [pc, #156]	@ (80118bc <vTaskSwitchContext+0xfc>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	3334      	adds	r3, #52	@ 0x34
 8011822:	4619      	mov	r1, r3
 8011824:	4610      	mov	r0, r2
 8011826:	f7f2 fad9 	bl	8003ddc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801182a:	4b25      	ldr	r3, [pc, #148]	@ (80118c0 <vTaskSwitchContext+0x100>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	fab3 f383 	clz	r3, r3
 8011836:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011838:	7afb      	ldrb	r3, [r7, #11]
 801183a:	f1c3 031f 	rsb	r3, r3, #31
 801183e:	617b      	str	r3, [r7, #20]
 8011840:	4920      	ldr	r1, [pc, #128]	@ (80118c4 <vTaskSwitchContext+0x104>)
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	4613      	mov	r3, r2
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	4413      	add	r3, r2
 801184a:	009b      	lsls	r3, r3, #2
 801184c:	440b      	add	r3, r1
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d10d      	bne.n	8011870 <vTaskSwitchContext+0xb0>
	__asm volatile
 8011854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011858:	b672      	cpsid	i
 801185a:	f383 8811 	msr	BASEPRI, r3
 801185e:	f3bf 8f6f 	isb	sy
 8011862:	f3bf 8f4f 	dsb	sy
 8011866:	b662      	cpsie	i
 8011868:	607b      	str	r3, [r7, #4]
}
 801186a:	bf00      	nop
 801186c:	bf00      	nop
 801186e:	e7fd      	b.n	801186c <vTaskSwitchContext+0xac>
 8011870:	697a      	ldr	r2, [r7, #20]
 8011872:	4613      	mov	r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	4a12      	ldr	r2, [pc, #72]	@ (80118c4 <vTaskSwitchContext+0x104>)
 801187c:	4413      	add	r3, r2
 801187e:	613b      	str	r3, [r7, #16]
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	685a      	ldr	r2, [r3, #4]
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	605a      	str	r2, [r3, #4]
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	685a      	ldr	r2, [r3, #4]
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	3308      	adds	r3, #8
 8011892:	429a      	cmp	r2, r3
 8011894:	d104      	bne.n	80118a0 <vTaskSwitchContext+0xe0>
 8011896:	693b      	ldr	r3, [r7, #16]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	685a      	ldr	r2, [r3, #4]
 801189c:	693b      	ldr	r3, [r7, #16]
 801189e:	605a      	str	r2, [r3, #4]
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	68db      	ldr	r3, [r3, #12]
 80118a6:	4a05      	ldr	r2, [pc, #20]	@ (80118bc <vTaskSwitchContext+0xfc>)
 80118a8:	6013      	str	r3, [r2, #0]
}
 80118aa:	bf00      	nop
 80118ac:	3720      	adds	r7, #32
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	20001490 	.word	0x20001490
 80118b8:	2000147c 	.word	0x2000147c
 80118bc:	20001368 	.word	0x20001368
 80118c0:	20001470 	.word	0x20001470
 80118c4:	2000136c 	.word	0x2000136c

080118c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d10d      	bne.n	80118f4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80118d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80118dc:	b672      	cpsid	i
 80118de:	f383 8811 	msr	BASEPRI, r3
 80118e2:	f3bf 8f6f 	isb	sy
 80118e6:	f3bf 8f4f 	dsb	sy
 80118ea:	b662      	cpsie	i
 80118ec:	60fb      	str	r3, [r7, #12]
}
 80118ee:	bf00      	nop
 80118f0:	bf00      	nop
 80118f2:	e7fd      	b.n	80118f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118f4:	4b07      	ldr	r3, [pc, #28]	@ (8011914 <vTaskPlaceOnEventList+0x4c>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3318      	adds	r3, #24
 80118fa:	4619      	mov	r1, r3
 80118fc:	6878      	ldr	r0, [r7, #4]
 80118fe:	f7fe fc12 	bl	8010126 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011902:	2101      	movs	r1, #1
 8011904:	6838      	ldr	r0, [r7, #0]
 8011906:	f000 fc6f 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
}
 801190a:	bf00      	nop
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}
 8011912:	bf00      	nop
 8011914:	20001368 	.word	0x20001368

08011918 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b086      	sub	sp, #24
 801191c:	af00      	add	r7, sp, #0
 801191e:	60f8      	str	r0, [r7, #12]
 8011920:	60b9      	str	r1, [r7, #8]
 8011922:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d10d      	bne.n	8011946 <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 801192a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801192e:	b672      	cpsid	i
 8011930:	f383 8811 	msr	BASEPRI, r3
 8011934:	f3bf 8f6f 	isb	sy
 8011938:	f3bf 8f4f 	dsb	sy
 801193c:	b662      	cpsie	i
 801193e:	617b      	str	r3, [r7, #20]
}
 8011940:	bf00      	nop
 8011942:	bf00      	nop
 8011944:	e7fd      	b.n	8011942 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8011946:	4b13      	ldr	r3, [pc, #76]	@ (8011994 <vTaskPlaceOnUnorderedEventList+0x7c>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d10d      	bne.n	801196a <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 801194e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011952:	b672      	cpsid	i
 8011954:	f383 8811 	msr	BASEPRI, r3
 8011958:	f3bf 8f6f 	isb	sy
 801195c:	f3bf 8f4f 	dsb	sy
 8011960:	b662      	cpsie	i
 8011962:	613b      	str	r3, [r7, #16]
}
 8011964:	bf00      	nop
 8011966:	bf00      	nop
 8011968:	e7fd      	b.n	8011966 <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801196a:	4b0b      	ldr	r3, [pc, #44]	@ (8011998 <vTaskPlaceOnUnorderedEventList+0x80>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	68ba      	ldr	r2, [r7, #8]
 8011970:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8011974:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011976:	4b08      	ldr	r3, [pc, #32]	@ (8011998 <vTaskPlaceOnUnorderedEventList+0x80>)
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	3318      	adds	r3, #24
 801197c:	4619      	mov	r1, r3
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f7fe fbad 	bl	80100de <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011984:	2101      	movs	r1, #1
 8011986:	6878      	ldr	r0, [r7, #4]
 8011988:	f000 fc2e 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
}
 801198c:	bf00      	nop
 801198e:	3718      	adds	r7, #24
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20001490 	.word	0x20001490
 8011998:	20001368 	.word	0x20001368

0801199c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b086      	sub	sp, #24
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	68db      	ldr	r3, [r3, #12]
 80119a8:	68db      	ldr	r3, [r3, #12]
 80119aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d10d      	bne.n	80119ce <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80119b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119b6:	b672      	cpsid	i
 80119b8:	f383 8811 	msr	BASEPRI, r3
 80119bc:	f3bf 8f6f 	isb	sy
 80119c0:	f3bf 8f4f 	dsb	sy
 80119c4:	b662      	cpsie	i
 80119c6:	60fb      	str	r3, [r7, #12]
}
 80119c8:	bf00      	nop
 80119ca:	bf00      	nop
 80119cc:	e7fd      	b.n	80119ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	3318      	adds	r3, #24
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fbe0 	bl	8010198 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80119d8:	4b1d      	ldr	r3, [pc, #116]	@ (8011a50 <xTaskRemoveFromEventList+0xb4>)
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d11c      	bne.n	8011a1a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	3304      	adds	r3, #4
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fe fbd7 	bl	8010198 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119ee:	2201      	movs	r2, #1
 80119f0:	409a      	lsls	r2, r3
 80119f2:	4b18      	ldr	r3, [pc, #96]	@ (8011a54 <xTaskRemoveFromEventList+0xb8>)
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	4313      	orrs	r3, r2
 80119f8:	4a16      	ldr	r2, [pc, #88]	@ (8011a54 <xTaskRemoveFromEventList+0xb8>)
 80119fa:	6013      	str	r3, [r2, #0]
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a00:	4613      	mov	r3, r2
 8011a02:	009b      	lsls	r3, r3, #2
 8011a04:	4413      	add	r3, r2
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	4a13      	ldr	r2, [pc, #76]	@ (8011a58 <xTaskRemoveFromEventList+0xbc>)
 8011a0a:	441a      	add	r2, r3
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	3304      	adds	r3, #4
 8011a10:	4619      	mov	r1, r3
 8011a12:	4610      	mov	r0, r2
 8011a14:	f7fe fb63 	bl	80100de <vListInsertEnd>
 8011a18:	e005      	b.n	8011a26 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	3318      	adds	r3, #24
 8011a1e:	4619      	mov	r1, r3
 8011a20:	480e      	ldr	r0, [pc, #56]	@ (8011a5c <xTaskRemoveFromEventList+0xc0>)
 8011a22:	f7fe fb5c 	bl	80100de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a60 <xTaskRemoveFromEventList+0xc4>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d905      	bls.n	8011a40 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011a34:	2301      	movs	r3, #1
 8011a36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011a38:	4b0a      	ldr	r3, [pc, #40]	@ (8011a64 <xTaskRemoveFromEventList+0xc8>)
 8011a3a:	2201      	movs	r2, #1
 8011a3c:	601a      	str	r2, [r3, #0]
 8011a3e:	e001      	b.n	8011a44 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011a40:	2300      	movs	r3, #0
 8011a42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011a44:	697b      	ldr	r3, [r7, #20]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3718      	adds	r7, #24
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	20001490 	.word	0x20001490
 8011a54:	20001470 	.word	0x20001470
 8011a58:	2000136c 	.word	0x2000136c
 8011a5c:	20001428 	.word	0x20001428
 8011a60:	20001368 	.word	0x20001368
 8011a64:	2000147c 	.word	0x2000147c

08011a68 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b086      	sub	sp, #24
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
 8011a70:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8011a72:	4b2c      	ldr	r3, [pc, #176]	@ (8011b24 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d10d      	bne.n	8011a96 <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 8011a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a7e:	b672      	cpsid	i
 8011a80:	f383 8811 	msr	BASEPRI, r3
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	f3bf 8f4f 	dsb	sy
 8011a8c:	b662      	cpsie	i
 8011a8e:	613b      	str	r3, [r7, #16]
}
 8011a90:	bf00      	nop
 8011a92:	bf00      	nop
 8011a94:	e7fd      	b.n	8011a92 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8011a96:	683b      	ldr	r3, [r7, #0]
 8011a98:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d10d      	bne.n	8011ac8 <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8011aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ab0:	b672      	cpsid	i
 8011ab2:	f383 8811 	msr	BASEPRI, r3
 8011ab6:	f3bf 8f6f 	isb	sy
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	b662      	cpsie	i
 8011ac0:	60fb      	str	r3, [r7, #12]
}
 8011ac2:	bf00      	nop
 8011ac4:	bf00      	nop
 8011ac6:	e7fd      	b.n	8011ac4 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f7fe fb65 	bl	8010198 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	3304      	adds	r3, #4
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fe fb60 	bl	8010198 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011adc:	2201      	movs	r2, #1
 8011ade:	409a      	lsls	r2, r3
 8011ae0:	4b11      	ldr	r3, [pc, #68]	@ (8011b28 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	4313      	orrs	r3, r2
 8011ae6:	4a10      	ldr	r2, [pc, #64]	@ (8011b28 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8011ae8:	6013      	str	r3, [r2, #0]
 8011aea:	697b      	ldr	r3, [r7, #20]
 8011aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011aee:	4613      	mov	r3, r2
 8011af0:	009b      	lsls	r3, r3, #2
 8011af2:	4413      	add	r3, r2
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	4a0d      	ldr	r2, [pc, #52]	@ (8011b2c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8011af8:	441a      	add	r2, r3
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	3304      	adds	r3, #4
 8011afe:	4619      	mov	r1, r3
 8011b00:	4610      	mov	r0, r2
 8011b02:	f7fe faec 	bl	80100de <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b0a:	4b09      	ldr	r3, [pc, #36]	@ (8011b30 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d902      	bls.n	8011b1a <vTaskRemoveFromUnorderedEventList+0xb2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8011b14:	4b07      	ldr	r3, [pc, #28]	@ (8011b34 <vTaskRemoveFromUnorderedEventList+0xcc>)
 8011b16:	2201      	movs	r2, #1
 8011b18:	601a      	str	r2, [r3, #0]
	}
}
 8011b1a:	bf00      	nop
 8011b1c:	3718      	adds	r7, #24
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20001490 	.word	0x20001490
 8011b28:	20001470 	.word	0x20001470
 8011b2c:	2000136c 	.word	0x2000136c
 8011b30:	20001368 	.word	0x20001368
 8011b34:	2000147c 	.word	0x2000147c

08011b38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011b40:	4b06      	ldr	r3, [pc, #24]	@ (8011b5c <vTaskInternalSetTimeOutState+0x24>)
 8011b42:	681a      	ldr	r2, [r3, #0]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011b48:	4b05      	ldr	r3, [pc, #20]	@ (8011b60 <vTaskInternalSetTimeOutState+0x28>)
 8011b4a:	681a      	ldr	r2, [r3, #0]
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	605a      	str	r2, [r3, #4]
}
 8011b50:	bf00      	nop
 8011b52:	370c      	adds	r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr
 8011b5c:	20001480 	.word	0x20001480
 8011b60:	2000146c 	.word	0x2000146c

08011b64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b088      	sub	sp, #32
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
 8011b6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d10d      	bne.n	8011b90 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8011b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b78:	b672      	cpsid	i
 8011b7a:	f383 8811 	msr	BASEPRI, r3
 8011b7e:	f3bf 8f6f 	isb	sy
 8011b82:	f3bf 8f4f 	dsb	sy
 8011b86:	b662      	cpsie	i
 8011b88:	613b      	str	r3, [r7, #16]
}
 8011b8a:	bf00      	nop
 8011b8c:	bf00      	nop
 8011b8e:	e7fd      	b.n	8011b8c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10d      	bne.n	8011bb2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8011b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b9a:	b672      	cpsid	i
 8011b9c:	f383 8811 	msr	BASEPRI, r3
 8011ba0:	f3bf 8f6f 	isb	sy
 8011ba4:	f3bf 8f4f 	dsb	sy
 8011ba8:	b662      	cpsie	i
 8011baa:	60fb      	str	r3, [r7, #12]
}
 8011bac:	bf00      	nop
 8011bae:	bf00      	nop
 8011bb0:	e7fd      	b.n	8011bae <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8011bb2:	f000 fc8b 	bl	80124cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8011c2c <xTaskCheckForTimeOut+0xc8>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	69ba      	ldr	r2, [r7, #24]
 8011bc2:	1ad3      	subs	r3, r2, r3
 8011bc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bce:	d102      	bne.n	8011bd6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	61fb      	str	r3, [r7, #28]
 8011bd4:	e023      	b.n	8011c1e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	4b15      	ldr	r3, [pc, #84]	@ (8011c30 <xTaskCheckForTimeOut+0xcc>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d007      	beq.n	8011bf2 <xTaskCheckForTimeOut+0x8e>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	685b      	ldr	r3, [r3, #4]
 8011be6:	69ba      	ldr	r2, [r7, #24]
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d302      	bcc.n	8011bf2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011bec:	2301      	movs	r3, #1
 8011bee:	61fb      	str	r3, [r7, #28]
 8011bf0:	e015      	b.n	8011c1e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	697a      	ldr	r2, [r7, #20]
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	d20b      	bcs.n	8011c14 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	681a      	ldr	r2, [r3, #0]
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	1ad2      	subs	r2, r2, r3
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff ff95 	bl	8011b38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011c0e:	2300      	movs	r3, #0
 8011c10:	61fb      	str	r3, [r7, #28]
 8011c12:	e004      	b.n	8011c1e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8011c14:	683b      	ldr	r3, [r7, #0]
 8011c16:	2200      	movs	r2, #0
 8011c18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011c1e:	f000 fc8b 	bl	8012538 <vPortExitCritical>

	return xReturn;
 8011c22:	69fb      	ldr	r3, [r7, #28]
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3720      	adds	r7, #32
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	2000146c 	.word	0x2000146c
 8011c30:	20001480 	.word	0x20001480

08011c34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011c34:	b480      	push	{r7}
 8011c36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011c38:	4b03      	ldr	r3, [pc, #12]	@ (8011c48 <vTaskMissedYield+0x14>)
 8011c3a:	2201      	movs	r2, #1
 8011c3c:	601a      	str	r2, [r3, #0]
}
 8011c3e:	bf00      	nop
 8011c40:	46bd      	mov	sp, r7
 8011c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c46:	4770      	bx	lr
 8011c48:	2000147c 	.word	0x2000147c

08011c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b082      	sub	sp, #8
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011c54:	f000 f852 	bl	8011cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011c58:	4b06      	ldr	r3, [pc, #24]	@ (8011c74 <prvIdleTask+0x28>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	2b01      	cmp	r3, #1
 8011c5e:	d9f9      	bls.n	8011c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011c60:	4b05      	ldr	r3, [pc, #20]	@ (8011c78 <prvIdleTask+0x2c>)
 8011c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c66:	601a      	str	r2, [r3, #0]
 8011c68:	f3bf 8f4f 	dsb	sy
 8011c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011c70:	e7f0      	b.n	8011c54 <prvIdleTask+0x8>
 8011c72:	bf00      	nop
 8011c74:	2000136c 	.word	0x2000136c
 8011c78:	e000ed04 	.word	0xe000ed04

08011c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c82:	2300      	movs	r3, #0
 8011c84:	607b      	str	r3, [r7, #4]
 8011c86:	e00c      	b.n	8011ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	009b      	lsls	r3, r3, #2
 8011c8e:	4413      	add	r3, r2
 8011c90:	009b      	lsls	r3, r3, #2
 8011c92:	4a12      	ldr	r2, [pc, #72]	@ (8011cdc <prvInitialiseTaskLists+0x60>)
 8011c94:	4413      	add	r3, r2
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7fe f9f4 	bl	8010084 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	607b      	str	r3, [r7, #4]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b06      	cmp	r3, #6
 8011ca6:	d9ef      	bls.n	8011c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011ca8:	480d      	ldr	r0, [pc, #52]	@ (8011ce0 <prvInitialiseTaskLists+0x64>)
 8011caa:	f7fe f9eb 	bl	8010084 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011cae:	480d      	ldr	r0, [pc, #52]	@ (8011ce4 <prvInitialiseTaskLists+0x68>)
 8011cb0:	f7fe f9e8 	bl	8010084 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011cb4:	480c      	ldr	r0, [pc, #48]	@ (8011ce8 <prvInitialiseTaskLists+0x6c>)
 8011cb6:	f7fe f9e5 	bl	8010084 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011cba:	480c      	ldr	r0, [pc, #48]	@ (8011cec <prvInitialiseTaskLists+0x70>)
 8011cbc:	f7fe f9e2 	bl	8010084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011cc0:	480b      	ldr	r0, [pc, #44]	@ (8011cf0 <prvInitialiseTaskLists+0x74>)
 8011cc2:	f7fe f9df 	bl	8010084 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8011cf4 <prvInitialiseTaskLists+0x78>)
 8011cc8:	4a05      	ldr	r2, [pc, #20]	@ (8011ce0 <prvInitialiseTaskLists+0x64>)
 8011cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8011cf8 <prvInitialiseTaskLists+0x7c>)
 8011cce:	4a05      	ldr	r2, [pc, #20]	@ (8011ce4 <prvInitialiseTaskLists+0x68>)
 8011cd0:	601a      	str	r2, [r3, #0]
}
 8011cd2:	bf00      	nop
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	2000136c 	.word	0x2000136c
 8011ce0:	200013f8 	.word	0x200013f8
 8011ce4:	2000140c 	.word	0x2000140c
 8011ce8:	20001428 	.word	0x20001428
 8011cec:	2000143c 	.word	0x2000143c
 8011cf0:	20001454 	.word	0x20001454
 8011cf4:	20001420 	.word	0x20001420
 8011cf8:	20001424 	.word	0x20001424

08011cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011cfc:	b580      	push	{r7, lr}
 8011cfe:	b082      	sub	sp, #8
 8011d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d02:	e019      	b.n	8011d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011d04:	f000 fbe2 	bl	80124cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d08:	4b10      	ldr	r3, [pc, #64]	@ (8011d4c <prvCheckTasksWaitingTermination+0x50>)
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	68db      	ldr	r3, [r3, #12]
 8011d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	3304      	adds	r3, #4
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fe fa3f 	bl	8010198 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8011d50 <prvCheckTasksWaitingTermination+0x54>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	3b01      	subs	r3, #1
 8011d20:	4a0b      	ldr	r2, [pc, #44]	@ (8011d50 <prvCheckTasksWaitingTermination+0x54>)
 8011d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011d24:	4b0b      	ldr	r3, [pc, #44]	@ (8011d54 <prvCheckTasksWaitingTermination+0x58>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	3b01      	subs	r3, #1
 8011d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8011d54 <prvCheckTasksWaitingTermination+0x58>)
 8011d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011d2e:	f000 fc03 	bl	8012538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f000 f810 	bl	8011d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011d38:	4b06      	ldr	r3, [pc, #24]	@ (8011d54 <prvCheckTasksWaitingTermination+0x58>)
 8011d3a:	681b      	ldr	r3, [r3, #0]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d1e1      	bne.n	8011d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011d40:	bf00      	nop
 8011d42:	bf00      	nop
 8011d44:	3708      	adds	r7, #8
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	2000143c 	.word	0x2000143c
 8011d50:	20001468 	.word	0x20001468
 8011d54:	20001450 	.word	0x20001450

08011d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b084      	sub	sp, #16
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d108      	bne.n	8011d7c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f000 fda8 	bl	80128c4 <vPortFree>
				vPortFree( pxTCB );
 8011d74:	6878      	ldr	r0, [r7, #4]
 8011d76:	f000 fda5 	bl	80128c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011d7a:	e01b      	b.n	8011db4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011d82:	2b01      	cmp	r3, #1
 8011d84:	d103      	bne.n	8011d8e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 fd9c 	bl	80128c4 <vPortFree>
	}
 8011d8c:	e012      	b.n	8011db4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8011d94:	2b02      	cmp	r3, #2
 8011d96:	d00d      	beq.n	8011db4 <prvDeleteTCB+0x5c>
	__asm volatile
 8011d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d9c:	b672      	cpsid	i
 8011d9e:	f383 8811 	msr	BASEPRI, r3
 8011da2:	f3bf 8f6f 	isb	sy
 8011da6:	f3bf 8f4f 	dsb	sy
 8011daa:	b662      	cpsie	i
 8011dac:	60fb      	str	r3, [r7, #12]
}
 8011dae:	bf00      	nop
 8011db0:	bf00      	nop
 8011db2:	e7fd      	b.n	8011db0 <prvDeleteTCB+0x58>
	}
 8011db4:	bf00      	nop
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b083      	sub	sp, #12
 8011dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8011df4 <prvResetNextTaskUnblockTime+0x38>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d104      	bne.n	8011dd6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8011df8 <prvResetNextTaskUnblockTime+0x3c>)
 8011dce:	f04f 32ff 	mov.w	r2, #4294967295
 8011dd2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011dd4:	e008      	b.n	8011de8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dd6:	4b07      	ldr	r3, [pc, #28]	@ (8011df4 <prvResetNextTaskUnblockTime+0x38>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	4a04      	ldr	r2, [pc, #16]	@ (8011df8 <prvResetNextTaskUnblockTime+0x3c>)
 8011de6:	6013      	str	r3, [r2, #0]
}
 8011de8:	bf00      	nop
 8011dea:	370c      	adds	r7, #12
 8011dec:	46bd      	mov	sp, r7
 8011dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df2:	4770      	bx	lr
 8011df4:	20001420 	.word	0x20001420
 8011df8:	20001488 	.word	0x20001488

08011dfc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011dfc:	b480      	push	{r7}
 8011dfe:	b083      	sub	sp, #12
 8011e00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011e02:	4b0b      	ldr	r3, [pc, #44]	@ (8011e30 <xTaskGetSchedulerState+0x34>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d102      	bne.n	8011e10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	607b      	str	r3, [r7, #4]
 8011e0e:	e008      	b.n	8011e22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e10:	4b08      	ldr	r3, [pc, #32]	@ (8011e34 <xTaskGetSchedulerState+0x38>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d102      	bne.n	8011e1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011e18:	2302      	movs	r3, #2
 8011e1a:	607b      	str	r3, [r7, #4]
 8011e1c:	e001      	b.n	8011e22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011e1e:	2300      	movs	r3, #0
 8011e20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011e22:	687b      	ldr	r3, [r7, #4]
	}
 8011e24:	4618      	mov	r0, r3
 8011e26:	370c      	adds	r7, #12
 8011e28:	46bd      	mov	sp, r7
 8011e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2e:	4770      	bx	lr
 8011e30:	20001474 	.word	0x20001474
 8011e34:	20001490 	.word	0x20001490

08011e38 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b084      	sub	sp, #16
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011e44:	2300      	movs	r3, #0
 8011e46:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d069      	beq.n	8011f22 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e52:	4b36      	ldr	r3, [pc, #216]	@ (8011f2c <xTaskPriorityInherit+0xf4>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d259      	bcs.n	8011f10 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	699b      	ldr	r3, [r3, #24]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	db06      	blt.n	8011e72 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e64:	4b31      	ldr	r3, [pc, #196]	@ (8011f2c <xTaskPriorityInherit+0xf4>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e6a:	f1c3 0207 	rsb	r2, r3, #7
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011e72:	68bb      	ldr	r3, [r7, #8]
 8011e74:	6959      	ldr	r1, [r3, #20]
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e7a:	4613      	mov	r3, r2
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	4413      	add	r3, r2
 8011e80:	009b      	lsls	r3, r3, #2
 8011e82:	4a2b      	ldr	r2, [pc, #172]	@ (8011f30 <xTaskPriorityInherit+0xf8>)
 8011e84:	4413      	add	r3, r2
 8011e86:	4299      	cmp	r1, r3
 8011e88:	d13a      	bne.n	8011f00 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	3304      	adds	r3, #4
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f7fe f982 	bl	8010198 <uxListRemove>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d115      	bne.n	8011ec6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e9e:	4924      	ldr	r1, [pc, #144]	@ (8011f30 <xTaskPriorityInherit+0xf8>)
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	009b      	lsls	r3, r3, #2
 8011ea4:	4413      	add	r3, r2
 8011ea6:	009b      	lsls	r3, r3, #2
 8011ea8:	440b      	add	r3, r1
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d10a      	bne.n	8011ec6 <xTaskPriorityInherit+0x8e>
 8011eb0:	68bb      	ldr	r3, [r7, #8]
 8011eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8011eba:	43da      	mvns	r2, r3
 8011ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8011f34 <xTaskPriorityInherit+0xfc>)
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	4a1c      	ldr	r2, [pc, #112]	@ (8011f34 <xTaskPriorityInherit+0xfc>)
 8011ec4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011ec6:	4b19      	ldr	r3, [pc, #100]	@ (8011f2c <xTaskPriorityInherit+0xf4>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	409a      	lsls	r2, r3
 8011ed8:	4b16      	ldr	r3, [pc, #88]	@ (8011f34 <xTaskPriorityInherit+0xfc>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4313      	orrs	r3, r2
 8011ede:	4a15      	ldr	r2, [pc, #84]	@ (8011f34 <xTaskPriorityInherit+0xfc>)
 8011ee0:	6013      	str	r3, [r2, #0]
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	009b      	lsls	r3, r3, #2
 8011eee:	4a10      	ldr	r2, [pc, #64]	@ (8011f30 <xTaskPriorityInherit+0xf8>)
 8011ef0:	441a      	add	r2, r3
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	3304      	adds	r3, #4
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	4610      	mov	r0, r2
 8011efa:	f7fe f8f0 	bl	80100de <vListInsertEnd>
 8011efe:	e004      	b.n	8011f0a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011f00:	4b0a      	ldr	r3, [pc, #40]	@ (8011f2c <xTaskPriorityInherit+0xf4>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	60fb      	str	r3, [r7, #12]
 8011f0e:	e008      	b.n	8011f22 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011f14:	4b05      	ldr	r3, [pc, #20]	@ (8011f2c <xTaskPriorityInherit+0xf4>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d201      	bcs.n	8011f22 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011f1e:	2301      	movs	r3, #1
 8011f20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011f22:	68fb      	ldr	r3, [r7, #12]
	}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3710      	adds	r7, #16
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}
 8011f2c:	20001368 	.word	0x20001368
 8011f30:	2000136c 	.word	0x2000136c
 8011f34:	20001470 	.word	0x20001470

08011f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b086      	sub	sp, #24
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011f44:	2300      	movs	r3, #0
 8011f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d074      	beq.n	8012038 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8012044 <xTaskPriorityDisinherit+0x10c>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	693a      	ldr	r2, [r7, #16]
 8011f54:	429a      	cmp	r2, r3
 8011f56:	d00d      	beq.n	8011f74 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8011f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f5c:	b672      	cpsid	i
 8011f5e:	f383 8811 	msr	BASEPRI, r3
 8011f62:	f3bf 8f6f 	isb	sy
 8011f66:	f3bf 8f4f 	dsb	sy
 8011f6a:	b662      	cpsie	i
 8011f6c:	60fb      	str	r3, [r7, #12]
}
 8011f6e:	bf00      	nop
 8011f70:	bf00      	nop
 8011f72:	e7fd      	b.n	8011f70 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d10d      	bne.n	8011f98 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8011f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f80:	b672      	cpsid	i
 8011f82:	f383 8811 	msr	BASEPRI, r3
 8011f86:	f3bf 8f6f 	isb	sy
 8011f8a:	f3bf 8f4f 	dsb	sy
 8011f8e:	b662      	cpsie	i
 8011f90:	60bb      	str	r3, [r7, #8]
}
 8011f92:	bf00      	nop
 8011f94:	bf00      	nop
 8011f96:	e7fd      	b.n	8011f94 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011f9c:	1e5a      	subs	r2, r3, #1
 8011f9e:	693b      	ldr	r3, [r7, #16]
 8011fa0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fa6:	693b      	ldr	r3, [r7, #16]
 8011fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d044      	beq.n	8012038 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d140      	bne.n	8012038 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	3304      	adds	r3, #4
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7fe f8ec 	bl	8010198 <uxListRemove>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d115      	bne.n	8011ff2 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fca:	491f      	ldr	r1, [pc, #124]	@ (8012048 <xTaskPriorityDisinherit+0x110>)
 8011fcc:	4613      	mov	r3, r2
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	440b      	add	r3, r1
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10a      	bne.n	8011ff2 <xTaskPriorityDisinherit+0xba>
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8011fe6:	43da      	mvns	r2, r3
 8011fe8:	4b18      	ldr	r3, [pc, #96]	@ (801204c <xTaskPriorityDisinherit+0x114>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4013      	ands	r3, r2
 8011fee:	4a17      	ldr	r2, [pc, #92]	@ (801204c <xTaskPriorityDisinherit+0x114>)
 8011ff0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ffe:	f1c3 0207 	rsb	r2, r3, #7
 8012002:	693b      	ldr	r3, [r7, #16]
 8012004:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012006:	693b      	ldr	r3, [r7, #16]
 8012008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801200a:	2201      	movs	r2, #1
 801200c:	409a      	lsls	r2, r3
 801200e:	4b0f      	ldr	r3, [pc, #60]	@ (801204c <xTaskPriorityDisinherit+0x114>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	4313      	orrs	r3, r2
 8012014:	4a0d      	ldr	r2, [pc, #52]	@ (801204c <xTaskPriorityDisinherit+0x114>)
 8012016:	6013      	str	r3, [r2, #0]
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801201c:	4613      	mov	r3, r2
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	4413      	add	r3, r2
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	4a08      	ldr	r2, [pc, #32]	@ (8012048 <xTaskPriorityDisinherit+0x110>)
 8012026:	441a      	add	r2, r3
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	3304      	adds	r3, #4
 801202c:	4619      	mov	r1, r3
 801202e:	4610      	mov	r0, r2
 8012030:	f7fe f855 	bl	80100de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012034:	2301      	movs	r3, #1
 8012036:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012038:	697b      	ldr	r3, [r7, #20]
	}
 801203a:	4618      	mov	r0, r3
 801203c:	3718      	adds	r7, #24
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	20001368 	.word	0x20001368
 8012048:	2000136c 	.word	0x2000136c
 801204c:	20001470 	.word	0x20001470

08012050 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801205e:	2301      	movs	r3, #1
 8012060:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	2b00      	cmp	r3, #0
 8012066:	f000 8089 	beq.w	801217c <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801206e:	2b00      	cmp	r3, #0
 8012070:	d10d      	bne.n	801208e <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 8012072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012076:	b672      	cpsid	i
 8012078:	f383 8811 	msr	BASEPRI, r3
 801207c:	f3bf 8f6f 	isb	sy
 8012080:	f3bf 8f4f 	dsb	sy
 8012084:	b662      	cpsie	i
 8012086:	60fb      	str	r3, [r7, #12]
}
 8012088:	bf00      	nop
 801208a:	bf00      	nop
 801208c:	e7fd      	b.n	801208a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012092:	683a      	ldr	r2, [r7, #0]
 8012094:	429a      	cmp	r2, r3
 8012096:	d902      	bls.n	801209e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	61fb      	str	r3, [r7, #28]
 801209c:	e002      	b.n	80120a4 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80120a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80120a4:	69bb      	ldr	r3, [r7, #24]
 80120a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120a8:	69fa      	ldr	r2, [r7, #28]
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d066      	beq.n	801217c <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80120ae:	69bb      	ldr	r3, [r7, #24]
 80120b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80120b2:	697a      	ldr	r2, [r7, #20]
 80120b4:	429a      	cmp	r2, r3
 80120b6:	d161      	bne.n	801217c <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80120b8:	4b32      	ldr	r3, [pc, #200]	@ (8012184 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	69ba      	ldr	r2, [r7, #24]
 80120be:	429a      	cmp	r2, r3
 80120c0:	d10d      	bne.n	80120de <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80120c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120c6:	b672      	cpsid	i
 80120c8:	f383 8811 	msr	BASEPRI, r3
 80120cc:	f3bf 8f6f 	isb	sy
 80120d0:	f3bf 8f4f 	dsb	sy
 80120d4:	b662      	cpsie	i
 80120d6:	60bb      	str	r3, [r7, #8]
}
 80120d8:	bf00      	nop
 80120da:	bf00      	nop
 80120dc:	e7fd      	b.n	80120da <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120e2:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80120e4:	69bb      	ldr	r3, [r7, #24]
 80120e6:	69fa      	ldr	r2, [r7, #28]
 80120e8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80120ea:	69bb      	ldr	r3, [r7, #24]
 80120ec:	699b      	ldr	r3, [r3, #24]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	db04      	blt.n	80120fc <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	f1c3 0207 	rsb	r2, r3, #7
 80120f8:	69bb      	ldr	r3, [r7, #24]
 80120fa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	6959      	ldr	r1, [r3, #20]
 8012100:	693a      	ldr	r2, [r7, #16]
 8012102:	4613      	mov	r3, r2
 8012104:	009b      	lsls	r3, r3, #2
 8012106:	4413      	add	r3, r2
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4a1f      	ldr	r2, [pc, #124]	@ (8012188 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801210c:	4413      	add	r3, r2
 801210e:	4299      	cmp	r1, r3
 8012110:	d134      	bne.n	801217c <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	3304      	adds	r3, #4
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe f83e 	bl	8010198 <uxListRemove>
 801211c:	4603      	mov	r3, r0
 801211e:	2b00      	cmp	r3, #0
 8012120:	d115      	bne.n	801214e <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012126:	4918      	ldr	r1, [pc, #96]	@ (8012188 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012128:	4613      	mov	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10a      	bne.n	801214e <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801213c:	2201      	movs	r2, #1
 801213e:	fa02 f303 	lsl.w	r3, r2, r3
 8012142:	43da      	mvns	r2, r3
 8012144:	4b11      	ldr	r3, [pc, #68]	@ (801218c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	4013      	ands	r3, r2
 801214a:	4a10      	ldr	r2, [pc, #64]	@ (801218c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801214c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012152:	2201      	movs	r2, #1
 8012154:	409a      	lsls	r2, r3
 8012156:	4b0d      	ldr	r3, [pc, #52]	@ (801218c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	4313      	orrs	r3, r2
 801215c:	4a0b      	ldr	r2, [pc, #44]	@ (801218c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801215e:	6013      	str	r3, [r2, #0]
 8012160:	69bb      	ldr	r3, [r7, #24]
 8012162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012164:	4613      	mov	r3, r2
 8012166:	009b      	lsls	r3, r3, #2
 8012168:	4413      	add	r3, r2
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	4a06      	ldr	r2, [pc, #24]	@ (8012188 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801216e:	441a      	add	r2, r3
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	3304      	adds	r3, #4
 8012174:	4619      	mov	r1, r3
 8012176:	4610      	mov	r0, r2
 8012178:	f7fd ffb1 	bl	80100de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801217c:	bf00      	nop
 801217e:	3720      	adds	r7, #32
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	20001368 	.word	0x20001368
 8012188:	2000136c 	.word	0x2000136c
 801218c:	20001470 	.word	0x20001470

08012190 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8012190:	b480      	push	{r7}
 8012192:	b083      	sub	sp, #12
 8012194:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8012196:	4b09      	ldr	r3, [pc, #36]	@ (80121bc <uxTaskResetEventItemValue+0x2c>)
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	699b      	ldr	r3, [r3, #24]
 801219c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801219e:	4b07      	ldr	r3, [pc, #28]	@ (80121bc <uxTaskResetEventItemValue+0x2c>)
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121a4:	4b05      	ldr	r3, [pc, #20]	@ (80121bc <uxTaskResetEventItemValue+0x2c>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	f1c2 0207 	rsb	r2, r2, #7
 80121ac:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80121ae:	687b      	ldr	r3, [r7, #4]
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	370c      	adds	r7, #12
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr
 80121bc:	20001368 	.word	0x20001368

080121c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80121c0:	b480      	push	{r7}
 80121c2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80121c4:	4b07      	ldr	r3, [pc, #28]	@ (80121e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d004      	beq.n	80121d6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80121cc:	4b05      	ldr	r3, [pc, #20]	@ (80121e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80121d2:	3201      	adds	r2, #1
 80121d4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80121d6:	4b03      	ldr	r3, [pc, #12]	@ (80121e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80121d8:	681b      	ldr	r3, [r3, #0]
	}
 80121da:	4618      	mov	r0, r3
 80121dc:	46bd      	mov	sp, r7
 80121de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e2:	4770      	bx	lr
 80121e4:	20001368 	.word	0x20001368

080121e8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121f2:	4b29      	ldr	r3, [pc, #164]	@ (8012298 <prvAddCurrentTaskToDelayedList+0xb0>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121f8:	4b28      	ldr	r3, [pc, #160]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3304      	adds	r3, #4
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fd ffca 	bl	8010198 <uxListRemove>
 8012204:	4603      	mov	r3, r0
 8012206:	2b00      	cmp	r3, #0
 8012208:	d10b      	bne.n	8012222 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801220a:	4b24      	ldr	r3, [pc, #144]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012210:	2201      	movs	r2, #1
 8012212:	fa02 f303 	lsl.w	r3, r2, r3
 8012216:	43da      	mvns	r2, r3
 8012218:	4b21      	ldr	r3, [pc, #132]	@ (80122a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	4013      	ands	r3, r2
 801221e:	4a20      	ldr	r2, [pc, #128]	@ (80122a0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012220:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012228:	d10a      	bne.n	8012240 <prvAddCurrentTaskToDelayedList+0x58>
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d007      	beq.n	8012240 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012230:	4b1a      	ldr	r3, [pc, #104]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	3304      	adds	r3, #4
 8012236:	4619      	mov	r1, r3
 8012238:	481a      	ldr	r0, [pc, #104]	@ (80122a4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801223a:	f7fd ff50 	bl	80100de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801223e:	e026      	b.n	801228e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012240:	68fa      	ldr	r2, [r7, #12]
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	4413      	add	r3, r2
 8012246:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012248:	4b14      	ldr	r3, [pc, #80]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012250:	68ba      	ldr	r2, [r7, #8]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	429a      	cmp	r2, r3
 8012256:	d209      	bcs.n	801226c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012258:	4b13      	ldr	r3, [pc, #76]	@ (80122a8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801225a:	681a      	ldr	r2, [r3, #0]
 801225c:	4b0f      	ldr	r3, [pc, #60]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	3304      	adds	r3, #4
 8012262:	4619      	mov	r1, r3
 8012264:	4610      	mov	r0, r2
 8012266:	f7fd ff5e 	bl	8010126 <vListInsert>
}
 801226a:	e010      	b.n	801228e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801226c:	4b0f      	ldr	r3, [pc, #60]	@ (80122ac <prvAddCurrentTaskToDelayedList+0xc4>)
 801226e:	681a      	ldr	r2, [r3, #0]
 8012270:	4b0a      	ldr	r3, [pc, #40]	@ (801229c <prvAddCurrentTaskToDelayedList+0xb4>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	3304      	adds	r3, #4
 8012276:	4619      	mov	r1, r3
 8012278:	4610      	mov	r0, r2
 801227a:	f7fd ff54 	bl	8010126 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801227e:	4b0c      	ldr	r3, [pc, #48]	@ (80122b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	68ba      	ldr	r2, [r7, #8]
 8012284:	429a      	cmp	r2, r3
 8012286:	d202      	bcs.n	801228e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012288:	4a09      	ldr	r2, [pc, #36]	@ (80122b0 <prvAddCurrentTaskToDelayedList+0xc8>)
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	6013      	str	r3, [r2, #0]
}
 801228e:	bf00      	nop
 8012290:	3710      	adds	r7, #16
 8012292:	46bd      	mov	sp, r7
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	2000146c 	.word	0x2000146c
 801229c:	20001368 	.word	0x20001368
 80122a0:	20001470 	.word	0x20001470
 80122a4:	20001454 	.word	0x20001454
 80122a8:	20001424 	.word	0x20001424
 80122ac:	20001420 	.word	0x20001420
 80122b0:	20001488 	.word	0x20001488

080122b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80122b4:	b480      	push	{r7}
 80122b6:	b085      	sub	sp, #20
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	60f8      	str	r0, [r7, #12]
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	3b04      	subs	r3, #4
 80122c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80122cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	3b04      	subs	r3, #4
 80122d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	f023 0201 	bic.w	r2, r3, #1
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	3b04      	subs	r3, #4
 80122e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80122e4:	4a0c      	ldr	r2, [pc, #48]	@ (8012318 <pxPortInitialiseStack+0x64>)
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	3b14      	subs	r3, #20
 80122ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80122f0:	687a      	ldr	r2, [r7, #4]
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	3b04      	subs	r3, #4
 80122fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f06f 0202 	mvn.w	r2, #2
 8012302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	3b20      	subs	r3, #32
 8012308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801230a:	68fb      	ldr	r3, [r7, #12]
}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr
 8012318:	0801231d 	.word	0x0801231d

0801231c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801231c:	b480      	push	{r7}
 801231e:	b085      	sub	sp, #20
 8012320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012322:	2300      	movs	r3, #0
 8012324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012326:	4b15      	ldr	r3, [pc, #84]	@ (801237c <prvTaskExitError+0x60>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232e:	d00d      	beq.n	801234c <prvTaskExitError+0x30>
	__asm volatile
 8012330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012334:	b672      	cpsid	i
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	b662      	cpsie	i
 8012344:	60fb      	str	r3, [r7, #12]
}
 8012346:	bf00      	nop
 8012348:	bf00      	nop
 801234a:	e7fd      	b.n	8012348 <prvTaskExitError+0x2c>
	__asm volatile
 801234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012350:	b672      	cpsid	i
 8012352:	f383 8811 	msr	BASEPRI, r3
 8012356:	f3bf 8f6f 	isb	sy
 801235a:	f3bf 8f4f 	dsb	sy
 801235e:	b662      	cpsie	i
 8012360:	60bb      	str	r3, [r7, #8]
}
 8012362:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012364:	bf00      	nop
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d0fc      	beq.n	8012366 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801236c:	bf00      	nop
 801236e:	bf00      	nop
 8012370:	3714      	adds	r7, #20
 8012372:	46bd      	mov	sp, r7
 8012374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop
 801237c:	20000078 	.word	0x20000078

08012380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012380:	4b07      	ldr	r3, [pc, #28]	@ (80123a0 <pxCurrentTCBConst2>)
 8012382:	6819      	ldr	r1, [r3, #0]
 8012384:	6808      	ldr	r0, [r1, #0]
 8012386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	f380 8809 	msr	PSP, r0
 801238e:	f3bf 8f6f 	isb	sy
 8012392:	f04f 0000 	mov.w	r0, #0
 8012396:	f380 8811 	msr	BASEPRI, r0
 801239a:	4770      	bx	lr
 801239c:	f3af 8000 	nop.w

080123a0 <pxCurrentTCBConst2>:
 80123a0:	20001368 	.word	0x20001368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80123a4:	bf00      	nop
 80123a6:	bf00      	nop

080123a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80123a8:	4808      	ldr	r0, [pc, #32]	@ (80123cc <prvPortStartFirstTask+0x24>)
 80123aa:	6800      	ldr	r0, [r0, #0]
 80123ac:	6800      	ldr	r0, [r0, #0]
 80123ae:	f380 8808 	msr	MSP, r0
 80123b2:	f04f 0000 	mov.w	r0, #0
 80123b6:	f380 8814 	msr	CONTROL, r0
 80123ba:	b662      	cpsie	i
 80123bc:	b661      	cpsie	f
 80123be:	f3bf 8f4f 	dsb	sy
 80123c2:	f3bf 8f6f 	isb	sy
 80123c6:	df00      	svc	0
 80123c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80123ca:	bf00      	nop
 80123cc:	e000ed08 	.word	0xe000ed08

080123d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80123d6:	4b37      	ldr	r3, [pc, #220]	@ (80124b4 <xPortStartScheduler+0xe4>)
 80123d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	22ff      	movs	r2, #255	@ 0xff
 80123e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	b2db      	uxtb	r3, r3
 80123ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80123f0:	78fb      	ldrb	r3, [r7, #3]
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	4b2f      	ldr	r3, [pc, #188]	@ (80124b8 <xPortStartScheduler+0xe8>)
 80123fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80123fe:	4b2f      	ldr	r3, [pc, #188]	@ (80124bc <xPortStartScheduler+0xec>)
 8012400:	2207      	movs	r2, #7
 8012402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012404:	e009      	b.n	801241a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012406:	4b2d      	ldr	r3, [pc, #180]	@ (80124bc <xPortStartScheduler+0xec>)
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	3b01      	subs	r3, #1
 801240c:	4a2b      	ldr	r2, [pc, #172]	@ (80124bc <xPortStartScheduler+0xec>)
 801240e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012410:	78fb      	ldrb	r3, [r7, #3]
 8012412:	b2db      	uxtb	r3, r3
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	b2db      	uxtb	r3, r3
 8012418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801241a:	78fb      	ldrb	r3, [r7, #3]
 801241c:	b2db      	uxtb	r3, r3
 801241e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012422:	2b80      	cmp	r3, #128	@ 0x80
 8012424:	d0ef      	beq.n	8012406 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012426:	4b25      	ldr	r3, [pc, #148]	@ (80124bc <xPortStartScheduler+0xec>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	f1c3 0307 	rsb	r3, r3, #7
 801242e:	2b04      	cmp	r3, #4
 8012430:	d00d      	beq.n	801244e <xPortStartScheduler+0x7e>
	__asm volatile
 8012432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012436:	b672      	cpsid	i
 8012438:	f383 8811 	msr	BASEPRI, r3
 801243c:	f3bf 8f6f 	isb	sy
 8012440:	f3bf 8f4f 	dsb	sy
 8012444:	b662      	cpsie	i
 8012446:	60bb      	str	r3, [r7, #8]
}
 8012448:	bf00      	nop
 801244a:	bf00      	nop
 801244c:	e7fd      	b.n	801244a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801244e:	4b1b      	ldr	r3, [pc, #108]	@ (80124bc <xPortStartScheduler+0xec>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	021b      	lsls	r3, r3, #8
 8012454:	4a19      	ldr	r2, [pc, #100]	@ (80124bc <xPortStartScheduler+0xec>)
 8012456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012458:	4b18      	ldr	r3, [pc, #96]	@ (80124bc <xPortStartScheduler+0xec>)
 801245a:	681b      	ldr	r3, [r3, #0]
 801245c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012460:	4a16      	ldr	r2, [pc, #88]	@ (80124bc <xPortStartScheduler+0xec>)
 8012462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	b2da      	uxtb	r2, r3
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801246c:	4b14      	ldr	r3, [pc, #80]	@ (80124c0 <xPortStartScheduler+0xf0>)
 801246e:	681b      	ldr	r3, [r3, #0]
 8012470:	4a13      	ldr	r2, [pc, #76]	@ (80124c0 <xPortStartScheduler+0xf0>)
 8012472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012478:	4b11      	ldr	r3, [pc, #68]	@ (80124c0 <xPortStartScheduler+0xf0>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a10      	ldr	r2, [pc, #64]	@ (80124c0 <xPortStartScheduler+0xf0>)
 801247e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012484:	f000 f8dc 	bl	8012640 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012488:	4b0e      	ldr	r3, [pc, #56]	@ (80124c4 <xPortStartScheduler+0xf4>)
 801248a:	2200      	movs	r2, #0
 801248c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801248e:	f000 f8fb 	bl	8012688 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012492:	4b0d      	ldr	r3, [pc, #52]	@ (80124c8 <xPortStartScheduler+0xf8>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	4a0c      	ldr	r2, [pc, #48]	@ (80124c8 <xPortStartScheduler+0xf8>)
 8012498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801249c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801249e:	f7ff ff83 	bl	80123a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80124a2:	f7ff f98d 	bl	80117c0 <vTaskSwitchContext>
	prvTaskExitError();
 80124a6:	f7ff ff39 	bl	801231c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3710      	adds	r7, #16
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}
 80124b4:	e000e400 	.word	0xe000e400
 80124b8:	20001494 	.word	0x20001494
 80124bc:	20001498 	.word	0x20001498
 80124c0:	e000ed20 	.word	0xe000ed20
 80124c4:	20000078 	.word	0x20000078
 80124c8:	e000ef34 	.word	0xe000ef34

080124cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
	__asm volatile
 80124d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124d6:	b672      	cpsid	i
 80124d8:	f383 8811 	msr	BASEPRI, r3
 80124dc:	f3bf 8f6f 	isb	sy
 80124e0:	f3bf 8f4f 	dsb	sy
 80124e4:	b662      	cpsie	i
 80124e6:	607b      	str	r3, [r7, #4]
}
 80124e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80124ea:	4b11      	ldr	r3, [pc, #68]	@ (8012530 <vPortEnterCritical+0x64>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	3301      	adds	r3, #1
 80124f0:	4a0f      	ldr	r2, [pc, #60]	@ (8012530 <vPortEnterCritical+0x64>)
 80124f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80124f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012530 <vPortEnterCritical+0x64>)
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d112      	bne.n	8012522 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80124fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012534 <vPortEnterCritical+0x68>)
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	b2db      	uxtb	r3, r3
 8012502:	2b00      	cmp	r3, #0
 8012504:	d00d      	beq.n	8012522 <vPortEnterCritical+0x56>
	__asm volatile
 8012506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801250a:	b672      	cpsid	i
 801250c:	f383 8811 	msr	BASEPRI, r3
 8012510:	f3bf 8f6f 	isb	sy
 8012514:	f3bf 8f4f 	dsb	sy
 8012518:	b662      	cpsie	i
 801251a:	603b      	str	r3, [r7, #0]
}
 801251c:	bf00      	nop
 801251e:	bf00      	nop
 8012520:	e7fd      	b.n	801251e <vPortEnterCritical+0x52>
	}
}
 8012522:	bf00      	nop
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop
 8012530:	20000078 	.word	0x20000078
 8012534:	e000ed04 	.word	0xe000ed04

08012538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801253e:	4b13      	ldr	r3, [pc, #76]	@ (801258c <vPortExitCritical+0x54>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10d      	bne.n	8012562 <vPortExitCritical+0x2a>
	__asm volatile
 8012546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801254a:	b672      	cpsid	i
 801254c:	f383 8811 	msr	BASEPRI, r3
 8012550:	f3bf 8f6f 	isb	sy
 8012554:	f3bf 8f4f 	dsb	sy
 8012558:	b662      	cpsie	i
 801255a:	607b      	str	r3, [r7, #4]
}
 801255c:	bf00      	nop
 801255e:	bf00      	nop
 8012560:	e7fd      	b.n	801255e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012562:	4b0a      	ldr	r3, [pc, #40]	@ (801258c <vPortExitCritical+0x54>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	3b01      	subs	r3, #1
 8012568:	4a08      	ldr	r2, [pc, #32]	@ (801258c <vPortExitCritical+0x54>)
 801256a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801256c:	4b07      	ldr	r3, [pc, #28]	@ (801258c <vPortExitCritical+0x54>)
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d105      	bne.n	8012580 <vPortExitCritical+0x48>
 8012574:	2300      	movs	r3, #0
 8012576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	f383 8811 	msr	BASEPRI, r3
}
 801257e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012580:	bf00      	nop
 8012582:	370c      	adds	r7, #12
 8012584:	46bd      	mov	sp, r7
 8012586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258a:	4770      	bx	lr
 801258c:	20000078 	.word	0x20000078

08012590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012590:	f3ef 8009 	mrs	r0, PSP
 8012594:	f3bf 8f6f 	isb	sy
 8012598:	4b15      	ldr	r3, [pc, #84]	@ (80125f0 <pxCurrentTCBConst>)
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	f01e 0f10 	tst.w	lr, #16
 80125a0:	bf08      	it	eq
 80125a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80125a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125aa:	6010      	str	r0, [r2, #0]
 80125ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80125b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80125b4:	b672      	cpsid	i
 80125b6:	f380 8811 	msr	BASEPRI, r0
 80125ba:	f3bf 8f4f 	dsb	sy
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	b662      	cpsie	i
 80125c4:	f7ff f8fc 	bl	80117c0 <vTaskSwitchContext>
 80125c8:	f04f 0000 	mov.w	r0, #0
 80125cc:	f380 8811 	msr	BASEPRI, r0
 80125d0:	bc09      	pop	{r0, r3}
 80125d2:	6819      	ldr	r1, [r3, #0]
 80125d4:	6808      	ldr	r0, [r1, #0]
 80125d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125da:	f01e 0f10 	tst.w	lr, #16
 80125de:	bf08      	it	eq
 80125e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80125e4:	f380 8809 	msr	PSP, r0
 80125e8:	f3bf 8f6f 	isb	sy
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop

080125f0 <pxCurrentTCBConst>:
 80125f0:	20001368 	.word	0x20001368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80125f4:	bf00      	nop
 80125f6:	bf00      	nop

080125f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
	__asm volatile
 80125fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012602:	b672      	cpsid	i
 8012604:	f383 8811 	msr	BASEPRI, r3
 8012608:	f3bf 8f6f 	isb	sy
 801260c:	f3bf 8f4f 	dsb	sy
 8012610:	b662      	cpsie	i
 8012612:	607b      	str	r3, [r7, #4]
}
 8012614:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012616:	f7ff f817 	bl	8011648 <xTaskIncrementTick>
 801261a:	4603      	mov	r3, r0
 801261c:	2b00      	cmp	r3, #0
 801261e:	d003      	beq.n	8012628 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012620:	4b06      	ldr	r3, [pc, #24]	@ (801263c <SysTick_Handler+0x44>)
 8012622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012626:	601a      	str	r2, [r3, #0]
 8012628:	2300      	movs	r3, #0
 801262a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	f383 8811 	msr	BASEPRI, r3
}
 8012632:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012634:	bf00      	nop
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}
 801263c:	e000ed04 	.word	0xe000ed04

08012640 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012640:	b480      	push	{r7}
 8012642:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012644:	4b0b      	ldr	r3, [pc, #44]	@ (8012674 <vPortSetupTimerInterrupt+0x34>)
 8012646:	2200      	movs	r2, #0
 8012648:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801264a:	4b0b      	ldr	r3, [pc, #44]	@ (8012678 <vPortSetupTimerInterrupt+0x38>)
 801264c:	2200      	movs	r2, #0
 801264e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012650:	4b0a      	ldr	r3, [pc, #40]	@ (801267c <vPortSetupTimerInterrupt+0x3c>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	4a0a      	ldr	r2, [pc, #40]	@ (8012680 <vPortSetupTimerInterrupt+0x40>)
 8012656:	fba2 2303 	umull	r2, r3, r2, r3
 801265a:	099b      	lsrs	r3, r3, #6
 801265c:	4a09      	ldr	r2, [pc, #36]	@ (8012684 <vPortSetupTimerInterrupt+0x44>)
 801265e:	3b01      	subs	r3, #1
 8012660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012662:	4b04      	ldr	r3, [pc, #16]	@ (8012674 <vPortSetupTimerInterrupt+0x34>)
 8012664:	2207      	movs	r2, #7
 8012666:	601a      	str	r2, [r3, #0]
}
 8012668:	bf00      	nop
 801266a:	46bd      	mov	sp, r7
 801266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012670:	4770      	bx	lr
 8012672:	bf00      	nop
 8012674:	e000e010 	.word	0xe000e010
 8012678:	e000e018 	.word	0xe000e018
 801267c:	20000054 	.word	0x20000054
 8012680:	10624dd3 	.word	0x10624dd3
 8012684:	e000e014 	.word	0xe000e014

08012688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012688:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012698 <vPortEnableVFP+0x10>
 801268c:	6801      	ldr	r1, [r0, #0]
 801268e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012692:	6001      	str	r1, [r0, #0]
 8012694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012696:	bf00      	nop
 8012698:	e000ed88 	.word	0xe000ed88

0801269c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801269c:	b480      	push	{r7}
 801269e:	b085      	sub	sp, #20
 80126a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80126a2:	f3ef 8305 	mrs	r3, IPSR
 80126a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	2b0f      	cmp	r3, #15
 80126ac:	d917      	bls.n	80126de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80126ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012718 <vPortValidateInterruptPriority+0x7c>)
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	4413      	add	r3, r2
 80126b4:	781b      	ldrb	r3, [r3, #0]
 80126b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80126b8:	4b18      	ldr	r3, [pc, #96]	@ (801271c <vPortValidateInterruptPriority+0x80>)
 80126ba:	781b      	ldrb	r3, [r3, #0]
 80126bc:	7afa      	ldrb	r2, [r7, #11]
 80126be:	429a      	cmp	r2, r3
 80126c0:	d20d      	bcs.n	80126de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80126c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c6:	b672      	cpsid	i
 80126c8:	f383 8811 	msr	BASEPRI, r3
 80126cc:	f3bf 8f6f 	isb	sy
 80126d0:	f3bf 8f4f 	dsb	sy
 80126d4:	b662      	cpsie	i
 80126d6:	607b      	str	r3, [r7, #4]
}
 80126d8:	bf00      	nop
 80126da:	bf00      	nop
 80126dc:	e7fd      	b.n	80126da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80126de:	4b10      	ldr	r3, [pc, #64]	@ (8012720 <vPortValidateInterruptPriority+0x84>)
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80126e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012724 <vPortValidateInterruptPriority+0x88>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d90d      	bls.n	801270a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80126ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f2:	b672      	cpsid	i
 80126f4:	f383 8811 	msr	BASEPRI, r3
 80126f8:	f3bf 8f6f 	isb	sy
 80126fc:	f3bf 8f4f 	dsb	sy
 8012700:	b662      	cpsie	i
 8012702:	603b      	str	r3, [r7, #0]
}
 8012704:	bf00      	nop
 8012706:	bf00      	nop
 8012708:	e7fd      	b.n	8012706 <vPortValidateInterruptPriority+0x6a>
	}
 801270a:	bf00      	nop
 801270c:	3714      	adds	r7, #20
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	e000e3f0 	.word	0xe000e3f0
 801271c:	20001494 	.word	0x20001494
 8012720:	e000ed0c 	.word	0xe000ed0c
 8012724:	20001498 	.word	0x20001498

08012728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08a      	sub	sp, #40	@ 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012730:	2300      	movs	r3, #0
 8012732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012734:	f7fe feca 	bl	80114cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012738:	4b5d      	ldr	r3, [pc, #372]	@ (80128b0 <pvPortMalloc+0x188>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012740:	f000 f920 	bl	8012984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012744:	4b5b      	ldr	r3, [pc, #364]	@ (80128b4 <pvPortMalloc+0x18c>)
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	4013      	ands	r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	f040 8094 	bne.w	801287a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d020      	beq.n	801279a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012758:	2208      	movs	r2, #8
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	4413      	add	r3, r2
 801275e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f003 0307 	and.w	r3, r3, #7
 8012766:	2b00      	cmp	r3, #0
 8012768:	d017      	beq.n	801279a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f023 0307 	bic.w	r3, r3, #7
 8012770:	3308      	adds	r3, #8
 8012772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f003 0307 	and.w	r3, r3, #7
 801277a:	2b00      	cmp	r3, #0
 801277c:	d00d      	beq.n	801279a <pvPortMalloc+0x72>
	__asm volatile
 801277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012782:	b672      	cpsid	i
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	b662      	cpsie	i
 8012792:	617b      	str	r3, [r7, #20]
}
 8012794:	bf00      	nop
 8012796:	bf00      	nop
 8012798:	e7fd      	b.n	8012796 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d06c      	beq.n	801287a <pvPortMalloc+0x152>
 80127a0:	4b45      	ldr	r3, [pc, #276]	@ (80128b8 <pvPortMalloc+0x190>)
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	687a      	ldr	r2, [r7, #4]
 80127a6:	429a      	cmp	r2, r3
 80127a8:	d867      	bhi.n	801287a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80127aa:	4b44      	ldr	r3, [pc, #272]	@ (80128bc <pvPortMalloc+0x194>)
 80127ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80127ae:	4b43      	ldr	r3, [pc, #268]	@ (80128bc <pvPortMalloc+0x194>)
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127b4:	e004      	b.n	80127c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80127b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80127ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80127c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127c2:	685b      	ldr	r3, [r3, #4]
 80127c4:	687a      	ldr	r2, [r7, #4]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d903      	bls.n	80127d2 <pvPortMalloc+0xaa>
 80127ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1f1      	bne.n	80127b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80127d2:	4b37      	ldr	r3, [pc, #220]	@ (80128b0 <pvPortMalloc+0x188>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127d8:	429a      	cmp	r2, r3
 80127da:	d04e      	beq.n	801287a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80127dc:	6a3b      	ldr	r3, [r7, #32]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	2208      	movs	r2, #8
 80127e2:	4413      	add	r3, r2
 80127e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80127e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127e8:	681a      	ldr	r2, [r3, #0]
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80127ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80127f0:	685a      	ldr	r2, [r3, #4]
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	1ad2      	subs	r2, r2, r3
 80127f6:	2308      	movs	r3, #8
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d922      	bls.n	8012844 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80127fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	4413      	add	r3, r2
 8012804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012806:	69bb      	ldr	r3, [r7, #24]
 8012808:	f003 0307 	and.w	r3, r3, #7
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00d      	beq.n	801282c <pvPortMalloc+0x104>
	__asm volatile
 8012810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012814:	b672      	cpsid	i
 8012816:	f383 8811 	msr	BASEPRI, r3
 801281a:	f3bf 8f6f 	isb	sy
 801281e:	f3bf 8f4f 	dsb	sy
 8012822:	b662      	cpsie	i
 8012824:	613b      	str	r3, [r7, #16]
}
 8012826:	bf00      	nop
 8012828:	bf00      	nop
 801282a:	e7fd      	b.n	8012828 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282e:	685a      	ldr	r2, [r3, #4]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	1ad2      	subs	r2, r2, r3
 8012834:	69bb      	ldr	r3, [r7, #24]
 8012836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801283e:	69b8      	ldr	r0, [r7, #24]
 8012840:	f000 f902 	bl	8012a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012844:	4b1c      	ldr	r3, [pc, #112]	@ (80128b8 <pvPortMalloc+0x190>)
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801284a:	685b      	ldr	r3, [r3, #4]
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	4a1a      	ldr	r2, [pc, #104]	@ (80128b8 <pvPortMalloc+0x190>)
 8012850:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012852:	4b19      	ldr	r3, [pc, #100]	@ (80128b8 <pvPortMalloc+0x190>)
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	4b1a      	ldr	r3, [pc, #104]	@ (80128c0 <pvPortMalloc+0x198>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	429a      	cmp	r2, r3
 801285c:	d203      	bcs.n	8012866 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801285e:	4b16      	ldr	r3, [pc, #88]	@ (80128b8 <pvPortMalloc+0x190>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	4a17      	ldr	r2, [pc, #92]	@ (80128c0 <pvPortMalloc+0x198>)
 8012864:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012868:	685a      	ldr	r2, [r3, #4]
 801286a:	4b12      	ldr	r3, [pc, #72]	@ (80128b4 <pvPortMalloc+0x18c>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	431a      	orrs	r2, r3
 8012870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012872:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012876:	2200      	movs	r2, #0
 8012878:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801287a:	f7fe fe35 	bl	80114e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801287e:	69fb      	ldr	r3, [r7, #28]
 8012880:	f003 0307 	and.w	r3, r3, #7
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00d      	beq.n	80128a4 <pvPortMalloc+0x17c>
	__asm volatile
 8012888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801288c:	b672      	cpsid	i
 801288e:	f383 8811 	msr	BASEPRI, r3
 8012892:	f3bf 8f6f 	isb	sy
 8012896:	f3bf 8f4f 	dsb	sy
 801289a:	b662      	cpsie	i
 801289c:	60fb      	str	r3, [r7, #12]
}
 801289e:	bf00      	nop
 80128a0:	bf00      	nop
 80128a2:	e7fd      	b.n	80128a0 <pvPortMalloc+0x178>
	return pvReturn;
 80128a4:	69fb      	ldr	r3, [r7, #28]
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3728      	adds	r7, #40	@ 0x28
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	200094a4 	.word	0x200094a4
 80128b4:	200094b0 	.word	0x200094b0
 80128b8:	200094a8 	.word	0x200094a8
 80128bc:	2000949c 	.word	0x2000949c
 80128c0:	200094ac 	.word	0x200094ac

080128c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b086      	sub	sp, #24
 80128c8:	af00      	add	r7, sp, #0
 80128ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d04e      	beq.n	8012974 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80128d6:	2308      	movs	r3, #8
 80128d8:	425b      	negs	r3, r3
 80128da:	697a      	ldr	r2, [r7, #20]
 80128dc:	4413      	add	r3, r2
 80128de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80128e4:	693b      	ldr	r3, [r7, #16]
 80128e6:	685a      	ldr	r2, [r3, #4]
 80128e8:	4b24      	ldr	r3, [pc, #144]	@ (801297c <vPortFree+0xb8>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	4013      	ands	r3, r2
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d10d      	bne.n	801290e <vPortFree+0x4a>
	__asm volatile
 80128f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f6:	b672      	cpsid	i
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	b662      	cpsie	i
 8012906:	60fb      	str	r3, [r7, #12]
}
 8012908:	bf00      	nop
 801290a:	bf00      	nop
 801290c:	e7fd      	b.n	801290a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d00d      	beq.n	8012932 <vPortFree+0x6e>
	__asm volatile
 8012916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801291a:	b672      	cpsid	i
 801291c:	f383 8811 	msr	BASEPRI, r3
 8012920:	f3bf 8f6f 	isb	sy
 8012924:	f3bf 8f4f 	dsb	sy
 8012928:	b662      	cpsie	i
 801292a:	60bb      	str	r3, [r7, #8]
}
 801292c:	bf00      	nop
 801292e:	bf00      	nop
 8012930:	e7fd      	b.n	801292e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	685a      	ldr	r2, [r3, #4]
 8012936:	4b11      	ldr	r3, [pc, #68]	@ (801297c <vPortFree+0xb8>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	4013      	ands	r3, r2
 801293c:	2b00      	cmp	r3, #0
 801293e:	d019      	beq.n	8012974 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d115      	bne.n	8012974 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012948:	693b      	ldr	r3, [r7, #16]
 801294a:	685a      	ldr	r2, [r3, #4]
 801294c:	4b0b      	ldr	r3, [pc, #44]	@ (801297c <vPortFree+0xb8>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	43db      	mvns	r3, r3
 8012952:	401a      	ands	r2, r3
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012958:	f7fe fdb8 	bl	80114cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801295c:	693b      	ldr	r3, [r7, #16]
 801295e:	685a      	ldr	r2, [r3, #4]
 8012960:	4b07      	ldr	r3, [pc, #28]	@ (8012980 <vPortFree+0xbc>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	4413      	add	r3, r2
 8012966:	4a06      	ldr	r2, [pc, #24]	@ (8012980 <vPortFree+0xbc>)
 8012968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801296a:	6938      	ldr	r0, [r7, #16]
 801296c:	f000 f86c 	bl	8012a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012970:	f7fe fdba 	bl	80114e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012974:	bf00      	nop
 8012976:	3718      	adds	r7, #24
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	200094b0 	.word	0x200094b0
 8012980:	200094a8 	.word	0x200094a8

08012984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012984:	b480      	push	{r7}
 8012986:	b085      	sub	sp, #20
 8012988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801298a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801298e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012990:	4b27      	ldr	r3, [pc, #156]	@ (8012a30 <prvHeapInit+0xac>)
 8012992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f003 0307 	and.w	r3, r3, #7
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00c      	beq.n	80129b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	3307      	adds	r3, #7
 80129a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f023 0307 	bic.w	r3, r3, #7
 80129aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80129ac:	68ba      	ldr	r2, [r7, #8]
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	1ad3      	subs	r3, r2, r3
 80129b2:	4a1f      	ldr	r2, [pc, #124]	@ (8012a30 <prvHeapInit+0xac>)
 80129b4:	4413      	add	r3, r2
 80129b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80129bc:	4a1d      	ldr	r2, [pc, #116]	@ (8012a34 <prvHeapInit+0xb0>)
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80129c2:	4b1c      	ldr	r3, [pc, #112]	@ (8012a34 <prvHeapInit+0xb0>)
 80129c4:	2200      	movs	r2, #0
 80129c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	68ba      	ldr	r2, [r7, #8]
 80129cc:	4413      	add	r3, r2
 80129ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80129d0:	2208      	movs	r2, #8
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	1a9b      	subs	r3, r3, r2
 80129d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f023 0307 	bic.w	r3, r3, #7
 80129de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	4a15      	ldr	r2, [pc, #84]	@ (8012a38 <prvHeapInit+0xb4>)
 80129e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80129e6:	4b14      	ldr	r3, [pc, #80]	@ (8012a38 <prvHeapInit+0xb4>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2200      	movs	r2, #0
 80129ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80129ee:	4b12      	ldr	r3, [pc, #72]	@ (8012a38 <prvHeapInit+0xb4>)
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	2200      	movs	r2, #0
 80129f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	68fa      	ldr	r2, [r7, #12]
 80129fe:	1ad2      	subs	r2, r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012a04:	4b0c      	ldr	r3, [pc, #48]	@ (8012a38 <prvHeapInit+0xb4>)
 8012a06:	681a      	ldr	r2, [r3, #0]
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a0c:	683b      	ldr	r3, [r7, #0]
 8012a0e:	685b      	ldr	r3, [r3, #4]
 8012a10:	4a0a      	ldr	r2, [pc, #40]	@ (8012a3c <prvHeapInit+0xb8>)
 8012a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	4a09      	ldr	r2, [pc, #36]	@ (8012a40 <prvHeapInit+0xbc>)
 8012a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012a1c:	4b09      	ldr	r3, [pc, #36]	@ (8012a44 <prvHeapInit+0xc0>)
 8012a1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012a22:	601a      	str	r2, [r3, #0]
}
 8012a24:	bf00      	nop
 8012a26:	3714      	adds	r7, #20
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2e:	4770      	bx	lr
 8012a30:	2000149c 	.word	0x2000149c
 8012a34:	2000949c 	.word	0x2000949c
 8012a38:	200094a4 	.word	0x200094a4
 8012a3c:	200094ac 	.word	0x200094ac
 8012a40:	200094a8 	.word	0x200094a8
 8012a44:	200094b0 	.word	0x200094b0

08012a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012a48:	b480      	push	{r7}
 8012a4a:	b085      	sub	sp, #20
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012a50:	4b28      	ldr	r3, [pc, #160]	@ (8012af4 <prvInsertBlockIntoFreeList+0xac>)
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	e002      	b.n	8012a5c <prvInsertBlockIntoFreeList+0x14>
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	60fb      	str	r3, [r7, #12]
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d8f7      	bhi.n	8012a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	68ba      	ldr	r2, [r7, #8]
 8012a70:	4413      	add	r3, r2
 8012a72:	687a      	ldr	r2, [r7, #4]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d108      	bne.n	8012a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	685a      	ldr	r2, [r3, #4]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	441a      	add	r2, r3
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	68ba      	ldr	r2, [r7, #8]
 8012a94:	441a      	add	r2, r3
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d118      	bne.n	8012ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	681a      	ldr	r2, [r3, #0]
 8012aa2:	4b15      	ldr	r3, [pc, #84]	@ (8012af8 <prvInsertBlockIntoFreeList+0xb0>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d00d      	beq.n	8012ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	685a      	ldr	r2, [r3, #4]
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	441a      	add	r2, r3
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	601a      	str	r2, [r3, #0]
 8012ac4:	e008      	b.n	8012ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8012af8 <prvInsertBlockIntoFreeList+0xb0>)
 8012ac8:	681a      	ldr	r2, [r3, #0]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	601a      	str	r2, [r3, #0]
 8012ace:	e003      	b.n	8012ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d002      	beq.n	8012ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	687a      	ldr	r2, [r7, #4]
 8012ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ae6:	bf00      	nop
 8012ae8:	3714      	adds	r7, #20
 8012aea:	46bd      	mov	sp, r7
 8012aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af0:	4770      	bx	lr
 8012af2:	bf00      	nop
 8012af4:	2000949c 	.word	0x2000949c
 8012af8:	200094a4 	.word	0x200094a4

08012afc <sniprintf>:
 8012afc:	b40c      	push	{r2, r3}
 8012afe:	b530      	push	{r4, r5, lr}
 8012b00:	4b17      	ldr	r3, [pc, #92]	@ (8012b60 <sniprintf+0x64>)
 8012b02:	1e0c      	subs	r4, r1, #0
 8012b04:	681d      	ldr	r5, [r3, #0]
 8012b06:	b09d      	sub	sp, #116	@ 0x74
 8012b08:	da08      	bge.n	8012b1c <sniprintf+0x20>
 8012b0a:	238b      	movs	r3, #139	@ 0x8b
 8012b0c:	602b      	str	r3, [r5, #0]
 8012b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b12:	b01d      	add	sp, #116	@ 0x74
 8012b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b18:	b002      	add	sp, #8
 8012b1a:	4770      	bx	lr
 8012b1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012b20:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012b24:	bf14      	ite	ne
 8012b26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012b2a:	4623      	moveq	r3, r4
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	9307      	str	r3, [sp, #28]
 8012b30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b34:	9002      	str	r0, [sp, #8]
 8012b36:	9006      	str	r0, [sp, #24]
 8012b38:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012b3c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012b3e:	ab21      	add	r3, sp, #132	@ 0x84
 8012b40:	a902      	add	r1, sp, #8
 8012b42:	4628      	mov	r0, r5
 8012b44:	9301      	str	r3, [sp, #4]
 8012b46:	f000 f9a3 	bl	8012e90 <_svfiprintf_r>
 8012b4a:	1c43      	adds	r3, r0, #1
 8012b4c:	bfbc      	itt	lt
 8012b4e:	238b      	movlt	r3, #139	@ 0x8b
 8012b50:	602b      	strlt	r3, [r5, #0]
 8012b52:	2c00      	cmp	r4, #0
 8012b54:	d0dd      	beq.n	8012b12 <sniprintf+0x16>
 8012b56:	9b02      	ldr	r3, [sp, #8]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	701a      	strb	r2, [r3, #0]
 8012b5c:	e7d9      	b.n	8012b12 <sniprintf+0x16>
 8012b5e:	bf00      	nop
 8012b60:	2000007c 	.word	0x2000007c

08012b64 <memset>:
 8012b64:	4402      	add	r2, r0
 8012b66:	4603      	mov	r3, r0
 8012b68:	4293      	cmp	r3, r2
 8012b6a:	d100      	bne.n	8012b6e <memset+0xa>
 8012b6c:	4770      	bx	lr
 8012b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8012b72:	e7f9      	b.n	8012b68 <memset+0x4>

08012b74 <__errno>:
 8012b74:	4b01      	ldr	r3, [pc, #4]	@ (8012b7c <__errno+0x8>)
 8012b76:	6818      	ldr	r0, [r3, #0]
 8012b78:	4770      	bx	lr
 8012b7a:	bf00      	nop
 8012b7c:	2000007c 	.word	0x2000007c

08012b80 <__libc_init_array>:
 8012b80:	b570      	push	{r4, r5, r6, lr}
 8012b82:	4d0d      	ldr	r5, [pc, #52]	@ (8012bb8 <__libc_init_array+0x38>)
 8012b84:	4c0d      	ldr	r4, [pc, #52]	@ (8012bbc <__libc_init_array+0x3c>)
 8012b86:	1b64      	subs	r4, r4, r5
 8012b88:	10a4      	asrs	r4, r4, #2
 8012b8a:	2600      	movs	r6, #0
 8012b8c:	42a6      	cmp	r6, r4
 8012b8e:	d109      	bne.n	8012ba4 <__libc_init_array+0x24>
 8012b90:	4d0b      	ldr	r5, [pc, #44]	@ (8012bc0 <__libc_init_array+0x40>)
 8012b92:	4c0c      	ldr	r4, [pc, #48]	@ (8012bc4 <__libc_init_array+0x44>)
 8012b94:	f000 fcbc 	bl	8013510 <_init>
 8012b98:	1b64      	subs	r4, r4, r5
 8012b9a:	10a4      	asrs	r4, r4, #2
 8012b9c:	2600      	movs	r6, #0
 8012b9e:	42a6      	cmp	r6, r4
 8012ba0:	d105      	bne.n	8012bae <__libc_init_array+0x2e>
 8012ba2:	bd70      	pop	{r4, r5, r6, pc}
 8012ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ba8:	4798      	blx	r3
 8012baa:	3601      	adds	r6, #1
 8012bac:	e7ee      	b.n	8012b8c <__libc_init_array+0xc>
 8012bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8012bb2:	4798      	blx	r3
 8012bb4:	3601      	adds	r6, #1
 8012bb6:	e7f2      	b.n	8012b9e <__libc_init_array+0x1e>
 8012bb8:	08013d88 	.word	0x08013d88
 8012bbc:	08013d88 	.word	0x08013d88
 8012bc0:	08013d88 	.word	0x08013d88
 8012bc4:	08013d8c 	.word	0x08013d8c

08012bc8 <__retarget_lock_acquire_recursive>:
 8012bc8:	4770      	bx	lr

08012bca <__retarget_lock_release_recursive>:
 8012bca:	4770      	bx	lr

08012bcc <memcpy>:
 8012bcc:	440a      	add	r2, r1
 8012bce:	4291      	cmp	r1, r2
 8012bd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8012bd4:	d100      	bne.n	8012bd8 <memcpy+0xc>
 8012bd6:	4770      	bx	lr
 8012bd8:	b510      	push	{r4, lr}
 8012bda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012bde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012be2:	4291      	cmp	r1, r2
 8012be4:	d1f9      	bne.n	8012bda <memcpy+0xe>
 8012be6:	bd10      	pop	{r4, pc}

08012be8 <_free_r>:
 8012be8:	b538      	push	{r3, r4, r5, lr}
 8012bea:	4605      	mov	r5, r0
 8012bec:	2900      	cmp	r1, #0
 8012bee:	d041      	beq.n	8012c74 <_free_r+0x8c>
 8012bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012bf4:	1f0c      	subs	r4, r1, #4
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	bfb8      	it	lt
 8012bfa:	18e4      	addlt	r4, r4, r3
 8012bfc:	f000 f8e0 	bl	8012dc0 <__malloc_lock>
 8012c00:	4a1d      	ldr	r2, [pc, #116]	@ (8012c78 <_free_r+0x90>)
 8012c02:	6813      	ldr	r3, [r2, #0]
 8012c04:	b933      	cbnz	r3, 8012c14 <_free_r+0x2c>
 8012c06:	6063      	str	r3, [r4, #4]
 8012c08:	6014      	str	r4, [r2, #0]
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c10:	f000 b8dc 	b.w	8012dcc <__malloc_unlock>
 8012c14:	42a3      	cmp	r3, r4
 8012c16:	d908      	bls.n	8012c2a <_free_r+0x42>
 8012c18:	6820      	ldr	r0, [r4, #0]
 8012c1a:	1821      	adds	r1, r4, r0
 8012c1c:	428b      	cmp	r3, r1
 8012c1e:	bf01      	itttt	eq
 8012c20:	6819      	ldreq	r1, [r3, #0]
 8012c22:	685b      	ldreq	r3, [r3, #4]
 8012c24:	1809      	addeq	r1, r1, r0
 8012c26:	6021      	streq	r1, [r4, #0]
 8012c28:	e7ed      	b.n	8012c06 <_free_r+0x1e>
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	685b      	ldr	r3, [r3, #4]
 8012c2e:	b10b      	cbz	r3, 8012c34 <_free_r+0x4c>
 8012c30:	42a3      	cmp	r3, r4
 8012c32:	d9fa      	bls.n	8012c2a <_free_r+0x42>
 8012c34:	6811      	ldr	r1, [r2, #0]
 8012c36:	1850      	adds	r0, r2, r1
 8012c38:	42a0      	cmp	r0, r4
 8012c3a:	d10b      	bne.n	8012c54 <_free_r+0x6c>
 8012c3c:	6820      	ldr	r0, [r4, #0]
 8012c3e:	4401      	add	r1, r0
 8012c40:	1850      	adds	r0, r2, r1
 8012c42:	4283      	cmp	r3, r0
 8012c44:	6011      	str	r1, [r2, #0]
 8012c46:	d1e0      	bne.n	8012c0a <_free_r+0x22>
 8012c48:	6818      	ldr	r0, [r3, #0]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	6053      	str	r3, [r2, #4]
 8012c4e:	4408      	add	r0, r1
 8012c50:	6010      	str	r0, [r2, #0]
 8012c52:	e7da      	b.n	8012c0a <_free_r+0x22>
 8012c54:	d902      	bls.n	8012c5c <_free_r+0x74>
 8012c56:	230c      	movs	r3, #12
 8012c58:	602b      	str	r3, [r5, #0]
 8012c5a:	e7d6      	b.n	8012c0a <_free_r+0x22>
 8012c5c:	6820      	ldr	r0, [r4, #0]
 8012c5e:	1821      	adds	r1, r4, r0
 8012c60:	428b      	cmp	r3, r1
 8012c62:	bf04      	itt	eq
 8012c64:	6819      	ldreq	r1, [r3, #0]
 8012c66:	685b      	ldreq	r3, [r3, #4]
 8012c68:	6063      	str	r3, [r4, #4]
 8012c6a:	bf04      	itt	eq
 8012c6c:	1809      	addeq	r1, r1, r0
 8012c6e:	6021      	streq	r1, [r4, #0]
 8012c70:	6054      	str	r4, [r2, #4]
 8012c72:	e7ca      	b.n	8012c0a <_free_r+0x22>
 8012c74:	bd38      	pop	{r3, r4, r5, pc}
 8012c76:	bf00      	nop
 8012c78:	200095f8 	.word	0x200095f8

08012c7c <sbrk_aligned>:
 8012c7c:	b570      	push	{r4, r5, r6, lr}
 8012c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8012cbc <sbrk_aligned+0x40>)
 8012c80:	460c      	mov	r4, r1
 8012c82:	6831      	ldr	r1, [r6, #0]
 8012c84:	4605      	mov	r5, r0
 8012c86:	b911      	cbnz	r1, 8012c8e <sbrk_aligned+0x12>
 8012c88:	f000 fba6 	bl	80133d8 <_sbrk_r>
 8012c8c:	6030      	str	r0, [r6, #0]
 8012c8e:	4621      	mov	r1, r4
 8012c90:	4628      	mov	r0, r5
 8012c92:	f000 fba1 	bl	80133d8 <_sbrk_r>
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	d103      	bne.n	8012ca2 <sbrk_aligned+0x26>
 8012c9a:	f04f 34ff 	mov.w	r4, #4294967295
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	bd70      	pop	{r4, r5, r6, pc}
 8012ca2:	1cc4      	adds	r4, r0, #3
 8012ca4:	f024 0403 	bic.w	r4, r4, #3
 8012ca8:	42a0      	cmp	r0, r4
 8012caa:	d0f8      	beq.n	8012c9e <sbrk_aligned+0x22>
 8012cac:	1a21      	subs	r1, r4, r0
 8012cae:	4628      	mov	r0, r5
 8012cb0:	f000 fb92 	bl	80133d8 <_sbrk_r>
 8012cb4:	3001      	adds	r0, #1
 8012cb6:	d1f2      	bne.n	8012c9e <sbrk_aligned+0x22>
 8012cb8:	e7ef      	b.n	8012c9a <sbrk_aligned+0x1e>
 8012cba:	bf00      	nop
 8012cbc:	200095f4 	.word	0x200095f4

08012cc0 <_malloc_r>:
 8012cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cc4:	1ccd      	adds	r5, r1, #3
 8012cc6:	f025 0503 	bic.w	r5, r5, #3
 8012cca:	3508      	adds	r5, #8
 8012ccc:	2d0c      	cmp	r5, #12
 8012cce:	bf38      	it	cc
 8012cd0:	250c      	movcc	r5, #12
 8012cd2:	2d00      	cmp	r5, #0
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	db01      	blt.n	8012cdc <_malloc_r+0x1c>
 8012cd8:	42a9      	cmp	r1, r5
 8012cda:	d904      	bls.n	8012ce6 <_malloc_r+0x26>
 8012cdc:	230c      	movs	r3, #12
 8012cde:	6033      	str	r3, [r6, #0]
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012dbc <_malloc_r+0xfc>
 8012cea:	f000 f869 	bl	8012dc0 <__malloc_lock>
 8012cee:	f8d8 3000 	ldr.w	r3, [r8]
 8012cf2:	461c      	mov	r4, r3
 8012cf4:	bb44      	cbnz	r4, 8012d48 <_malloc_r+0x88>
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	4630      	mov	r0, r6
 8012cfa:	f7ff ffbf 	bl	8012c7c <sbrk_aligned>
 8012cfe:	1c43      	adds	r3, r0, #1
 8012d00:	4604      	mov	r4, r0
 8012d02:	d158      	bne.n	8012db6 <_malloc_r+0xf6>
 8012d04:	f8d8 4000 	ldr.w	r4, [r8]
 8012d08:	4627      	mov	r7, r4
 8012d0a:	2f00      	cmp	r7, #0
 8012d0c:	d143      	bne.n	8012d96 <_malloc_r+0xd6>
 8012d0e:	2c00      	cmp	r4, #0
 8012d10:	d04b      	beq.n	8012daa <_malloc_r+0xea>
 8012d12:	6823      	ldr	r3, [r4, #0]
 8012d14:	4639      	mov	r1, r7
 8012d16:	4630      	mov	r0, r6
 8012d18:	eb04 0903 	add.w	r9, r4, r3
 8012d1c:	f000 fb5c 	bl	80133d8 <_sbrk_r>
 8012d20:	4581      	cmp	r9, r0
 8012d22:	d142      	bne.n	8012daa <_malloc_r+0xea>
 8012d24:	6821      	ldr	r1, [r4, #0]
 8012d26:	1a6d      	subs	r5, r5, r1
 8012d28:	4629      	mov	r1, r5
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f7ff ffa6 	bl	8012c7c <sbrk_aligned>
 8012d30:	3001      	adds	r0, #1
 8012d32:	d03a      	beq.n	8012daa <_malloc_r+0xea>
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	442b      	add	r3, r5
 8012d38:	6023      	str	r3, [r4, #0]
 8012d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8012d3e:	685a      	ldr	r2, [r3, #4]
 8012d40:	bb62      	cbnz	r2, 8012d9c <_malloc_r+0xdc>
 8012d42:	f8c8 7000 	str.w	r7, [r8]
 8012d46:	e00f      	b.n	8012d68 <_malloc_r+0xa8>
 8012d48:	6822      	ldr	r2, [r4, #0]
 8012d4a:	1b52      	subs	r2, r2, r5
 8012d4c:	d420      	bmi.n	8012d90 <_malloc_r+0xd0>
 8012d4e:	2a0b      	cmp	r2, #11
 8012d50:	d917      	bls.n	8012d82 <_malloc_r+0xc2>
 8012d52:	1961      	adds	r1, r4, r5
 8012d54:	42a3      	cmp	r3, r4
 8012d56:	6025      	str	r5, [r4, #0]
 8012d58:	bf18      	it	ne
 8012d5a:	6059      	strne	r1, [r3, #4]
 8012d5c:	6863      	ldr	r3, [r4, #4]
 8012d5e:	bf08      	it	eq
 8012d60:	f8c8 1000 	streq.w	r1, [r8]
 8012d64:	5162      	str	r2, [r4, r5]
 8012d66:	604b      	str	r3, [r1, #4]
 8012d68:	4630      	mov	r0, r6
 8012d6a:	f000 f82f 	bl	8012dcc <__malloc_unlock>
 8012d6e:	f104 000b 	add.w	r0, r4, #11
 8012d72:	1d23      	adds	r3, r4, #4
 8012d74:	f020 0007 	bic.w	r0, r0, #7
 8012d78:	1ac2      	subs	r2, r0, r3
 8012d7a:	bf1c      	itt	ne
 8012d7c:	1a1b      	subne	r3, r3, r0
 8012d7e:	50a3      	strne	r3, [r4, r2]
 8012d80:	e7af      	b.n	8012ce2 <_malloc_r+0x22>
 8012d82:	6862      	ldr	r2, [r4, #4]
 8012d84:	42a3      	cmp	r3, r4
 8012d86:	bf0c      	ite	eq
 8012d88:	f8c8 2000 	streq.w	r2, [r8]
 8012d8c:	605a      	strne	r2, [r3, #4]
 8012d8e:	e7eb      	b.n	8012d68 <_malloc_r+0xa8>
 8012d90:	4623      	mov	r3, r4
 8012d92:	6864      	ldr	r4, [r4, #4]
 8012d94:	e7ae      	b.n	8012cf4 <_malloc_r+0x34>
 8012d96:	463c      	mov	r4, r7
 8012d98:	687f      	ldr	r7, [r7, #4]
 8012d9a:	e7b6      	b.n	8012d0a <_malloc_r+0x4a>
 8012d9c:	461a      	mov	r2, r3
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	42a3      	cmp	r3, r4
 8012da2:	d1fb      	bne.n	8012d9c <_malloc_r+0xdc>
 8012da4:	2300      	movs	r3, #0
 8012da6:	6053      	str	r3, [r2, #4]
 8012da8:	e7de      	b.n	8012d68 <_malloc_r+0xa8>
 8012daa:	230c      	movs	r3, #12
 8012dac:	6033      	str	r3, [r6, #0]
 8012dae:	4630      	mov	r0, r6
 8012db0:	f000 f80c 	bl	8012dcc <__malloc_unlock>
 8012db4:	e794      	b.n	8012ce0 <_malloc_r+0x20>
 8012db6:	6005      	str	r5, [r0, #0]
 8012db8:	e7d6      	b.n	8012d68 <_malloc_r+0xa8>
 8012dba:	bf00      	nop
 8012dbc:	200095f8 	.word	0x200095f8

08012dc0 <__malloc_lock>:
 8012dc0:	4801      	ldr	r0, [pc, #4]	@ (8012dc8 <__malloc_lock+0x8>)
 8012dc2:	f7ff bf01 	b.w	8012bc8 <__retarget_lock_acquire_recursive>
 8012dc6:	bf00      	nop
 8012dc8:	200095f0 	.word	0x200095f0

08012dcc <__malloc_unlock>:
 8012dcc:	4801      	ldr	r0, [pc, #4]	@ (8012dd4 <__malloc_unlock+0x8>)
 8012dce:	f7ff befc 	b.w	8012bca <__retarget_lock_release_recursive>
 8012dd2:	bf00      	nop
 8012dd4:	200095f0 	.word	0x200095f0

08012dd8 <__ssputs_r>:
 8012dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ddc:	688e      	ldr	r6, [r1, #8]
 8012dde:	461f      	mov	r7, r3
 8012de0:	42be      	cmp	r6, r7
 8012de2:	680b      	ldr	r3, [r1, #0]
 8012de4:	4682      	mov	sl, r0
 8012de6:	460c      	mov	r4, r1
 8012de8:	4690      	mov	r8, r2
 8012dea:	d82d      	bhi.n	8012e48 <__ssputs_r+0x70>
 8012dec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012df0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012df4:	d026      	beq.n	8012e44 <__ssputs_r+0x6c>
 8012df6:	6965      	ldr	r5, [r4, #20]
 8012df8:	6909      	ldr	r1, [r1, #16]
 8012dfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012dfe:	eba3 0901 	sub.w	r9, r3, r1
 8012e02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e06:	1c7b      	adds	r3, r7, #1
 8012e08:	444b      	add	r3, r9
 8012e0a:	106d      	asrs	r5, r5, #1
 8012e0c:	429d      	cmp	r5, r3
 8012e0e:	bf38      	it	cc
 8012e10:	461d      	movcc	r5, r3
 8012e12:	0553      	lsls	r3, r2, #21
 8012e14:	d527      	bpl.n	8012e66 <__ssputs_r+0x8e>
 8012e16:	4629      	mov	r1, r5
 8012e18:	f7ff ff52 	bl	8012cc0 <_malloc_r>
 8012e1c:	4606      	mov	r6, r0
 8012e1e:	b360      	cbz	r0, 8012e7a <__ssputs_r+0xa2>
 8012e20:	6921      	ldr	r1, [r4, #16]
 8012e22:	464a      	mov	r2, r9
 8012e24:	f7ff fed2 	bl	8012bcc <memcpy>
 8012e28:	89a3      	ldrh	r3, [r4, #12]
 8012e2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e32:	81a3      	strh	r3, [r4, #12]
 8012e34:	6126      	str	r6, [r4, #16]
 8012e36:	6165      	str	r5, [r4, #20]
 8012e38:	444e      	add	r6, r9
 8012e3a:	eba5 0509 	sub.w	r5, r5, r9
 8012e3e:	6026      	str	r6, [r4, #0]
 8012e40:	60a5      	str	r5, [r4, #8]
 8012e42:	463e      	mov	r6, r7
 8012e44:	42be      	cmp	r6, r7
 8012e46:	d900      	bls.n	8012e4a <__ssputs_r+0x72>
 8012e48:	463e      	mov	r6, r7
 8012e4a:	6820      	ldr	r0, [r4, #0]
 8012e4c:	4632      	mov	r2, r6
 8012e4e:	4641      	mov	r1, r8
 8012e50:	f000 faa8 	bl	80133a4 <memmove>
 8012e54:	68a3      	ldr	r3, [r4, #8]
 8012e56:	1b9b      	subs	r3, r3, r6
 8012e58:	60a3      	str	r3, [r4, #8]
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	4433      	add	r3, r6
 8012e5e:	6023      	str	r3, [r4, #0]
 8012e60:	2000      	movs	r0, #0
 8012e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e66:	462a      	mov	r2, r5
 8012e68:	f000 fac6 	bl	80133f8 <_realloc_r>
 8012e6c:	4606      	mov	r6, r0
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	d1e0      	bne.n	8012e34 <__ssputs_r+0x5c>
 8012e72:	6921      	ldr	r1, [r4, #16]
 8012e74:	4650      	mov	r0, sl
 8012e76:	f7ff feb7 	bl	8012be8 <_free_r>
 8012e7a:	230c      	movs	r3, #12
 8012e7c:	f8ca 3000 	str.w	r3, [sl]
 8012e80:	89a3      	ldrh	r3, [r4, #12]
 8012e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e86:	81a3      	strh	r3, [r4, #12]
 8012e88:	f04f 30ff 	mov.w	r0, #4294967295
 8012e8c:	e7e9      	b.n	8012e62 <__ssputs_r+0x8a>
	...

08012e90 <_svfiprintf_r>:
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	4698      	mov	r8, r3
 8012e96:	898b      	ldrh	r3, [r1, #12]
 8012e98:	061b      	lsls	r3, r3, #24
 8012e9a:	b09d      	sub	sp, #116	@ 0x74
 8012e9c:	4607      	mov	r7, r0
 8012e9e:	460d      	mov	r5, r1
 8012ea0:	4614      	mov	r4, r2
 8012ea2:	d510      	bpl.n	8012ec6 <_svfiprintf_r+0x36>
 8012ea4:	690b      	ldr	r3, [r1, #16]
 8012ea6:	b973      	cbnz	r3, 8012ec6 <_svfiprintf_r+0x36>
 8012ea8:	2140      	movs	r1, #64	@ 0x40
 8012eaa:	f7ff ff09 	bl	8012cc0 <_malloc_r>
 8012eae:	6028      	str	r0, [r5, #0]
 8012eb0:	6128      	str	r0, [r5, #16]
 8012eb2:	b930      	cbnz	r0, 8012ec2 <_svfiprintf_r+0x32>
 8012eb4:	230c      	movs	r3, #12
 8012eb6:	603b      	str	r3, [r7, #0]
 8012eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ebc:	b01d      	add	sp, #116	@ 0x74
 8012ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ec2:	2340      	movs	r3, #64	@ 0x40
 8012ec4:	616b      	str	r3, [r5, #20]
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	9309      	str	r3, [sp, #36]	@ 0x24
 8012eca:	2320      	movs	r3, #32
 8012ecc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ed4:	2330      	movs	r3, #48	@ 0x30
 8012ed6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013074 <_svfiprintf_r+0x1e4>
 8012eda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012ede:	f04f 0901 	mov.w	r9, #1
 8012ee2:	4623      	mov	r3, r4
 8012ee4:	469a      	mov	sl, r3
 8012ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eea:	b10a      	cbz	r2, 8012ef0 <_svfiprintf_r+0x60>
 8012eec:	2a25      	cmp	r2, #37	@ 0x25
 8012eee:	d1f9      	bne.n	8012ee4 <_svfiprintf_r+0x54>
 8012ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8012ef4:	d00b      	beq.n	8012f0e <_svfiprintf_r+0x7e>
 8012ef6:	465b      	mov	r3, fp
 8012ef8:	4622      	mov	r2, r4
 8012efa:	4629      	mov	r1, r5
 8012efc:	4638      	mov	r0, r7
 8012efe:	f7ff ff6b 	bl	8012dd8 <__ssputs_r>
 8012f02:	3001      	adds	r0, #1
 8012f04:	f000 80a7 	beq.w	8013056 <_svfiprintf_r+0x1c6>
 8012f08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012f0a:	445a      	add	r2, fp
 8012f0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8012f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	f000 809f 	beq.w	8013056 <_svfiprintf_r+0x1c6>
 8012f18:	2300      	movs	r3, #0
 8012f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f22:	f10a 0a01 	add.w	sl, sl, #1
 8012f26:	9304      	str	r3, [sp, #16]
 8012f28:	9307      	str	r3, [sp, #28]
 8012f2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012f2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8012f30:	4654      	mov	r4, sl
 8012f32:	2205      	movs	r2, #5
 8012f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f38:	484e      	ldr	r0, [pc, #312]	@ (8013074 <_svfiprintf_r+0x1e4>)
 8012f3a:	f7ed f971 	bl	8000220 <memchr>
 8012f3e:	9a04      	ldr	r2, [sp, #16]
 8012f40:	b9d8      	cbnz	r0, 8012f7a <_svfiprintf_r+0xea>
 8012f42:	06d0      	lsls	r0, r2, #27
 8012f44:	bf44      	itt	mi
 8012f46:	2320      	movmi	r3, #32
 8012f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f4c:	0711      	lsls	r1, r2, #28
 8012f4e:	bf44      	itt	mi
 8012f50:	232b      	movmi	r3, #43	@ 0x2b
 8012f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012f56:	f89a 3000 	ldrb.w	r3, [sl]
 8012f5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f5c:	d015      	beq.n	8012f8a <_svfiprintf_r+0xfa>
 8012f5e:	9a07      	ldr	r2, [sp, #28]
 8012f60:	4654      	mov	r4, sl
 8012f62:	2000      	movs	r0, #0
 8012f64:	f04f 0c0a 	mov.w	ip, #10
 8012f68:	4621      	mov	r1, r4
 8012f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f6e:	3b30      	subs	r3, #48	@ 0x30
 8012f70:	2b09      	cmp	r3, #9
 8012f72:	d94b      	bls.n	801300c <_svfiprintf_r+0x17c>
 8012f74:	b1b0      	cbz	r0, 8012fa4 <_svfiprintf_r+0x114>
 8012f76:	9207      	str	r2, [sp, #28]
 8012f78:	e014      	b.n	8012fa4 <_svfiprintf_r+0x114>
 8012f7a:	eba0 0308 	sub.w	r3, r0, r8
 8012f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8012f82:	4313      	orrs	r3, r2
 8012f84:	9304      	str	r3, [sp, #16]
 8012f86:	46a2      	mov	sl, r4
 8012f88:	e7d2      	b.n	8012f30 <_svfiprintf_r+0xa0>
 8012f8a:	9b03      	ldr	r3, [sp, #12]
 8012f8c:	1d19      	adds	r1, r3, #4
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	9103      	str	r1, [sp, #12]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	bfbb      	ittet	lt
 8012f96:	425b      	neglt	r3, r3
 8012f98:	f042 0202 	orrlt.w	r2, r2, #2
 8012f9c:	9307      	strge	r3, [sp, #28]
 8012f9e:	9307      	strlt	r3, [sp, #28]
 8012fa0:	bfb8      	it	lt
 8012fa2:	9204      	strlt	r2, [sp, #16]
 8012fa4:	7823      	ldrb	r3, [r4, #0]
 8012fa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8012fa8:	d10a      	bne.n	8012fc0 <_svfiprintf_r+0x130>
 8012faa:	7863      	ldrb	r3, [r4, #1]
 8012fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8012fae:	d132      	bne.n	8013016 <_svfiprintf_r+0x186>
 8012fb0:	9b03      	ldr	r3, [sp, #12]
 8012fb2:	1d1a      	adds	r2, r3, #4
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	9203      	str	r2, [sp, #12]
 8012fb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012fbc:	3402      	adds	r4, #2
 8012fbe:	9305      	str	r3, [sp, #20]
 8012fc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013084 <_svfiprintf_r+0x1f4>
 8012fc4:	7821      	ldrb	r1, [r4, #0]
 8012fc6:	2203      	movs	r2, #3
 8012fc8:	4650      	mov	r0, sl
 8012fca:	f7ed f929 	bl	8000220 <memchr>
 8012fce:	b138      	cbz	r0, 8012fe0 <_svfiprintf_r+0x150>
 8012fd0:	9b04      	ldr	r3, [sp, #16]
 8012fd2:	eba0 000a 	sub.w	r0, r0, sl
 8012fd6:	2240      	movs	r2, #64	@ 0x40
 8012fd8:	4082      	lsls	r2, r0
 8012fda:	4313      	orrs	r3, r2
 8012fdc:	3401      	adds	r4, #1
 8012fde:	9304      	str	r3, [sp, #16]
 8012fe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fe4:	4824      	ldr	r0, [pc, #144]	@ (8013078 <_svfiprintf_r+0x1e8>)
 8012fe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012fea:	2206      	movs	r2, #6
 8012fec:	f7ed f918 	bl	8000220 <memchr>
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	d036      	beq.n	8013062 <_svfiprintf_r+0x1d2>
 8012ff4:	4b21      	ldr	r3, [pc, #132]	@ (801307c <_svfiprintf_r+0x1ec>)
 8012ff6:	bb1b      	cbnz	r3, 8013040 <_svfiprintf_r+0x1b0>
 8012ff8:	9b03      	ldr	r3, [sp, #12]
 8012ffa:	3307      	adds	r3, #7
 8012ffc:	f023 0307 	bic.w	r3, r3, #7
 8013000:	3308      	adds	r3, #8
 8013002:	9303      	str	r3, [sp, #12]
 8013004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013006:	4433      	add	r3, r6
 8013008:	9309      	str	r3, [sp, #36]	@ 0x24
 801300a:	e76a      	b.n	8012ee2 <_svfiprintf_r+0x52>
 801300c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013010:	460c      	mov	r4, r1
 8013012:	2001      	movs	r0, #1
 8013014:	e7a8      	b.n	8012f68 <_svfiprintf_r+0xd8>
 8013016:	2300      	movs	r3, #0
 8013018:	3401      	adds	r4, #1
 801301a:	9305      	str	r3, [sp, #20]
 801301c:	4619      	mov	r1, r3
 801301e:	f04f 0c0a 	mov.w	ip, #10
 8013022:	4620      	mov	r0, r4
 8013024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013028:	3a30      	subs	r2, #48	@ 0x30
 801302a:	2a09      	cmp	r2, #9
 801302c:	d903      	bls.n	8013036 <_svfiprintf_r+0x1a6>
 801302e:	2b00      	cmp	r3, #0
 8013030:	d0c6      	beq.n	8012fc0 <_svfiprintf_r+0x130>
 8013032:	9105      	str	r1, [sp, #20]
 8013034:	e7c4      	b.n	8012fc0 <_svfiprintf_r+0x130>
 8013036:	fb0c 2101 	mla	r1, ip, r1, r2
 801303a:	4604      	mov	r4, r0
 801303c:	2301      	movs	r3, #1
 801303e:	e7f0      	b.n	8013022 <_svfiprintf_r+0x192>
 8013040:	ab03      	add	r3, sp, #12
 8013042:	9300      	str	r3, [sp, #0]
 8013044:	462a      	mov	r2, r5
 8013046:	4b0e      	ldr	r3, [pc, #56]	@ (8013080 <_svfiprintf_r+0x1f0>)
 8013048:	a904      	add	r1, sp, #16
 801304a:	4638      	mov	r0, r7
 801304c:	f3af 8000 	nop.w
 8013050:	1c42      	adds	r2, r0, #1
 8013052:	4606      	mov	r6, r0
 8013054:	d1d6      	bne.n	8013004 <_svfiprintf_r+0x174>
 8013056:	89ab      	ldrh	r3, [r5, #12]
 8013058:	065b      	lsls	r3, r3, #25
 801305a:	f53f af2d 	bmi.w	8012eb8 <_svfiprintf_r+0x28>
 801305e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013060:	e72c      	b.n	8012ebc <_svfiprintf_r+0x2c>
 8013062:	ab03      	add	r3, sp, #12
 8013064:	9300      	str	r3, [sp, #0]
 8013066:	462a      	mov	r2, r5
 8013068:	4b05      	ldr	r3, [pc, #20]	@ (8013080 <_svfiprintf_r+0x1f0>)
 801306a:	a904      	add	r1, sp, #16
 801306c:	4638      	mov	r0, r7
 801306e:	f000 f879 	bl	8013164 <_printf_i>
 8013072:	e7ed      	b.n	8013050 <_svfiprintf_r+0x1c0>
 8013074:	08013d4c 	.word	0x08013d4c
 8013078:	08013d56 	.word	0x08013d56
 801307c:	00000000 	.word	0x00000000
 8013080:	08012dd9 	.word	0x08012dd9
 8013084:	08013d52 	.word	0x08013d52

08013088 <_printf_common>:
 8013088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801308c:	4616      	mov	r6, r2
 801308e:	4698      	mov	r8, r3
 8013090:	688a      	ldr	r2, [r1, #8]
 8013092:	690b      	ldr	r3, [r1, #16]
 8013094:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013098:	4293      	cmp	r3, r2
 801309a:	bfb8      	it	lt
 801309c:	4613      	movlt	r3, r2
 801309e:	6033      	str	r3, [r6, #0]
 80130a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80130a4:	4607      	mov	r7, r0
 80130a6:	460c      	mov	r4, r1
 80130a8:	b10a      	cbz	r2, 80130ae <_printf_common+0x26>
 80130aa:	3301      	adds	r3, #1
 80130ac:	6033      	str	r3, [r6, #0]
 80130ae:	6823      	ldr	r3, [r4, #0]
 80130b0:	0699      	lsls	r1, r3, #26
 80130b2:	bf42      	ittt	mi
 80130b4:	6833      	ldrmi	r3, [r6, #0]
 80130b6:	3302      	addmi	r3, #2
 80130b8:	6033      	strmi	r3, [r6, #0]
 80130ba:	6825      	ldr	r5, [r4, #0]
 80130bc:	f015 0506 	ands.w	r5, r5, #6
 80130c0:	d106      	bne.n	80130d0 <_printf_common+0x48>
 80130c2:	f104 0a19 	add.w	sl, r4, #25
 80130c6:	68e3      	ldr	r3, [r4, #12]
 80130c8:	6832      	ldr	r2, [r6, #0]
 80130ca:	1a9b      	subs	r3, r3, r2
 80130cc:	42ab      	cmp	r3, r5
 80130ce:	dc26      	bgt.n	801311e <_printf_common+0x96>
 80130d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80130d4:	6822      	ldr	r2, [r4, #0]
 80130d6:	3b00      	subs	r3, #0
 80130d8:	bf18      	it	ne
 80130da:	2301      	movne	r3, #1
 80130dc:	0692      	lsls	r2, r2, #26
 80130de:	d42b      	bmi.n	8013138 <_printf_common+0xb0>
 80130e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80130e4:	4641      	mov	r1, r8
 80130e6:	4638      	mov	r0, r7
 80130e8:	47c8      	blx	r9
 80130ea:	3001      	adds	r0, #1
 80130ec:	d01e      	beq.n	801312c <_printf_common+0xa4>
 80130ee:	6823      	ldr	r3, [r4, #0]
 80130f0:	6922      	ldr	r2, [r4, #16]
 80130f2:	f003 0306 	and.w	r3, r3, #6
 80130f6:	2b04      	cmp	r3, #4
 80130f8:	bf02      	ittt	eq
 80130fa:	68e5      	ldreq	r5, [r4, #12]
 80130fc:	6833      	ldreq	r3, [r6, #0]
 80130fe:	1aed      	subeq	r5, r5, r3
 8013100:	68a3      	ldr	r3, [r4, #8]
 8013102:	bf0c      	ite	eq
 8013104:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013108:	2500      	movne	r5, #0
 801310a:	4293      	cmp	r3, r2
 801310c:	bfc4      	itt	gt
 801310e:	1a9b      	subgt	r3, r3, r2
 8013110:	18ed      	addgt	r5, r5, r3
 8013112:	2600      	movs	r6, #0
 8013114:	341a      	adds	r4, #26
 8013116:	42b5      	cmp	r5, r6
 8013118:	d11a      	bne.n	8013150 <_printf_common+0xc8>
 801311a:	2000      	movs	r0, #0
 801311c:	e008      	b.n	8013130 <_printf_common+0xa8>
 801311e:	2301      	movs	r3, #1
 8013120:	4652      	mov	r2, sl
 8013122:	4641      	mov	r1, r8
 8013124:	4638      	mov	r0, r7
 8013126:	47c8      	blx	r9
 8013128:	3001      	adds	r0, #1
 801312a:	d103      	bne.n	8013134 <_printf_common+0xac>
 801312c:	f04f 30ff 	mov.w	r0, #4294967295
 8013130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013134:	3501      	adds	r5, #1
 8013136:	e7c6      	b.n	80130c6 <_printf_common+0x3e>
 8013138:	18e1      	adds	r1, r4, r3
 801313a:	1c5a      	adds	r2, r3, #1
 801313c:	2030      	movs	r0, #48	@ 0x30
 801313e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013142:	4422      	add	r2, r4
 8013144:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013148:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801314c:	3302      	adds	r3, #2
 801314e:	e7c7      	b.n	80130e0 <_printf_common+0x58>
 8013150:	2301      	movs	r3, #1
 8013152:	4622      	mov	r2, r4
 8013154:	4641      	mov	r1, r8
 8013156:	4638      	mov	r0, r7
 8013158:	47c8      	blx	r9
 801315a:	3001      	adds	r0, #1
 801315c:	d0e6      	beq.n	801312c <_printf_common+0xa4>
 801315e:	3601      	adds	r6, #1
 8013160:	e7d9      	b.n	8013116 <_printf_common+0x8e>
	...

08013164 <_printf_i>:
 8013164:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013168:	7e0f      	ldrb	r7, [r1, #24]
 801316a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801316c:	2f78      	cmp	r7, #120	@ 0x78
 801316e:	4691      	mov	r9, r2
 8013170:	4680      	mov	r8, r0
 8013172:	460c      	mov	r4, r1
 8013174:	469a      	mov	sl, r3
 8013176:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801317a:	d807      	bhi.n	801318c <_printf_i+0x28>
 801317c:	2f62      	cmp	r7, #98	@ 0x62
 801317e:	d80a      	bhi.n	8013196 <_printf_i+0x32>
 8013180:	2f00      	cmp	r7, #0
 8013182:	f000 80d2 	beq.w	801332a <_printf_i+0x1c6>
 8013186:	2f58      	cmp	r7, #88	@ 0x58
 8013188:	f000 80b9 	beq.w	80132fe <_printf_i+0x19a>
 801318c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013190:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013194:	e03a      	b.n	801320c <_printf_i+0xa8>
 8013196:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801319a:	2b15      	cmp	r3, #21
 801319c:	d8f6      	bhi.n	801318c <_printf_i+0x28>
 801319e:	a101      	add	r1, pc, #4	@ (adr r1, 80131a4 <_printf_i+0x40>)
 80131a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80131a4:	080131fd 	.word	0x080131fd
 80131a8:	08013211 	.word	0x08013211
 80131ac:	0801318d 	.word	0x0801318d
 80131b0:	0801318d 	.word	0x0801318d
 80131b4:	0801318d 	.word	0x0801318d
 80131b8:	0801318d 	.word	0x0801318d
 80131bc:	08013211 	.word	0x08013211
 80131c0:	0801318d 	.word	0x0801318d
 80131c4:	0801318d 	.word	0x0801318d
 80131c8:	0801318d 	.word	0x0801318d
 80131cc:	0801318d 	.word	0x0801318d
 80131d0:	08013311 	.word	0x08013311
 80131d4:	0801323b 	.word	0x0801323b
 80131d8:	080132cb 	.word	0x080132cb
 80131dc:	0801318d 	.word	0x0801318d
 80131e0:	0801318d 	.word	0x0801318d
 80131e4:	08013333 	.word	0x08013333
 80131e8:	0801318d 	.word	0x0801318d
 80131ec:	0801323b 	.word	0x0801323b
 80131f0:	0801318d 	.word	0x0801318d
 80131f4:	0801318d 	.word	0x0801318d
 80131f8:	080132d3 	.word	0x080132d3
 80131fc:	6833      	ldr	r3, [r6, #0]
 80131fe:	1d1a      	adds	r2, r3, #4
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	6032      	str	r2, [r6, #0]
 8013204:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013208:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801320c:	2301      	movs	r3, #1
 801320e:	e09d      	b.n	801334c <_printf_i+0x1e8>
 8013210:	6833      	ldr	r3, [r6, #0]
 8013212:	6820      	ldr	r0, [r4, #0]
 8013214:	1d19      	adds	r1, r3, #4
 8013216:	6031      	str	r1, [r6, #0]
 8013218:	0606      	lsls	r6, r0, #24
 801321a:	d501      	bpl.n	8013220 <_printf_i+0xbc>
 801321c:	681d      	ldr	r5, [r3, #0]
 801321e:	e003      	b.n	8013228 <_printf_i+0xc4>
 8013220:	0645      	lsls	r5, r0, #25
 8013222:	d5fb      	bpl.n	801321c <_printf_i+0xb8>
 8013224:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013228:	2d00      	cmp	r5, #0
 801322a:	da03      	bge.n	8013234 <_printf_i+0xd0>
 801322c:	232d      	movs	r3, #45	@ 0x2d
 801322e:	426d      	negs	r5, r5
 8013230:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013234:	4859      	ldr	r0, [pc, #356]	@ (801339c <_printf_i+0x238>)
 8013236:	230a      	movs	r3, #10
 8013238:	e011      	b.n	801325e <_printf_i+0xfa>
 801323a:	6821      	ldr	r1, [r4, #0]
 801323c:	6833      	ldr	r3, [r6, #0]
 801323e:	0608      	lsls	r0, r1, #24
 8013240:	f853 5b04 	ldr.w	r5, [r3], #4
 8013244:	d402      	bmi.n	801324c <_printf_i+0xe8>
 8013246:	0649      	lsls	r1, r1, #25
 8013248:	bf48      	it	mi
 801324a:	b2ad      	uxthmi	r5, r5
 801324c:	2f6f      	cmp	r7, #111	@ 0x6f
 801324e:	4853      	ldr	r0, [pc, #332]	@ (801339c <_printf_i+0x238>)
 8013250:	6033      	str	r3, [r6, #0]
 8013252:	bf14      	ite	ne
 8013254:	230a      	movne	r3, #10
 8013256:	2308      	moveq	r3, #8
 8013258:	2100      	movs	r1, #0
 801325a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801325e:	6866      	ldr	r6, [r4, #4]
 8013260:	60a6      	str	r6, [r4, #8]
 8013262:	2e00      	cmp	r6, #0
 8013264:	bfa2      	ittt	ge
 8013266:	6821      	ldrge	r1, [r4, #0]
 8013268:	f021 0104 	bicge.w	r1, r1, #4
 801326c:	6021      	strge	r1, [r4, #0]
 801326e:	b90d      	cbnz	r5, 8013274 <_printf_i+0x110>
 8013270:	2e00      	cmp	r6, #0
 8013272:	d04b      	beq.n	801330c <_printf_i+0x1a8>
 8013274:	4616      	mov	r6, r2
 8013276:	fbb5 f1f3 	udiv	r1, r5, r3
 801327a:	fb03 5711 	mls	r7, r3, r1, r5
 801327e:	5dc7      	ldrb	r7, [r0, r7]
 8013280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013284:	462f      	mov	r7, r5
 8013286:	42bb      	cmp	r3, r7
 8013288:	460d      	mov	r5, r1
 801328a:	d9f4      	bls.n	8013276 <_printf_i+0x112>
 801328c:	2b08      	cmp	r3, #8
 801328e:	d10b      	bne.n	80132a8 <_printf_i+0x144>
 8013290:	6823      	ldr	r3, [r4, #0]
 8013292:	07df      	lsls	r7, r3, #31
 8013294:	d508      	bpl.n	80132a8 <_printf_i+0x144>
 8013296:	6923      	ldr	r3, [r4, #16]
 8013298:	6861      	ldr	r1, [r4, #4]
 801329a:	4299      	cmp	r1, r3
 801329c:	bfde      	ittt	le
 801329e:	2330      	movle	r3, #48	@ 0x30
 80132a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80132a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80132a8:	1b92      	subs	r2, r2, r6
 80132aa:	6122      	str	r2, [r4, #16]
 80132ac:	f8cd a000 	str.w	sl, [sp]
 80132b0:	464b      	mov	r3, r9
 80132b2:	aa03      	add	r2, sp, #12
 80132b4:	4621      	mov	r1, r4
 80132b6:	4640      	mov	r0, r8
 80132b8:	f7ff fee6 	bl	8013088 <_printf_common>
 80132bc:	3001      	adds	r0, #1
 80132be:	d14a      	bne.n	8013356 <_printf_i+0x1f2>
 80132c0:	f04f 30ff 	mov.w	r0, #4294967295
 80132c4:	b004      	add	sp, #16
 80132c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132ca:	6823      	ldr	r3, [r4, #0]
 80132cc:	f043 0320 	orr.w	r3, r3, #32
 80132d0:	6023      	str	r3, [r4, #0]
 80132d2:	4833      	ldr	r0, [pc, #204]	@ (80133a0 <_printf_i+0x23c>)
 80132d4:	2778      	movs	r7, #120	@ 0x78
 80132d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80132da:	6823      	ldr	r3, [r4, #0]
 80132dc:	6831      	ldr	r1, [r6, #0]
 80132de:	061f      	lsls	r7, r3, #24
 80132e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80132e4:	d402      	bmi.n	80132ec <_printf_i+0x188>
 80132e6:	065f      	lsls	r7, r3, #25
 80132e8:	bf48      	it	mi
 80132ea:	b2ad      	uxthmi	r5, r5
 80132ec:	6031      	str	r1, [r6, #0]
 80132ee:	07d9      	lsls	r1, r3, #31
 80132f0:	bf44      	itt	mi
 80132f2:	f043 0320 	orrmi.w	r3, r3, #32
 80132f6:	6023      	strmi	r3, [r4, #0]
 80132f8:	b11d      	cbz	r5, 8013302 <_printf_i+0x19e>
 80132fa:	2310      	movs	r3, #16
 80132fc:	e7ac      	b.n	8013258 <_printf_i+0xf4>
 80132fe:	4827      	ldr	r0, [pc, #156]	@ (801339c <_printf_i+0x238>)
 8013300:	e7e9      	b.n	80132d6 <_printf_i+0x172>
 8013302:	6823      	ldr	r3, [r4, #0]
 8013304:	f023 0320 	bic.w	r3, r3, #32
 8013308:	6023      	str	r3, [r4, #0]
 801330a:	e7f6      	b.n	80132fa <_printf_i+0x196>
 801330c:	4616      	mov	r6, r2
 801330e:	e7bd      	b.n	801328c <_printf_i+0x128>
 8013310:	6833      	ldr	r3, [r6, #0]
 8013312:	6825      	ldr	r5, [r4, #0]
 8013314:	6961      	ldr	r1, [r4, #20]
 8013316:	1d18      	adds	r0, r3, #4
 8013318:	6030      	str	r0, [r6, #0]
 801331a:	062e      	lsls	r6, r5, #24
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	d501      	bpl.n	8013324 <_printf_i+0x1c0>
 8013320:	6019      	str	r1, [r3, #0]
 8013322:	e002      	b.n	801332a <_printf_i+0x1c6>
 8013324:	0668      	lsls	r0, r5, #25
 8013326:	d5fb      	bpl.n	8013320 <_printf_i+0x1bc>
 8013328:	8019      	strh	r1, [r3, #0]
 801332a:	2300      	movs	r3, #0
 801332c:	6123      	str	r3, [r4, #16]
 801332e:	4616      	mov	r6, r2
 8013330:	e7bc      	b.n	80132ac <_printf_i+0x148>
 8013332:	6833      	ldr	r3, [r6, #0]
 8013334:	1d1a      	adds	r2, r3, #4
 8013336:	6032      	str	r2, [r6, #0]
 8013338:	681e      	ldr	r6, [r3, #0]
 801333a:	6862      	ldr	r2, [r4, #4]
 801333c:	2100      	movs	r1, #0
 801333e:	4630      	mov	r0, r6
 8013340:	f7ec ff6e 	bl	8000220 <memchr>
 8013344:	b108      	cbz	r0, 801334a <_printf_i+0x1e6>
 8013346:	1b80      	subs	r0, r0, r6
 8013348:	6060      	str	r0, [r4, #4]
 801334a:	6863      	ldr	r3, [r4, #4]
 801334c:	6123      	str	r3, [r4, #16]
 801334e:	2300      	movs	r3, #0
 8013350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013354:	e7aa      	b.n	80132ac <_printf_i+0x148>
 8013356:	6923      	ldr	r3, [r4, #16]
 8013358:	4632      	mov	r2, r6
 801335a:	4649      	mov	r1, r9
 801335c:	4640      	mov	r0, r8
 801335e:	47d0      	blx	sl
 8013360:	3001      	adds	r0, #1
 8013362:	d0ad      	beq.n	80132c0 <_printf_i+0x15c>
 8013364:	6823      	ldr	r3, [r4, #0]
 8013366:	079b      	lsls	r3, r3, #30
 8013368:	d413      	bmi.n	8013392 <_printf_i+0x22e>
 801336a:	68e0      	ldr	r0, [r4, #12]
 801336c:	9b03      	ldr	r3, [sp, #12]
 801336e:	4298      	cmp	r0, r3
 8013370:	bfb8      	it	lt
 8013372:	4618      	movlt	r0, r3
 8013374:	e7a6      	b.n	80132c4 <_printf_i+0x160>
 8013376:	2301      	movs	r3, #1
 8013378:	4632      	mov	r2, r6
 801337a:	4649      	mov	r1, r9
 801337c:	4640      	mov	r0, r8
 801337e:	47d0      	blx	sl
 8013380:	3001      	adds	r0, #1
 8013382:	d09d      	beq.n	80132c0 <_printf_i+0x15c>
 8013384:	3501      	adds	r5, #1
 8013386:	68e3      	ldr	r3, [r4, #12]
 8013388:	9903      	ldr	r1, [sp, #12]
 801338a:	1a5b      	subs	r3, r3, r1
 801338c:	42ab      	cmp	r3, r5
 801338e:	dcf2      	bgt.n	8013376 <_printf_i+0x212>
 8013390:	e7eb      	b.n	801336a <_printf_i+0x206>
 8013392:	2500      	movs	r5, #0
 8013394:	f104 0619 	add.w	r6, r4, #25
 8013398:	e7f5      	b.n	8013386 <_printf_i+0x222>
 801339a:	bf00      	nop
 801339c:	08013d5d 	.word	0x08013d5d
 80133a0:	08013d6e 	.word	0x08013d6e

080133a4 <memmove>:
 80133a4:	4288      	cmp	r0, r1
 80133a6:	b510      	push	{r4, lr}
 80133a8:	eb01 0402 	add.w	r4, r1, r2
 80133ac:	d902      	bls.n	80133b4 <memmove+0x10>
 80133ae:	4284      	cmp	r4, r0
 80133b0:	4623      	mov	r3, r4
 80133b2:	d807      	bhi.n	80133c4 <memmove+0x20>
 80133b4:	1e43      	subs	r3, r0, #1
 80133b6:	42a1      	cmp	r1, r4
 80133b8:	d008      	beq.n	80133cc <memmove+0x28>
 80133ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80133be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80133c2:	e7f8      	b.n	80133b6 <memmove+0x12>
 80133c4:	4402      	add	r2, r0
 80133c6:	4601      	mov	r1, r0
 80133c8:	428a      	cmp	r2, r1
 80133ca:	d100      	bne.n	80133ce <memmove+0x2a>
 80133cc:	bd10      	pop	{r4, pc}
 80133ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80133d6:	e7f7      	b.n	80133c8 <memmove+0x24>

080133d8 <_sbrk_r>:
 80133d8:	b538      	push	{r3, r4, r5, lr}
 80133da:	4d06      	ldr	r5, [pc, #24]	@ (80133f4 <_sbrk_r+0x1c>)
 80133dc:	2300      	movs	r3, #0
 80133de:	4604      	mov	r4, r0
 80133e0:	4608      	mov	r0, r1
 80133e2:	602b      	str	r3, [r5, #0]
 80133e4:	f7f2 fc0c 	bl	8005c00 <_sbrk>
 80133e8:	1c43      	adds	r3, r0, #1
 80133ea:	d102      	bne.n	80133f2 <_sbrk_r+0x1a>
 80133ec:	682b      	ldr	r3, [r5, #0]
 80133ee:	b103      	cbz	r3, 80133f2 <_sbrk_r+0x1a>
 80133f0:	6023      	str	r3, [r4, #0]
 80133f2:	bd38      	pop	{r3, r4, r5, pc}
 80133f4:	200095ec 	.word	0x200095ec

080133f8 <_realloc_r>:
 80133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fc:	4680      	mov	r8, r0
 80133fe:	4615      	mov	r5, r2
 8013400:	460c      	mov	r4, r1
 8013402:	b921      	cbnz	r1, 801340e <_realloc_r+0x16>
 8013404:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013408:	4611      	mov	r1, r2
 801340a:	f7ff bc59 	b.w	8012cc0 <_malloc_r>
 801340e:	b92a      	cbnz	r2, 801341c <_realloc_r+0x24>
 8013410:	f7ff fbea 	bl	8012be8 <_free_r>
 8013414:	2400      	movs	r4, #0
 8013416:	4620      	mov	r0, r4
 8013418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801341c:	f000 f81a 	bl	8013454 <_malloc_usable_size_r>
 8013420:	4285      	cmp	r5, r0
 8013422:	4606      	mov	r6, r0
 8013424:	d802      	bhi.n	801342c <_realloc_r+0x34>
 8013426:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801342a:	d8f4      	bhi.n	8013416 <_realloc_r+0x1e>
 801342c:	4629      	mov	r1, r5
 801342e:	4640      	mov	r0, r8
 8013430:	f7ff fc46 	bl	8012cc0 <_malloc_r>
 8013434:	4607      	mov	r7, r0
 8013436:	2800      	cmp	r0, #0
 8013438:	d0ec      	beq.n	8013414 <_realloc_r+0x1c>
 801343a:	42b5      	cmp	r5, r6
 801343c:	462a      	mov	r2, r5
 801343e:	4621      	mov	r1, r4
 8013440:	bf28      	it	cs
 8013442:	4632      	movcs	r2, r6
 8013444:	f7ff fbc2 	bl	8012bcc <memcpy>
 8013448:	4621      	mov	r1, r4
 801344a:	4640      	mov	r0, r8
 801344c:	f7ff fbcc 	bl	8012be8 <_free_r>
 8013450:	463c      	mov	r4, r7
 8013452:	e7e0      	b.n	8013416 <_realloc_r+0x1e>

08013454 <_malloc_usable_size_r>:
 8013454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013458:	1f18      	subs	r0, r3, #4
 801345a:	2b00      	cmp	r3, #0
 801345c:	bfbc      	itt	lt
 801345e:	580b      	ldrlt	r3, [r1, r0]
 8013460:	18c0      	addlt	r0, r0, r3
 8013462:	4770      	bx	lr

08013464 <fmaxf>:
 8013464:	b508      	push	{r3, lr}
 8013466:	ed2d 8b02 	vpush	{d8}
 801346a:	eeb0 8a40 	vmov.f32	s16, s0
 801346e:	eef0 8a60 	vmov.f32	s17, s1
 8013472:	f000 f831 	bl	80134d8 <__fpclassifyf>
 8013476:	b930      	cbnz	r0, 8013486 <fmaxf+0x22>
 8013478:	eeb0 8a68 	vmov.f32	s16, s17
 801347c:	eeb0 0a48 	vmov.f32	s0, s16
 8013480:	ecbd 8b02 	vpop	{d8}
 8013484:	bd08      	pop	{r3, pc}
 8013486:	eeb0 0a68 	vmov.f32	s0, s17
 801348a:	f000 f825 	bl	80134d8 <__fpclassifyf>
 801348e:	2800      	cmp	r0, #0
 8013490:	d0f4      	beq.n	801347c <fmaxf+0x18>
 8013492:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801349a:	dded      	ble.n	8013478 <fmaxf+0x14>
 801349c:	e7ee      	b.n	801347c <fmaxf+0x18>

0801349e <fminf>:
 801349e:	b508      	push	{r3, lr}
 80134a0:	ed2d 8b02 	vpush	{d8}
 80134a4:	eeb0 8a40 	vmov.f32	s16, s0
 80134a8:	eef0 8a60 	vmov.f32	s17, s1
 80134ac:	f000 f814 	bl	80134d8 <__fpclassifyf>
 80134b0:	b930      	cbnz	r0, 80134c0 <fminf+0x22>
 80134b2:	eeb0 8a68 	vmov.f32	s16, s17
 80134b6:	eeb0 0a48 	vmov.f32	s0, s16
 80134ba:	ecbd 8b02 	vpop	{d8}
 80134be:	bd08      	pop	{r3, pc}
 80134c0:	eeb0 0a68 	vmov.f32	s0, s17
 80134c4:	f000 f808 	bl	80134d8 <__fpclassifyf>
 80134c8:	2800      	cmp	r0, #0
 80134ca:	d0f4      	beq.n	80134b6 <fminf+0x18>
 80134cc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80134d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d4:	d5ed      	bpl.n	80134b2 <fminf+0x14>
 80134d6:	e7ee      	b.n	80134b6 <fminf+0x18>

080134d8 <__fpclassifyf>:
 80134d8:	ee10 3a10 	vmov	r3, s0
 80134dc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80134e0:	d00d      	beq.n	80134fe <__fpclassifyf+0x26>
 80134e2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80134e6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80134ea:	d30a      	bcc.n	8013502 <__fpclassifyf+0x2a>
 80134ec:	4b07      	ldr	r3, [pc, #28]	@ (801350c <__fpclassifyf+0x34>)
 80134ee:	1e42      	subs	r2, r0, #1
 80134f0:	429a      	cmp	r2, r3
 80134f2:	d908      	bls.n	8013506 <__fpclassifyf+0x2e>
 80134f4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80134f8:	4258      	negs	r0, r3
 80134fa:	4158      	adcs	r0, r3
 80134fc:	4770      	bx	lr
 80134fe:	2002      	movs	r0, #2
 8013500:	4770      	bx	lr
 8013502:	2004      	movs	r0, #4
 8013504:	4770      	bx	lr
 8013506:	2003      	movs	r0, #3
 8013508:	4770      	bx	lr
 801350a:	bf00      	nop
 801350c:	007ffffe 	.word	0x007ffffe

08013510 <_init>:
 8013510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013512:	bf00      	nop
 8013514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013516:	bc08      	pop	{r3}
 8013518:	469e      	mov	lr, r3
 801351a:	4770      	bx	lr

0801351c <_fini>:
 801351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801351e:	bf00      	nop
 8013520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013522:	bc08      	pop	{r3}
 8013524:	469e      	mov	lr, r3
 8013526:	4770      	bx	lr
