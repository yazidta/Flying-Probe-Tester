
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018298  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  08018468  08018468  00019468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019158  08019158  0001b244  2**0
                  CONTENTS
  4 .ARM          00000008  08019158  08019158  0001a158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019160  08019160  0001b244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019160  08019160  0001a160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019164  08019164  0001a164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  08019168  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e480  20000244  080193ac  0001b244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000e6c4  080193ac  0001b6c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032143  00000000  00000000  0001b274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006f76  00000000  00000000  0004d3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002658  00000000  00000000  00054330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001de3  00000000  00000000  00056988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fe45  00000000  00000000  0005876b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003723e  00000000  00000000  000885b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001062eb  00000000  00000000  000bf7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c5ad9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b36c  00000000  00000000  001c5b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  001d0e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018450 	.word	0x08018450

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	08018450 	.word	0x08018450

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f009 fb71 	bl	800a6a4 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 8000fc2:	bf00      	nop
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000fca:	887b      	ldrh	r3, [r7, #2]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d3f9      	bcc.n	8000fc4 <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f009 fbd7 	bl	800a784 <HAL_TIM_Base_Stop>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af02      	add	r7, sp, #8
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000ff0:	78bb      	ldrb	r3, [r7, #2]
 8000ff2:	f023 030f 	bic.w	r3, r3, #15
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f043 030c 	orr.w	r3, r3, #12
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b21      	ldr	r3, [pc, #132]	@ (800108c <__lcd_i2c_write+0xac>)
 8001006:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8001008:	4b20      	ldr	r3, [pc, #128]	@ (800108c <__lcd_i2c_write+0xac>)
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <__lcd_i2c_write+0xac>)
 800100e:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	f023 030f 	bic.w	r3, r3, #15
 8001016:	b2da      	uxtb	r2, r3
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	4313      	orrs	r3, r2
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <__lcd_i2c_write+0xac>)
 8001026:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	011b      	lsls	r3, r3, #4
 800102c:	b2da      	uxtb	r2, r3
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	f043 030c 	orr.w	r3, r3, #12
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b14      	ldr	r3, [pc, #80]	@ (800108c <__lcd_i2c_write+0xac>)
 800103c:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <__lcd_i2c_write+0xac>)
 8001040:	78da      	ldrb	r2, [r3, #3]
 8001042:	4b12      	ldr	r3, [pc, #72]	@ (800108c <__lcd_i2c_write+0xac>)
 8001044:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8001046:	78bb      	ldrb	r3, [r7, #2]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	b2da      	uxtb	r2, r3
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	4313      	orrs	r3, r2
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f043 0308 	orr.w	r3, r3, #8
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <__lcd_i2c_write+0xac>)
 800105a:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6818      	ldr	r0, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	889b      	ldrh	r3, [r3, #4]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	b299      	uxth	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2306      	movs	r3, #6
 8001070:	4a06      	ldr	r2, [pc, #24]	@ (800108c <__lcd_i2c_write+0xac>)
 8001072:	f006 feb5 	bl	8007de0 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	2132      	movs	r1, #50	@ 0x32
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff93 	bl	8000fa8 <__lcd_delay_us>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000260 	.word	0x20000260

08001090 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	461a      	mov	r2, r3
 80010a0:	2100      	movs	r1, #0
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff ff9c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	461a      	mov	r2, r3
 80010c0:	2101      	movs	r1, #1
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ff8c 	bl	8000fe0 <__lcd_i2c_write>
}
 80010c8:	bf00      	nop
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff61 	bl	8000fa8 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010e6:	2103      	movs	r1, #3
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ffd1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f241 3188 	movw	r1, #5000	@ 0x1388
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff56 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80010fc:	2103      	movs	r1, #3
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffc6 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff4b 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8001112:	2103      	movs	r1, #3
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff ffbb 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff40 	bl	8000fa8 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8001128:	2102      	movs	r1, #2
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff35 	bl	8000fa8 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 800113e:	2128      	movs	r1, #40	@ 0x28
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ffa5 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 8001146:	210c      	movs	r1, #12
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffa1 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 800114e:	2101      	movs	r1, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff ff9d 	bl	8001090 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff22 	bl	8000fa8 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 8001164:	2106      	movs	r1, #6
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff92 	bl	8001090 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2201      	movs	r2, #1
 8001170:	741a      	strb	r2, [r3, #16]
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 8001186:	78fb      	ldrb	r3, [r7, #3]
 8001188:	4619      	mov	r1, r3
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff90 	bl	80010b0 <__lcd_i2c_write_data>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
 80011a6:	e00a      	b.n	80011be <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff7c 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfc      	ldrb	r4, [r7, #15]
 80011c0:	6838      	ldr	r0, [r7, #0]
 80011c2:	f7ff f825 	bl	8000210 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	429c      	cmp	r4, r3
 80011ca:	d3ed      	bcc.n	80011a8 <LCD_I2C_printStr+0x10>
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd90      	pop	{r4, r7, pc}
	...

080011d8 <LCD_I2C_Cursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_Cursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
 80011e4:	4613      	mov	r3, r2
 80011e6:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80011e8:	78fb      	ldrb	r3, [r7, #3]
 80011ea:	4a07      	ldr	r2, [pc, #28]	@ (8001208 <LCD_I2C_Cursor+0x30>)
 80011ec:	5cd2      	ldrb	r2, [r2, r3]
 80011ee:	78bb      	ldrb	r3, [r7, #2]
 80011f0:	4413      	add	r3, r2
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	3b80      	subs	r3, #128	@ 0x80
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff48 	bl	8001090 <__lcd_i2c_write_command>
  #endif
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	08018938 	.word	0x08018938

0800120c <LCD_I2C_SetCursor>:
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col){
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
 8001218:	4613      	mov	r3, r2
 800121a:	70bb      	strb	r3, [r7, #2]
	if(row >=2){
 800121c:	78fb      	ldrb	r3, [r7, #3]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d90a      	bls.n	8001238 <LCD_I2C_SetCursor+0x2c>
		LCD_I2C_Cursor(hlcd,row-2,col+20);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	3b02      	subs	r3, #2
 8001226:	b2d9      	uxtb	r1, r3
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	3314      	adds	r3, #20
 800122c:	b2db      	uxtb	r3, r3
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffd1 	bl	80011d8 <LCD_I2C_Cursor>
}
	else{
		LCD_I2C_Cursor(hlcd,row,col);
	}
}
 8001236:	e005      	b.n	8001244 <LCD_I2C_SetCursor+0x38>
		LCD_I2C_Cursor(hlcd,row,col);
 8001238:	78ba      	ldrb	r2, [r7, #2]
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	4619      	mov	r1, r3
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffca 	bl	80011d8 <LCD_I2C_Cursor>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 8001254:	2101      	movs	r1, #1
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff1a 	bl	8001090 <__lcd_i2c_write_command>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <LCD_I2C_ClearAllLines>:
void LCD_I2C_ClearAllLines(LCD_I2C_HandleTypeDef * hlcd){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 4; i++) {
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e00d      	b.n	800128e <LCD_I2C_ClearAllLines+0x2a>
        LCD_I2C_SetCursor(hlcd, i, 0);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2200      	movs	r2, #0
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffc6 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // 20 spaces
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <LCD_I2C_ClearAllLines+0x3c>)
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ff88 	bl	8001198 <LCD_I2C_printStr>
    for (int i = 0; i < 4; i++) {
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	3301      	adds	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2b03      	cmp	r3, #3
 8001292:	ddee      	ble.n	8001272 <LCD_I2C_ClearAllLines+0xe>
   }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08018474 	.word	0x08018474

080012a4 <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	460b      	mov	r3, r1
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	3340      	adds	r3, #64	@ 0x40
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	4619      	mov	r1, r3
 80012be:	68f8      	ldr	r0, [r7, #12]
 80012c0:	f7ff fee6 	bl	8001090 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 80012c4:	2300      	movs	r3, #0
 80012c6:	75fb      	strb	r3, [r7, #23]
 80012c8:	e00a      	b.n	80012e0 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	4619      	mov	r1, r3
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff feeb 	bl	80010b0 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 80012da:	7dfb      	ldrb	r3, [r7, #23]
 80012dc:	3301      	adds	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b07      	cmp	r3, #7
 80012e4:	d9f1      	bls.n	80012ca <LCD_I2C_DefineChar+0x26>
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 80012fe:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8001300:	69b8      	ldr	r0, [r7, #24]
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 800130a:	4a21      	ldr	r2, [pc, #132]	@ (8001390 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001314:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	461a      	mov	r2, r3
 800131e:	2100      	movs	r1, #0
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffbf 	bl	80012a4 <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	77fb      	strb	r3, [r7, #31]
 800132a:	e025      	b.n	8001378 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 800132c:	7ffb      	ldrb	r3, [r7, #31]
 800132e:	3303      	adds	r3, #3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ff68 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 800133c:	2100      	movs	r1, #0
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ff1b 	bl	800117a <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fe2b 	bl	8000fa8 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 8001352:	7ffb      	ldrb	r3, [r7, #31]
 8001354:	3303      	adds	r3, #3
 8001356:	b2da      	uxtb	r2, r3
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff55 	bl	800120c <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 8001362:	7ffb      	ldrb	r3, [r7, #31]
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4413      	add	r3, r2
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fe9f 	bl	80010b0 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 8001372:	7ffb      	ldrb	r3, [r7, #31]
 8001374:	3301      	adds	r3, #1
 8001376:	77fb      	strb	r3, [r7, #31]
 8001378:	7ffa      	ldrb	r2, [r7, #31]
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3d5      	bcc.n	800132c <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	0801848c 	.word	0x0801848c
 8001390:	08018498 	.word	0x08018498

08001394 <LCD_I2C_menuTemplate>:
uint8_t LCD_I2C_menuTemplate(LCD_I2C_HandleTypeDef* hlcd,
                             ENC_Handle_TypeDef* henc,
                             const char* displayItems[],
                             uint8_t numItems,
                             bool backOption)
{
 8001394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001398:	b091      	sub	sp, #68	@ 0x44
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	70fb      	strb	r3, [r7, #3]
 80013a4:	466b      	mov	r3, sp
 80013a6:	461e      	mov	r6, r3
    LCD_I2C_ClearAllLines(hlcd);
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff5b 	bl	8001264 <LCD_I2C_ClearAllLines>

    // Determine total options based on whether a back option is added
    uint8_t totalOptions = backOption ? numItems + 1 : numItems;
 80013ae:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <LCD_I2C_menuTemplate+0x2a>
 80013b6:	78fb      	ldrb	r3, [r7, #3]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	e000      	b.n	80013c0 <LCD_I2C_menuTemplate+0x2c>
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

    // Create a local array to hold the menu items
    const char* menuItems[totalOptions];
 80013c4:	f897 103b 	ldrb.w	r1, [r7, #59]	@ 0x3b
 80013c8:	460b      	mov	r3, r1
 80013ca:	3b01      	subs	r3, #1
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80013ce:	b2cb      	uxtb	r3, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	4698      	mov	r8, r3
 80013d4:	4691      	mov	r9, r2
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80013e2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80013e6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80013ea:	b2cb      	uxtb	r3, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	461c      	mov	r4, r3
 80013f0:	4615      	mov	r5, r2
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	f04f 0300 	mov.w	r3, #0
 80013fa:	016b      	lsls	r3, r5, #5
 80013fc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001400:	0162      	lsls	r2, r4, #5
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	3307      	adds	r3, #7
 8001408:	08db      	lsrs	r3, r3, #3
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	ebad 0d03 	sub.w	sp, sp, r3
 8001410:	466b      	mov	r3, sp
 8001412:	3303      	adds	r3, #3
 8001414:	089b      	lsrs	r3, r3, #2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	633b      	str	r3, [r7, #48]	@ 0x30

    // Populate the menu items array, inserting "Back" at index 0 if needed.
    if (backOption) {
 800141a:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01e      	beq.n	8001460 <LCD_I2C_menuTemplate+0xcc>
        menuItems[0] = "Back";
 8001422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001424:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <LCD_I2C_menuTemplate+0x20c>)
 8001426:	601a      	str	r2, [r3, #0]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800142e:	e010      	b.n	8001452 <LCD_I2C_menuTemplate+0xbe>
            menuItems[i+1] = displayItems[i];
 8001430:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800143e:	3201      	adds	r2, #1
 8001440:	6819      	ldr	r1, [r3, #0]
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001448:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8001452:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001456:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800145a:	429a      	cmp	r2, r3
 800145c:	d3e8      	bcc.n	8001430 <LCD_I2C_menuTemplate+0x9c>
 800145e:	e019      	b.n	8001494 <LCD_I2C_menuTemplate+0x100>
        }
    } else {
        for (uint8_t i = 0; i < totalOptions; i++) {
 8001460:	2300      	movs	r3, #0
 8001462:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001466:	e00f      	b.n	8001488 <LCD_I2C_menuTemplate+0xf4>
            menuItems[i] = displayItems[i];
 8001468:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8001476:	6819      	ldr	r1, [r3, #0]
 8001478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800147a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for (uint8_t i = 0; i < totalOptions; i++) {
 800147e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8001482:	3301      	adds	r3, #1
 8001484:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8001488:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800148c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8001490:	429a      	cmp	r2, r3
 8001492:	d3e9      	bcc.n	8001468 <LCD_I2C_menuTemplate+0xd4>
        }
    }

    uint8_t selectedOption = 0;       // Current selected menu item
 8001494:	2300      	movs	r3, #0
 8001496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t previousOption = 255;     // Set to an invalid option to force the first update
 800149a:	23ff      	movs	r3, #255	@ 0xff
 800149c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
//        AddBackOption(menuItems, totalOptions);
//    }

    while (1) {
        // Get the current encoder step count (assuming ENC_GetCounter returns a signed value if needed)
        uint32_t encoderStep = ENC_GetCounter(henc);
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f002 f813 	bl	80034cc <ENC_GetCounter>
 80014a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        // Normalize encoder steps to the range of [0, totalOptions-1]
        selectedOption = encoderStep % totalOptions;
 80014a8:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80014ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80014b2:	fb01 f202 	mul.w	r2, r1, r2
 80014b6:	1a9b      	subs	r3, r3, r2
 80014b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        // (Since selectedOption is unsigned, the check for negative values is unnecessary.)

        // Update the display only if the selection has changed
        if (selectedOption != previousOption) {
 80014bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014c0:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d042      	beq.n	800154e <LCD_I2C_menuTemplate+0x1ba>
            previousOption = selectedOption;
 80014c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

            // Clear the display lines
            LCD_I2C_ClearAllLines(hlcd);
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fec7 	bl	8001264 <LCD_I2C_ClearAllLines>

            // Update menu display with the current menu items
            for (uint8_t i = 0; i < totalOptions; i++) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80014dc:	e031      	b.n	8001542 <LCD_I2C_menuTemplate+0x1ae>
                LCD_I2C_SetCursor(hlcd, i, 0);
 80014de:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80014e2:	2200      	movs	r2, #0
 80014e4:	4619      	mov	r1, r3
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f7ff fe90 	bl	800120c <LCD_I2C_SetCursor>

                char formattedLine[21];
                if (i == selectedOption) {
 80014ec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <LCD_I2C_menuTemplate+0x17c>
                    // Highlight the selected item
                    snprintf(formattedLine, sizeof(formattedLine), ">%-19s", menuItems[i]);
 80014f8:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80014fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001502:	f107 0010 	add.w	r0, r7, #16
 8001506:	4a27      	ldr	r2, [pc, #156]	@ (80015a4 <LCD_I2C_menuTemplate+0x210>)
 8001508:	2115      	movs	r1, #21
 800150a:	f014 fdfb 	bl	8016104 <sniprintf>
 800150e:	e00a      	b.n	8001526 <LCD_I2C_menuTemplate+0x192>
                } else {
                    snprintf(formattedLine, sizeof(formattedLine), " %-19s", menuItems[i]);
 8001510:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800151a:	f107 0010 	add.w	r0, r7, #16
 800151e:	4a22      	ldr	r2, [pc, #136]	@ (80015a8 <LCD_I2C_menuTemplate+0x214>)
 8001520:	2115      	movs	r1, #21
 8001522:	f014 fdef 	bl	8016104 <sniprintf>
                }
                LCD_I2C_printStr(hlcd, formattedLine);
 8001526:	f107 0310 	add.w	r3, r7, #16
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fe33 	bl	8001198 <LCD_I2C_printStr>
                osDelay(1);
 8001532:	2001      	movs	r0, #1
 8001534:	f010 ff23 	bl	801237e <osDelay>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8001538:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800153c:	3301      	adds	r3, #1
 800153e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8001542:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8001546:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800154a:	429a      	cmp	r2, r3
 800154c:	d3c7      	bcc.n	80014de <LCD_I2C_menuTemplate+0x14a>
            }
        }

        // Check for the selection button press
        bool buttonInput = read_buttons();
 800154e:	f000 f82f 	bl	80015b0 <read_buttons>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (buttonInput == 0) {
 8001558:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800155c:	f083 0301 	eor.w	r3, r3, #1
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d013      	beq.n	800158e <LCD_I2C_menuTemplate+0x1fa>
            osDelay(200); // Debounce delay
 8001566:	20c8      	movs	r0, #200	@ 0xc8
 8001568:	f010 ff09 	bl	801237e <osDelay>
            if (selectedOption == 0 && backOption) {
 800156c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001570:	2b00      	cmp	r3, #0
 8001572:	d108      	bne.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
 8001574:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8001578:	2b00      	cmp	r3, #0
 800157a:	d004      	beq.n	8001586 <LCD_I2C_menuTemplate+0x1f2>
                currentState = MENU_STATE_PREPARE_MACHINE;
 800157c:	4b0b      	ldr	r3, [pc, #44]	@ (80015ac <LCD_I2C_menuTemplate+0x218>)
 800157e:	2206      	movs	r2, #6
 8001580:	701a      	strb	r2, [r3, #0]

                return ;
 8001582:	46b5      	mov	sp, r6
 8001584:	e007      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            } else {
                return selectedOption;
 8001586:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800158a:	46b5      	mov	sp, r6
 800158c:	e003      	b.n	8001596 <LCD_I2C_menuTemplate+0x202>
            }
        }

        // Delay for smoother updates
        osDelay(100);
 800158e:	2064      	movs	r0, #100	@ 0x64
 8001590:	f010 fef5 	bl	801237e <osDelay>
    while (1) {
 8001594:	e784      	b.n	80014a0 <LCD_I2C_menuTemplate+0x10c>
    }
}
 8001596:	4618      	mov	r0, r3
 8001598:	3744      	adds	r7, #68	@ 0x44
 800159a:	46bd      	mov	sp, r7
 800159c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015a0:	0801850c 	.word	0x0801850c
 80015a4:	08018514 	.word	0x08018514
 80015a8:	0801851c 	.word	0x0801851c
 80015ac:	20002354 	.word	0x20002354

080015b0 <read_buttons>:
//}



bool read_buttons(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
    if (HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin) == GPIO_PIN_SET) return 1; // Down
 80015b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015b8:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <read_buttons+0x20>)
 80015ba:	f006 fb2b 	bl	8007c14 <HAL_GPIO_ReadPin>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <read_buttons+0x18>
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <read_buttons+0x1a>
    else return 0;
 80015c8:	2300      	movs	r3, #0

}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40020c00 	.word	0x40020c00

080015d4 <MountSDCard>:


FRESULT MountSDCard(FATFS* FatFs) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return f_mount(FatFs, "", 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <MountSDCard+0x1c>)
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f00f fcb3 	bl	8010f4c <f_mount>
 80015e6:	4603      	mov	r3, r0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	08018524 	.word	0x08018524

080015f4 <OpenRootDir>:

FRESULT OpenRootDir(DIR* dir) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    return f_opendir(dir, "/");
 80015fc:	4904      	ldr	r1, [pc, #16]	@ (8001610 <OpenRootDir+0x1c>)
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f010 fb8d 	bl	8011d1e <f_opendir>
 8001604:	4603      	mov	r3, r0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	08018528 	.word	0x08018528

08001614 <ReadFiles>:

uint8_t ReadFiles(DIR* dir, char fileList[][20 + 1], uint8_t maxFiles) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b0cc      	sub	sp, #304	@ 0x130
 8001618:	af00      	add	r7, sp, #0
 800161a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800161e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001628:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800162c:	6019      	str	r1, [r3, #0]
 800162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001632:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8001636:	701a      	strb	r2, [r3, #0]
    FILINFO fno;
    uint8_t count = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    FRESULT fres;

    while (count < maxFiles) {
 800163e:	e039      	b.n	80016b4 <ReadFiles+0xa0>
        fres = f_readdir(dir, &fno);
 8001640:	f107 0214 	add.w	r2, r7, #20
 8001644:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001648:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800164c:	4611      	mov	r1, r2
 800164e:	6818      	ldr	r0, [r3, #0]
 8001650:	f010 fc55 	bl	8011efe <f_readdir>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
        if (fres != FR_OK || fno.fname[0] == '\0') break;
 800165a:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800165e:	2b00      	cmp	r3, #0
 8001660:	d131      	bne.n	80016c6 <ReadFiles+0xb2>
 8001662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001666:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800166a:	7d9b      	ldrb	r3, [r3, #22]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d02a      	beq.n	80016c6 <ReadFiles+0xb2>
        if (!(fno.fattrib & AM_DIR)) {
 8001670:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001674:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001678:	7a1b      	ldrb	r3, [r3, #8]
 800167a:	f003 0310 	and.w	r3, r3, #16
 800167e:	2b00      	cmp	r3, #0
 8001680:	d118      	bne.n	80016b4 <ReadFiles+0xa0>
            snprintf(fileList[count], 20 + 1, "%-20s", fno.fname);
 8001682:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00da      	lsls	r2, r3, #3
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8001694:	f5a2 7294 	sub.w	r2, r2, #296	@ 0x128
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	18d0      	adds	r0, r2, r3
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	3316      	adds	r3, #22
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <ReadFiles+0xc0>)
 80016a4:	2115      	movs	r1, #21
 80016a6:	f014 fd2d 	bl	8016104 <sniprintf>
            count++;
 80016aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80016ae:	3301      	adds	r3, #1
 80016b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    while (count < maxFiles) {
 80016b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80016b8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80016bc:	f897 212f 	ldrb.w	r2, [r7, #303]	@ 0x12f
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d3bc      	bcc.n	8001640 <ReadFiles+0x2c>
        }
    }

    return count;
 80016c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	0801852c 	.word	0x0801852c

080016d8 <DisplayMenu>:

void AddBackOption(char menuItems[][20 + 1], uint8_t index) {
    snprintf(menuItems[index], 20 + 1, "%-20s", "Back");
}

void DisplayMenu(LCD_I2C_HandleTypeDef* hlcd, char fileList[][20 + 1], uint8_t fileCount, uint8_t selectedIndex) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	4611      	mov	r1, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	460b      	mov	r3, r1
 80016e8:	71fb      	strb	r3, [r7, #7]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71bb      	strb	r3, [r7, #6]
    // Clear the LCD
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	e00f      	b.n	8001716 <DisplayMenu+0x3e>
        LCD_I2C_SetCursor(hlcd, i, 0);
 80016f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016fa:	2200      	movs	r2, #0
 80016fc:	4619      	mov	r1, r3
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f7ff fd84 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001704:	493d      	ldr	r1, [pc, #244]	@ (80017fc <DisplayMenu+0x124>)
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f7ff fd46 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 800170c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001710:	3301      	adds	r3, #1
 8001712:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001716:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800171a:	2b03      	cmp	r3, #3
 800171c:	d9eb      	bls.n	80016f6 <DisplayMenu+0x1e>
    }

    // Determine the window of files to display
    uint8_t startIdx = 0;
 800171e:	2300      	movs	r3, #0
 8001720:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    if (selectedIndex >= LCD_ROWS) {
 8001724:	79bb      	ldrb	r3, [r7, #6]
 8001726:	2b03      	cmp	r3, #3
 8001728:	d903      	bls.n	8001732 <DisplayMenu+0x5a>
        startIdx = selectedIndex - (LCD_ROWS - 1);
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	3b03      	subs	r3, #3
 800172e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    }

    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001732:	2300      	movs	r3, #0
 8001734:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8001738:	e057      	b.n	80017ea <DisplayMenu+0x112>
        uint8_t displayIdx = startIdx + i;
 800173a:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800173e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001742:	4413      	add	r3, r2
 8001744:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        if (displayIdx >= fileCount) {
 8001748:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	429a      	cmp	r2, r3
 8001750:	d30b      	bcc.n	800176a <DisplayMenu+0x92>
            // Clear remaining lines if any
            LCD_I2C_SetCursor(hlcd, i, 0);
 8001752:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd56 	bl	800120c <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "                    ");
 8001760:	4926      	ldr	r1, [pc, #152]	@ (80017fc <DisplayMenu+0x124>)
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd18 	bl	8001198 <LCD_I2C_printStr>
 8001768:	e03a      	b.n	80017e0 <DisplayMenu+0x108>
            continue;
        }

        // Prepare the formatted line with cursor
        char formattedLine[20 + 1] = {0};
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	f107 0318 	add.w	r3, r7, #24
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	741a      	strb	r2, [r3, #16]
        if (displayIdx == selectedIndex) {
 800177e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001782:	79bb      	ldrb	r3, [r7, #6]
 8001784:	429a      	cmp	r2, r3
 8001786:	d10f      	bne.n	80017a8 <DisplayMenu+0xd0>
            snprintf(formattedLine, sizeof(formattedLine), "> %-19s", fileList[displayIdx]);
 8001788:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00da      	lsls	r2, r3, #3
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	f107 0014 	add.w	r0, r7, #20
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <DisplayMenu+0x128>)
 80017a0:	2115      	movs	r1, #21
 80017a2:	f014 fcaf 	bl	8016104 <sniprintf>
 80017a6:	e00e      	b.n	80017c6 <DisplayMenu+0xee>
        } else {
            snprintf(formattedLine, sizeof(formattedLine), "  %-19s", fileList[displayIdx]);
 80017a8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	00da      	lsls	r2, r3, #3
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	4413      	add	r3, r2
 80017ba:	f107 0014 	add.w	r0, r7, #20
 80017be:	4a11      	ldr	r2, [pc, #68]	@ (8001804 <DisplayMenu+0x12c>)
 80017c0:	2115      	movs	r1, #21
 80017c2:	f014 fc9f 	bl	8016104 <sniprintf>
        }

        // Write to the LCD
        LCD_I2C_SetCursor(hlcd, i, 0);
 80017c6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f7ff fd1c 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, formattedLine);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fcdc 	bl	8001198 <LCD_I2C_printStr>
    for (uint8_t i = 0; i < LCD_ROWS; i++) {
 80017e0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 80017ea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d9a3      	bls.n	800173a <DisplayMenu+0x62>
    }
}
 80017f2:	bf00      	nop
 80017f4:	bf00      	nop
 80017f6:	3730      	adds	r7, #48	@ 0x30
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	08018474 	.word	0x08018474
 8001800:	08018534 	.word	0x08018534
 8001804:	0801853c 	.word	0x0801853c

08001808 <LCD_I2C_DisplaySDMenu>:

void LCD_I2C_DisplaySDMenu(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	f2ad 4d5c 	subw	sp, sp, #1116	@ 0x45c
 800180e:	af00      	add	r7, sp, #0
 8001810:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001814:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800181e:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 8001822:	6019      	str	r1, [r3, #0]
    FATFS FatFs;
    FRESULT fres;
    DIR dir;
    char fileList[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    char fileListBackoption[MAX_FILES + 1][20 + 1]; // +1 for "Back"
    uint8_t fileCount = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b

    fres = MountSDCard(&FatFs);
 800182a:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fed0 	bl	80015d4 <MountSDCard>
 8001834:	4603      	mov	r3, r0
 8001836:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
    if (fres != FR_OK) {
 800183a:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 800183e:	2b00      	cmp	r3, #0
 8001840:	d01c      	beq.n	800187c <LCD_I2C_DisplaySDMenu+0x74>
    	LCD_I2C_ClearAllLines(hlcd);
 8001842:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001846:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	f7ff fd0a 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001850:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001854:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f7ff fcd5 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Failed to mount");
 8001862:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001866:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800186a:	49d8      	ldr	r1, [pc, #864]	@ (8001bcc <LCD_I2C_DisplaySDMenu+0x3c4>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f7ff fc93 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 8001872:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001876:	f005 fb11 	bl	8006e9c <HAL_Delay>
        return;
 800187a:	e1a3      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }
    else{
    fres = OpenRootDir(&dir);
 800187c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff feb7 	bl	80015f4 <OpenRootDir>
 8001886:	4603      	mov	r3, r0
 8001888:	f887 344a 	strb.w	r3, [r7, #1098]	@ 0x44a
    if (fres != FR_OK) {
 800188c:	f897 344a 	ldrb.w	r3, [r7, #1098]	@ 0x44a
 8001890:	2b00      	cmp	r3, #0
 8001892:	d021      	beq.n	80018d8 <LCD_I2C_DisplaySDMenu+0xd0>
    	LCD_I2C_ClearAllLines(hlcd);
 8001894:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001898:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800189c:	6818      	ldr	r0, [r3, #0]
 800189e:	f7ff fce1 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 80018a2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80018a6:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	f7ff fcac 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open dir failed");
 80018b4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80018b8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80018bc:	49c4      	ldr	r1, [pc, #784]	@ (8001bd0 <LCD_I2C_DisplaySDMenu+0x3c8>)
 80018be:	6818      	ldr	r0, [r3, #0]
 80018c0:	f7ff fc6a 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 0);
 80018c4:	2200      	movs	r2, #0
 80018c6:	49c3      	ldr	r1, [pc, #780]	@ (8001bd4 <LCD_I2C_DisplaySDMenu+0x3cc>)
 80018c8:	2000      	movs	r0, #0
 80018ca:	f00f fb3f 	bl	8010f4c <f_mount>
        HAL_Delay(2000);
 80018ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018d2:	f005 fae3 	bl	8006e9c <HAL_Delay>
        return;
 80018d6:	e175      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }

    fileCount = ReadFiles(&dir, fileList, MAX_FILES);
 80018d8:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 80018dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80018e0:	220a      	movs	r2, #10
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fe96 	bl	8001614 <ReadFiles>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
    f_closedir(&dir);
 80018ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80018f2:	4618      	mov	r0, r3
 80018f4:	f010 fad8 	bl	8011ea8 <f_closedir>
    f_mount(NULL, "", 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	49b6      	ldr	r1, [pc, #728]	@ (8001bd4 <LCD_I2C_DisplaySDMenu+0x3cc>)
 80018fc:	2000      	movs	r0, #0
 80018fe:	f00f fb25 	bl	8010f4c <f_mount>

    // Add "Back" option

    strncpy(fileListBackoption[0], "Back", 20);
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2214      	movs	r2, #20
 8001908:	49b3      	ldr	r1, [pc, #716]	@ (8001bd8 <LCD_I2C_DisplaySDMenu+0x3d0>)
 800190a:	4618      	mov	r0, r3
 800190c:	f014 fcc3 	bl	8016296 <strncpy>
    for (uint8_t i = 0; i < fileCount; i++) {
 8001910:	2300      	movs	r3, #0
 8001912:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8001916:	e02d      	b.n	8001974 <LCD_I2C_DisplaySDMenu+0x16c>
    	strncpy(fileListBackoption[i + 1], fileList[i], 20);
 8001918:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	f107 0108 	add.w	r1, r7, #8
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	00da      	lsls	r2, r3, #3
 800192a:	1ad2      	subs	r2, r2, r3
 800192c:	1888      	adds	r0, r1, r2
 800192e:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8001932:	f107 01f0 	add.w	r1, r7, #240	@ 0xf0
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	00da      	lsls	r2, r3, #3
 800193e:	1ad2      	subs	r2, r2, r3
 8001940:	188b      	adds	r3, r1, r2
 8001942:	2214      	movs	r2, #20
 8001944:	4619      	mov	r1, r3
 8001946:	f014 fca6 	bl	8016296 <strncpy>
    	fileListBackoption[i + 1][20] = '\0'; // Explicitly null-terminate
 800194a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800194e:	1c5a      	adds	r2, r3, #1
 8001950:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001954:	f5a3 618a 	sub.w	r1, r3, #1104	@ 0x450
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00da      	lsls	r2, r3, #3
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	188b      	adds	r3, r1, r2
 8001964:	3314      	adds	r3, #20
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < fileCount; i++) {
 800196a:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800196e:	3301      	adds	r3, #1
 8001970:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
 8001974:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8001978:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 800197c:	429a      	cmp	r2, r3
 800197e:	d3cb      	bcc.n	8001918 <LCD_I2C_DisplaySDMenu+0x110>
        }
    fileCount++;
 8001980:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 8001984:	3301      	adds	r3, #1
 8001986:	f887 344b 	strb.w	r3, [r7, #1099]	@ 0x44b
   // AddBackOption(fileList, 0);

    if (fileCount == 1) { // Only "Back" is available
 800198a:	f897 344b 	ldrb.w	r3, [r7, #1099]	@ 0x44b
 800198e:	2b01      	cmp	r3, #1
 8001990:	d115      	bne.n	80019be <LCD_I2C_DisplaySDMenu+0x1b6>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001992:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001996:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	f7ff fc34 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "No files found");
 80019a4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80019a8:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80019ac:	498b      	ldr	r1, [pc, #556]	@ (8001bdc <LCD_I2C_DisplaySDMenu+0x3d4>)
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	f7ff fbf2 	bl	8001198 <LCD_I2C_printStr>
        HAL_Delay(2000);
 80019b4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b8:	f005 fa70 	bl	8006e9c <HAL_Delay>
        return;
 80019bc:	e102      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
    }

    uint8_t selectedIndex = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449
    uint8_t previousIndex = 255;
 80019c4:	23ff      	movs	r3, #255	@ 0xff
 80019c6:	f887 3456 	strb.w	r3, [r7, #1110]	@ 0x456

    while (1) {
        uint32_t encoderStep = ENC_GetCounter(henc);
 80019ca:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80019ce:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f001 fd7a 	bl	80034cc <ENC_GetCounter>
 80019d8:	f8c7 0444 	str.w	r0, [r7, #1092]	@ 0x444
        selectedIndex = encoderStep % fileCount;
 80019dc:	f897 244b 	ldrb.w	r2, [r7, #1099]	@ 0x44b
 80019e0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80019e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80019e8:	fb01 f202 	mul.w	r2, r1, r2
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	f887 3449 	strb.w	r3, [r7, #1097]	@ 0x449

        if (selectedIndex != previousIndex) {
 80019f2:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 80019f6:	f897 3456 	ldrb.w	r3, [r7, #1110]	@ 0x456
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d010      	beq.n	8001a20 <LCD_I2C_DisplaySDMenu+0x218>
            previousIndex = selectedIndex;
 80019fe:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a02:	f887 3456 	strb.w	r3, [r7, #1110]	@ 0x456
            DisplayMenu(hlcd, fileListBackoption, fileCount, selectedIndex);
 8001a06:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a0a:	f897 244b 	ldrb.w	r2, [r7, #1099]	@ 0x44b
 8001a0e:	f107 0108 	add.w	r1, r7, #8
 8001a12:	f507 608b 	add.w	r0, r7, #1112	@ 0x458
 8001a16:	f2a0 4054 	subw	r0, r0, #1108	@ 0x454
 8001a1a:	6800      	ldr	r0, [r0, #0]
 8001a1c:	f7ff fe5c 	bl	80016d8 <DisplayMenu>
        }

        // Handle button press for selection
        if (read_buttons() == 0) {
 8001a20:	f7ff fdc6 	bl	80015b0 <read_buttons>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f083 0301 	eor.w	r3, r3, #1
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 80c4 	beq.w	8001bba <LCD_I2C_DisplaySDMenu+0x3b2>
            HAL_Delay(200); // Debounce
 8001a32:	20c8      	movs	r0, #200	@ 0xc8
 8001a34:	f005 fa32 	bl	8006e9c <HAL_Delay>
            // Clear the LCD
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 3455 	strb.w	r3, [r7, #1109]	@ 0x455
 8001a3e:	e016      	b.n	8001a6e <LCD_I2C_DisplaySDMenu+0x266>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8001a40:	f897 1455 	ldrb.w	r1, [r7, #1109]	@ 0x455
 8001a44:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a48:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	f7ff fbdc 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line
 8001a54:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a58:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a5c:	4960      	ldr	r1, [pc, #384]	@ (8001be0 <LCD_I2C_DisplaySDMenu+0x3d8>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	f7ff fb9a 	bl	8001198 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < LCD_ROWS; i++) {
 8001a64:	f897 3455 	ldrb.w	r3, [r7, #1109]	@ 0x455
 8001a68:	3301      	adds	r3, #1
 8001a6a:	f887 3455 	strb.w	r3, [r7, #1109]	@ 0x455
 8001a6e:	f897 3455 	ldrb.w	r3, [r7, #1109]	@ 0x455
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d9e4      	bls.n	8001a40 <LCD_I2C_DisplaySDMenu+0x238>
            }

            if (selectedIndex == 0 ) {
 8001a76:	f897 3449 	ldrb.w	r3, [r7, #1097]	@ 0x449
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80a1 	beq.w	8001bc2 <LCD_I2C_DisplaySDMenu+0x3ba>
                // "Back" selected
                return; // Exit the menu to go back to the previous menu
            } else {
                // "Loading..." selected
                LCD_I2C_SetCursor(hlcd, 0, 0);
 8001a80:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a84:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	f7ff fbbd 	bl	800120c <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "Loading...");
 8001a92:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001a96:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001a9a:	4952      	ldr	r1, [pc, #328]	@ (8001be4 <LCD_I2C_DisplaySDMenu+0x3dc>)
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	f7ff fb7b 	bl	8001198 <LCD_I2C_printStr>
                char* start = fileListBackoption[selectedIndex];
 8001aa2:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001aa6:	f107 0108 	add.w	r1, r7, #8
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	00da      	lsls	r2, r3, #3
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	188b      	adds	r3, r1, r2
 8001ab6:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001aba:	e004      	b.n	8001ac6 <LCD_I2C_DisplaySDMenu+0x2be>
                    start++; // Skip leading spaces/tabs/newlines
 8001abc:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f8c7 3450 	str.w	r3, [r7, #1104]	@ 0x450
                while (*start == ' ' || *start == '\t' || *start == '\n' || *start == '\r') {
 8001ac6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b20      	cmp	r3, #32
 8001ace:	d0f5      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ad0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b09      	cmp	r3, #9
 8001ad8:	d0f0      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ada:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b0a      	cmp	r3, #10
 8001ae2:	d0eb      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
 8001ae4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0d      	cmp	r3, #13
 8001aec:	d0e6      	beq.n	8001abc <LCD_I2C_DisplaySDMenu+0x2b4>
                }

                char* end = start + strlen(start) - 1;
 8001aee:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8001af2:	f7fe fb8d 	bl	8000210 <strlen>
 8001af6:	4603      	mov	r3, r0
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001afe:	4413      	add	r3, r2
 8001b00:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b04:	e008      	b.n	8001b18 <LCD_I2C_DisplaySDMenu+0x310>
                    *end = '\0'; // Remove trailing spaces/tabs/newlines
 8001b06:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
                    end--;
 8001b0e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b12:	3b01      	subs	r3, #1
 8001b14:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
                while (end >= start && (*end == ' ' || *end == '\t' || *end == '\n' || *end == '\r')) {
 8001b18:	f8d7 244c 	ldr.w	r2, [r7, #1100]	@ 0x44c
 8001b1c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d313      	bcc.n	8001b4c <LCD_I2C_DisplaySDMenu+0x344>
 8001b24:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b20      	cmp	r3, #32
 8001b2c:	d0eb      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b2e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b09      	cmp	r3, #9
 8001b36:	d0e6      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b38:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b0a      	cmp	r3, #10
 8001b40:	d0e1      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
 8001b42:	f8d7 344c 	ldr.w	r3, [r7, #1100]	@ 0x44c
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b0d      	cmp	r3, #13
 8001b4a:	d0dc      	beq.n	8001b06 <LCD_I2C_DisplaySDMenu+0x2fe>
                }

                // Move the trimmed string into the original buffer
                if (start != fileListBackoption[selectedIndex]) {
 8001b4c:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b50:	f107 0108 	add.w	r1, r7, #8
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00da      	lsls	r2, r3, #3
 8001b5c:	1ad2      	subs	r2, r2, r3
 8001b5e:	188b      	adds	r3, r1, r2
 8001b60:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d015      	beq.n	8001b94 <LCD_I2C_DisplaySDMenu+0x38c>
                    memmove(fileListBackoption[selectedIndex], start, strlen(start) + 1);
 8001b68:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	4613      	mov	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	4413      	add	r3, r2
 8001b76:	00da      	lsls	r2, r3, #3
 8001b78:	1ad2      	subs	r2, r2, r3
 8001b7a:	188c      	adds	r4, r1, r2
 8001b7c:	f8d7 0450 	ldr.w	r0, [r7, #1104]	@ 0x450
 8001b80:	f7fe fb46 	bl	8000210 <strlen>
 8001b84:	4603      	mov	r3, r0
 8001b86:	3301      	adds	r3, #1
 8001b88:	461a      	mov	r2, r3
 8001b8a:	f8d7 1450 	ldr.w	r1, [r7, #1104]	@ 0x450
 8001b8e:	4620      	mov	r0, r4
 8001b90:	f014 fb2f 	bl	80161f2 <memmove>
                }
                process_file(hlcd, fileListBackoption[selectedIndex]);
 8001b94:	f897 2449 	ldrb.w	r2, [r7, #1097]	@ 0x449
 8001b98:	f107 0108 	add.w	r1, r7, #8
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00da      	lsls	r2, r3, #3
 8001ba4:	1ad2      	subs	r2, r2, r3
 8001ba6:	440a      	add	r2, r1
 8001ba8:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8001bac:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	f000 f818 	bl	8001be8 <process_file>

                // Add your file processing logic here
                return;
 8001bb8:	e004      	b.n	8001bc4 <LCD_I2C_DisplaySDMenu+0x3bc>
            }
        }

        HAL_Delay(100);
 8001bba:	2064      	movs	r0, #100	@ 0x64
 8001bbc:	f005 f96e 	bl	8006e9c <HAL_Delay>
    while (1) {
 8001bc0:	e703      	b.n	80019ca <LCD_I2C_DisplaySDMenu+0x1c2>
                return; // Exit the menu to go back to the previous menu
 8001bc2:	bf00      	nop
    }
    }
}
 8001bc4:	f207 475c 	addw	r7, r7, #1116	@ 0x45c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd90      	pop	{r4, r7, pc}
 8001bcc:	08018544 	.word	0x08018544
 8001bd0:	08018554 	.word	0x08018554
 8001bd4:	08018524 	.word	0x08018524
 8001bd8:	0801850c 	.word	0x0801850c
 8001bdc:	08018564 	.word	0x08018564
 8001be0:	08018474 	.word	0x08018474
 8001be4:	08018574 	.word	0x08018574

08001be8 <process_file>:
void process_file(LCD_I2C_HandleTypeDef* hlcd, const char *filename) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	f5ad 6d90 	sub.w	sp, sp, #1152	@ 0x480
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001bf4:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001bf8:	6018      	str	r0, [r3, #0]
 8001bfa:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001bfe:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c02:	6019      	str	r1, [r3, #0]
    FATFS FatFs;

    FRESULT fres;
    uint8_t numLines = 0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f

    // Mount the SD card
    fres = f_mount(&FatFs, "", 1);
 8001c0a:	f507 730f 	add.w	r3, r7, #572	@ 0x23c
 8001c0e:	2201      	movs	r2, #1
 8001c10:	495e      	ldr	r1, [pc, #376]	@ (8001d8c <process_file+0x1a4>)
 8001c12:	4618      	mov	r0, r3
 8001c14:	f00f f99a 	bl	8010f4c <f_mount>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c1e:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d018      	beq.n	8001c58 <process_file+0x70>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c26:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c2a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	f7ff fb18 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c34:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c38:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	f7ff fae3 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001c46:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c4a:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c4e:	4950      	ldr	r1, [pc, #320]	@ (8001d90 <process_file+0x1a8>)
 8001c50:	6818      	ldr	r0, [r3, #0]
 8001c52:	f7ff faa1 	bl	8001198 <LCD_I2C_printStr>
       // HAL_Delay(2000);
        return;
 8001c56:	e094      	b.n	8001d82 <process_file+0x19a>
    }
    else{
    // Open the file for reading
    FIL file;
    fres = f_open(&file, filename, FA_READ);
 8001c58:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c5c:	f5a3 6390 	sub.w	r3, r3, #1152	@ 0x480
 8001c60:	f107 000c 	add.w	r0, r7, #12
 8001c64:	2201      	movs	r2, #1
 8001c66:	6819      	ldr	r1, [r3, #0]
 8001c68:	f00f f9d4 	bl	8011014 <f_open>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
    if (fres != FR_OK) {
 8001c72:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d067      	beq.n	8001d4a <process_file+0x162>
    	LCD_I2C_ClearAllLines(hlcd);
 8001c7a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c7e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c82:	6818      	ldr	r0, [r3, #0]
 8001c84:	f7ff faee 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001c88:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c8c:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff fab9 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Open file failed");
 8001c9a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001c9e:	f2a3 437c 	subw	r3, r3, #1148	@ 0x47c
 8001ca2:	493c      	ldr	r1, [pc, #240]	@ (8001d94 <process_file+0x1ac>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7ff fa77 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001caa:	2201      	movs	r2, #1
 8001cac:	4937      	ldr	r1, [pc, #220]	@ (8001d8c <process_file+0x1a4>)
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f00f f94c 	bl	8010f4c <f_mount>
 8001cb4:	e065      	b.n	8001d82 <process_file+0x19a>
    }

    // Read the file line by line and store in the array
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
        // Remove trailing newline characters (both '\n' and '\r' if present)
        size_t len = strlen(lines[numLines]);
 8001cb6:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001cba:	019b      	lsls	r3, r3, #6
 8001cbc:	4a36      	ldr	r2, [pc, #216]	@ (8001d98 <process_file+0x1b0>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe faa5 	bl	8000210 <strlen>
 8001cc6:	f8c7 0478 	str.w	r0, [r7, #1144]	@ 0x478
        if (len > 0 && lines[numLines][len - 1] == '\n') {
 8001cca:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d01b      	beq.n	8001d0a <process_file+0x122>
 8001cd2:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001cd6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	492e      	ldr	r1, [pc, #184]	@ (8001d98 <process_file+0x1b0>)
 8001cde:	0192      	lsls	r2, r2, #6
 8001ce0:	440a      	add	r2, r1
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d10f      	bne.n	8001d0a <process_file+0x122>
            lines[numLines][len - 1] = '\0';
 8001cea:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001cee:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4928      	ldr	r1, [pc, #160]	@ (8001d98 <process_file+0x1b0>)
 8001cf6:	0192      	lsls	r2, r2, #6
 8001cf8:	440a      	add	r2, r1
 8001cfa:	4413      	add	r3, r2
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	701a      	strb	r2, [r3, #0]
            len--;
 8001d00:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d04:	3b01      	subs	r3, #1
 8001d06:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
        }
        if (len > 0 && lines[numLines][len - 1] == '\r') {
 8001d0a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d016      	beq.n	8001d40 <process_file+0x158>
 8001d12:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d16:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	491e      	ldr	r1, [pc, #120]	@ (8001d98 <process_file+0x1b0>)
 8001d1e:	0192      	lsls	r2, r2, #6
 8001d20:	440a      	add	r2, r1
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b0d      	cmp	r3, #13
 8001d28:	d10a      	bne.n	8001d40 <process_file+0x158>
            lines[numLines][len - 1]= '\0';
 8001d2a:	f897 247f 	ldrb.w	r2, [r7, #1151]	@ 0x47f
 8001d2e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 8001d32:	3b01      	subs	r3, #1
 8001d34:	4918      	ldr	r1, [pc, #96]	@ (8001d98 <process_file+0x1b0>)
 8001d36:	0192      	lsls	r2, r2, #6
 8001d38:	440a      	add	r2, r1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
        }
        numLines++;
 8001d40:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d44:	3301      	adds	r3, #1
 8001d46:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
    while ((numLines < MAX_LINES) && (f_gets(lines[numLines], MAX_LINE_LENGTH, &file) != NULL)) {
 8001d4a:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d4e:	2b63      	cmp	r3, #99	@ 0x63
 8001d50:	d80d      	bhi.n	8001d6e <process_file+0x186>
 8001d52:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8001d56:	019b      	lsls	r3, r3, #6
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <process_file+0x1b0>)
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f107 020c 	add.w	r2, r7, #12
 8001d60:	2140      	movs	r1, #64	@ 0x40
 8001d62:	4618      	mov	r0, r3
 8001d64:	f010 f946 	bl	8011ff4 <f_gets>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1a3      	bne.n	8001cb6 <process_file+0xce>
    }
    f_close(&file);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00f ffa4 	bl	8011cc0 <f_close>
    f_mount(NULL, "", 1);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4904      	ldr	r1, [pc, #16]	@ (8001d8c <process_file+0x1a4>)
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f00f f8e5 	bl	8010f4c <f_mount>
    }
}
 8001d82:	f507 6790 	add.w	r7, r7, #1152	@ 0x480
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	08018524 	.word	0x08018524
 8001d90:	08018580 	.word	0x08018580
 8001d94:	08018590 	.word	0x08018590
 8001d98:	20000268 	.word	0x20000268

08001d9c <generate_report>:

void generate_report(LCD_I2C_HandleTypeDef* hlcd)
{
 8001d9c:	b590      	push	{r4, r7, lr}
 8001d9e:	f2ad 6d5c 	subw	sp, sp, #1628	@ 0x65c
 8001da2:	af04      	add	r7, sp, #16
 8001da4:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001da8:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dac:	6018      	str	r0, [r3, #0]
    // Mount the SD card

	FATFS FatFs;
	FRESULT fres;
	DIR dir;
    fres = MountSDCard(&FatFs);
 8001dae:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc0e 	bl	80015d4 <MountSDCard>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f887 3643 	strb.w	r3, [r7, #1603]	@ 0x643
    if (fres != FR_OK) {
 8001dbe:	f897 3643 	ldrb.w	r3, [r7, #1603]	@ 0x643
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d018      	beq.n	8001df8 <generate_report+0x5c>
    	LCD_I2C_ClearAllLines(hlcd);
 8001dc6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dca:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	f7ff fa48 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001dd4:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dd8:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	6818      	ldr	r0, [r3, #0]
 8001de2:	f7ff fa13 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "SD mount failed");
 8001de6:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001dea:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001dee:	4985      	ldr	r1, [pc, #532]	@ (8002004 <generate_report+0x268>)
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	f7ff f9d1 	bl	8001198 <LCD_I2C_printStr>
        return;
 8001df6:	e101      	b.n	8001ffc <generate_report+0x260>
    }
    else{
    const char *reportFilename = "test13.txt";
 8001df8:	4b83      	ldr	r3, [pc, #524]	@ (8002008 <generate_report+0x26c>)
 8001dfa:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
	FIL file;

    // Open (or create) the report file for writing
    fres = f_open(&file, reportFilename, FA_WRITE | FA_CREATE_ALWAYS);
 8001dfe:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001e02:	220a      	movs	r2, #10
 8001e04:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00f f903 	bl	8011014 <f_open>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 3643 	strb.w	r3, [r7, #1603]	@ 0x643
    if (fres != FR_OK) {
 8001e14:	f897 3643 	ldrb.w	r3, [r7, #1603]	@ 0x643
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01d      	beq.n	8001e58 <generate_report+0xbc>
    	LCD_I2C_ClearAllLines(hlcd);
 8001e1c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e20:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e24:	6818      	ldr	r0, [r3, #0]
 8001e26:	f7ff fa1d 	bl	8001264 <LCD_I2C_ClearAllLines>
        LCD_I2C_SetCursor(hlcd, 0, 0);
 8001e2a:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e2e:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	f7ff f9e8 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(hlcd, "Report file open failed");
 8001e3c:	f507 63c9 	add.w	r3, r7, #1608	@ 0x648
 8001e40:	f2a3 6344 	subw	r3, r3, #1604	@ 0x644
 8001e44:	4971      	ldr	r1, [pc, #452]	@ (800200c <generate_report+0x270>)
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	f7ff f9a6 	bl	8001198 <LCD_I2C_printStr>
        f_mount(NULL, "", 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4970      	ldr	r1, [pc, #448]	@ (8002010 <generate_report+0x274>)
 8001e50:	2000      	movs	r0, #0
 8001e52:	f00f f87b 	bl	8010f4c <f_mount>
 8001e56:	e0d1      	b.n	8001ffc <generate_report+0x260>
        return;
    }
    UINT bw;
    // Write the header line
    const char *header = "  Net           Test Points          Test result\r\n";
 8001e58:	4b6e      	ldr	r3, [pc, #440]	@ (8002014 <generate_report+0x278>)
 8001e5a:	f8c7 3638 	str.w	r3, [r7, #1592]	@ 0x638
    f_write(&file, header, strlen(header), &bw);
 8001e5e:	f8d7 0638 	ldr.w	r0, [r7, #1592]	@ 0x638
 8001e62:	f7fe f9d5 	bl	8000210 <strlen>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001e6c:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001e70:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 8001e74:	f00f fcf7 	bl	8011866 <f_write>
    char resultStr[10][40];

            for(int i =0 ; i < commandsGcode;i++){
 8001e78:	2300      	movs	r3, #0
 8001e7a:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8001e7e:	e0a1      	b.n	8001fc4 <generate_report+0x228>
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001e80:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4a62      	ldr	r2, [pc, #392]	@ (8002018 <generate_report+0x27c>)
 8001e8e:	1898      	adds	r0, r3, r2
                         (int)coordinates[i].x, (int)coordinates[i].y,
 8001e90:	4a62      	ldr	r2, [pc, #392]	@ (800201c <generate_report+0x280>)
 8001e92:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001e96:	015b      	lsls	r3, r3, #5
 8001e98:	4413      	add	r3, r2
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001e9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
                         (int)coordinates[i].x, (int)coordinates[i].y,
 8001ea2:	4a5e      	ldr	r2, [pc, #376]	@ (800201c <generate_report+0x280>)
 8001ea4:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ea8:	015b      	lsls	r3, r3, #5
 8001eaa:	4413      	add	r3, r2
 8001eac:	3304      	adds	r3, #4
 8001eae:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb6:	ee17 1a90 	vmov	r1, s15
                         (int)coordinates[i+1].x, (int)coordinates[i+1].y);
 8001eba:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	4a56      	ldr	r2, [pc, #344]	@ (800201c <generate_report+0x280>)
 8001ec2:	015b      	lsls	r3, r3, #5
 8001ec4:	4413      	add	r3, r2
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ece:	ee17 4a90 	vmov	r4, s15
                         (int)coordinates[i+1].x, (int)coordinates[i+1].y);
 8001ed2:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <generate_report+0x280>)
 8001eda:	015b      	lsls	r3, r3, #5
 8001edc:	4413      	add	r3, r2
 8001ede:	3304      	adds	r3, #4
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
                snprintf(testPointsStr[i], sizeof(testPointsStr[i]), "%.d, %.d, %.d, %.d",
 8001ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee8:	ee17 3a90 	vmov	r3, s15
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	9401      	str	r4, [sp, #4]
 8001ef0:	9100      	str	r1, [sp, #0]
 8001ef2:	ee17 3a10 	vmov	r3, s14
 8001ef6:	4a4a      	ldr	r2, [pc, #296]	@ (8002020 <generate_report+0x284>)
 8001ef8:	2128      	movs	r1, #40	@ 0x28
 8001efa:	f014 f903 	bl	8016104 <sniprintf>

            	if((i+1 % 2) == 0){
 8001efe:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f06:	d118      	bne.n	8001f3a <generate_report+0x19e>
		            strcpy(resultStr[i], coordinates[i].testResult ? "PASS" : "FAIL");
 8001f08:	f107 0108 	add.w	r1, r7, #8
 8001f0c:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	18ca      	adds	r2, r1, r3
 8001f1a:	4940      	ldr	r1, [pc, #256]	@ (800201c <generate_report+0x280>)
 8001f1c:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f20:	015b      	lsls	r3, r3, #5
 8001f22:	440b      	add	r3, r1
 8001f24:	3308      	adds	r3, #8
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <generate_report+0x194>
 8001f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <generate_report+0x288>)
 8001f2e:	e000      	b.n	8001f32 <generate_report+0x196>
 8001f30:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <generate_report+0x28c>)
 8001f32:	4619      	mov	r1, r3
 8001f34:	4610      	mov	r0, r2
 8001f36:	f014 fa4a 	bl	80163ce <strcpy>

            	}

            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f3a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	4a39      	ldr	r2, [pc, #228]	@ (800202c <generate_report+0x290>)
 8001f48:	1898      	adds	r0, r3, r2
            			 "%-15s %-30s %-10s\n",
            			 coordinates[i].netName, testPointsStr[i], resultStr);
 8001f4a:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001f4e:	015b      	lsls	r3, r3, #5
 8001f50:	3308      	adds	r3, #8
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <generate_report+0x280>)
 8001f54:	4413      	add	r3, r2
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4a2c      	ldr	r2, [pc, #176]	@ (8002018 <generate_report+0x27c>)
 8001f66:	4413      	add	r3, r2
            	snprintf(reportLine[i], sizeof(reportLine[i]),
 8001f68:	f107 0208 	add.w	r2, r7, #8
 8001f6c:	9201      	str	r2, [sp, #4]
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	460b      	mov	r3, r1
 8001f72:	4a2f      	ldr	r2, [pc, #188]	@ (8002030 <generate_report+0x294>)
 8001f74:	2128      	movs	r1, #40	@ 0x28
 8001f76:	f014 f8c5 	bl	8016104 <sniprintf>
                f_write(&file, reportLine[i], strlen(reportLine[i]), &bw);
 8001f7a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4a29      	ldr	r2, [pc, #164]	@ (800202c <generate_report+0x290>)
 8001f88:	189c      	adds	r4, r3, r2
 8001f8a:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4a25      	ldr	r2, [pc, #148]	@ (800202c <generate_report+0x290>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe f938 	bl	8000210 <strlen>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001fa6:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001faa:	4621      	mov	r1, r4
 8001fac:	f00f fc5b 	bl	8011866 <f_write>
                i++;
 8001fb0:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
            for(int i =0 ; i < commandsGcode;i++){
 8001fba:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8001fc4:	f8d7 2644 	ldr.w	r2, [r7, #1604]	@ 0x644
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <generate_report+0x298>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f4ff af57 	bcc.w	8001e80 <generate_report+0xe4>


            }
    f_write(&file, reportLine, strlen(reportLine), &bw);
 8001fd2:	4816      	ldr	r0, [pc, #88]	@ (800202c <generate_report+0x290>)
 8001fd4:	f7fe f91c 	bl	8000210 <strlen>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	f507 7372 	add.w	r3, r7, #968	@ 0x3c8
 8001fde:	f507 70cc 	add.w	r0, r7, #408	@ 0x198
 8001fe2:	4912      	ldr	r1, [pc, #72]	@ (800202c <generate_report+0x290>)
 8001fe4:	f00f fc3f 	bl	8011866 <f_write>
    f_close(&file);
 8001fe8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8001fec:	4618      	mov	r0, r3
 8001fee:	f00f fe67 	bl	8011cc0 <f_close>
    f_mount(NULL, "", 1);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4906      	ldr	r1, [pc, #24]	@ (8002010 <generate_report+0x274>)
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f00e ffa8 	bl	8010f4c <f_mount>
}
}
 8001ffc:	f207 674c 	addw	r7, r7, #1612	@ 0x64c
 8002000:	46bd      	mov	sp, r7
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	08018580 	.word	0x08018580
 8002008:	080185a4 	.word	0x080185a4
 800200c:	080185b0 	.word	0x080185b0
 8002010:	08018524 	.word	0x08018524
 8002014:	080185c8 	.word	0x080185c8
 8002018:	200021a8 	.word	0x200021a8
 800201c:	20002374 	.word	0x20002374
 8002020:	080185fc 	.word	0x080185fc
 8002024:	08018610 	.word	0x08018610
 8002028:	08018618 	.word	0x08018618
 800202c:	20001b68 	.word	0x20001b68
 8002030:	08018620 	.word	0x08018620
 8002034:	200048f4 	.word	0x200048f4

08002038 <HAL_TIM_PWM_PulseFinishedCallback>:

////////// HAL FUNCTIONS //////////

// PWM callback for step counting
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < MAX_MOTORS; i++){
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	e0a4      	b.n	8002190 <HAL_TIM_PWM_PulseFinishedCallback+0x158>
	  if (htim->Instance == motors[i].driver.htim->Instance){ // Check which motor's timer called back
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4956      	ldr	r1, [pc, #344]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	20a4      	movs	r0, #164	@ 0xa4
 8002050:	fb00 f303 	mul.w	r3, r0, r3
 8002054:	440b      	add	r3, r1
 8002056:	3310      	adds	r3, #16
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8094 	bne.w	800218a <HAL_TIM_PWM_PulseFinishedCallback+0x152>
		  motors[i].stepsTaken++;
 8002062:	4a50      	ldr	r2, [pc, #320]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	21a4      	movs	r1, #164	@ 0xa4
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	3370      	adds	r3, #112	@ 0x70
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	494b      	ldr	r1, [pc, #300]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	20a4      	movs	r0, #164	@ 0xa4
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	440b      	add	r3, r1
 8002080:	3370      	adds	r3, #112	@ 0x70
 8002082:	601a      	str	r2, [r3, #0]
		  //TMC2209_CountDistance(&motors[i]);
		  if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_SET){
 8002084:	4a47      	ldr	r2, [pc, #284]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	21a4      	movs	r1, #164	@ 0xa4
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3344      	adds	r3, #68	@ 0x44
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4943      	ldr	r1, [pc, #268]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	20a4      	movs	r0, #164	@ 0xa4
 800209a:	fb00 f303 	mul.w	r3, r0, r3
 800209e:	440b      	add	r3, r1
 80020a0:	3348      	adds	r3, #72	@ 0x48
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	4619      	mov	r1, r3
 80020a6:	4610      	mov	r0, r2
 80020a8:	f005 fdb4 	bl	8007c14 <HAL_GPIO_ReadPin>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d111      	bne.n	80020d6 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
		  		  motors[i].StepsFront++;
 80020b2:	4a3c      	ldr	r2, [pc, #240]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	21a4      	movs	r1, #164	@ 0xa4
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	3390      	adds	r3, #144	@ 0x90
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	4937      	ldr	r1, [pc, #220]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	20a4      	movs	r0, #164	@ 0xa4
 80020ca:	fb00 f303 	mul.w	r3, r0, r3
 80020ce:	440b      	add	r3, r1
 80020d0:	3390      	adds	r3, #144	@ 0x90
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	e027      	b.n	8002126 <HAL_TIM_PWM_PulseFinishedCallback+0xee>
		  }
		  else if(HAL_GPIO_ReadPin(motors[i].driver.dir_port, motors[i].driver.dir_pin) == GPIO_PIN_RESET){
 80020d6:	4a33      	ldr	r2, [pc, #204]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	21a4      	movs	r1, #164	@ 0xa4
 80020dc:	fb01 f303 	mul.w	r3, r1, r3
 80020e0:	4413      	add	r3, r2
 80020e2:	3344      	adds	r3, #68	@ 0x44
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	492f      	ldr	r1, [pc, #188]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	20a4      	movs	r0, #164	@ 0xa4
 80020ec:	fb00 f303 	mul.w	r3, r0, r3
 80020f0:	440b      	add	r3, r1
 80020f2:	3348      	adds	r3, #72	@ 0x48
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	4619      	mov	r1, r3
 80020f8:	4610      	mov	r0, r2
 80020fa:	f005 fd8b 	bl	8007c14 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d110      	bne.n	8002126 <HAL_TIM_PWM_PulseFinishedCallback+0xee>
			  	  motors[i].StepsBack++;
 8002104:	4a27      	ldr	r2, [pc, #156]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	21a4      	movs	r1, #164	@ 0xa4
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	3394      	adds	r3, #148	@ 0x94
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	4923      	ldr	r1, [pc, #140]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	20a4      	movs	r0, #164	@ 0xa4
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	3394      	adds	r3, #148	@ 0x94
 8002124:	601a      	str	r2, [r3, #0]
		  }
          if (motors[i].stepsTaken % motors[i].stepsPerRevolution == 0){ // Count Full steps
 8002126:	4a1f      	ldr	r2, [pc, #124]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	21a4      	movs	r1, #164	@ 0xa4
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3370      	adds	r3, #112	@ 0x70
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	491a      	ldr	r1, [pc, #104]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	20a4      	movs	r0, #164	@ 0xa4
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	440b      	add	r3, r1
 8002144:	3364      	adds	r3, #100	@ 0x64
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	fbb2 f1f3 	udiv	r1, r2, r3
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d119      	bne.n	800218a <HAL_TIM_PWM_PulseFinishedCallback+0x152>
              motors[i].driver.checkSG_RESULT = 1;
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	21a4      	movs	r1, #164	@ 0xa4
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	4413      	add	r3, r2
 8002162:	3330      	adds	r3, #48	@ 0x30
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
              motors[i].fullSteps++;
 8002168:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	21a4      	movs	r1, #164	@ 0xa4
 800216e:	fb01 f303 	mul.w	r3, r1, r3
 8002172:	4413      	add	r3, r2
 8002174:	3374      	adds	r3, #116	@ 0x74
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	490a      	ldr	r1, [pc, #40]	@ (80021a4 <HAL_TIM_PWM_PulseFinishedCallback+0x16c>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	20a4      	movs	r0, #164	@ 0xa4
 8002180:	fb00 f303 	mul.w	r3, r0, r3
 8002184:	440b      	add	r3, r1
 8002186:	3374      	adds	r3, #116	@ 0x74
 8002188:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < MAX_MOTORS; i++){
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3301      	adds	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b03      	cmp	r3, #3
 8002194:	f77f af57 	ble.w	8002046 <HAL_TIM_PWM_PulseFinishedCallback+0xe>
          }
      }

    }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20005844 	.word	0x20005844

080021a8 <TMC2209_SetDirection>:


// Set the direction of the motor
void TMC2209_SetDirection(Motor *motor, GPIO_PinState state) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.dir_port, motor->driver.dir_pin, state);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80021be:	78fa      	ldrb	r2, [r7, #3]
 80021c0:	4619      	mov	r1, r3
 80021c2:	f005 fd3f 	bl	8007c44 <HAL_GPIO_WritePin>
    motor->direction = state;
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <TMC2209_EnableDriver>:

// Enable or disable the driver
void TMC2209_EnableDriver(Motor *motor, GPIO_PinState state) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(motor->driver.enn_port, motor->driver.enn_pin, state); // LOW = motor enabled, HIGH = motor disabled
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f005 fd29 	bl	8007c44 <HAL_GPIO_WritePin>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <TMC2209_SetSpeed>:
    return HAL_GPIO_ReadPin(motor->driver.index_port, motor->driver.index_pin); // Returns the INDEX pin state
}


// Start stepping with PWM
void TMC2209_SetSpeed(Motor *motor, uint32_t StepFrequency) {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
	uint32_t prescaler = motor->driver.htim->Init.Prescaler;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	617b      	str	r3, [r7, #20]
    uint32_t timerClock = HAL_RCC_GetHCLKFreq() / prescaler ;
 800220c:	f006 ffd2 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fbb2 f3f3 	udiv	r3, r2, r3
 8002218:	613b      	str	r3, [r7, #16]
    uint32_t ARR = (timerClock / StepFrequency) - 1; // Auto-reload value
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	3b01      	subs	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(motor->driver.htim, ARR); // Period
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	68fa      	ldr	r2, [r7, #12]
 8002236:	60da      	str	r2, [r3, #12]
    __HAL_TIM_SET_COMPARE(motor->driver.htim, motor->driver.step_channel, ARR / 2); // Duty cycle
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <TMC2209_SetSpeed+0x54>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	0852      	lsrs	r2, r2, #1
 800224a:	635a      	str	r2, [r3, #52]	@ 0x34
 800224c:	e031      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	2b04      	cmp	r3, #4
 8002254:	d106      	bne.n	8002264 <TMC2209_SetSpeed+0x6a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	085b      	lsrs	r3, r3, #1
 8002260:	6393      	str	r3, [r2, #56]	@ 0x38
 8002262:	e026      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d106      	bne.n	800227a <TMC2209_SetSpeed+0x80>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	085b      	lsrs	r3, r3, #1
 8002276:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002278:	e01b      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	2b0c      	cmp	r3, #12
 8002280:	d106      	bne.n	8002290 <TMC2209_SetSpeed+0x96>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	e010      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b10      	cmp	r3, #16
 8002296:	d106      	bne.n	80022a6 <TMC2209_SetSpeed+0xac>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	085b      	lsrs	r3, r3, #1
 80022a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a4:	e005      	b.n	80022b2 <TMC2209_SetSpeed+0xb8>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    motor->driver.stepFrequency = StepFrequency;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	619a      	str	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <TMC2209_Stop>:


// Stop stepping
void TMC2209_Stop(Motor *motor) {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	60bb      	str	r3, [r7, #8]
	TMC2209_EnableDriver(motor, GPIO_PIN_SET);
 80022d4:	2101      	movs	r1, #1
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ff7c 	bl	80021d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Stop_IT(htim, channel);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f008 fd8a 	bl	800adf8 <HAL_TIM_PWM_Stop_IT>
}
 80022e4:	bf00      	nop
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <TMC2209_Start>:

void TMC2209_Start(Motor *motor) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = motor->driver.htim;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	60fb      	str	r3, [r7, #12]
	uint32_t channel = motor->driver.step_channel;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	60bb      	str	r3, [r7, #8]

	TMC2209_EnableDriver(motor, GPIO_PIN_RESET);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff ff66 	bl	80021d4 <TMC2209_EnableDriver>
    HAL_TIM_PWM_Start_IT(htim, channel);
 8002308:	68b9      	ldr	r1, [r7, #8]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f008 fc2c 	bl	800ab68 <HAL_TIM_PWM_Start_IT>
    motor->isStepping = true;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
}
 8002318:	bf00      	nop
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <TMC2209_CountSteps>:


static void TMC2209_CountSteps(Motor *motor, uint32_t totalSteps){ // Static for now unless we need to expose it later
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
	motor->nextTotalSteps = totalSteps;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	679a      	str	r2, [r3, #120]	@ 0x78
	motor->stepsTaken = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	671a      	str	r2, [r3, #112]	@ 0x70

	while (motor->stepsTaken <= motor->nextTotalSteps) {// Wait until we reach required steps and increment position on every step
 8002336:	bf00      	nop
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002342:	429a      	cmp	r2, r3
 8002344:	d9f8      	bls.n	8002338 <TMC2209_CountSteps+0x18>
    // vTaskDelay(10);
	}
	//HAL_Delay(1); // To not fad the cpu --NOTE: CHECK IF THERE SHOULD BE A DELAY

	motor->nextTotalSteps = 0;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	679a      	str	r2, [r3, #120]	@ 0x78
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <TMC2209_MoveTo>:

void TMC2209_checkStatus(Motor *motor, bool *isStepping, uint32_t *nextTotalSteps){
	 *isStepping = motor->isStepping;
     *nextTotalSteps = motor->nextTotalSteps;
}
void TMC2209_MoveTo(Axis *axis, uint8_t motorIndex, float targetPositionMM) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	460b      	mov	r3, r1
 8002362:	ed87 0a01 	vstr	s0, [r7, #4]
 8002366:	72fb      	strb	r3, [r7, #11]
    // Validate the motor index

    if (motorIndex >= MAX_MOTORS_PER_AXIS) {
 8002368:	7afb      	ldrb	r3, [r7, #11]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d903      	bls.n	8002376 <TMC2209_MoveTo+0x1e>
        debug_print("Invalid motor index.\r\n");
 800236e:	4830      	ldr	r0, [pc, #192]	@ (8002430 <TMC2209_MoveTo+0xd8>)
 8002370:	f000 f92a 	bl	80025c8 <debug_print>
        return;
 8002374:	e059      	b.n	800242a <TMC2209_MoveTo+0xd2>
//    }

    // Calculate the distance to move in millimeters
    //motor->currentPositionMM =0;

    float distanceToMoveMM = targetPositionMM - axis->motors[motorIndex]->currentPositionMM;
 8002376:	7afa      	ldrb	r2, [r7, #11]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237e:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002382:	ed97 7a01 	vldr	s14, [r7, #4]
 8002386:	ee77 7a67 	vsub.f32	s15, s14, s15
 800238a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Convert the distance to move into steps
    int32_t stepsToMove = (int32_t)(distanceToMoveMM * axis->stepPerUnit);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	ed93 7a04 	vldr	s14, [r3, #16]
 8002394:	edd7 7a04 	vldr	s15, [r7, #16]
 8002398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a0:	ee17 3a90 	vmov	r3, s15
 80023a4:	617b      	str	r3, [r7, #20]

    // Update the target position in the motor structure
    axis->motors[motorIndex]->nextPositionMM = targetPositionMM;
 80023a6:	7afa      	ldrb	r2, [r7, #11]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    // Decide the direction based on the sign of the steps
    if (stepsToMove > 0) {
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dd08      	ble.n	80023cc <TMC2209_MoveTo+0x74>
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_RESET); // Forward direction
 80023ba:	7afa      	ldrb	r2, [r7, #11]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c2:	2100      	movs	r1, #0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff feef 	bl	80021a8 <TMC2209_SetDirection>
 80023ca:	e00a      	b.n	80023e2 <TMC2209_MoveTo+0x8a>
    } else {
        TMC2209_SetDirection(axis->motors[motorIndex], GPIO_PIN_SET); // Reverse direction
 80023cc:	7afa      	ldrb	r2, [r7, #11]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fee6 	bl	80021a8 <TMC2209_SetDirection>
        stepsToMove = -stepsToMove; // Convert to positive for step count
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	425b      	negs	r3, r3
 80023e0:	617b      	str	r3, [r7, #20]
    }

    // Start the motor

    TMC2209_Start(axis->motors[motorIndex]);
 80023e2:	7afa      	ldrb	r2, [r7, #11]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff ff7e 	bl	80022ec <TMC2209_Start>

    // Set the total steps to move
    axis->motors[motorIndex]->nextTotalSteps = stepsToMove;
 80023f0:	7afa      	ldrb	r2, [r7, #11]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	679a      	str	r2, [r3, #120]	@ 0x78
	TMC2209_CountSteps(axis->motors[motorIndex], stepsToMove);
 80023fc:	7afa      	ldrb	r2, [r7, #11]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff89 	bl	8002320 <TMC2209_CountSteps>

    // Stop the motor
    TMC2209_Stop(axis->motors[motorIndex]);
 800240e:	7afa      	ldrb	r2, [r7, #11]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff52 	bl	80022c0 <TMC2209_Stop>

    // Update the current position in the motor structure
    axis->motors[motorIndex]->currentPositionMM = targetPositionMM;
 800241c:	7afa      	ldrb	r2, [r7, #11]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08018638 	.word	0x08018638

08002434 <TMC2209_MoveAllMotorsTo>:
// Function to move all motors concurrently to their target positions.
// The targetPositionsMM array should have one target position (in millimeters)
// for each motor in the axis. We assume that MAX_MOTORS_PER_AXIS is defined.
void TMC2209_MoveAllMotorsTo(Axis axes[2], float targetPositions[4]) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
    uint8_t axisIndex, motorIndex;

    // Initialize each motor on both axes.
    // The mapping is:
    //   targetPositions[ axisIndex * MAX_MOTORS_PER_AXIS + motorIndex ]
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 800243e:	2300      	movs	r3, #0
 8002440:	77fb      	strb	r3, [r7, #31]
 8002442:	e06d      	b.n	8002520 <TMC2209_MoveAllMotorsTo+0xec>
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002444:	2300      	movs	r3, #0
 8002446:	77bb      	strb	r3, [r7, #30]
 8002448:	e064      	b.n	8002514 <TMC2209_MoveAllMotorsTo+0xe0>
            int targetIndex = axisIndex * MAX_MOTORS_PER_AXIS + motorIndex;
 800244a:	7ffb      	ldrb	r3, [r7, #31]
 800244c:	005a      	lsls	r2, r3, #1
 800244e:	7fbb      	ldrb	r3, [r7, #30]
 8002450:	4413      	add	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
            Motor *motor = axes[axisIndex].motors[motorIndex];
 8002454:	7ffa      	ldrb	r2, [r7, #31]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	461a      	mov	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	7fba      	ldrb	r2, [r7, #30]
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	613b      	str	r3, [r7, #16]
            if (motor == NULL) {
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d04c      	beq.n	800250c <TMC2209_MoveAllMotorsTo+0xd8>
                continue;
            }

            // Calculate the distance (in mm) and convert to steps.
            float distanceToMoveMM = targetPositions[targetIndex] - motor->currentPositionMM;
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	ed93 7a00 	vldr	s14, [r3]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	edd3 7a21 	vldr	s15, [r3, #132]	@ 0x84
 8002484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002488:	edc7 7a03 	vstr	s15, [r7, #12]
            int32_t stepsToMove = (int32_t)(distanceToMoveMM * axes[axisIndex].stepPerUnit);
 800248c:	7ffa      	ldrb	r2, [r7, #31]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	461a      	mov	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4413      	add	r3, r2
 800249c:	ed93 7a04 	vldr	s14, [r3, #16]
 80024a0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ac:	ee17 3a90 	vmov	r3, s15
 80024b0:	60bb      	str	r3, [r7, #8]

            // Save the absolute number of steps required.
            motor->nextTotalSteps = (stepsToMove >= 0) ? stepsToMove : -stepsToMove;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bfb8      	it	lt
 80024b8:	425b      	neglt	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	679a      	str	r2, [r3, #120]	@ 0x78
            // Reset the steps counter.
            motor->stepsTaken = 0;
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	2200      	movs	r2, #0
 80024c4:	671a      	str	r2, [r3, #112]	@ 0x70
            // Store the target position.
            motor->nextPositionMM = targetPositions[targetIndex];
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            // Set the motor direction.
            if (stepsToMove >= 0) {
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db04      	blt.n	80024e6 <TMC2209_MoveAllMotorsTo+0xb2>
                TMC2209_SetDirection(motor, GPIO_PIN_RESET);  // Forward
 80024dc:	2100      	movs	r1, #0
 80024de:	6938      	ldr	r0, [r7, #16]
 80024e0:	f7ff fe62 	bl	80021a8 <TMC2209_SetDirection>
 80024e4:	e003      	b.n	80024ee <TMC2209_MoveAllMotorsTo+0xba>
            } else {
                TMC2209_SetDirection(motor, GPIO_PIN_SET);      // Reverse
 80024e6:	2101      	movs	r1, #1
 80024e8:	6938      	ldr	r0, [r7, #16]
 80024ea:	f7ff fe5d 	bl	80021a8 <TMC2209_SetDirection>
            }

            // Start the motor.
            if(motor->currentPositionMM != motor->nextPositionMM)	TMC2209_Start(motor);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	ed93 7a21 	vldr	s14, [r3, #132]	@ 0x84
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	edd3 7a22 	vldr	s15, [r3, #136]	@ 0x88
 80024fa:	eeb4 7a67 	vcmp.f32	s14, s15
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d004      	beq.n	800250e <TMC2209_MoveAllMotorsTo+0xda>
 8002504:	6938      	ldr	r0, [r7, #16]
 8002506:	f7ff fef1 	bl	80022ec <TMC2209_Start>
 800250a:	e000      	b.n	800250e <TMC2209_MoveAllMotorsTo+0xda>
                continue;
 800250c:	bf00      	nop
        for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800250e:	7fbb      	ldrb	r3, [r7, #30]
 8002510:	3301      	adds	r3, #1
 8002512:	77bb      	strb	r3, [r7, #30]
 8002514:	7fbb      	ldrb	r3, [r7, #30]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d997      	bls.n	800244a <TMC2209_MoveAllMotorsTo+0x16>
    for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 800251a:	7ffb      	ldrb	r3, [r7, #31]
 800251c:	3301      	adds	r3, #1
 800251e:	77fb      	strb	r3, [r7, #31]
 8002520:	7ffb      	ldrb	r3, [r7, #31]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d98e      	bls.n	8002444 <TMC2209_MoveAllMotorsTo+0x10>

        }
    }

    // Poll all motors concurrently. Each motor will be stopped as soon as it finishes.
    bool motorsStillRunning = true;
 8002526:	2301      	movs	r3, #1
 8002528:	777b      	strb	r3, [r7, #29]
    while (motorsStillRunning) {
 800252a:	e044      	b.n	80025b6 <TMC2209_MoveAllMotorsTo+0x182>
        motorsStillRunning = false;  // Assume all motors are finished unless one is still moving.
 800252c:	2300      	movs	r3, #0
 800252e:	777b      	strb	r3, [r7, #29]

        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
 8002534:	e03c      	b.n	80025b0 <TMC2209_MoveAllMotorsTo+0x17c>
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 8002536:	2300      	movs	r3, #0
 8002538:	77bb      	strb	r3, [r7, #30]
 800253a:	e033      	b.n	80025a4 <TMC2209_MoveAllMotorsTo+0x170>
                Motor *motor = axes[axisIndex].motors[motorIndex];
 800253c:	7ffa      	ldrb	r2, [r7, #31]
 800253e:	4613      	mov	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	4413      	add	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4413      	add	r3, r2
 800254c:	7fba      	ldrb	r2, [r7, #30]
 800254e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002552:	61bb      	str	r3, [r7, #24]
                if (motor == NULL) {
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d020      	beq.n	800259c <TMC2209_MoveAllMotorsTo+0x168>
                    continue;
                }
                // If this motor still has steps to take...
                if (motor->nextTotalSteps > 0) {
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800255e:	2b00      	cmp	r3, #0
 8002560:	d01d      	beq.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    if (motor->stepsTaken >= motor->nextTotalSteps) {
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002566:	461a      	mov	r2, r3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800256c:	429a      	cmp	r2, r3
 800256e:	d312      	bcc.n	8002596 <TMC2209_MoveAllMotorsTo+0x162>
                        // This motor has reached its target: stop it and update its current position.
                        TMC2209_Stop(motor);
 8002570:	69b8      	ldr	r0, [r7, #24]
 8002572:	f7ff fea5 	bl	80022c0 <TMC2209_Stop>
                        motor->prevPositionMM = motor->currentPositionMM;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                        motor->currentPositionMM = motor->nextPositionMM;
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                        // Mark this motor as finished.
                        motor->nextTotalSteps = 0;
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2200      	movs	r2, #0
 8002592:	679a      	str	r2, [r3, #120]	@ 0x78
 8002594:	e003      	b.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    } else {
                        // At least one motor is still moving.
                        motorsStillRunning = true;
 8002596:	2301      	movs	r3, #1
 8002598:	777b      	strb	r3, [r7, #29]
 800259a:	e000      	b.n	800259e <TMC2209_MoveAllMotorsTo+0x16a>
                    continue;
 800259c:	bf00      	nop
            for (motorIndex = 0; motorIndex < MAX_MOTORS_PER_AXIS; motorIndex++) {
 800259e:	7fbb      	ldrb	r3, [r7, #30]
 80025a0:	3301      	adds	r3, #1
 80025a2:	77bb      	strb	r3, [r7, #30]
 80025a4:	7fbb      	ldrb	r3, [r7, #30]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d9c8      	bls.n	800253c <TMC2209_MoveAllMotorsTo+0x108>
        for (axisIndex = 0; axisIndex < 2; axisIndex++) {
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	3301      	adds	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]
 80025b0:	7ffb      	ldrb	r3, [r7, #31]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d9bf      	bls.n	8002536 <TMC2209_MoveAllMotorsTo+0x102>
    while (motorsStillRunning) {
 80025b6:	7f7b      	ldrb	r3, [r7, #29]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1b7      	bne.n	800252c <TMC2209_MoveAllMotorsTo+0xf8>
        }
        // Delay briefly to avoid hogging the CPU.
        // If you're not using an RTOS, replace vTaskDelay(1) with a suitable delay function (e.g., HAL_Delay(1)).
        //vTaskDelay(1);
    }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <debug_print>:
    }
    (void)dummy;
}


void debug_print(const char* msg) {
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)msg, strlen(msg));
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7fd fe1d 	bl	8000210 <strlen>
 80025d6:	4603      	mov	r3, r0
 80025d8:	b29b      	uxth	r3, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4803      	ldr	r0, [pc, #12]	@ (80025ec <debug_print+0x24>)
 80025e0:	f009 fedc 	bl	800c39c <HAL_UART_Transmit_DMA>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20005014 	.word	0x20005014

080025f0 <calculate_CRC>:
    ptr += sprintf(ptr, "]\r\n");

    debug_print(buffer);
}

uint8_t calculate_CRC(uint8_t *datagram, uint8_t length) {
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80025fc:	2300      	movs	r3, #0
 80025fe:	73fb      	strb	r3, [r7, #15]
    for(uint8_t i = 0; i < length; i++) {
 8002600:	2300      	movs	r3, #0
 8002602:	73bb      	strb	r3, [r7, #14]
 8002604:	e027      	b.n	8002656 <calculate_CRC+0x66>
        uint8_t currentByte = datagram[i];
 8002606:	7bbb      	ldrb	r3, [r7, #14]
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8002610:	2300      	movs	r3, #0
 8002612:	733b      	strb	r3, [r7, #12]
 8002614:	e019      	b.n	800264a <calculate_CRC+0x5a>
            if((crc >> 7) ^ (currentByte & 0x01)) {
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	09db      	lsrs	r3, r3, #7
 800261a:	b2db      	uxtb	r3, r3
 800261c:	461a      	mov	r2, r3
 800261e:	7b7b      	ldrb	r3, [r7, #13]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	429a      	cmp	r2, r3
 8002626:	d007      	beq.n	8002638 <calculate_CRC+0x48>
                crc = (crc << 1) ^ 0x07;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	b25b      	sxtb	r3, r3
 800262e:	f083 0307 	eor.w	r3, r3, #7
 8002632:	b25b      	sxtb	r3, r3
 8002634:	73fb      	strb	r3, [r7, #15]
 8002636:	e002      	b.n	800263e <calculate_CRC+0x4e>
            } else {
                crc = crc << 1;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
            }
            currentByte >>= 1;
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	737b      	strb	r3, [r7, #13]
        for(uint8_t j = 0; j < 8; j++) {
 8002644:	7b3b      	ldrb	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	733b      	strb	r3, [r7, #12]
 800264a:	7b3b      	ldrb	r3, [r7, #12]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d9e2      	bls.n	8002616 <calculate_CRC+0x26>
    for(uint8_t i = 0; i < length; i++) {
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	3301      	adds	r3, #1
 8002654:	73bb      	strb	r3, [r7, #14]
 8002656:	7bba      	ldrb	r2, [r7, #14]
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3d3      	bcc.n	8002606 <calculate_CRC+0x16>
        }
    }
    return crc;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <TMC2209_WaitForReply>:




uint8_t TMC2209_WaitForReply(uint32_t timeout) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
     uint32_t startTime = HAL_GetTick();
 8002674:	f004 fc06 	bl	8006e84 <HAL_GetTick>
 8002678:	60f8      	str	r0, [r7, #12]
     while (!rxBufferReady) {
 800267a:	e00c      	b.n	8002696 <TMC2209_WaitForReply+0x2a>
         if ((HAL_GetTick() - startTime) > timeout) {
 800267c:	f004 fc02 	bl	8006e84 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d204      	bcs.n	8002696 <TMC2209_WaitForReply+0x2a>
             debug_print("Timeout waiting for reply.\r\n");
 800268c:	4808      	ldr	r0, [pc, #32]	@ (80026b0 <TMC2209_WaitForReply+0x44>)
 800268e:	f7ff ff9b 	bl	80025c8 <debug_print>
             return 0; // Timeout
 8002692:	2300      	movs	r3, #0
 8002694:	e008      	b.n	80026a8 <TMC2209_WaitForReply+0x3c>
     while (!rxBufferReady) {
 8002696:	4b07      	ldr	r3, [pc, #28]	@ (80026b4 <TMC2209_WaitForReply+0x48>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0ed      	beq.n	800267c <TMC2209_WaitForReply+0x10>
         }
     }
     rxBufferReady = 0; // Clear flag for next use
 80026a0:	4b04      	ldr	r3, [pc, #16]	@ (80026b4 <TMC2209_WaitForReply+0x48>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
     return 1; // Success
 80026a6:	2301      	movs	r3, #1
 }
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	0801867c 	.word	0x0801867c
 80026b4:	2000234c 	.word	0x2000234c

080026b8 <TMC2209_sendCommand>:


uint8_t *TMC2209_sendCommand(uint8_t *command, size_t writeLength, size_t readLength, Motor *tmc2209) {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
	//clear_UART_buffers(&huart2);
     // Send the command
     if (HAL_UART_Transmit(tmc2209->driver.huart, command, writeLength, HAL_MAX_DELAY) != HAL_OK) {
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6858      	ldr	r0, [r3, #4]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	f009 fdd8 	bl	800c288 <HAL_UART_Transmit>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d004      	beq.n	80026e8 <TMC2209_sendCommand+0x30>
         if(ENABLE_DEBUG) debug_print("Failed to send command to driver.\r\n");
         tmc2209->driver.STATUS = TMC_SEND_ERROR;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	2214      	movs	r2, #20
 80026e2:	60da      	str	r2, [r3, #12]
         return	NULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	e01e      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     }

     if(readLength && (tmc2209->driver.STATUS == TMC_OK)){
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <TMC2209_sendCommand+0x6c>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d116      	bne.n	8002724 <TMC2209_sendCommand+0x6c>

     // Wait for reply
     HAL_UART_Receive_DMA(tmc2209->driver.huart, rxData, readLength + 1);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6858      	ldr	r0, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	490a      	ldr	r1, [pc, #40]	@ (8002730 <TMC2209_sendCommand+0x78>)
 8002706:	f009 fec5 	bl	800c494 <HAL_UART_Receive_DMA>
     if (!TMC2209_WaitForReply(200)) { // Wait 200ms if no reply, timeout
 800270a:	20c8      	movs	r0, #200	@ 0xc8
 800270c:	f7ff ffae 	bl	800266c <TMC2209_WaitForReply>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <TMC2209_sendCommand+0x68>
    	 if(ENABLE_DEBUG) debug_print("No reply received from driver.\r\n");
    	 tmc2209->driver.STATUS = TMC_NOREPLY_ERROR;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	221e      	movs	r2, #30
 800271a:	60da      	str	r2, [r3, #12]
         return NULL; // command failed
 800271c:	2300      	movs	r3, #0
 800271e:	e002      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     debug_print_hex(command, writeLength);
     // Process received data in rxBuffer
     debug_print("Reply received:\r\n");
     debug_print_hex(rxBuffer, TMC_REPLY_SIZE);
     }
     return rxBuffer; // Success
 8002720:	4b04      	ldr	r3, [pc, #16]	@ (8002734 <TMC2209_sendCommand+0x7c>)
 8002722:	e000      	b.n	8002726 <TMC2209_sendCommand+0x6e>
     }
     return NULL;
 8002724:	2300      	movs	r3, #0
 }
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20002338 	.word	0x20002338
 8002734:	20002344 	.word	0x20002344

08002738 <TMC2209_writeInit>:


void TMC2209_writeInit(Motor *tmc2209, uint8_t regAddress, int32_t value){
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	460b      	mov	r3, r1
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	72fb      	strb	r3, [r7, #11]
 	uint8_t write_request_command[8];
 	write_request_command[0] = SYNC; // SYNC Byte for TMC2209
 8002746:	2305      	movs	r3, #5
 8002748:	743b      	strb	r3, [r7, #16]
 	write_request_command[1] = tmc2209->driver.address; // Driver address configure it using MS1(LSB) AND MS2
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	7a1b      	ldrb	r3, [r3, #8]
 800274e:	747b      	strb	r3, [r7, #17]
 	write_request_command[2] = regAddress | 0x80; // Register address to write 0x80 for writing
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002756:	b2db      	uxtb	r3, r3
 8002758:	74bb      	strb	r3, [r7, #18]
 	write_request_command[3] = (value >> 24) & 0xFF;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0e1b      	lsrs	r3, r3, #24
 800275e:	b2db      	uxtb	r3, r3
 8002760:	74fb      	strb	r3, [r7, #19]
 	write_request_command[4] = (value >> 16) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	141b      	asrs	r3, r3, #16
 8002766:	b2db      	uxtb	r3, r3
 8002768:	753b      	strb	r3, [r7, #20]
 	write_request_command[5] = (value >> 8 ) & 0xFF;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	121b      	asrs	r3, r3, #8
 800276e:	b2db      	uxtb	r3, r3
 8002770:	757b      	strb	r3, [r7, #21]
 	write_request_command[6] = (value      ) & 0xFF;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	75bb      	strb	r3, [r7, #22]
 	write_request_command[7] = calculate_CRC(write_request_command, 7); // checksum
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	2107      	movs	r1, #7
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff ff36 	bl	80025f0 <calculate_CRC>
 8002784:	4603      	mov	r3, r0
 8002786:	75fb      	strb	r3, [r7, #23]
 	TMC2209_sendCommand(&write_request_command[0], TMC_WRITE_DATAGRAM_SIZE, 0, tmc2209); // We don't actually need receive buffer here when we call ReadWrite so we just pass data
 8002788:	f107 0010 	add.w	r0, r7, #16
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	2108      	movs	r1, #8
 8002792:	f7ff ff91 	bl	80026b8 <TMC2209_sendCommand>

 }
 8002796:	bf00      	nop
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <TMC2209_readInit>:

int32_t TMC2209_readInit(Motor *tmc2209, uint8_t regAddress){
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b087      	sub	sp, #28
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	460b      	mov	r3, r1
 80027a8:	70fb      	strb	r3, [r7, #3]
	if(tmc2209->driver.STATUS != TMC_OK) return tmc2209->driver.STATUS;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <TMC2209_readInit+0x1a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	e059      	b.n	800286c <TMC2209_readInit+0xce>
 	uint8_t read_request_command[8] = { 0 };
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
 	read_request_command[0] = SYNC;
 80027c0:	2305      	movs	r3, #5
 80027c2:	733b      	strb	r3, [r7, #12]
 	read_request_command[1] = tmc2209->driver.address;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	7a1b      	ldrb	r3, [r3, #8]
 80027c8:	737b      	strb	r3, [r7, #13]
 	read_request_command[2] = regAddress;
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	73bb      	strb	r3, [r7, #14]
 	read_request_command[3] = calculate_CRC(read_request_command, 3);
 80027ce:	f107 030c 	add.w	r3, r7, #12
 80027d2:	2103      	movs	r1, #3
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ff0b 	bl	80025f0 <calculate_CRC>
 80027da:	4603      	mov	r3, r0
 80027dc:	73fb      	strb	r3, [r7, #15]

 	uint8_t *verifyBuffer = TMC2209_sendCommand(read_request_command, TMC_READ_REQUEST_DATAGRAM_SIZE, TMC_REPLY_SIZE, tmc2209);
 80027de:	f107 000c 	add.w	r0, r7, #12
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2208      	movs	r2, #8
 80027e6:	2104      	movs	r1, #4
 80027e8:	f7ff ff66 	bl	80026b8 <TMC2209_sendCommand>
 80027ec:	6178      	str	r0, [r7, #20]
 	// Byte 0: Sync nibble correct?
 	if (verifyBuffer[0] != 0x05){
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d004      	beq.n	8002800 <TMC2209_readInit+0x62>
 		// If first byte equals 0 then it means no reply so return
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(SYNC Byte)\r\n");
 		return tmc2209->driver.STATUS = TMC_SYNC_REPLY_ERROR;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2228      	movs	r2, #40	@ 0x28
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	2328      	movs	r3, #40	@ 0x28
 80027fe:	e035      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 1: Master address correct?
 	if (verifyBuffer[1] != 0xFF){
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2bff      	cmp	r3, #255	@ 0xff
 8002808:	d004      	beq.n	8002814 <TMC2209_readInit+0x76>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(MCU Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_MCU_REPLY_ERROR;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2232      	movs	r2, #50	@ 0x32
 800280e:	60da      	str	r2, [r3, #12]
 8002810:	2332      	movs	r3, #50	@ 0x32
 8002812:	e02b      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 2: Register address correct?
 	if (verifyBuffer[2] != regAddress){
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3302      	adds	r3, #2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	429a      	cmp	r2, r3
 800281e:	d004      	beq.n	800282a <TMC2209_readInit+0x8c>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(Register Address)\r\n");
 		return tmc2209->driver.STATUS = TMC_REG_REPLY_ERROR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	223c      	movs	r2, #60	@ 0x3c
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	233c      	movs	r3, #60	@ 0x3c
 8002828:	e020      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	// Byte 7: CRC correct?
 	if (verifyBuffer[7] != calculate_CRC(verifyBuffer, 7)){
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3307      	adds	r3, #7
 800282e:	781c      	ldrb	r4, [r3, #0]
 8002830:	2107      	movs	r1, #7
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff fedc 	bl	80025f0 <calculate_CRC>
 8002838:	4603      	mov	r3, r0
 800283a:	429c      	cmp	r4, r3
 800283c:	d004      	beq.n	8002848 <TMC2209_readInit+0xaa>
 		if(ENABLE_DEBUG) debug_print("Invalid data received!(CRC)\r\n");
 		return tmc2209->driver.STATUS = TMC_CRC_REPLY_ERROR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2246      	movs	r2, #70	@ 0x46
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	2346      	movs	r3, #70	@ 0x46
 8002846:	e011      	b.n	800286c <TMC2209_readInit+0xce>
 	}
 	return (verifyBuffer[3] << 24) | (verifyBuffer[4] << 16) | (verifyBuffer[5] << 8) | verifyBuffer[6];
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3303      	adds	r3, #3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	061a      	lsls	r2, r3, #24
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3304      	adds	r3, #4
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	041b      	lsls	r3, r3, #16
 8002858:	431a      	orrs	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	3305      	adds	r3, #5
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	4313      	orrs	r3, r2
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	3206      	adds	r2, #6
 8002868:	7812      	ldrb	r2, [r2, #0]
 800286a:	4313      	orrs	r3, r2
 }
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd90      	pop	{r4, r7, pc}

08002874 <TMC2209_setPDNuart>:

bool TMC2209_setPDNuart(Motor *tmc2209, bool enable) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b0aa      	sub	sp, #168	@ 0xa8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
    // Read current GCONF register value from TMC2209_REG_GCONF
    uint32_t currentGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002880:	2100      	movs	r1, #0
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff8b 	bl	800279e <TMC2209_readInit>
 8002888:	4603      	mov	r3, r0
 800288a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        debug_print(debug_msg);
    }

    // Modify the pdn_disable bit (bit 6). When set to 1, pdn_disable is enabled (UART controls the driver).
    // When cleared (0), PDN function is active.
    if (enable) {
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <TMC2209_setPDNuart+0x2e>
        currentGCONF |= 0x00000040; // Set bit 6 to enable PDN_UART
 8002894:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800289c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80028a0:	e005      	b.n	80028ae <TMC2209_setPDNuart+0x3a>
        if (ENABLE_DEBUG) {
            debug_print("Enabling PDN_UART (pdn_disable=1).\r\n");
        }
    } else {
        currentGCONF &= ~(0x00000040); // Clear bit 6 to disable PDN_UART
 80028a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80028aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            debug_print("Disabling PDN_UART (pdn_disable=0).\r\n");
        }
    }

    // Write back the updated GCONF register value
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, currentGCONF);
 80028ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028b2:	461a      	mov	r2, r3
 80028b4:	2100      	movs	r1, #0
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff3e 	bl	8002738 <TMC2209_writeInit>
    HAL_Delay(2); // Allow time for the write to complete
 80028bc:	2002      	movs	r0, #2
 80028be:	f004 faed 	bl	8006e9c <HAL_Delay>

    // Optionally, check if the write was successful by re-reading the register
    uint32_t updatedGCONF = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80028c2:	2100      	movs	r1, #0
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff6a 	bl	800279e <TMC2209_readInit>
 80028ca:	4603      	mov	r3, r0
 80028cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    HAL_Delay(2);
 80028d0:	2002      	movs	r0, #2
 80028d2:	f004 fae3 	bl	8006e9c <HAL_Delay>
        sprintf(verify_msg, sizeof(verify_msg), "Updated GCONF = 0x%08lX\r\n", updatedGCONF);
        debug_print(verify_msg);
    }

    // Verify that the pdn_disable bit matches the intended configuration
    bool bitSet = (updatedGCONF & 0x00000040) ? true : false;
 80028d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028da:	099b      	lsrs	r3, r3, #6
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    if (bitSet == enable) {
 80028ec:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 80028f0:	78fb      	ldrb	r3, [r7, #3]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d105      	bne.n	8002902 <TMC2209_setPDNuart+0x8e>
        return tmc2209->driver.pdn_disable = 1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80028fe:	2301      	movs	r3, #1
 8002900:	e004      	b.n	800290c <TMC2209_setPDNuart+0x98>
    } else {
        if (ENABLE_DEBUG) {
            debug_print("PDN_UART configuration failed to update correctly!\r\n");
        }
        return tmc2209->driver.pdn_disable = 0;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800290a:	2300      	movs	r3, #0
    }
}
 800290c:	4618      	mov	r0, r3
 800290e:	37a8      	adds	r7, #168	@ 0xa8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <TMC2209_read_ifcnt>:



void TMC2209_read_ifcnt(Motor *tmc2209) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b09c      	sub	sp, #112	@ 0x70
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
     int32_t ifcnt_value = TMC2209_readInit(tmc2209, TMC2209_REG_IFCNT); // IFCNT register address is 0x02
 800291c:	2102      	movs	r1, #2
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff3d 	bl	800279e <TMC2209_readInit>
 8002924:	66f8      	str	r0, [r7, #108]	@ 0x6c
     if (ifcnt_value >= 0) { // This value gets incremented with every sucessful UART write access 0 to 255 then wraps around.
 8002926:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002928:	2b00      	cmp	r3, #0
 800292a:	db03      	blt.n	8002934 <TMC2209_read_ifcnt+0x20>
    	 if(ENABLE_DEBUG){
         char debug_msg[100];
         sprintf(debug_msg, "IFCNT Value: %d\r\n",  (int)ifcnt_value);
         debug_print(debug_msg);
    	 }
         tmc2209->driver.IFCNT = ifcnt_value;
 800292c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	621a      	str	r2, [r3, #32]
    	 if (ENABLE_DEBUG)
         debug_print("Failed to read IFCNT register!\r\n");
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
     }

 }
 8002932:	e003      	b.n	800293c <TMC2209_read_ifcnt+0x28>
         tmc2209->driver.IFCNT = TMC_IFCNT_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f06f 024f 	mvn.w	r2, #79	@ 0x4f
 800293a:	621a      	str	r2, [r3, #32]
 }
 800293c:	bf00      	nop
 800293e:	3770      	adds	r7, #112	@ 0x70
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <TMC2209_setSpreadCycle>:
    }
    return (tmc2209->driver.GCONF = true);
}


uint16_t TMC2209_setSpreadCycle(Motor *tmc2209, uint8_t enable) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b0ac      	sub	sp, #176	@ 0xb0
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
	uint32_t gconf;
	uint32_t check_gconf;
	uint8_t driverID = tmc2209->driver.id;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f887 30ab 	strb.w	r3, [r7, #171]	@ 0xab
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	char debug_msg[150];
	snprintf(debug_msg, sizeof(debug_msg), "Setting SpreadCycle Mode for Driver: %u\r\n", driverID);
	debug_print(debug_msg);
	}

	gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ff1b 	bl	800279e <TMC2209_readInit>
 8002968:	4603      	mov	r3, r0
 800296a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

    if(tmc2209->driver.STATUS != TMC_OK){
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <TMC2209_setSpreadCycle+0x3a>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(Invalid Reply 1)\r\n");
    	return gconf;
 8002976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800297a:	b29b      	uxth	r3, r3
 800297c:	e03c      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = gconf;
 800297e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002982:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(enable) {
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <TMC2209_setSpreadCycle+0x56>
    	gconf |= (1 << TMC2209_EN_SPREADCYCLE_POS);
 800298c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002998:	e005      	b.n	80029a6 <TMC2209_setSpreadCycle+0x62>
    } else {
    	gconf &= ~(1 << TMC2209_EN_SPREADCYCLE_POS);
 800299a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800299e:	f023 0304 	bic.w	r3, r3, #4
 80029a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    if(gconf == check_gconf){ //Setpread is already EN/DIS ABLED so skip and return
 80029a6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d102      	bne.n	80029b8 <TMC2209_setSpreadCycle+0x74>
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode! (Spread is already on that Mode!)\r\n");
    	return enable;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	e01f      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 80029b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029bc:	461a      	mov	r2, r3
 80029be:	2100      	movs	r1, #0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff feb9 	bl	8002738 <TMC2209_writeInit>
    TMC2209_read_ifcnt(tmc2209);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffa4 	bl	8002914 <TMC2209_read_ifcnt>
    if(tmc2209->driver.IFCNT <= IFCNT){
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1a      	ldr	r2, [r3, #32]
 80029d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d804      	bhi.n	80029e2 <TMC2209_setSpreadCycle+0x9e>
    	tmc2209->driver.chopperMode = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	779a      	strb	r2, [r3, #30]
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!\r\n");
    	return TMC_SET_SPREADCYCLE_ERROR;
 80029de:	2369      	movs	r3, #105	@ 0x69
 80029e0:	e00a      	b.n	80029f8 <TMC2209_setSpreadCycle+0xb4>
    }

    check_gconf = TMC2209_readInit(tmc2209, TMC2209_REG_GCONF);
 80029e2:	2100      	movs	r1, #0
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff feda 	bl	800279e <TMC2209_readInit>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if(check_gconf != gconf){
    	if (ENABLE_DEBUG) debug_print("Failed to set SpreadCycle Mode!(invalid Reply 2)\r\n");
    }

    tmc2209->driver.chopperMode = 1;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	779a      	strb	r2, [r3, #30]
    return TMC_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	37b0      	adds	r7, #176	@ 0xb0
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TMC2209_setMicrosteppingResolution>:
    tmc2209->driver.chopperMode = spreadCycleEnabled; // Return 1 if SpreadCycle is enabled, 0 otherwise
}


// Function to set the microstepping resolution through UART
uint32_t TMC2209_setMicrosteppingResolution(Motor *tmc2209, uint16_t resolution) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b0ae      	sub	sp, #184	@ 0xb8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	807b      	strh	r3, [r7, #2]
    uint8_t driverID = tmc2209->driver.id;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    snprintf(debug_msg, sizeof(debug_msg), "Setting Microstepping For Driver ID: %u \r\n", driverID);
    debug_print(debug_msg);
    memset(debug_msg, 0, sizeof(debug_msg)); // clear buffer
    }
    // Ensure GCONF is set to enable UART control for microstepping resolution
    uint8_t gconf = 0x80; // Bit 7 (mstep_reg_select) set to 1. This to change the option to control mstepping using UART instead of MS1 & MS2 pins
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    TMC2209_writeInit(tmc2209, TMC2209_REG_GCONF, gconf);
 8002a22:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002a26:	461a      	mov	r2, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff fe84 	bl	8002738 <TMC2209_writeInit>

    HAL_Delay(2);
 8002a30:	2002      	movs	r0, #2
 8002a32:	f004 fa33 	bl	8006e9c <HAL_Delay>
    // Read the current CHOPCONF register value
    uint32_t currentCHOPCONF = TMC2209_readInit(tmc2209, TMC2209_REG_CHOPCONF);
 8002a36:	216c      	movs	r1, #108	@ 0x6c
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f7ff feb0 	bl	800279e <TMC2209_readInit>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    HAL_Delay(2);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f004 fa29 	bl	8006e9c <HAL_Delay>

    // Extract the current microstepping resolution (MRES) bits [24:27]
    uint8_t currentMRES = (currentCHOPCONF >> 24) & 0x0F;
 8002a4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a4e:	0e1b      	lsrs	r3, r3, #24
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

    // Determine the MRES value for the new resolution
    uint8_t newMRES;
    switch (resolution) {
 8002a5a:	887b      	ldrh	r3, [r7, #2]
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a60:	d053      	beq.n	8002b0a <TMC2209_setMicrosteppingResolution+0x10a>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a66:	dc74      	bgt.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a68:	2b80      	cmp	r3, #128	@ 0x80
 8002a6a:	d052      	beq.n	8002b12 <TMC2209_setMicrosteppingResolution+0x112>
 8002a6c:	2b80      	cmp	r3, #128	@ 0x80
 8002a6e:	dc70      	bgt.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	dc47      	bgt.n	8002b04 <TMC2209_setMicrosteppingResolution+0x104>
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	dd6c      	ble.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	2b1f      	cmp	r3, #31
 8002a7c:	d869      	bhi.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
 8002a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a84 <TMC2209_setMicrosteppingResolution+0x84>)
 8002a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a84:	08002b4b 	.word	0x08002b4b
 8002a88:	08002b43 	.word	0x08002b43
 8002a8c:	08002b53 	.word	0x08002b53
 8002a90:	08002b3b 	.word	0x08002b3b
 8002a94:	08002b53 	.word	0x08002b53
 8002a98:	08002b53 	.word	0x08002b53
 8002a9c:	08002b53 	.word	0x08002b53
 8002aa0:	08002b33 	.word	0x08002b33
 8002aa4:	08002b53 	.word	0x08002b53
 8002aa8:	08002b53 	.word	0x08002b53
 8002aac:	08002b53 	.word	0x08002b53
 8002ab0:	08002b53 	.word	0x08002b53
 8002ab4:	08002b53 	.word	0x08002b53
 8002ab8:	08002b53 	.word	0x08002b53
 8002abc:	08002b53 	.word	0x08002b53
 8002ac0:	08002b2b 	.word	0x08002b2b
 8002ac4:	08002b53 	.word	0x08002b53
 8002ac8:	08002b53 	.word	0x08002b53
 8002acc:	08002b53 	.word	0x08002b53
 8002ad0:	08002b53 	.word	0x08002b53
 8002ad4:	08002b53 	.word	0x08002b53
 8002ad8:	08002b53 	.word	0x08002b53
 8002adc:	08002b53 	.word	0x08002b53
 8002ae0:	08002b53 	.word	0x08002b53
 8002ae4:	08002b53 	.word	0x08002b53
 8002ae8:	08002b53 	.word	0x08002b53
 8002aec:	08002b53 	.word	0x08002b53
 8002af0:	08002b53 	.word	0x08002b53
 8002af4:	08002b53 	.word	0x08002b53
 8002af8:	08002b53 	.word	0x08002b53
 8002afc:	08002b53 	.word	0x08002b53
 8002b00:	08002b23 	.word	0x08002b23
 8002b04:	2b40      	cmp	r3, #64	@ 0x40
 8002b06:	d008      	beq.n	8002b1a <TMC2209_setMicrosteppingResolution+0x11a>
 8002b08:	e023      	b.n	8002b52 <TMC2209_setMicrosteppingResolution+0x152>
        case 256:
            newMRES = 0x00; // %0000 -> 256 microsteps
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b10:	e024      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 128:
            newMRES = 0x01; // %0001 -> 128 microsteps
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b18:	e020      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 64:
            newMRES = 0x02; // %0010 -> 64 microsteps
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b20:	e01c      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 32:
            newMRES = 0x03; // %0011 -> 32 microsteps
 8002b22:	2303      	movs	r3, #3
 8002b24:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b28:	e018      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 16:
            newMRES = 0x04; // %0100 -> 16 microsteps
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b30:	e014      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 8:
            newMRES = 0x05; // %0101 -> 8 microsteps
 8002b32:	2305      	movs	r3, #5
 8002b34:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b38:	e010      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 4:
            newMRES = 0x06; // %0110 -> 4 microsteps
 8002b3a:	2306      	movs	r3, #6
 8002b3c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b40:	e00c      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 2:
            newMRES = 0x07; // %0111 -> 2 microsteps
 8002b42:	2307      	movs	r3, #7
 8002b44:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b48:	e008      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        case 1:
            newMRES = 0x08; // %1000 -> Full step
 8002b4a:	2308      	movs	r3, #8
 8002b4c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b50:	e004      	b.n	8002b5c <TMC2209_setMicrosteppingResolution+0x15c>
        default:
            newMRES = currentMRES; // Keep the current resolution if invalid value is provided
 8002b52:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b56:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
            break;
 8002b5a:	bf00      	nop
    }

    // If the resolution has not changed, do nothing
    if (newMRES == currentMRES) {
 8002b5c:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 8002b60:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d105      	bne.n	8002b74 <TMC2209_setMicrosteppingResolution+0x174>
    	if (ENABLE_DEBUG) debug_print("Resolution unchanged, no update needed.\r\n");
        return tmc2209->driver.mstep = resolution;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	887a      	ldrh	r2, [r7, #2]
 8002b6c:	839a      	strh	r2, [r3, #28]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8b9b      	ldrh	r3, [r3, #28]
 8002b72:	e025      	b.n	8002bc0 <TMC2209_setMicrosteppingResolution+0x1c0>
    }
   // HAL_Delay(2);
    // Update the CHOPCONF register with the new MRES value
    uint32_t updatedCHOPCONF = (currentCHOPCONF & ~(0x0F << 24)) | (newMRES << 24);
 8002b74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b78:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8002b7c:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002b80:	061b      	lsls	r3, r3, #24
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    TMC2209_writeInit(tmc2209, TMC2209_REG_CHOPCONF, updatedCHOPCONF);
 8002b88:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	216c      	movs	r1, #108	@ 0x6c
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fdd1 	bl	8002738 <TMC2209_writeInit>
    HAL_Delay(2);
 8002b96:	2002      	movs	r0, #2
 8002b98:	f004 f980 	bl	8006e9c <HAL_Delay>

    TMC2209_read_ifcnt(tmc2209);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7ff feb9 	bl	8002914 <TMC2209_read_ifcnt>

    if(tmc2209->driver.IFCNT <= IFCNT){
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a1a      	ldr	r2, [r3, #32]
 8002ba6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d804      	bhi.n	8002bb8 <TMC2209_setMicrosteppingResolution+0x1b8>
    	if (ENABLE_DEBUG) debug_print("Failed to set microstepping.\r\n");
    	return tmc2209->driver.mstep = TMC_SET_MSTEP_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	226e      	movs	r2, #110	@ 0x6e
 8002bb2:	839a      	strh	r2, [r3, #28]
 8002bb4:	236e      	movs	r3, #110	@ 0x6e
 8002bb6:	e003      	b.n	8002bc0 <TMC2209_setMicrosteppingResolution+0x1c0>
    }
    // Debug
    tmc2209->driver.mstep = resolution;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	887a      	ldrh	r2, [r7, #2]
 8002bbc:	839a      	strh	r2, [r3, #28]

    if (ENABLE_DEBUG) {
    	sprintf(debug_msg, "Updated microstepping resolution to: %d\r\n", resolution);
    	debug_print(debug_msg);
    }
    return TMC_OK;
 8002bbe:	2300      	movs	r3, #0

}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	37b8      	adds	r7, #184	@ 0xb8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <TMC2209_enableStallDetection>:

    return 25.0f;
}


uint8_t TMC2209_enableStallDetection(Motor *tmc2209, uint8_t sgthrs) {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
	int32_t IFCNT = tmc2209->driver.IFCNT;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	60fb      	str	r3, [r7, #12]

    TMC2209_writeInit(tmc2209, TMC2209_REG_SGTHRS, sgthrs);    // Set StallGuard threshold (SGTHRS)
 8002bda:	78fb      	ldrb	r3, [r7, #3]
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2140      	movs	r1, #64	@ 0x40
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fda9 	bl	8002738 <TMC2209_writeInit>

    TMC2209_read_ifcnt(tmc2209);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fe94 	bl	8002914 <TMC2209_read_ifcnt>
    if (tmc2209->driver.IFCNT <= IFCNT){
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6a1a      	ldr	r2, [r3, #32]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d807      	bhi.n	8002c06 <TMC2209_enableStallDetection+0x3e>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	return tmc2209->driver.stallEnabled = TMC_ENABLESTALL_ERROR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	220a      	movs	r2, #10
 8002bfa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002c04:	e006      	b.n	8002c14 <TMC2209_enableStallDetection+0x4c>
    }


    return tmc2209->driver.stallEnabled = 1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29

}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TMC2209_SetTCoolThrs>:

void TMC2209_SetTCoolThrs(Motor *tmc2209, uint32_t stepFrequency) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
    const uint32_t fCLK = 12000000; // TMC2209 Internal clock frequency: 12 MHz
 8002c26:	4b13      	ldr	r3, [pc, #76]	@ (8002c74 <TMC2209_SetTCoolThrs+0x58>)
 8002c28:	613b      	str	r3, [r7, #16]
    uint32_t tStep = fCLK / stepFrequency; // The internal clokc trims step frequency that's why we divied it.
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]

    // Ensure tStep doesn't exceed 20 bits (valid for TCOOLTHRS register)
    if (tStep > 0xFFFFF) {
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c3a:	d301      	bcc.n	8002c40 <TMC2209_SetTCoolThrs+0x24>
        tStep = 0xFFFFF;
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <TMC2209_SetTCoolThrs+0x5c>)
 8002c3e:	617b      	str	r3, [r7, #20]
    }

    int32_t IFCNT = tmc2209->driver.IFCNT;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	60fb      	str	r3, [r7, #12]

    if (tmc2209->driver.IFCNT <= IFCNT){
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d803      	bhi.n	8002c58 <TMC2209_SetTCoolThrs+0x3c>
    	if(ENABLE_DEBUG) debug_print("Failed to set Send Delay! \r\n");
    	tmc2209->driver.TCoolThrs = TMC2209_TCOOLTHRS_ERROR;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f06f 0209 	mvn.w	r2, #9
 8002c56:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    TMC2209_writeInit(tmc2209, TMC2209_REG_TCOOLTHRS, tStep);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	2114      	movs	r1, #20
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff fd6a 	bl	8002738 <TMC2209_writeInit>
    tmc2209->driver.TCoolThrs = tStep;
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	00b71b00 	.word	0x00b71b00
 8002c78:	000fffff 	.word	0x000fffff

08002c7c <TMC2209_readStandstillIndicator>:
    }

    tmc2209->driver.SG_RESULT = sg_result;
}

bool TMC2209_readStandstillIndicator(Motor *tmc2209) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
    // Read the DRV_STATUS register. Ensure that TMC2209_REG_DRV_STATUS is defined, typically 0x6F.
    uint32_t drvStatus = TMC2209_readInit(tmc2209, TMC2209_REG_DRVSTATUS);
 8002c84:	216f      	movs	r1, #111	@ 0x6f
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fd89 	bl	800279e <TMC2209_readInit>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
        sprintf(debug_msg, "DRV_STATUS = 0x%08lX\r\n", drvStatus);
        debug_print(debug_msg);
    #endif

    // Check the standstill bit. stst is typically bit 31.
    if(drvStatus & (1UL << 31)) {
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da08      	bge.n	8002ca8 <TMC2209_readStandstillIndicator+0x2c>
        return tmc2209->driver.standstill;  // Motor is at standstill
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e007      	b.n	8002cb8 <TMC2209_readStandstillIndicator+0x3c>
    } else {
        return tmc2209->driver.standstill; // Motor is not at standstill
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf14      	ite	ne
 8002cb2:	2301      	movne	r3, #1
 8002cb4:	2300      	moveq	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
    }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <initializeMotors>:
// Motors & axis
extern Motor motors[MAX_MOTORS];
extern Axis axes[MAX_MOTORS_PER_AXIS];


void initializeMotors() {
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
    // Initialize each motor in the array
    for (int i = 0; i < MAX_MOTORS; i++) {
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	e2ad      	b.n	8003228 <initializeMotors+0x568>
    	// Setting all for all drivers/motors
    	 // UART handler
    	motors[i].driver.address = 0x03; // Address : 0x00, 0x01 ... Depends on MS1 AND MS2 // All drivers address 3 since they're on different uarts. If uart failed MSTEP 16 by default.
 8002ccc:	4abd      	ldr	r2, [pc, #756]	@ (8002fc4 <initializeMotors+0x304>)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	21a4      	movs	r1, #164	@ 0xa4
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3308      	adds	r3, #8
 8002cda:	2203      	movs	r2, #3
 8002cdc:	701a      	strb	r2, [r3, #0]

    	// Motor Parameters
    	motors[i].driver.id = i ;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	b2d8      	uxtb	r0, r3
 8002ce2:	4ab8      	ldr	r2, [pc, #736]	@ (8002fc4 <initializeMotors+0x304>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	21a4      	movs	r1, #164	@ 0xa4
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	4413      	add	r3, r2
 8002cee:	4602      	mov	r2, r0
 8002cf0:	701a      	strb	r2, [r3, #0]
    	motors[i].driver.STATUS = TMC_OK;
 8002cf2:	4ab4      	ldr	r2, [pc, #720]	@ (8002fc4 <initializeMotors+0x304>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	21a4      	movs	r1, #164	@ 0xa4
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	330c      	adds	r3, #12
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
        motors[i].driver.GCONF = 0;
 8002d04:	4aaf      	ldr	r2, [pc, #700]	@ (8002fc4 <initializeMotors+0x304>)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	21a4      	movs	r1, #164	@ 0xa4
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3325      	adds	r3, #37	@ 0x25
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IFCNT = 0;
 8002d16:	4aab      	ldr	r2, [pc, #684]	@ (8002fc4 <initializeMotors+0x304>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	21a4      	movs	r1, #164	@ 0xa4
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	3320      	adds	r3, #32
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
        motors[i].driver.chopperMode = 0;
 8002d28:	4aa6      	ldr	r2, [pc, #664]	@ (8002fc4 <initializeMotors+0x304>)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	21a4      	movs	r1, #164	@ 0xa4
 8002d2e:	fb01 f303 	mul.w	r3, r1, r3
 8002d32:	4413      	add	r3, r2
 8002d34:	331e      	adds	r3, #30
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
        motors[i].driver.SG_RESULT = 0;
 8002d3a:	4aa2      	ldr	r2, [pc, #648]	@ (8002fc4 <initializeMotors+0x304>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	21a4      	movs	r1, #164	@ 0xa4
 8002d40:	fb01 f303 	mul.w	r3, r1, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	332c      	adds	r3, #44	@ 0x2c
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
        motors[i].driver.checkSG_RESULT = 0;
 8002d4c:	4a9d      	ldr	r2, [pc, #628]	@ (8002fc4 <initializeMotors+0x304>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	21a4      	movs	r1, #164	@ 0xa4
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3330      	adds	r3, #48	@ 0x30
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
        motors[i].driver.TCoolThrs = 0;
 8002d5e:	4a99      	ldr	r2, [pc, #612]	@ (8002fc4 <initializeMotors+0x304>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	21a4      	movs	r1, #164	@ 0xa4
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	3334      	adds	r3, #52	@ 0x34
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
        motors[i].driver.stepFrequency = 0;
 8002d70:	4a94      	ldr	r2, [pc, #592]	@ (8002fc4 <initializeMotors+0x304>)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	21a4      	movs	r1, #164	@ 0xa4
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
        motors[i].driver.IRUN = 0;
 8002d82:	4a90      	ldr	r2, [pc, #576]	@ (8002fc4 <initializeMotors+0x304>)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	21a4      	movs	r1, #164	@ 0xa4
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3326      	adds	r3, #38	@ 0x26
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
        motors[i].driver.IHOLD = 0;
 8002d94:	4a8b      	ldr	r2, [pc, #556]	@ (8002fc4 <initializeMotors+0x304>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	21a4      	movs	r1, #164	@ 0xa4
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	3327      	adds	r3, #39	@ 0x27
 8002da2:	2200      	movs	r2, #0
 8002da4:	701a      	strb	r2, [r3, #0]


        motors[i].fullSteps = 0;
 8002da6:	4a87      	ldr	r2, [pc, #540]	@ (8002fc4 <initializeMotors+0x304>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	21a4      	movs	r1, #164	@ 0xa4
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3374      	adds	r3, #116	@ 0x74
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
        motors[i].stepsTaken = 0;
 8002db8:	4a82      	ldr	r2, [pc, #520]	@ (8002fc4 <initializeMotors+0x304>)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	21a4      	movs	r1, #164	@ 0xa4
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3370      	adds	r3, #112	@ 0x70
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
        motors[i].nextTotalSteps = 0;
 8002dca:	4a7e      	ldr	r2, [pc, #504]	@ (8002fc4 <initializeMotors+0x304>)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	21a4      	movs	r1, #164	@ 0xa4
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3378      	adds	r3, #120	@ 0x78
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
        motors[i].currentPositionMM = 0;
 8002ddc:	4a79      	ldr	r2, [pc, #484]	@ (8002fc4 <initializeMotors+0x304>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	21a4      	movs	r1, #164	@ 0xa4
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	4413      	add	r3, r2
 8002de8:	3384      	adds	r3, #132	@ 0x84
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
        motors[i].nextPositionMM = 0;
 8002df0:	4a74      	ldr	r2, [pc, #464]	@ (8002fc4 <initializeMotors+0x304>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	21a4      	movs	r1, #164	@ 0xa4
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3388      	adds	r3, #136	@ 0x88
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
        motors[i].isStepping = false;
 8002e04:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc4 <initializeMotors+0x304>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	21a4      	movs	r1, #164	@ 0xa4
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	338c      	adds	r3, #140	@ 0x8c
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]
        motors[i].STALL = 0;
 8002e16:	4a6b      	ldr	r2, [pc, #428]	@ (8002fc4 <initializeMotors+0x304>)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	21a4      	movs	r1, #164	@ 0xa4
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	4413      	add	r3, r2
 8002e22:	33a0      	adds	r3, #160	@ 0xa0
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]


        if(i == 0){
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d178      	bne.n	8002f20 <initializeMotors+0x260>
         // Configure motor 1 X-axis

        // TIMER configurations
        motors[i].driver.huart = &huart2;
 8002e2e:	4a65      	ldr	r2, [pc, #404]	@ (8002fc4 <initializeMotors+0x304>)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	21a4      	movs	r1, #164	@ 0xa4
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	4a62      	ldr	r2, [pc, #392]	@ (8002fc8 <initializeMotors+0x308>)
 8002e3e:	601a      	str	r2, [r3, #0]
        motors[i].driver.htim = &htim2;				 // TIMER HANDLER
 8002e40:	4a60      	ldr	r2, [pc, #384]	@ (8002fc4 <initializeMotors+0x304>)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	21a4      	movs	r1, #164	@ 0xa4
 8002e46:	fb01 f303 	mul.w	r3, r1, r3
 8002e4a:	4413      	add	r3, r2
 8002e4c:	3310      	adds	r3, #16
 8002e4e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fcc <initializeMotors+0x30c>)
 8002e50:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <initializeMotors+0x304>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	21a4      	movs	r1, #164	@ 0xa4
 8002e58:	fb01 f303 	mul.w	r3, r1, r3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	3314      	adds	r3, #20
 8002e60:	2208      	movs	r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
        motors[i].driver.mstep = 0;
 8002e64:	4a57      	ldr	r2, [pc, #348]	@ (8002fc4 <initializeMotors+0x304>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	21a4      	movs	r1, #164	@ 0xa4
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	331c      	adds	r3, #28
 8002e72:	2200      	movs	r2, #0
 8002e74:	801a      	strh	r2, [r3, #0]

        motors[i].stepsPerRevolution = 200;
 8002e76:	4a53      	ldr	r2, [pc, #332]	@ (8002fc4 <initializeMotors+0x304>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	21a4      	movs	r1, #164	@ 0xa4
 8002e7c:	fb01 f303 	mul.w	r3, r1, r3
 8002e80:	4413      	add	r3, r2
 8002e82:	3364      	adds	r3, #100	@ 0x64
 8002e84:	22c8      	movs	r2, #200	@ 0xc8
 8002e86:	601a      	str	r2, [r3, #0]
        // GPIO PINS
        motors[i].driver.step_port = STEP1_GPIO_Port;
 8002e88:	4a4e      	ldr	r2, [pc, #312]	@ (8002fc4 <initializeMotors+0x304>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	21a4      	movs	r1, #164	@ 0xa4
 8002e8e:	fb01 f303 	mul.w	r3, r1, r3
 8002e92:	4413      	add	r3, r2
 8002e94:	333c      	adds	r3, #60	@ 0x3c
 8002e96:	4a4e      	ldr	r2, [pc, #312]	@ (8002fd0 <initializeMotors+0x310>)
 8002e98:	601a      	str	r2, [r3, #0]
        motors[i].driver.step_pin = STEP1_Pin;
 8002e9a:	4a4a      	ldr	r2, [pc, #296]	@ (8002fc4 <initializeMotors+0x304>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	21a4      	movs	r1, #164	@ 0xa4
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3340      	adds	r3, #64	@ 0x40
 8002ea8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eac:	801a      	strh	r2, [r3, #0]
        motors[i].driver.dir_port = DIR1_GPIO_Port;
 8002eae:	4a45      	ldr	r2, [pc, #276]	@ (8002fc4 <initializeMotors+0x304>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	21a4      	movs	r1, #164	@ 0xa4
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3344      	adds	r3, #68	@ 0x44
 8002ebc:	4a45      	ldr	r2, [pc, #276]	@ (8002fd4 <initializeMotors+0x314>)
 8002ebe:	601a      	str	r2, [r3, #0]
        motors[i].driver.dir_pin = DIR1_Pin;
 8002ec0:	4a40      	ldr	r2, [pc, #256]	@ (8002fc4 <initializeMotors+0x304>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	21a4      	movs	r1, #164	@ 0xa4
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3348      	adds	r3, #72	@ 0x48
 8002ece:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002ed2:	801a      	strh	r2, [r3, #0]
        motors[i].driver.enn_port = ENN1_GPIO_Port;
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc4 <initializeMotors+0x304>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	21a4      	movs	r1, #164	@ 0xa4
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	334c      	adds	r3, #76	@ 0x4c
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fd0 <initializeMotors+0x310>)
 8002ee4:	601a      	str	r2, [r3, #0]
        motors[i].driver.enn_pin = ENN1_Pin;
 8002ee6:	4a37      	ldr	r2, [pc, #220]	@ (8002fc4 <initializeMotors+0x304>)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	21a4      	movs	r1, #164	@ 0xa4
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3350      	adds	r3, #80	@ 0x50
 8002ef4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ef8:	801a      	strh	r2, [r3, #0]
        motors[i].driver.diag_port = DIAG1_GPIO_Port;
 8002efa:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <initializeMotors+0x304>)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	21a4      	movs	r1, #164	@ 0xa4
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3354      	adds	r3, #84	@ 0x54
 8002f08:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <initializeMotors+0x318>)
 8002f0a:	601a      	str	r2, [r3, #0]
        motors[i].driver.diag_pin = DIAG1_Pin;
 8002f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc4 <initializeMotors+0x304>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	21a4      	movs	r1, #164	@ 0xa4
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	3358      	adds	r3, #88	@ 0x58
 8002f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1e:	801a      	strh	r2, [r3, #0]


        }


        if(i == 1){
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	f040 808a 	bne.w	800303c <initializeMotors+0x37c>
        	// Configure motor 2 X-axis
            // TIMER configurations
            motors[i].driver.htim = &htim1;				 // TIMER HANDLER
 8002f28:	4a26      	ldr	r2, [pc, #152]	@ (8002fc4 <initializeMotors+0x304>)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	21a4      	movs	r1, #164	@ 0xa4
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3310      	adds	r3, #16
 8002f36:	4a29      	ldr	r2, [pc, #164]	@ (8002fdc <initializeMotors+0x31c>)
 8002f38:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_4; // PWM channel for motor 1
 8002f3a:	4a22      	ldr	r2, [pc, #136]	@ (8002fc4 <initializeMotors+0x304>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	21a4      	movs	r1, #164	@ 0xa4
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3314      	adds	r3, #20
 8002f48:	220c      	movs	r2, #12
 8002f4a:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fc4 <initializeMotors+0x304>)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	21a4      	movs	r1, #164	@ 0xa4
 8002f52:	fb01 f303 	mul.w	r3, r1, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	331c      	adds	r3, #28
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart4;
 8002f5e:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <initializeMotors+0x304>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	21a4      	movs	r1, #164	@ 0xa4
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fe0 <initializeMotors+0x320>)
 8002f6e:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 200;
 8002f70:	4a14      	ldr	r2, [pc, #80]	@ (8002fc4 <initializeMotors+0x304>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	21a4      	movs	r1, #164	@ 0xa4
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3364      	adds	r3, #100	@ 0x64
 8002f7e:	22c8      	movs	r2, #200	@ 0xc8
 8002f80:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP2_GPIO_Port;
 8002f82:	4a10      	ldr	r2, [pc, #64]	@ (8002fc4 <initializeMotors+0x304>)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	21a4      	movs	r1, #164	@ 0xa4
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333c      	adds	r3, #60	@ 0x3c
 8002f90:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <initializeMotors+0x314>)
 8002f92:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP2_Pin;
 8002f94:	4a0b      	ldr	r2, [pc, #44]	@ (8002fc4 <initializeMotors+0x304>)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	21a4      	movs	r1, #164	@ 0xa4
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	3340      	adds	r3, #64	@ 0x40
 8002fa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fa6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR2_GPIO_Port;
 8002fa8:	4a06      	ldr	r2, [pc, #24]	@ (8002fc4 <initializeMotors+0x304>)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	21a4      	movs	r1, #164	@ 0xa4
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3344      	adds	r3, #68	@ 0x44
 8002fb6:	4a07      	ldr	r2, [pc, #28]	@ (8002fd4 <initializeMotors+0x314>)
 8002fb8:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR2_Pin;
 8002fba:	4a02      	ldr	r2, [pc, #8]	@ (8002fc4 <initializeMotors+0x304>)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	21a4      	movs	r1, #164	@ 0xa4
 8002fc0:	e010      	b.n	8002fe4 <initializeMotors+0x324>
 8002fc2:	bf00      	nop
 8002fc4:	20005844 	.word	0x20005844
 8002fc8:	20004f8c 	.word	0x20004f8c
 8002fcc:	20004c68 	.word	0x20004c68
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40021800 	.word	0x40021800
 8002fdc:	20004c1c 	.word	0x20004c1c
 8002fe0:	20004e7c 	.word	0x20004e7c
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	4413      	add	r3, r2
 8002fea:	3348      	adds	r3, #72	@ 0x48
 8002fec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ff0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN2_GPIO_Port;
 8002ff2:	4a93      	ldr	r2, [pc, #588]	@ (8003240 <initializeMotors+0x580>)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	21a4      	movs	r1, #164	@ 0xa4
 8002ff8:	fb01 f303 	mul.w	r3, r1, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	334c      	adds	r3, #76	@ 0x4c
 8003000:	4a90      	ldr	r2, [pc, #576]	@ (8003244 <initializeMotors+0x584>)
 8003002:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN2_Pin;
 8003004:	4a8e      	ldr	r2, [pc, #568]	@ (8003240 <initializeMotors+0x580>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	21a4      	movs	r1, #164	@ 0xa4
 800300a:	fb01 f303 	mul.w	r3, r1, r3
 800300e:	4413      	add	r3, r2
 8003010:	3350      	adds	r3, #80	@ 0x50
 8003012:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003016:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG2_GPIO_Port;
 8003018:	4a89      	ldr	r2, [pc, #548]	@ (8003240 <initializeMotors+0x580>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	21a4      	movs	r1, #164	@ 0xa4
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3354      	adds	r3, #84	@ 0x54
 8003026:	4a88      	ldr	r2, [pc, #544]	@ (8003248 <initializeMotors+0x588>)
 8003028:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG2_Pin;
 800302a:	4a85      	ldr	r2, [pc, #532]	@ (8003240 <initializeMotors+0x580>)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	21a4      	movs	r1, #164	@ 0xa4
 8003030:	fb01 f303 	mul.w	r3, r1, r3
 8003034:	4413      	add	r3, r2
 8003036:	3358      	adds	r3, #88	@ 0x58
 8003038:	2204      	movs	r2, #4
 800303a:	801a      	strh	r2, [r3, #0]


        }
        if(i == 2){
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b02      	cmp	r3, #2
 8003040:	d175      	bne.n	800312e <initializeMotors+0x46e>
        	        	// Configure motor 3 Y-axis
        	            // TIMER configurations
            motors[i].driver.htim = &htim5;				 // TIMER HANDLER
 8003042:	4a7f      	ldr	r2, [pc, #508]	@ (8003240 <initializeMotors+0x580>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	21a4      	movs	r1, #164	@ 0xa4
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	3310      	adds	r3, #16
 8003050:	4a7e      	ldr	r2, [pc, #504]	@ (800324c <initializeMotors+0x58c>)
 8003052:	601a      	str	r2, [r3, #0]
        	motors[i].driver.step_channel = TIM_CHANNEL_1; // PWM channel for motor 1
 8003054:	4a7a      	ldr	r2, [pc, #488]	@ (8003240 <initializeMotors+0x580>)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	21a4      	movs	r1, #164	@ 0xa4
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	3314      	adds	r3, #20
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003066:	4a76      	ldr	r2, [pc, #472]	@ (8003240 <initializeMotors+0x580>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	21a4      	movs	r1, #164	@ 0xa4
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	331c      	adds	r3, #28
 8003074:	2200      	movs	r2, #0
 8003076:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart5;
 8003078:	4a71      	ldr	r2, [pc, #452]	@ (8003240 <initializeMotors+0x580>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	21a4      	movs	r1, #164	@ 0xa4
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	3304      	adds	r3, #4
 8003086:	4a72      	ldr	r2, [pc, #456]	@ (8003250 <initializeMotors+0x590>)
 8003088:	601a      	str	r2, [r3, #0]
        	motors[i].stepsPerRevolution = 400;
 800308a:	4a6d      	ldr	r2, [pc, #436]	@ (8003240 <initializeMotors+0x580>)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	21a4      	movs	r1, #164	@ 0xa4
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3364      	adds	r3, #100	@ 0x64
 8003098:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800309c:	601a      	str	r2, [r3, #0]
        	            // GPIO PINS
            motors[i].driver.step_port = STEP3_GPIO_Port;
 800309e:	4a68      	ldr	r2, [pc, #416]	@ (8003240 <initializeMotors+0x580>)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	21a4      	movs	r1, #164	@ 0xa4
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	333c      	adds	r3, #60	@ 0x3c
 80030ac:	4a69      	ldr	r2, [pc, #420]	@ (8003254 <initializeMotors+0x594>)
 80030ae:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP3_Pin;
 80030b0:	4a63      	ldr	r2, [pc, #396]	@ (8003240 <initializeMotors+0x580>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	21a4      	movs	r1, #164	@ 0xa4
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3340      	adds	r3, #64	@ 0x40
 80030be:	2201      	movs	r2, #1
 80030c0:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR3_GPIO_Port;
 80030c2:	4a5f      	ldr	r2, [pc, #380]	@ (8003240 <initializeMotors+0x580>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	21a4      	movs	r1, #164	@ 0xa4
 80030c8:	fb01 f303 	mul.w	r3, r1, r3
 80030cc:	4413      	add	r3, r2
 80030ce:	3344      	adds	r3, #68	@ 0x44
 80030d0:	4a5c      	ldr	r2, [pc, #368]	@ (8003244 <initializeMotors+0x584>)
 80030d2:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR3_Pin;
 80030d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003240 <initializeMotors+0x580>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	21a4      	movs	r1, #164	@ 0xa4
 80030da:	fb01 f303 	mul.w	r3, r1, r3
 80030de:	4413      	add	r3, r2
 80030e0:	3348      	adds	r3, #72	@ 0x48
 80030e2:	2204      	movs	r2, #4
 80030e4:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN3_GPIO_Port;
 80030e6:	4a56      	ldr	r2, [pc, #344]	@ (8003240 <initializeMotors+0x580>)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	21a4      	movs	r1, #164	@ 0xa4
 80030ec:	fb01 f303 	mul.w	r3, r1, r3
 80030f0:	4413      	add	r3, r2
 80030f2:	334c      	adds	r3, #76	@ 0x4c
 80030f4:	4a53      	ldr	r2, [pc, #332]	@ (8003244 <initializeMotors+0x584>)
 80030f6:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN3_Pin;
 80030f8:	4a51      	ldr	r2, [pc, #324]	@ (8003240 <initializeMotors+0x580>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	21a4      	movs	r1, #164	@ 0xa4
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	4413      	add	r3, r2
 8003104:	3350      	adds	r3, #80	@ 0x50
 8003106:	2280      	movs	r2, #128	@ 0x80
 8003108:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG3_GPIO_Port;
 800310a:	4a4d      	ldr	r2, [pc, #308]	@ (8003240 <initializeMotors+0x580>)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	21a4      	movs	r1, #164	@ 0xa4
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3354      	adds	r3, #84	@ 0x54
 8003118:	4a4b      	ldr	r2, [pc, #300]	@ (8003248 <initializeMotors+0x588>)
 800311a:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG3_Pin;
 800311c:	4a48      	ldr	r2, [pc, #288]	@ (8003240 <initializeMotors+0x580>)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	21a4      	movs	r1, #164	@ 0xa4
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3358      	adds	r3, #88	@ 0x58
 800312a:	2240      	movs	r2, #64	@ 0x40
 800312c:	801a      	strh	r2, [r3, #0]


        }

        if(i == 3){
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b03      	cmp	r3, #3
 8003132:	d176      	bne.n	8003222 <initializeMotors+0x562>
        	// Configure motor 4 Y-axis
            // TIMER configurations
            motors[i].driver.htim = &htim3;				 // TIMER HANDLER
 8003134:	4a42      	ldr	r2, [pc, #264]	@ (8003240 <initializeMotors+0x580>)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	21a4      	movs	r1, #164	@ 0xa4
 800313a:	fb01 f303 	mul.w	r3, r1, r3
 800313e:	4413      	add	r3, r2
 8003140:	3310      	adds	r3, #16
 8003142:	4a45      	ldr	r2, [pc, #276]	@ (8003258 <initializeMotors+0x598>)
 8003144:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_channel = TIM_CHANNEL_3; // PWM channel for motor 1
 8003146:	4a3e      	ldr	r2, [pc, #248]	@ (8003240 <initializeMotors+0x580>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	21a4      	movs	r1, #164	@ 0xa4
 800314c:	fb01 f303 	mul.w	r3, r1, r3
 8003150:	4413      	add	r3, r2
 8003152:	3314      	adds	r3, #20
 8003154:	2208      	movs	r2, #8
 8003156:	601a      	str	r2, [r3, #0]
            motors[i].driver.mstep = 0;
 8003158:	4a39      	ldr	r2, [pc, #228]	@ (8003240 <initializeMotors+0x580>)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	21a4      	movs	r1, #164	@ 0xa4
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	4413      	add	r3, r2
 8003164:	331c      	adds	r3, #28
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]
            motors[i].driver.huart = &huart6;
 800316a:	4a35      	ldr	r2, [pc, #212]	@ (8003240 <initializeMotors+0x580>)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	21a4      	movs	r1, #164	@ 0xa4
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	4a38      	ldr	r2, [pc, #224]	@ (800325c <initializeMotors+0x59c>)
 800317a:	601a      	str	r2, [r3, #0]
            motors[i].stepsPerRevolution = 400;
 800317c:	4a30      	ldr	r2, [pc, #192]	@ (8003240 <initializeMotors+0x580>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	21a4      	movs	r1, #164	@ 0xa4
 8003182:	fb01 f303 	mul.w	r3, r1, r3
 8003186:	4413      	add	r3, r2
 8003188:	3364      	adds	r3, #100	@ 0x64
 800318a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800318e:	601a      	str	r2, [r3, #0]
            // GPIO PINS
            motors[i].driver.step_port = STEP4_GPIO_Port;
 8003190:	4a2b      	ldr	r2, [pc, #172]	@ (8003240 <initializeMotors+0x580>)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	21a4      	movs	r1, #164	@ 0xa4
 8003196:	fb01 f303 	mul.w	r3, r1, r3
 800319a:	4413      	add	r3, r2
 800319c:	333c      	adds	r3, #60	@ 0x3c
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <initializeMotors+0x588>)
 80031a0:	601a      	str	r2, [r3, #0]
            motors[i].driver.step_pin = STEP4_Pin;
 80031a2:	4a27      	ldr	r2, [pc, #156]	@ (8003240 <initializeMotors+0x580>)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	21a4      	movs	r1, #164	@ 0xa4
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	3340      	adds	r3, #64	@ 0x40
 80031b0:	2201      	movs	r2, #1
 80031b2:	801a      	strh	r2, [r3, #0]
            motors[i].driver.dir_port = DIR4_GPIO_Port;
 80031b4:	4a22      	ldr	r2, [pc, #136]	@ (8003240 <initializeMotors+0x580>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	21a4      	movs	r1, #164	@ 0xa4
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3344      	adds	r3, #68	@ 0x44
 80031c2:	4a20      	ldr	r2, [pc, #128]	@ (8003244 <initializeMotors+0x584>)
 80031c4:	601a      	str	r2, [r3, #0]
            motors[i].driver.dir_pin = DIR4_Pin;
 80031c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003240 <initializeMotors+0x580>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	21a4      	movs	r1, #164	@ 0xa4
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3348      	adds	r3, #72	@ 0x48
 80031d4:	2201      	movs	r2, #1
 80031d6:	801a      	strh	r2, [r3, #0]
            motors[i].driver.enn_port = ENN4_GPIO_Port;
 80031d8:	4a19      	ldr	r2, [pc, #100]	@ (8003240 <initializeMotors+0x580>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	21a4      	movs	r1, #164	@ 0xa4
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	4413      	add	r3, r2
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <initializeMotors+0x584>)
 80031e8:	601a      	str	r2, [r3, #0]
            motors[i].driver.enn_pin = ENN4_Pin;
 80031ea:	4a15      	ldr	r2, [pc, #84]	@ (8003240 <initializeMotors+0x580>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	21a4      	movs	r1, #164	@ 0xa4
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	4413      	add	r3, r2
 80031f6:	3350      	adds	r3, #80	@ 0x50
 80031f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031fc:	801a      	strh	r2, [r3, #0]
            motors[i].driver.diag_port = DIAG4_GPIO_Port;
 80031fe:	4a10      	ldr	r2, [pc, #64]	@ (8003240 <initializeMotors+0x580>)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	21a4      	movs	r1, #164	@ 0xa4
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	3354      	adds	r3, #84	@ 0x54
 800320c:	4a14      	ldr	r2, [pc, #80]	@ (8003260 <initializeMotors+0x5a0>)
 800320e:	601a      	str	r2, [r3, #0]
            motors[i].driver.diag_pin = DIAG4_Pin;
 8003210:	4a0b      	ldr	r2, [pc, #44]	@ (8003240 <initializeMotors+0x580>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	21a4      	movs	r1, #164	@ 0xa4
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3358      	adds	r3, #88	@ 0x58
 800321e:	2210      	movs	r2, #16
 8003220:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < MAX_MOTORS; i++) {
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3301      	adds	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b03      	cmp	r3, #3
 800322c:	f77f ad4e 	ble.w	8002ccc <initializeMotors+0xc>


    }


}
 8003230:	bf00      	nop
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	20005844 	.word	0x20005844
 8003244:	40021000 	.word	0x40021000
 8003248:	40020400 	.word	0x40020400
 800324c:	20004d4c 	.word	0x20004d4c
 8003250:	20004f04 	.word	0x20004f04
 8003254:	40020000 	.word	0x40020000
 8003258:	20004cb4 	.word	0x20004cb4
 800325c:	2000509c 	.word	0x2000509c
 8003260:	40021400 	.word	0x40021400

08003264 <TMC2209_setMotorsConfiguration>:

void TMC2209_setMotorsConfiguration(Motor *motors){	// Set all motor configurations based on their variables set from init function
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800326c:	2300      	movs	r3, #0
 800326e:	75fb      	strb	r3, [r7, #23]
 8003270:	e05f      	b.n	8003332 <TMC2209_setMotorsConfiguration+0xce>
    	// DEFAULT VALUES
    	uint16_t mstep = 16;
 8003272:	2310      	movs	r3, #16
 8003274:	82bb      	strh	r3, [r7, #20]
    	uint8_t IHOLD = 16;
 8003276:	2310      	movs	r3, #16
 8003278:	74fb      	strb	r3, [r7, #19]
    	uint8_t IRUN = 31;
 800327a:	231f      	movs	r3, #31
 800327c:	74bb      	strb	r3, [r7, #18]
    	uint8_t IDELAY = 8;
 800327e:	2308      	movs	r3, #8
 8003280:	747b      	strb	r3, [r7, #17]
    	uint8_t sgthrs = 70;
 8003282:	2346      	movs	r3, #70	@ 0x46
 8003284:	743b      	strb	r3, [r7, #16]
    	uint32_t coolThrs = 5000;
 8003286:	f241 3388 	movw	r3, #5000	@ 0x1388
 800328a:	60fb      	str	r3, [r7, #12]

    	TMC2209_EnableDriver(&motors[i], 1);
 800328c:	7dfb      	ldrb	r3, [r7, #23]
 800328e:	22a4      	movs	r2, #164	@ 0xa4
 8003290:	fb02 f303 	mul.w	r3, r2, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	4413      	add	r3, r2
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe ff9a 	bl	80021d4 <TMC2209_EnableDriver>
    	HAL_Delay(100);
 80032a0:	2064      	movs	r0, #100	@ 0x64
 80032a2:	f003 fdfb 	bl	8006e9c <HAL_Delay>
    	TMC2209_setPDNuart(&motors[i], 1);
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
 80032a8:	22a4      	movs	r2, #164	@ 0xa4
 80032aa:	fb02 f303 	mul.w	r3, r2, r3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	2101      	movs	r1, #1
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fadd 	bl	8002874 <TMC2209_setPDNuart>
    	HAL_Delay(100);
 80032ba:	2064      	movs	r0, #100	@ 0x64
 80032bc:	f003 fdee 	bl	8006e9c <HAL_Delay>
    	//TMC2209_configureCurrent(motors, IHOLD, IRUN, IDELAY); -- DISABLED
    	HAL_Delay(10);
 80032c0:	200a      	movs	r0, #10
 80032c2:	f003 fdeb 	bl	8006e9c <HAL_Delay>
    	TMC2209_setMicrosteppingResolution(&motors[i], mstep);
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	22a4      	movs	r2, #164	@ 0xa4
 80032ca:	fb02 f303 	mul.w	r3, r2, r3
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	8aba      	ldrh	r2, [r7, #20]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fb92 	bl	8002a00 <TMC2209_setMicrosteppingResolution>
    	HAL_Delay(500);
 80032dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032e0:	f003 fddc 	bl	8006e9c <HAL_Delay>
    	TMC2209_enableStallDetection(&motors[i], sgthrs);
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	22a4      	movs	r2, #164	@ 0xa4
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	7c3a      	ldrb	r2, [r7, #16]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff fc67 	bl	8002bc8 <TMC2209_enableStallDetection>
    	HAL_Delay(10);
 80032fa:	200a      	movs	r0, #10
 80032fc:	f003 fdce 	bl	8006e9c <HAL_Delay>
    	TMC2209_SetTCoolThrs(&motors[i], coolThrs);
 8003300:	7dfb      	ldrb	r3, [r7, #23]
 8003302:	22a4      	movs	r2, #164	@ 0xa4
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4413      	add	r3, r2
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff fc84 	bl	8002c1c <TMC2209_SetTCoolThrs>
    	HAL_Delay(10);
 8003314:	200a      	movs	r0, #10
 8003316:	f003 fdc1 	bl	8006e9c <HAL_Delay>
    	TMC2209_readStandstillIndicator(&motors[i]);
 800331a:	7dfb      	ldrb	r3, [r7, #23]
 800331c:	22a4      	movs	r2, #164	@ 0xa4
 800331e:	fb02 f303 	mul.w	r3, r2, r3
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fca8 	bl	8002c7c <TMC2209_readStandstillIndicator>
    for (uint8_t i = 0; i < MAX_MOTORS; i++) {
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	3301      	adds	r3, #1
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	7dfb      	ldrb	r3, [r7, #23]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d99c      	bls.n	8003272 <TMC2209_setMotorsConfiguration+0xe>
    }
    TMC2209_SetSpeed(&motors[0], 8000);
 8003338:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7fe ff5c 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	33a4      	adds	r3, #164	@ 0xa4
 8003346:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800334a:	4618      	mov	r0, r3
 800334c:	f7fe ff55 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003356:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe ff4d 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8003366:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe ff45 	bl	80021fa <TMC2209_SetSpeed>
}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <initializeAxis>:


void initializeAxis(Axis *axis, Motor *motor1, Motor *motor2, uint8_t circumference, const char *axisName) {
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
 8003384:	70fb      	strb	r3, [r7, #3]
    // Assign motors to the axis
    axis->motors[0] = motor1;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	601a      	str	r2, [r3, #0]
    axis->motors[1] = motor2;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	605a      	str	r2, [r3, #4]
    // The circumference variable is calculated based on the physical setup. For example: GT2 20-tooth pulley with 2mm pitch(Pulley Circumference = Number of Teeth * Belt Pitch)

    // Axis dimensions and step calculations
    axis->motors[0]->currentPositionMM = 0;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f04f 0200 	mov.w	r2, #0
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[1]->currentPositionMM = 0;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    axis->motors[0]->prevPositionMM = 0;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[1]->prevPositionMM = 0;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    axis->motors[0]->nextPositionMM = 0;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    axis->motors[1]->nextPositionMM = 0;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    uint32_t totalStepsPerRevolution = motor1->stepsPerRevolution * motor1->driver.mstep; // Both motors use the same microstepping
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	8b92      	ldrh	r2, [r2, #28]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	617b      	str	r3, [r7, #20]
    motor1->totalStepsPerRevolution = totalStepsPerRevolution;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	669a      	str	r2, [r3, #104]	@ 0x68
    motor2->totalStepsPerRevolution = totalStepsPerRevolution;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	669a      	str	r2, [r3, #104]	@ 0x68
    axis->stepPerUnit = totalStepsPerRevolution / circumference;
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033fc:	ee07 3a90 	vmov	s15, r3
 8003400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	edc3 7a04 	vstr	s15, [r3, #16]

    // IDs for motors controlling the axis, eg. X1, X2
    snprintf(axis->id[0], sizeof(axis->id[0]), "%s%d", axisName, motor1->driver.id);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f103 0014 	add.w	r0, r3, #20
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <initializeAxis+0xcc>)
 800341a:	210a      	movs	r1, #10
 800341c:	f012 fe72 	bl	8016104 <sniprintf>
    if (motor2 != NULL) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00a      	beq.n	800343c <initializeAxis+0xc4>
        snprintf(axis->id[1], sizeof(axis->id[1]), "%s%d", axisName, motor2->driver.id);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f103 001e 	add.w	r0, r3, #30
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	4a03      	ldr	r2, [pc, #12]	@ (8003444 <initializeAxis+0xcc>)
 8003436:	210a      	movs	r1, #10
 8003438:	f012 fe64 	bl	8016104 <sniprintf>
    }
}
 800343c:	bf00      	nop
 800343e:	3718      	adds	r7, #24
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	0801869c 	.word	0x0801869c

08003448 <initializeSystem>:

void initializeSystem(){
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af02      	add	r7, sp, #8
	// motors
	 initializeMotors();
 800344e:	f7ff fc37 	bl	8002cc0 <initializeMotors>
    // motor configurations
	TMC2209_setMotorsConfiguration(&motors);
 8003452:	480e      	ldr	r0, [pc, #56]	@ (800348c <initializeSystem+0x44>)
 8003454:	f7ff ff06 	bl	8003264 <TMC2209_setMotorsConfiguration>
    // axis
	initializeAxis(&axes[0], &motors[0],&motors[1], 8, "Y");
 8003458:	4b0d      	ldr	r3, [pc, #52]	@ (8003490 <initializeSystem+0x48>)
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	2308      	movs	r3, #8
 800345e:	4a0d      	ldr	r2, [pc, #52]	@ (8003494 <initializeSystem+0x4c>)
 8003460:	490a      	ldr	r1, [pc, #40]	@ (800348c <initializeSystem+0x44>)
 8003462:	480d      	ldr	r0, [pc, #52]	@ (8003498 <initializeSystem+0x50>)
 8003464:	f7ff ff88 	bl	8003378 <initializeAxis>
	initializeAxis(&axes[1], &motors[2],&motors[3], 40, "X");
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <initializeSystem+0x54>)
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2328      	movs	r3, #40	@ 0x28
 800346e:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <initializeSystem+0x58>)
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <initializeSystem+0x5c>)
 8003472:	480d      	ldr	r0, [pc, #52]	@ (80034a8 <initializeSystem+0x60>)
 8003474:	f7ff ff80 	bl	8003378 <initializeAxis>



		xSemaphoreGive(xInitSemaphore); // signal welcome menu state to proceed with next state
 8003478:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <initializeSystem+0x64>)
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	2300      	movs	r3, #0
 800347e:	2200      	movs	r2, #0
 8003480:	2100      	movs	r1, #0
 8003482:	f00f fc41 	bl	8012d08 <xQueueGenericSend>

}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20005844 	.word	0x20005844
 8003490:	080186a4 	.word	0x080186a4
 8003494:	200058e8 	.word	0x200058e8
 8003498:	20005ad4 	.word	0x20005ad4
 800349c:	080186a8 	.word	0x080186a8
 80034a0:	20005a30 	.word	0x20005a30
 80034a4:	2000598c 	.word	0x2000598c
 80034a8:	20005afc 	.word	0x20005afc
 80034ac:	20002364 	.word	0x20002364

080034b0 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	213c      	movs	r1, #60	@ 0x3c
 80034be:	4618      	mov	r0, r3
 80034c0:	f007 fe0e 	bl	800b0e0 <HAL_TIM_Encoder_Start>
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf34      	ite	cc
 80034f0:	2301      	movcc	r3, #1
 80034f2:	2300      	movcs	r3, #0
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	429a      	cmp	r2, r3
 8003502:	bf8c      	ite	hi
 8003504:	2301      	movhi	r3, #1
 8003506:	2300      	movls	r3, #0
 8003508:	b2da      	uxtb	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
	...

08003528 <CheckConnection>:


#include "extras.h"


bool CheckConnection(SERVO_Handle_TypeDef* hservo,SERVO_Handle_TypeDef* hservo2){
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

	SERVO_WritePosition(hservo, SERVO1_CHECK_POS);
 8003532:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800358c <CheckConnection+0x64>
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8f8 	bl	800372c <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_CHECK_POS);
 800353c:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8003590 <CheckConnection+0x68>
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f000 f8f3 	bl	800372c <SERVO_WritePosition>
	HAL_Delay(5000);
 8003546:	f241 3088 	movw	r0, #5000	@ 0x1388
 800354a:	f003 fca7 	bl	8006e9c <HAL_Delay>
	bool x =0;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
	if(HAL_GPIO_ReadPin(Probe_GPIO_Port,Probe_Pin) == GPIO_PIN_SET){
 8003552:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003556:	480f      	ldr	r0, [pc, #60]	@ (8003594 <CheckConnection+0x6c>)
 8003558:	f004 fb5c 	bl	8007c14 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d102      	bne.n	8003568 <CheckConnection+0x40>
	     x = true;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e001      	b.n	800356c <CheckConnection+0x44>
	}
	else{
		 x=false;
 8003568:	2300      	movs	r3, #0
 800356a:	73fb      	strb	r3, [r7, #15]
	}
	SERVO_WritePosition(hservo, SERVO1_HOME_POS);
 800356c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003598 <CheckConnection+0x70>
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8db 	bl	800372c <SERVO_WritePosition>
	SERVO_WritePosition(hservo2, SERVO2_HOME_POS);
 8003576:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800359c <CheckConnection+0x74>
 800357a:	6838      	ldr	r0, [r7, #0]
 800357c:	f000 f8d6 	bl	800372c <SERVO_WritePosition>
//	HAL_Delay(1000);
	return x;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	42900000 	.word	0x42900000
 8003590:	42280000 	.word	0x42280000
 8003594:	40021000 	.word	0x40021000
 8003598:	42b40000 	.word	0x42b40000
 800359c:	42700000 	.word	0x42700000

080035a0 <IsSensorTriggered>:
bool IsSensorTriggered(GPIO_TypeDef *sensorPort, uint16_t sensorPin)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	807b      	strh	r3, [r7, #2]
    // Read the sensor state
    GPIO_PinState sensor_state = HAL_GPIO_ReadPin(sensorPort, sensorPin);
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	4619      	mov	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f004 fb2f 	bl	8007c14 <HAL_GPIO_ReadPin>
 80035b6:	4603      	mov	r3, r0
 80035b8:	73fb      	strb	r3, [r7, #15]

    // Small delay to avoid button bounce or noise
    if(sensor_state == GPIO_PIN_SET){
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <IsSensorTriggered+0x24>
    	return false;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <IsSensorTriggered+0x26>

    }
    else{
    	return true;
 80035c4:	2301      	movs	r3, #1
    }
    // Return true if the sensor is triggered (GPIO_PIN_SET), false otherwise

}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <PWM_Init>:
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */

void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80035dc:	eeb0 0a67 	vmov.f32	s0, s15
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f80d 	bl	8003600 <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f007 f9bf 	bl	800a974 <HAL_TIM_PWM_Start>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 800360c:	edd7 7a00 	vldr	s15, [r7]
 8003610:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d503      	bpl.n	8003622 <PWM_WriteDuty+0x22>
    duty = 0.0;
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	e00a      	b.n	8003638 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 8003622:	edd7 7a00 	vldr	s15, [r7]
 8003626:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80036e4 <PWM_WriteDuty+0xe4>
 800362a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	dd01      	ble.n	8003638 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8003634:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <PWM_WriteDuty+0xe8>)
 8003636:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003646:	3301      	adds	r3, #1
 8003648:	ee07 3a90 	vmov	s15, r3
 800364c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003650:	edd7 7a00 	vldr	s15, [r7]
 8003654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003658:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80036e4 <PWM_WriteDuty+0xe4>
 800365c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003660:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003664:	ee17 3a90 	vmov	r3, s15
 8003668:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <PWM_WriteDuty+0x7e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800367c:	e02c      	b.n	80036d8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b04      	cmp	r3, #4
 8003684:	d105      	bne.n	8003692 <PWM_WriteDuty+0x92>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003690:	e022      	b.n	80036d8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b08      	cmp	r3, #8
 8003698:	d105      	bne.n	80036a6 <PWM_WriteDuty+0xa6>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80036a4:	e018      	b.n	80036d8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d105      	bne.n	80036ba <PWM_WriteDuty+0xba>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80036b8:	e00e      	b.n	80036d8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d105      	bne.n	80036ce <PWM_WriteDuty+0xce>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80036cc:	e004      	b.n	80036d8 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	42c80000 	.word	0x42c80000
 80036e8:	42c80000 	.word	0x42c80000

080036ec <SERVO_Init>:
float PWM_ReadDuty(const PWM_Handle_TypeDef* hpwm)
{
  return hpwm->Duty;
}
void SERVO_Init(SERVO_Handle_TypeDef* hservo)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
	if(hservo->ID == 1 ){
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	7c1b      	ldrb	r3, [r3, #16]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <SERVO_Init+0x1c>
	SERVO_WritePosition(hservo, SERVO1_HOME_POS); // Home position is 90 deg, Down is 72 deg.
 80036fc:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8003724 <SERVO_Init+0x38>
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f813 	bl	800372c <SERVO_WritePosition>
 8003706:	e004      	b.n	8003712 <SERVO_Init+0x26>
	}
	else{
	SERVO_WritePosition(hservo, SERVO2_HOME_POS); // Home position is 50 deg, down is 40.
 8003708:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003728 <SERVO_Init+0x3c>
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f80d 	bl	800372c <SERVO_WritePosition>
	}

	PWM_Init(&(hservo->PwmOut));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4618      	mov	r0, r3
 8003716:	f7ff ff5a 	bl	80035ce <PWM_Init>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	42b40000 	.word	0x42b40000
 8003728:	42700000 	.word	0x42700000

0800372c <SERVO_WritePosition>:

void SERVO_WritePosition(SERVO_Handle_TypeDef* hservo, float pos)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	ed87 0a00 	vstr	s0, [r7]
	hservo->Position = __SATURATION(pos, 0.0f, 180.0f);
 8003738:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003794 <SERVO_WritePosition+0x68>
 800373c:	ed97 0a00 	vldr	s0, [r7]
 8003740:	f014 fe4d 	bl	80183de <fminf>
 8003744:	eef0 7a40 	vmov.f32	s15, s0
 8003748:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8003798 <SERVO_WritePosition+0x6c>
 800374c:	eeb0 0a67 	vmov.f32	s0, s15
 8003750:	f014 fe28 	bl	80183a4 <fmaxf>
 8003754:	eef0 7a40 	vmov.f32	s15, s0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	edc3 7a03 	vstr	s15, [r3, #12]
	float duty = __LINEAR_TRANSFORM(hservo->Position, 0.0f, 180.0f, SERVO_MIN_DUTY, SERVO_MAX_DUTY);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	ed93 7a03 	vldr	s14, [r3, #12]
 8003764:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8003794 <SERVO_WritePosition+0x68>
 8003768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003770:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003774:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 8003778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800377c:	edc7 7a03 	vstr	s15, [r7, #12]
	PWM_WriteDuty(&(hservo->PwmOut), duty);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	ed97 0a03 	vldr	s0, [r7, #12]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff ff3a 	bl	8003600 <PWM_WriteDuty>
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	43340000 	.word	0x43340000
 8003798:	00000000 	.word	0x00000000

0800379c <HAL_UART_RxCpltCallback>:

uint8_t uart3_rxData[PCB2GCODE_REPLY_SIZE];
volatile bool uart3_commandReceived = false;

// UART Receive Complete Callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	// UART callback for read from TMC2209
    if (huart->Instance == USART2 || huart->Instance == USART6 || huart->Instance == UART4 || huart->Instance == UART5) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0f      	ldr	r2, [pc, #60]	@ (80037e8 <HAL_UART_RxCpltCallback+0x4c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_UART_RxCpltCallback+0x30>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a0e      	ldr	r2, [pc, #56]	@ (80037ec <HAL_UART_RxCpltCallback+0x50>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d009      	beq.n	80037cc <HAL_UART_RxCpltCallback+0x30>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <HAL_UART_RxCpltCallback+0x54>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_UART_RxCpltCallback+0x30>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	@ (80037f4 <HAL_UART_RxCpltCallback+0x58>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d108      	bne.n	80037de <HAL_UART_RxCpltCallback+0x42>
        // Prevent buffer overflow by iterating only up to TMC_REPLY_SIZE
        memcpy(rxBuffer, rxData + 1, TMC_REPLY_SIZE+1);
 80037cc:	4b0a      	ldr	r3, [pc, #40]	@ (80037f8 <HAL_UART_RxCpltCallback+0x5c>)
 80037ce:	2209      	movs	r2, #9
 80037d0:	4619      	mov	r1, r3
 80037d2:	480a      	ldr	r0, [pc, #40]	@ (80037fc <HAL_UART_RxCpltCallback+0x60>)
 80037d4:	f012 fe03 	bl	80163de <memcpy>
        rxBufferReady = 1;
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_UART_RxCpltCallback+0x64>)
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]

    }

    // TODO: UART callback for read from PCB2Gcode

}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40004400 	.word	0x40004400
 80037ec:	40011400 	.word	0x40011400
 80037f0:	40004c00 	.word	0x40004c00
 80037f4:	40005000 	.word	0x40005000
 80037f8:	20002339 	.word	0x20002339
 80037fc:	20002344 	.word	0x20002344
 8003800:	2000234c 	.word	0x2000234c

08003804 <calibProcessTask>:
  RunCalibrationStateMachine(): Encapsulates the calibration logic.
  Parameters can include pointers to LCD, motors, and any other state
  needed to update the calibration instructions.
-------------------------------------------------------------------*/

void calibProcessTask(void *pvParameters){
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af02      	add	r7, sp, #8
 800380a:	6078      	str	r0, [r7, #4]

	for(;;){
		EventBits_t uxBits = xEventGroupWaitBits(calibEventGroup, CALIB_START_BIT | CALIB_STOP_BIT, pdTRUE, pdFALSE, portMAX_DELAY);
 800380c:	4b21      	ldr	r3, [pc, #132]	@ (8003894 <calibProcessTask+0x90>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	f04f 33ff 	mov.w	r3, #4294967295
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2300      	movs	r3, #0
 8003818:	2201      	movs	r2, #1
 800381a:	2105      	movs	r1, #5
 800381c:	f00e fea8 	bl	8012570 <xEventGroupWaitBits>
 8003820:	60f8      	str	r0, [r7, #12]
    if(uxBits & CALIB_STOP_BIT) return; // CALIB ABORTED TODO: Display calib aborted on LCD
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d12f      	bne.n	800388c <calibProcessTask+0x88>
	if (uxBits & CALIB_START_BIT) {
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d026      	beq.n	8003884 <calibProcessTask+0x80>

     switch(g_calibSelection){
 8003836:	4b18      	ldr	r3, [pc, #96]	@ (8003898 <calibProcessTask+0x94>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b01      	cmp	r3, #1
 800383e:	d002      	beq.n	8003846 <calibProcessTask+0x42>
 8003840:	2b02      	cmp	r3, #2
 8003842:	d00b      	beq.n	800385c <calibProcessTask+0x58>
//                       // xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
//        //RunManualCalibrationStateMachine(&hlcd3, &motors);
//        currentState = MENU_STATE_TESTING; // TODO: Add Test Process
//        break;
        default:
        break;
 8003844:	e018      	b.n	8003878 <calibProcessTask+0x74>
        AutoCalibration(&axes,&motors); 
 8003846:	4915      	ldr	r1, [pc, #84]	@ (800389c <calibProcessTask+0x98>)
 8003848:	4815      	ldr	r0, [pc, #84]	@ (80038a0 <calibProcessTask+0x9c>)
 800384a:	f000 fe6b 	bl	8004524 <AutoCalibration>
        xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 800384e:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <calibProcessTask+0x90>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2102      	movs	r1, #2
 8003854:	4618      	mov	r0, r3
 8003856:	f00e ff65 	bl	8012724 <xEventGroupSetBits>
        break;
 800385a:	e00d      	b.n	8003878 <calibProcessTask+0x74>
        	ManualCalibration(&axes,&motors);
 800385c:	490f      	ldr	r1, [pc, #60]	@ (800389c <calibProcessTask+0x98>)
 800385e:	4810      	ldr	r0, [pc, #64]	@ (80038a0 <calibProcessTask+0x9c>)
 8003860:	f000 ff38 	bl	80046d4 <ManualCalibration>
            xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003864:	4b0b      	ldr	r3, [pc, #44]	@ (8003894 <calibProcessTask+0x90>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2102      	movs	r1, #2
 800386a:	4618      	mov	r0, r3
 800386c:	f00e ff5a 	bl	8012724 <xEventGroupSetBits>
            currentState = MENU_STATE_TESTING; // TODO: Add Test Process
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <calibProcessTask+0xa0>)
 8003872:	2207      	movs	r2, #7
 8003874:	701a      	strb	r2, [r3, #0]
        break;
 8003876:	bf00      	nop
//            xSemaphoreGive(lcdMutex);
//        }

    }
        // Short delay to let other tasks run.
     xEventGroupSetBits(calibEventGroup, CALIB_COMPLETE_BIT);
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <calibProcessTask+0x90>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2102      	movs	r1, #2
 800387e:	4618      	mov	r0, r3
 8003880:	f00e ff50 	bl	8012724 <xEventGroupSetBits>

       }
		vTaskDelay(pdMS_TO_TICKS(10));
 8003884:	200a      	movs	r0, #10
 8003886:	f010 f98f 	bl	8013ba8 <vTaskDelay>
	for(;;){
 800388a:	e7bf      	b.n	800380c <calibProcessTask+0x8>
    if(uxBits & CALIB_STOP_BIT) return; // CALIB ABORTED TODO: Display calib aborted on LCD
 800388c:	bf00      	nop
   }
}
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20002358 	.word	0x20002358
 8003898:	20002368 	.word	0x20002368
 800389c:	20005844 	.word	0x20005844
 80038a0:	20005ad4 	.word	0x20005ad4
 80038a4:	20002354 	.word	0x20002354

080038a8 <motorControlTask>:


void motorControlTask(void *argument) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08e      	sub	sp, #56	@ 0x38
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
		// Queue for motor cmds
	motorCommandQueue = xQueueCreate(256, sizeof(MotorCommand));
 80038b0:	2200      	movs	r2, #0
 80038b2:	212c      	movs	r1, #44	@ 0x2c
 80038b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80038b8:	f00f f98d 	bl	8012bd6 <xQueueGenericCreate>
 80038bc:	4603      	mov	r3, r0
 80038be:	4a62      	ldr	r2, [pc, #392]	@ (8003a48 <motorControlTask+0x1a0>)
 80038c0:	6013      	str	r3, [r2, #0]
	configASSERT(motorCommandQueue != NULL);
 80038c2:	4b61      	ldr	r3, [pc, #388]	@ (8003a48 <motorControlTask+0x1a0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <motorControlTask+0x3e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	b672      	cpsid	i
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	b662      	cpsie	i
 80038de:	637b      	str	r3, [r7, #52]	@ 0x34
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038e0:	bf00      	nop
 80038e2:	bf00      	nop
 80038e4:	e7fd      	b.n	80038e2 <motorControlTask+0x3a>

	MotorCommand cmd;

    for(;;) {
    // Wait for a command from the queue
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 80038e6:	4b58      	ldr	r3, [pc, #352]	@ (8003a48 <motorControlTask+0x1a0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f107 0108 	add.w	r1, r7, #8
 80038ee:	f04f 32ff 	mov.w	r2, #4294967295
 80038f2:	4618      	mov	r0, r3
 80038f4:	f00f fbaa 	bl	801304c <xQueueReceive>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	f040 809b 	bne.w	8003a36 <motorControlTask+0x18e>
    		switch (cmd.command){
 8003900:	7a3b      	ldrb	r3, [r7, #8]
 8003902:	2b09      	cmp	r3, #9
 8003904:	f200 8096 	bhi.w	8003a34 <motorControlTask+0x18c>
 8003908:	a201      	add	r2, pc, #4	@ (adr r2, 8003910 <motorControlTask+0x68>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	0800394f 	.word	0x0800394f
 8003914:	08003973 	.word	0x08003973
 8003918:	08003939 	.word	0x08003939
 800391c:	08003989 	.word	0x08003989
 8003920:	080039a3 	.word	0x080039a3
 8003924:	080039bd 	.word	0x080039bd
 8003928:	080039f1 	.word	0x080039f1
 800392c:	08003a0b 	.word	0x08003a0b
 8003930:	080039d7 	.word	0x080039d7
 8003934:	08003a25 	.word	0x08003a25

    		case	MOTOR_CMD_START: // Start the motor
    				TMC2209_Start(&motors[cmd.motorIndex]);
 8003938:	7abb      	ldrb	r3, [r7, #10]
 800393a:	461a      	mov	r2, r3
 800393c:	23a4      	movs	r3, #164	@ 0xa4
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a42      	ldr	r2, [pc, #264]	@ (8003a4c <motorControlTask+0x1a4>)
 8003944:	4413      	add	r3, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe fcd0 	bl	80022ec <TMC2209_Start>
    				break;
 800394c:	e073      	b.n	8003a36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_MOVETO: // Move the motor to a target position
    				TMC2209_MoveTo(&axes[cmd.axisIndex], cmd.motorIndex, cmd.targetPositionMM);
 800394e:	7a7b      	ldrb	r3, [r7, #9]
 8003950:	461a      	mov	r2, r3
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4a3d      	ldr	r2, [pc, #244]	@ (8003a50 <motorControlTask+0x1a8>)
 800395c:	4413      	add	r3, r2
 800395e:	7aba      	ldrb	r2, [r7, #10]
 8003960:	edd7 7a03 	vldr	s15, [r7, #12]
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	4611      	mov	r1, r2
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fcf4 	bl	8002358 <TMC2209_MoveTo>
    				break;
 8003970:	e061      	b.n	8003a36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_STOP:	// Stop the motor
    				TMC2209_Stop(&motors[cmd.motorIndex]);
 8003972:	7abb      	ldrb	r3, [r7, #10]
 8003974:	461a      	mov	r2, r3
 8003976:	23a4      	movs	r3, #164	@ 0xa4
 8003978:	fb02 f303 	mul.w	r3, r2, r3
 800397c:	4a33      	ldr	r2, [pc, #204]	@ (8003a4c <motorControlTask+0x1a4>)
 800397e:	4413      	add	r3, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fc9d 	bl	80022c0 <TMC2209_Stop>

    				break;
 8003986:	e056      	b.n	8003a36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_DIRECTION:
    				TMC2209_SetDirection(&motors[cmd.motorIndex], cmd.direction);
 8003988:	7abb      	ldrb	r3, [r7, #10]
 800398a:	461a      	mov	r2, r3
 800398c:	23a4      	movs	r3, #164	@ 0xa4
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a2e      	ldr	r2, [pc, #184]	@ (8003a4c <motorControlTask+0x1a4>)
 8003994:	4413      	add	r3, r2
 8003996:	7c3a      	ldrb	r2, [r7, #16]
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fc04 	bl	80021a8 <TMC2209_SetDirection>
    				break;
 80039a0:	e049      	b.n	8003a36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_SETSPEED:
    				TMC2209_SetSpeed(&motors[cmd.motorIndex], cmd.speed);
 80039a2:	7abb      	ldrb	r3, [r7, #10]
 80039a4:	461a      	mov	r2, r3
 80039a6:	23a4      	movs	r3, #164	@ 0xa4
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <motorControlTask+0x1a4>)
 80039ae:	4413      	add	r3, r2
 80039b0:	8a7a      	ldrh	r2, [r7, #18]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fc20 	bl	80021fa <TMC2209_SetSpeed>
    				break;
 80039ba:	e03c      	b.n	8003a36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_MSTEP:
    				TMC2209_setMicrosteppingResolution(&motors[cmd.motorIndex], cmd.mstep);
 80039bc:	7abb      	ldrb	r3, [r7, #10]
 80039be:	461a      	mov	r2, r3
 80039c0:	23a4      	movs	r3, #164	@ 0xa4
 80039c2:	fb02 f303 	mul.w	r3, r2, r3
 80039c6:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <motorControlTask+0x1a4>)
 80039c8:	4413      	add	r3, r2
 80039ca:	8aba      	ldrh	r2, [r7, #20]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff f816 	bl	8002a00 <TMC2209_setMicrosteppingResolution>
    				break;
 80039d4:	e02f      	b.n	8003a36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_CHOPPER:
    			    TMC2209_setSpreadCycle(&motors[cmd.motorIndex], cmd.chopper);
 80039d6:	7abb      	ldrb	r3, [r7, #10]
 80039d8:	461a      	mov	r2, r3
 80039da:	23a4      	movs	r3, #164	@ 0xa4
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	4a1a      	ldr	r2, [pc, #104]	@ (8003a4c <motorControlTask+0x1a4>)
 80039e2:	4413      	add	r3, r2
 80039e4:	7eba      	ldrb	r2, [r7, #26]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fe ffab 	bl	8002944 <TMC2209_setSpreadCycle>
    			    break;
 80039ee:	e022      	b.n	8003a36 <motorControlTask+0x18e>

    		case	MOTOR_CMD_CONFIG_SGTHRS:
    				TMC2209_enableStallDetection(&motors[cmd.motorIndex], cmd.sgthrs);
 80039f0:	7abb      	ldrb	r3, [r7, #10]
 80039f2:	461a      	mov	r2, r3
 80039f4:	23a4      	movs	r3, #164	@ 0xa4
 80039f6:	fb02 f303 	mul.w	r3, r2, r3
 80039fa:	4a14      	ldr	r2, [pc, #80]	@ (8003a4c <motorControlTask+0x1a4>)
 80039fc:	4413      	add	r3, r2
 80039fe:	7dba      	ldrb	r2, [r7, #22]
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f8e0 	bl	8002bc8 <TMC2209_enableStallDetection>
    				break;
 8003a08:	e015      	b.n	8003a36 <motorControlTask+0x18e>

    		case 	MOTOR_CMD_CONFIG_COOLTHRS:
    				TMC2209_SetTCoolThrs(&motors[cmd.motorIndex], cmd.coolThrs);
 8003a0a:	7abb      	ldrb	r3, [r7, #10]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	23a4      	movs	r3, #164	@ 0xa4
 8003a10:	fb02 f303 	mul.w	r3, r2, r3
 8003a14:	4a0d      	ldr	r2, [pc, #52]	@ (8003a4c <motorControlTask+0x1a4>)
 8003a16:	4413      	add	r3, r2
 8003a18:	8b3a      	ldrh	r2, [r7, #24]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff f8fd 	bl	8002c1c <TMC2209_SetTCoolThrs>
    				break;
 8003a22:	e008      	b.n	8003a36 <motorControlTask+0x18e>
       		case 	MOTOR_CMD_MOVE_ALL_MOTORS:
       		{
       			   // Move all motors on axis 0 concurrently.
       			TMC2209_MoveAllMotorsTo(&axes, cmd.targetPositionsAxis0);
 8003a24:	f107 0308 	add.w	r3, r7, #8
 8003a28:	3314      	adds	r3, #20
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	4808      	ldr	r0, [pc, #32]	@ (8003a50 <motorControlTask+0x1a8>)
 8003a2e:	f7fe fd01 	bl	8002434 <TMC2209_MoveAllMotorsTo>

       			    break;
 8003a32:	e000      	b.n	8003a36 <motorControlTask+0x18e>
//    		case 	MOTOR_CMD_CHECK_CHOPPER:
//    		case	MOTOR_CMD_CHECK_SGTHRS:
//    		case 	MOTOR_CMD_CHECK_COOLTHRS:
//    				break;
    		default: // unkown command
    				break;
 8003a34:	bf00      	nop
    		}
    	}



    	taskYIELD();
 8003a36:	4b07      	ldr	r3, [pc, #28]	@ (8003a54 <motorControlTask+0x1ac>)
 8003a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	f3bf 8f6f 	isb	sy
    	if(xQueueReceive(motorCommandQueue, &cmd, portMAX_DELAY) == pdPASS){
 8003a46:	e74e      	b.n	80038e6 <motorControlTask+0x3e>
 8003a48:	20002350 	.word	0x20002350
 8003a4c:	20005844 	.word	0x20005844
 8003a50:	20005ad4 	.word	0x20005ad4
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <stallMonitorTask>:

/*
 * Stall Monitor Task
 * This task will check the diag pin of each motor and send a stop command for the motor that stalled.
 */
void stallMonitorTask(void *argument) {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b090      	sub	sp, #64	@ 0x40
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	MotorCommand stallCmd;

    for(;;) {
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003a60:	2300      	movs	r3, #0
 8003a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a64:	e050      	b.n	8003b08 <stallMonitorTask+0xb0>
        	motors[i].STALL = HAL_GPIO_ReadPin(motors[i].driver.diag_port, motors[i].driver.diag_pin);
 8003a66:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6a:	21a4      	movs	r1, #164	@ 0xa4
 8003a6c:	fb01 f303 	mul.w	r3, r1, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	3354      	adds	r3, #84	@ 0x54
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	4928      	ldr	r1, [pc, #160]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a7a:	20a4      	movs	r0, #164	@ 0xa4
 8003a7c:	fb00 f303 	mul.w	r3, r0, r3
 8003a80:	440b      	add	r3, r1
 8003a82:	3358      	adds	r3, #88	@ 0x58
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	4619      	mov	r1, r3
 8003a88:	4610      	mov	r0, r2
 8003a8a:	f004 f8c3 	bl	8007c14 <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4618      	mov	r0, r3
 8003a92:	4a21      	ldr	r2, [pc, #132]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a96:	21a4      	movs	r1, #164	@ 0xa4
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	33a0      	adds	r3, #160	@ 0xa0
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	701a      	strb	r2, [r3, #0]

            if(motors[i].STALL == GPIO_PIN_SET) {  // Stall detecte
 8003aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa8:	21a4      	movs	r1, #164	@ 0xa4
 8003aaa:	fb01 f303 	mul.w	r3, r1, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	33a0      	adds	r3, #160	@ 0xa0
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d124      	bne.n	8003b02 <stallMonitorTask+0xaa>

                xEventGroupSetBits(testingEvent, TEST_STOP_BIT); // Abort Testing task
 8003ab8:	4b18      	ldr	r3, [pc, #96]	@ (8003b1c <stallMonitorTask+0xc4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2102      	movs	r1, #2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f00e fe30 	bl	8012724 <xEventGroupSetBits>
                TMC2209_Stop(&motors[i]); // Stop stalled motor first
 8003ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ac6:	22a4      	movs	r2, #164	@ 0xa4
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	4a12      	ldr	r2, [pc, #72]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fe fbf5 	bl	80022c0 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ada:	e00f      	b.n	8003afc <stallMonitorTask+0xa4>
                   if(j != i) TMC2209_Stop(&motors[j]);
 8003adc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d008      	beq.n	8003af6 <stallMonitorTask+0x9e>
 8003ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae6:	22a4      	movs	r2, #164	@ 0xa4
 8003ae8:	fb02 f303 	mul.w	r3, r2, r3
 8003aec:	4a0a      	ldr	r2, [pc, #40]	@ (8003b18 <stallMonitorTask+0xc0>)
 8003aee:	4413      	add	r3, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fbe5 	bl	80022c0 <TMC2209_Stop>
                for(int j = 0; j<MAX_MOTORS; j++){ // Stop the other motors
 8003af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003af8:	3301      	adds	r3, #1
 8003afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	ddec      	ble.n	8003adc <stallMonitorTask+0x84>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b04:	3301      	adds	r3, #1
 8003b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	ddab      	ble.n	8003a66 <stallMonitorTask+0xe>

                }
            }
        }
        vTaskDelay(pdMS_TO_TICKS(STALL_CHECK_INTERVAL_MS));
 8003b0e:	2032      	movs	r0, #50	@ 0x32
 8003b10:	f010 f84a 	bl	8013ba8 <vTaskDelay>
        for(int i = 0; i < MAX_MOTORS; i++) {
 8003b14:	e7a4      	b.n	8003a60 <stallMonitorTask+0x8>
 8003b16:	bf00      	nop
 8003b18:	20005844 	.word	0x20005844
 8003b1c:	2000235c 	.word	0x2000235c

08003b20 <vMainMenuTask>:
 * FreeRTOS task to handle the main menu.
 * This task will display the menu, wait for a selection,
 * and then call the handler for that selection.
 */
void vMainMenuTask(void *pvParameters)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08c      	sub	sp, #48	@ 0x30
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	6078      	str	r0, [r7, #4]
    currentState = MENU_STATE_WELCOME;
 8003b28:	4b76      	ldr	r3, [pc, #472]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
    for (;;) {

        switch (currentState) {
 8003b2e:	4b75      	ldr	r3, [pc, #468]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b07      	cmp	r3, #7
 8003b34:	f200 80da 	bhi.w	8003cec <vMainMenuTask+0x1cc>
 8003b38:	a201      	add	r2, pc, #4	@ (adr r2, 8003b40 <vMainMenuTask+0x20>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b61 	.word	0x08003b61
 8003b44:	08003bab 	.word	0x08003bab
 8003b48:	08003bed 	.word	0x08003bed
 8003b4c:	08003c25 	.word	0x08003c25
 8003b50:	08003ced 	.word	0x08003ced
 8003b54:	08003ced 	.word	0x08003ced
 8003b58:	08003c8b 	.word	0x08003c8b
 8003b5c:	08003cc5 	.word	0x08003cc5
        	case MENU_STATE_WELCOME:
        	{
        		LCD_I2C_DisplaySequentialGlossyText(&hlcd3, 2);
 8003b60:	2102      	movs	r1, #2
 8003b62:	4869      	ldr	r0, [pc, #420]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003b64:	f7fd fbc4 	bl	80012f0 <LCD_I2C_DisplaySequentialGlossyText>
        		osDelay(500);
 8003b68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b6c:	f00e fc07 	bl	801237e <osDelay>
        		LCD_I2C_ClearAllLines(&hlcd3);
 8003b70:	4865      	ldr	r0, [pc, #404]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003b72:	f7fd fb77 	bl	8001264 <LCD_I2C_ClearAllLines>
        		LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003b76:	2201      	movs	r2, #1
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4863      	ldr	r0, [pc, #396]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003b7c:	f7fd fb46 	bl	800120c <LCD_I2C_SetCursor>
        		LCD_I2C_printStr(&hlcd3, "Setting up machine, please wait...");
 8003b80:	4962      	ldr	r1, [pc, #392]	@ (8003d0c <vMainMenuTask+0x1ec>)
 8003b82:	4861      	ldr	r0, [pc, #388]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003b84:	f7fd fb08 	bl	8001198 <LCD_I2C_printStr>
        		initializeSystem();
 8003b88:	f7ff fc5e 	bl	8003448 <initializeSystem>
                // Wait here until the initialization semaphore is given.
                if (xSemaphoreTake(xInitSemaphore, portMAX_DELAY) == pdTRUE) {
 8003b8c:	4b60      	ldr	r3, [pc, #384]	@ (8003d10 <vMainMenuTask+0x1f0>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	4618      	mov	r0, r3
 8003b96:	f00f fb41 	bl	801321c <xQueueSemaphoreTake>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	f040 80a9 	bne.w	8003cf4 <vMainMenuTask+0x1d4>
                    currentState = MENU_STATE_MAIN;
 8003ba2:	4b58      	ldr	r3, [pc, #352]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
                }
        }
        	break;
 8003ba8:	e0a4      	b.n	8003cf4 <vMainMenuTask+0x1d4>

            case MENU_STATE_MAIN:
                {
                    // Display main menu and get selection.
                	const char* menuItems[] = {"Test from SD", "Prepare Machine"};
 8003baa:	4a5a      	ldr	r2, [pc, #360]	@ (8003d14 <vMainMenuTask+0x1f4>)
 8003bac:	f107 0314 	add.w	r3, r7, #20
 8003bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb4:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t mainSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1, menuItems,2, 0);
 8003bb8:	f107 0214 	add.w	r2, r7, #20
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	4955      	ldr	r1, [pc, #340]	@ (8003d18 <vMainMenuTask+0x1f8>)
 8003bc4:	4850      	ldr	r0, [pc, #320]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003bc6:	f7fd fbe5 	bl	8001394 <LCD_I2C_menuTemplate>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	77fb      	strb	r3, [r7, #31]
                    if (mainSelection == 0) {
 8003bce:	7ffb      	ldrb	r3, [r7, #31]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d103      	bne.n	8003bdc <vMainMenuTask+0xbc>
                        currentState = MENU_STATE_SD_TEST;
 8003bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
                    } else if (mainSelection == 1) {
                        currentState = MENU_STATE_PREPARE_MACHINE;
                    } 
                }
                break;
 8003bda:	e08d      	b.n	8003cf8 <vMainMenuTask+0x1d8>
                    } else if (mainSelection == 1) {
 8003bdc:	7ffb      	ldrb	r3, [r7, #31]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	f040 808a 	bne.w	8003cf8 <vMainMenuTask+0x1d8>
                        currentState = MENU_STATE_PREPARE_MACHINE;
 8003be4:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003be6:	2206      	movs	r2, #6
 8003be8:	701a      	strb	r2, [r3, #0]
                break;
 8003bea:	e085      	b.n	8003cf8 <vMainMenuTask+0x1d8>

            case MENU_STATE_SD_TEST:
                {
                    // Display SD card test menu or process SD card files.
                	  LCD_I2C_Clear(&hlcd3);
 8003bec:	4846      	ldr	r0, [pc, #280]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003bee:	f7fd fb2d 	bl	800124c <LCD_I2C_Clear>
                	  LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4844      	ldr	r0, [pc, #272]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003bf8:	f7fd fb08 	bl	800120c <LCD_I2C_SetCursor>
                	  LCD_I2C_printStr(&hlcd3, "Performing Tests");
 8003bfc:	4947      	ldr	r1, [pc, #284]	@ (8003d1c <vMainMenuTask+0x1fc>)
 8003bfe:	4842      	ldr	r0, [pc, #264]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c00:	f7fd faca 	bl	8001198 <LCD_I2C_printStr>
                      LCD_I2C_DisplaySDMenu(&hlcd3, &henc1);
 8003c04:	4944      	ldr	r1, [pc, #272]	@ (8003d18 <vMainMenuTask+0x1f8>)
 8003c06:	4840      	ldr	r0, [pc, #256]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c08:	f7fd fdfe 	bl	8001808 <LCD_I2C_DisplaySDMenu>

                       size_t numLines = sizeof(lines);
 8003c0c:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8003c10:	623b      	str	r3, [r7, #32]
                       ProcessGcode(&axes, &lines, numLines);
 8003c12:	6a3a      	ldr	r2, [r7, #32]
 8003c14:	4942      	ldr	r1, [pc, #264]	@ (8003d20 <vMainMenuTask+0x200>)
 8003c16:	4843      	ldr	r0, [pc, #268]	@ (8003d24 <vMainMenuTask+0x204>)
 8003c18:	f000 f92e 	bl	8003e78 <ProcessGcode>
            	 currentState = MENU_STATE_CALIBRATION;
 8003c1c:	4b39      	ldr	r3, [pc, #228]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003c1e:	2203      	movs	r2, #3
 8003c20:	701a      	strb	r2, [r3, #0]


                        //currentState = MENU_STATE_MAIN;
                }
                break;
 8003c22:	e06a      	b.n	8003cfa <vMainMenuTask+0x1da>

            case MENU_STATE_CALIBRATION:
                {
                    const char* calibMenuItems[] = {"Auto Calibartion", "Manual Calibration" };
 8003c24:	4a40      	ldr	r2, [pc, #256]	@ (8003d28 <vMainMenuTask+0x208>)
 8003c26:	f107 030c 	add.w	r3, r7, #12
 8003c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c2e:	e883 0003 	stmia.w	r3, {r0, r1}
                    uint8_t calibSelection = LCD_I2C_menuTemplate(&hlcd3, &henc1,calibMenuItems,2, 1);
 8003c32:	f107 020c 	add.w	r2, r7, #12
 8003c36:	2301      	movs	r3, #1
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	4936      	ldr	r1, [pc, #216]	@ (8003d18 <vMainMenuTask+0x1f8>)
 8003c3e:	4832      	ldr	r0, [pc, #200]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c40:	f7fd fba8 	bl	8001394 <LCD_I2C_menuTemplate>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                    if (calibSelection == 0) {  // "Back"
 8003c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <vMainMenuTask+0x13a>
                        currentState = MENU_STATE_MAIN;
 8003c52:	4b2c      	ldr	r3, [pc, #176]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003c54:	2201      	movs	r2, #1
 8003c56:	701a      	strb	r2, [r3, #0]

                         //Calibration is complete. Return to the main menu or update as needed.
                        currentState = MENU_STATE_TESTING;
                    }
                }
                break;
 8003c58:	e04f      	b.n	8003cfa <vMainMenuTask+0x1da>
                    	g_calibSelection = calibSelection;
 8003c5a:	4a34      	ldr	r2, [pc, #208]	@ (8003d2c <vMainMenuTask+0x20c>)
 8003c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c60:	7013      	strb	r3, [r2, #0]
                    	xEventGroupSetBits(calibEventGroup, CALIB_START_BIT);
 8003c62:	4b33      	ldr	r3, [pc, #204]	@ (8003d30 <vMainMenuTask+0x210>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f00e fd5b 	bl	8012724 <xEventGroupSetBits>
                    	xEventGroupWaitBits(calibEventGroup, CALIB_COMPLETE_BIT,
 8003c6e:	4b30      	ldr	r3, [pc, #192]	@ (8003d30 <vMainMenuTask+0x210>)
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	f04f 33ff 	mov.w	r3, #4294967295
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2102      	movs	r1, #2
 8003c7e:	f00e fc77 	bl	8012570 <xEventGroupWaitBits>
                        currentState = MENU_STATE_TESTING;
 8003c82:	4b20      	ldr	r3, [pc, #128]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003c84:	2207      	movs	r2, #7
 8003c86:	701a      	strb	r2, [r3, #0]
                break;
 8003c88:	e037      	b.n	8003cfa <vMainMenuTask+0x1da>


            case MENU_STATE_PREPARE_MACHINE:
                {
                	LCD_I2C_ClearAllLines(&hlcd3);
 8003c8a:	481f      	ldr	r0, [pc, #124]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c8c:	f7fd faea 	bl	8001264 <LCD_I2C_ClearAllLines>
                	LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8003c90:	2201      	movs	r2, #1
 8003c92:	2100      	movs	r1, #0
 8003c94:	481c      	ldr	r0, [pc, #112]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c96:	f7fd fab9 	bl	800120c <LCD_I2C_SetCursor>
                    LCD_I2C_printStr(&hlcd3, "Preparing...");
 8003c9a:	4926      	ldr	r1, [pc, #152]	@ (8003d34 <vMainMenuTask+0x214>)
 8003c9c:	481a      	ldr	r0, [pc, #104]	@ (8003d08 <vMainMenuTask+0x1e8>)
 8003c9e:	f7fd fa7b 	bl	8001198 <LCD_I2C_printStr>
                    if(MotorsHoming(&motors) == 1){
 8003ca2:	4825      	ldr	r0, [pc, #148]	@ (8003d38 <vMainMenuTask+0x218>)
 8003ca4:	f000 fa96 	bl	80041d4 <MotorsHoming>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10a      	bne.n	8003cc4 <vMainMenuTask+0x1a4>
                       if(!calibrationState()){
 8003cae:	f000 fce5 	bl	800467c <calibrationState>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <vMainMenuTask+0x19e>
                           currentState =MENU_STATE_CALIBRATION;
 8003cb8:	4b12      	ldr	r3, [pc, #72]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003cba:	2203      	movs	r2, #3
 8003cbc:	701a      	strb	r2, [r3, #0]
                        }
                       currentState = MENU_STATE_MAIN;
 8003cbe:	4b11      	ldr	r3, [pc, #68]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]

                 }
            case MENU_STATE_TESTING:
            {
            	// TDOD: MENU FOR TESTING -- SHOW PROGRESS OF TESTING
            	xEventGroupSetBits(testingEvent, TEST_START_BIT); // Start Testing task
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d3c <vMainMenuTask+0x21c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f00e fd2a 	bl	8012724 <xEventGroupSetBits>
            	xEventGroupWaitBits(testingEvent, TEST_COMPLETE_BIT, pdTRUE, pdFALSE, portMAX_DELAY); // Test Finished.
 8003cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8003d3c <vMainMenuTask+0x21c>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2201      	movs	r2, #1
 8003cde:	2104      	movs	r1, #4
 8003ce0:	f00e fc46 	bl	8012570 <xEventGroupWaitBits>
            	currentState = MENU_STATE_MAIN;
 8003ce4:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	701a      	strb	r2, [r3, #0]
            }
                break;
 8003cea:	e006      	b.n	8003cfa <vMainMenuTask+0x1da>
            default:
                currentState = MENU_STATE_MAIN;
 8003cec:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <vMainMenuTask+0x1e4>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
                break;
 8003cf2:	e002      	b.n	8003cfa <vMainMenuTask+0x1da>
        	break;
 8003cf4:	bf00      	nop
 8003cf6:	e000      	b.n	8003cfa <vMainMenuTask+0x1da>
                break;
 8003cf8:	bf00      	nop
        }

        osDelay(1);  // Allow other tasks to run
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f00e fb3f 	bl	801237e <osDelay>
        switch (currentState) {
 8003d00:	e715      	b.n	8003b2e <vMainMenuTask+0xe>
 8003d02:	bf00      	nop
 8003d04:	20002354 	.word	0x20002354
 8003d08:	20000018 	.word	0x20000018
 8003d0c:	080186ac 	.word	0x080186ac
 8003d10:	20002364 	.word	0x20002364
 8003d14:	08018714 	.word	0x08018714
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	080186d0 	.word	0x080186d0
 8003d20:	20000268 	.word	0x20000268
 8003d24:	20005ad4 	.word	0x20005ad4
 8003d28:	08018744 	.word	0x08018744
 8003d2c:	20002368 	.word	0x20002368
 8003d30:	20002358 	.word	0x20002358
 8003d34:	080186e4 	.word	0x080186e4
 8003d38:	20005844 	.word	0x20005844
 8003d3c:	2000235c 	.word	0x2000235c

08003d40 <vTestingTask>:
    }
}

void vTestingTask(void *arugment){
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
	for(;;){

		EventBits_t testingBits = xEventGroupWaitBits(testingEvent, TEST_START_BIT | TEST_STOP_BIT,
 8003d48:	4b11      	ldr	r3, [pc, #68]	@ (8003d90 <vTestingTask+0x50>)
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2300      	movs	r3, #0
 8003d54:	2201      	movs	r2, #1
 8003d56:	2103      	movs	r1, #3
 8003d58:	f00e fc0a 	bl	8012570 <xEventGroupWaitBits>
 8003d5c:	60f8      	str	r0, [r7, #12]
		                                                   pdTRUE, pdFALSE, portMAX_DELAY); // Trigger testing
		if(testingBits & TEST_STOP_BIT){ // Stall detected during test
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d110      	bne.n	8003d8a <vTestingTask+0x4a>

			continue;	// Abort test
		}
		if (testingBits & TEST_START_BIT) { // Start Test
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <vTestingTask+0x42>

		preformTest();
 8003d72:	f000 f80f 	bl	8003d94 <preformTest>
		xEventGroupSetBits(testingEvent, TEST_COMPLETE_BIT);
 8003d76:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <vTestingTask+0x50>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2104      	movs	r1, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f00e fcd1 	bl	8012724 <xEventGroupSetBits>
       // xEventGroupClearBits(testingEvent, TEST_STOP_BIT); // clear bit incase we want to restart test

		}

		vTaskDelay(pdMS_TO_TICKS(10));
 8003d82:	200a      	movs	r0, #10
 8003d84:	f00f ff10 	bl	8013ba8 <vTaskDelay>
 8003d88:	e7de      	b.n	8003d48 <vTestingTask+0x8>
			continue;	// Abort test
 8003d8a:	bf00      	nop
	for(;;){
 8003d8c:	e7dc      	b.n	8003d48 <vTestingTask+0x8>
 8003d8e:	bf00      	nop
 8003d90:	2000235c 	.word	0x2000235c

08003d94 <preformTest>:
}



//// FUNCTIONS //////
void preformTest(){
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08e      	sub	sp, #56	@ 0x38
 8003d98:	af00      	add	r7, sp, #0

	MotorCommand testingCMD;
	uint16_t j = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
		const char reportFilename = {"results.txt"};
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003e58 <preformTest+0xc4>)
 8003da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	for(int i = 0; i < commandsGcode; i++){
 8003da4:	2300      	movs	r3, #0
 8003da6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da8:	e046      	b.n	8003e38 <preformTest+0xa4>
		if(i % 2 == 0){
 8003daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10d      	bne.n	8003dd0 <preformTest+0x3c>
			testingCMD.targetPositionsAxis0[2] = coordinates[i].x;
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <preformTest+0xc8>)
 8003db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db8:	015b      	lsls	r3, r3, #5
 8003dba:	4413      	add	r3, r2
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	61fb      	str	r3, [r7, #28]
			testingCMD.targetPositionsAxis0[0] = coordinates[i].y;
 8003dc0:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <preformTest+0xc8>)
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	015b      	lsls	r3, r3, #5
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e00c      	b.n	8003dea <preformTest+0x56>
		}
		else{
			testingCMD.targetPositionsAxis0[3] = coordinates[i].x;
 8003dd0:	4a22      	ldr	r2, [pc, #136]	@ (8003e5c <preformTest+0xc8>)
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	015b      	lsls	r3, r3, #5
 8003dd6:	4413      	add	r3, r2
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	623b      	str	r3, [r7, #32]
			testingCMD.targetPositionsAxis0[1] = coordinates[i].y;
 8003ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e5c <preformTest+0xc8>)
 8003dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de0:	015b      	lsls	r3, r3, #5
 8003de2:	4413      	add	r3, r2
 8003de4:	3304      	adds	r3, #4
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	61bb      	str	r3, [r7, #24]
		}
		if(i >= 1 && (i+1)%2 == 0){
 8003dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	dd20      	ble.n	8003e32 <preformTest+0x9e>
 8003df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df2:	3301      	adds	r3, #1
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11a      	bne.n	8003e32 <preformTest+0x9e>
		testingCMD.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	703b      	strb	r3, [r7, #0]
		xQueueSend(motorCommandQueue, &testingCMD, portMAX_DELAY);
 8003e00:	4b17      	ldr	r3, [pc, #92]	@ (8003e60 <preformTest+0xcc>)
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	4639      	mov	r1, r7
 8003e06:	2300      	movs	r3, #0
 8003e08:	f04f 32ff 	mov.w	r2, #4294967295
 8003e0c:	f00e ff7c 	bl	8012d08 <xQueueGenericSend>
		 coordinates[j].testResult = CheckConnection(&hservo1,&hservo2);
 8003e10:	4914      	ldr	r1, [pc, #80]	@ (8003e64 <preformTest+0xd0>)
 8003e12:	4815      	ldr	r0, [pc, #84]	@ (8003e68 <preformTest+0xd4>)
 8003e14:	f7ff fb88 	bl	8003528 <CheckConnection>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <preformTest+0xc8>)
 8003e22:	015b      	lsls	r3, r3, #5
 8003e24:	4413      	add	r3, r2
 8003e26:	3308      	adds	r3, #8
 8003e28:	460a      	mov	r2, r1
 8003e2a:	701a      	strb	r2, [r3, #0]
		        j++;
 8003e2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e2e:	3301      	adds	r3, #1
 8003e30:	86fb      	strh	r3, [r7, #54]	@ 0x36
	for(int i = 0; i < commandsGcode; i++){
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	3301      	adds	r3, #1
 8003e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <preformTest+0xd8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d3b3      	bcc.n	8003daa <preformTest+0x16>
		}
	}
	generate_report(&hlcd3);
 8003e42:	480b      	ldr	r0, [pc, #44]	@ (8003e70 <preformTest+0xdc>)
 8003e44:	f7fd ffaa 	bl	8001d9c <generate_report>

	MotorsHoming(&motors);
 8003e48:	480a      	ldr	r0, [pc, #40]	@ (8003e74 <preformTest+0xe0>)
 8003e4a:	f000 f9c3 	bl	80041d4 <MotorsHoming>

		//osDelay(2000);

}
 8003e4e:	bf00      	nop
 8003e50:	3738      	adds	r7, #56	@ 0x38
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	0801874c 	.word	0x0801874c
 8003e5c:	20002374 	.word	0x20002374
 8003e60:	20002350 	.word	0x20002350
 8003e64:	20000040 	.word	0x20000040
 8003e68:	2000002c 	.word	0x2000002c
 8003e6c:	200048f4 	.word	0x200048f4
 8003e70:	20000018 	.word	0x20000018
 8003e74:	20005844 	.word	0x20005844

08003e78 <ProcessGcode>:


void ProcessGcode(Axis *axisGroup[], const char *gcodeArray[][MAX_LINE_LENGTH], size_t gcodeCount) {
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b092      	sub	sp, #72	@ 0x48
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]

    // Variables to hold PCB dimensions
	uint16_t netTestCount = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	86fb      	strh	r3, [r7, #54]	@ 0x36
	    int inNetBlock = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	633b      	str	r3, [r7, #48]	@ 0x30
	    size_t currentNetIndex = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	    for(size_t i = 0; i < gcodeCount; i++) {
 8003e90:	2300      	movs	r3, #0
 8003e92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e94:	e12a      	b.n	80040ec <ProcessGcode+0x274>
	            const char *line = gcodeArray[i];
 8003e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
	        // Check for a net definition line.



        if (line[0] == ';') {
 8003ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ea6:	d166      	bne.n	8003f76 <ProcessGcode+0xfe>
            if (strncmp(line, "; G54", 5) == 0) { // G54: actual PCB dimensions. Format G54 X.. Y..
 8003ea8:	2205      	movs	r2, #5
 8003eaa:	4993      	ldr	r1, [pc, #588]	@ (80040f8 <ProcessGcode+0x280>)
 8003eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eae:	f012 f9e0 	bl	8016272 <strncmp>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d12b      	bne.n	8003f10 <ProcessGcode+0x98>

                const char *ptr = strchr(line, 'X');
 8003eb8:	2158      	movs	r1, #88	@ 0x58
 8003eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ebc:	f012 f9bb 	bl	8016236 <strchr>
 8003ec0:	6178      	str	r0, [r7, #20]
                if (ptr) {
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <ProcessGcode+0x6c>
                    pcbWidth = (float)atof(ptr + 1);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f011 fa45 	bl	801535c <atof>
 8003ed2:	ec53 2b10 	vmov	r2, r3, d0
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fc fe67 	bl	8000bac <__aeabi_d2f>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4a86      	ldr	r2, [pc, #536]	@ (80040fc <ProcessGcode+0x284>)
 8003ee2:	6013      	str	r3, [r2, #0]
                }

                ptr = strchr(line, 'Y');
 8003ee4:	2159      	movs	r1, #89	@ 0x59
 8003ee6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee8:	f012 f9a5 	bl	8016236 <strchr>
 8003eec:	6178      	str	r0, [r7, #20]
                if (ptr) {
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <ProcessGcode+0x98>
                    pcbHeight = (float)atof(ptr + 1);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f011 fa2f 	bl	801535c <atof>
 8003efe:	ec53 2b10 	vmov	r2, r3, d0
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	f7fc fe51 	bl	8000bac <__aeabi_d2f>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4a7c      	ldr	r2, [pc, #496]	@ (8004100 <ProcessGcode+0x288>)
 8003f0e:	6013      	str	r3, [r2, #0]
                }

            }

        if (strncmp(line, "; Net:", 6) == 0) {
 8003f10:	2206      	movs	r2, #6
 8003f12:	497c      	ldr	r1, [pc, #496]	@ (8004104 <ProcessGcode+0x28c>)
 8003f14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f16:	f012 f9ac 	bl	8016272 <strncmp>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 80e1 	bne.w	80040e4 <ProcessGcode+0x26c>

        	const char *netName = strchr(line, 'Net-(');
 8003f22:	4979      	ldr	r1, [pc, #484]	@ (8004108 <ProcessGcode+0x290>)
 8003f24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f26:	f012 f986 	bl	8016236 <strchr>
 8003f2a:	6138      	str	r0, [r7, #16]

        		if(netName != NULL){
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80d8 	beq.w	80040e4 <ProcessGcode+0x26c>
              	  //netName = strlen(line);
              	  size_t len = strcspn(netName,"\r\n");
 8003f34:	4975      	ldr	r1, [pc, #468]	@ (800410c <ProcessGcode+0x294>)
 8003f36:	6938      	ldr	r0, [r7, #16]
 8003f38:	f012 f98a 	bl	8016250 <strcspn>
 8003f3c:	6438      	str	r0, [r7, #64]	@ 0x40
              	  if( len >= 20){
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	2b13      	cmp	r3, #19
 8003f42:	d901      	bls.n	8003f48 <ProcessGcode+0xd0>
              		  len = 20-1;
 8003f44:	2313      	movs	r3, #19
 8003f46:	643b      	str	r3, [r7, #64]	@ 0x40
              	  }
        			strncpy(coordinates[commandsGcode].netName, netName, len);
 8003f48:	4b71      	ldr	r3, [pc, #452]	@ (8004110 <ProcessGcode+0x298>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	015b      	lsls	r3, r3, #5
 8003f4e:	3308      	adds	r3, #8
 8003f50:	4a70      	ldr	r2, [pc, #448]	@ (8004114 <ProcessGcode+0x29c>)
 8003f52:	4413      	add	r3, r2
 8003f54:	3301      	adds	r3, #1
 8003f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f58:	6939      	ldr	r1, [r7, #16]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f012 f99b 	bl	8016296 <strncpy>
        			coordinates[commandsGcode].netName[len] ='\0';
 8003f60:	4b6b      	ldr	r3, [pc, #428]	@ (8004110 <ProcessGcode+0x298>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6b      	ldr	r2, [pc, #428]	@ (8004114 <ProcessGcode+0x29c>)
 8003f66:	015b      	lsls	r3, r3, #5
 8003f68:	441a      	add	r2, r3
 8003f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f6c:	4413      	add	r3, r2
 8003f6e:	3309      	adds	r3, #9
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
        		}
        	}

        continue;
 8003f74:	e0b6      	b.n	80040e4 <ProcessGcode+0x26c>

        }

        if (strncmp(line, "G0", 2) == 0) { // G0: move command
 8003f76:	2202      	movs	r2, #2
 8003f78:	4967      	ldr	r1, [pc, #412]	@ (8004118 <ProcessGcode+0x2a0>)
 8003f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f7c:	f012 f979 	bl	8016272 <strncmp>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 8093 	bne.w	80040ae <ProcessGcode+0x236>
            float xTarget = 0.0f, yTarget = 0.0f, zTarget = 0.0f;
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f94:	f04f 0300 	mov.w	r3, #0
 8003f98:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t probe = (strstr(line, "P1") != NULL) ? 1 : ((strstr(line, "P2") != NULL) ? 2 : 0); // P1 or P2
 8003f9a:	4960      	ldr	r1, [pc, #384]	@ (800411c <ProcessGcode+0x2a4>)
 8003f9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f9e:	f012 f98d 	bl	80162bc <strstr>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10a      	bne.n	8003fbe <ProcessGcode+0x146>
 8003fa8:	495d      	ldr	r1, [pc, #372]	@ (8004120 <ProcessGcode+0x2a8>)
 8003faa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fac:	f012 f986 	bl	80162bc <strstr>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <ProcessGcode+0x142>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e002      	b.n	8003fc0 <ProcessGcode+0x148>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e000      	b.n	8003fc0 <ProcessGcode+0x148>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            // Extract axis coordinates from the line
             const char *ptr = strchr(line, 'X');
 8003fc4:	2158      	movs	r1, #88	@ 0x58
 8003fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fc8:	f012 f935 	bl	8016236 <strchr>
 8003fcc:	61f8      	str	r0, [r7, #28]
             if (ptr) xTarget = (float)atof(ptr + 1);
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00c      	beq.n	8003fee <ProcessGcode+0x176>
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f011 f9bf 	bl	801535c <atof>
 8003fde:	ec53 2b10 	vmov	r2, r3, d0
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f7fc fde1 	bl	8000bac <__aeabi_d2f>
 8003fea:	4603      	mov	r3, r0
 8003fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                ptr = strchr(line, 'Y');
 8003fee:	2159      	movs	r1, #89	@ 0x59
 8003ff0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ff2:	f012 f920 	bl	8016236 <strchr>
 8003ff6:	61f8      	str	r0, [r7, #28]
             if (ptr) yTarget = (float)atof(ptr + 1);
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <ProcessGcode+0x1a0>
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	4618      	mov	r0, r3
 8004004:	f011 f9aa 	bl	801535c <atof>
 8004008:	ec53 2b10 	vmov	r2, r3, d0
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f7fc fdcc 	bl	8000bac <__aeabi_d2f>
 8004014:	4603      	mov	r3, r0
 8004016:	63bb      	str	r3, [r7, #56]	@ 0x38

             uint8_t motorIndex = (probe == 2) ? 1 : 0; // Select motor index based on P1 or P2
 8004018:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800401c:	2b02      	cmp	r3, #2
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	76fb      	strb	r3, [r7, #27]
             // Send MoveTo commands
            if (xTarget >= 0) {
 8004028:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800402c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	db15      	blt.n	8004062 <ProcessGcode+0x1ea>
                //cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 1;

                if(motorIndex == 0){
 8004036:	7efb      	ldrb	r3, [r7, #27]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10b      	bne.n	8004054 <ProcessGcode+0x1dc>
                	coordinates[commandsGcode].x = -xTarget;
 800403c:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <ProcessGcode+0x298>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004044:	eef1 7a67 	vneg.f32	s15, s15
 8004048:	4a32      	ldr	r2, [pc, #200]	@ (8004114 <ProcessGcode+0x29c>)
 800404a:	015b      	lsls	r3, r3, #5
 800404c:	4413      	add	r3, r2
 800404e:	edc3 7a00 	vstr	s15, [r3]
 8004052:	e006      	b.n	8004062 <ProcessGcode+0x1ea>
            }
                else{
                	coordinates[commandsGcode].x = xTarget;
 8004054:	4b2e      	ldr	r3, [pc, #184]	@ (8004110 <ProcessGcode+0x298>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <ProcessGcode+0x29c>)
 800405a:	015b      	lsls	r3, r3, #5
 800405c:	4413      	add	r3, r2
 800405e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004060:	601a      	str	r2, [r3, #0]
           }
                }
                //cmd.command = MOTOR_CMD_MOVETO;
                //xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);

            if (yTarget >= 0) {
 8004062:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800406a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800406e:	db3a      	blt.n	80040e6 <ProcessGcode+0x26e>
               // cmd.motorIndex = motorIndex;
               // cmd.axisIndex = 0;
                if(motorIndex == 0){
 8004070:	7efb      	ldrb	r3, [r7, #27]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10d      	bne.n	8004092 <ProcessGcode+0x21a>
                	coordinates[commandsGcode].y = yTarget;
 8004076:	4b26      	ldr	r3, [pc, #152]	@ (8004110 <ProcessGcode+0x298>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <ProcessGcode+0x29c>)
 800407c:	015b      	lsls	r3, r3, #5
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004084:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 8004086:	4b22      	ldr	r3, [pc, #136]	@ (8004110 <ProcessGcode+0x298>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a20      	ldr	r2, [pc, #128]	@ (8004110 <ProcessGcode+0x298>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	e029      	b.n	80040e6 <ProcessGcode+0x26e>
                }
                else{
                	coordinates[commandsGcode].y = yTarget;
 8004092:	4b1f      	ldr	r3, [pc, #124]	@ (8004110 <ProcessGcode+0x298>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1f      	ldr	r2, [pc, #124]	@ (8004114 <ProcessGcode+0x29c>)
 8004098:	015b      	lsls	r3, r3, #5
 800409a:	4413      	add	r3, r2
 800409c:	3304      	adds	r3, #4
 800409e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040a0:	601a      	str	r2, [r3, #0]
                	commandsGcode++;
 80040a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004110 <ProcessGcode+0x298>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	3301      	adds	r3, #1
 80040a8:	4a19      	ldr	r2, [pc, #100]	@ (8004110 <ProcessGcode+0x298>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e01b      	b.n	80040e6 <ProcessGcode+0x26e>
//          if(i == gcodeCount - 1){
//        	   num_elements = i;
//
//          }

        else if (strncmp(line, "T1", 2) == 0) { // T : perform test
 80040ae:	2202      	movs	r2, #2
 80040b0:	491c      	ldr	r1, [pc, #112]	@ (8004124 <ProcessGcode+0x2ac>)
 80040b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040b4:	f012 f8dd 	bl	8016272 <strncmp>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d105      	bne.n	80040ca <ProcessGcode+0x252>
        	testResultsCount++;
 80040be:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <ProcessGcode+0x2b0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a18      	ldr	r2, [pc, #96]	@ (8004128 <ProcessGcode+0x2b0>)
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e00d      	b.n	80040e6 <ProcessGcode+0x26e>
        	//inNetBlock = 0;
        //CheckConnection(&hservo1, &hservo2);
        }

        else if (line[0] == 'M') {
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b4d      	cmp	r3, #77	@ 0x4d
 80040d0:	d109      	bne.n	80040e6 <ProcessGcode+0x26e>
            if (strncmp(line, "M30", 3) == 0) { // M30: end of program
 80040d2:	2203      	movs	r2, #3
 80040d4:	4915      	ldr	r1, [pc, #84]	@ (800412c <ProcessGcode+0x2b4>)
 80040d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040d8:	f012 f8cb 	bl	8016272 <strncmp>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d026      	beq.n	8004130 <ProcessGcode+0x2b8>
 80040e2:	e000      	b.n	80040e6 <ProcessGcode+0x26e>
        continue;
 80040e4:	bf00      	nop
	    for(size_t i = 0; i < gcodeCount; i++) {
 80040e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e8:	3301      	adds	r3, #1
 80040ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	f4ff aed0 	bcc.w	8003e96 <ProcessGcode+0x1e>
 80040f6:	e01c      	b.n	8004132 <ProcessGcode+0x2ba>
 80040f8:	08018758 	.word	0x08018758
 80040fc:	2000236c 	.word	0x2000236c
 8004100:	20002370 	.word	0x20002370
 8004104:	08018760 	.word	0x08018760
 8004108:	65742d28 	.word	0x65742d28
 800410c:	08018768 	.word	0x08018768
 8004110:	200048f4 	.word	0x200048f4
 8004114:	20002374 	.word	0x20002374
 8004118:	0801876c 	.word	0x0801876c
 800411c:	08018770 	.word	0x08018770
 8004120:	08018774 	.word	0x08018774
 8004124:	08018778 	.word	0x08018778
 8004128:	200048f8 	.word	0x200048f8
 800412c:	0801877c 	.word	0x0801877c
                break;  // End processing
 8004130:	bf00      	nop
            }
            //vTaskDelay(100);
        }
        // TODO: Some delay?
    }
	    commandsGcode++;
 8004132:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <ProcessGcode+0x31c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	4a16      	ldr	r2, [pc, #88]	@ (8004194 <ProcessGcode+0x31c>)
 800413a:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <ProcessGcode+0x31c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a15      	ldr	r2, [pc, #84]	@ (8004198 <ProcessGcode+0x320>)
 8004142:	015b      	lsls	r3, r3, #5
 8004144:	4413      	add	r3, r2
 8004146:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800414a:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 800414c:	4b11      	ldr	r3, [pc, #68]	@ (8004194 <ProcessGcode+0x31c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <ProcessGcode+0x320>)
 8004152:	015b      	lsls	r3, r3, #5
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800415c:	601a      	str	r2, [r3, #0]
	    commandsGcode++;
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <ProcessGcode+0x31c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3301      	adds	r3, #1
 8004164:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <ProcessGcode+0x31c>)
 8004166:	6013      	str	r3, [r2, #0]
	    coordinates[commandsGcode].x = 1.5f;
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <ProcessGcode+0x31c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0a      	ldr	r2, [pc, #40]	@ (8004198 <ProcessGcode+0x320>)
 800416e:	015b      	lsls	r3, r3, #5
 8004170:	4413      	add	r3, r2
 8004172:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004176:	601a      	str	r2, [r3, #0]
	    coordinates[commandsGcode].y = 1.5f;
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <ProcessGcode+0x31c>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a06      	ldr	r2, [pc, #24]	@ (8004198 <ProcessGcode+0x320>)
 800417e:	015b      	lsls	r3, r3, #5
 8004180:	4413      	add	r3, r2
 8004182:	3304      	adds	r3, #4
 8004184:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8004188:	601a      	str	r2, [r3, #0]

}
 800418a:	bf00      	nop
 800418c:	3748      	adds	r7, #72	@ 0x48
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	200048f4 	.word	0x200048f4
 8004198:	20002374 	.word	0x20002374

0800419c <ResetMotorState>:
int32_t StepsBack[4]={0,0};
uint32_t LastSteps[3] = {0,0,0,0};
uint8_t x = 0;
bool testing = 0;

static void ResetMotorState(Motor *m, float homePosition) {
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	ed87 0a00 	vstr	s0, [r7]
    m->currentPositionMM = homePosition;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    m->stepsTaken = 0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	671a      	str	r2, [r3, #112]	@ 0x70
    m->StepsBack = 0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    m->StepsFront = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
	...

080041d4 <MotorsHoming>:
      reset its state.
    • Then poll (with a short delay) until each motor reaches its home.
    • When a sensor is triggered during polling, a STOP command is sent,
      and the motor state is reset.
------------------------------------------------------------------*/
bool MotorsHoming(Motor *motor) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	@ 0x38
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
    bool homed[4] = { false, false, false, false };
 80041dc:	2300      	movs	r3, #0
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34
    //SERVO_WritePosition(&hservo1, 115);
    //SERVO_WritePosition(&hservo2, 115);

    /* --- Start each motor if not already at its home sensor --- */
    /* Motor 0: Uses EndStop2, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 0) {
 80041e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80041e4:	48cb      	ldr	r0, [pc, #812]	@ (8004514 <MotorsHoming+0x340>)
 80041e6:	f7ff f9db 	bl	80035a0 <IsSensorTriggered>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f083 0301 	eor.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d01f      	beq.n	8004236 <MotorsHoming+0x62>
        TMC2209_SetSpeed(&motor[0], 8000);
 80041f6:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd fffd 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004204:	2303      	movs	r3, #3
 8004206:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8004208:	2301      	movs	r3, #1
 800420a:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800420c:	4bc2      	ldr	r3, [pc, #776]	@ (8004518 <MotorsHoming+0x344>)
 800420e:	6818      	ldr	r0, [r3, #0]
 8004210:	f107 0108 	add.w	r1, r7, #8
 8004214:	2300      	movs	r3, #0
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	f00e fd75 	bl	8012d08 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 800421e:	2302      	movs	r3, #2
 8004220:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004222:	4bbd      	ldr	r3, [pc, #756]	@ (8004518 <MotorsHoming+0x344>)
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f107 0108 	add.w	r1, r7, #8
 800422a:	2300      	movs	r3, #0
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	f00e fd6a 	bl	8012d08 <xQueueGenericSend>
 8004234:	e007      	b.n	8004246 <MotorsHoming+0x72>
    } else {
        homed[0] = true;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ResetMotorState(&motor[0], 0);
 800423c:	ed9f 0ab7 	vldr	s0, [pc, #732]	@ 800451c <MotorsHoming+0x348>
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f7ff ffab 	bl	800419c <ResetMotorState>
    }

    /* Motor 1: Uses EndStop4, home position = 450, direction = 0 */
    if (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 0) {
 8004246:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800424a:	48b5      	ldr	r0, [pc, #724]	@ (8004520 <MotorsHoming+0x34c>)
 800424c:	f7ff f9a8 	bl	80035a0 <IsSensorTriggered>
 8004250:	4603      	mov	r3, r0
 8004252:	f083 0301 	eor.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d021      	beq.n	80042a0 <MotorsHoming+0xcc>
        TMC2209_SetSpeed(&motor[1], 8000);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	33a4      	adds	r3, #164	@ 0xa4
 8004260:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004264:	4618      	mov	r0, r3
 8004266:	f7fd ffc8 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 1;
 800426a:	2301      	movs	r3, #1
 800426c:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 800426e:	2303      	movs	r3, #3
 8004270:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 8004272:	2300      	movs	r3, #0
 8004274:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004276:	4ba8      	ldr	r3, [pc, #672]	@ (8004518 <MotorsHoming+0x344>)
 8004278:	6818      	ldr	r0, [r3, #0]
 800427a:	f107 0108 	add.w	r1, r7, #8
 800427e:	2300      	movs	r3, #0
 8004280:	f04f 32ff 	mov.w	r2, #4294967295
 8004284:	f00e fd40 	bl	8012d08 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 8004288:	2302      	movs	r3, #2
 800428a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800428c:	4ba2      	ldr	r3, [pc, #648]	@ (8004518 <MotorsHoming+0x344>)
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	f107 0108 	add.w	r1, r7, #8
 8004294:	2300      	movs	r3, #0
 8004296:	f04f 32ff 	mov.w	r2, #4294967295
 800429a:	f00e fd35 	bl	8012d08 <xQueueGenericSend>
 800429e:	e009      	b.n	80042b4 <MotorsHoming+0xe0>
    } else {
        homed[1] = true;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        ResetMotorState(&motor[1], 0);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	33a4      	adds	r3, #164	@ 0xa4
 80042aa:	ed9f 0a9c 	vldr	s0, [pc, #624]	@ 800451c <MotorsHoming+0x348>
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff74 	bl	800419c <ResetMotorState>
    }

    /* Motor 2: Uses EndStop1, home position = 0, direction = 0 */
    if (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 0) {
 80042b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042b8:	4899      	ldr	r0, [pc, #612]	@ (8004520 <MotorsHoming+0x34c>)
 80042ba:	f7ff f971 	bl	80035a0 <IsSensorTriggered>
 80042be:	4603      	mov	r3, r0
 80042c0:	f083 0301 	eor.w	r3, r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d022      	beq.n	8004310 <MotorsHoming+0x13c>
        TMC2209_SetSpeed(&motor[2], 8000);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80042d0:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd ff90 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 2;
 80042da:	2302      	movs	r3, #2
 80042dc:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 80042de:	2303      	movs	r3, #3
 80042e0:	723b      	strb	r3, [r7, #8]
        cmd.direction = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80042e6:	4b8c      	ldr	r3, [pc, #560]	@ (8004518 <MotorsHoming+0x344>)
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	f107 0108 	add.w	r1, r7, #8
 80042ee:	2300      	movs	r3, #0
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	f00e fd08 	bl	8012d08 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 80042f8:	2302      	movs	r3, #2
 80042fa:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80042fc:	4b86      	ldr	r3, [pc, #536]	@ (8004518 <MotorsHoming+0x344>)
 80042fe:	6818      	ldr	r0, [r3, #0]
 8004300:	f107 0108 	add.w	r1, r7, #8
 8004304:	2300      	movs	r3, #0
 8004306:	f04f 32ff 	mov.w	r2, #4294967295
 800430a:	f00e fcfd 	bl	8012d08 <xQueueGenericSend>
 800430e:	e00a      	b.n	8004326 <MotorsHoming+0x152>
    } else {
        homed[2] = true;
 8004310:	2301      	movs	r3, #1
 8004312:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        ResetMotorState(&motor[2], 0);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800431c:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800451c <MotorsHoming+0x348>
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff3b 	bl	800419c <ResetMotorState>
    }

    /* Motor 3: Uses EndStop3, home position = 0, direction = 1 */
    if (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 0) {
 8004326:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800432a:	487a      	ldr	r0, [pc, #488]	@ (8004514 <MotorsHoming+0x340>)
 800432c:	f7ff f938 	bl	80035a0 <IsSensorTriggered>
 8004330:	4603      	mov	r3, r0
 8004332:	f083 0301 	eor.w	r3, r3, #1
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d022      	beq.n	8004382 <MotorsHoming+0x1ae>
        TMC2209_SetSpeed(&motor[3], 8000);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004342:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004346:	4618      	mov	r0, r3
 8004348:	f7fd ff57 	bl	80021fa <TMC2209_SetSpeed>
        cmd.motorIndex = 3;
 800434c:	2303      	movs	r3, #3
 800434e:	72bb      	strb	r3, [r7, #10]
        cmd.command = MOTOR_CMD_DIRECTION;
 8004350:	2303      	movs	r3, #3
 8004352:	723b      	strb	r3, [r7, #8]
        cmd.direction = 1;
 8004354:	2301      	movs	r3, #1
 8004356:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004358:	4b6f      	ldr	r3, [pc, #444]	@ (8004518 <MotorsHoming+0x344>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	f107 0108 	add.w	r1, r7, #8
 8004360:	2300      	movs	r3, #0
 8004362:	f04f 32ff 	mov.w	r2, #4294967295
 8004366:	f00e fccf 	bl	8012d08 <xQueueGenericSend>
        cmd.command = MOTOR_CMD_START;
 800436a:	2302      	movs	r3, #2
 800436c:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 800436e:	4b6a      	ldr	r3, [pc, #424]	@ (8004518 <MotorsHoming+0x344>)
 8004370:	6818      	ldr	r0, [r3, #0]
 8004372:	f107 0108 	add.w	r1, r7, #8
 8004376:	2300      	movs	r3, #0
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	f00e fcc4 	bl	8012d08 <xQueueGenericSend>
 8004380:	e0a3      	b.n	80044ca <MotorsHoming+0x2f6>
    } else {
        homed[3] = true;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        ResetMotorState(&motor[3], 0);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800438e:	ed9f 0a63 	vldr	s0, [pc, #396]	@ 800451c <MotorsHoming+0x348>
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff02 	bl	800419c <ResetMotorState>
    }

    /* --- Poll sensors until all motors are homed --- */
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 8004398:	e097      	b.n	80044ca <MotorsHoming+0x2f6>
        if (!homed[0] && (IsSensorTriggered(EndStop2_GPIO_Port, EndStop2_Pin) == 1)) {
 800439a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800439e:	f083 0301 	eor.w	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01c      	beq.n	80043e2 <MotorsHoming+0x20e>
 80043a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80043ac:	4859      	ldr	r0, [pc, #356]	@ (8004514 <MotorsHoming+0x340>)
 80043ae:	f7ff f8f7 	bl	80035a0 <IsSensorTriggered>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d014      	beq.n	80043e2 <MotorsHoming+0x20e>
            cmd.motorIndex = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 80043bc:	2301      	movs	r3, #1
 80043be:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80043c0:	4b55      	ldr	r3, [pc, #340]	@ (8004518 <MotorsHoming+0x344>)
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	f107 0108 	add.w	r1, r7, #8
 80043c8:	2300      	movs	r3, #0
 80043ca:	f04f 32ff 	mov.w	r2, #4294967295
 80043ce:	f00e fc9b 	bl	8012d08 <xQueueGenericSend>
            ResetMotorState(&motor[0], 0);
 80043d2:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 800451c <MotorsHoming+0x348>
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fee0 	bl	800419c <ResetMotorState>
            homed[0] = true;
 80043dc:	2301      	movs	r3, #1
 80043de:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }
        if (!homed[1] && (IsSensorTriggered(EndStop4_GPIO_Port, EndStop4_Pin) == 1)) {
 80043e2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d01e      	beq.n	800442e <MotorsHoming+0x25a>
 80043f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043f4:	484a      	ldr	r0, [pc, #296]	@ (8004520 <MotorsHoming+0x34c>)
 80043f6:	f7ff f8d3 	bl	80035a0 <IsSensorTriggered>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <MotorsHoming+0x25a>
            cmd.motorIndex = 1;
 8004400:	2301      	movs	r3, #1
 8004402:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004404:	2301      	movs	r3, #1
 8004406:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004408:	4b43      	ldr	r3, [pc, #268]	@ (8004518 <MotorsHoming+0x344>)
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	f107 0108 	add.w	r1, r7, #8
 8004410:	2300      	movs	r3, #0
 8004412:	f04f 32ff 	mov.w	r2, #4294967295
 8004416:	f00e fc77 	bl	8012d08 <xQueueGenericSend>
            ResetMotorState(&motor[1], 0);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	33a4      	adds	r3, #164	@ 0xa4
 800441e:	ed9f 0a3f 	vldr	s0, [pc, #252]	@ 800451c <MotorsHoming+0x348>
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff feba 	bl	800419c <ResetMotorState>
            homed[1] = true;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
        }
        if (!homed[2] && (IsSensorTriggered(EndStop1_GPIO_Port, EndStop1_Pin) == 1)) {
 800442e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01f      	beq.n	800447c <MotorsHoming+0x2a8>
 800443c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004440:	4837      	ldr	r0, [pc, #220]	@ (8004520 <MotorsHoming+0x34c>)
 8004442:	f7ff f8ad 	bl	80035a0 <IsSensorTriggered>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d017      	beq.n	800447c <MotorsHoming+0x2a8>
            cmd.motorIndex = 2;
 800444c:	2302      	movs	r3, #2
 800444e:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 8004450:	2301      	movs	r3, #1
 8004452:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004454:	4b30      	ldr	r3, [pc, #192]	@ (8004518 <MotorsHoming+0x344>)
 8004456:	6818      	ldr	r0, [r3, #0]
 8004458:	f107 0108 	add.w	r1, r7, #8
 800445c:	2300      	movs	r3, #0
 800445e:	f04f 32ff 	mov.w	r2, #4294967295
 8004462:	f00e fc51 	bl	8012d08 <xQueueGenericSend>
            ResetMotorState(&motor[2], 0);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800446c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800451c <MotorsHoming+0x348>
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fe93 	bl	800419c <ResetMotorState>
            homed[2] = true;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
        }
        if (!homed[3] && (IsSensorTriggered(EndStop3_GPIO_Port, EndStop3_Pin) == 1)) {
 800447c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004480:	f083 0301 	eor.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01f      	beq.n	80044ca <MotorsHoming+0x2f6>
 800448a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800448e:	4821      	ldr	r0, [pc, #132]	@ (8004514 <MotorsHoming+0x340>)
 8004490:	f7ff f886 	bl	80035a0 <IsSensorTriggered>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d017      	beq.n	80044ca <MotorsHoming+0x2f6>
            cmd.motorIndex = 3;
 800449a:	2303      	movs	r3, #3
 800449c:	72bb      	strb	r3, [r7, #10]
            cmd.command = MOTOR_CMD_STOP;
 800449e:	2301      	movs	r3, #1
 80044a0:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <MotorsHoming+0x344>)
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	f107 0108 	add.w	r1, r7, #8
 80044aa:	2300      	movs	r3, #0
 80044ac:	f04f 32ff 	mov.w	r2, #4294967295
 80044b0:	f00e fc2a 	bl	8012d08 <xQueueGenericSend>
            ResetMotorState(&motor[3], 0);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80044ba:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 800451c <MotorsHoming+0x348>
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff fe6c 	bl	800419c <ResetMotorState>
            homed[3] = true;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while (!(homed[0] && homed[1] && homed[2] && homed[3])) {
 80044ca:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f af60 	bne.w	800439a <MotorsHoming+0x1c6>
 80044da:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80044de:	f083 0301 	eor.w	r3, r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f af58 	bne.w	800439a <MotorsHoming+0x1c6>
 80044ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f47f af50 	bne.w	800439a <MotorsHoming+0x1c6>
 80044fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80044fe:	f083 0301 	eor.w	r3, r3, #1
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f af48 	bne.w	800439a <MotorsHoming+0x1c6>
        }
        /* Yield for 1 ms to allow other tasks to run */
        //vTaskDelay(pdMS_TO_TICKS(1));
    }

    return true;
 800450a:	2301      	movs	r3, #1
}
 800450c:	4618      	mov	r0, r3
 800450e:	3738      	adds	r7, #56	@ 0x38
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	20002350 	.word	0x20002350
 800451c:	00000000 	.word	0x00000000
 8004520:	40021400 	.word	0x40021400

08004524 <AutoCalibration>:
       to move each motor to its calibration positions.
    3. Uses nonblocking delays with vTaskDelay().

  Adjust axis/motor indexes, positions, and offsets as needed.
------------------------------------------------------------------*/
void AutoCalibration(Axis *axes, Motor *motors) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b08e      	sub	sp, #56	@ 0x38
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
    // First, perform homing on all motors.
    MotorCommand cmd;
    TMC2209_SetSpeed(&motors[0], 8000);
 800452e:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004532:	6838      	ldr	r0, [r7, #0]
 8004534:	f7fd fe61 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	33a4      	adds	r3, #164	@ 0xa4
 800453c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004540:	4618      	mov	r0, r3
 8004542:	f7fd fe5a 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800454c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004550:	4618      	mov	r0, r3
 8004552:	f7fd fe52 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800455c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fe4a 	bl	80021fa <TMC2209_SetSpeed>
//    SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//    SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
    // Continue with calibration until the calibration condition is met.
    if(!calibrationState()) {
 8004566:	f000 f889 	bl	800467c <calibrationState>
 800456a:	4603      	mov	r3, r0
 800456c:	f083 0301 	eor.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d05f      	beq.n	8004636 <AutoCalibration+0x112>
        MotorsHoming(motors);
 8004576:	6838      	ldr	r0, [r7, #0]
 8004578:	f7ff fe2c 	bl	80041d4 <MotorsHoming>
         *       Motor 0 -> -47.9 mm
         *       Motor 1 -> 50.2 mm
         *
         * Adjust the indices below if your system assigns motors differently.
         */
        LCD_I2C_Clear(&hlcd3);
 800457c:	4830      	ldr	r0, [pc, #192]	@ (8004640 <AutoCalibration+0x11c>)
 800457e:	f7fc fe65 	bl	800124c <LCD_I2C_Clear>
        LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8004582:	2201      	movs	r2, #1
 8004584:	2100      	movs	r1, #0
 8004586:	482e      	ldr	r0, [pc, #184]	@ (8004640 <AutoCalibration+0x11c>)
 8004588:	f7fc fe40 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibrating!");
 800458c:	492d      	ldr	r1, [pc, #180]	@ (8004644 <AutoCalibration+0x120>)
 800458e:	482c      	ldr	r0, [pc, #176]	@ (8004640 <AutoCalibration+0x11c>)
 8004590:	f7fc fe02 	bl	8001198 <LCD_I2C_printStr>
        //float targetPositionsAxis0[MAX_MOTORS_PER_AXIS] = ;
        //float targetPositionsAxis1[MAX_MOTORS_PER_AXIS] = ;
        cmd.targetPositionsAxis0[0] = 38.93f;   // Y
 8004594:	4b2c      	ldr	r3, [pc, #176]	@ (8004648 <AutoCalibration+0x124>)
 8004596:	623b      	str	r3, [r7, #32]
        cmd.targetPositionsAxis0[1] = -57.51f; // Y
 8004598:	4b2c      	ldr	r3, [pc, #176]	@ (800464c <AutoCalibration+0x128>)
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
        cmd.targetPositionsAxis0[2] = -82.15f;  // X
 800459c:	4b2c      	ldr	r3, [pc, #176]	@ (8004650 <AutoCalibration+0x12c>)
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
        cmd.targetPositionsAxis0[3] = 22.7f;   // X
 80045a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004654 <AutoCalibration+0x130>)
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c





        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 80045a4:	2309      	movs	r3, #9
 80045a6:	733b      	strb	r3, [r7, #12]

       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 80045a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <AutoCalibration+0x134>)
 80045aa:	6818      	ldr	r0, [r3, #0]
 80045ac:	f107 010c 	add.w	r1, r7, #12
 80045b0:	2300      	movs	r3, #0
 80045b2:	f04f 32ff 	mov.w	r2, #4294967295
 80045b6:	f00e fba7 	bl	8012d08 <xQueueGenericSend>
       CheckConnection(&hservo1,&hservo2);
 80045ba:	4928      	ldr	r1, [pc, #160]	@ (800465c <AutoCalibration+0x138>)
 80045bc:	4828      	ldr	r0, [pc, #160]	@ (8004660 <AutoCalibration+0x13c>)
 80045be:	f7fe ffb3 	bl	8003528 <CheckConnection>
//       SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
//       SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
       axes[0].motors[0]->currentPositionMM = 0.0f;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f04f 0200 	mov.w	r2, #0
 80045ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[0].motors[1]->currentPositionMM = 99.1f;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4a24      	ldr	r2, [pc, #144]	@ (8004664 <AutoCalibration+0x140>)
 80045d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[0]->currentPositionMM = 0.0f;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
       axes[1].motors[1]->currentPositionMM = 0.0f;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	3328      	adds	r3, #40	@ 0x28
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
         * - And updated each motor's currentPositionMM to the new (target) value.
         */

        // Optionally update calibration values in the motors structure.
        // (Be sure that these indices match your system's mapping.)
        motors[0].calib[1] = 77.9f;  // 77.9f
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4a1c      	ldr	r2, [pc, #112]	@ (8004668 <AutoCalibration+0x144>)
 80045f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[1].calib[1] = -47.9f;  // -47.9f
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	33a4      	adds	r3, #164	@ 0xa4
 8004600:	4a1a      	ldr	r2, [pc, #104]	@ (800466c <AutoCalibration+0x148>)
 8004602:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[2].calib[1] = -100.0f;  // -100.8f
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800460c:	4a18      	ldr	r2, [pc, #96]	@ (8004670 <AutoCalibration+0x14c>)
 800460e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        motors[3].calib[1] = 50.2f;  // 50.2f
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004618:	4a16      	ldr	r2, [pc, #88]	@ (8004674 <AutoCalibration+0x150>)
 800461a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        // Clear and update the LCD to indicate calibration is done.
        LCD_I2C_Clear(&hlcd3);
 800461e:	4808      	ldr	r0, [pc, #32]	@ (8004640 <AutoCalibration+0x11c>)
 8004620:	f7fc fe14 	bl	800124c <LCD_I2C_Clear>
        LCD_I2C_SetCursor(&hlcd3, 0, 1);
 8004624:	2201      	movs	r2, #1
 8004626:	2100      	movs	r1, #0
 8004628:	4805      	ldr	r0, [pc, #20]	@ (8004640 <AutoCalibration+0x11c>)
 800462a:	f7fc fdef 	bl	800120c <LCD_I2C_SetCursor>
        LCD_I2C_printStr(&hlcd3, "Calibration done!");
 800462e:	4912      	ldr	r1, [pc, #72]	@ (8004678 <AutoCalibration+0x154>)
 8004630:	4803      	ldr	r0, [pc, #12]	@ (8004640 <AutoCalibration+0x11c>)
 8004632:	f7fc fdb1 	bl	8001198 <LCD_I2C_printStr>

        // Perform any connection testing.
       // testing = CheckConnection(&hservo2, &hservo1);

    }
}
 8004636:	bf00      	nop
 8004638:	3738      	adds	r7, #56	@ 0x38
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000018 	.word	0x20000018
 8004644:	08018868 	.word	0x08018868
 8004648:	421bb852 	.word	0x421bb852
 800464c:	c2660a3d 	.word	0xc2660a3d
 8004650:	c2a44ccd 	.word	0xc2a44ccd
 8004654:	41b5999a 	.word	0x41b5999a
 8004658:	20002350 	.word	0x20002350
 800465c:	20000040 	.word	0x20000040
 8004660:	2000002c 	.word	0x2000002c
 8004664:	42c63333 	.word	0x42c63333
 8004668:	429bcccd 	.word	0x429bcccd
 800466c:	c23f999a 	.word	0xc23f999a
 8004670:	c2c80000 	.word	0xc2c80000
 8004674:	4248cccd 	.word	0x4248cccd
 8004678:	08018878 	.word	0x08018878

0800467c <calibrationState>:


bool calibrationState(void) {
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
    
    if (motors[0].calib[1] != 0 &&
 8004680:	4b13      	ldr	r3, [pc, #76]	@ (80046d0 <calibrationState+0x54>)
 8004682:	edd3 7a27 	vldr	s15, [r3, #156]	@ 0x9c
 8004686:	eef5 7a40 	vcmp.f32	s15, #0.0
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	d019      	beq.n	80046c4 <calibrationState+0x48>
        motors[2].calib[1] != 0 &&
 8004690:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <calibrationState+0x54>)
 8004692:	edd3 7a79 	vldr	s15, [r3, #484]	@ 0x1e4
    if (motors[0].calib[1] != 0 &&
 8004696:	eef5 7a40 	vcmp.f32	s15, #0.0
 800469a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469e:	d011      	beq.n	80046c4 <calibrationState+0x48>
        motors[3].calib[1] != 0 &&
 80046a0:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <calibrationState+0x54>)
 80046a2:	edd3 7aa2 	vldr	s15, [r3, #648]	@ 0x288
        motors[2].calib[1] != 0 &&
 80046a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	d009      	beq.n	80046c4 <calibrationState+0x48>
        motors[1].calib[1] != 0)
 80046b0:	4b07      	ldr	r3, [pc, #28]	@ (80046d0 <calibrationState+0x54>)
 80046b2:	edd3 7a50 	vldr	s15, [r3, #320]	@ 0x140
        motors[3].calib[1] != 0 &&
 80046b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	d001      	beq.n	80046c4 <calibrationState+0x48>
    {
        return true;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e000      	b.n	80046c6 <calibrationState+0x4a>
    }
    else {
        return false;
 80046c4:	2300      	movs	r3, #0
    }
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	20005844 	.word	0x20005844

080046d4 <ManualCalibration>:


void ManualCalibration(Axis *axes, Motor *motors) {
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b090      	sub	sp, #64	@ 0x40
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
    /* If calibration is complete, exit immediately */
    TMC2209_SetSpeed(&motors[0], 8000);
 80046de:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80046e2:	6838      	ldr	r0, [r7, #0]
 80046e4:	f7fd fd89 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[1], 8000);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	33a4      	adds	r3, #164	@ 0xa4
 80046ec:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fd fd82 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[2], 8000);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80046fc:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004700:	4618      	mov	r0, r3
 8004702:	f7fd fd7a 	bl	80021fa <TMC2209_SetSpeed>
    TMC2209_SetSpeed(&motors[3], 8000);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800470c:	f44f 51fa 	mov.w	r1, #8000	@ 0x1f40
 8004710:	4618      	mov	r0, r3
 8004712:	f7fd fd72 	bl	80021fa <TMC2209_SetSpeed>
    MotorCommand cmd;  // Command structure to post to motorControlTask

	MotorsHoming(motors);
 8004716:	6838      	ldr	r0, [r7, #0]
 8004718:	f7ff fd5c 	bl	80041d4 <MotorsHoming>
    while(!calibrationState()){
 800471c:	e2e7      	b.n	8004cee <ManualCalibration+0x61a>
    //RunManualCalibrationStateMachine(&hlcd3, &motors);
        SERVO_WritePosition(&hservo1, SERVO1_CHECK_POS);
 800471e:	ed9f 0a6c 	vldr	s0, [pc, #432]	@ 80048d0 <ManualCalibration+0x1fc>
 8004722:	486c      	ldr	r0, [pc, #432]	@ (80048d4 <ManualCalibration+0x200>)
 8004724:	f7ff f802 	bl	800372c <SERVO_WritePosition>
        SERVO_WritePosition(&hservo2, SERVO2_CHECK_POS);
 8004728:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 80048d8 <ManualCalibration+0x204>
 800472c:	486b      	ldr	r0, [pc, #428]	@ (80048dc <ManualCalibration+0x208>)
 800472e:	f7fe fffd 	bl	800372c <SERVO_WritePosition>
    	/* Example variables. Put them in a suitable scope (static in file-scope or function-scope). */
    	static uint8_t buttonState = 0;       // 0 = not pressed, 1 = pressed
    	static uint32_t pressStartTime = 0;   // Time at which the button was first pressed

    	// Debounce time in ms:
    	const uint32_t debounceTime = 50;
 8004732:	2332      	movs	r3, #50	@ 0x32
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c

    static uint32_t lastPressTime = 0;  // Last valid press timestamp

    /* Process the calibration button (BtnCtr) */

    uint32_t currentTime = xTaskGetTickCount(); // or HAL_GetTick(), whichever you use
 8004736:	f00f fb85 	bl	8013e44 <xTaskGetTickCount>
 800473a:	63b8      	str	r0, [r7, #56]	@ 0x38
    uint8_t currentLevel = HAL_GPIO_ReadPin(EncoderBtn_GPIO_Port, EncoderBtn_Pin);
 800473c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004740:	4867      	ldr	r0, [pc, #412]	@ (80048e0 <ManualCalibration+0x20c>)
 8004742:	f003 fa67 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004746:	4603      	mov	r3, r0
 8004748:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // ----------------------------------------------------------
    // Active-low button logic: pressed = (currentLevel == RESET)
    // ----------------------------------------------------------
    if (currentLevel == GPIO_PIN_RESET) {
 800474c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10b      	bne.n	800476c <ManualCalibration+0x98>
        // Button is physically pressed
        if (buttonState == 0) {
 8004754:	4b63      	ldr	r3, [pc, #396]	@ (80048e4 <ManualCalibration+0x210>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 81e3 	bne.w	8004b24 <ManualCalibration+0x450>
            // Transition from not-pressed -> pressed
            buttonState = 1;
 800475e:	4b61      	ldr	r3, [pc, #388]	@ (80048e4 <ManualCalibration+0x210>)
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
            pressStartTime = currentTime;
 8004764:	4a60      	ldr	r2, [pc, #384]	@ (80048e8 <ManualCalibration+0x214>)
 8004766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e1db      	b.n	8004b24 <ManualCalibration+0x450>
        }
    } else {
        // Button is physically released
        if (buttonState == 1) {
 800476c:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <ManualCalibration+0x210>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b01      	cmp	r3, #1
 8004772:	f040 81d7 	bne.w	8004b24 <ManualCalibration+0x450>
            // Transition from pressed -> released
            buttonState = 0;
 8004776:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <ManualCalibration+0x210>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
            // Check if it was held long enough to count as a valid press
            if ((currentTime - pressStartTime) >= debounceTime) {
 800477c:	4b5a      	ldr	r3, [pc, #360]	@ (80048e8 <ManualCalibration+0x214>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004786:	429a      	cmp	r2, r3
 8004788:	f200 81cc 	bhi.w	8004b24 <ManualCalibration+0x450>
                // We register exactly ONE press per cycle
                Pressed++;
 800478c:	4b57      	ldr	r3, [pc, #348]	@ (80048ec <ManualCalibration+0x218>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	3301      	adds	r3, #1
 8004794:	b2da      	uxtb	r2, r3
 8004796:	4b55      	ldr	r3, [pc, #340]	@ (80048ec <ManualCalibration+0x218>)
 8004798:	701a      	strb	r2, [r3, #0]

                // -----------------------------
                // Handle your calibration steps
                // -----------------------------
                switch (Pressed) {
 800479a:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <ManualCalibration+0x218>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d003      	beq.n	80047ac <ManualCalibration+0xd8>
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	f000 80a5 	beq.w	80048f4 <ManualCalibration+0x220>
 80047aa:	e1b7      	b.n	8004b1c <ManualCalibration+0x448>
                    case 1:
                        // Save calibration for first press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <ManualCalibration+0x21c>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	23a4      	movs	r3, #164	@ 0xa4
 80047b4:	fb02 f303 	mul.w	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c0:	4a4b      	ldr	r2, [pc, #300]	@ (80048f0 <ManualCalibration+0x21c>)
 80047c2:	7812      	ldrb	r2, [r2, #0]
 80047c4:	4611      	mov	r1, r2
 80047c6:	22a4      	movs	r2, #164	@ 0xa4
 80047c8:	fb01 f202 	mul.w	r2, r1, r2
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	440a      	add	r2, r1
 80047d0:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	bfb8      	it	lt
 80047da:	425b      	neglt	r3, r3
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 80047ea:	4b41      	ldr	r3, [pc, #260]	@ (80048f0 <ManualCalibration+0x21c>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	461a      	mov	r2, r3
 80047f0:	23a4      	movs	r3, #164	@ 0xa4
 80047f2:	fb02 f303 	mul.w	r3, r2, r3
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 80047fe:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <ManualCalibration+0x21c>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	461a      	mov	r2, r3
 8004808:	23a4      	movs	r3, #164	@ 0xa4
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004812:	683a      	ldr	r2, [r7, #0]
 8004814:	4413      	add	r3, r2
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481a:	4619      	mov	r1, r3
 800481c:	4b34      	ldr	r3, [pc, #208]	@ (80048f0 <ManualCalibration+0x21c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	23a4      	movs	r3, #164	@ 0xa4
 8004824:	fb02 f303 	mul.w	r3, r2, r3
 8004828:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	4413      	add	r3, r2
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	1acb      	subs	r3, r1, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfb8      	it	lt
 800483a:	425b      	neglt	r3, r3
 800483c:	ee07 3a90 	vmov	s15, r3
 8004840:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3328      	adds	r3, #40	@ 0x28
 8004848:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 800484c:	4b28      	ldr	r3, [pc, #160]	@ (80048f0 <ManualCalibration+0x21c>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	23a4      	movs	r3, #164	@ 0xa4
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 8004860:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 8004864:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 8004868:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <ManualCalibration+0x21c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	461a      	mov	r2, r3
 800486e:	23a4      	movs	r3, #164	@ 0xa4
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	441a      	add	r2, r3
 8004878:	4b1d      	ldr	r3, [pc, #116]	@ (80048f0 <ManualCalibration+0x21c>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	23a4      	movs	r3, #164	@ 0xa4
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	6839      	ldr	r1, [r7, #0]
 8004886:	440b      	add	r3, r1
 8004888:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 800488c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <ManualCalibration+0x21c>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	23a4      	movs	r3, #164	@ 0xa4
 8004898:	fb02 f303 	mul.w	r3, r2, r3
 800489c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	441a      	add	r2, r3
 80048a4:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <ManualCalibration+0x21c>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	23a4      	movs	r3, #164	@ 0xa4
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80048b4:	6839      	ldr	r1, [r7, #0]
 80048b6:	440b      	add	r3, r1
 80048b8:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80048bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

                        motorGroup += 1;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <ManualCalibration+0x21c>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <ManualCalibration+0x21c>)
 80048ca:	701a      	strb	r2, [r3, #0]
                        break;
 80048cc:	e12a      	b.n	8004b24 <ManualCalibration+0x450>
 80048ce:	bf00      	nop
 80048d0:	42900000 	.word	0x42900000
 80048d4:	2000002c 	.word	0x2000002c
 80048d8:	42280000 	.word	0x42280000
 80048dc:	20000040 	.word	0x20000040
 80048e0:	40020c00 	.word	0x40020c00
 80048e4:	200048fe 	.word	0x200048fe
 80048e8:	20004900 	.word	0x20004900
 80048ec:	200048fd 	.word	0x200048fd
 80048f0:	200048fc 	.word	0x200048fc

                    case 2:
                        // Save calibration for second press
                        motors[motorGroup].currentPositionMM =
                            (float)abs(motors[motorGroup].StepsFront - motors[motorGroup].StepsBack)
 80048f4:	4b81      	ldr	r3, [pc, #516]	@ (8004afc <ManualCalibration+0x428>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	23a4      	movs	r3, #164	@ 0xa4
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	4413      	add	r3, r2
 8004904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004908:	4a7c      	ldr	r2, [pc, #496]	@ (8004afc <ManualCalibration+0x428>)
 800490a:	7812      	ldrb	r2, [r2, #0]
 800490c:	4611      	mov	r1, r2
 800490e:	22a4      	movs	r2, #164	@ 0xa4
 8004910:	fb01 f202 	mul.w	r2, r1, r2
 8004914:	6839      	ldr	r1, [r7, #0]
 8004916:	440a      	add	r2, r1
 8004918:	f8d2 2094 	ldr.w	r2, [r2, #148]	@ 0x94
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	2b00      	cmp	r3, #0
 8004920:	bfb8      	it	lt
 8004922:	425b      	neglt	r3, r3
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[0].stepPerUnit;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup].currentPositionMM =
 8004932:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <ManualCalibration+0x428>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	23a4      	movs	r3, #164	@ 0xa4
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4413      	add	r3, r2
                              / axes[0].stepPerUnit;
 8004942:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup].currentPositionMM =
 8004946:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
                        motors[motorGroup + 2].currentPositionMM =
                            (float)abs(motors[motorGroup + 2].StepsBack - motors[motorGroup + 2].StepsFront)
 800494a:	4b6c      	ldr	r3, [pc, #432]	@ (8004afc <ManualCalibration+0x428>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	23a4      	movs	r3, #164	@ 0xa4
 8004952:	fb02 f303 	mul.w	r3, r2, r3
 8004956:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	4413      	add	r3, r2
 800495e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004962:	4619      	mov	r1, r3
 8004964:	4b65      	ldr	r3, [pc, #404]	@ (8004afc <ManualCalibration+0x428>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	23a4      	movs	r3, #164	@ 0xa4
 800496c:	fb02 f303 	mul.w	r3, r2, r3
 8004970:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	4413      	add	r3, r2
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497c:	1acb      	subs	r3, r1, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	bfb8      	it	lt
 8004982:	425b      	neglt	r3, r3
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 6ae7 	vcvt.f32.s32	s13, s15
                              / axes[1].stepPerUnit;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	ed93 7a04 	vldr	s14, [r3, #16]
                        motors[motorGroup + 2].currentPositionMM =
 8004994:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <ManualCalibration+0x428>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	23a4      	movs	r3, #164	@ 0xa4
 800499c:	fb02 f303 	mul.w	r3, r2, r3
 80049a0:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4413      	add	r3, r2
                              / axes[1].stepPerUnit;
 80049a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
                        motors[motorGroup + 2].currentPositionMM =
 80049ac:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84

                        motors[motorGroup].calib[0] = motors[motorGroup].currentPositionMM;
 80049b0:	4b52      	ldr	r3, [pc, #328]	@ (8004afc <ManualCalibration+0x428>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	23a4      	movs	r3, #164	@ 0xa4
 80049b8:	fb02 f303 	mul.w	r3, r2, r3
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	441a      	add	r2, r3
 80049c0:	4b4e      	ldr	r3, [pc, #312]	@ (8004afc <ManualCalibration+0x428>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	23a4      	movs	r3, #164	@ 0xa4
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	440b      	add	r3, r1
 80049d0:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 80049d4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        motors[motorGroup + 2].calib[0] = motors[motorGroup + 2].currentPositionMM;
 80049d8:	4b48      	ldr	r3, [pc, #288]	@ (8004afc <ManualCalibration+0x428>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	23a4      	movs	r3, #164	@ 0xa4
 80049e0:	fb02 f303 	mul.w	r3, r2, r3
 80049e4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	441a      	add	r2, r3
 80049ec:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <ManualCalibration+0x428>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	4619      	mov	r1, r3
 80049f2:	23a4      	movs	r3, #164	@ 0xa4
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	440b      	add	r3, r1
 8004a00:	f8d2 2084 	ldr.w	r2, [r2, #132]	@ 0x84
 8004a04:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
                        MotorsHoming(motors);
 8004a08:	6838      	ldr	r0, [r7, #0]
 8004a0a:	f7ff fbe3 	bl	80041d4 <MotorsHoming>
                    	SERVO_WritePosition(&hservo1, SERVO1_HOME_POS);
 8004a0e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8004b00 <ManualCalibration+0x42c>
 8004a12:	483c      	ldr	r0, [pc, #240]	@ (8004b04 <ManualCalibration+0x430>)
 8004a14:	f7fe fe8a 	bl	800372c <SERVO_WritePosition>
                    	SERVO_WritePosition(&hservo2, SERVO2_HOME_POS);
 8004a18:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8004b08 <ManualCalibration+0x434>
 8004a1c:	483b      	ldr	r0, [pc, #236]	@ (8004b0c <ManualCalibration+0x438>)
 8004a1e:	f7fe fe85 	bl	800372c <SERVO_WritePosition>

                        cmd.targetPositionsAxis0[0] = motors[0].calib[0];   // Y
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a28:	61fb      	str	r3, [r7, #28]
                        cmd.targetPositionsAxis0[1] = -(motors[1].calib[0]); // Y
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	33a4      	adds	r3, #164	@ 0xa4
 8004a2e:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004a32:	eef1 7a67 	vneg.f32	s15, s15
 8004a36:	edc7 7a08 	vstr	s15, [r7, #32]
                        cmd.targetPositionsAxis0[2] = -(motors[2].calib[0]);  // X
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004a40:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004a44:	eef1 7a67 	vneg.f32	s15, s15
 8004a48:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                        cmd.targetPositionsAxis0[3] = motors[3].calib[0];   // X
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a56:	62bb      	str	r3, [r7, #40]	@ 0x28
                        cmd.command = MOTOR_CMD_MOVE_ALL_MOTORS;
 8004a58:	2309      	movs	r3, #9
 8004a5a:	723b      	strb	r3, [r7, #8]

                       xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004b10 <ManualCalibration+0x43c>)
 8004a5e:	6818      	ldr	r0, [r3, #0]
 8004a60:	f107 0108 	add.w	r1, r7, #8
 8004a64:	2300      	movs	r3, #0
 8004a66:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6a:	f00e f94d 	bl	8012d08 <xQueueGenericSend>
                       axes[0].motors[0]->currentPositionMM = 0.0f;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[0].motors[1]->currentPositionMM = 100;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	4a25      	ldr	r2, [pc, #148]	@ (8004b14 <ManualCalibration+0x440>)
 8004a80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[0]->currentPositionMM = 0.0f;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	3328      	adds	r3, #40	@ 0x28
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f04f 0200 	mov.w	r2, #0
 8004a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       axes[1].motors[1]->currentPositionMM = 0.0f;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3328      	adds	r3, #40	@ 0x28
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f04f 0200 	mov.w	r2, #0
 8004a9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
                       motors[0].calib[1] = motors[0].calib[0];
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
                       motors[1].calib[1] = -(motors[1].calib[0]);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	33a4      	adds	r3, #164	@ 0xa4
 8004ab0:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	33a4      	adds	r3, #164	@ 0xa4
 8004ab8:	eef1 7a67 	vneg.f32	s15, s15
 8004abc:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
                       motors[2].calib[1] = -(motors[2].calib[0]);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ac6:	edd3 7a26 	vldr	s15, [r3, #152]	@ 0x98
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004ad0:	eef1 7a67 	vneg.f32	s15, s15
 8004ad4:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
                       motors[3].calib[1] = motors[3].calib[0];
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8004ae4:	f8d2 2098 	ldr.w	r2, [r2, #152]	@ 0x98
 8004ae8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

                        motorGroup = 0;  // Reset as needed
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <ManualCalibration+0x428>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]
                        Pressed = 0;     // Reset the press counter
 8004af2:	4b09      	ldr	r3, [pc, #36]	@ (8004b18 <ManualCalibration+0x444>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]

                        break;
 8004af8:	e014      	b.n	8004b24 <ManualCalibration+0x450>
 8004afa:	bf00      	nop
 8004afc:	200048fc 	.word	0x200048fc
 8004b00:	42b40000 	.word	0x42b40000
 8004b04:	2000002c 	.word	0x2000002c
 8004b08:	42700000 	.word	0x42700000
 8004b0c:	20000040 	.word	0x20000040
 8004b10:	20002350 	.word	0x20002350
 8004b14:	42c80000 	.word	0x42c80000
 8004b18:	200048fd 	.word	0x200048fd

                    default:
                        // If somehow we get more than 2, just reset
                        Pressed = 0;
 8004b1c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d0c <ManualCalibration+0x638>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
                        break;
 8004b22:	bf00      	nop


    /* --- Manual motor control via buttons --- */

    /* Example: BtnUp pressed -> move motor (motorGroup) in the forward direction */
    if (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004b24:	2102      	movs	r1, #2
 8004b26:	487a      	ldr	r0, [pc, #488]	@ (8004d10 <ManualCalibration+0x63c>)
 8004b28:	f003 f874 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d12d      	bne.n	8004b8e <ManualCalibration+0x4ba>
        cmd.motorIndex = motorGroup;
 8004b32:	4b78      	ldr	r3, [pc, #480]	@ (8004d14 <ManualCalibration+0x640>)
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;  // Set forward direction
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b40:	4b75      	ldr	r3, [pc, #468]	@ (8004d18 <ManualCalibration+0x644>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	f107 0108 	add.w	r1, r7, #8
 8004b48:	2300      	movs	r3, #0
 8004b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b4e:	f00e f8db 	bl	8012d08 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004b52:	2302      	movs	r3, #2
 8004b54:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b56:	4b70      	ldr	r3, [pc, #448]	@ (8004d18 <ManualCalibration+0x644>)
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	f107 0108 	add.w	r1, r7, #8
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	f00e f8d0 	bl	8012d08 <xQueueGenericSend>

        /* While the button remains pressed, yield to other tasks */
        while (HAL_GPIO_ReadPin(BtnUp_GPIO_Port, BtnUp_Pin) == GPIO_PIN_RESET) {
 8004b68:	bf00      	nop
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4868      	ldr	r0, [pc, #416]	@ (8004d10 <ManualCalibration+0x63c>)
 8004b6e:	f003 f851 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f8      	beq.n	8004b6a <ManualCalibration+0x496>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.command = MOTOR_CMD_STOP;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004b7c:	4b66      	ldr	r3, [pc, #408]	@ (8004d18 <ManualCalibration+0x644>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	f107 0108 	add.w	r1, r7, #8
 8004b84:	2300      	movs	r3, #0
 8004b86:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8a:	f00e f8bd 	bl	8012d08 <xQueueGenericSend>
    }


    /* Example: BtnDown pressed -> move motor (motorGroup) in the reverse direction */
    if (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004b8e:	2101      	movs	r1, #1
 8004b90:	485f      	ldr	r0, [pc, #380]	@ (8004d10 <ManualCalibration+0x63c>)
 8004b92:	f003 f83f 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d130      	bne.n	8004bfe <ManualCalibration+0x52a>
        cmd.motorIndex = motorGroup;
 8004b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8004d14 <ManualCalibration+0x640>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;  // Set reverse direction
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004baa:	4b5b      	ldr	r3, [pc, #364]	@ (8004d18 <ManualCalibration+0x644>)
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	f107 0108 	add.w	r1, r7, #8
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb8:	f00e f8a6 	bl	8012d08 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup],1);

        cmd.command = MOTOR_CMD_START;
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004bc0:	4b55      	ldr	r3, [pc, #340]	@ (8004d18 <ManualCalibration+0x644>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	f107 0108 	add.w	r1, r7, #8
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f04f 32ff 	mov.w	r2, #4294967295
 8004bce:	f00e f89b 	bl	8012d08 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnDown_GPIO_Port, BtnDown_Pin) == GPIO_PIN_RESET) {
 8004bd2:	bf00      	nop
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	484e      	ldr	r0, [pc, #312]	@ (8004d10 <ManualCalibration+0x63c>)
 8004bd8:	f003 f81c 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f8      	beq.n	8004bd4 <ManualCalibration+0x500>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup;
 8004be2:	4b4c      	ldr	r3, [pc, #304]	@ (8004d14 <ManualCalibration+0x640>)
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004be8:	2301      	movs	r3, #1
 8004bea:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004bec:	4b4a      	ldr	r3, [pc, #296]	@ (8004d18 <ManualCalibration+0x644>)
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	f107 0108 	add.w	r1, r7, #8
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfa:	f00e f885 	bl	8012d08 <xQueueGenericSend>
    }


    /* Example: BtnRight pressed -> move paired motor (motorGroup+2) forward */
    if (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004bfe:	2102      	movs	r1, #2
 8004c00:	4846      	ldr	r0, [pc, #280]	@ (8004d1c <ManualCalibration+0x648>)
 8004c02:	f003 f807 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d134      	bne.n	8004c76 <ManualCalibration+0x5a2>
        cmd.motorIndex = motorGroup + 2;
 8004c0c:	4b41      	ldr	r3, [pc, #260]	@ (8004d14 <ManualCalibration+0x640>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	3302      	adds	r3, #2
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004c16:	2303      	movs	r3, #3
 8004c18:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_SET;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <ManualCalibration+0x644>)
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f107 0108 	add.w	r1, r7, #8
 8004c26:	2300      	movs	r3, #0
 8004c28:	f04f 32ff 	mov.w	r2, #4294967295
 8004c2c:	f00e f86c 	bl	8012d08 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],1);
        cmd.command = MOTOR_CMD_START;
 8004c30:	2302      	movs	r3, #2
 8004c32:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c34:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <ManualCalibration+0x644>)
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	f107 0108 	add.w	r1, r7, #8
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c42:	f00e f861 	bl	8012d08 <xQueueGenericSend>

        while (HAL_GPIO_ReadPin(BtnRight_GPIO_Port, BtnRight_Pin) == GPIO_PIN_RESET) {
 8004c46:	bf00      	nop
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4834      	ldr	r0, [pc, #208]	@ (8004d1c <ManualCalibration+0x648>)
 8004c4c:	f002 ffe2 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0f8      	beq.n	8004c48 <ManualCalibration+0x574>
            //vTaskDelay(pdMS_TO_TICKS(10));
        }
        cmd.motorIndex = motorGroup + 2;
 8004c56:	4b2f      	ldr	r3, [pc, #188]	@ (8004d14 <ManualCalibration+0x640>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_STOP;
 8004c60:	2301      	movs	r3, #1
 8004c62:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c64:	4b2c      	ldr	r3, [pc, #176]	@ (8004d18 <ManualCalibration+0x644>)
 8004c66:	6818      	ldr	r0, [r3, #0]
 8004c68:	f107 0108 	add.w	r1, r7, #8
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c72:	f00e f849 	bl	8012d08 <xQueueGenericSend>
    }



    /* Example: BtnLeft pressed -> move paired motor (motorGroup+2) in reverse */
    if (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004c76:	2102      	movs	r1, #2
 8004c78:	4829      	ldr	r0, [pc, #164]	@ (8004d20 <ManualCalibration+0x64c>)
 8004c7a:	f002 ffcb 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d134      	bne.n	8004cee <ManualCalibration+0x61a>
        cmd.motorIndex = motorGroup + 2;
 8004c84:	4b23      	ldr	r3, [pc, #140]	@ (8004d14 <ManualCalibration+0x640>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	3302      	adds	r3, #2
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	72bb      	strb	r3, [r7, #10]
        cmd.command    = MOTOR_CMD_DIRECTION;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	723b      	strb	r3, [r7, #8]
        cmd.direction  = GPIO_PIN_RESET;
 8004c92:	2300      	movs	r3, #0
 8004c94:	743b      	strb	r3, [r7, #16]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <ManualCalibration+0x644>)
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f107 0108 	add.w	r1, r7, #8
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca4:	f00e f830 	bl	8012d08 <xQueueGenericSend>
    	//TMC2209_SetDirection(&motors[motorGroup + 2],0);

        cmd.command = MOTOR_CMD_START;
 8004ca8:	2302      	movs	r3, #2
 8004caa:	723b      	strb	r3, [r7, #8]
        xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	@ (8004d18 <ManualCalibration+0x644>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f107 0108 	add.w	r1, r7, #8
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cba:	f00e f825 	bl	8012d08 <xQueueGenericSend>



    while (HAL_GPIO_ReadPin(BtnLeft_GPIO_Port, BtnLeft_Pin) == GPIO_PIN_RESET) {
 8004cbe:	bf00      	nop
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	4817      	ldr	r0, [pc, #92]	@ (8004d20 <ManualCalibration+0x64c>)
 8004cc4:	f002 ffa6 	bl	8007c14 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f8      	beq.n	8004cc0 <ManualCalibration+0x5ec>
                //vTaskDelay(pdMS_TO_TICKS(10));
            }
            cmd.motorIndex = motorGroup + 2;
 8004cce:	4b11      	ldr	r3, [pc, #68]	@ (8004d14 <ManualCalibration+0x640>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	3302      	adds	r3, #2
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	72bb      	strb	r3, [r7, #10]
            cmd.command    = MOTOR_CMD_STOP;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	723b      	strb	r3, [r7, #8]
            xQueueSend(motorCommandQueue, &cmd, portMAX_DELAY);
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8004d18 <ManualCalibration+0x644>)
 8004cde:	6818      	ldr	r0, [r3, #0]
 8004ce0:	f107 0108 	add.w	r1, r7, #8
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cea:	f00e f80d 	bl	8012d08 <xQueueGenericSend>
    while(!calibrationState()){
 8004cee:	f7ff fcc5 	bl	800467c <calibrationState>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	f083 0301 	eor.w	r3, r3, #1
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f47f ad0f 	bne.w	800471e <ManualCalibration+0x4a>
        }
    }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3740      	adds	r7, #64	@ 0x40
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200048fd 	.word	0x200048fd
 8004d10:	40021400 	.word	0x40021400
 8004d14:	200048fc 	.word	0x200048fc
 8004d18:	20002350 	.word	0x20002350
 8004d1c:	40020c00 	.word	0x40020c00
 8004d20:	40021800 	.word	0x40021800

08004d24 <configureTimerForRunTimeStats>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0

}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
return 0;
 8004d36:	2300      	movs	r3, #0
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
 8004d4a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4a07      	ldr	r2, [pc, #28]	@ (8004d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8004d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	4a06      	ldr	r2, [pc, #24]	@ (8004d88 <vApplicationGetIdleTaskMemory+0x30>)
 8004d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20004904 	.word	0x20004904
 8004d88:	20004964 	.word	0x20004964

08004d8c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == USER_Btn_Pin) // Check if the interrupt is for the correct button
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9c:	d102      	bne.n	8004da4 <HAL_GPIO_EXTI_Callback+0x18>
    {

    flagUserBtn = 1;
 8004d9e:	4b04      	ldr	r3, [pc, #16]	@ (8004db0 <HAL_GPIO_EXTI_Callback+0x24>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	701a      	strb	r2, [r3, #0]
    }

}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr
 8004db0:	20005b24 	.word	0x20005b24

08004db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004dba:	f002 f842 	bl	8006e42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004dbe:	f000 f8cb 	bl	8004f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004dc2:	f000 fe57 	bl	8005a74 <MX_GPIO_Init>
  MX_DMA_Init();
 8004dc6:	f000 fe03 	bl	80059d0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8004dca:	f000 fd73 	bl	80058b4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004dce:	f000 fdd1 	bl	8005974 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8004dd2:	f000 fbf9 	bl	80055c8 <MX_TIM7_Init>
  MX_TIM4_Init();
 8004dd6:	f000 fb45 	bl	8005464 <MX_TIM4_Init>
  MX_TIM2_Init();
 8004dda:	f000 fa53 	bl	8005284 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004dde:	f000 fd39 	bl	8005854 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8004de2:	f009 f811 	bl	800de08 <MX_FATFS_Init>
  MX_SPI2_Init();
 8004de6:	f000 f963 	bl	80050b0 <MX_SPI2_Init>
  MX_TIM3_Init();
 8004dea:	f000 fac3 	bl	8005374 <MX_TIM3_Init>
  MX_TIM14_Init();
 8004dee:	f000 fc83 	bl	80056f8 <MX_TIM14_Init>
  MX_TIM5_Init();
 8004df2:	f000 fb8d 	bl	8005510 <MX_TIM5_Init>
  MX_TIM9_Init();
 8004df6:	f000 fc1d 	bl	8005634 <MX_TIM9_Init>
  MX_I2C1_Init();
 8004dfa:	f000 f919 	bl	8005030 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8004dfe:	f000 fd89 	bl	8005914 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004e02:	f000 fcc7 	bl	8005794 <MX_UART4_Init>
  MX_UART5_Init();
 8004e06:	f000 fcf5 	bl	80057f4 <MX_UART5_Init>
  MX_TIM1_Init();
 8004e0a:	f000 f98f 	bl	800512c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  LCD_I2C_Init(&hlcd3);
 8004e0e:	4840      	ldr	r0, [pc, #256]	@ (8004f10 <main+0x15c>)
 8004e10:	f7fc f95e 	bl	80010d0 <LCD_I2C_Init>
 // LCD_I2C_Clear(&hlcd3);

  SERVO_Init(&hservo1);
 8004e14:	483f      	ldr	r0, [pc, #252]	@ (8004f14 <main+0x160>)
 8004e16:	f7fe fc69 	bl	80036ec <SERVO_Init>
  SERVO_Init(&hservo2);
 8004e1a:	483f      	ldr	r0, [pc, #252]	@ (8004f18 <main+0x164>)
 8004e1c:	f7fe fc66 	bl	80036ec <SERVO_Init>

  ENC_Init(&henc1);
 8004e20:	483e      	ldr	r0, [pc, #248]	@ (8004f1c <main+0x168>)
 8004e22:	f7fe fb45 	bl	80034b0 <ENC_Init>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  testingEvent = xEventGroupCreate();
 8004e26:	f00d fb88 	bl	801253a <xEventGroupCreate>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f20 <main+0x16c>)
 8004e2e:	6013      	str	r3, [r2, #0]
  configASSERT(testingEvent != NULL);
 8004e30:	4b3b      	ldr	r3, [pc, #236]	@ (8004f20 <main+0x16c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10d      	bne.n	8004e54 <main+0xa0>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3c:	b672      	cpsid	i
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	b662      	cpsie	i
 8004e4c:	607b      	str	r3, [r7, #4]
}
 8004e4e:	bf00      	nop
 8004e50:	bf00      	nop
 8004e52:	e7fd      	b.n	8004e50 <main+0x9c>
  calibEventGroup = xEventGroupCreate();
 8004e54:	f00d fb71 	bl	801253a <xEventGroupCreate>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	4a32      	ldr	r2, [pc, #200]	@ (8004f24 <main+0x170>)
 8004e5c:	6013      	str	r3, [r2, #0]
  configASSERT(calibEventGroup != NULL);
 8004e5e:	4b31      	ldr	r3, [pc, #196]	@ (8004f24 <main+0x170>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d10d      	bne.n	8004e82 <main+0xce>
	__asm volatile
 8004e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6a:	b672      	cpsid	i
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	b662      	cpsie	i
 8004e7a:	603b      	str	r3, [r7, #0]
}
 8004e7c:	bf00      	nop
 8004e7e:	bf00      	nop
 8004e80:	e7fd      	b.n	8004e7e <main+0xca>

  lcdMutex = xSemaphoreCreateMutex();
 8004e82:	2001      	movs	r0, #1
 8004e84:	f00d ff27 	bl	8012cd6 <xQueueCreateMutex>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	4a27      	ldr	r2, [pc, #156]	@ (8004f28 <main+0x174>)
 8004e8c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  xInitSemaphore = xSemaphoreCreateMutex();
 8004e8e:	2001      	movs	r0, #1
 8004e90:	f00d ff21 	bl	8012cd6 <xQueueCreateMutex>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4a25      	ldr	r2, [pc, #148]	@ (8004f2c <main+0x178>)
 8004e98:	6013      	str	r3, [r2, #0]
//  osThreadId_t motorTaskHandle = osThreadNew(motorControlTask, NULL, &motorTask_attributes);



  /* Create the main menu task */
  xTaskCreate(
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	9301      	str	r3, [sp, #4]
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ea8:	4921      	ldr	r1, [pc, #132]	@ (8004f30 <main+0x17c>)
 8004eaa:	4822      	ldr	r0, [pc, #136]	@ (8004f34 <main+0x180>)
 8004eac:	f00e fd34 	bl	8013918 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 4,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	9301      	str	r3, [sp, #4]
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	2280      	movs	r2, #128	@ 0x80
 8004ebc:	491e      	ldr	r1, [pc, #120]	@ (8004f38 <main+0x184>)
 8004ebe:	481f      	ldr	r0, [pc, #124]	@ (8004f3c <main+0x188>)
 8004ec0:	f00e fd2a 	bl	8013918 <xTaskCreate>
      NULL,                     /* Task parameters */
	  tskIDLE_PRIORITY + 4,     /* Task priority */
      NULL                       /* Task handle (optional) */
  );

  xTaskCreate(
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	2301      	movs	r3, #1
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ed2:	491b      	ldr	r1, [pc, #108]	@ (8004f40 <main+0x18c>)
 8004ed4:	481b      	ldr	r0, [pc, #108]	@ (8004f44 <main+0x190>)
 8004ed6:	f00e fd1f 	bl	8013918 <xTaskCreate>
      NULL,         /* Task parameters */
	  tskIDLE_PRIORITY + 1,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );

  xTaskCreate(
 8004eda:	2300      	movs	r3, #0
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	2303      	movs	r3, #3
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004ee8:	4917      	ldr	r1, [pc, #92]	@ (8004f48 <main+0x194>)
 8004eea:	4818      	ldr	r0, [pc, #96]	@ (8004f4c <main+0x198>)
 8004eec:	f00e fd14 	bl	8013918 <xTaskCreate>
	  tskIDLE_PRIORITY + 3,    /* Task priority */
      NULL                     /* Task handle (optional) */
  );


  xTaskCreate(
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2280      	movs	r2, #128	@ 0x80
 8004efc:	4914      	ldr	r1, [pc, #80]	@ (8004f50 <main+0x19c>)
 8004efe:	4815      	ldr	r0, [pc, #84]	@ (8004f54 <main+0x1a0>)
 8004f00:	f00e fd0a 	bl	8013918 <xTaskCreate>
  );



  /* Start the FreeRTOS scheduler */
  vTaskStartScheduler();
 8004f04:	f00e fe88 	bl	8013c18 <vTaskStartScheduler>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004f08:	f00d fa32 	bl	8012370 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   while (1){
 8004f0c:	bf00      	nop
 8004f0e:	e7fd      	b.n	8004f0c <main+0x158>
 8004f10:	20000018 	.word	0x20000018
 8004f14:	2000002c 	.word	0x2000002c
 8004f18:	20000040 	.word	0x20000040
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	2000235c 	.word	0x2000235c
 8004f24:	20002358 	.word	0x20002358
 8004f28:	20002360 	.word	0x20002360
 8004f2c:	20002364 	.word	0x20002364
 8004f30:	0801888c 	.word	0x0801888c
 8004f34:	080038a9 	.word	0x080038a9
 8004f38:	080188a0 	.word	0x080188a0
 8004f3c:	08003a59 	.word	0x08003a59
 8004f40:	080188b4 	.word	0x080188b4
 8004f44:	08003b21 	.word	0x08003b21
 8004f48:	080188c4 	.word	0x080188c4
 8004f4c:	08003d41 	.word	0x08003d41
 8004f50:	080188d4 	.word	0x080188d4
 8004f54:	08003805 	.word	0x08003805

08004f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b094      	sub	sp, #80	@ 0x50
 8004f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f5e:	f107 0320 	add.w	r3, r7, #32
 8004f62:	2230      	movs	r2, #48	@ 0x30
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f011 f95d 	bl	8016226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f6c:	f107 030c 	add.w	r3, r7, #12
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	605a      	str	r2, [r3, #4]
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	60da      	str	r2, [r3, #12]
 8004f7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8005028 <SystemClock_Config+0xd0>)
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	4a29      	ldr	r2, [pc, #164]	@ (8005028 <SystemClock_Config+0xd0>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f88:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <SystemClock_Config+0xd0>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f94:	4b25      	ldr	r3, [pc, #148]	@ (800502c <SystemClock_Config+0xd4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a24      	ldr	r2, [pc, #144]	@ (800502c <SystemClock_Config+0xd4>)
 8004f9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f9e:	6013      	str	r3, [r2, #0]
 8004fa0:	4b22      	ldr	r3, [pc, #136]	@ (800502c <SystemClock_Config+0xd4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004fa8:	607b      	str	r3, [r7, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004fac:	2301      	movs	r3, #1
 8004fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004fb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004fba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004fc4:	23d8      	movs	r3, #216	@ 0xd8
 8004fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004fcc:	2309      	movs	r3, #9
 8004fce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fd0:	f107 0320 	add.w	r3, r7, #32
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f003 fc57 	bl	8008888 <HAL_RCC_OscConfig>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d001      	beq.n	8004fe4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004fe0:	f000 fe9c 	bl	8005d1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004fe4:	f003 fc00 	bl	80087e8 <HAL_PWREx_EnableOverDrive>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004fee:	f000 fe95 	bl	8005d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ff2:	230f      	movs	r3, #15
 8004ff4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004ffe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005004:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005008:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	2107      	movs	r1, #7
 8005010:	4618      	mov	r0, r3
 8005012:	f003 fedd 	bl	8008dd0 <HAL_RCC_ClockConfig>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800501c:	f000 fe7e 	bl	8005d1c <Error_Handler>
  }
}
 8005020:	bf00      	nop
 8005022:	3750      	adds	r7, #80	@ 0x50
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40023800 	.word	0x40023800
 800502c:	40007000 	.word	0x40007000

08005030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005034:	4b1b      	ldr	r3, [pc, #108]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005036:	4a1c      	ldr	r2, [pc, #112]	@ (80050a8 <MX_I2C1_Init+0x78>)
 8005038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800503a:	4b1a      	ldr	r3, [pc, #104]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800503c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ac <MX_I2C1_Init+0x7c>)
 800503e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005042:	2200      	movs	r2, #0
 8005044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005048:	2201      	movs	r2, #1
 800504a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800504c:	4b15      	ldr	r3, [pc, #84]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800504e:	2200      	movs	r2, #0
 8005050:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8005052:	4b14      	ldr	r3, [pc, #80]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005054:	2200      	movs	r2, #0
 8005056:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005058:	4b12      	ldr	r3, [pc, #72]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800505a:	2200      	movs	r2, #0
 800505c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800505e:	4b11      	ldr	r3, [pc, #68]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005060:	2200      	movs	r2, #0
 8005062:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005064:	4b0f      	ldr	r3, [pc, #60]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005066:	2200      	movs	r2, #0
 8005068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800506a:	480e      	ldr	r0, [pc, #56]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800506c:	f002 fe1c 	bl	8007ca8 <HAL_I2C_Init>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005076:	f000 fe51 	bl	8005d1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800507a:	2100      	movs	r1, #0
 800507c:	4809      	ldr	r0, [pc, #36]	@ (80050a4 <MX_I2C1_Init+0x74>)
 800507e:	f003 f9e1 	bl	8008444 <HAL_I2CEx_ConfigAnalogFilter>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005088:	f000 fe48 	bl	8005d1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800508c:	2100      	movs	r1, #0
 800508e:	4805      	ldr	r0, [pc, #20]	@ (80050a4 <MX_I2C1_Init+0x74>)
 8005090:	f003 fa23 	bl	80084da <HAL_I2CEx_ConfigDigitalFilter>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d001      	beq.n	800509e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800509a:	f000 fe3f 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	20004b64 	.word	0x20004b64
 80050a8:	40005400 	.word	0x40005400
 80050ac:	20404768 	.word	0x20404768

080050b0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80050b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <MX_SPI2_Init+0x78>)
 80050b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80050ba:	4b1a      	ldr	r3, [pc, #104]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80050c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80050c2:	4b18      	ldr	r3, [pc, #96]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80050c8:	4b16      	ldr	r3, [pc, #88]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050ca:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80050ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050d0:	4b14      	ldr	r3, [pc, #80]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050d6:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050d8:	2200      	movs	r2, #0
 80050da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80050dc:	4b11      	ldr	r3, [pc, #68]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80050e4:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050e6:	2238      	movs	r2, #56	@ 0x38
 80050e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80050ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80050f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80050fc:	4b09      	ldr	r3, [pc, #36]	@ (8005124 <MX_SPI2_Init+0x74>)
 80050fe:	2207      	movs	r2, #7
 8005100:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005102:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <MX_SPI2_Init+0x74>)
 8005104:	2200      	movs	r2, #0
 8005106:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005108:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <MX_SPI2_Init+0x74>)
 800510a:	2208      	movs	r2, #8
 800510c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800510e:	4805      	ldr	r0, [pc, #20]	@ (8005124 <MX_SPI2_Init+0x74>)
 8005110:	f004 fca6 	bl	8009a60 <HAL_SPI_Init>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800511a:	f000 fdff 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800511e:	bf00      	nop
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	20004bb8 	.word	0x20004bb8
 8005128:	40003800 	.word	0x40003800

0800512c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b09a      	sub	sp, #104	@ 0x68
 8005130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005132:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	605a      	str	r2, [r3, #4]
 800513c:	609a      	str	r2, [r3, #8]
 800513e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005140:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8005144:	2200      	movs	r2, #0
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	605a      	str	r2, [r3, #4]
 800514a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800514c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	611a      	str	r2, [r3, #16]
 800515c:	615a      	str	r2, [r3, #20]
 800515e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005160:	1d3b      	adds	r3, r7, #4
 8005162:	222c      	movs	r2, #44	@ 0x2c
 8005164:	2100      	movs	r1, #0
 8005166:	4618      	mov	r0, r3
 8005168:	f011 f85d 	bl	8016226 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800516c:	4b43      	ldr	r3, [pc, #268]	@ (800527c <MX_TIM1_Init+0x150>)
 800516e:	4a44      	ldr	r2, [pc, #272]	@ (8005280 <MX_TIM1_Init+0x154>)
 8005170:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 215;
 8005172:	4b42      	ldr	r3, [pc, #264]	@ (800527c <MX_TIM1_Init+0x150>)
 8005174:	22d7      	movs	r2, #215	@ 0xd7
 8005176:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005178:	4b40      	ldr	r3, [pc, #256]	@ (800527c <MX_TIM1_Init+0x150>)
 800517a:	2200      	movs	r2, #0
 800517c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800517e:	4b3f      	ldr	r3, [pc, #252]	@ (800527c <MX_TIM1_Init+0x150>)
 8005180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005184:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005186:	4b3d      	ldr	r3, [pc, #244]	@ (800527c <MX_TIM1_Init+0x150>)
 8005188:	2200      	movs	r2, #0
 800518a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800518c:	4b3b      	ldr	r3, [pc, #236]	@ (800527c <MX_TIM1_Init+0x150>)
 800518e:	2200      	movs	r2, #0
 8005190:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005192:	4b3a      	ldr	r3, [pc, #232]	@ (800527c <MX_TIM1_Init+0x150>)
 8005194:	2200      	movs	r2, #0
 8005196:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005198:	4838      	ldr	r0, [pc, #224]	@ (800527c <MX_TIM1_Init+0x150>)
 800519a:	f005 fa2b 	bl	800a5f4 <HAL_TIM_Base_Init>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80051a4:	f000 fdba 	bl	8005d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80051ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80051b2:	4619      	mov	r1, r3
 80051b4:	4831      	ldr	r0, [pc, #196]	@ (800527c <MX_TIM1_Init+0x150>)
 80051b6:	f006 fa3d 	bl	800b634 <HAL_TIM_ConfigClockSource>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80051c0:	f000 fdac 	bl	8005d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80051c4:	482d      	ldr	r0, [pc, #180]	@ (800527c <MX_TIM1_Init+0x150>)
 80051c6:	f005 fb7d 	bl	800a8c4 <HAL_TIM_PWM_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80051d0:	f000 fda4 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051d4:	2300      	movs	r3, #0
 80051d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80051d8:	2300      	movs	r3, #0
 80051da:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051dc:	2300      	movs	r3, #0
 80051de:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051e0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80051e4:	4619      	mov	r1, r3
 80051e6:	4825      	ldr	r0, [pc, #148]	@ (800527c <MX_TIM1_Init+0x150>)
 80051e8:	f006 fed6 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80051f2:	f000 fd93 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80051f6:	2360      	movs	r3, #96	@ 0x60
 80051f8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 500;
 80051fa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80051fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005200:	2300      	movs	r3, #0
 8005202:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005204:	2300      	movs	r3, #0
 8005206:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005208:	2300      	movs	r3, #0
 800520a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800520c:	2300      	movs	r3, #0
 800520e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005210:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005214:	220c      	movs	r2, #12
 8005216:	4619      	mov	r1, r3
 8005218:	4818      	ldr	r0, [pc, #96]	@ (800527c <MX_TIM1_Init+0x150>)
 800521a:	f006 f8f7 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8005224:	f000 fd7a 	bl	8005d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005228:	2300      	movs	r3, #0
 800522a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800522c:	2300      	movs	r3, #0
 800522e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005238:	2300      	movs	r3, #0
 800523a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800523c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005240:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005246:	2300      	movs	r3, #0
 8005248:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800524a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005258:	1d3b      	adds	r3, r7, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4807      	ldr	r0, [pc, #28]	@ (800527c <MX_TIM1_Init+0x150>)
 800525e:	f006 ff29 	bl	800c0b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8005268:	f000 fd58 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800526c:	4803      	ldr	r0, [pc, #12]	@ (800527c <MX_TIM1_Init+0x150>)
 800526e:	f000 ff4f 	bl	8006110 <HAL_TIM_MspPostInit>

}
 8005272:	bf00      	nop
 8005274:	3768      	adds	r7, #104	@ 0x68
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20004c1c 	.word	0x20004c1c
 8005280:	40010000 	.word	0x40010000

08005284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800528a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	605a      	str	r2, [r3, #4]
 8005294:	609a      	str	r2, [r3, #8]
 8005296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005298:	f107 031c 	add.w	r3, r7, #28
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	605a      	str	r2, [r3, #4]
 80052a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052a4:	463b      	mov	r3, r7
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	605a      	str	r2, [r3, #4]
 80052ac:	609a      	str	r2, [r3, #8]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	611a      	str	r2, [r3, #16]
 80052b2:	615a      	str	r2, [r3, #20]
 80052b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80052b6:	4b2e      	ldr	r3, [pc, #184]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80052bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 80052be:	4b2c      	ldr	r3, [pc, #176]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052c0:	22d7      	movs	r2, #215	@ 0xd7
 80052c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052c4:	4b2a      	ldr	r3, [pc, #168]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80052ca:	4b29      	ldr	r3, [pc, #164]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052d2:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052d8:	4b25      	ldr	r3, [pc, #148]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80052de:	4824      	ldr	r0, [pc, #144]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052e0:	f005 f988 	bl	800a5f4 <HAL_TIM_Base_Init>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80052ea:	f000 fd17 	bl	8005d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80052f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80052f8:	4619      	mov	r1, r3
 80052fa:	481d      	ldr	r0, [pc, #116]	@ (8005370 <MX_TIM2_Init+0xec>)
 80052fc:	f006 f99a 	bl	800b634 <HAL_TIM_ConfigClockSource>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8005306:	f000 fd09 	bl	8005d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800530a:	4819      	ldr	r0, [pc, #100]	@ (8005370 <MX_TIM2_Init+0xec>)
 800530c:	f005 fada 	bl	800a8c4 <HAL_TIM_PWM_Init>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8005316:	f000 fd01 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800531e:	2300      	movs	r3, #0
 8005320:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005322:	f107 031c 	add.w	r3, r7, #28
 8005326:	4619      	mov	r1, r3
 8005328:	4811      	ldr	r0, [pc, #68]	@ (8005370 <MX_TIM2_Init+0xec>)
 800532a:	f006 fe35 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005334:	f000 fcf2 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005338:	2360      	movs	r3, #96	@ 0x60
 800533a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800533c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005340:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005342:	2300      	movs	r3, #0
 8005344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800534a:	463b      	mov	r3, r7
 800534c:	2208      	movs	r2, #8
 800534e:	4619      	mov	r1, r3
 8005350:	4807      	ldr	r0, [pc, #28]	@ (8005370 <MX_TIM2_Init+0xec>)
 8005352:	f006 f85b 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d001      	beq.n	8005360 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800535c:	f000 fcde 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005360:	4803      	ldr	r0, [pc, #12]	@ (8005370 <MX_TIM2_Init+0xec>)
 8005362:	f000 fed5 	bl	8006110 <HAL_TIM_MspPostInit>

}
 8005366:	bf00      	nop
 8005368:	3738      	adds	r7, #56	@ 0x38
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20004c68 	.word	0x20004c68

08005374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08e      	sub	sp, #56	@ 0x38
 8005378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800537a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	609a      	str	r2, [r3, #8]
 8005386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005388:	f107 031c 	add.w	r3, r7, #28
 800538c:	2200      	movs	r2, #0
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	605a      	str	r2, [r3, #4]
 8005392:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005394:	463b      	mov	r3, r7
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	609a      	str	r2, [r3, #8]
 800539e:	60da      	str	r2, [r3, #12]
 80053a0:	611a      	str	r2, [r3, #16]
 80053a2:	615a      	str	r2, [r3, #20]
 80053a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053a6:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <MX_TIM3_Init+0xec>)
 80053aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 80053ac:	4b2b      	ldr	r3, [pc, #172]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053ae:	22d7      	movs	r2, #215	@ 0xd7
 80053b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053b2:	4b2a      	ldr	r3, [pc, #168]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80053b8:	4b28      	ldr	r3, [pc, #160]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80053be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053c0:	4b26      	ldr	r3, [pc, #152]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c6:	4b25      	ldr	r3, [pc, #148]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80053cc:	4823      	ldr	r0, [pc, #140]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053ce:	f005 f911 	bl	800a5f4 <HAL_TIM_Base_Init>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80053d8:	f000 fca0 	bl	8005d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80053e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80053e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80053e6:	4619      	mov	r1, r3
 80053e8:	481c      	ldr	r0, [pc, #112]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053ea:	f006 f923 	bl	800b634 <HAL_TIM_ConfigClockSource>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d001      	beq.n	80053f8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80053f4:	f000 fc92 	bl	8005d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80053f8:	4818      	ldr	r0, [pc, #96]	@ (800545c <MX_TIM3_Init+0xe8>)
 80053fa:	f005 fa63 	bl	800a8c4 <HAL_TIM_PWM_Init>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8005404:	f000 fc8a 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005410:	f107 031c 	add.w	r3, r7, #28
 8005414:	4619      	mov	r1, r3
 8005416:	4811      	ldr	r0, [pc, #68]	@ (800545c <MX_TIM3_Init+0xe8>)
 8005418:	f006 fdbe 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005422:	f000 fc7b 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005426:	2360      	movs	r3, #96	@ 0x60
 8005428:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800542a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800542e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005438:	463b      	mov	r3, r7
 800543a:	2208      	movs	r2, #8
 800543c:	4619      	mov	r1, r3
 800543e:	4807      	ldr	r0, [pc, #28]	@ (800545c <MX_TIM3_Init+0xe8>)
 8005440:	f005 ffe4 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800544a:	f000 fc67 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800544e:	4803      	ldr	r0, [pc, #12]	@ (800545c <MX_TIM3_Init+0xe8>)
 8005450:	f000 fe5e 	bl	8006110 <HAL_TIM_MspPostInit>

}
 8005454:	bf00      	nop
 8005456:	3738      	adds	r7, #56	@ 0x38
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20004cb4 	.word	0x20004cb4
 8005460:	40000400 	.word	0x40000400

08005464 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08c      	sub	sp, #48	@ 0x30
 8005468:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800546a:	f107 030c 	add.w	r3, r7, #12
 800546e:	2224      	movs	r2, #36	@ 0x24
 8005470:	2100      	movs	r1, #0
 8005472:	4618      	mov	r0, r3
 8005474:	f010 fed7 	bl	8016226 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005478:	463b      	mov	r3, r7
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	605a      	str	r2, [r3, #4]
 8005480:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005482:	4b21      	ldr	r3, [pc, #132]	@ (8005508 <MX_TIM4_Init+0xa4>)
 8005484:	4a21      	ldr	r2, [pc, #132]	@ (800550c <MX_TIM4_Init+0xa8>)
 8005486:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005488:	4b1f      	ldr	r3, [pc, #124]	@ (8005508 <MX_TIM4_Init+0xa4>)
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800548e:	4b1e      	ldr	r3, [pc, #120]	@ (8005508 <MX_TIM4_Init+0xa4>)
 8005490:	2200      	movs	r2, #0
 8005492:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800;
 8005494:	4b1c      	ldr	r3, [pc, #112]	@ (8005508 <MX_TIM4_Init+0xa4>)
 8005496:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800549a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800549c:	4b1a      	ldr	r3, [pc, #104]	@ (8005508 <MX_TIM4_Init+0xa4>)
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054a2:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <MX_TIM4_Init+0xa4>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80054a8:	2303      	movs	r3, #3
 80054aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80054b4:	2300      	movs	r3, #0
 80054b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80054b8:	230f      	movs	r3, #15
 80054ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80054bc:	2300      	movs	r3, #0
 80054be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80054c0:	2301      	movs	r3, #1
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80054c4:	2300      	movs	r3, #0
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 80054c8:	230f      	movs	r3, #15
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80054cc:	f107 030c 	add.w	r3, r7, #12
 80054d0:	4619      	mov	r1, r3
 80054d2:	480d      	ldr	r0, [pc, #52]	@ (8005508 <MX_TIM4_Init+0xa4>)
 80054d4:	f005 fd5e 	bl	800af94 <HAL_TIM_Encoder_Init>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80054de:	f000 fc1d 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054e2:	2300      	movs	r3, #0
 80054e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054ea:	463b      	mov	r3, r7
 80054ec:	4619      	mov	r1, r3
 80054ee:	4806      	ldr	r0, [pc, #24]	@ (8005508 <MX_TIM4_Init+0xa4>)
 80054f0:	f006 fd52 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80054fa:	f000 fc0f 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80054fe:	bf00      	nop
 8005500:	3730      	adds	r7, #48	@ 0x30
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20004d00 	.word	0x20004d00
 800550c:	40000800 	.word	0x40000800

08005510 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005516:	f107 031c 	add.w	r3, r7, #28
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	605a      	str	r2, [r3, #4]
 8005520:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005522:	463b      	mov	r3, r7
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	605a      	str	r2, [r3, #4]
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	60da      	str	r2, [r3, #12]
 800552e:	611a      	str	r2, [r3, #16]
 8005530:	615a      	str	r2, [r3, #20]
 8005532:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005534:	4b22      	ldr	r3, [pc, #136]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 8005536:	4a23      	ldr	r2, [pc, #140]	@ (80055c4 <MX_TIM5_Init+0xb4>)
 8005538:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 800553a:	4b21      	ldr	r3, [pc, #132]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 800553c:	22d7      	movs	r2, #215	@ 0xd7
 800553e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005540:	4b1f      	ldr	r3, [pc, #124]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 8005542:	2200      	movs	r2, #0
 8005544:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8005546:	4b1e      	ldr	r3, [pc, #120]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 8005548:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800554c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800554e:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 8005550:	2200      	movs	r2, #0
 8005552:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005554:	4b1a      	ldr	r3, [pc, #104]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800555a:	4819      	ldr	r0, [pc, #100]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 800555c:	f005 f9b2 	bl	800a8c4 <HAL_TIM_PWM_Init>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8005566:	f000 fbd9 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800556a:	2300      	movs	r3, #0
 800556c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800556e:	2300      	movs	r3, #0
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005572:	f107 031c 	add.w	r3, r7, #28
 8005576:	4619      	mov	r1, r3
 8005578:	4811      	ldr	r0, [pc, #68]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 800557a:	f006 fd0d 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8005584:	f000 fbca 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005588:	2360      	movs	r3, #96	@ 0x60
 800558a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 800558c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8005590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005592:	2300      	movs	r3, #0
 8005594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800559a:	463b      	mov	r3, r7
 800559c:	2200      	movs	r2, #0
 800559e:	4619      	mov	r1, r3
 80055a0:	4807      	ldr	r0, [pc, #28]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 80055a2:	f005 ff33 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80055ac:	f000 fbb6 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80055b0:	4803      	ldr	r0, [pc, #12]	@ (80055c0 <MX_TIM5_Init+0xb0>)
 80055b2:	f000 fdad 	bl	8006110 <HAL_TIM_MspPostInit>

}
 80055b6:	bf00      	nop
 80055b8:	3728      	adds	r7, #40	@ 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	20004d4c 	.word	0x20004d4c
 80055c4:	40000c00 	.word	0x40000c00

080055c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ce:	1d3b      	adds	r3, r7, #4
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80055d8:	4b14      	ldr	r3, [pc, #80]	@ (800562c <MX_TIM7_Init+0x64>)
 80055da:	4a15      	ldr	r2, [pc, #84]	@ (8005630 <MX_TIM7_Init+0x68>)
 80055dc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 80055de:	4b13      	ldr	r3, [pc, #76]	@ (800562c <MX_TIM7_Init+0x64>)
 80055e0:	22d7      	movs	r2, #215	@ 0xd7
 80055e2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e4:	4b11      	ldr	r3, [pc, #68]	@ (800562c <MX_TIM7_Init+0x64>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80055ea:	4b10      	ldr	r3, [pc, #64]	@ (800562c <MX_TIM7_Init+0x64>)
 80055ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80055f0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055f2:	4b0e      	ldr	r3, [pc, #56]	@ (800562c <MX_TIM7_Init+0x64>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80055f8:	480c      	ldr	r0, [pc, #48]	@ (800562c <MX_TIM7_Init+0x64>)
 80055fa:	f004 fffb 	bl	800a5f4 <HAL_TIM_Base_Init>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8005604:	f000 fb8a 	bl	8005d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005608:	2300      	movs	r3, #0
 800560a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005610:	1d3b      	adds	r3, r7, #4
 8005612:	4619      	mov	r1, r3
 8005614:	4805      	ldr	r0, [pc, #20]	@ (800562c <MX_TIM7_Init+0x64>)
 8005616:	f006 fcbf 	bl	800bf98 <HAL_TIMEx_MasterConfigSynchronization>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8005620:	f000 fb7c 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20004d98 	.word	0x20004d98
 8005630:	40001400 	.word	0x40001400

08005634 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	@ 0x30
 8005638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800563a:	f107 0320 	add.w	r3, r7, #32
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	609a      	str	r2, [r3, #8]
 8005646:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005648:	1d3b      	adds	r3, r7, #4
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	605a      	str	r2, [r3, #4]
 8005650:	609a      	str	r2, [r3, #8]
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	611a      	str	r2, [r3, #16]
 8005656:	615a      	str	r2, [r3, #20]
 8005658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800565a:	4b25      	ldr	r3, [pc, #148]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 800565c:	4a25      	ldr	r2, [pc, #148]	@ (80056f4 <MX_TIM9_Init+0xc0>)
 800565e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8005660:	4b23      	ldr	r3, [pc, #140]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 8005662:	226b      	movs	r2, #107	@ 0x6b
 8005664:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005666:	4b22      	ldr	r3, [pc, #136]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 8005668:	2200      	movs	r2, #0
 800566a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800566c:	4b20      	ldr	r3, [pc, #128]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 800566e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005672:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005674:	4b1e      	ldr	r3, [pc, #120]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 8005676:	2200      	movs	r2, #0
 8005678:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800567a:	4b1d      	ldr	r3, [pc, #116]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 800567c:	2200      	movs	r2, #0
 800567e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8005680:	481b      	ldr	r0, [pc, #108]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 8005682:	f004 ffb7 	bl	800a5f4 <HAL_TIM_Base_Init>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800568c:	f000 fb46 	bl	8005d1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005694:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005696:	f107 0320 	add.w	r3, r7, #32
 800569a:	4619      	mov	r1, r3
 800569c:	4814      	ldr	r0, [pc, #80]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 800569e:	f005 ffc9 	bl	800b634 <HAL_TIM_ConfigClockSource>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80056a8:	f000 fb38 	bl	8005d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80056ac:	4810      	ldr	r0, [pc, #64]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 80056ae:	f005 f909 	bl	800a8c4 <HAL_TIM_PWM_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80056b8:	f000 fb30 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056bc:	2360      	movs	r3, #96	@ 0x60
 80056be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80056c0:	230a      	movs	r3, #10
 80056c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056cc:	1d3b      	adds	r3, r7, #4
 80056ce:	2200      	movs	r2, #0
 80056d0:	4619      	mov	r1, r3
 80056d2:	4807      	ldr	r0, [pc, #28]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 80056d4:	f005 fe9a 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80056de:	f000 fb1d 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80056e2:	4803      	ldr	r0, [pc, #12]	@ (80056f0 <MX_TIM9_Init+0xbc>)
 80056e4:	f000 fd14 	bl	8006110 <HAL_TIM_MspPostInit>

}
 80056e8:	bf00      	nop
 80056ea:	3730      	adds	r7, #48	@ 0x30
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20004de4 	.word	0x20004de4
 80056f4:	40014000 	.word	0x40014000

080056f8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b088      	sub	sp, #32
 80056fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	609a      	str	r2, [r3, #8]
 8005708:	60da      	str	r2, [r3, #12]
 800570a:	611a      	str	r2, [r3, #16]
 800570c:	615a      	str	r2, [r3, #20]
 800570e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8005710:	4b1e      	ldr	r3, [pc, #120]	@ (800578c <MX_TIM14_Init+0x94>)
 8005712:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <MX_TIM14_Init+0x98>)
 8005714:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8005716:	4b1d      	ldr	r3, [pc, #116]	@ (800578c <MX_TIM14_Init+0x94>)
 8005718:	226b      	movs	r2, #107	@ 0x6b
 800571a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800571c:	4b1b      	ldr	r3, [pc, #108]	@ (800578c <MX_TIM14_Init+0x94>)
 800571e:	2200      	movs	r2, #0
 8005720:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 8005722:	4b1a      	ldr	r3, [pc, #104]	@ (800578c <MX_TIM14_Init+0x94>)
 8005724:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8005728:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800572a:	4b18      	ldr	r3, [pc, #96]	@ (800578c <MX_TIM14_Init+0x94>)
 800572c:	2200      	movs	r2, #0
 800572e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005730:	4b16      	ldr	r3, [pc, #88]	@ (800578c <MX_TIM14_Init+0x94>)
 8005732:	2200      	movs	r2, #0
 8005734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8005736:	4815      	ldr	r0, [pc, #84]	@ (800578c <MX_TIM14_Init+0x94>)
 8005738:	f004 ff5c 	bl	800a5f4 <HAL_TIM_Base_Init>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8005742:	f000 faeb 	bl	8005d1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8005746:	4811      	ldr	r0, [pc, #68]	@ (800578c <MX_TIM14_Init+0x94>)
 8005748:	f005 f8bc 	bl	800a8c4 <HAL_TIM_PWM_Init>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8005752:	f000 fae3 	bl	8005d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005756:	2360      	movs	r3, #96	@ 0x60
 8005758:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800575a:	230a      	movs	r3, #10
 800575c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800575e:	2300      	movs	r3, #0
 8005760:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005766:	1d3b      	adds	r3, r7, #4
 8005768:	2200      	movs	r2, #0
 800576a:	4619      	mov	r1, r3
 800576c:	4807      	ldr	r0, [pc, #28]	@ (800578c <MX_TIM14_Init+0x94>)
 800576e:	f005 fe4d 	bl	800b40c <HAL_TIM_PWM_ConfigChannel>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8005778:	f000 fad0 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800577c:	4803      	ldr	r0, [pc, #12]	@ (800578c <MX_TIM14_Init+0x94>)
 800577e:	f000 fcc7 	bl	8006110 <HAL_TIM_MspPostInit>

}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop
 800578c:	20004e30 	.word	0x20004e30
 8005790:	40002000 	.word	0x40002000

08005794 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005798:	4b14      	ldr	r3, [pc, #80]	@ (80057ec <MX_UART4_Init+0x58>)
 800579a:	4a15      	ldr	r2, [pc, #84]	@ (80057f0 <MX_UART4_Init+0x5c>)
 800579c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800579e:	4b13      	ldr	r3, [pc, #76]	@ (80057ec <MX_UART4_Init+0x58>)
 80057a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80057a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80057a6:	4b11      	ldr	r3, [pc, #68]	@ (80057ec <MX_UART4_Init+0x58>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80057ac:	4b0f      	ldr	r3, [pc, #60]	@ (80057ec <MX_UART4_Init+0x58>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80057b2:	4b0e      	ldr	r3, [pc, #56]	@ (80057ec <MX_UART4_Init+0x58>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80057b8:	4b0c      	ldr	r3, [pc, #48]	@ (80057ec <MX_UART4_Init+0x58>)
 80057ba:	220c      	movs	r2, #12
 80057bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057be:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <MX_UART4_Init+0x58>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c4:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <MX_UART4_Init+0x58>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80057ca:	4b08      	ldr	r3, [pc, #32]	@ (80057ec <MX_UART4_Init+0x58>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80057d0:	4b06      	ldr	r3, [pc, #24]	@ (80057ec <MX_UART4_Init+0x58>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80057d6:	4805      	ldr	r0, [pc, #20]	@ (80057ec <MX_UART4_Init+0x58>)
 80057d8:	f006 fd08 	bl	800c1ec <HAL_UART_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80057e2:	f000 fa9b 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80057e6:	bf00      	nop
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20004e7c 	.word	0x20004e7c
 80057f0:	40004c00 	.word	0x40004c00

080057f4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80057f8:	4b14      	ldr	r3, [pc, #80]	@ (800584c <MX_UART5_Init+0x58>)
 80057fa:	4a15      	ldr	r2, [pc, #84]	@ (8005850 <MX_UART5_Init+0x5c>)
 80057fc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80057fe:	4b13      	ldr	r3, [pc, #76]	@ (800584c <MX_UART5_Init+0x58>)
 8005800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005804:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005806:	4b11      	ldr	r3, [pc, #68]	@ (800584c <MX_UART5_Init+0x58>)
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800580c:	4b0f      	ldr	r3, [pc, #60]	@ (800584c <MX_UART5_Init+0x58>)
 800580e:	2200      	movs	r2, #0
 8005810:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005812:	4b0e      	ldr	r3, [pc, #56]	@ (800584c <MX_UART5_Init+0x58>)
 8005814:	2200      	movs	r2, #0
 8005816:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005818:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <MX_UART5_Init+0x58>)
 800581a:	220c      	movs	r2, #12
 800581c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800581e:	4b0b      	ldr	r3, [pc, #44]	@ (800584c <MX_UART5_Init+0x58>)
 8005820:	2200      	movs	r2, #0
 8005822:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005824:	4b09      	ldr	r3, [pc, #36]	@ (800584c <MX_UART5_Init+0x58>)
 8005826:	2200      	movs	r2, #0
 8005828:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800582a:	4b08      	ldr	r3, [pc, #32]	@ (800584c <MX_UART5_Init+0x58>)
 800582c:	2200      	movs	r2, #0
 800582e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005830:	4b06      	ldr	r3, [pc, #24]	@ (800584c <MX_UART5_Init+0x58>)
 8005832:	2200      	movs	r2, #0
 8005834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005836:	4805      	ldr	r0, [pc, #20]	@ (800584c <MX_UART5_Init+0x58>)
 8005838:	f006 fcd8 	bl	800c1ec <HAL_UART_Init>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8005842:	f000 fa6b 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20004f04 	.word	0x20004f04
 8005850:	40005000 	.word	0x40005000

08005854 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005858:	4b14      	ldr	r3, [pc, #80]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 800585a:	4a15      	ldr	r2, [pc, #84]	@ (80058b0 <MX_USART2_UART_Init+0x5c>)
 800585c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800585e:	4b13      	ldr	r3, [pc, #76]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005864:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005866:	4b11      	ldr	r3, [pc, #68]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005868:	2200      	movs	r2, #0
 800586a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005872:	4b0e      	ldr	r3, [pc, #56]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005878:	4b0c      	ldr	r3, [pc, #48]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 800587a:	220c      	movs	r2, #12
 800587c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800587e:	4b0b      	ldr	r3, [pc, #44]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005880:	2200      	movs	r2, #0
 8005882:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005884:	4b09      	ldr	r3, [pc, #36]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005886:	2200      	movs	r2, #0
 8005888:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800588a:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 800588c:	2200      	movs	r2, #0
 800588e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005890:	4b06      	ldr	r3, [pc, #24]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005892:	2200      	movs	r2, #0
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005896:	4805      	ldr	r0, [pc, #20]	@ (80058ac <MX_USART2_UART_Init+0x58>)
 8005898:	f006 fca8 	bl	800c1ec <HAL_UART_Init>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80058a2:	f000 fa3b 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80058a6:	bf00      	nop
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20004f8c 	.word	0x20004f8c
 80058b0:	40004400 	.word	0x40004400

080058b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058ba:	4a15      	ldr	r2, [pc, #84]	@ (8005910 <MX_USART3_UART_Init+0x5c>)
 80058bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 80058be:	4b13      	ldr	r3, [pc, #76]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058c0:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 80058c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80058c6:	4b11      	ldr	r3, [pc, #68]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80058cc:	4b0f      	ldr	r3, [pc, #60]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80058d2:	4b0e      	ldr	r3, [pc, #56]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80058d8:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058da:	220c      	movs	r2, #12
 80058dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058de:	4b0b      	ldr	r3, [pc, #44]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80058e4:	4b09      	ldr	r3, [pc, #36]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058ea:	4b08      	ldr	r3, [pc, #32]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058f0:	4b06      	ldr	r3, [pc, #24]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80058f6:	4805      	ldr	r0, [pc, #20]	@ (800590c <MX_USART3_UART_Init+0x58>)
 80058f8:	f006 fc78 	bl	800c1ec <HAL_UART_Init>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005902:	f000 fa0b 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005906:	bf00      	nop
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20005014 	.word	0x20005014
 8005910:	40004800 	.word	0x40004800

08005914 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005918:	4b14      	ldr	r3, [pc, #80]	@ (800596c <MX_USART6_UART_Init+0x58>)
 800591a:	4a15      	ldr	r2, [pc, #84]	@ (8005970 <MX_USART6_UART_Init+0x5c>)
 800591c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005920:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005924:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005926:	4b11      	ldr	r3, [pc, #68]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005928:	2200      	movs	r2, #0
 800592a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800592c:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <MX_USART6_UART_Init+0x58>)
 800592e:	2200      	movs	r2, #0
 8005930:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005932:	4b0e      	ldr	r3, [pc, #56]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005934:	2200      	movs	r2, #0
 8005936:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005938:	4b0c      	ldr	r3, [pc, #48]	@ (800596c <MX_USART6_UART_Init+0x58>)
 800593a:	220c      	movs	r2, #12
 800593c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800593e:	4b0b      	ldr	r3, [pc, #44]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005940:	2200      	movs	r2, #0
 8005942:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005944:	4b09      	ldr	r3, [pc, #36]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005946:	2200      	movs	r2, #0
 8005948:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800594a:	4b08      	ldr	r3, [pc, #32]	@ (800596c <MX_USART6_UART_Init+0x58>)
 800594c:	2200      	movs	r2, #0
 800594e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005952:	2200      	movs	r2, #0
 8005954:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005956:	4805      	ldr	r0, [pc, #20]	@ (800596c <MX_USART6_UART_Init+0x58>)
 8005958:	f006 fc48 	bl	800c1ec <HAL_UART_Init>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8005962:	f000 f9db 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005966:	bf00      	nop
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	2000509c 	.word	0x2000509c
 8005970:	40011400 	.word	0x40011400

08005974 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800597a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800597e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8005980:	4b12      	ldr	r3, [pc, #72]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005982:	2206      	movs	r2, #6
 8005984:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005986:	4b11      	ldr	r3, [pc, #68]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005988:	2202      	movs	r2, #2
 800598a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800598c:	4b0f      	ldr	r3, [pc, #60]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800598e:	2200      	movs	r2, #0
 8005990:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005992:	4b0e      	ldr	r3, [pc, #56]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8005994:	2202      	movs	r2, #2
 8005996:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8005998:	4b0c      	ldr	r3, [pc, #48]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800599a:	2201      	movs	r2, #1
 800599c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80059a4:	4b09      	ldr	r3, [pc, #36]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80059aa:	4b08      	ldr	r3, [pc, #32]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80059b0:	4b06      	ldr	r3, [pc, #24]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80059b6:	4805      	ldr	r0, [pc, #20]	@ (80059cc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80059b8:	f002 fddb 	bl	8008572 <HAL_PCD_Init>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80059c2:	f000 f9ab 	bl	8005d1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80059c6:	bf00      	nop
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20005364 	.word	0x20005364

080059d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80059d6:	4b26      	ldr	r3, [pc, #152]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	4a25      	ldr	r2, [pc, #148]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80059e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80059e2:	4b23      	ldr	r3, [pc, #140]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059ea:	607b      	str	r3, [r7, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80059ee:	4b20      	ldr	r3, [pc, #128]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80059fa:	4b1d      	ldr	r3, [pc, #116]	@ (8005a70 <MX_DMA_Init+0xa0>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 10, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	210a      	movs	r1, #10
 8005a0a:	200b      	movs	r0, #11
 8005a0c:	f001 fb22 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005a10:	200b      	movs	r0, #11
 8005a12:	f001 fb3b 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8005a16:	2200      	movs	r2, #0
 8005a18:	210a      	movs	r1, #10
 8005a1a:	200c      	movs	r0, #12
 8005a1c:	f001 fb1a 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8005a20:	200c      	movs	r0, #12
 8005a22:	f001 fb33 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 10, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	210a      	movs	r1, #10
 8005a2a:	200d      	movs	r0, #13
 8005a2c:	f001 fb12 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8005a30:	200d      	movs	r0, #13
 8005a32:	f001 fb2b 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 10, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	210a      	movs	r1, #10
 8005a3a:	200e      	movs	r0, #14
 8005a3c:	f001 fb0a 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8005a40:	200e      	movs	r0, #14
 8005a42:	f001 fb23 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 10, 0);
 8005a46:	2200      	movs	r2, #0
 8005a48:	210a      	movs	r1, #10
 8005a4a:	2010      	movs	r0, #16
 8005a4c:	f001 fb02 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005a50:	2010      	movs	r0, #16
 8005a52:	f001 fb1b 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8005a56:	2200      	movs	r2, #0
 8005a58:	2105      	movs	r1, #5
 8005a5a:	2039      	movs	r0, #57	@ 0x39
 8005a5c:	f001 fafa 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8005a60:	2039      	movs	r0, #57	@ 0x39
 8005a62:	f001 fb13 	bl	800708c <HAL_NVIC_EnableIRQ>

}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40023800 	.word	0x40023800

08005a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08e      	sub	sp, #56	@ 0x38
 8005a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	60da      	str	r2, [r3, #12]
 8005a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a8a:	4b94      	ldr	r3, [pc, #592]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	4a93      	ldr	r2, [pc, #588]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005a90:	f043 0310 	orr.w	r3, r3, #16
 8005a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005a96:	4b91      	ldr	r3, [pc, #580]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	623b      	str	r3, [r7, #32]
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005aa2:	4b8e      	ldr	r3, [pc, #568]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	4a8d      	ldr	r2, [pc, #564]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005aa8:	f043 0304 	orr.w	r3, r3, #4
 8005aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aae:	4b8b      	ldr	r3, [pc, #556]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	61fb      	str	r3, [r7, #28]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005aba:	4b88      	ldr	r3, [pc, #544]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abe:	4a87      	ldr	r2, [pc, #540]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ac0:	f043 0320 	orr.w	r3, r3, #32
 8005ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ac6:	4b85      	ldr	r3, [pc, #532]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ad2:	4b82      	ldr	r3, [pc, #520]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	4a81      	ldr	r2, [pc, #516]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ade:	4b7f      	ldr	r3, [pc, #508]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aea:	4b7c      	ldr	r3, [pc, #496]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aee:	4a7b      	ldr	r2, [pc, #492]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005af0:	f043 0301 	orr.w	r3, r3, #1
 8005af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005af6:	4b79      	ldr	r3, [pc, #484]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b02:	4b76      	ldr	r3, [pc, #472]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b06:	4a75      	ldr	r2, [pc, #468]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b08:	f043 0302 	orr.w	r3, r3, #2
 8005b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b0e:	4b73      	ldr	r3, [pc, #460]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005b1a:	4b70      	ldr	r3, [pc, #448]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b26:	4b6d      	ldr	r3, [pc, #436]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	60bb      	str	r3, [r7, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b32:	4b6a      	ldr	r3, [pc, #424]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b36:	4a69      	ldr	r2, [pc, #420]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b38:	f043 0308 	orr.w	r3, r3, #8
 8005b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b3e:	4b67      	ldr	r3, [pc, #412]	@ (8005cdc <MX_GPIO_Init+0x268>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f249 5185 	movw	r1, #38277	@ 0x9585
 8005b50:	4863      	ldr	r0, [pc, #396]	@ (8005ce0 <MX_GPIO_Init+0x26c>)
 8005b52:	f002 f877 	bl	8007c44 <HAL_GPIO_WritePin>
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENN1_Pin|SPI_cs_Pin, GPIO_PIN_RESET);
 8005b56:	2200      	movs	r2, #0
 8005b58:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005b5c:	4861      	ldr	r0, [pc, #388]	@ (8005ce4 <MX_GPIO_Init+0x270>)
 8005b5e:	f002 f871 	bl	8007c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8005b62:	2200      	movs	r2, #0
 8005b64:	2140      	movs	r1, #64	@ 0x40
 8005b66:	4860      	ldr	r0, [pc, #384]	@ (8005ce8 <MX_GPIO_Init+0x274>)
 8005b68:	f002 f86c 	bl	8007c44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIR3_Pin ENN3_Pin ENN4_Pin ENN2_Pin
                           DIR2_Pin DIR1_Pin DIR4_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|ENN3_Pin|ENN4_Pin|ENN2_Pin
 8005b6c:	f249 5385 	movw	r3, #38277	@ 0x9585
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
                          |DIR2_Pin|DIR1_Pin|DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b72:	2301      	movs	r3, #1
 8005b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b82:	4619      	mov	r1, r3
 8005b84:	4856      	ldr	r0, [pc, #344]	@ (8005ce0 <MX_GPIO_Init+0x26c>)
 8005b86:	f001 fe99 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8005b8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005b90:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8005b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	4852      	ldr	r0, [pc, #328]	@ (8005cec <MX_GPIO_Init+0x278>)
 8005ba2:	f001 fe8b 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnDown_Pin BtnUp_Pin EndStop1_Pin EndStop4_Pin
                           BtnDownF15_Pin */
  GPIO_InitStruct.Pin = BtnDown_Pin|BtnUp_Pin|EndStop1_Pin|EndStop4_Pin
 8005ba6:	f24e 0303 	movw	r3, #57347	@ 0xe003
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BtnDownF15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bac:	2300      	movs	r3, #0
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bb8:	4619      	mov	r1, r3
 8005bba:	484d      	ldr	r0, [pc, #308]	@ (8005cf0 <MX_GPIO_Init+0x27c>)
 8005bbc:	f001 fe7e 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DIAG4_Pin */
  GPIO_InitStruct.Pin = DIAG4_Pin;
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DIAG4_GPIO_Port, &GPIO_InitStruct);
 8005bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bd0:	4619      	mov	r1, r3
 8005bd2:	4847      	ldr	r0, [pc, #284]	@ (8005cf0 <MX_GPIO_Init+0x27c>)
 8005bd4:	f001 fe72 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : DIAG2_Pin DIAG3_Pin */
  GPIO_InitStruct.Pin = DIAG2_Pin|DIAG3_Pin;
 8005bd8:	2344      	movs	r3, #68	@ 0x44
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be0:	2300      	movs	r3, #0
 8005be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005be8:	4619      	mov	r1, r3
 8005bea:	483e      	ldr	r0, [pc, #248]	@ (8005ce4 <MX_GPIO_Init+0x270>)
 8005bec:	f001 fe66 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnLef_Pin BtnLeft_Pin */
  GPIO_InitStruct.Pin = BtnLef_Pin|BtnLeft_Pin;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c00:	4619      	mov	r1, r3
 8005c02:	4839      	ldr	r0, [pc, #228]	@ (8005ce8 <MX_GPIO_Init+0x274>)
 8005c04:	f001 fe5a 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EndStop2_Pin EndStop3_Pin */
  GPIO_InitStruct.Pin = EndStop2_Pin|EndStop3_Pin;
 8005c08:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c12:	2301      	movs	r3, #1
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4830      	ldr	r0, [pc, #192]	@ (8005ce0 <MX_GPIO_Init+0x26c>)
 8005c1e:	f001 fe4d 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Probe_Pin */
  GPIO_InitStruct.Pin = Probe_Pin;
 8005c22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Probe_GPIO_Port, &GPIO_InitStruct);
 8005c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c34:	4619      	mov	r1, r3
 8005c36:	482a      	ldr	r0, [pc, #168]	@ (8005ce0 <MX_GPIO_Init+0x26c>)
 8005c38:	f001 fe40 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ENN1_Pin SPI_cs_Pin */
  GPIO_InitStruct.Pin = ENN1_Pin|SPI_cs_Pin;
 8005c3c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c42:	2301      	movs	r3, #1
 8005c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c52:	4619      	mov	r1, r3
 8005c54:	4823      	ldr	r0, [pc, #140]	@ (8005ce4 <MX_GPIO_Init+0x270>)
 8005c56:	f001 fe31 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pin : EncoderBtn_Pin */
  GPIO_InitStruct.Pin = EncoderBtn_Pin;
 8005c5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c60:	2300      	movs	r3, #0
 8005c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(EncoderBtn_GPIO_Port, &GPIO_InitStruct);
 8005c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4821      	ldr	r0, [pc, #132]	@ (8005cf4 <MX_GPIO_Init+0x280>)
 8005c70:	f001 fe24 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8005c74:	2340      	movs	r3, #64	@ 0x40
 8005c76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c80:	2300      	movs	r3, #0
 8005c82:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8005c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c88:	4619      	mov	r1, r3
 8005c8a:	4817      	ldr	r0, [pc, #92]	@ (8005ce8 <MX_GPIO_Init+0x274>)
 8005c8c:	f001 fe16 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OverCurrent_Pin DIAG1_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|DIAG1_Pin;
 8005c90:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c96:	2300      	movs	r3, #0
 8005c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4810      	ldr	r0, [pc, #64]	@ (8005ce8 <MX_GPIO_Init+0x274>)
 8005ca6:	f001 fe09 	bl	80078bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BtnCtr_Pin BtnRight_Pin */
  GPIO_InitStruct.Pin = BtnCtr_Pin|BtnRight_Pin;
 8005caa:	2303      	movs	r3, #3
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cba:	4619      	mov	r1, r3
 8005cbc:	480d      	ldr	r0, [pc, #52]	@ (8005cf4 <MX_GPIO_Init+0x280>)
 8005cbe:	f001 fdfd 	bl	80078bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2105      	movs	r1, #5
 8005cc6:	2028      	movs	r0, #40	@ 0x28
 8005cc8:	f001 f9c4 	bl	8007054 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ccc:	2028      	movs	r0, #40	@ 0x28
 8005cce:	f001 f9dd 	bl	800708c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005cd2:	bf00      	nop
 8005cd4:	3738      	adds	r7, #56	@ 0x38
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	40023800 	.word	0x40023800
 8005ce0:	40021000 	.word	0x40021000
 8005ce4:	40020400 	.word	0x40020400
 8005ce8:	40021800 	.word	0x40021800
 8005cec:	40020800 	.word	0x40020800
 8005cf0:	40021400 	.word	0x40021400
 8005cf4:	40020c00 	.word	0x40020c00

08005cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a04      	ldr	r2, [pc, #16]	@ (8005d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d101      	bne.n	8005d0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005d0a:	f001 f8a7 	bl	8006e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	40001000 	.word	0x40001000

08005d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d20:	b672      	cpsid	i
}
 8005d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <Error_Handler+0x8>

08005d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	4a10      	ldr	r2, [pc, #64]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d42:	607b      	str	r3, [r7, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <HAL_MspInit+0x4c>)
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d5e:	2200      	movs	r2, #0
 8005d60:	210f      	movs	r1, #15
 8005d62:	f06f 0001 	mvn.w	r0, #1
 8005d66:	f001 f975 	bl	8007054 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40023800 	.word	0x40023800

08005d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b0aa      	sub	sp, #168	@ 0xa8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d80:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005d84:	2200      	movs	r2, #0
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	605a      	str	r2, [r3, #4]
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	60da      	str	r2, [r3, #12]
 8005d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005d90:	f107 0310 	add.w	r3, r7, #16
 8005d94:	2284      	movs	r2, #132	@ 0x84
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f010 fa44 	bl	8016226 <memset>
  if(hi2c->Instance==I2C1)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a22      	ldr	r2, [pc, #136]	@ (8005e2c <HAL_I2C_MspInit+0xb4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d13c      	bne.n	8005e22 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005da8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005dac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005dae:	2300      	movs	r3, #0
 8005db0:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005db2:	f107 0310 	add.w	r3, r7, #16
 8005db6:	4618      	mov	r0, r3
 8005db8:	f003 fa62 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8005dc2:	f7ff ffab 	bl	8005d1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dca:	4a19      	ldr	r2, [pc, #100]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005dcc:	f043 0302 	orr.w	r3, r3, #2
 8005dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dd2:	4b17      	ldr	r3, [pc, #92]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005dde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005de2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005de6:	2312      	movs	r3, #18
 8005de8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df2:	2303      	movs	r3, #3
 8005df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005df8:	2304      	movs	r3, #4
 8005dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005dfe:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8005e02:	4619      	mov	r1, r3
 8005e04:	480b      	ldr	r0, [pc, #44]	@ (8005e34 <HAL_I2C_MspInit+0xbc>)
 8005e06:	f001 fd59 	bl	80078bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005e0a:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e0e:	4a08      	ldr	r2, [pc, #32]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005e10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e16:	4b06      	ldr	r3, [pc, #24]	@ (8005e30 <HAL_I2C_MspInit+0xb8>)
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8005e22:	bf00      	nop
 8005e24:	37a8      	adds	r7, #168	@ 0xa8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40005400 	.word	0x40005400
 8005e30:	40023800 	.word	0x40023800
 8005e34:	40020400 	.word	0x40020400

08005e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	@ 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e40:	f107 0314 	add.w	r3, r7, #20
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	609a      	str	r2, [r3, #8]
 8005e4c:	60da      	str	r2, [r3, #12]
 8005e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a25      	ldr	r2, [pc, #148]	@ (8005eec <HAL_SPI_MspInit+0xb4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d144      	bne.n	8005ee4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005e5a:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5e:	4a24      	ldr	r2, [pc, #144]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e66:	4b22      	ldr	r3, [pc, #136]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e72:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e76:	4a1e      	ldr	r2, [pc, #120]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e78:	f043 0304 	orr.w	r3, r3, #4
 8005e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8a:	4b19      	ldr	r3, [pc, #100]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e90:	f043 0302 	orr.w	r3, r3, #2
 8005e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8005e96:	4b16      	ldr	r3, [pc, #88]	@ (8005ef0 <HAL_SPI_MspInit+0xb8>)
 8005e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	60bb      	str	r3, [r7, #8]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ea2:	2304      	movs	r3, #4
 8005ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005eb2:	2305      	movs	r3, #5
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eb6:	f107 0314 	add.w	r3, r7, #20
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480d      	ldr	r0, [pc, #52]	@ (8005ef4 <HAL_SPI_MspInit+0xbc>)
 8005ebe:	f001 fcfd 	bl	80078bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005ec2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8005ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005ed4:	2305      	movs	r3, #5
 8005ed6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ed8:	f107 0314 	add.w	r3, r7, #20
 8005edc:	4619      	mov	r1, r3
 8005ede:	4806      	ldr	r0, [pc, #24]	@ (8005ef8 <HAL_SPI_MspInit+0xc0>)
 8005ee0:	f001 fcec 	bl	80078bc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8005ee4:	bf00      	nop
 8005ee6:	3728      	adds	r7, #40	@ 0x28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	40003800 	.word	0x40003800
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40020800 	.word	0x40020800
 8005ef8:	40020400 	.word	0x40020400

08005efc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b088      	sub	sp, #32
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a42      	ldr	r2, [pc, #264]	@ (8006014 <HAL_TIM_Base_MspInit+0x118>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d114      	bne.n	8005f38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005f0e:	4b42      	ldr	r3, [pc, #264]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	4a41      	ldr	r2, [pc, #260]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f14:	f043 0301 	orr.w	r3, r3, #1
 8005f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005f26:	2200      	movs	r2, #0
 8005f28:	2105      	movs	r1, #5
 8005f2a:	201b      	movs	r0, #27
 8005f2c:	f001 f892 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005f30:	201b      	movs	r0, #27
 8005f32:	f001 f8ab 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8005f36:	e068      	b.n	800600a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f40:	d114      	bne.n	8005f6c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005f42:	4b35      	ldr	r3, [pc, #212]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	4a34      	ldr	r2, [pc, #208]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f48:	f043 0301 	orr.w	r3, r3, #1
 8005f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f4e:	4b32      	ldr	r3, [pc, #200]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	61bb      	str	r3, [r7, #24]
 8005f58:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2105      	movs	r1, #5
 8005f5e:	201c      	movs	r0, #28
 8005f60:	f001 f878 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005f64:	201c      	movs	r0, #28
 8005f66:	f001 f891 	bl	800708c <HAL_NVIC_EnableIRQ>
}
 8005f6a:	e04e      	b.n	800600a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a2a      	ldr	r2, [pc, #168]	@ (800601c <HAL_TIM_Base_MspInit+0x120>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d114      	bne.n	8005fa0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005f76:	4b28      	ldr	r3, [pc, #160]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7a:	4a27      	ldr	r2, [pc, #156]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f82:	4b25      	ldr	r3, [pc, #148]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f86:	f003 0302 	and.w	r3, r3, #2
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2105      	movs	r1, #5
 8005f92:	201d      	movs	r0, #29
 8005f94:	f001 f85e 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005f98:	201d      	movs	r0, #29
 8005f9a:	f001 f877 	bl	800708c <HAL_NVIC_EnableIRQ>
}
 8005f9e:	e034      	b.n	800600a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM7)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8006020 <HAL_TIM_Base_MspInit+0x124>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005faa:	4b1b      	ldr	r3, [pc, #108]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	4a1a      	ldr	r2, [pc, #104]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fb0:	f043 0320 	orr.w	r3, r3, #32
 8005fb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fb6:	4b18      	ldr	r3, [pc, #96]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	613b      	str	r3, [r7, #16]
 8005fc0:	693b      	ldr	r3, [r7, #16]
}
 8005fc2:	e022      	b.n	800600a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM9)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a16      	ldr	r2, [pc, #88]	@ (8006024 <HAL_TIM_Base_MspInit+0x128>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10c      	bne.n	8005fe8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8005fce:	4b12      	ldr	r3, [pc, #72]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd2:	4a11      	ldr	r2, [pc, #68]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fda:	4b0f      	ldr	r3, [pc, #60]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
}
 8005fe6:	e010      	b.n	800600a <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM14)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0e      	ldr	r2, [pc, #56]	@ (8006028 <HAL_TIM_Base_MspInit+0x12c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10b      	bne.n	800600a <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005ff2:	4b09      	ldr	r3, [pc, #36]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8005ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ffe:	4b06      	ldr	r3, [pc, #24]	@ (8006018 <HAL_TIM_Base_MspInit+0x11c>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
}
 800600a:	bf00      	nop
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	40010000 	.word	0x40010000
 8006018:	40023800 	.word	0x40023800
 800601c:	40000400 	.word	0x40000400
 8006020:	40001400 	.word	0x40001400
 8006024:	40014000 	.word	0x40014000
 8006028:	40002000 	.word	0x40002000

0800602c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006034:	f107 0314 	add.w	r3, r7, #20
 8006038:	2200      	movs	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	60da      	str	r2, [r3, #12]
 8006042:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1b      	ldr	r2, [pc, #108]	@ (80060b8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d130      	bne.n	80060b0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800604e:	4b1b      	ldr	r3, [pc, #108]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	4a1a      	ldr	r2, [pc, #104]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 8006054:	f043 0304 	orr.w	r3, r3, #4
 8006058:	6413      	str	r3, [r2, #64]	@ 0x40
 800605a:	4b18      	ldr	r3, [pc, #96]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f003 0304 	and.w	r3, r3, #4
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006066:	4b15      	ldr	r3, [pc, #84]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	4a14      	ldr	r2, [pc, #80]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 800606c:	f043 0308 	orr.w	r3, r3, #8
 8006070:	6313      	str	r3, [r2, #48]	@ 0x30
 8006072:	4b12      	ldr	r3, [pc, #72]	@ (80060bc <HAL_TIM_Encoder_MspInit+0x90>)
 8006074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 800607e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006084:	2302      	movs	r3, #2
 8006086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800608c:	2300      	movs	r3, #0
 800608e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006090:	2302      	movs	r3, #2
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006094:	f107 0314 	add.w	r3, r7, #20
 8006098:	4619      	mov	r1, r3
 800609a:	4809      	ldr	r0, [pc, #36]	@ (80060c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800609c:	f001 fc0e 	bl	80078bc <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80060a0:	2200      	movs	r2, #0
 80060a2:	2105      	movs	r1, #5
 80060a4:	201e      	movs	r0, #30
 80060a6:	f000 ffd5 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80060aa:	201e      	movs	r0, #30
 80060ac:	f000 ffee 	bl	800708c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80060b0:	bf00      	nop
 80060b2:	3728      	adds	r7, #40	@ 0x28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40020c00 	.word	0x40020c00

080060c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006108 <HAL_TIM_PWM_MspInit+0x44>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d113      	bne.n	80060fe <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <HAL_TIM_PWM_MspInit+0x48>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	4a0c      	ldr	r2, [pc, #48]	@ (800610c <HAL_TIM_PWM_MspInit+0x48>)
 80060dc:	f043 0308 	orr.w	r3, r3, #8
 80060e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80060e2:	4b0a      	ldr	r3, [pc, #40]	@ (800610c <HAL_TIM_PWM_MspInit+0x48>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80060ee:	2200      	movs	r2, #0
 80060f0:	2105      	movs	r1, #5
 80060f2:	2032      	movs	r0, #50	@ 0x32
 80060f4:	f000 ffae 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80060f8:	2032      	movs	r0, #50	@ 0x32
 80060fa:	f000 ffc7 	bl	800708c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40023800 	.word	0x40023800

08006110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b08e      	sub	sp, #56	@ 0x38
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006118:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	605a      	str	r2, [r3, #4]
 8006122:	609a      	str	r2, [r3, #8]
 8006124:	60da      	str	r2, [r3, #12]
 8006126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a67      	ldr	r2, [pc, #412]	@ (80062cc <HAL_TIM_MspPostInit+0x1bc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d11d      	bne.n	800616e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006132:	4b67      	ldr	r3, [pc, #412]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	4a66      	ldr	r2, [pc, #408]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006138:	f043 0310 	orr.w	r3, r3, #16
 800613c:	6313      	str	r3, [r2, #48]	@ 0x30
 800613e:	4b64      	ldr	r3, [pc, #400]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	623b      	str	r3, [r7, #32]
 8006148:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = STEP2_Pin;
 800614a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006150:	2302      	movs	r3, #2
 8006152:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006158:	2300      	movs	r3, #0
 800615a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800615c:	2301      	movs	r3, #1
 800615e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8006160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006164:	4619      	mov	r1, r3
 8006166:	485b      	ldr	r0, [pc, #364]	@ (80062d4 <HAL_TIM_MspPostInit+0x1c4>)
 8006168:	f001 fba8 	bl	80078bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800616c:	e0a9      	b.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM2)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006176:	d11d      	bne.n	80061b4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006178:	4b55      	ldr	r3, [pc, #340]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	4a54      	ldr	r2, [pc, #336]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 800617e:	f043 0302 	orr.w	r3, r3, #2
 8006182:	6313      	str	r3, [r2, #48]	@ 0x30
 8006184:	4b52      	ldr	r3, [pc, #328]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	61fb      	str	r3, [r7, #28]
 800618e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006190:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006194:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006196:	2302      	movs	r3, #2
 8006198:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619a:	2300      	movs	r3, #0
 800619c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800619e:	2300      	movs	r3, #0
 80061a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80061a2:	2301      	movs	r3, #1
 80061a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80061a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061aa:	4619      	mov	r1, r3
 80061ac:	484a      	ldr	r0, [pc, #296]	@ (80062d8 <HAL_TIM_MspPostInit+0x1c8>)
 80061ae:	f001 fb85 	bl	80078bc <HAL_GPIO_Init>
}
 80061b2:	e086      	b.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a48      	ldr	r2, [pc, #288]	@ (80062dc <HAL_TIM_MspPostInit+0x1cc>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d11c      	bne.n	80061f8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061be:	4b44      	ldr	r3, [pc, #272]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 80061c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061c2:	4a43      	ldr	r2, [pc, #268]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 80061c4:	f043 0302 	orr.w	r3, r3, #2
 80061c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80061ca:	4b41      	ldr	r3, [pc, #260]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 80061cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	61bb      	str	r3, [r7, #24]
 80061d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP4_Pin;
 80061d6:	2301      	movs	r3, #1
 80061d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061da:	2302      	movs	r3, #2
 80061dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061de:	2300      	movs	r3, #0
 80061e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061e2:	2300      	movs	r3, #0
 80061e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80061e6:	2302      	movs	r3, #2
 80061e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 80061ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061ee:	4619      	mov	r1, r3
 80061f0:	4839      	ldr	r0, [pc, #228]	@ (80062d8 <HAL_TIM_MspPostInit+0x1c8>)
 80061f2:	f001 fb63 	bl	80078bc <HAL_GPIO_Init>
}
 80061f6:	e064      	b.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM5)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a38      	ldr	r2, [pc, #224]	@ (80062e0 <HAL_TIM_MspPostInit+0x1d0>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d11c      	bne.n	800623c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006202:	4b33      	ldr	r3, [pc, #204]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006206:	4a32      	ldr	r2, [pc, #200]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006208:	f043 0301 	orr.w	r3, r3, #1
 800620c:	6313      	str	r3, [r2, #48]	@ 0x30
 800620e:	4b30      	ldr	r3, [pc, #192]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006212:	f003 0301 	and.w	r3, r3, #1
 8006216:	617b      	str	r3, [r7, #20]
 8006218:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP3_Pin;
 800621a:	2301      	movs	r3, #1
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800621e:	2302      	movs	r3, #2
 8006220:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006222:	2300      	movs	r3, #0
 8006224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006226:	2300      	movs	r3, #0
 8006228:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800622a:	2302      	movs	r3, #2
 800622c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 800622e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006232:	4619      	mov	r1, r3
 8006234:	482b      	ldr	r0, [pc, #172]	@ (80062e4 <HAL_TIM_MspPostInit+0x1d4>)
 8006236:	f001 fb41 	bl	80078bc <HAL_GPIO_Init>
}
 800623a:	e042      	b.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a29      	ldr	r2, [pc, #164]	@ (80062e8 <HAL_TIM_MspPostInit+0x1d8>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d11c      	bne.n	8006280 <HAL_TIM_MspPostInit+0x170>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006246:	4b22      	ldr	r3, [pc, #136]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800624a:	4a21      	ldr	r2, [pc, #132]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 800624c:	f043 0310 	orr.w	r3, r3, #16
 8006250:	6313      	str	r3, [r2, #48]	@ 0x30
 8006252:	4b1f      	ldr	r3, [pc, #124]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006256:	f003 0310 	and.w	r3, r3, #16
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo2PWM_Pin;
 800625e:	2320      	movs	r3, #32
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006262:	2302      	movs	r3, #2
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006266:	2300      	movs	r3, #0
 8006268:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626a:	2300      	movs	r3, #0
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800626e:	2303      	movs	r3, #3
 8006270:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo2PWM_GPIO_Port, &GPIO_InitStruct);
 8006272:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006276:	4619      	mov	r1, r3
 8006278:	4816      	ldr	r0, [pc, #88]	@ (80062d4 <HAL_TIM_MspPostInit+0x1c4>)
 800627a:	f001 fb1f 	bl	80078bc <HAL_GPIO_Init>
}
 800627e:	e020      	b.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM14)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a19      	ldr	r2, [pc, #100]	@ (80062ec <HAL_TIM_MspPostInit+0x1dc>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d11b      	bne.n	80062c2 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800628a:	4b11      	ldr	r3, [pc, #68]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 800628c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800628e:	4a10      	ldr	r2, [pc, #64]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006290:	f043 0301 	orr.w	r3, r3, #1
 8006294:	6313      	str	r3, [r2, #48]	@ 0x30
 8006296:	4b0e      	ldr	r3, [pc, #56]	@ (80062d0 <HAL_TIM_MspPostInit+0x1c0>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629a:	f003 0301 	and.w	r3, r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1PWM_Pin;
 80062a2:	2380      	movs	r3, #128	@ 0x80
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a6:	2302      	movs	r3, #2
 80062a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ae:	2300      	movs	r3, #0
 80062b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80062b2:	2309      	movs	r3, #9
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Servo1PWM_GPIO_Port, &GPIO_InitStruct);
 80062b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80062ba:	4619      	mov	r1, r3
 80062bc:	4809      	ldr	r0, [pc, #36]	@ (80062e4 <HAL_TIM_MspPostInit+0x1d4>)
 80062be:	f001 fafd 	bl	80078bc <HAL_GPIO_Init>
}
 80062c2:	bf00      	nop
 80062c4:	3738      	adds	r7, #56	@ 0x38
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	40010000 	.word	0x40010000
 80062d0:	40023800 	.word	0x40023800
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40020400 	.word	0x40020400
 80062dc:	40000400 	.word	0x40000400
 80062e0:	40000c00 	.word	0x40000c00
 80062e4:	40020000 	.word	0x40020000
 80062e8:	40014000 	.word	0x40014000
 80062ec:	40002000 	.word	0x40002000

080062f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b0b4      	sub	sp, #208	@ 0xd0
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	609a      	str	r2, [r3, #8]
 8006304:	60da      	str	r2, [r3, #12]
 8006306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006308:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800630c:	2284      	movs	r2, #132	@ 0x84
 800630e:	2100      	movs	r1, #0
 8006310:	4618      	mov	r0, r3
 8006312:	f00f ff88 	bl	8016226 <memset>
  if(huart->Instance==UART4)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a8a      	ldr	r2, [pc, #552]	@ (8006544 <HAL_UART_MspInit+0x254>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d174      	bne.n	800640a <HAL_UART_MspInit+0x11a>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006320:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006324:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006326:	2300      	movs	r3, #0
 8006328:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800632c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006330:	4618      	mov	r0, r3
 8006332:	f002 ffa5 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800633c:	f7ff fcee 	bl	8005d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006340:	4b81      	ldr	r3, [pc, #516]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006344:	4a80      	ldr	r2, [pc, #512]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006346:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800634a:	6413      	str	r3, [r2, #64]	@ 0x40
 800634c:	4b7e      	ldr	r3, [pc, #504]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800634e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006354:	637b      	str	r3, [r7, #52]	@ 0x34
 8006356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006358:	4b7b      	ldr	r3, [pc, #492]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800635a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635c:	4a7a      	ldr	r2, [pc, #488]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800635e:	f043 0304 	orr.w	r3, r3, #4
 8006362:	6313      	str	r3, [r2, #48]	@ 0x30
 8006364:	4b78      	ldr	r3, [pc, #480]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	f003 0304 	and.w	r3, r3, #4
 800636c:	633b      	str	r3, [r7, #48]	@ 0x30
 800636e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006370:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006374:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006378:	2302      	movs	r3, #2
 800637a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800637e:	2300      	movs	r3, #0
 8006380:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006384:	2303      	movs	r3, #3
 8006386:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800638a:	2308      	movs	r3, #8
 800638c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006390:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006394:	4619      	mov	r1, r3
 8006396:	486d      	ldr	r0, [pc, #436]	@ (800654c <HAL_UART_MspInit+0x25c>)
 8006398:	f001 fa90 	bl	80078bc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800639c:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_UART_MspInit+0x260>)
 800639e:	4a6d      	ldr	r2, [pc, #436]	@ (8006554 <HAL_UART_MspInit+0x264>)
 80063a0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80063a2:	4b6b      	ldr	r3, [pc, #428]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80063a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063aa:	4b69      	ldr	r3, [pc, #420]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063b0:	4b67      	ldr	r3, [pc, #412]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063b6:	4b66      	ldr	r3, [pc, #408]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063be:	4b64      	ldr	r3, [pc, #400]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063c4:	4b62      	ldr	r3, [pc, #392]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80063ca:	4b61      	ldr	r3, [pc, #388]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80063d0:	4b5f      	ldr	r3, [pc, #380]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80063d6:	4b5e      	ldr	r3, [pc, #376]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063d8:	2200      	movs	r2, #0
 80063da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80063dc:	485c      	ldr	r0, [pc, #368]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063de:	f000 fe63 	bl	80070a8 <HAL_DMA_Init>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 80063e8:	f7ff fc98 	bl	8005d1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a58      	ldr	r2, [pc, #352]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80063f2:	4a57      	ldr	r2, [pc, #348]	@ (8006550 <HAL_UART_MspInit+0x260>)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80063f8:	2200      	movs	r2, #0
 80063fa:	2105      	movs	r1, #5
 80063fc:	2034      	movs	r0, #52	@ 0x34
 80063fe:	f000 fe29 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006402:	2034      	movs	r0, #52	@ 0x34
 8006404:	f000 fe42 	bl	800708c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006408:	e254      	b.n	80068b4 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==UART5)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a52      	ldr	r2, [pc, #328]	@ (8006558 <HAL_UART_MspInit+0x268>)
 8006410:	4293      	cmp	r3, r2
 8006412:	f040 80a9 	bne.w	8006568 <HAL_UART_MspInit+0x278>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800641c:	2300      	movs	r3, #0
 800641e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006422:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006426:	4618      	mov	r0, r3
 8006428:	f002 ff2a 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <HAL_UART_MspInit+0x146>
      Error_Handler();
 8006432:	f7ff fc73 	bl	8005d1c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006436:	4b44      	ldr	r3, [pc, #272]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	4a43      	ldr	r2, [pc, #268]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800643c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006440:	6413      	str	r3, [r2, #64]	@ 0x40
 8006442:	4b41      	ldr	r3, [pc, #260]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800644a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800644c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800644e:	4b3e      	ldr	r3, [pc, #248]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	4a3d      	ldr	r2, [pc, #244]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006454:	f043 0304 	orr.w	r3, r3, #4
 8006458:	6313      	str	r3, [r2, #48]	@ 0x30
 800645a:	4b3b      	ldr	r3, [pc, #236]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	f003 0304 	and.w	r3, r3, #4
 8006462:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006466:	4b38      	ldr	r3, [pc, #224]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <HAL_UART_MspInit+0x258>)
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	6313      	str	r3, [r2, #48]	@ 0x30
 8006472:	4b35      	ldr	r3, [pc, #212]	@ (8006548 <HAL_UART_MspInit+0x258>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	627b      	str	r3, [r7, #36]	@ 0x24
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800647e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006482:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006486:	2302      	movs	r3, #2
 8006488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006492:	2303      	movs	r3, #3
 8006494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006498:	2308      	movs	r3, #8
 800649a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800649e:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80064a2:	4619      	mov	r1, r3
 80064a4:	4829      	ldr	r0, [pc, #164]	@ (800654c <HAL_UART_MspInit+0x25c>)
 80064a6:	f001 fa09 	bl	80078bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064aa:	2304      	movs	r3, #4
 80064ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b0:	2302      	movs	r3, #2
 80064b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064bc:	2303      	movs	r3, #3
 80064be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80064c2:	2308      	movs	r3, #8
 80064c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064c8:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80064cc:	4619      	mov	r1, r3
 80064ce:	4823      	ldr	r0, [pc, #140]	@ (800655c <HAL_UART_MspInit+0x26c>)
 80064d0:	f001 f9f4 	bl	80078bc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80064d4:	4b22      	ldr	r3, [pc, #136]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064d6:	4a23      	ldr	r2, [pc, #140]	@ (8006564 <HAL_UART_MspInit+0x274>)
 80064d8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80064da:	4b21      	ldr	r3, [pc, #132]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80064e0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064ee:	4b1c      	ldr	r3, [pc, #112]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80064f4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064f6:	4b1a      	ldr	r3, [pc, #104]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064fc:	4b18      	ldr	r3, [pc, #96]	@ (8006560 <HAL_UART_MspInit+0x270>)
 80064fe:	2200      	movs	r2, #0
 8006500:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8006502:	4b17      	ldr	r3, [pc, #92]	@ (8006560 <HAL_UART_MspInit+0x270>)
 8006504:	2200      	movs	r2, #0
 8006506:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006508:	4b15      	ldr	r3, [pc, #84]	@ (8006560 <HAL_UART_MspInit+0x270>)
 800650a:	2200      	movs	r2, #0
 800650c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800650e:	4b14      	ldr	r3, [pc, #80]	@ (8006560 <HAL_UART_MspInit+0x270>)
 8006510:	2200      	movs	r2, #0
 8006512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006514:	4812      	ldr	r0, [pc, #72]	@ (8006560 <HAL_UART_MspInit+0x270>)
 8006516:	f000 fdc7 	bl	80070a8 <HAL_DMA_Init>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d001      	beq.n	8006524 <HAL_UART_MspInit+0x234>
      Error_Handler();
 8006520:	f7ff fbfc 	bl	8005d1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0e      	ldr	r2, [pc, #56]	@ (8006560 <HAL_UART_MspInit+0x270>)
 8006528:	675a      	str	r2, [r3, #116]	@ 0x74
 800652a:	4a0d      	ldr	r2, [pc, #52]	@ (8006560 <HAL_UART_MspInit+0x270>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8006530:	2200      	movs	r2, #0
 8006532:	2105      	movs	r1, #5
 8006534:	2035      	movs	r0, #53	@ 0x35
 8006536:	f000 fd8d 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800653a:	2035      	movs	r0, #53	@ 0x35
 800653c:	f000 fda6 	bl	800708c <HAL_NVIC_EnableIRQ>
}
 8006540:	e1b8      	b.n	80068b4 <HAL_UART_MspInit+0x5c4>
 8006542:	bf00      	nop
 8006544:	40004c00 	.word	0x40004c00
 8006548:	40023800 	.word	0x40023800
 800654c:	40020800 	.word	0x40020800
 8006550:	20005124 	.word	0x20005124
 8006554:	40026040 	.word	0x40026040
 8006558:	40005000 	.word	0x40005000
 800655c:	40020c00 	.word	0x40020c00
 8006560:	20005184 	.word	0x20005184
 8006564:	40026010 	.word	0x40026010
  else if(huart->Instance==USART2)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a8b      	ldr	r2, [pc, #556]	@ (800679c <HAL_UART_MspInit+0x4ac>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d172      	bne.n	8006658 <HAL_UART_MspInit+0x368>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006572:	2380      	movs	r3, #128	@ 0x80
 8006574:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006576:	2300      	movs	r3, #0
 8006578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800657c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006580:	4618      	mov	r0, r3
 8006582:	f002 fe7d 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d001      	beq.n	8006590 <HAL_UART_MspInit+0x2a0>
      Error_Handler();
 800658c:	f7ff fbc6 	bl	8005d1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006590:	4b83      	ldr	r3, [pc, #524]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 8006592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006594:	4a82      	ldr	r2, [pc, #520]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 8006596:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800659a:	6413      	str	r3, [r2, #64]	@ 0x40
 800659c:	4b80      	ldr	r3, [pc, #512]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065a4:	623b      	str	r3, [r7, #32]
 80065a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80065a8:	4b7d      	ldr	r3, [pc, #500]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	4a7c      	ldr	r2, [pc, #496]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 80065ae:	f043 0308 	orr.w	r3, r3, #8
 80065b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80065b4:	4b7a      	ldr	r3, [pc, #488]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80065c0:	2360      	movs	r3, #96	@ 0x60
 80065c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c6:	2302      	movs	r3, #2
 80065c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d2:	2303      	movs	r3, #3
 80065d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065d8:	2307      	movs	r3, #7
 80065da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065de:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80065e2:	4619      	mov	r1, r3
 80065e4:	486f      	ldr	r0, [pc, #444]	@ (80067a4 <HAL_UART_MspInit+0x4b4>)
 80065e6:	f001 f969 	bl	80078bc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80065ea:	4b6f      	ldr	r3, [pc, #444]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 80065ec:	4a6f      	ldr	r2, [pc, #444]	@ (80067ac <HAL_UART_MspInit+0x4bc>)
 80065ee:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80065f0:	4b6d      	ldr	r3, [pc, #436]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 80065f2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80065f6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065f8:	4b6b      	ldr	r3, [pc, #428]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065fe:	4b6a      	ldr	r3, [pc, #424]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006600:	2200      	movs	r2, #0
 8006602:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006604:	4b68      	ldr	r3, [pc, #416]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006606:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800660a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800660c:	4b66      	ldr	r3, [pc, #408]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 800660e:	2200      	movs	r2, #0
 8006610:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006612:	4b65      	ldr	r3, [pc, #404]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006614:	2200      	movs	r2, #0
 8006616:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006618:	4b63      	ldr	r3, [pc, #396]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 800661a:	2200      	movs	r2, #0
 800661c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800661e:	4b62      	ldr	r3, [pc, #392]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006620:	2200      	movs	r2, #0
 8006622:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006624:	4b60      	ldr	r3, [pc, #384]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006626:	2200      	movs	r2, #0
 8006628:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800662a:	485f      	ldr	r0, [pc, #380]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 800662c:	f000 fd3c 	bl	80070a8 <HAL_DMA_Init>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_UART_MspInit+0x34a>
      Error_Handler();
 8006636:	f7ff fb71 	bl	8005d1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a5a      	ldr	r2, [pc, #360]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 800663e:	675a      	str	r2, [r3, #116]	@ 0x74
 8006640:	4a59      	ldr	r2, [pc, #356]	@ (80067a8 <HAL_UART_MspInit+0x4b8>)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8006646:	2200      	movs	r2, #0
 8006648:	2105      	movs	r1, #5
 800664a:	2026      	movs	r0, #38	@ 0x26
 800664c:	f000 fd02 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006650:	2026      	movs	r0, #38	@ 0x26
 8006652:	f000 fd1b 	bl	800708c <HAL_NVIC_EnableIRQ>
}
 8006656:	e12d      	b.n	80068b4 <HAL_UART_MspInit+0x5c4>
  else if(huart->Instance==USART3)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a54      	ldr	r2, [pc, #336]	@ (80067b0 <HAL_UART_MspInit+0x4c0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	f040 80b0 	bne.w	80067c4 <HAL_UART_MspInit+0x4d4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006664:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006668:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006670:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006674:	4618      	mov	r0, r3
 8006676:	f002 fe03 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_MspInit+0x394>
      Error_Handler();
 8006680:	f7ff fb4c 	bl	8005d1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006684:	4b46      	ldr	r3, [pc, #280]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 8006686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006688:	4a45      	ldr	r2, [pc, #276]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 800668a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800668e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006690:	4b43      	ldr	r3, [pc, #268]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800669c:	4b40      	ldr	r3, [pc, #256]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 800669e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a0:	4a3f      	ldr	r2, [pc, #252]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 80066a2:	f043 0308 	orr.w	r3, r3, #8
 80066a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80066a8:	4b3d      	ldr	r3, [pc, #244]	@ (80067a0 <HAL_UART_MspInit+0x4b0>)
 80066aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ac:	f003 0308 	and.w	r3, r3, #8
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80066b4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80066b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066bc:	2302      	movs	r3, #2
 80066be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066c8:	2303      	movs	r3, #3
 80066ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80066ce:	2307      	movs	r3, #7
 80066d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80066d4:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80066d8:	4619      	mov	r1, r3
 80066da:	4832      	ldr	r0, [pc, #200]	@ (80067a4 <HAL_UART_MspInit+0x4b4>)
 80066dc:	f001 f8ee 	bl	80078bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80066e0:	4b34      	ldr	r3, [pc, #208]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 80066e2:	4a35      	ldr	r2, [pc, #212]	@ (80067b8 <HAL_UART_MspInit+0x4c8>)
 80066e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80066e6:	4b33      	ldr	r3, [pc, #204]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 80066e8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80066ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066ee:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80066f4:	4b2f      	ldr	r3, [pc, #188]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80066fa:	4b2e      	ldr	r3, [pc, #184]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 80066fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006700:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006702:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006708:	4b2a      	ldr	r3, [pc, #168]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 800670a:	2200      	movs	r2, #0
 800670c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800670e:	4b29      	ldr	r3, [pc, #164]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006710:	2200      	movs	r2, #0
 8006712:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006714:	4b27      	ldr	r3, [pc, #156]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006716:	2200      	movs	r2, #0
 8006718:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800671a:	4b26      	ldr	r3, [pc, #152]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 800671c:	2200      	movs	r2, #0
 800671e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006720:	4824      	ldr	r0, [pc, #144]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006722:	f000 fcc1 	bl	80070a8 <HAL_DMA_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_UART_MspInit+0x440>
      Error_Handler();
 800672c:	f7ff faf6 	bl	8005d1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a20      	ldr	r2, [pc, #128]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006734:	675a      	str	r2, [r3, #116]	@ 0x74
 8006736:	4a1f      	ldr	r2, [pc, #124]	@ (80067b4 <HAL_UART_MspInit+0x4c4>)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800673c:	4b1f      	ldr	r3, [pc, #124]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 800673e:	4a20      	ldr	r2, [pc, #128]	@ (80067c0 <HAL_UART_MspInit+0x4d0>)
 8006740:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8006742:	4b1e      	ldr	r3, [pc, #120]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006744:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006748:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800674a:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 800674c:	2240      	movs	r2, #64	@ 0x40
 800674e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006750:	4b1a      	ldr	r3, [pc, #104]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006752:	2200      	movs	r2, #0
 8006754:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006756:	4b19      	ldr	r3, [pc, #100]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006758:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800675c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800675e:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006760:	2200      	movs	r2, #0
 8006762:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006766:	2200      	movs	r2, #0
 8006768:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800676a:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 800676c:	2200      	movs	r2, #0
 800676e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006770:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006772:	2200      	movs	r2, #0
 8006774:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006776:	4b11      	ldr	r3, [pc, #68]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006778:	2200      	movs	r2, #0
 800677a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800677c:	480f      	ldr	r0, [pc, #60]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 800677e:	f000 fc93 	bl	80070a8 <HAL_DMA_Init>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <HAL_UART_MspInit+0x49c>
      Error_Handler();
 8006788:	f7ff fac8 	bl	8005d1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a0b      	ldr	r2, [pc, #44]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006790:	671a      	str	r2, [r3, #112]	@ 0x70
 8006792:	4a0a      	ldr	r2, [pc, #40]	@ (80067bc <HAL_UART_MspInit+0x4cc>)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006798:	e08c      	b.n	80068b4 <HAL_UART_MspInit+0x5c4>
 800679a:	bf00      	nop
 800679c:	40004400 	.word	0x40004400
 80067a0:	40023800 	.word	0x40023800
 80067a4:	40020c00 	.word	0x40020c00
 80067a8:	200051e4 	.word	0x200051e4
 80067ac:	40026088 	.word	0x40026088
 80067b0:	40004800 	.word	0x40004800
 80067b4:	20005244 	.word	0x20005244
 80067b8:	40026028 	.word	0x40026028
 80067bc:	200052a4 	.word	0x200052a4
 80067c0:	40026058 	.word	0x40026058
  else if(huart->Instance==USART6)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a3c      	ldr	r2, [pc, #240]	@ (80068bc <HAL_UART_MspInit+0x5cc>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d172      	bne.n	80068b4 <HAL_UART_MspInit+0x5c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80067ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80067de:	4618      	mov	r0, r3
 80067e0:	f002 fd4e 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <HAL_UART_MspInit+0x4fe>
      Error_Handler();
 80067ea:	f7ff fa97 	bl	8005d1c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80067ee:	4b34      	ldr	r3, [pc, #208]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 80067f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f2:	4a33      	ldr	r2, [pc, #204]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 80067f4:	f043 0320 	orr.w	r3, r3, #32
 80067f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80067fa:	4b31      	ldr	r3, [pc, #196]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 80067fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006806:	4b2e      	ldr	r3, [pc, #184]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 8006808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800680a:	4a2d      	ldr	r2, [pc, #180]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 800680c:	f043 0304 	orr.w	r3, r3, #4
 8006810:	6313      	str	r3, [r2, #48]	@ 0x30
 8006812:	4b2b      	ldr	r3, [pc, #172]	@ (80068c0 <HAL_UART_MspInit+0x5d0>)
 8006814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006816:	f003 0304 	and.w	r3, r3, #4
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800681e:	23c0      	movs	r3, #192	@ 0xc0
 8006820:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006824:	2302      	movs	r3, #2
 8006826:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800682a:	2300      	movs	r3, #0
 800682c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006830:	2303      	movs	r3, #3
 8006832:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006836:	2308      	movs	r3, #8
 8006838:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800683c:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8006840:	4619      	mov	r1, r3
 8006842:	4820      	ldr	r0, [pc, #128]	@ (80068c4 <HAL_UART_MspInit+0x5d4>)
 8006844:	f001 f83a 	bl	80078bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006848:	4b1f      	ldr	r3, [pc, #124]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800684a:	4a20      	ldr	r2, [pc, #128]	@ (80068cc <HAL_UART_MspInit+0x5dc>)
 800684c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800684e:	4b1e      	ldr	r3, [pc, #120]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006850:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006854:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006856:	4b1c      	ldr	r3, [pc, #112]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006858:	2200      	movs	r2, #0
 800685a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800685c:	4b1a      	ldr	r3, [pc, #104]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800685e:	2200      	movs	r2, #0
 8006860:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006862:	4b19      	ldr	r3, [pc, #100]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006864:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006868:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800686a:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800686c:	2200      	movs	r2, #0
 800686e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006870:	4b15      	ldr	r3, [pc, #84]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006872:	2200      	movs	r2, #0
 8006874:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006876:	4b14      	ldr	r3, [pc, #80]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006878:	2200      	movs	r2, #0
 800687a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800687c:	4b12      	ldr	r3, [pc, #72]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800687e:	2200      	movs	r2, #0
 8006880:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006882:	4b11      	ldr	r3, [pc, #68]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 8006884:	2200      	movs	r2, #0
 8006886:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006888:	480f      	ldr	r0, [pc, #60]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800688a:	f000 fc0d 	bl	80070a8 <HAL_DMA_Init>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d001      	beq.n	8006898 <HAL_UART_MspInit+0x5a8>
      Error_Handler();
 8006894:	f7ff fa42 	bl	8005d1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a0b      	ldr	r2, [pc, #44]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 800689c:	675a      	str	r2, [r3, #116]	@ 0x74
 800689e:	4a0a      	ldr	r2, [pc, #40]	@ (80068c8 <HAL_UART_MspInit+0x5d8>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80068a4:	2200      	movs	r2, #0
 80068a6:	2105      	movs	r1, #5
 80068a8:	2047      	movs	r0, #71	@ 0x47
 80068aa:	f000 fbd3 	bl	8007054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80068ae:	2047      	movs	r0, #71	@ 0x47
 80068b0:	f000 fbec 	bl	800708c <HAL_NVIC_EnableIRQ>
}
 80068b4:	bf00      	nop
 80068b6:	37d0      	adds	r7, #208	@ 0xd0
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40011400 	.word	0x40011400
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40020800 	.word	0x40020800
 80068c8:	20005304 	.word	0x20005304
 80068cc:	40026428 	.word	0x40026428

080068d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b0ac      	sub	sp, #176	@ 0xb0
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	605a      	str	r2, [r3, #4]
 80068e2:	609a      	str	r2, [r3, #8]
 80068e4:	60da      	str	r2, [r3, #12]
 80068e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	2284      	movs	r2, #132	@ 0x84
 80068ee:	2100      	movs	r1, #0
 80068f0:	4618      	mov	r0, r3
 80068f2:	f00f fc98 	bl	8016226 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068fe:	d159      	bne.n	80069b4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006900:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006904:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800690c:	f107 0318 	add.w	r3, r7, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f002 fcb5 	bl	8009280 <HAL_RCCEx_PeriphCLKConfig>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d001      	beq.n	8006920 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800691c:	f7ff f9fe 	bl	8005d1c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006924:	4a25      	ldr	r2, [pc, #148]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6313      	str	r3, [r2, #48]	@ 0x30
 800692c:	4b23      	ldr	r3, [pc, #140]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8006938:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800693c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006940:	2302      	movs	r3, #2
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006946:	2300      	movs	r3, #0
 8006948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800694c:	2303      	movs	r3, #3
 800694e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006952:	230a      	movs	r3, #10
 8006954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006958:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800695c:	4619      	mov	r1, r3
 800695e:	4818      	ldr	r0, [pc, #96]	@ (80069c0 <HAL_PCD_MspInit+0xf0>)
 8006960:	f000 ffac 	bl	80078bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8006964:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006968:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800696c:	2300      	movs	r3, #0
 800696e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006972:	2300      	movs	r3, #0
 8006974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006978:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800697c:	4619      	mov	r1, r3
 800697e:	4810      	ldr	r0, [pc, #64]	@ (80069c0 <HAL_PCD_MspInit+0xf0>)
 8006980:	f000 ff9c 	bl	80078bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006984:	4b0d      	ldr	r3, [pc, #52]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 8006986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006988:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 800698a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698e:	6353      	str	r3, [r2, #52]	@ 0x34
 8006990:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 8006992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4b07      	ldr	r3, [pc, #28]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 800699e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069a0:	4a06      	ldr	r2, [pc, #24]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 80069a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80069a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80069a8:	4b04      	ldr	r3, [pc, #16]	@ (80069bc <HAL_PCD_MspInit+0xec>)
 80069aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80069b4:	bf00      	nop
 80069b6:	37b0      	adds	r7, #176	@ 0xb0
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	40023800 	.word	0x40023800
 80069c0:	40020000 	.word	0x40020000

080069c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b08e      	sub	sp, #56	@ 0x38
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80069d4:	4b33      	ldr	r3, [pc, #204]	@ (8006aa4 <HAL_InitTick+0xe0>)
 80069d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d8:	4a32      	ldr	r2, [pc, #200]	@ (8006aa4 <HAL_InitTick+0xe0>)
 80069da:	f043 0310 	orr.w	r3, r3, #16
 80069de:	6413      	str	r3, [r2, #64]	@ 0x40
 80069e0:	4b30      	ldr	r3, [pc, #192]	@ (8006aa4 <HAL_InitTick+0xe0>)
 80069e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e4:	f003 0310 	and.w	r3, r3, #16
 80069e8:	60fb      	str	r3, [r7, #12]
 80069ea:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80069ec:	f107 0210 	add.w	r2, r7, #16
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	4611      	mov	r1, r2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f002 fc10 	bl	800921c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d103      	bne.n	8006a0e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006a06:	f002 fbe1 	bl	80091cc <HAL_RCC_GetPCLK1Freq>
 8006a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a0c:	e004      	b.n	8006a18 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006a0e:	f002 fbdd 	bl	80091cc <HAL_RCC_GetPCLK1Freq>
 8006a12:	4603      	mov	r3, r0
 8006a14:	005b      	lsls	r3, r3, #1
 8006a16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1a:	4a23      	ldr	r2, [pc, #140]	@ (8006aa8 <HAL_InitTick+0xe4>)
 8006a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a20:	0c9b      	lsrs	r3, r3, #18
 8006a22:	3b01      	subs	r3, #1
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006a26:	4b21      	ldr	r3, [pc, #132]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a28:	4a21      	ldr	r2, [pc, #132]	@ (8006ab0 <HAL_InitTick+0xec>)
 8006a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a2e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8006a32:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006a34:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a40:	4b1a      	ldr	r3, [pc, #104]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a46:	4b19      	ldr	r3, [pc, #100]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a48:	2200      	movs	r2, #0
 8006a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006a4c:	4817      	ldr	r0, [pc, #92]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a4e:	f003 fdd1 	bl	800a5f4 <HAL_TIM_Base_Init>
 8006a52:	4603      	mov	r3, r0
 8006a54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8006a58:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d11b      	bne.n	8006a98 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006a60:	4812      	ldr	r0, [pc, #72]	@ (8006aac <HAL_InitTick+0xe8>)
 8006a62:	f003 feb7 	bl	800a7d4 <HAL_TIM_Base_Start_IT>
 8006a66:	4603      	mov	r3, r0
 8006a68:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8006a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d111      	bne.n	8006a98 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006a74:	2036      	movs	r0, #54	@ 0x36
 8006a76:	f000 fb09 	bl	800708c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b0f      	cmp	r3, #15
 8006a7e:	d808      	bhi.n	8006a92 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006a80:	2200      	movs	r2, #0
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	2036      	movs	r0, #54	@ 0x36
 8006a86:	f000 fae5 	bl	8007054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab4 <HAL_InitTick+0xf0>)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	e002      	b.n	8006a98 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3738      	adds	r7, #56	@ 0x38
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	431bde83 	.word	0x431bde83
 8006aac:	20005b28 	.word	0x20005b28
 8006ab0:	40001000 	.word	0x40001000
 8006ab4:	20000058 	.word	0x20000058

08006ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <NMI_Handler+0x4>

08006ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ac4:	bf00      	nop
 8006ac6:	e7fd      	b.n	8006ac4 <HardFault_Handler+0x4>

08006ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <MemManage_Handler+0x4>

08006ad0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <BusFault_Handler+0x4>

08006ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006adc:	bf00      	nop
 8006ade:	e7fd      	b.n	8006adc <UsageFault_Handler+0x4>

08006ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ae4:	bf00      	nop
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006af4:	4802      	ldr	r0, [pc, #8]	@ (8006b00 <DMA1_Stream0_IRQHandler+0x10>)
 8006af6:	f000 fc77 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	20005184 	.word	0x20005184

08006b04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006b08:	4802      	ldr	r0, [pc, #8]	@ (8006b14 <DMA1_Stream1_IRQHandler+0x10>)
 8006b0a:	f000 fc6d 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006b0e:	bf00      	nop
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20005244 	.word	0x20005244

08006b18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006b1c:	4802      	ldr	r0, [pc, #8]	@ (8006b28 <DMA1_Stream2_IRQHandler+0x10>)
 8006b1e:	f000 fc63 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006b22:	bf00      	nop
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20005124 	.word	0x20005124

08006b2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8006b30:	4802      	ldr	r0, [pc, #8]	@ (8006b3c <DMA1_Stream3_IRQHandler+0x10>)
 8006b32:	f000 fc59 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006b36:	bf00      	nop
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200052a4 	.word	0x200052a4

08006b40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006b44:	4802      	ldr	r0, [pc, #8]	@ (8006b50 <DMA1_Stream5_IRQHandler+0x10>)
 8006b46:	f000 fc4f 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	200051e4 	.word	0x200051e4

08006b54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006b58:	4802      	ldr	r0, [pc, #8]	@ (8006b64 <TIM1_CC_IRQHandler+0x10>)
 8006b5a:	f004 fb4f 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006b5e:	bf00      	nop
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	20004c1c 	.word	0x20004c1c

08006b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006b6c:	4802      	ldr	r0, [pc, #8]	@ (8006b78 <TIM2_IRQHandler+0x10>)
 8006b6e:	f004 fb45 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006b72:	bf00      	nop
 8006b74:	bd80      	pop	{r7, pc}
 8006b76:	bf00      	nop
 8006b78:	20004c68 	.word	0x20004c68

08006b7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006b80:	4802      	ldr	r0, [pc, #8]	@ (8006b8c <TIM3_IRQHandler+0x10>)
 8006b82:	f004 fb3b 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006b86:	bf00      	nop
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20004cb4 	.word	0x20004cb4

08006b90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006b94:	4802      	ldr	r0, [pc, #8]	@ (8006ba0 <TIM4_IRQHandler+0x10>)
 8006b96:	f004 fb31 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20004d00 	.word	0x20004d00

08006ba4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006ba8:	4802      	ldr	r0, [pc, #8]	@ (8006bb4 <USART2_IRQHandler+0x10>)
 8006baa:	f005 fcb7 	bl	800c51c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006bae:	bf00      	nop
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20004f8c 	.word	0x20004f8c

08006bb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006bbc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006bc0:	f001 f85a 	bl	8007c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006bc4:	bf00      	nop
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006bcc:	4802      	ldr	r0, [pc, #8]	@ (8006bd8 <TIM5_IRQHandler+0x10>)
 8006bce:	f004 fb15 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006bd2:	bf00      	nop
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20004d4c 	.word	0x20004d4c

08006bdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006be0:	4802      	ldr	r0, [pc, #8]	@ (8006bec <UART4_IRQHandler+0x10>)
 8006be2:	f005 fc9b 	bl	800c51c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006be6:	bf00      	nop
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20004e7c 	.word	0x20004e7c

08006bf0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006bf4:	4802      	ldr	r0, [pc, #8]	@ (8006c00 <UART5_IRQHandler+0x10>)
 8006bf6:	f005 fc91 	bl	800c51c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	20004f04 	.word	0x20004f04

08006c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006c08:	4802      	ldr	r0, [pc, #8]	@ (8006c14 <TIM6_DAC_IRQHandler+0x10>)
 8006c0a:	f004 faf7 	bl	800b1fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006c0e:	bf00      	nop
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	20005b28 	.word	0x20005b28

08006c18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006c1c:	4802      	ldr	r0, [pc, #8]	@ (8006c28 <DMA2_Stream1_IRQHandler+0x10>)
 8006c1e:	f000 fbe3 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006c22:	bf00      	nop
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20005304 	.word	0x20005304

08006c2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006c30:	4802      	ldr	r0, [pc, #8]	@ (8006c3c <USART6_IRQHandler+0x10>)
 8006c32:	f005 fc73 	bl	800c51c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006c36:	bf00      	nop
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000509c 	.word	0x2000509c

08006c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
  return 1;
 8006c44:	2301      	movs	r3, #1
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <_kill>:

int _kill(int pid, int sig)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006c5a:	f00f fb8b 	bl	8016374 <__errno>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2216      	movs	r2, #22
 8006c62:	601a      	str	r2, [r3, #0]
  return -1;
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <_exit>:

void _exit (int status)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006c78:	f04f 31ff 	mov.w	r1, #4294967295
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f7ff ffe7 	bl	8006c50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006c82:	bf00      	nop
 8006c84:	e7fd      	b.n	8006c82 <_exit+0x12>

08006c86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b086      	sub	sp, #24
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006c92:	2300      	movs	r3, #0
 8006c94:	617b      	str	r3, [r7, #20]
 8006c96:	e00a      	b.n	8006cae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006c98:	f3af 8000 	nop.w
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	60ba      	str	r2, [r7, #8]
 8006ca4:	b2ca      	uxtb	r2, r1
 8006ca6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3301      	adds	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	dbf0      	blt.n	8006c98 <_read+0x12>
  }

  return len;
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e009      	b.n	8006ce6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	1c5a      	adds	r2, r3, #1
 8006cd6:	60ba      	str	r2, [r7, #8]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	dbf1      	blt.n	8006cd2 <_write+0x12>
  }
  return len;
 8006cee:	687b      	ldr	r3, [r7, #4]
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <_close>:

int _close(int file)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006d20:	605a      	str	r2, [r3, #4]
  return 0;
 8006d22:	2300      	movs	r3, #0
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <_isatty>:

int _isatty(int file)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006d38:	2301      	movs	r3, #1
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d68:	4a14      	ldr	r2, [pc, #80]	@ (8006dbc <_sbrk+0x5c>)
 8006d6a:	4b15      	ldr	r3, [pc, #84]	@ (8006dc0 <_sbrk+0x60>)
 8006d6c:	1ad3      	subs	r3, r2, r3
 8006d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006d74:	4b13      	ldr	r3, [pc, #76]	@ (8006dc4 <_sbrk+0x64>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d102      	bne.n	8006d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006d7c:	4b11      	ldr	r3, [pc, #68]	@ (8006dc4 <_sbrk+0x64>)
 8006d7e:	4a12      	ldr	r2, [pc, #72]	@ (8006dc8 <_sbrk+0x68>)
 8006d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006d82:	4b10      	ldr	r3, [pc, #64]	@ (8006dc4 <_sbrk+0x64>)
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d207      	bcs.n	8006da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006d90:	f00f faf0 	bl	8016374 <__errno>
 8006d94:	4603      	mov	r3, r0
 8006d96:	220c      	movs	r2, #12
 8006d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d9e:	e009      	b.n	8006db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006da0:	4b08      	ldr	r3, [pc, #32]	@ (8006dc4 <_sbrk+0x64>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006da6:	4b07      	ldr	r3, [pc, #28]	@ (8006dc4 <_sbrk+0x64>)
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4413      	add	r3, r2
 8006dae:	4a05      	ldr	r2, [pc, #20]	@ (8006dc4 <_sbrk+0x64>)
 8006db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006db2:	68fb      	ldr	r3, [r7, #12]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	20050000 	.word	0x20050000
 8006dc0:	00000400 	.word	0x00000400
 8006dc4:	20005b74 	.word	0x20005b74
 8006dc8:	2000e6c8 	.word	0x2000e6c8

08006dcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006dd0:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <SystemInit+0x20>)
 8006dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dd6:	4a05      	ldr	r2, [pc, #20]	@ (8006dec <SystemInit+0x20>)
 8006dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006de0:	bf00      	nop
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	e000ed00 	.word	0xe000ed00

08006df0 <Reset_Handler>:
 8006df0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006e28 <LoopFillZerobss+0xe>
 8006df4:	f7ff ffea 	bl	8006dcc <SystemInit>
 8006df8:	480c      	ldr	r0, [pc, #48]	@ (8006e2c <LoopFillZerobss+0x12>)
 8006dfa:	490d      	ldr	r1, [pc, #52]	@ (8006e30 <LoopFillZerobss+0x16>)
 8006dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8006e34 <LoopFillZerobss+0x1a>)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e002      	b.n	8006e08 <LoopCopyDataInit>

08006e02 <CopyDataInit>:
 8006e02:	58d4      	ldr	r4, [r2, r3]
 8006e04:	50c4      	str	r4, [r0, r3]
 8006e06:	3304      	adds	r3, #4

08006e08 <LoopCopyDataInit>:
 8006e08:	18c4      	adds	r4, r0, r3
 8006e0a:	428c      	cmp	r4, r1
 8006e0c:	d3f9      	bcc.n	8006e02 <CopyDataInit>
 8006e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e38 <LoopFillZerobss+0x1e>)
 8006e10:	4c0a      	ldr	r4, [pc, #40]	@ (8006e3c <LoopFillZerobss+0x22>)
 8006e12:	2300      	movs	r3, #0
 8006e14:	e001      	b.n	8006e1a <LoopFillZerobss>

08006e16 <FillZerobss>:
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	3204      	adds	r2, #4

08006e1a <LoopFillZerobss>:
 8006e1a:	42a2      	cmp	r2, r4
 8006e1c:	d3fb      	bcc.n	8006e16 <FillZerobss>
 8006e1e:	f00f faaf 	bl	8016380 <__libc_init_array>
 8006e22:	f7fd ffc7 	bl	8004db4 <main>
 8006e26:	4770      	bx	lr
 8006e28:	20050000 	.word	0x20050000
 8006e2c:	20000000 	.word	0x20000000
 8006e30:	20000244 	.word	0x20000244
 8006e34:	08019168 	.word	0x08019168
 8006e38:	20000244 	.word	0x20000244
 8006e3c:	2000e6c4 	.word	0x2000e6c4

08006e40 <ADC_IRQHandler>:
 8006e40:	e7fe      	b.n	8006e40 <ADC_IRQHandler>

08006e42 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e46:	2003      	movs	r0, #3
 8006e48:	f000 f8f9 	bl	800703e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e4c:	200f      	movs	r0, #15
 8006e4e:	f7ff fdb9 	bl	80069c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e52:	f7fe ff69 	bl	8005d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006e60:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <HAL_IncTick+0x20>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4b06      	ldr	r3, [pc, #24]	@ (8006e80 <HAL_IncTick+0x24>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	4a04      	ldr	r2, [pc, #16]	@ (8006e80 <HAL_IncTick+0x24>)
 8006e6e:	6013      	str	r3, [r2, #0]
}
 8006e70:	bf00      	nop
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	2000005c 	.word	0x2000005c
 8006e80:	20005b78 	.word	0x20005b78

08006e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  return uwTick;
 8006e88:	4b03      	ldr	r3, [pc, #12]	@ (8006e98 <HAL_GetTick+0x14>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	20005b78 	.word	0x20005b78

08006e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ea4:	f7ff ffee 	bl	8006e84 <HAL_GetTick>
 8006ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb4:	d005      	beq.n	8006ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee0 <HAL_Delay+0x44>)
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ec2:	bf00      	nop
 8006ec4:	f7ff ffde 	bl	8006e84 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d8f7      	bhi.n	8006ec4 <HAL_Delay+0x28>
  {
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000005c 	.word	0x2000005c

08006ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8006f24 <__NVIC_SetPriorityGrouping+0x40>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006f00:	4013      	ands	r3, r2
 8006f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <__NVIC_SetPriorityGrouping+0x44>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f12:	4a04      	ldr	r2, [pc, #16]	@ (8006f24 <__NVIC_SetPriorityGrouping+0x40>)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	60d3      	str	r3, [r2, #12]
}
 8006f18:	bf00      	nop
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	e000ed00 	.word	0xe000ed00
 8006f28:	05fa0000 	.word	0x05fa0000

08006f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f30:	4b04      	ldr	r3, [pc, #16]	@ (8006f44 <__NVIC_GetPriorityGrouping+0x18>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	0a1b      	lsrs	r3, r3, #8
 8006f36:	f003 0307 	and.w	r3, r3, #7
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	e000ed00 	.word	0xe000ed00

08006f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	db0b      	blt.n	8006f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	f003 021f 	and.w	r2, r3, #31
 8006f60:	4907      	ldr	r1, [pc, #28]	@ (8006f80 <__NVIC_EnableIRQ+0x38>)
 8006f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f66:	095b      	lsrs	r3, r3, #5
 8006f68:	2001      	movs	r0, #1
 8006f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006f72:	bf00      	nop
 8006f74:	370c      	adds	r7, #12
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	e000e100 	.word	0xe000e100

08006f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	6039      	str	r1, [r7, #0]
 8006f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	db0a      	blt.n	8006fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	490c      	ldr	r1, [pc, #48]	@ (8006fd0 <__NVIC_SetPriority+0x4c>)
 8006f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fa2:	0112      	lsls	r2, r2, #4
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006fac:	e00a      	b.n	8006fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	4908      	ldr	r1, [pc, #32]	@ (8006fd4 <__NVIC_SetPriority+0x50>)
 8006fb4:	79fb      	ldrb	r3, [r7, #7]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	3b04      	subs	r3, #4
 8006fbc:	0112      	lsls	r2, r2, #4
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	440b      	add	r3, r1
 8006fc2:	761a      	strb	r2, [r3, #24]
}
 8006fc4:	bf00      	nop
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	e000e100 	.word	0xe000e100
 8006fd4:	e000ed00 	.word	0xe000ed00

08006fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b089      	sub	sp, #36	@ 0x24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f1c3 0307 	rsb	r3, r3, #7
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	bf28      	it	cs
 8006ff6:	2304      	movcs	r3, #4
 8006ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	2b06      	cmp	r3, #6
 8007000:	d902      	bls.n	8007008 <NVIC_EncodePriority+0x30>
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	3b03      	subs	r3, #3
 8007006:	e000      	b.n	800700a <NVIC_EncodePriority+0x32>
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	fa02 f303 	lsl.w	r3, r2, r3
 8007016:	43da      	mvns	r2, r3
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	401a      	ands	r2, r3
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007020:	f04f 31ff 	mov.w	r1, #4294967295
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	fa01 f303 	lsl.w	r3, r1, r3
 800702a:	43d9      	mvns	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007030:	4313      	orrs	r3, r2
         );
}
 8007032:	4618      	mov	r0, r3
 8007034:	3724      	adds	r7, #36	@ 0x24
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff ff4c 	bl	8006ee4 <__NVIC_SetPriorityGrouping>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007062:	2300      	movs	r3, #0
 8007064:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007066:	f7ff ff61 	bl	8006f2c <__NVIC_GetPriorityGrouping>
 800706a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	68b9      	ldr	r1, [r7, #8]
 8007070:	6978      	ldr	r0, [r7, #20]
 8007072:	f7ff ffb1 	bl	8006fd8 <NVIC_EncodePriority>
 8007076:	4602      	mov	r2, r0
 8007078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800707c:	4611      	mov	r1, r2
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ff80 	bl	8006f84 <__NVIC_SetPriority>
}
 8007084:	bf00      	nop
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff ff54 	bl	8006f48 <__NVIC_EnableIRQ>
}
 80070a0:	bf00      	nop
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80070b0:	2300      	movs	r3, #0
 80070b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80070b4:	f7ff fee6 	bl	8006e84 <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e099      	b.n	80071f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0201 	bic.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80070e4:	e00f      	b.n	8007106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80070e6:	f7ff fecd 	bl	8006e84 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	2b05      	cmp	r3, #5
 80070f2:	d908      	bls.n	8007106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2220      	movs	r2, #32
 80070f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2203      	movs	r2, #3
 80070fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e078      	b.n	80071f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e8      	bne.n	80070e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4b38      	ldr	r3, [pc, #224]	@ (8007200 <HAL_DMA_Init+0x158>)
 8007120:	4013      	ands	r3, r2
 8007122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800713e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800714a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800715c:	2b04      	cmp	r3, #4
 800715e:	d107      	bne.n	8007170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007168:	4313      	orrs	r3, r2
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007196:	2b04      	cmp	r3, #4
 8007198:	d117      	bne.n	80071ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	4313      	orrs	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00e      	beq.n	80071ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 fb09 	bl	80077c4 <DMA_CheckFifoParam>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2240      	movs	r2, #64	@ 0x40
 80071bc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80071c6:	2301      	movs	r3, #1
 80071c8:	e016      	b.n	80071f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fac0 	bl	8007758 <DMA_CalcBaseAndBitshift>
 80071d8:	4603      	mov	r3, r0
 80071da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071e0:	223f      	movs	r2, #63	@ 0x3f
 80071e2:	409a      	lsls	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3718      	adds	r7, #24
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	f010803f 	.word	0xf010803f

08007204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b086      	sub	sp, #24
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_DMA_Start_IT+0x26>
 8007226:	2302      	movs	r3, #2
 8007228:	e048      	b.n	80072bc <HAL_DMA_Start_IT+0xb8>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b01      	cmp	r3, #1
 800723c:	d137      	bne.n	80072ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	68b9      	ldr	r1, [r7, #8]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 fa52 	bl	80076fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800725c:	223f      	movs	r2, #63	@ 0x3f
 800725e:	409a      	lsls	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0216 	orr.w	r2, r2, #22
 8007272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695a      	ldr	r2, [r3, #20]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007282:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	2b00      	cmp	r3, #0
 800728a:	d007      	beq.n	800729c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0201 	orr.w	r2, r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	e005      	b.n	80072ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80072b6:	2302      	movs	r3, #2
 80072b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3718      	adds	r7, #24
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80072d2:	f7ff fdd7 	bl	8006e84 <HAL_GetTick>
 80072d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d008      	beq.n	80072f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2280      	movs	r2, #128	@ 0x80
 80072e8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e052      	b.n	800739c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0216 	bic.w	r2, r2, #22
 8007304:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695a      	ldr	r2, [r3, #20]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007314:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <HAL_DMA_Abort+0x62>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0208 	bic.w	r2, r2, #8
 8007334:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007346:	e013      	b.n	8007370 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007348:	f7ff fd9c 	bl	8006e84 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b05      	cmp	r3, #5
 8007354:	d90c      	bls.n	8007370 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2203      	movs	r2, #3
 8007360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e015      	b.n	800739c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1e4      	bne.n	8007348 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007382:	223f      	movs	r2, #63	@ 0x3f
 8007384:	409a      	lsls	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d004      	beq.n	80073c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2280      	movs	r2, #128	@ 0x80
 80073bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e00c      	b.n	80073dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2205      	movs	r2, #5
 80073c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80073f4:	4b8e      	ldr	r3, [pc, #568]	@ (8007630 <HAL_DMA_IRQHandler+0x248>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a8e      	ldr	r2, [pc, #568]	@ (8007634 <HAL_DMA_IRQHandler+0x24c>)
 80073fa:	fba2 2303 	umull	r2, r3, r2, r3
 80073fe:	0a9b      	lsrs	r3, r3, #10
 8007400:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007406:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007412:	2208      	movs	r2, #8
 8007414:	409a      	lsls	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	4013      	ands	r3, r2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d01a      	beq.n	8007454 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d013      	beq.n	8007454 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f022 0204 	bic.w	r2, r2, #4
 800743a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007440:	2208      	movs	r2, #8
 8007442:	409a      	lsls	r2, r3
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800744c:	f043 0201 	orr.w	r2, r3, #1
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007458:	2201      	movs	r2, #1
 800745a:	409a      	lsls	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4013      	ands	r3, r2
 8007460:	2b00      	cmp	r3, #0
 8007462:	d012      	beq.n	800748a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00b      	beq.n	800748a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007476:	2201      	movs	r2, #1
 8007478:	409a      	lsls	r2, r3
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007482:	f043 0202 	orr.w	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800748e:	2204      	movs	r2, #4
 8007490:	409a      	lsls	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d012      	beq.n	80074c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074ac:	2204      	movs	r2, #4
 80074ae:	409a      	lsls	r2, r3
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b8:	f043 0204 	orr.w	r2, r3, #4
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074c4:	2210      	movs	r2, #16
 80074c6:	409a      	lsls	r2, r3
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d043      	beq.n	8007558 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d03c      	beq.n	8007558 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074e2:	2210      	movs	r2, #16
 80074e4:	409a      	lsls	r2, r3
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d018      	beq.n	800752a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d108      	bne.n	8007518 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	d024      	beq.n	8007558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
 8007516:	e01f      	b.n	8007558 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01b      	beq.n	8007558 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	4798      	blx	r3
 8007528:	e016      	b.n	8007558 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 0208 	bic.w	r2, r2, #8
 8007546:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800755c:	2220      	movs	r2, #32
 800755e:	409a      	lsls	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4013      	ands	r3, r2
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 808f 	beq.w	8007688 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8087 	beq.w	8007688 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800757e:	2220      	movs	r2, #32
 8007580:	409a      	lsls	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b05      	cmp	r3, #5
 8007590:	d136      	bne.n	8007600 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0216 	bic.w	r2, r2, #22
 80075a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d103      	bne.n	80075c2 <HAL_DMA_IRQHandler+0x1da>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d007      	beq.n	80075d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80075d6:	223f      	movs	r2, #63	@ 0x3f
 80075d8:	409a      	lsls	r2, r3
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d07e      	beq.n	80076f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
        }
        return;
 80075fe:	e079      	b.n	80076f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d01d      	beq.n	800764a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007620:	2b00      	cmp	r3, #0
 8007622:	d031      	beq.n	8007688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
 800762c:	e02c      	b.n	8007688 <HAL_DMA_IRQHandler+0x2a0>
 800762e:	bf00      	nop
 8007630:	20000054 	.word	0x20000054
 8007634:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
 8007648:	e01e      	b.n	8007688 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10f      	bne.n	8007678 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0210 	bic.w	r2, r2, #16
 8007666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d003      	beq.n	8007688 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800768c:	2b00      	cmp	r3, #0
 800768e:	d032      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d022      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2205      	movs	r2, #5
 80076a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0201 	bic.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	3301      	adds	r3, #1
 80076b8:	60bb      	str	r3, [r7, #8]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d307      	bcc.n	80076d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1f2      	bne.n	80076b4 <HAL_DMA_IRQHandler+0x2cc>
 80076ce:	e000      	b.n	80076d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80076d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	e000      	b.n	80076f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80076f4:	bf00      	nop
    }
  }
}
 80076f6:	3718      	adds	r7, #24
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
 8007708:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007718:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	683a      	ldr	r2, [r7, #0]
 8007720:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	2b40      	cmp	r3, #64	@ 0x40
 8007728:	d108      	bne.n	800773c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800773a:	e007      	b.n	800774c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	3b10      	subs	r3, #16
 8007768:	4a13      	ldr	r2, [pc, #76]	@ (80077b8 <DMA_CalcBaseAndBitshift+0x60>)
 800776a:	fba2 2303 	umull	r2, r3, r2, r3
 800776e:	091b      	lsrs	r3, r3, #4
 8007770:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007772:	4a12      	ldr	r2, [pc, #72]	@ (80077bc <DMA_CalcBaseAndBitshift+0x64>)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	461a      	mov	r2, r3
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d908      	bls.n	8007798 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <DMA_CalcBaseAndBitshift+0x68>)
 800778e:	4013      	ands	r3, r2
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	659a      	str	r2, [r3, #88]	@ 0x58
 8007796:	e006      	b.n	80077a6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <DMA_CalcBaseAndBitshift+0x68>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	aaaaaaab 	.word	0xaaaaaaab
 80077bc:	08018954 	.word	0x08018954
 80077c0:	fffffc00 	.word	0xfffffc00

080077c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077cc:	2300      	movs	r3, #0
 80077ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d11f      	bne.n	800781e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d856      	bhi.n	8007892 <DMA_CheckFifoParam+0xce>
 80077e4:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <DMA_CheckFifoParam+0x28>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	0800780f 	.word	0x0800780f
 80077f4:	080077fd 	.word	0x080077fd
 80077f8:	08007893 	.word	0x08007893
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007800:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d046      	beq.n	8007896 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800780c:	e043      	b.n	8007896 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007812:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007816:	d140      	bne.n	800789a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800781c:	e03d      	b.n	800789a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007826:	d121      	bne.n	800786c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b03      	cmp	r3, #3
 800782c:	d837      	bhi.n	800789e <DMA_CheckFifoParam+0xda>
 800782e:	a201      	add	r2, pc, #4	@ (adr r2, 8007834 <DMA_CheckFifoParam+0x70>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007845 	.word	0x08007845
 8007838:	0800784b 	.word	0x0800784b
 800783c:	08007845 	.word	0x08007845
 8007840:	0800785d 	.word	0x0800785d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	73fb      	strb	r3, [r7, #15]
      break;
 8007848:	e030      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d025      	beq.n	80078a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800785a:	e022      	b.n	80078a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007864:	d11f      	bne.n	80078a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800786a:	e01c      	b.n	80078a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d903      	bls.n	800787a <DMA_CheckFifoParam+0xb6>
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b03      	cmp	r3, #3
 8007876:	d003      	beq.n	8007880 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007878:	e018      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	73fb      	strb	r3, [r7, #15]
      break;
 800787e:	e015      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
      break;
 8007890:	e00b      	b.n	80078aa <DMA_CheckFifoParam+0xe6>
      break;
 8007892:	bf00      	nop
 8007894:	e00a      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;
 8007896:	bf00      	nop
 8007898:	e008      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;
 800789a:	bf00      	nop
 800789c:	e006      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;
 800789e:	bf00      	nop
 80078a0:	e004      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;
 80078a2:	bf00      	nop
 80078a4:	e002      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;   
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <DMA_CheckFifoParam+0xe8>
      break;
 80078aa:	bf00      	nop
    }
  } 
  
  return status; 
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop

080078bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80078bc:	b480      	push	{r7}
 80078be:	b089      	sub	sp, #36	@ 0x24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80078c6:	2300      	movs	r3, #0
 80078c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80078ca:	2300      	movs	r3, #0
 80078cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80078d6:	2300      	movs	r3, #0
 80078d8:	61fb      	str	r3, [r7, #28]
 80078da:	e175      	b.n	8007bc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80078dc:	2201      	movs	r2, #1
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	fa02 f303 	lsl.w	r3, r2, r3
 80078e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4013      	ands	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	f040 8164 	bne.w	8007bc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	f003 0303 	and.w	r3, r3, #3
 8007902:	2b01      	cmp	r3, #1
 8007904:	d005      	beq.n	8007912 <HAL_GPIO_Init+0x56>
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b02      	cmp	r3, #2
 8007910:	d130      	bne.n	8007974 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	2203      	movs	r2, #3
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	4013      	ands	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	005b      	lsls	r3, r3, #1
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	69ba      	ldr	r2, [r7, #24]
 8007938:	4313      	orrs	r3, r2
 800793a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007948:	2201      	movs	r2, #1
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	fa02 f303 	lsl.w	r3, r2, r3
 8007950:	43db      	mvns	r3, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	4013      	ands	r3, r2
 8007956:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	091b      	lsrs	r3, r3, #4
 800795e:	f003 0201 	and.w	r2, r3, #1
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	fa02 f303 	lsl.w	r3, r2, r3
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	4313      	orrs	r3, r2
 800796c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	69ba      	ldr	r2, [r7, #24]
 8007972:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	2b03      	cmp	r3, #3
 800797e:	d017      	beq.n	80079b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	2203      	movs	r2, #3
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	43db      	mvns	r3, r3
 8007992:	69ba      	ldr	r2, [r7, #24]
 8007994:	4013      	ands	r3, r2
 8007996:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	69fb      	ldr	r3, [r7, #28]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	fa02 f303 	lsl.w	r3, r2, r3
 80079a4:	69ba      	ldr	r2, [r7, #24]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f003 0303 	and.w	r3, r3, #3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d123      	bne.n	8007a04 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	08da      	lsrs	r2, r3, #3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3208      	adds	r2, #8
 80079c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	220f      	movs	r2, #15
 80079d4:	fa02 f303 	lsl.w	r3, r2, r3
 80079d8:	43db      	mvns	r3, r3
 80079da:	69ba      	ldr	r2, [r7, #24]
 80079dc:	4013      	ands	r3, r2
 80079de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	08da      	lsrs	r2, r3, #3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3208      	adds	r2, #8
 80079fe:	69b9      	ldr	r1, [r7, #24]
 8007a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	2203      	movs	r2, #3
 8007a10:	fa02 f303 	lsl.w	r3, r2, r3
 8007a14:	43db      	mvns	r3, r3
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	4013      	ands	r3, r2
 8007a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	f003 0203 	and.w	r2, r3, #3
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80be 	beq.w	8007bc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a46:	4b66      	ldr	r3, [pc, #408]	@ (8007be0 <HAL_GPIO_Init+0x324>)
 8007a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4a:	4a65      	ldr	r2, [pc, #404]	@ (8007be0 <HAL_GPIO_Init+0x324>)
 8007a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8007a52:	4b63      	ldr	r3, [pc, #396]	@ (8007be0 <HAL_GPIO_Init+0x324>)
 8007a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007a5e:	4a61      	ldr	r2, [pc, #388]	@ (8007be4 <HAL_GPIO_Init+0x328>)
 8007a60:	69fb      	ldr	r3, [r7, #28]
 8007a62:	089b      	lsrs	r3, r3, #2
 8007a64:	3302      	adds	r3, #2
 8007a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	220f      	movs	r2, #15
 8007a76:	fa02 f303 	lsl.w	r3, r2, r3
 8007a7a:	43db      	mvns	r3, r3
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a58      	ldr	r2, [pc, #352]	@ (8007be8 <HAL_GPIO_Init+0x32c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d037      	beq.n	8007afa <HAL_GPIO_Init+0x23e>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	4a57      	ldr	r2, [pc, #348]	@ (8007bec <HAL_GPIO_Init+0x330>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d031      	beq.n	8007af6 <HAL_GPIO_Init+0x23a>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4a56      	ldr	r2, [pc, #344]	@ (8007bf0 <HAL_GPIO_Init+0x334>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d02b      	beq.n	8007af2 <HAL_GPIO_Init+0x236>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4a55      	ldr	r2, [pc, #340]	@ (8007bf4 <HAL_GPIO_Init+0x338>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d025      	beq.n	8007aee <HAL_GPIO_Init+0x232>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	4a54      	ldr	r2, [pc, #336]	@ (8007bf8 <HAL_GPIO_Init+0x33c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d01f      	beq.n	8007aea <HAL_GPIO_Init+0x22e>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	4a53      	ldr	r2, [pc, #332]	@ (8007bfc <HAL_GPIO_Init+0x340>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d019      	beq.n	8007ae6 <HAL_GPIO_Init+0x22a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a52      	ldr	r2, [pc, #328]	@ (8007c00 <HAL_GPIO_Init+0x344>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_GPIO_Init+0x226>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a51      	ldr	r2, [pc, #324]	@ (8007c04 <HAL_GPIO_Init+0x348>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d00d      	beq.n	8007ade <HAL_GPIO_Init+0x222>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	4a50      	ldr	r2, [pc, #320]	@ (8007c08 <HAL_GPIO_Init+0x34c>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d007      	beq.n	8007ada <HAL_GPIO_Init+0x21e>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	4a4f      	ldr	r2, [pc, #316]	@ (8007c0c <HAL_GPIO_Init+0x350>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d101      	bne.n	8007ad6 <HAL_GPIO_Init+0x21a>
 8007ad2:	2309      	movs	r3, #9
 8007ad4:	e012      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007ad6:	230a      	movs	r3, #10
 8007ad8:	e010      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007ada:	2308      	movs	r3, #8
 8007adc:	e00e      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007ade:	2307      	movs	r3, #7
 8007ae0:	e00c      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007ae2:	2306      	movs	r3, #6
 8007ae4:	e00a      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007ae6:	2305      	movs	r3, #5
 8007ae8:	e008      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007aea:	2304      	movs	r3, #4
 8007aec:	e006      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007aee:	2303      	movs	r3, #3
 8007af0:	e004      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007af2:	2302      	movs	r3, #2
 8007af4:	e002      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <HAL_GPIO_Init+0x240>
 8007afa:	2300      	movs	r3, #0
 8007afc:	69fa      	ldr	r2, [r7, #28]
 8007afe:	f002 0203 	and.w	r2, r2, #3
 8007b02:	0092      	lsls	r2, r2, #2
 8007b04:	4093      	lsls	r3, r2
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8007b0c:	4935      	ldr	r1, [pc, #212]	@ (8007be4 <HAL_GPIO_Init+0x328>)
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	089b      	lsrs	r3, r3, #2
 8007b12:	3302      	adds	r3, #2
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007b1a:	4b3d      	ldr	r3, [pc, #244]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	43db      	mvns	r3, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	4013      	ands	r3, r2
 8007b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007b3e:	4a34      	ldr	r2, [pc, #208]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007b44:	4b32      	ldr	r3, [pc, #200]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	43db      	mvns	r3, r3
 8007b4e:	69ba      	ldr	r2, [r7, #24]
 8007b50:	4013      	ands	r3, r2
 8007b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007b68:	4a29      	ldr	r2, [pc, #164]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007b6e:	4b28      	ldr	r3, [pc, #160]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	43db      	mvns	r3, r3
 8007b78:	69ba      	ldr	r2, [r7, #24]
 8007b7a:	4013      	ands	r3, r2
 8007b7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007b92:	4a1f      	ldr	r2, [pc, #124]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007b98:	4b1d      	ldr	r3, [pc, #116]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	43db      	mvns	r3, r3
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007bbc:	4a14      	ldr	r2, [pc, #80]	@ (8007c10 <HAL_GPIO_Init+0x354>)
 8007bbe:	69bb      	ldr	r3, [r7, #24]
 8007bc0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8007bc2:	69fb      	ldr	r3, [r7, #28]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	2b0f      	cmp	r3, #15
 8007bcc:	f67f ae86 	bls.w	80078dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007bd0:	bf00      	nop
 8007bd2:	bf00      	nop
 8007bd4:	3724      	adds	r7, #36	@ 0x24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	40023800 	.word	0x40023800
 8007be4:	40013800 	.word	0x40013800
 8007be8:	40020000 	.word	0x40020000
 8007bec:	40020400 	.word	0x40020400
 8007bf0:	40020800 	.word	0x40020800
 8007bf4:	40020c00 	.word	0x40020c00
 8007bf8:	40021000 	.word	0x40021000
 8007bfc:	40021400 	.word	0x40021400
 8007c00:	40021800 	.word	0x40021800
 8007c04:	40021c00 	.word	0x40021c00
 8007c08:	40022000 	.word	0x40022000
 8007c0c:	40022400 	.word	0x40022400
 8007c10:	40013c00 	.word	0x40013c00

08007c14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b085      	sub	sp, #20
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	691a      	ldr	r2, [r3, #16]
 8007c24:	887b      	ldrh	r3, [r7, #2]
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	73fb      	strb	r3, [r7, #15]
 8007c30:	e001      	b.n	8007c36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	807b      	strh	r3, [r7, #2]
 8007c50:	4613      	mov	r3, r2
 8007c52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c54:	787b      	ldrb	r3, [r7, #1]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007c60:	e003      	b.n	8007c6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007c62:	887b      	ldrh	r3, [r7, #2]
 8007c64:	041a      	lsls	r2, r3, #16
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	619a      	str	r2, [r3, #24]
}
 8007c6a:	bf00      	nop
 8007c6c:	370c      	adds	r7, #12
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007c82:	4b08      	ldr	r3, [pc, #32]	@ (8007ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	4013      	ands	r3, r2
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d006      	beq.n	8007c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007c8e:	4a05      	ldr	r2, [pc, #20]	@ (8007ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007c90:	88fb      	ldrh	r3, [r7, #6]
 8007c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fd f878 	bl	8004d8c <HAL_GPIO_EXTI_Callback>
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	40013c00 	.word	0x40013c00

08007ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e08b      	b.n	8007dd2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f7fe f852 	bl	8005d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2224      	movs	r2, #36	@ 0x24
 8007cd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f022 0201 	bic.w	r2, r2, #1
 8007cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685a      	ldr	r2, [r3, #4]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007cf8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d107      	bne.n	8007d22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689a      	ldr	r2, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d1e:	609a      	str	r2, [r3, #8]
 8007d20:	e006      	b.n	8007d30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007d2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b02      	cmp	r3, #2
 8007d36:	d108      	bne.n	8007d4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d46:	605a      	str	r2, [r3, #4]
 8007d48:	e007      	b.n	8007d5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6859      	ldr	r1, [r3, #4]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4b1d      	ldr	r3, [pc, #116]	@ (8007ddc <HAL_I2C_Init+0x134>)
 8007d66:	430b      	orrs	r3, r1
 8007d68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	695b      	ldr	r3, [r3, #20]
 8007d82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	430a      	orrs	r2, r1
 8007d92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69d9      	ldr	r1, [r3, #28]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop
 8007ddc:	02008000 	.word	0x02008000

08007de0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b088      	sub	sp, #32
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	461a      	mov	r2, r3
 8007dec:	460b      	mov	r3, r1
 8007dee:	817b      	strh	r3, [r7, #10]
 8007df0:	4613      	mov	r3, r2
 8007df2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	f040 80fd 	bne.w	8007ffc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d101      	bne.n	8007e10 <HAL_I2C_Master_Transmit+0x30>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	e0f6      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007e18:	f7ff f834 	bl	8006e84 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	2319      	movs	r3, #25
 8007e24:	2201      	movs	r2, #1
 8007e26:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f000 f914 	bl	8008058 <I2C_WaitOnFlagUntilTimeout>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e0e1      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2221      	movs	r2, #33	@ 0x21
 8007e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2210      	movs	r2, #16
 8007e46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	893a      	ldrh	r2, [r7, #8]
 8007e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	2bff      	cmp	r3, #255	@ 0xff
 8007e6a:	d906      	bls.n	8007e7a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	22ff      	movs	r2, #255	@ 0xff
 8007e70:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007e72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007e76:	617b      	str	r3, [r7, #20]
 8007e78:	e007      	b.n	8007e8a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007e84:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007e88:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d024      	beq.n	8007edc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	781a      	ldrb	r2, [r3, #0]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	8979      	ldrh	r1, [r7, #10]
 8007ece:	4b4e      	ldr	r3, [pc, #312]	@ (8008008 <HAL_I2C_Master_Transmit+0x228>)
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fa83 	bl	80083e0 <I2C_TransferConfig>
 8007eda:	e066      	b.n	8007faa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ee0:	b2da      	uxtb	r2, r3
 8007ee2:	8979      	ldrh	r1, [r7, #10]
 8007ee4:	4b48      	ldr	r3, [pc, #288]	@ (8008008 <HAL_I2C_Master_Transmit+0x228>)
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	f000 fa78 	bl	80083e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8007ef0:	e05b      	b.n	8007faa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	6a39      	ldr	r1, [r7, #32]
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f000 f907 	bl	800810a <I2C_WaitOnTXISFlagUntilTimeout>
 8007efc:	4603      	mov	r3, r0
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e07b      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0a:	781a      	ldrb	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29a      	uxth	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d034      	beq.n	8007faa <HAL_I2C_Master_Transmit+0x1ca>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d130      	bne.n	8007faa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2180      	movs	r1, #128	@ 0x80
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 f880 	bl	8008058 <I2C_WaitOnFlagUntilTimeout>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e04d      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2bff      	cmp	r3, #255	@ 0xff
 8007f6a:	d90e      	bls.n	8007f8a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	22ff      	movs	r2, #255	@ 0xff
 8007f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	8979      	ldrh	r1, [r7, #10]
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fa2c 	bl	80083e0 <I2C_TransferConfig>
 8007f88:	e00f      	b.n	8007faa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	8979      	ldrh	r1, [r7, #10]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007fa4:	68f8      	ldr	r0, [r7, #12]
 8007fa6:	f000 fa1b 	bl	80083e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d19e      	bne.n	8007ef2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	6a39      	ldr	r1, [r7, #32]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 f8ed 	bl	8008198 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e01a      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6859      	ldr	r1, [r3, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	4b0c      	ldr	r3, [pc, #48]	@ (800800c <HAL_I2C_Master_Transmit+0x22c>)
 8007fdc:	400b      	ands	r3, r1
 8007fde:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e000      	b.n	8007ffe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8007ffc:	2302      	movs	r3, #2
  }
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3718      	adds	r7, #24
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	80002000 	.word	0x80002000
 800800c:	fe00e800 	.word	0xfe00e800

08008010 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	699b      	ldr	r3, [r3, #24]
 800801e:	f003 0302 	and.w	r3, r3, #2
 8008022:	2b02      	cmp	r3, #2
 8008024:	d103      	bne.n	800802e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2200      	movs	r2, #0
 800802c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b01      	cmp	r3, #1
 800803a:	d007      	beq.n	800804c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	699a      	ldr	r2, [r3, #24]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	619a      	str	r2, [r3, #24]
  }
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	4613      	mov	r3, r2
 8008066:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008068:	e03b      	b.n	80080e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f000 f8d6 	bl	8008220 <I2C_IsErrorOccurred>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e041      	b.n	8008102 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d02d      	beq.n	80080e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fe fefd 	bl	8006e84 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <I2C_WaitOnFlagUntilTimeout+0x44>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d122      	bne.n	80080e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699a      	ldr	r2, [r3, #24]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	4013      	ands	r3, r2
 80080a6:	68ba      	ldr	r2, [r7, #8]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	bf0c      	ite	eq
 80080ac:	2301      	moveq	r3, #1
 80080ae:	2300      	movne	r3, #0
 80080b0:	b2db      	uxtb	r3, r3
 80080b2:	461a      	mov	r2, r3
 80080b4:	79fb      	ldrb	r3, [r7, #7]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d113      	bne.n	80080e2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080be:	f043 0220 	orr.w	r2, r3, #32
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2220      	movs	r2, #32
 80080ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e00f      	b.n	8008102 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	699a      	ldr	r2, [r3, #24]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	4013      	ands	r3, r2
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	429a      	cmp	r2, r3
 80080f0:	bf0c      	ite	eq
 80080f2:	2301      	moveq	r3, #1
 80080f4:	2300      	movne	r3, #0
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	79fb      	ldrb	r3, [r7, #7]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d0b4      	beq.n	800806a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b084      	sub	sp, #16
 800810e:	af00      	add	r7, sp, #0
 8008110:	60f8      	str	r0, [r7, #12]
 8008112:	60b9      	str	r1, [r7, #8]
 8008114:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008116:	e033      	b.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	68b9      	ldr	r1, [r7, #8]
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f87f 	bl	8008220 <I2C_IsErrorOccurred>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d001      	beq.n	800812c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e031      	b.n	8008190 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d025      	beq.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008134:	f7fe fea6 	bl	8006e84 <HAL_GetTick>
 8008138:	4602      	mov	r2, r0
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	1ad3      	subs	r3, r2, r3
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d302      	bcc.n	800814a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d11a      	bne.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	f003 0302 	and.w	r3, r3, #2
 8008154:	2b02      	cmp	r3, #2
 8008156:	d013      	beq.n	8008180 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800815c:	f043 0220 	orr.w	r2, r3, #32
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2220      	movs	r2, #32
 8008168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e007      	b.n	8008190 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d1c4      	bne.n	8008118 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
 800819e:	60f8      	str	r0, [r7, #12]
 80081a0:	60b9      	str	r1, [r7, #8]
 80081a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80081a4:	e02f      	b.n	8008206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	68b9      	ldr	r1, [r7, #8]
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f838 	bl	8008220 <I2C_IsErrorOccurred>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d001      	beq.n	80081ba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e02d      	b.n	8008216 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081ba:	f7fe fe63 	bl	8006e84 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d302      	bcc.n	80081d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d11a      	bne.n	8008206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f003 0320 	and.w	r3, r3, #32
 80081da:	2b20      	cmp	r3, #32
 80081dc:	d013      	beq.n	8008206 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081e2:	f043 0220 	orr.w	r2, r3, #32
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e007      	b.n	8008216 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b20      	cmp	r3, #32
 8008212:	d1c8      	bne.n	80081a6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08a      	sub	sp, #40	@ 0x28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800823a:	2300      	movs	r3, #0
 800823c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	f003 0310 	and.w	r3, r3, #16
 8008248:	2b00      	cmp	r3, #0
 800824a:	d068      	beq.n	800831e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2210      	movs	r2, #16
 8008252:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008254:	e049      	b.n	80082ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825c:	d045      	beq.n	80082ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800825e:	f7fe fe11 	bl	8006e84 <HAL_GetTick>
 8008262:	4602      	mov	r2, r0
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d302      	bcc.n	8008274 <I2C_IsErrorOccurred+0x54>
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d13a      	bne.n	80082ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800827e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008286:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008296:	d121      	bne.n	80082dc <I2C_IsErrorOccurred+0xbc>
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800829e:	d01d      	beq.n	80082dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80082a0:	7cfb      	ldrb	r3, [r7, #19]
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d01a      	beq.n	80082dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80082b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80082b6:	f7fe fde5 	bl	8006e84 <HAL_GetTick>
 80082ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082bc:	e00e      	b.n	80082dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80082be:	f7fe fde1 	bl	8006e84 <HAL_GetTick>
 80082c2:	4602      	mov	r2, r0
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	1ad3      	subs	r3, r2, r3
 80082c8:	2b19      	cmp	r3, #25
 80082ca:	d907      	bls.n	80082dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	f043 0320 	orr.w	r3, r3, #32
 80082d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80082da:	e006      	b.n	80082ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	f003 0320 	and.w	r3, r3, #32
 80082e6:	2b20      	cmp	r3, #32
 80082e8:	d1e9      	bne.n	80082be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d003      	beq.n	8008300 <I2C_IsErrorOccurred+0xe0>
 80082f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d0aa      	beq.n	8008256 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008304:	2b00      	cmp	r3, #0
 8008306:	d103      	bne.n	8008310 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2220      	movs	r2, #32
 800830e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00b      	beq.n	8008348 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	f043 0301 	orr.w	r3, r3, #1
 8008336:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008340:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00b      	beq.n	800836a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	f043 0308 	orr.w	r3, r3, #8
 8008358:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008362:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008374:	6a3b      	ldr	r3, [r7, #32]
 8008376:	f043 0302 	orr.w	r3, r3, #2
 800837a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008384:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800838c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01c      	beq.n	80083ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff fe3b 	bl	8008010 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6859      	ldr	r1, [r3, #4]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	4b0d      	ldr	r3, [pc, #52]	@ (80083dc <I2C_IsErrorOccurred+0x1bc>)
 80083a6:	400b      	ands	r3, r1
 80083a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	431a      	orrs	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80083ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3728      	adds	r7, #40	@ 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	fe00e800 	.word	0xfe00e800

080083e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	817b      	strh	r3, [r7, #10]
 80083ee:	4613      	mov	r3, r2
 80083f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083f2:	897b      	ldrh	r3, [r7, #10]
 80083f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083f8:	7a7b      	ldrb	r3, [r7, #9]
 80083fa:	041b      	lsls	r3, r3, #16
 80083fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008400:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	4313      	orrs	r3, r2
 800840a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800840e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	6a3b      	ldr	r3, [r7, #32]
 8008418:	0d5b      	lsrs	r3, r3, #21
 800841a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800841e:	4b08      	ldr	r3, [pc, #32]	@ (8008440 <I2C_TransferConfig+0x60>)
 8008420:	430b      	orrs	r3, r1
 8008422:	43db      	mvns	r3, r3
 8008424:	ea02 0103 	and.w	r1, r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	430a      	orrs	r2, r1
 8008430:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008432:	bf00      	nop
 8008434:	371c      	adds	r7, #28
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr
 800843e:	bf00      	nop
 8008440:	03ff63ff 	.word	0x03ff63ff

08008444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008444:	b480      	push	{r7}
 8008446:	b083      	sub	sp, #12
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b20      	cmp	r3, #32
 8008458:	d138      	bne.n	80084cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008464:	2302      	movs	r3, #2
 8008466:	e032      	b.n	80084ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2224      	movs	r2, #36	@ 0x24
 8008474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f022 0201 	bic.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6819      	ldr	r1, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	430a      	orrs	r2, r1
 80084a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f042 0201 	orr.w	r2, r2, #1
 80084b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2220      	movs	r2, #32
 80084bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80084c8:	2300      	movs	r3, #0
 80084ca:	e000      	b.n	80084ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d139      	bne.n	8008564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e033      	b.n	8008566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2224      	movs	r2, #36	@ 0x24
 800850a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f022 0201 	bic.w	r2, r2, #1
 800851c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800852c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	021b      	lsls	r3, r3, #8
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	4313      	orrs	r3, r2
 8008536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0201 	orr.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008560:	2300      	movs	r3, #0
 8008562:	e000      	b.n	8008566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008564:	2302      	movs	r3, #2
  }
}
 8008566:	4618      	mov	r0, r3
 8008568:	3714      	adds	r7, #20
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af02      	add	r7, sp, #8
 8008578:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e108      	b.n	8008796 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d106      	bne.n	80085a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7fe f996 	bl	80068d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2203      	movs	r2, #3
 80085a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085b2:	d102      	bne.n	80085ba <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4618      	mov	r0, r3
 80085c0:	f005 f98c 	bl	800d8dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	7c1a      	ldrb	r2, [r3, #16]
 80085cc:	f88d 2000 	strb.w	r2, [sp]
 80085d0:	3304      	adds	r3, #4
 80085d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085d4:	f005 f928 	bl	800d828 <USB_CoreInit>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d005      	beq.n	80085ea <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e0d5      	b.n	8008796 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f005 f984 	bl	800d8fe <USB_SetCurrentMode>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d005      	beq.n	8008608 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e0c6      	b.n	8008796 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008608:	2300      	movs	r3, #0
 800860a:	73fb      	strb	r3, [r7, #15]
 800860c:	e04a      	b.n	80086a4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800860e:	7bfa      	ldrb	r2, [r7, #15]
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	3315      	adds	r3, #21
 800861e:	2201      	movs	r2, #1
 8008620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008622:	7bfa      	ldrb	r2, [r7, #15]
 8008624:	6879      	ldr	r1, [r7, #4]
 8008626:	4613      	mov	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	4413      	add	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	440b      	add	r3, r1
 8008630:	3314      	adds	r3, #20
 8008632:	7bfa      	ldrb	r2, [r7, #15]
 8008634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008636:	7bfa      	ldrb	r2, [r7, #15]
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	b298      	uxth	r0, r3
 800863c:	6879      	ldr	r1, [r7, #4]
 800863e:	4613      	mov	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	4413      	add	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	440b      	add	r3, r1
 8008648:	332e      	adds	r3, #46	@ 0x2e
 800864a:	4602      	mov	r2, r0
 800864c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800864e:	7bfa      	ldrb	r2, [r7, #15]
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4613      	mov	r3, r2
 8008654:	00db      	lsls	r3, r3, #3
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	3318      	adds	r3, #24
 800865e:	2200      	movs	r2, #0
 8008660:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008662:	7bfa      	ldrb	r2, [r7, #15]
 8008664:	6879      	ldr	r1, [r7, #4]
 8008666:	4613      	mov	r3, r2
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	4413      	add	r3, r2
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	440b      	add	r3, r1
 8008670:	331c      	adds	r3, #28
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008676:	7bfa      	ldrb	r2, [r7, #15]
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	4413      	add	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	3320      	adds	r3, #32
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800868a:	7bfa      	ldrb	r2, [r7, #15]
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	3324      	adds	r3, #36	@ 0x24
 800869a:	2200      	movs	r2, #0
 800869c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	3301      	adds	r3, #1
 80086a2:	73fb      	strb	r3, [r7, #15]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	791b      	ldrb	r3, [r3, #4]
 80086a8:	7bfa      	ldrb	r2, [r7, #15]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d3af      	bcc.n	800860e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086ae:	2300      	movs	r3, #0
 80086b0:	73fb      	strb	r3, [r7, #15]
 80086b2:	e044      	b.n	800873e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80086b4:	7bfa      	ldrb	r2, [r7, #15]
 80086b6:	6879      	ldr	r1, [r7, #4]
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	440b      	add	r3, r1
 80086c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80086ca:	7bfa      	ldrb	r2, [r7, #15]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	4613      	mov	r3, r2
 80086d0:	00db      	lsls	r3, r3, #3
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	440b      	add	r3, r1
 80086d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80086dc:	7bfa      	ldrb	r2, [r7, #15]
 80086de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086e0:	7bfa      	ldrb	r2, [r7, #15]
 80086e2:	6879      	ldr	r1, [r7, #4]
 80086e4:	4613      	mov	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	440b      	add	r3, r1
 80086ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80086f2:	2200      	movs	r2, #0
 80086f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086f6:	7bfa      	ldrb	r2, [r7, #15]
 80086f8:	6879      	ldr	r1, [r7, #4]
 80086fa:	4613      	mov	r3, r2
 80086fc:	00db      	lsls	r3, r3, #3
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	440b      	add	r3, r1
 8008704:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8008708:	2200      	movs	r2, #0
 800870a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800870c:	7bfa      	ldrb	r2, [r7, #15]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800871e:	2200      	movs	r2, #0
 8008720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008722:	7bfa      	ldrb	r2, [r7, #15]
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	00db      	lsls	r3, r3, #3
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	3301      	adds	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	791b      	ldrb	r3, [r3, #4]
 8008742:	7bfa      	ldrb	r2, [r7, #15]
 8008744:	429a      	cmp	r2, r3
 8008746:	d3b5      	bcc.n	80086b4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6818      	ldr	r0, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7c1a      	ldrb	r2, [r3, #16]
 8008750:	f88d 2000 	strb.w	r2, [sp]
 8008754:	3304      	adds	r3, #4
 8008756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008758:	f005 f91e 	bl	800d998 <USB_DevInit>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d005      	beq.n	800876e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e013      	b.n	8008796 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	7b1b      	ldrb	r3, [r3, #12]
 8008780:	2b01      	cmp	r3, #1
 8008782:	d102      	bne.n	800878a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f80b 	bl	80087a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4618      	mov	r0, r3
 8008790:	f005 fad9 	bl	800dd46 <USB_DevDisconnect>

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80087d0:	4313      	orrs	r3, r2
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	3714      	adds	r7, #20
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	10000003 	.word	0x10000003

080087e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80087f2:	4b23      	ldr	r3, [pc, #140]	@ (8008880 <HAL_PWREx_EnableOverDrive+0x98>)
 80087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f6:	4a22      	ldr	r2, [pc, #136]	@ (8008880 <HAL_PWREx_EnableOverDrive+0x98>)
 80087f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80087fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80087fe:	4b20      	ldr	r3, [pc, #128]	@ (8008880 <HAL_PWREx_EnableOverDrive+0x98>)
 8008800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800880a:	4b1e      	ldr	r3, [pc, #120]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a1d      	ldr	r2, [pc, #116]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008814:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008816:	f7fe fb35 	bl	8006e84 <HAL_GetTick>
 800881a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800881c:	e009      	b.n	8008832 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800881e:	f7fe fb31 	bl	8006e84 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800882c:	d901      	bls.n	8008832 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e022      	b.n	8008878 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008832:	4b14      	ldr	r3, [pc, #80]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800883a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800883e:	d1ee      	bne.n	800881e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008840:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a0f      	ldr	r2, [pc, #60]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800884a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800884c:	f7fe fb1a 	bl	8006e84 <HAL_GetTick>
 8008850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008852:	e009      	b.n	8008868 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008854:	f7fe fb16 	bl	8006e84 <HAL_GetTick>
 8008858:	4602      	mov	r2, r0
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008862:	d901      	bls.n	8008868 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e007      	b.n	8008878 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008868:	4b06      	ldr	r3, [pc, #24]	@ (8008884 <HAL_PWREx_EnableOverDrive+0x9c>)
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008874:	d1ee      	bne.n	8008854 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008876:	2300      	movs	r3, #0
}
 8008878:	4618      	mov	r0, r3
 800887a:	3708      	adds	r7, #8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40023800 	.word	0x40023800
 8008884:	40007000 	.word	0x40007000

08008888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e291      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 8087 	beq.w	80089ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088ac:	4b96      	ldr	r3, [pc, #600]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b04      	cmp	r3, #4
 80088b6:	d00c      	beq.n	80088d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088b8:	4b93      	ldr	r3, [pc, #588]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	f003 030c 	and.w	r3, r3, #12
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d112      	bne.n	80088ea <HAL_RCC_OscConfig+0x62>
 80088c4:	4b90      	ldr	r3, [pc, #576]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80088cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088d0:	d10b      	bne.n	80088ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d06c      	beq.n	80089b8 <HAL_RCC_OscConfig+0x130>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d168      	bne.n	80089b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e26b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088f2:	d106      	bne.n	8008902 <HAL_RCC_OscConfig+0x7a>
 80088f4:	4b84      	ldr	r3, [pc, #528]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a83      	ldr	r2, [pc, #524]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80088fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088fe:	6013      	str	r3, [r2, #0]
 8008900:	e02e      	b.n	8008960 <HAL_RCC_OscConfig+0xd8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10c      	bne.n	8008924 <HAL_RCC_OscConfig+0x9c>
 800890a:	4b7f      	ldr	r3, [pc, #508]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a7e      	ldr	r2, [pc, #504]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008910:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	4b7c      	ldr	r3, [pc, #496]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a7b      	ldr	r2, [pc, #492]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800891c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008920:	6013      	str	r3, [r2, #0]
 8008922:	e01d      	b.n	8008960 <HAL_RCC_OscConfig+0xd8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800892c:	d10c      	bne.n	8008948 <HAL_RCC_OscConfig+0xc0>
 800892e:	4b76      	ldr	r3, [pc, #472]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a75      	ldr	r2, [pc, #468]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008934:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008938:	6013      	str	r3, [r2, #0]
 800893a:	4b73      	ldr	r3, [pc, #460]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a72      	ldr	r2, [pc, #456]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e00b      	b.n	8008960 <HAL_RCC_OscConfig+0xd8>
 8008948:	4b6f      	ldr	r3, [pc, #444]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6e      	ldr	r2, [pc, #440]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800894e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	4b6c      	ldr	r3, [pc, #432]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a6b      	ldr	r2, [pc, #428]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 800895a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800895e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d013      	beq.n	8008990 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008968:	f7fe fa8c 	bl	8006e84 <HAL_GetTick>
 800896c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800896e:	e008      	b.n	8008982 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008970:	f7fe fa88 	bl	8006e84 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	2b64      	cmp	r3, #100	@ 0x64
 800897c:	d901      	bls.n	8008982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e21f      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008982:	4b61      	ldr	r3, [pc, #388]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d0f0      	beq.n	8008970 <HAL_RCC_OscConfig+0xe8>
 800898e:	e014      	b.n	80089ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008990:	f7fe fa78 	bl	8006e84 <HAL_GetTick>
 8008994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008998:	f7fe fa74 	bl	8006e84 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b64      	cmp	r3, #100	@ 0x64
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e20b      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089aa:	4b57      	ldr	r3, [pc, #348]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d1f0      	bne.n	8008998 <HAL_RCC_OscConfig+0x110>
 80089b6:	e000      	b.n	80089ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d069      	beq.n	8008a9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089c6:	4b50      	ldr	r3, [pc, #320]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f003 030c 	and.w	r3, r3, #12
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089d2:	4b4d      	ldr	r3, [pc, #308]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f003 030c 	and.w	r3, r3, #12
 80089da:	2b08      	cmp	r3, #8
 80089dc:	d11c      	bne.n	8008a18 <HAL_RCC_OscConfig+0x190>
 80089de:	4b4a      	ldr	r3, [pc, #296]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d116      	bne.n	8008a18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089ea:	4b47      	ldr	r3, [pc, #284]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d005      	beq.n	8008a02 <HAL_RCC_OscConfig+0x17a>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d001      	beq.n	8008a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e1df      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a02:	4b41      	ldr	r3, [pc, #260]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	00db      	lsls	r3, r3, #3
 8008a10:	493d      	ldr	r1, [pc, #244]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a16:	e040      	b.n	8008a9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d023      	beq.n	8008a68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a20:	4b39      	ldr	r3, [pc, #228]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a38      	ldr	r2, [pc, #224]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fe fa2a 	bl	8006e84 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a34:	f7fe fa26 	bl	8006e84 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e1bd      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a46:	4b30      	ldr	r3, [pc, #192]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a52:	4b2d      	ldr	r3, [pc, #180]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4929      	ldr	r1, [pc, #164]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	600b      	str	r3, [r1, #0]
 8008a66:	e018      	b.n	8008a9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a68:	4b27      	ldr	r3, [pc, #156]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a26      	ldr	r2, [pc, #152]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a6e:	f023 0301 	bic.w	r3, r3, #1
 8008a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a74:	f7fe fa06 	bl	8006e84 <HAL_GetTick>
 8008a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a7a:	e008      	b.n	8008a8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a7c:	f7fe fa02 	bl	8006e84 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d901      	bls.n	8008a8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	e199      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f003 0302 	and.w	r3, r3, #2
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1f0      	bne.n	8008a7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 0308 	and.w	r3, r3, #8
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d038      	beq.n	8008b18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	695b      	ldr	r3, [r3, #20]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d019      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aae:	4b16      	ldr	r3, [pc, #88]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ab2:	4a15      	ldr	r2, [pc, #84]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008ab4:	f043 0301 	orr.w	r3, r3, #1
 8008ab8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aba:	f7fe f9e3 	bl	8006e84 <HAL_GetTick>
 8008abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ac2:	f7fe f9df 	bl	8006e84 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e176      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ad8:	f003 0302 	and.w	r3, r3, #2
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCC_OscConfig+0x23a>
 8008ae0:	e01a      	b.n	8008b18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008ae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ae6:	4a08      	ldr	r2, [pc, #32]	@ (8008b08 <HAL_RCC_OscConfig+0x280>)
 8008ae8:	f023 0301 	bic.w	r3, r3, #1
 8008aec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aee:	f7fe f9c9 	bl	8006e84 <HAL_GetTick>
 8008af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008af4:	e00a      	b.n	8008b0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008af6:	f7fe f9c5 	bl	8006e84 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d903      	bls.n	8008b0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e15c      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
 8008b08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b0c:	4b91      	ldr	r3, [pc, #580]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1ee      	bne.n	8008af6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0304 	and.w	r3, r3, #4
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	f000 80a4 	beq.w	8008c6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b26:	4b8b      	ldr	r3, [pc, #556]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10d      	bne.n	8008b4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b32:	4b88      	ldr	r3, [pc, #544]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b36:	4a87      	ldr	r2, [pc, #540]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8008b3e:	4b85      	ldr	r3, [pc, #532]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	60bb      	str	r3, [r7, #8]
 8008b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b4e:	4b82      	ldr	r3, [pc, #520]	@ (8008d58 <HAL_RCC_OscConfig+0x4d0>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d118      	bne.n	8008b8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008d58 <HAL_RCC_OscConfig+0x4d0>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008d58 <HAL_RCC_OscConfig+0x4d0>)
 8008b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b66:	f7fe f98d 	bl	8006e84 <HAL_GetTick>
 8008b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b6e:	f7fe f989 	bl	8006e84 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b64      	cmp	r3, #100	@ 0x64
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e120      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b80:	4b75      	ldr	r3, [pc, #468]	@ (8008d58 <HAL_RCC_OscConfig+0x4d0>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0f0      	beq.n	8008b6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d106      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x31a>
 8008b94:	4b6f      	ldr	r3, [pc, #444]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008b98:	4a6e      	ldr	r2, [pc, #440]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008ba0:	e02d      	b.n	8008bfe <HAL_RCC_OscConfig+0x376>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10c      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x33c>
 8008baa:	4b6a      	ldr	r3, [pc, #424]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bae:	4a69      	ldr	r2, [pc, #420]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bb6:	4b67      	ldr	r3, [pc, #412]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bba:	4a66      	ldr	r2, [pc, #408]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bbc:	f023 0304 	bic.w	r3, r3, #4
 8008bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bc2:	e01c      	b.n	8008bfe <HAL_RCC_OscConfig+0x376>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	2b05      	cmp	r3, #5
 8008bca:	d10c      	bne.n	8008be6 <HAL_RCC_OscConfig+0x35e>
 8008bcc:	4b61      	ldr	r3, [pc, #388]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bd0:	4a60      	ldr	r2, [pc, #384]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bd2:	f043 0304 	orr.w	r3, r3, #4
 8008bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bd8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bdc:	4a5d      	ldr	r2, [pc, #372]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bde:	f043 0301 	orr.w	r3, r3, #1
 8008be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8008be4:	e00b      	b.n	8008bfe <HAL_RCC_OscConfig+0x376>
 8008be6:	4b5b      	ldr	r3, [pc, #364]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008be8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bea:	4a5a      	ldr	r2, [pc, #360]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bec:	f023 0301 	bic.w	r3, r3, #1
 8008bf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8008bf2:	4b58      	ldr	r3, [pc, #352]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008bf6:	4a57      	ldr	r2, [pc, #348]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008bf8:	f023 0304 	bic.w	r3, r3, #4
 8008bfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d015      	beq.n	8008c32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c06:	f7fe f93d 	bl	8006e84 <HAL_GetTick>
 8008c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c0c:	e00a      	b.n	8008c24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c0e:	f7fe f939 	bl	8006e84 <HAL_GetTick>
 8008c12:	4602      	mov	r2, r0
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	1ad3      	subs	r3, r2, r3
 8008c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e0ce      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c24:	4b4b      	ldr	r3, [pc, #300]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0ee      	beq.n	8008c0e <HAL_RCC_OscConfig+0x386>
 8008c30:	e014      	b.n	8008c5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c32:	f7fe f927 	bl	8006e84 <HAL_GetTick>
 8008c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c38:	e00a      	b.n	8008c50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c3a:	f7fe f923 	bl	8006e84 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d901      	bls.n	8008c50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e0b8      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c50:	4b40      	ldr	r3, [pc, #256]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1ee      	bne.n	8008c3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c5c:	7dfb      	ldrb	r3, [r7, #23]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d105      	bne.n	8008c6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c62:	4b3c      	ldr	r3, [pc, #240]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c66:	4a3b      	ldr	r2, [pc, #236]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c6c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 80a4 	beq.w	8008dc0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c78:	4b36      	ldr	r3, [pc, #216]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f003 030c 	and.w	r3, r3, #12
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d06b      	beq.n	8008d5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d149      	bne.n	8008d20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c8c:	4b31      	ldr	r3, [pc, #196]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a30      	ldr	r2, [pc, #192]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c98:	f7fe f8f4 	bl	8006e84 <HAL_GetTick>
 8008c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c9e:	e008      	b.n	8008cb2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ca0:	f7fe f8f0 	bl	8006e84 <HAL_GetTick>
 8008ca4:	4602      	mov	r2, r0
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	1ad3      	subs	r3, r2, r3
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	d901      	bls.n	8008cb2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	e087      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008cb2:	4b28      	ldr	r3, [pc, #160]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f0      	bne.n	8008ca0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69da      	ldr	r2, [r3, #28]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ccc:	019b      	lsls	r3, r3, #6
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cd4:	085b      	lsrs	r3, r3, #1
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	041b      	lsls	r3, r3, #16
 8008cda:	431a      	orrs	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce0:	061b      	lsls	r3, r3, #24
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	4a1b      	ldr	r2, [pc, #108]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008ce6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008cea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cec:	4b19      	ldr	r3, [pc, #100]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a18      	ldr	r2, [pc, #96]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008cf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf8:	f7fe f8c4 	bl	8006e84 <HAL_GetTick>
 8008cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cfe:	e008      	b.n	8008d12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d00:	f7fe f8c0 	bl	8006e84 <HAL_GetTick>
 8008d04:	4602      	mov	r2, r0
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d901      	bls.n	8008d12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	e057      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d12:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d0f0      	beq.n	8008d00 <HAL_RCC_OscConfig+0x478>
 8008d1e:	e04f      	b.n	8008dc0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d20:	4b0c      	ldr	r3, [pc, #48]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a0b      	ldr	r2, [pc, #44]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008d26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2c:	f7fe f8aa 	bl	8006e84 <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d32:	e008      	b.n	8008d46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d34:	f7fe f8a6 	bl	8006e84 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e03d      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d46:	4b03      	ldr	r3, [pc, #12]	@ (8008d54 <HAL_RCC_OscConfig+0x4cc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f0      	bne.n	8008d34 <HAL_RCC_OscConfig+0x4ac>
 8008d52:	e035      	b.n	8008dc0 <HAL_RCC_OscConfig+0x538>
 8008d54:	40023800 	.word	0x40023800
 8008d58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8008dcc <HAL_RCC_OscConfig+0x544>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	699b      	ldr	r3, [r3, #24]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d028      	beq.n	8008dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d121      	bne.n	8008dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d11a      	bne.n	8008dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d111      	bne.n	8008dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da2:	085b      	lsrs	r3, r3, #1
 8008da4:	3b01      	subs	r3, #1
 8008da6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d107      	bne.n	8008dbc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008db6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	40023800 	.word	0x40023800

08008dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e0d0      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008de8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 030f 	and.w	r3, r3, #15
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d910      	bls.n	8008e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df6:	4b67      	ldr	r3, [pc, #412]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f023 020f 	bic.w	r2, r3, #15
 8008dfe:	4965      	ldr	r1, [pc, #404]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	4b63      	ldr	r3, [pc, #396]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 030f 	and.w	r3, r3, #15
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d001      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e0b8      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0302 	and.w	r3, r3, #2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d020      	beq.n	8008e66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d005      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e30:	4b59      	ldr	r3, [pc, #356]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4a58      	ldr	r2, [pc, #352]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008e3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0308 	and.w	r3, r3, #8
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d005      	beq.n	8008e54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e48:	4b53      	ldr	r3, [pc, #332]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4a52      	ldr	r2, [pc, #328]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e54:	4b50      	ldr	r3, [pc, #320]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	494d      	ldr	r1, [pc, #308]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0301 	and.w	r3, r3, #1
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d040      	beq.n	8008ef4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d107      	bne.n	8008e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e7a:	4b47      	ldr	r3, [pc, #284]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d115      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e07f      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d107      	bne.n	8008ea2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e92:	4b41      	ldr	r3, [pc, #260]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d109      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e073      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e06b      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008eb2:	4b39      	ldr	r3, [pc, #228]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f023 0203 	bic.w	r2, r3, #3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	4936      	ldr	r1, [pc, #216]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec4:	f7fd ffde 	bl	8006e84 <HAL_GetTick>
 8008ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eca:	e00a      	b.n	8008ee2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ecc:	f7fd ffda 	bl	8006e84 <HAL_GetTick>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d901      	bls.n	8008ee2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ede:	2303      	movs	r3, #3
 8008ee0:	e053      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 020c 	and.w	r2, r3, #12
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d1eb      	bne.n	8008ecc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ef4:	4b27      	ldr	r3, [pc, #156]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 030f 	and.w	r3, r3, #15
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d210      	bcs.n	8008f24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f02:	4b24      	ldr	r3, [pc, #144]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 020f 	bic.w	r2, r3, #15
 8008f0a:	4922      	ldr	r1, [pc, #136]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f12:	4b20      	ldr	r3, [pc, #128]	@ (8008f94 <HAL_RCC_ClockConfig+0x1c4>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 030f 	and.w	r3, r3, #15
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d001      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e032      	b.n	8008f8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f30:	4b19      	ldr	r3, [pc, #100]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	4916      	ldr	r1, [pc, #88]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0308 	and.w	r3, r3, #8
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f4e:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	490e      	ldr	r1, [pc, #56]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f62:	f000 f821 	bl	8008fa8 <HAL_RCC_GetSysClockFreq>
 8008f66:	4602      	mov	r2, r0
 8008f68:	4b0b      	ldr	r3, [pc, #44]	@ (8008f98 <HAL_RCC_ClockConfig+0x1c8>)
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	091b      	lsrs	r3, r3, #4
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	490a      	ldr	r1, [pc, #40]	@ (8008f9c <HAL_RCC_ClockConfig+0x1cc>)
 8008f74:	5ccb      	ldrb	r3, [r1, r3]
 8008f76:	fa22 f303 	lsr.w	r3, r2, r3
 8008f7a:	4a09      	ldr	r2, [pc, #36]	@ (8008fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8008f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f7e:	4b09      	ldr	r3, [pc, #36]	@ (8008fa4 <HAL_RCC_ClockConfig+0x1d4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fd fd1e 	bl	80069c4 <HAL_InitTick>

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40023c00 	.word	0x40023c00
 8008f98:	40023800 	.word	0x40023800
 8008f9c:	0801893c 	.word	0x0801893c
 8008fa0:	20000054 	.word	0x20000054
 8008fa4:	20000058 	.word	0x20000058

08008fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fac:	b094      	sub	sp, #80	@ 0x50
 8008fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fb8:	2300      	movs	r3, #0
 8008fba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fc0:	4b79      	ldr	r3, [pc, #484]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 030c 	and.w	r3, r3, #12
 8008fc8:	2b08      	cmp	r3, #8
 8008fca:	d00d      	beq.n	8008fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	f200 80e1 	bhi.w	8009194 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d002      	beq.n	8008fdc <HAL_RCC_GetSysClockFreq+0x34>
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d003      	beq.n	8008fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008fda:	e0db      	b.n	8009194 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fdc:	4b73      	ldr	r3, [pc, #460]	@ (80091ac <HAL_RCC_GetSysClockFreq+0x204>)
 8008fde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008fe0:	e0db      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fe2:	4b73      	ldr	r3, [pc, #460]	@ (80091b0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008fe6:	e0d8      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ff0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008ff2:	4b6d      	ldr	r3, [pc, #436]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d063      	beq.n	80090c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	099b      	lsrs	r3, r3, #6
 8009004:	2200      	movs	r2, #0
 8009006:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009008:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800900a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	633b      	str	r3, [r7, #48]	@ 0x30
 8009012:	2300      	movs	r3, #0
 8009014:	637b      	str	r3, [r7, #52]	@ 0x34
 8009016:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	f04f 0000 	mov.w	r0, #0
 8009022:	f04f 0100 	mov.w	r1, #0
 8009026:	0159      	lsls	r1, r3, #5
 8009028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800902c:	0150      	lsls	r0, r2, #5
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4621      	mov	r1, r4
 8009034:	1a51      	subs	r1, r2, r1
 8009036:	6139      	str	r1, [r7, #16]
 8009038:	4629      	mov	r1, r5
 800903a:	eb63 0301 	sbc.w	r3, r3, r1
 800903e:	617b      	str	r3, [r7, #20]
 8009040:	f04f 0200 	mov.w	r2, #0
 8009044:	f04f 0300 	mov.w	r3, #0
 8009048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800904c:	4659      	mov	r1, fp
 800904e:	018b      	lsls	r3, r1, #6
 8009050:	4651      	mov	r1, sl
 8009052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009056:	4651      	mov	r1, sl
 8009058:	018a      	lsls	r2, r1, #6
 800905a:	4651      	mov	r1, sl
 800905c:	ebb2 0801 	subs.w	r8, r2, r1
 8009060:	4659      	mov	r1, fp
 8009062:	eb63 0901 	sbc.w	r9, r3, r1
 8009066:	f04f 0200 	mov.w	r2, #0
 800906a:	f04f 0300 	mov.w	r3, #0
 800906e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009072:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009076:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800907a:	4690      	mov	r8, r2
 800907c:	4699      	mov	r9, r3
 800907e:	4623      	mov	r3, r4
 8009080:	eb18 0303 	adds.w	r3, r8, r3
 8009084:	60bb      	str	r3, [r7, #8]
 8009086:	462b      	mov	r3, r5
 8009088:	eb49 0303 	adc.w	r3, r9, r3
 800908c:	60fb      	str	r3, [r7, #12]
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800909a:	4629      	mov	r1, r5
 800909c:	024b      	lsls	r3, r1, #9
 800909e:	4621      	mov	r1, r4
 80090a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80090a4:	4621      	mov	r1, r4
 80090a6:	024a      	lsls	r2, r1, #9
 80090a8:	4610      	mov	r0, r2
 80090aa:	4619      	mov	r1, r3
 80090ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090ae:	2200      	movs	r2, #0
 80090b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80090b8:	f7f7 fdc8 	bl	8000c4c <__aeabi_uldivmod>
 80090bc:	4602      	mov	r2, r0
 80090be:	460b      	mov	r3, r1
 80090c0:	4613      	mov	r3, r2
 80090c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090c4:	e058      	b.n	8009178 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80090c6:	4b38      	ldr	r3, [pc, #224]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	099b      	lsrs	r3, r3, #6
 80090cc:	2200      	movs	r2, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	4611      	mov	r1, r2
 80090d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80090d6:	623b      	str	r3, [r7, #32]
 80090d8:	2300      	movs	r3, #0
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
 80090dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80090e0:	4642      	mov	r2, r8
 80090e2:	464b      	mov	r3, r9
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	0159      	lsls	r1, r3, #5
 80090ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090f2:	0150      	lsls	r0, r2, #5
 80090f4:	4602      	mov	r2, r0
 80090f6:	460b      	mov	r3, r1
 80090f8:	4641      	mov	r1, r8
 80090fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80090fe:	4649      	mov	r1, r9
 8009100:	eb63 0b01 	sbc.w	fp, r3, r1
 8009104:	f04f 0200 	mov.w	r2, #0
 8009108:	f04f 0300 	mov.w	r3, #0
 800910c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009110:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009114:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009118:	ebb2 040a 	subs.w	r4, r2, sl
 800911c:	eb63 050b 	sbc.w	r5, r3, fp
 8009120:	f04f 0200 	mov.w	r2, #0
 8009124:	f04f 0300 	mov.w	r3, #0
 8009128:	00eb      	lsls	r3, r5, #3
 800912a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800912e:	00e2      	lsls	r2, r4, #3
 8009130:	4614      	mov	r4, r2
 8009132:	461d      	mov	r5, r3
 8009134:	4643      	mov	r3, r8
 8009136:	18e3      	adds	r3, r4, r3
 8009138:	603b      	str	r3, [r7, #0]
 800913a:	464b      	mov	r3, r9
 800913c:	eb45 0303 	adc.w	r3, r5, r3
 8009140:	607b      	str	r3, [r7, #4]
 8009142:	f04f 0200 	mov.w	r2, #0
 8009146:	f04f 0300 	mov.w	r3, #0
 800914a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800914e:	4629      	mov	r1, r5
 8009150:	028b      	lsls	r3, r1, #10
 8009152:	4621      	mov	r1, r4
 8009154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009158:	4621      	mov	r1, r4
 800915a:	028a      	lsls	r2, r1, #10
 800915c:	4610      	mov	r0, r2
 800915e:	4619      	mov	r1, r3
 8009160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009162:	2200      	movs	r2, #0
 8009164:	61bb      	str	r3, [r7, #24]
 8009166:	61fa      	str	r2, [r7, #28]
 8009168:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800916c:	f7f7 fd6e 	bl	8000c4c <__aeabi_uldivmod>
 8009170:	4602      	mov	r2, r0
 8009172:	460b      	mov	r3, r1
 8009174:	4613      	mov	r3, r2
 8009176:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009178:	4b0b      	ldr	r3, [pc, #44]	@ (80091a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	0c1b      	lsrs	r3, r3, #16
 800917e:	f003 0303 	and.w	r3, r3, #3
 8009182:	3301      	adds	r3, #1
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8009188:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800918a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009192:	e002      	b.n	800919a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009194:	4b05      	ldr	r3, [pc, #20]	@ (80091ac <HAL_RCC_GetSysClockFreq+0x204>)
 8009196:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800919a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800919c:	4618      	mov	r0, r3
 800919e:	3750      	adds	r7, #80	@ 0x50
 80091a0:	46bd      	mov	sp, r7
 80091a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091a6:	bf00      	nop
 80091a8:	40023800 	.word	0x40023800
 80091ac:	00f42400 	.word	0x00f42400
 80091b0:	007a1200 	.word	0x007a1200

080091b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091b4:	b480      	push	{r7}
 80091b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091b8:	4b03      	ldr	r3, [pc, #12]	@ (80091c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80091ba:	681b      	ldr	r3, [r3, #0]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	20000054 	.word	0x20000054

080091cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80091d0:	f7ff fff0 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 80091d4:	4602      	mov	r2, r0
 80091d6:	4b05      	ldr	r3, [pc, #20]	@ (80091ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80091d8:	689b      	ldr	r3, [r3, #8]
 80091da:	0a9b      	lsrs	r3, r3, #10
 80091dc:	f003 0307 	and.w	r3, r3, #7
 80091e0:	4903      	ldr	r1, [pc, #12]	@ (80091f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091e2:	5ccb      	ldrb	r3, [r1, r3]
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	40023800 	.word	0x40023800
 80091f0:	0801894c 	.word	0x0801894c

080091f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091f8:	f7ff ffdc 	bl	80091b4 <HAL_RCC_GetHCLKFreq>
 80091fc:	4602      	mov	r2, r0
 80091fe:	4b05      	ldr	r3, [pc, #20]	@ (8009214 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009200:	689b      	ldr	r3, [r3, #8]
 8009202:	0b5b      	lsrs	r3, r3, #13
 8009204:	f003 0307 	and.w	r3, r3, #7
 8009208:	4903      	ldr	r1, [pc, #12]	@ (8009218 <HAL_RCC_GetPCLK2Freq+0x24>)
 800920a:	5ccb      	ldrb	r3, [r1, r3]
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40023800 	.word	0x40023800
 8009218:	0801894c 	.word	0x0801894c

0800921c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	220f      	movs	r2, #15
 800922a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800922c:	4b12      	ldr	r3, [pc, #72]	@ (8009278 <HAL_RCC_GetClockConfig+0x5c>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f003 0203 	and.w	r2, r3, #3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009238:	4b0f      	ldr	r3, [pc, #60]	@ (8009278 <HAL_RCC_GetClockConfig+0x5c>)
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009244:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <HAL_RCC_GetClockConfig+0x5c>)
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009250:	4b09      	ldr	r3, [pc, #36]	@ (8009278 <HAL_RCC_GetClockConfig+0x5c>)
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	08db      	lsrs	r3, r3, #3
 8009256:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800925e:	4b07      	ldr	r3, [pc, #28]	@ (800927c <HAL_RCC_GetClockConfig+0x60>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f003 020f 	and.w	r2, r3, #15
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	601a      	str	r2, [r3, #0]
}
 800926a:	bf00      	nop
 800926c:	370c      	adds	r7, #12
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40023800 	.word	0x40023800
 800927c:	40023c00 	.word	0x40023c00

08009280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b088      	sub	sp, #32
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009294:	2300      	movs	r3, #0
 8009296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009298:	2300      	movs	r3, #0
 800929a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 0301 	and.w	r3, r3, #1
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d012      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80092a8:	4b69      	ldr	r3, [pc, #420]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	4a68      	ldr	r2, [pc, #416]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ae:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80092b2:	6093      	str	r3, [r2, #8]
 80092b4:	4b66      	ldr	r3, [pc, #408]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092bc:	4964      	ldr	r1, [pc, #400]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80092ca:	2301      	movs	r3, #1
 80092cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d017      	beq.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80092da:	4b5d      	ldr	r3, [pc, #372]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092e8:	4959      	ldr	r1, [pc, #356]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ea:	4313      	orrs	r3, r2
 80092ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f8:	d101      	bne.n	80092fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80092fa:	2301      	movs	r3, #1
 80092fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d101      	bne.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009306:	2301      	movs	r3, #1
 8009308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d017      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009316:	4b4e      	ldr	r3, [pc, #312]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800931c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009324:	494a      	ldr	r1, [pc, #296]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009326:	4313      	orrs	r3, r2
 8009328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009334:	d101      	bne.n	800933a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009336:	2301      	movs	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009342:	2301      	movs	r3, #1
 8009344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009352:	2301      	movs	r3, #1
 8009354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 808b 	beq.w	800947a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009364:	4b3a      	ldr	r3, [pc, #232]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009368:	4a39      	ldr	r2, [pc, #228]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800936a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800936e:	6413      	str	r3, [r2, #64]	@ 0x40
 8009370:	4b37      	ldr	r3, [pc, #220]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800937c:	4b35      	ldr	r3, [pc, #212]	@ (8009454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a34      	ldr	r2, [pc, #208]	@ (8009454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009388:	f7fd fd7c 	bl	8006e84 <HAL_GetTick>
 800938c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800938e:	e008      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009390:	f7fd fd78 	bl	8006e84 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b64      	cmp	r3, #100	@ 0x64
 800939c:	d901      	bls.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e357      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80093a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80093ae:	4b28      	ldr	r3, [pc, #160]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d035      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d02e      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093cc:	4b20      	ldr	r3, [pc, #128]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80093d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093da:	4a1d      	ldr	r2, [pc, #116]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093e0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80093e2:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e6:	4a1a      	ldr	r2, [pc, #104]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80093ee:	4a18      	ldr	r2, [pc, #96]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80093f4:	4b16      	ldr	r3, [pc, #88]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f8:	f003 0301 	and.w	r3, r3, #1
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d114      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009400:	f7fd fd40 	bl	8006e84 <HAL_GetTick>
 8009404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009406:	e00a      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009408:	f7fd fd3c 	bl	8006e84 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009416:	4293      	cmp	r3, r2
 8009418:	d901      	bls.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e319      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800941e:	4b0c      	ldr	r3, [pc, #48]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009420:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009422:	f003 0302 	and.w	r3, r3, #2
 8009426:	2b00      	cmp	r3, #0
 8009428:	d0ee      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800942e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009436:	d111      	bne.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009438:	4b05      	ldr	r3, [pc, #20]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8009444:	4b04      	ldr	r3, [pc, #16]	@ (8009458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009446:	400b      	ands	r3, r1
 8009448:	4901      	ldr	r1, [pc, #4]	@ (8009450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800944a:	4313      	orrs	r3, r2
 800944c:	608b      	str	r3, [r1, #8]
 800944e:	e00b      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009450:	40023800 	.word	0x40023800
 8009454:	40007000 	.word	0x40007000
 8009458:	0ffffcff 	.word	0x0ffffcff
 800945c:	4baa      	ldr	r3, [pc, #680]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	4aa9      	ldr	r2, [pc, #676]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009462:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8009466:	6093      	str	r3, [r2, #8]
 8009468:	4ba7      	ldr	r3, [pc, #668]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800946a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009474:	49a4      	ldr	r1, [pc, #656]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009476:	4313      	orrs	r3, r2
 8009478:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0310 	and.w	r3, r3, #16
 8009482:	2b00      	cmp	r3, #0
 8009484:	d010      	beq.n	80094a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009486:	4ba0      	ldr	r3, [pc, #640]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009488:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800948c:	4a9e      	ldr	r2, [pc, #632]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800948e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009492:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8009496:	4b9c      	ldr	r3, [pc, #624]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009498:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a0:	4999      	ldr	r1, [pc, #612]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094a2:	4313      	orrs	r3, r2
 80094a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d00a      	beq.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094b4:	4b94      	ldr	r3, [pc, #592]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c2:	4991      	ldr	r1, [pc, #580]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00a      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80094d6:	4b8c      	ldr	r3, [pc, #560]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e4:	4988      	ldr	r1, [pc, #544]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00a      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094f8:	4b83      	ldr	r3, [pc, #524]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80094fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009506:	4980      	ldr	r1, [pc, #512]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009508:	4313      	orrs	r3, r2
 800950a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d00a      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800951a:	4b7b      	ldr	r3, [pc, #492]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800951c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009520:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009528:	4977      	ldr	r1, [pc, #476]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800952a:	4313      	orrs	r3, r2
 800952c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00a      	beq.n	8009552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800953c:	4b72      	ldr	r3, [pc, #456]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800953e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009542:	f023 0203 	bic.w	r2, r3, #3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800954a:	496f      	ldr	r1, [pc, #444]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00a      	beq.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800955e:	4b6a      	ldr	r3, [pc, #424]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009564:	f023 020c 	bic.w	r2, r3, #12
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800956c:	4966      	ldr	r1, [pc, #408]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800956e:	4313      	orrs	r3, r2
 8009570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00a      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009580:	4b61      	ldr	r3, [pc, #388]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009586:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800958e:	495e      	ldr	r1, [pc, #376]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009590:	4313      	orrs	r3, r2
 8009592:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d00a      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80095a2:	4b59      	ldr	r3, [pc, #356]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095b0:	4955      	ldr	r1, [pc, #340]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00a      	beq.n	80095da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80095c4:	4b50      	ldr	r3, [pc, #320]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d2:	494d      	ldr	r1, [pc, #308]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00a      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80095e6:	4b48      	ldr	r3, [pc, #288]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f4:	4944      	ldr	r1, [pc, #272]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d00a      	beq.n	800961e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009608:	4b3f      	ldr	r3, [pc, #252]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800960a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800960e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009616:	493c      	ldr	r1, [pc, #240]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009618:	4313      	orrs	r3, r2
 800961a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00a      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800962a:	4b37      	ldr	r3, [pc, #220]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800962c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009630:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009638:	4933      	ldr	r1, [pc, #204]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800963a:	4313      	orrs	r3, r2
 800963c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00a      	beq.n	8009662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800964c:	4b2e      	ldr	r3, [pc, #184]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800964e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009652:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800965a:	492b      	ldr	r1, [pc, #172]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d011      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800966e:	4b26      	ldr	r3, [pc, #152]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009674:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800967c:	4922      	ldr	r1, [pc, #136]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800967e:	4313      	orrs	r3, r2
 8009680:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800968c:	d101      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800968e:	2301      	movs	r3, #1
 8009690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0308 	and.w	r3, r3, #8
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800969e:	2301      	movs	r3, #1
 80096a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096ae:	4b16      	ldr	r3, [pc, #88]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096b4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096bc:	4912      	ldr	r1, [pc, #72]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80096d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096d6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096e0:	4909      	ldr	r1, [pc, #36]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096e2:	4313      	orrs	r3, r2
 80096e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d006      	beq.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 80d9 	beq.w	80098ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80096fc:	4b02      	ldr	r3, [pc, #8]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a01      	ldr	r2, [pc, #4]	@ (8009708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009702:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009706:	e001      	b.n	800970c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009708:	40023800 	.word	0x40023800
 800970c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800970e:	f7fd fbb9 	bl	8006e84 <HAL_GetTick>
 8009712:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009714:	e008      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009716:	f7fd fbb5 	bl	8006e84 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b64      	cmp	r3, #100	@ 0x64
 8009722:	d901      	bls.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e194      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009728:	4b6c      	ldr	r3, [pc, #432]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f0      	bne.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d021      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009744:	2b00      	cmp	r3, #0
 8009746:	d11d      	bne.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009748:	4b64      	ldr	r3, [pc, #400]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800974a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800974e:	0c1b      	lsrs	r3, r3, #16
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009756:	4b61      	ldr	r3, [pc, #388]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009758:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800975c:	0e1b      	lsrs	r3, r3, #24
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	019a      	lsls	r2, r3, #6
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	041b      	lsls	r3, r3, #16
 800976e:	431a      	orrs	r2, r3
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	061b      	lsls	r3, r3, #24
 8009774:	431a      	orrs	r2, r3
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	071b      	lsls	r3, r3, #28
 800977c:	4957      	ldr	r1, [pc, #348]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800977e:	4313      	orrs	r3, r2
 8009780:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d004      	beq.n	800979a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009794:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009798:	d00a      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d02e      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097ae:	d129      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80097b0:	4b4a      	ldr	r3, [pc, #296]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097b6:	0c1b      	lsrs	r3, r3, #16
 80097b8:	f003 0303 	and.w	r3, r3, #3
 80097bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80097be:	4b47      	ldr	r3, [pc, #284]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097c4:	0f1b      	lsrs	r3, r3, #28
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	019a      	lsls	r2, r3, #6
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	041b      	lsls	r3, r3, #16
 80097d6:	431a      	orrs	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	061b      	lsls	r3, r3, #24
 80097de:	431a      	orrs	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	071b      	lsls	r3, r3, #28
 80097e4:	493d      	ldr	r1, [pc, #244]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80097ec:	4b3b      	ldr	r3, [pc, #236]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097f2:	f023 021f 	bic.w	r2, r3, #31
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097fa:	3b01      	subs	r3, #1
 80097fc:	4937      	ldr	r1, [pc, #220]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d01d      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009810:	4b32      	ldr	r3, [pc, #200]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009812:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009816:	0e1b      	lsrs	r3, r3, #24
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800981e:	4b2f      	ldr	r3, [pc, #188]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009824:	0f1b      	lsrs	r3, r3, #28
 8009826:	f003 0307 	and.w	r3, r3, #7
 800982a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	019a      	lsls	r2, r3, #6
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	041b      	lsls	r3, r3, #16
 8009838:	431a      	orrs	r2, r3
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	431a      	orrs	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	071b      	lsls	r3, r3, #28
 8009844:	4925      	ldr	r1, [pc, #148]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009846:	4313      	orrs	r3, r2
 8009848:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d011      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	019a      	lsls	r2, r3, #6
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	041b      	lsls	r3, r3, #16
 8009864:	431a      	orrs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	061b      	lsls	r3, r3, #24
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	071b      	lsls	r3, r3, #28
 8009874:	4919      	ldr	r1, [pc, #100]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009876:	4313      	orrs	r3, r2
 8009878:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800987c:	4b17      	ldr	r3, [pc, #92]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a16      	ldr	r2, [pc, #88]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009882:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009888:	f7fd fafc 	bl	8006e84 <HAL_GetTick>
 800988c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800988e:	e008      	b.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009890:	f7fd faf8 	bl	8006e84 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	2b64      	cmp	r3, #100	@ 0x64
 800989c:	d901      	bls.n	80098a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800989e:	2303      	movs	r3, #3
 80098a0:	e0d7      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80098a2:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d0f0      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f040 80cd 	bne.w	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80098b6:	4b09      	ldr	r3, [pc, #36]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a08      	ldr	r2, [pc, #32]	@ (80098dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80098bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80098c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098c2:	f7fd fadf 	bl	8006e84 <HAL_GetTick>
 80098c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098c8:	e00a      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80098ca:	f7fd fadb 	bl	8006e84 <HAL_GetTick>
 80098ce:	4602      	mov	r2, r0
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	1ad3      	subs	r3, r2, r3
 80098d4:	2b64      	cmp	r3, #100	@ 0x64
 80098d6:	d903      	bls.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80098d8:	2303      	movs	r3, #3
 80098da:	e0ba      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80098dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80098e0:	4b5e      	ldr	r3, [pc, #376]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098ec:	d0ed      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d009      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800990a:	2b00      	cmp	r3, #0
 800990c:	d02e      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009912:	2b00      	cmp	r3, #0
 8009914:	d12a      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009916:	4b51      	ldr	r3, [pc, #324]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800991c:	0c1b      	lsrs	r3, r3, #16
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009924:	4b4d      	ldr	r3, [pc, #308]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800992a:	0f1b      	lsrs	r3, r3, #28
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	695b      	ldr	r3, [r3, #20]
 8009936:	019a      	lsls	r2, r3, #6
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	431a      	orrs	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	061b      	lsls	r3, r3, #24
 8009944:	431a      	orrs	r2, r3
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	071b      	lsls	r3, r3, #28
 800994a:	4944      	ldr	r1, [pc, #272]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800994c:	4313      	orrs	r3, r2
 800994e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009952:	4b42      	ldr	r3, [pc, #264]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009958:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009960:	3b01      	subs	r3, #1
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	493d      	ldr	r1, [pc, #244]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009966:	4313      	orrs	r3, r2
 8009968:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d022      	beq.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800997c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009980:	d11d      	bne.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009982:	4b36      	ldr	r3, [pc, #216]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	f003 030f 	and.w	r3, r3, #15
 800998e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009990:	4b32      	ldr	r3, [pc, #200]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009996:	0f1b      	lsrs	r3, r3, #28
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	695b      	ldr	r3, [r3, #20]
 80099a2:	019a      	lsls	r2, r3, #6
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	431a      	orrs	r2, r3
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	061b      	lsls	r3, r3, #24
 80099b0:	431a      	orrs	r2, r3
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	071b      	lsls	r3, r3, #28
 80099b6:	4929      	ldr	r1, [pc, #164]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099b8:	4313      	orrs	r3, r2
 80099ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d028      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80099ca:	4b24      	ldr	r3, [pc, #144]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d0:	0e1b      	lsrs	r3, r3, #24
 80099d2:	f003 030f 	and.w	r3, r3, #15
 80099d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80099d8:	4b20      	ldr	r3, [pc, #128]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80099da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099de:	0c1b      	lsrs	r3, r3, #16
 80099e0:	f003 0303 	and.w	r3, r3, #3
 80099e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	019a      	lsls	r2, r3, #6
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	041b      	lsls	r3, r3, #16
 80099f0:	431a      	orrs	r2, r3
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	061b      	lsls	r3, r3, #24
 80099f6:	431a      	orrs	r2, r3
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	69db      	ldr	r3, [r3, #28]
 80099fc:	071b      	lsls	r3, r3, #28
 80099fe:	4917      	ldr	r1, [pc, #92]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a00:	4313      	orrs	r3, r2
 8009a02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009a06:	4b15      	ldr	r3, [pc, #84]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	4911      	ldr	r1, [pc, #68]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a0e      	ldr	r2, [pc, #56]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a28:	f7fd fa2c 	bl	8006e84 <HAL_GetTick>
 8009a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a2e:	e008      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009a30:	f7fd fa28 	bl	8006e84 <HAL_GetTick>
 8009a34:	4602      	mov	r2, r0
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	1ad3      	subs	r3, r2, r3
 8009a3a:	2b64      	cmp	r3, #100	@ 0x64
 8009a3c:	d901      	bls.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e007      	b.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009a42:	4b06      	ldr	r3, [pc, #24]	@ (8009a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a4e:	d1ef      	bne.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40023800 	.word	0x40023800

08009a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d101      	bne.n	8009a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e09d      	b.n	8009bae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d108      	bne.n	8009a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a82:	d009      	beq.n	8009a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	61da      	str	r2, [r3, #28]
 8009a8a:	e005      	b.n	8009a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d106      	bne.n	8009ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7fc f9c0 	bl	8005e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68db      	ldr	r3, [r3, #12]
 8009ad4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ad8:	d902      	bls.n	8009ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	e002      	b.n	8009ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009aee:	d007      	beq.n	8009b00 <HAL_SPI_Init+0xa0>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009af8:	d002      	beq.n	8009b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009b10:	431a      	orrs	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0302 	and.w	r3, r3, #2
 8009b1a:	431a      	orrs	r2, r3
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	431a      	orrs	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b2e:	431a      	orrs	r2, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	69db      	ldr	r3, [r3, #28]
 8009b34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b38:	431a      	orrs	r2, r3
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b42:	ea42 0103 	orr.w	r1, r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b4a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	430a      	orrs	r2, r1
 8009b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	699b      	ldr	r3, [r3, #24]
 8009b5a:	0c1b      	lsrs	r3, r3, #16
 8009b5c:	f003 0204 	and.w	r2, r3, #4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b64:	f003 0310 	and.w	r3, r3, #16
 8009b68:	431a      	orrs	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009b6e:	f003 0308 	and.w	r3, r3, #8
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b7c:	ea42 0103 	orr.w	r1, r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	69da      	ldr	r2, [r3, #28]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b088      	sub	sp, #32
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	603b      	str	r3, [r7, #0]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d101      	bne.n	8009bd8 <HAL_SPI_Transmit+0x22>
 8009bd4:	2302      	movs	r3, #2
 8009bd6:	e15f      	b.n	8009e98 <HAL_SPI_Transmit+0x2e2>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009be0:	f7fd f950 	bl	8006e84 <HAL_GetTick>
 8009be4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009be6:	88fb      	ldrh	r3, [r7, #6]
 8009be8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d002      	beq.n	8009bfc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009bfa:	e148      	b.n	8009e8e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d002      	beq.n	8009c08 <HAL_SPI_Transmit+0x52>
 8009c02:	88fb      	ldrh	r3, [r7, #6]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c0c:	e13f      	b.n	8009e8e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2203      	movs	r2, #3
 8009c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	88fa      	ldrh	r2, [r7, #6]
 8009c26:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	88fa      	ldrh	r2, [r7, #6]
 8009c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2200      	movs	r2, #0
 8009c32:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2200      	movs	r2, #0
 8009c38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c58:	d10f      	bne.n	8009c7a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009c78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c84:	2b40      	cmp	r3, #64	@ 0x40
 8009c86:	d007      	beq.n	8009c98 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009ca0:	d94f      	bls.n	8009d42 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d002      	beq.n	8009cb0 <HAL_SPI_Transmit+0xfa>
 8009caa:	8afb      	ldrh	r3, [r7, #22]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d142      	bne.n	8009d36 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb4:	881a      	ldrh	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc0:	1c9a      	adds	r2, r3, #2
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009cd4:	e02f      	b.n	8009d36 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d112      	bne.n	8009d0a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce8:	881a      	ldrh	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cf4:	1c9a      	adds	r2, r3, #2
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d08:	e015      	b.n	8009d36 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d0a:	f7fd f8bb 	bl	8006e84 <HAL_GetTick>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	1ad3      	subs	r3, r2, r3
 8009d14:	683a      	ldr	r2, [r7, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d803      	bhi.n	8009d22 <HAL_SPI_Transmit+0x16c>
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d20:	d102      	bne.n	8009d28 <HAL_SPI_Transmit+0x172>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009d34:	e0ab      	b.n	8009e8e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1ca      	bne.n	8009cd6 <HAL_SPI_Transmit+0x120>
 8009d40:	e080      	b.n	8009e44 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	685b      	ldr	r3, [r3, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <HAL_SPI_Transmit+0x19a>
 8009d4a:	8afb      	ldrh	r3, [r7, #22]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d174      	bne.n	8009e3a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d912      	bls.n	8009d80 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5e:	881a      	ldrh	r2, [r3, #0]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d6a:	1c9a      	adds	r2, r3, #2
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	3b02      	subs	r3, #2
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009d7e:	e05c      	b.n	8009e3a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	330c      	adds	r3, #12
 8009d8a:	7812      	ldrb	r2, [r2, #0]
 8009d8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009da6:	e048      	b.n	8009e3a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f003 0302 	and.w	r3, r3, #2
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d12b      	bne.n	8009e0e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d912      	bls.n	8009de6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc4:	881a      	ldrh	r2, [r3, #0]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd0:	1c9a      	adds	r2, r3, #2
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b02      	subs	r3, #2
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009de4:	e029      	b.n	8009e3a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	330c      	adds	r3, #12
 8009df0:	7812      	ldrb	r2, [r2, #0]
 8009df2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	3b01      	subs	r3, #1
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e0c:	e015      	b.n	8009e3a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e0e:	f7fd f839 	bl	8006e84 <HAL_GetTick>
 8009e12:	4602      	mov	r2, r0
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d803      	bhi.n	8009e26 <HAL_SPI_Transmit+0x270>
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d102      	bne.n	8009e2c <HAL_SPI_Transmit+0x276>
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009e38:	e029      	b.n	8009e8e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1b1      	bne.n	8009da8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	6839      	ldr	r1, [r7, #0]
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 fb69 	bl	800a520 <SPI_EndRxTxTransaction>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2220      	movs	r2, #32
 8009e58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e62:	2300      	movs	r3, #0
 8009e64:	613b      	str	r3, [r7, #16]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	613b      	str	r3, [r7, #16]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d002      	beq.n	8009e86 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	77fb      	strb	r3, [r7, #31]
 8009e84:	e003      	b.n	8009e8e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3720      	adds	r7, #32
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08a      	sub	sp, #40	@ 0x28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_SPI_TransmitReceive+0x26>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e20a      	b.n	800a2dc <HAL_SPI_TransmitReceive+0x43c>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ece:	f7fc ffd9 	bl	8006e84 <HAL_GetTick>
 8009ed2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009eda:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009ee2:	887b      	ldrh	r3, [r7, #2]
 8009ee4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009ee6:	887b      	ldrh	r3, [r7, #2]
 8009ee8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009eea:	7efb      	ldrb	r3, [r7, #27]
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d00e      	beq.n	8009f0e <HAL_SPI_TransmitReceive+0x6e>
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ef6:	d106      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <HAL_SPI_TransmitReceive+0x66>
 8009f00:	7efb      	ldrb	r3, [r7, #27]
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d003      	beq.n	8009f0e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009f06:	2302      	movs	r3, #2
 8009f08:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009f0c:	e1e0      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <HAL_SPI_TransmitReceive+0x80>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_SPI_TransmitReceive+0x80>
 8009f1a:	887b      	ldrh	r3, [r7, #2]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009f26:	e1d3      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d003      	beq.n	8009f3c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2205      	movs	r2, #5
 8009f38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	887a      	ldrh	r2, [r7, #2]
 8009f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	887a      	ldrh	r2, [r7, #2]
 8009f54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	887a      	ldrh	r2, [r7, #2]
 8009f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	887a      	ldrh	r2, [r7, #2]
 8009f68:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f7e:	d802      	bhi.n	8009f86 <HAL_SPI_TransmitReceive+0xe6>
 8009f80:	8a3b      	ldrh	r3, [r7, #16]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d908      	bls.n	8009f98 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009f94:	605a      	str	r2, [r3, #4]
 8009f96:	e007      	b.n	8009fa8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009fa6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fb2:	2b40      	cmp	r3, #64	@ 0x40
 8009fb4:	d007      	beq.n	8009fc6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009fce:	f240 8081 	bls.w	800a0d4 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <HAL_SPI_TransmitReceive+0x140>
 8009fda:	8a7b      	ldrh	r3, [r7, #18]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d16d      	bne.n	800a0bc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fe4:	881a      	ldrh	r2, [r3, #0]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ff0:	1c9a      	adds	r2, r3, #2
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a004:	e05a      	b.n	800a0bc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 0302 	and.w	r3, r3, #2
 800a010:	2b02      	cmp	r3, #2
 800a012:	d11b      	bne.n	800a04c <HAL_SPI_TransmitReceive+0x1ac>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a018:	b29b      	uxth	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d016      	beq.n	800a04c <HAL_SPI_TransmitReceive+0x1ac>
 800a01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a020:	2b01      	cmp	r3, #1
 800a022:	d113      	bne.n	800a04c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a028:	881a      	ldrh	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a034:	1c9a      	adds	r2, r3, #2
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a03e:	b29b      	uxth	r3, r3
 800a040:	3b01      	subs	r3, #1
 800a042:	b29a      	uxth	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	2b01      	cmp	r3, #1
 800a058:	d11c      	bne.n	800a094 <HAL_SPI_TransmitReceive+0x1f4>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a060:	b29b      	uxth	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d016      	beq.n	800a094 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68da      	ldr	r2, [r3, #12]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a070:	b292      	uxth	r2, r2
 800a072:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a078:	1c9a      	adds	r2, r3, #2
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a084:	b29b      	uxth	r3, r3
 800a086:	3b01      	subs	r3, #1
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a090:	2301      	movs	r3, #1
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a094:	f7fc fef6 	bl	8006e84 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	69fb      	ldr	r3, [r7, #28]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d80b      	bhi.n	800a0bc <HAL_SPI_TransmitReceive+0x21c>
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0aa:	d007      	beq.n	800a0bc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a0ba:	e109      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d19f      	bne.n	800a006 <HAL_SPI_TransmitReceive+0x166>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d199      	bne.n	800a006 <HAL_SPI_TransmitReceive+0x166>
 800a0d2:	e0e3      	b.n	800a29c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <HAL_SPI_TransmitReceive+0x244>
 800a0dc:	8a7b      	ldrh	r3, [r7, #18]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	f040 80cf 	bne.w	800a282 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d912      	bls.n	800a114 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0f2:	881a      	ldrh	r2, [r3, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0fe:	1c9a      	adds	r2, r3, #2
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a108:	b29b      	uxth	r3, r3
 800a10a:	3b02      	subs	r3, #2
 800a10c:	b29a      	uxth	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a112:	e0b6      	b.n	800a282 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	330c      	adds	r3, #12
 800a11e:	7812      	ldrb	r2, [r2, #0]
 800a120:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a126:	1c5a      	adds	r2, r3, #1
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a130:	b29b      	uxth	r3, r3
 800a132:	3b01      	subs	r3, #1
 800a134:	b29a      	uxth	r2, r3
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a13a:	e0a2      	b.n	800a282 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f003 0302 	and.w	r3, r3, #2
 800a146:	2b02      	cmp	r3, #2
 800a148:	d134      	bne.n	800a1b4 <HAL_SPI_TransmitReceive+0x314>
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a14e:	b29b      	uxth	r3, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	d02f      	beq.n	800a1b4 <HAL_SPI_TransmitReceive+0x314>
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	2b01      	cmp	r3, #1
 800a158:	d12c      	bne.n	800a1b4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a15e:	b29b      	uxth	r3, r3
 800a160:	2b01      	cmp	r3, #1
 800a162:	d912      	bls.n	800a18a <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	881a      	ldrh	r2, [r3, #0]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a174:	1c9a      	adds	r2, r3, #2
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a17e:	b29b      	uxth	r3, r3
 800a180:	3b02      	subs	r3, #2
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a188:	e012      	b.n	800a1b0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	330c      	adds	r3, #12
 800a194:	7812      	ldrb	r2, [r2, #0]
 800a196:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a19c:	1c5a      	adds	r2, r3, #1
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d148      	bne.n	800a254 <HAL_SPI_TransmitReceive+0x3b4>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d042      	beq.n	800a254 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d923      	bls.n	800a222 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68da      	ldr	r2, [r3, #12]
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1e4:	b292      	uxth	r2, r2
 800a1e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1ec:	1c9a      	adds	r2, r3, #2
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b02      	subs	r3, #2
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d81f      	bhi.n	800a250 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a21e:	605a      	str	r2, [r3, #4]
 800a220:	e016      	b.n	800a250 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f103 020c 	add.w	r2, r3, #12
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a22e:	7812      	ldrb	r2, [r2, #0]
 800a230:	b2d2      	uxtb	r2, r2
 800a232:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a238:	1c5a      	adds	r2, r3, #1
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a244:	b29b      	uxth	r3, r3
 800a246:	3b01      	subs	r3, #1
 800a248:	b29a      	uxth	r2, r3
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a250:	2301      	movs	r3, #1
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a254:	f7fc fe16 	bl	8006e84 <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a260:	429a      	cmp	r2, r3
 800a262:	d803      	bhi.n	800a26c <HAL_SPI_TransmitReceive+0x3cc>
 800a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26a:	d102      	bne.n	800a272 <HAL_SPI_TransmitReceive+0x3d2>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d107      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a280:	e026      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f47f af57 	bne.w	800a13c <HAL_SPI_TransmitReceive+0x29c>
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	f47f af50 	bne.w	800a13c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f93d 	bl	800a520 <SPI_EndRxTxTransaction>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d005      	beq.n	800a2b8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2220      	movs	r2, #32
 800a2b6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a2c6:	e003      	b.n	800a2d0 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a2d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3728      	adds	r7, #40	@ 0x28
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2f4:	f7fc fdc6 	bl	8006e84 <HAL_GetTick>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	683a      	ldr	r2, [r7, #0]
 800a300:	4413      	add	r3, r2
 800a302:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a304:	f7fc fdbe 	bl	8006e84 <HAL_GetTick>
 800a308:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a30a:	4b39      	ldr	r3, [pc, #228]	@ (800a3f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	015b      	lsls	r3, r3, #5
 800a310:	0d1b      	lsrs	r3, r3, #20
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a31a:	e054      	b.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a322:	d050      	beq.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a324:	f7fc fdae 	bl	8006e84 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	429a      	cmp	r2, r3
 800a332:	d902      	bls.n	800a33a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d13d      	bne.n	800a3b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a348:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a352:	d111      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	689b      	ldr	r3, [r3, #8]
 800a358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a35c:	d004      	beq.n	800a368 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a366:	d107      	bne.n	800a378 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a376:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a37c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a380:	d10f      	bne.n	800a3a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a3a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	e017      	b.n	800a3e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d101      	bne.n	800a3c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4013      	ands	r3, r2
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	bf0c      	ite	eq
 800a3d6:	2301      	moveq	r3, #1
 800a3d8:	2300      	movne	r3, #0
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	461a      	mov	r2, r3
 800a3de:	79fb      	ldrb	r3, [r7, #7]
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d19b      	bne.n	800a31c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a3e4:	2300      	movs	r3, #0
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3720      	adds	r7, #32
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000054 	.word	0x20000054

0800a3f4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	@ 0x28
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
 800a400:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a402:	2300      	movs	r3, #0
 800a404:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a406:	f7fc fd3d 	bl	8006e84 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	1a9b      	subs	r3, r3, r2
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	4413      	add	r3, r2
 800a414:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a416:	f7fc fd35 	bl	8006e84 <HAL_GetTick>
 800a41a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a424:	4b3d      	ldr	r3, [pc, #244]	@ (800a51c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	00da      	lsls	r2, r3, #3
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	0d1b      	lsrs	r3, r3, #20
 800a434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a436:	fb02 f303 	mul.w	r3, r2, r3
 800a43a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a43c:	e060      	b.n	800a500 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a444:	d107      	bne.n	800a456 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d104      	bne.n	800a456 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a44c:	69fb      	ldr	r3, [r7, #28]
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b2db      	uxtb	r3, r3
 800a452:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a454:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d050      	beq.n	800a500 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a45e:	f7fc fd11 	bl	8006e84 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d902      	bls.n	800a474 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a46e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a470:	2b00      	cmp	r3, #0
 800a472:	d13d      	bne.n	800a4f0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	685a      	ldr	r2, [r3, #4]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a482:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a48c:	d111      	bne.n	800a4b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a496:	d004      	beq.n	800a4a2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689b      	ldr	r3, [r3, #8]
 800a49c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4a0:	d107      	bne.n	800a4b2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4b0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4ba:	d10f      	bne.n	800a4dc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4da:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2201      	movs	r2, #1
 800a4e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e010      	b.n	800a512 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	4013      	ands	r3, r2
 800a50a:	687a      	ldr	r2, [r7, #4]
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d196      	bne.n	800a43e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3728      	adds	r7, #40	@ 0x28
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000054 	.word	0x20000054

0800a520 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b088      	sub	sp, #32
 800a524:	af02      	add	r7, sp, #8
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f7ff ff5b 	bl	800a3f4 <SPI_WaitFifoStateUntilTimeout>
 800a53e:	4603      	mov	r3, r0
 800a540:	2b00      	cmp	r3, #0
 800a542:	d007      	beq.n	800a554 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a548:	f043 0220 	orr.w	r2, r3, #32
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e046      	b.n	800a5e2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a554:	4b25      	ldr	r3, [pc, #148]	@ (800a5ec <SPI_EndRxTxTransaction+0xcc>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a25      	ldr	r2, [pc, #148]	@ (800a5f0 <SPI_EndRxTxTransaction+0xd0>)
 800a55a:	fba2 2303 	umull	r2, r3, r2, r3
 800a55e:	0d5b      	lsrs	r3, r3, #21
 800a560:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a564:	fb02 f303 	mul.w	r3, r2, r3
 800a568:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a572:	d112      	bne.n	800a59a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	2200      	movs	r2, #0
 800a57c:	2180      	movs	r1, #128	@ 0x80
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff feb0 	bl	800a2e4 <SPI_WaitFlagStateUntilTimeout>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d016      	beq.n	800a5b8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a58e:	f043 0220 	orr.w	r2, r3, #32
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800a596:	2303      	movs	r3, #3
 800a598:	e023      	b.n	800a5e2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d00a      	beq.n	800a5b6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b0:	2b80      	cmp	r3, #128	@ 0x80
 800a5b2:	d0f2      	beq.n	800a59a <SPI_EndRxTxTransaction+0x7a>
 800a5b4:	e000      	b.n	800a5b8 <SPI_EndRxTxTransaction+0x98>
        break;
 800a5b6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f7ff ff15 	bl	800a3f4 <SPI_WaitFifoStateUntilTimeout>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d007      	beq.n	800a5e0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a5d4:	f043 0220 	orr.w	r2, r3, #32
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	e000      	b.n	800a5e2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000054 	.word	0x20000054
 800a5f0:	165e9f81 	.word	0x165e9f81

0800a5f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b082      	sub	sp, #8
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a602:	2301      	movs	r3, #1
 800a604:	e049      	b.n	800a69a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d106      	bne.n	800a620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f7fb fc6e 	bl	8005efc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3304      	adds	r3, #4
 800a630:	4619      	mov	r1, r3
 800a632:	4610      	mov	r0, r2
 800a634:	f001 f8e6 	bl	800b804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d001      	beq.n	800a6bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e04c      	b.n	800a756 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2202      	movs	r2, #2
 800a6c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a26      	ldr	r2, [pc, #152]	@ (800a764 <HAL_TIM_Base_Start+0xc0>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d022      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d6:	d01d      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a22      	ldr	r2, [pc, #136]	@ (800a768 <HAL_TIM_Base_Start+0xc4>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d018      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	4a21      	ldr	r2, [pc, #132]	@ (800a76c <HAL_TIM_Base_Start+0xc8>)
 800a6e8:	4293      	cmp	r3, r2
 800a6ea:	d013      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	4a1f      	ldr	r2, [pc, #124]	@ (800a770 <HAL_TIM_Base_Start+0xcc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d00e      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a1e      	ldr	r2, [pc, #120]	@ (800a774 <HAL_TIM_Base_Start+0xd0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d009      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a1c      	ldr	r2, [pc, #112]	@ (800a778 <HAL_TIM_Base_Start+0xd4>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d004      	beq.n	800a714 <HAL_TIM_Base_Start+0x70>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a1b      	ldr	r2, [pc, #108]	@ (800a77c <HAL_TIM_Base_Start+0xd8>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d115      	bne.n	800a740 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689a      	ldr	r2, [r3, #8]
 800a71a:	4b19      	ldr	r3, [pc, #100]	@ (800a780 <HAL_TIM_Base_Start+0xdc>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2b06      	cmp	r3, #6
 800a724:	d015      	beq.n	800a752 <HAL_TIM_Base_Start+0xae>
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a72c:	d011      	beq.n	800a752 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f042 0201 	orr.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a73e:	e008      	b.n	800a752 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f042 0201 	orr.w	r2, r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
 800a750:	e000      	b.n	800a754 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a752:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a754:	2300      	movs	r3, #0
}
 800a756:	4618      	mov	r0, r3
 800a758:	3714      	adds	r7, #20
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	40010000 	.word	0x40010000
 800a768:	40000400 	.word	0x40000400
 800a76c:	40000800 	.word	0x40000800
 800a770:	40000c00 	.word	0x40000c00
 800a774:	40010400 	.word	0x40010400
 800a778:	40014000 	.word	0x40014000
 800a77c:	40001800 	.word	0x40001800
 800a780:	00010007 	.word	0x00010007

0800a784 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6a1a      	ldr	r2, [r3, #32]
 800a792:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a796:	4013      	ands	r3, r2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d10f      	bne.n	800a7bc <HAL_TIM_Base_Stop+0x38>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	6a1a      	ldr	r2, [r3, #32]
 800a7a2:	f240 4344 	movw	r3, #1092	@ 0x444
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d107      	bne.n	800a7bc <HAL_TIM_Base_Stop+0x38>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 0201 	bic.w	r2, r2, #1
 800a7ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d001      	beq.n	800a7ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e054      	b.n	800a896 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2202      	movs	r2, #2
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0201 	orr.w	r2, r2, #1
 800a802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a26      	ldr	r2, [pc, #152]	@ (800a8a4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d022      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a816:	d01d      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a22      	ldr	r2, [pc, #136]	@ (800a8a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d018      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a21      	ldr	r2, [pc, #132]	@ (800a8ac <HAL_TIM_Base_Start_IT+0xd8>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d013      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a1f      	ldr	r2, [pc, #124]	@ (800a8b0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d00e      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8b4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d009      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a1c      	ldr	r2, [pc, #112]	@ (800a8b8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d004      	beq.n	800a854 <HAL_TIM_Base_Start_IT+0x80>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8bc <HAL_TIM_Base_Start_IT+0xe8>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d115      	bne.n	800a880 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	689a      	ldr	r2, [r3, #8]
 800a85a:	4b19      	ldr	r3, [pc, #100]	@ (800a8c0 <HAL_TIM_Base_Start_IT+0xec>)
 800a85c:	4013      	ands	r3, r2
 800a85e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2b06      	cmp	r3, #6
 800a864:	d015      	beq.n	800a892 <HAL_TIM_Base_Start_IT+0xbe>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a86c:	d011      	beq.n	800a892 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f042 0201 	orr.w	r2, r2, #1
 800a87c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a87e:	e008      	b.n	800a892 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	e000      	b.n	800a894 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a892:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	40010000 	.word	0x40010000
 800a8a8:	40000400 	.word	0x40000400
 800a8ac:	40000800 	.word	0x40000800
 800a8b0:	40000c00 	.word	0x40000c00
 800a8b4:	40010400 	.word	0x40010400
 800a8b8:	40014000 	.word	0x40014000
 800a8bc:	40001800 	.word	0x40001800
 800a8c0:	00010007 	.word	0x00010007

0800a8c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d101      	bne.n	800a8d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e049      	b.n	800a96a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d106      	bne.n	800a8f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7fb fbea 	bl	80060c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2202      	movs	r2, #2
 800a8f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	3304      	adds	r3, #4
 800a900:	4619      	mov	r1, r3
 800a902:	4610      	mov	r0, r2
 800a904:	f000 ff7e 	bl	800b804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2201      	movs	r2, #1
 800a90c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2201      	movs	r2, #1
 800a914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2201      	movs	r2, #1
 800a93c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2201      	movs	r2, #1
 800a94c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
	...

0800a974 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d109      	bne.n	800a998 <HAL_TIM_PWM_Start+0x24>
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	bf14      	ite	ne
 800a990:	2301      	movne	r3, #1
 800a992:	2300      	moveq	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	e03c      	b.n	800aa12 <HAL_TIM_PWM_Start+0x9e>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b04      	cmp	r3, #4
 800a99c:	d109      	bne.n	800a9b2 <HAL_TIM_PWM_Start+0x3e>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	bf14      	ite	ne
 800a9aa:	2301      	movne	r3, #1
 800a9ac:	2300      	moveq	r3, #0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	e02f      	b.n	800aa12 <HAL_TIM_PWM_Start+0x9e>
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d109      	bne.n	800a9cc <HAL_TIM_PWM_Start+0x58>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	bf14      	ite	ne
 800a9c4:	2301      	movne	r3, #1
 800a9c6:	2300      	moveq	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	e022      	b.n	800aa12 <HAL_TIM_PWM_Start+0x9e>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b0c      	cmp	r3, #12
 800a9d0:	d109      	bne.n	800a9e6 <HAL_TIM_PWM_Start+0x72>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	bf14      	ite	ne
 800a9de:	2301      	movne	r3, #1
 800a9e0:	2300      	moveq	r3, #0
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	e015      	b.n	800aa12 <HAL_TIM_PWM_Start+0x9e>
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	2b10      	cmp	r3, #16
 800a9ea:	d109      	bne.n	800aa00 <HAL_TIM_PWM_Start+0x8c>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	bf14      	ite	ne
 800a9f8:	2301      	movne	r3, #1
 800a9fa:	2300      	moveq	r3, #0
 800a9fc:	b2db      	uxtb	r3, r3
 800a9fe:	e008      	b.n	800aa12 <HAL_TIM_PWM_Start+0x9e>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	bf14      	ite	ne
 800aa0c:	2301      	movne	r3, #1
 800aa0e:	2300      	moveq	r3, #0
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e092      	b.n	800ab40 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d104      	bne.n	800aa2a <HAL_TIM_PWM_Start+0xb6>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa28:	e023      	b.n	800aa72 <HAL_TIM_PWM_Start+0xfe>
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b04      	cmp	r3, #4
 800aa2e:	d104      	bne.n	800aa3a <HAL_TIM_PWM_Start+0xc6>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2202      	movs	r2, #2
 800aa34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa38:	e01b      	b.n	800aa72 <HAL_TIM_PWM_Start+0xfe>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d104      	bne.n	800aa4a <HAL_TIM_PWM_Start+0xd6>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa48:	e013      	b.n	800aa72 <HAL_TIM_PWM_Start+0xfe>
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b0c      	cmp	r3, #12
 800aa4e:	d104      	bne.n	800aa5a <HAL_TIM_PWM_Start+0xe6>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2202      	movs	r2, #2
 800aa54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa58:	e00b      	b.n	800aa72 <HAL_TIM_PWM_Start+0xfe>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	2b10      	cmp	r3, #16
 800aa5e:	d104      	bne.n	800aa6a <HAL_TIM_PWM_Start+0xf6>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2202      	movs	r2, #2
 800aa64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa68:	e003      	b.n	800aa72 <HAL_TIM_PWM_Start+0xfe>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2201      	movs	r2, #1
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f001 fa66 	bl	800bf4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a30      	ldr	r2, [pc, #192]	@ (800ab48 <HAL_TIM_PWM_Start+0x1d4>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d004      	beq.n	800aa94 <HAL_TIM_PWM_Start+0x120>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	4a2f      	ldr	r2, [pc, #188]	@ (800ab4c <HAL_TIM_PWM_Start+0x1d8>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d101      	bne.n	800aa98 <HAL_TIM_PWM_Start+0x124>
 800aa94:	2301      	movs	r3, #1
 800aa96:	e000      	b.n	800aa9a <HAL_TIM_PWM_Start+0x126>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d007      	beq.n	800aaae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800aaac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a25      	ldr	r2, [pc, #148]	@ (800ab48 <HAL_TIM_PWM_Start+0x1d4>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d022      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aac0:	d01d      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a22      	ldr	r2, [pc, #136]	@ (800ab50 <HAL_TIM_PWM_Start+0x1dc>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d018      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a20      	ldr	r2, [pc, #128]	@ (800ab54 <HAL_TIM_PWM_Start+0x1e0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d013      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a1f      	ldr	r2, [pc, #124]	@ (800ab58 <HAL_TIM_PWM_Start+0x1e4>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d00e      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a19      	ldr	r2, [pc, #100]	@ (800ab4c <HAL_TIM_PWM_Start+0x1d8>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d009      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a1b      	ldr	r2, [pc, #108]	@ (800ab5c <HAL_TIM_PWM_Start+0x1e8>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d004      	beq.n	800aafe <HAL_TIM_PWM_Start+0x18a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a19      	ldr	r2, [pc, #100]	@ (800ab60 <HAL_TIM_PWM_Start+0x1ec>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d115      	bne.n	800ab2a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689a      	ldr	r2, [r3, #8]
 800ab04:	4b17      	ldr	r3, [pc, #92]	@ (800ab64 <HAL_TIM_PWM_Start+0x1f0>)
 800ab06:	4013      	ands	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b06      	cmp	r3, #6
 800ab0e:	d015      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x1c8>
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab16:	d011      	beq.n	800ab3c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0201 	orr.w	r2, r2, #1
 800ab26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab28:	e008      	b.n	800ab3c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f042 0201 	orr.w	r2, r2, #1
 800ab38:	601a      	str	r2, [r3, #0]
 800ab3a:	e000      	b.n	800ab3e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3710      	adds	r7, #16
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	40010000 	.word	0x40010000
 800ab4c:	40010400 	.word	0x40010400
 800ab50:	40000400 	.word	0x40000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	40000c00 	.word	0x40000c00
 800ab5c:	40014000 	.word	0x40014000
 800ab60:	40001800 	.word	0x40001800
 800ab64:	00010007 	.word	0x00010007

0800ab68 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d109      	bne.n	800ab90 <HAL_TIM_PWM_Start_IT+0x28>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	bf14      	ite	ne
 800ab88:	2301      	movne	r3, #1
 800ab8a:	2300      	moveq	r3, #0
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	e03c      	b.n	800ac0a <HAL_TIM_PWM_Start_IT+0xa2>
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	2b04      	cmp	r3, #4
 800ab94:	d109      	bne.n	800abaa <HAL_TIM_PWM_Start_IT+0x42>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	bf14      	ite	ne
 800aba2:	2301      	movne	r3, #1
 800aba4:	2300      	moveq	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	e02f      	b.n	800ac0a <HAL_TIM_PWM_Start_IT+0xa2>
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	2b08      	cmp	r3, #8
 800abae:	d109      	bne.n	800abc4 <HAL_TIM_PWM_Start_IT+0x5c>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	2b01      	cmp	r3, #1
 800abba:	bf14      	ite	ne
 800abbc:	2301      	movne	r3, #1
 800abbe:	2300      	moveq	r3, #0
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	e022      	b.n	800ac0a <HAL_TIM_PWM_Start_IT+0xa2>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	2b0c      	cmp	r3, #12
 800abc8:	d109      	bne.n	800abde <HAL_TIM_PWM_Start_IT+0x76>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	bf14      	ite	ne
 800abd6:	2301      	movne	r3, #1
 800abd8:	2300      	moveq	r3, #0
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	e015      	b.n	800ac0a <HAL_TIM_PWM_Start_IT+0xa2>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b10      	cmp	r3, #16
 800abe2:	d109      	bne.n	800abf8 <HAL_TIM_PWM_Start_IT+0x90>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b01      	cmp	r3, #1
 800abee:	bf14      	ite	ne
 800abf0:	2301      	movne	r3, #1
 800abf2:	2300      	moveq	r3, #0
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	e008      	b.n	800ac0a <HAL_TIM_PWM_Start_IT+0xa2>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	bf14      	ite	ne
 800ac04:	2301      	movne	r3, #1
 800ac06:	2300      	moveq	r3, #0
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e0dd      	b.n	800adce <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d104      	bne.n	800ac22 <HAL_TIM_PWM_Start_IT+0xba>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac20:	e023      	b.n	800ac6a <HAL_TIM_PWM_Start_IT+0x102>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d104      	bne.n	800ac32 <HAL_TIM_PWM_Start_IT+0xca>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2202      	movs	r2, #2
 800ac2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac30:	e01b      	b.n	800ac6a <HAL_TIM_PWM_Start_IT+0x102>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	2b08      	cmp	r3, #8
 800ac36:	d104      	bne.n	800ac42 <HAL_TIM_PWM_Start_IT+0xda>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac40:	e013      	b.n	800ac6a <HAL_TIM_PWM_Start_IT+0x102>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	2b0c      	cmp	r3, #12
 800ac46:	d104      	bne.n	800ac52 <HAL_TIM_PWM_Start_IT+0xea>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2202      	movs	r2, #2
 800ac4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac50:	e00b      	b.n	800ac6a <HAL_TIM_PWM_Start_IT+0x102>
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	2b10      	cmp	r3, #16
 800ac56:	d104      	bne.n	800ac62 <HAL_TIM_PWM_Start_IT+0xfa>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac60:	e003      	b.n	800ac6a <HAL_TIM_PWM_Start_IT+0x102>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2202      	movs	r2, #2
 800ac66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  switch (Channel)
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b0c      	cmp	r3, #12
 800ac6e:	d841      	bhi.n	800acf4 <HAL_TIM_PWM_Start_IT+0x18c>
 800ac70:	a201      	add	r2, pc, #4	@ (adr r2, 800ac78 <HAL_TIM_PWM_Start_IT+0x110>)
 800ac72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac76:	bf00      	nop
 800ac78:	0800acad 	.word	0x0800acad
 800ac7c:	0800acf5 	.word	0x0800acf5
 800ac80:	0800acf5 	.word	0x0800acf5
 800ac84:	0800acf5 	.word	0x0800acf5
 800ac88:	0800acbf 	.word	0x0800acbf
 800ac8c:	0800acf5 	.word	0x0800acf5
 800ac90:	0800acf5 	.word	0x0800acf5
 800ac94:	0800acf5 	.word	0x0800acf5
 800ac98:	0800acd1 	.word	0x0800acd1
 800ac9c:	0800acf5 	.word	0x0800acf5
 800aca0:	0800acf5 	.word	0x0800acf5
 800aca4:	0800acf5 	.word	0x0800acf5
 800aca8:	0800ace3 	.word	0x0800ace3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68da      	ldr	r2, [r3, #12]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0202 	orr.w	r2, r2, #2
 800acba:	60da      	str	r2, [r3, #12]
      break;
 800acbc:	e01d      	b.n	800acfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68da      	ldr	r2, [r3, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0204 	orr.w	r2, r2, #4
 800accc:	60da      	str	r2, [r3, #12]
      break;
 800acce:	e014      	b.n	800acfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68da      	ldr	r2, [r3, #12]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f042 0208 	orr.w	r2, r2, #8
 800acde:	60da      	str	r2, [r3, #12]
      break;
 800ace0:	e00b      	b.n	800acfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f042 0210 	orr.w	r2, r2, #16
 800acf0:	60da      	str	r2, [r3, #12]
      break;
 800acf2:	e002      	b.n	800acfa <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	73fb      	strb	r3, [r7, #15]
      break;
 800acf8:	bf00      	nop
  }

  if (status == HAL_OK)
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d165      	bne.n	800adcc <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2201      	movs	r2, #1
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f001 f91f 	bl	800bf4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a31      	ldr	r2, [pc, #196]	@ (800add8 <HAL_TIM_PWM_Start_IT+0x270>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d004      	beq.n	800ad22 <HAL_TIM_PWM_Start_IT+0x1ba>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a2f      	ldr	r2, [pc, #188]	@ (800addc <HAL_TIM_PWM_Start_IT+0x274>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d101      	bne.n	800ad26 <HAL_TIM_PWM_Start_IT+0x1be>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <HAL_TIM_PWM_Start_IT+0x1c0>
 800ad26:	2300      	movs	r3, #0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d007      	beq.n	800ad3c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad3a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a25      	ldr	r2, [pc, #148]	@ (800add8 <HAL_TIM_PWM_Start_IT+0x270>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d022      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad4e:	d01d      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a22      	ldr	r2, [pc, #136]	@ (800ade0 <HAL_TIM_PWM_Start_IT+0x278>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d018      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a21      	ldr	r2, [pc, #132]	@ (800ade4 <HAL_TIM_PWM_Start_IT+0x27c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d013      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a1f      	ldr	r2, [pc, #124]	@ (800ade8 <HAL_TIM_PWM_Start_IT+0x280>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00e      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a1a      	ldr	r2, [pc, #104]	@ (800addc <HAL_TIM_PWM_Start_IT+0x274>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d009      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a1b      	ldr	r2, [pc, #108]	@ (800adec <HAL_TIM_PWM_Start_IT+0x284>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d004      	beq.n	800ad8c <HAL_TIM_PWM_Start_IT+0x224>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a1a      	ldr	r2, [pc, #104]	@ (800adf0 <HAL_TIM_PWM_Start_IT+0x288>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d115      	bne.n	800adb8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	689a      	ldr	r2, [r3, #8]
 800ad92:	4b18      	ldr	r3, [pc, #96]	@ (800adf4 <HAL_TIM_PWM_Start_IT+0x28c>)
 800ad94:	4013      	ands	r3, r2
 800ad96:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2b06      	cmp	r3, #6
 800ad9c:	d015      	beq.n	800adca <HAL_TIM_PWM_Start_IT+0x262>
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada4:	d011      	beq.n	800adca <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f042 0201 	orr.w	r2, r2, #1
 800adb4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adb6:	e008      	b.n	800adca <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f042 0201 	orr.w	r2, r2, #1
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	e000      	b.n	800adcc <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800adca:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800adcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	40010000 	.word	0x40010000
 800addc:	40010400 	.word	0x40010400
 800ade0:	40000400 	.word	0x40000400
 800ade4:	40000800 	.word	0x40000800
 800ade8:	40000c00 	.word	0x40000c00
 800adec:	40014000 	.word	0x40014000
 800adf0:	40001800 	.word	0x40001800
 800adf4:	00010007 	.word	0x00010007

0800adf8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b0c      	cmp	r3, #12
 800ae0a:	d841      	bhi.n	800ae90 <HAL_TIM_PWM_Stop_IT+0x98>
 800ae0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae14 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800ae49 	.word	0x0800ae49
 800ae18:	0800ae91 	.word	0x0800ae91
 800ae1c:	0800ae91 	.word	0x0800ae91
 800ae20:	0800ae91 	.word	0x0800ae91
 800ae24:	0800ae5b 	.word	0x0800ae5b
 800ae28:	0800ae91 	.word	0x0800ae91
 800ae2c:	0800ae91 	.word	0x0800ae91
 800ae30:	0800ae91 	.word	0x0800ae91
 800ae34:	0800ae6d 	.word	0x0800ae6d
 800ae38:	0800ae91 	.word	0x0800ae91
 800ae3c:	0800ae91 	.word	0x0800ae91
 800ae40:	0800ae91 	.word	0x0800ae91
 800ae44:	0800ae7f 	.word	0x0800ae7f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0202 	bic.w	r2, r2, #2
 800ae56:	60da      	str	r2, [r3, #12]
      break;
 800ae58:	e01d      	b.n	800ae96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68da      	ldr	r2, [r3, #12]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f022 0204 	bic.w	r2, r2, #4
 800ae68:	60da      	str	r2, [r3, #12]
      break;
 800ae6a:	e014      	b.n	800ae96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68da      	ldr	r2, [r3, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f022 0208 	bic.w	r2, r2, #8
 800ae7a:	60da      	str	r2, [r3, #12]
      break;
 800ae7c:	e00b      	b.n	800ae96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68da      	ldr	r2, [r3, #12]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f022 0210 	bic.w	r2, r2, #16
 800ae8c:	60da      	str	r2, [r3, #12]
      break;
 800ae8e:	e002      	b.n	800ae96 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	73fb      	strb	r3, [r7, #15]
      break;
 800ae94:	bf00      	nop
  }

  if (status == HAL_OK)
 800ae96:	7bfb      	ldrb	r3, [r7, #15]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d171      	bne.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2200      	movs	r2, #0
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	4618      	mov	r0, r3
 800aea6:	f001 f851 	bl	800bf4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a37      	ldr	r2, [pc, #220]	@ (800af8c <HAL_TIM_PWM_Stop_IT+0x194>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d004      	beq.n	800aebe <HAL_TIM_PWM_Stop_IT+0xc6>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a35      	ldr	r2, [pc, #212]	@ (800af90 <HAL_TIM_PWM_Stop_IT+0x198>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d101      	bne.n	800aec2 <HAL_TIM_PWM_Stop_IT+0xca>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <HAL_TIM_PWM_Stop_IT+0xcc>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d017      	beq.n	800aef8 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6a1a      	ldr	r2, [r3, #32]
 800aece:	f241 1311 	movw	r3, #4369	@ 0x1111
 800aed2:	4013      	ands	r3, r2
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10f      	bne.n	800aef8 <HAL_TIM_PWM_Stop_IT+0x100>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	6a1a      	ldr	r2, [r3, #32]
 800aede:	f240 4344 	movw	r3, #1092	@ 0x444
 800aee2:	4013      	ands	r3, r2
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d107      	bne.n	800aef8 <HAL_TIM_PWM_Stop_IT+0x100>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800aef6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	6a1a      	ldr	r2, [r3, #32]
 800aefe:	f241 1311 	movw	r3, #4369	@ 0x1111
 800af02:	4013      	ands	r3, r2
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10f      	bne.n	800af28 <HAL_TIM_PWM_Stop_IT+0x130>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	6a1a      	ldr	r2, [r3, #32]
 800af0e:	f240 4344 	movw	r3, #1092	@ 0x444
 800af12:	4013      	ands	r3, r2
 800af14:	2b00      	cmp	r3, #0
 800af16:	d107      	bne.n	800af28 <HAL_TIM_PWM_Stop_IT+0x130>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f022 0201 	bic.w	r2, r2, #1
 800af26:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d104      	bne.n	800af38 <HAL_TIM_PWM_Stop_IT+0x140>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af36:	e023      	b.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d104      	bne.n	800af48 <HAL_TIM_PWM_Stop_IT+0x150>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2201      	movs	r2, #1
 800af42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af46:	e01b      	b.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b08      	cmp	r3, #8
 800af4c:	d104      	bne.n	800af58 <HAL_TIM_PWM_Stop_IT+0x160>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2201      	movs	r2, #1
 800af52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800af56:	e013      	b.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b0c      	cmp	r3, #12
 800af5c:	d104      	bne.n	800af68 <HAL_TIM_PWM_Stop_IT+0x170>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2201      	movs	r2, #1
 800af62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800af66:	e00b      	b.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b10      	cmp	r3, #16
 800af6c:	d104      	bne.n	800af78 <HAL_TIM_PWM_Stop_IT+0x180>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800af76:	e003      	b.n	800af80 <HAL_TIM_PWM_Stop_IT+0x188>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return status;
 800af80:	7bfb      	ldrb	r3, [r7, #15]
}
 800af82:	4618      	mov	r0, r3
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	40010000 	.word	0x40010000
 800af90:	40010400 	.word	0x40010400

0800af94 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b086      	sub	sp, #24
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d101      	bne.n	800afa8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e08f      	b.n	800b0c8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7fb f835 	bl	800602c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6899      	ldr	r1, [r3, #8]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	4b3e      	ldr	r3, [pc, #248]	@ (800b0d0 <HAL_TIM_Encoder_Init+0x13c>)
 800afd6:	400b      	ands	r3, r1
 800afd8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f000 fc0d 	bl	800b804 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	4313      	orrs	r3, r2
 800b00a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b00c:	693a      	ldr	r2, [r7, #16]
 800b00e:	4b31      	ldr	r3, [pc, #196]	@ (800b0d4 <HAL_TIM_Encoder_Init+0x140>)
 800b010:	4013      	ands	r3, r2
 800b012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	689a      	ldr	r2, [r3, #8]
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	021b      	lsls	r3, r3, #8
 800b01e:	4313      	orrs	r3, r2
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b026:	693a      	ldr	r2, [r7, #16]
 800b028:	4b2b      	ldr	r3, [pc, #172]	@ (800b0d8 <HAL_TIM_Encoder_Init+0x144>)
 800b02a:	4013      	ands	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	4b2a      	ldr	r3, [pc, #168]	@ (800b0dc <HAL_TIM_Encoder_Init+0x148>)
 800b032:	4013      	ands	r3, r2
 800b034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	69db      	ldr	r3, [r3, #28]
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	4313      	orrs	r3, r2
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	4313      	orrs	r3, r2
 800b046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	011a      	lsls	r2, r3, #4
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	031b      	lsls	r3, r3, #12
 800b054:	4313      	orrs	r3, r2
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	4313      	orrs	r3, r2
 800b05a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b062:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b06a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	011b      	lsls	r3, r3, #4
 800b076:	4313      	orrs	r3, r2
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	697a      	ldr	r2, [r7, #20]
 800b084:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68fa      	ldr	r2, [r7, #12]
 800b094:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2201      	movs	r2, #1
 800b0aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2201      	movs	r2, #1
 800b0b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	fffebff8 	.word	0xfffebff8
 800b0d4:	fffffcfc 	.word	0xfffffcfc
 800b0d8:	fffff3f3 	.word	0xfffff3f3
 800b0dc:	ffff0f0f 	.word	0xffff0f0f

0800b0e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b0f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b0f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b100:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b108:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d110      	bne.n	800b132 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b01      	cmp	r3, #1
 800b114:	d102      	bne.n	800b11c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b116:	7b7b      	ldrb	r3, [r7, #13]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d001      	beq.n	800b120 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e069      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2202      	movs	r2, #2
 800b124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2202      	movs	r2, #2
 800b12c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b130:	e031      	b.n	800b196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	2b04      	cmp	r3, #4
 800b136:	d110      	bne.n	800b15a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b138:	7bbb      	ldrb	r3, [r7, #14]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d102      	bne.n	800b144 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b13e:	7b3b      	ldrb	r3, [r7, #12]
 800b140:	2b01      	cmp	r3, #1
 800b142:	d001      	beq.n	800b148 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e055      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2202      	movs	r2, #2
 800b14c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b158:	e01d      	b.n	800b196 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b15a:	7bfb      	ldrb	r3, [r7, #15]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d108      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d105      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b166:	7b7b      	ldrb	r3, [r7, #13]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d102      	bne.n	800b172 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b16c:	7b3b      	ldrb	r3, [r7, #12]
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d001      	beq.n	800b176 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e03e      	b.n	800b1f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2202      	movs	r2, #2
 800b17a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2202      	movs	r2, #2
 800b182:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2202      	movs	r2, #2
 800b192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d003      	beq.n	800b1a4 <HAL_TIM_Encoder_Start+0xc4>
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d008      	beq.n	800b1b4 <HAL_TIM_Encoder_Start+0xd4>
 800b1a2:	e00f      	b.n	800b1c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f000 fecd 	bl	800bf4c <TIM_CCxChannelCmd>
      break;
 800b1b2:	e016      	b.n	800b1e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fec5 	bl	800bf4c <TIM_CCxChannelCmd>
      break;
 800b1c2:	e00e      	b.n	800b1e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f000 febd 	bl	800bf4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	2104      	movs	r1, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 feb6 	bl	800bf4c <TIM_CCxChannelCmd>
      break;
 800b1e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f042 0201 	orr.w	r2, r2, #1
 800b1f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	691b      	ldr	r3, [r3, #16]
 800b212:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d020      	beq.n	800b260 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f003 0302 	and.w	r3, r3, #2
 800b224:	2b00      	cmp	r3, #0
 800b226:	d01b      	beq.n	800b260 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f06f 0202 	mvn.w	r2, #2
 800b230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2201      	movs	r2, #1
 800b236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	f003 0303 	and.w	r3, r3, #3
 800b242:	2b00      	cmp	r3, #0
 800b244:	d003      	beq.n	800b24e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fac8 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b24c:	e005      	b.n	800b25a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f000 faba 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f7f6 feef 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	f003 0304 	and.w	r3, r3, #4
 800b266:	2b00      	cmp	r3, #0
 800b268:	d020      	beq.n	800b2ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01b      	beq.n	800b2ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f06f 0204 	mvn.w	r2, #4
 800b27c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2202      	movs	r2, #2
 800b282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	699b      	ldr	r3, [r3, #24]
 800b28a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f000 faa2 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b298:	e005      	b.n	800b2a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b29a:	6878      	ldr	r0, [r7, #4]
 800b29c:	f000 fa94 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7f6 fec9 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	f003 0308 	and.w	r3, r3, #8
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d020      	beq.n	800b2f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f003 0308 	and.w	r3, r3, #8
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d01b      	beq.n	800b2f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f06f 0208 	mvn.w	r2, #8
 800b2c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2204      	movs	r2, #4
 800b2ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	69db      	ldr	r3, [r3, #28]
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d003      	beq.n	800b2e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2de:	6878      	ldr	r0, [r7, #4]
 800b2e0:	f000 fa7c 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b2e4:	e005      	b.n	800b2f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa6e 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7f6 fea3 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	f003 0310 	and.w	r3, r3, #16
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d020      	beq.n	800b344 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01b      	beq.n	800b344 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f06f 0210 	mvn.w	r2, #16
 800b314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2208      	movs	r2, #8
 800b31a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa56 	bl	800b7dc <HAL_TIM_IC_CaptureCallback>
 800b330:	e005      	b.n	800b33e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f000 fa48 	bl	800b7c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7f6 fe7d 	bl	8002038 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f003 0301 	and.w	r3, r3, #1
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d00c      	beq.n	800b368 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	2b00      	cmp	r3, #0
 800b356:	d007      	beq.n	800b368 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f06f 0201 	mvn.w	r2, #1
 800b360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f7fa fcc8 	bl	8005cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d104      	bne.n	800b37c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00c      	beq.n	800b396 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b382:	2b00      	cmp	r3, #0
 800b384:	d007      	beq.n	800b396 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b38e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 ff17 	bl	800c1c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00c      	beq.n	800b3ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f000 ff0f 	bl	800c1d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00c      	beq.n	800b3de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d007      	beq.n	800b3de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f000 fa09 	bl	800b7f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00c      	beq.n	800b402 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f003 0320 	and.w	r3, r3, #32
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d007      	beq.n	800b402 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f06f 0220 	mvn.w	r2, #32
 800b3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 fed7 	bl	800c1b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b402:	bf00      	nop
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
	...

0800b40c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b086      	sub	sp, #24
 800b410:	af00      	add	r7, sp, #0
 800b412:	60f8      	str	r0, [r7, #12]
 800b414:	60b9      	str	r1, [r7, #8]
 800b416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b422:	2b01      	cmp	r3, #1
 800b424:	d101      	bne.n	800b42a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b426:	2302      	movs	r3, #2
 800b428:	e0ff      	b.n	800b62a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b14      	cmp	r3, #20
 800b436:	f200 80f0 	bhi.w	800b61a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b43a:	a201      	add	r2, pc, #4	@ (adr r2, 800b440 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b440:	0800b495 	.word	0x0800b495
 800b444:	0800b61b 	.word	0x0800b61b
 800b448:	0800b61b 	.word	0x0800b61b
 800b44c:	0800b61b 	.word	0x0800b61b
 800b450:	0800b4d5 	.word	0x0800b4d5
 800b454:	0800b61b 	.word	0x0800b61b
 800b458:	0800b61b 	.word	0x0800b61b
 800b45c:	0800b61b 	.word	0x0800b61b
 800b460:	0800b517 	.word	0x0800b517
 800b464:	0800b61b 	.word	0x0800b61b
 800b468:	0800b61b 	.word	0x0800b61b
 800b46c:	0800b61b 	.word	0x0800b61b
 800b470:	0800b557 	.word	0x0800b557
 800b474:	0800b61b 	.word	0x0800b61b
 800b478:	0800b61b 	.word	0x0800b61b
 800b47c:	0800b61b 	.word	0x0800b61b
 800b480:	0800b599 	.word	0x0800b599
 800b484:	0800b61b 	.word	0x0800b61b
 800b488:	0800b61b 	.word	0x0800b61b
 800b48c:	0800b61b 	.word	0x0800b61b
 800b490:	0800b5d9 	.word	0x0800b5d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	4618      	mov	r0, r3
 800b49c:	f000 fa5e 	bl	800b95c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f042 0208 	orr.w	r2, r2, #8
 800b4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	699a      	ldr	r2, [r3, #24]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f022 0204 	bic.w	r2, r2, #4
 800b4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6999      	ldr	r1, [r3, #24]
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	691a      	ldr	r2, [r3, #16]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	430a      	orrs	r2, r1
 800b4d0:	619a      	str	r2, [r3, #24]
      break;
 800b4d2:	e0a5      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68b9      	ldr	r1, [r7, #8]
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 fab0 	bl	800ba40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	699a      	ldr	r2, [r3, #24]
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b4ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	699a      	ldr	r2, [r3, #24]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6999      	ldr	r1, [r3, #24]
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	021a      	lsls	r2, r3, #8
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	430a      	orrs	r2, r1
 800b512:	619a      	str	r2, [r3, #24]
      break;
 800b514:	e084      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	68b9      	ldr	r1, [r7, #8]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 fb07 	bl	800bb30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	69da      	ldr	r2, [r3, #28]
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f042 0208 	orr.w	r2, r2, #8
 800b530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69da      	ldr	r2, [r3, #28]
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 0204 	bic.w	r2, r2, #4
 800b540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	69d9      	ldr	r1, [r3, #28]
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	691a      	ldr	r2, [r3, #16]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	430a      	orrs	r2, r1
 800b552:	61da      	str	r2, [r3, #28]
      break;
 800b554:	e064      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68b9      	ldr	r1, [r7, #8]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f000 fb5d 	bl	800bc1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	69da      	ldr	r2, [r3, #28]
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	69da      	ldr	r2, [r3, #28]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	69d9      	ldr	r1, [r3, #28]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	691b      	ldr	r3, [r3, #16]
 800b58c:	021a      	lsls	r2, r3, #8
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	61da      	str	r2, [r3, #28]
      break;
 800b596:	e043      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	68b9      	ldr	r1, [r7, #8]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f000 fb94 	bl	800bccc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f042 0208 	orr.w	r2, r2, #8
 800b5b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f022 0204 	bic.w	r2, r2, #4
 800b5c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	691a      	ldr	r2, [r3, #16]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	430a      	orrs	r2, r1
 800b5d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b5d6:	e023      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68b9      	ldr	r1, [r7, #8]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 fbc6 	bl	800bd70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b5f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b602:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	021a      	lsls	r2, r3, #8
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	430a      	orrs	r2, r1
 800b616:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b618:	e002      	b.n	800b620 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	75fb      	strb	r3, [r7, #23]
      break;
 800b61e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3718      	adds	r7, #24
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}
 800b632:	bf00      	nop

0800b634 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b648:	2b01      	cmp	r3, #1
 800b64a:	d101      	bne.n	800b650 <HAL_TIM_ConfigClockSource+0x1c>
 800b64c:	2302      	movs	r3, #2
 800b64e:	e0b4      	b.n	800b7ba <HAL_TIM_ConfigClockSource+0x186>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2202      	movs	r2, #2
 800b65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	4b56      	ldr	r3, [pc, #344]	@ (800b7c4 <HAL_TIM_ConfigClockSource+0x190>)
 800b66c:	4013      	ands	r3, r2
 800b66e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b676:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b688:	d03e      	beq.n	800b708 <HAL_TIM_ConfigClockSource+0xd4>
 800b68a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b68e:	f200 8087 	bhi.w	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b696:	f000 8086 	beq.w	800b7a6 <HAL_TIM_ConfigClockSource+0x172>
 800b69a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b69e:	d87f      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6a0:	2b70      	cmp	r3, #112	@ 0x70
 800b6a2:	d01a      	beq.n	800b6da <HAL_TIM_ConfigClockSource+0xa6>
 800b6a4:	2b70      	cmp	r3, #112	@ 0x70
 800b6a6:	d87b      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6a8:	2b60      	cmp	r3, #96	@ 0x60
 800b6aa:	d050      	beq.n	800b74e <HAL_TIM_ConfigClockSource+0x11a>
 800b6ac:	2b60      	cmp	r3, #96	@ 0x60
 800b6ae:	d877      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6b0:	2b50      	cmp	r3, #80	@ 0x50
 800b6b2:	d03c      	beq.n	800b72e <HAL_TIM_ConfigClockSource+0xfa>
 800b6b4:	2b50      	cmp	r3, #80	@ 0x50
 800b6b6:	d873      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6b8:	2b40      	cmp	r3, #64	@ 0x40
 800b6ba:	d058      	beq.n	800b76e <HAL_TIM_ConfigClockSource+0x13a>
 800b6bc:	2b40      	cmp	r3, #64	@ 0x40
 800b6be:	d86f      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6c0:	2b30      	cmp	r3, #48	@ 0x30
 800b6c2:	d064      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x15a>
 800b6c4:	2b30      	cmp	r3, #48	@ 0x30
 800b6c6:	d86b      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6c8:	2b20      	cmp	r3, #32
 800b6ca:	d060      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x15a>
 800b6cc:	2b20      	cmp	r3, #32
 800b6ce:	d867      	bhi.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d05c      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x15a>
 800b6d4:	2b10      	cmp	r3, #16
 800b6d6:	d05a      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x15a>
 800b6d8:	e062      	b.n	800b7a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b6ea:	f000 fc0f 	bl	800bf0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b6fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	609a      	str	r2, [r3, #8]
      break;
 800b706:	e04f      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b718:	f000 fbf8 	bl	800bf0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	689a      	ldr	r2, [r3, #8]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b72a:	609a      	str	r2, [r3, #8]
      break;
 800b72c:	e03c      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b73a:	461a      	mov	r2, r3
 800b73c:	f000 fb6c 	bl	800be18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	2150      	movs	r1, #80	@ 0x50
 800b746:	4618      	mov	r0, r3
 800b748:	f000 fbc5 	bl	800bed6 <TIM_ITRx_SetConfig>
      break;
 800b74c:	e02c      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b75a:	461a      	mov	r2, r3
 800b75c:	f000 fb8b 	bl	800be76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2160      	movs	r1, #96	@ 0x60
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fbb5 	bl	800bed6 <TIM_ITRx_SetConfig>
      break;
 800b76c:	e01c      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b77a:	461a      	mov	r2, r3
 800b77c:	f000 fb4c 	bl	800be18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2140      	movs	r1, #64	@ 0x40
 800b786:	4618      	mov	r0, r3
 800b788:	f000 fba5 	bl	800bed6 <TIM_ITRx_SetConfig>
      break;
 800b78c:	e00c      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f000 fb9c 	bl	800bed6 <TIM_ITRx_SetConfig>
      break;
 800b79e:	e003      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a4:	e000      	b.n	800b7a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b7a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	fffeff88 	.word	0xfffeff88

0800b7c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b7d0:	bf00      	nop
 800b7d2:	370c      	adds	r7, #12
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b7f0:	b480      	push	{r7}
 800b7f2:	b083      	sub	sp, #12
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b7f8:	bf00      	nop
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr

0800b804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a46      	ldr	r2, [pc, #280]	@ (800b930 <TIM_Base_SetConfig+0x12c>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d013      	beq.n	800b844 <TIM_Base_SetConfig+0x40>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b822:	d00f      	beq.n	800b844 <TIM_Base_SetConfig+0x40>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a43      	ldr	r2, [pc, #268]	@ (800b934 <TIM_Base_SetConfig+0x130>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d00b      	beq.n	800b844 <TIM_Base_SetConfig+0x40>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a42      	ldr	r2, [pc, #264]	@ (800b938 <TIM_Base_SetConfig+0x134>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d007      	beq.n	800b844 <TIM_Base_SetConfig+0x40>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	4a41      	ldr	r2, [pc, #260]	@ (800b93c <TIM_Base_SetConfig+0x138>)
 800b838:	4293      	cmp	r3, r2
 800b83a:	d003      	beq.n	800b844 <TIM_Base_SetConfig+0x40>
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	4a40      	ldr	r2, [pc, #256]	@ (800b940 <TIM_Base_SetConfig+0x13c>)
 800b840:	4293      	cmp	r3, r2
 800b842:	d108      	bne.n	800b856 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b84a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4313      	orrs	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	4a35      	ldr	r2, [pc, #212]	@ (800b930 <TIM_Base_SetConfig+0x12c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d02b      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b864:	d027      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	4a32      	ldr	r2, [pc, #200]	@ (800b934 <TIM_Base_SetConfig+0x130>)
 800b86a:	4293      	cmp	r3, r2
 800b86c:	d023      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	4a31      	ldr	r2, [pc, #196]	@ (800b938 <TIM_Base_SetConfig+0x134>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d01f      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	4a30      	ldr	r2, [pc, #192]	@ (800b93c <TIM_Base_SetConfig+0x138>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d01b      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a2f      	ldr	r2, [pc, #188]	@ (800b940 <TIM_Base_SetConfig+0x13c>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d017      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	4a2e      	ldr	r2, [pc, #184]	@ (800b944 <TIM_Base_SetConfig+0x140>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d013      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a2d      	ldr	r2, [pc, #180]	@ (800b948 <TIM_Base_SetConfig+0x144>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d00f      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	4a2c      	ldr	r2, [pc, #176]	@ (800b94c <TIM_Base_SetConfig+0x148>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d00b      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b950 <TIM_Base_SetConfig+0x14c>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d007      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a2a      	ldr	r2, [pc, #168]	@ (800b954 <TIM_Base_SetConfig+0x150>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d003      	beq.n	800b8b6 <TIM_Base_SetConfig+0xb2>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a29      	ldr	r2, [pc, #164]	@ (800b958 <TIM_Base_SetConfig+0x154>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d108      	bne.n	800b8c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	689a      	ldr	r2, [r3, #8]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a10      	ldr	r2, [pc, #64]	@ (800b930 <TIM_Base_SetConfig+0x12c>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d003      	beq.n	800b8fc <TIM_Base_SetConfig+0xf8>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a12      	ldr	r2, [pc, #72]	@ (800b940 <TIM_Base_SetConfig+0x13c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d103      	bne.n	800b904 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	691a      	ldr	r2, [r3, #16]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	2b01      	cmp	r3, #1
 800b914:	d105      	bne.n	800b922 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	691b      	ldr	r3, [r3, #16]
 800b91a:	f023 0201 	bic.w	r2, r3, #1
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	611a      	str	r2, [r3, #16]
  }
}
 800b922:	bf00      	nop
 800b924:	3714      	adds	r7, #20
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	40010000 	.word	0x40010000
 800b934:	40000400 	.word	0x40000400
 800b938:	40000800 	.word	0x40000800
 800b93c:	40000c00 	.word	0x40000c00
 800b940:	40010400 	.word	0x40010400
 800b944:	40014000 	.word	0x40014000
 800b948:	40014400 	.word	0x40014400
 800b94c:	40014800 	.word	0x40014800
 800b950:	40001800 	.word	0x40001800
 800b954:	40001c00 	.word	0x40001c00
 800b958:	40002000 	.word	0x40002000

0800b95c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6a1b      	ldr	r3, [r3, #32]
 800b96a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a1b      	ldr	r3, [r3, #32]
 800b970:	f023 0201 	bic.w	r2, r3, #1
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4b2b      	ldr	r3, [pc, #172]	@ (800ba34 <TIM_OC1_SetConfig+0xd8>)
 800b988:	4013      	ands	r3, r2
 800b98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f023 0303 	bic.w	r3, r3, #3
 800b992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68fa      	ldr	r2, [r7, #12]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	f023 0302 	bic.w	r3, r3, #2
 800b9a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	697a      	ldr	r2, [r7, #20]
 800b9ac:	4313      	orrs	r3, r2
 800b9ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	4a21      	ldr	r2, [pc, #132]	@ (800ba38 <TIM_OC1_SetConfig+0xdc>)
 800b9b4:	4293      	cmp	r3, r2
 800b9b6:	d003      	beq.n	800b9c0 <TIM_OC1_SetConfig+0x64>
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	4a20      	ldr	r2, [pc, #128]	@ (800ba3c <TIM_OC1_SetConfig+0xe0>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d10c      	bne.n	800b9da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f023 0308 	bic.w	r3, r3, #8
 800b9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f023 0304 	bic.w	r3, r3, #4
 800b9d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4a16      	ldr	r2, [pc, #88]	@ (800ba38 <TIM_OC1_SetConfig+0xdc>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d003      	beq.n	800b9ea <TIM_OC1_SetConfig+0x8e>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	4a15      	ldr	r2, [pc, #84]	@ (800ba3c <TIM_OC1_SetConfig+0xe0>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d111      	bne.n	800ba0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b9f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b9f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	695b      	ldr	r3, [r3, #20]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4313      	orrs	r3, r2
 800ba02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	699b      	ldr	r3, [r3, #24]
 800ba08:	693a      	ldr	r2, [r7, #16]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68fa      	ldr	r2, [r7, #12]
 800ba18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	697a      	ldr	r2, [r7, #20]
 800ba26:	621a      	str	r2, [r3, #32]
}
 800ba28:	bf00      	nop
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	fffeff8f 	.word	0xfffeff8f
 800ba38:	40010000 	.word	0x40010000
 800ba3c:	40010400 	.word	0x40010400

0800ba40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b087      	sub	sp, #28
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6a1b      	ldr	r3, [r3, #32]
 800ba54:	f023 0210 	bic.w	r2, r3, #16
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	685b      	ldr	r3, [r3, #4]
 800ba60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4b2e      	ldr	r3, [pc, #184]	@ (800bb24 <TIM_OC2_SetConfig+0xe4>)
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ba76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	021b      	lsls	r3, r3, #8
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	f023 0320 	bic.w	r3, r3, #32
 800ba8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	011b      	lsls	r3, r3, #4
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	4313      	orrs	r3, r2
 800ba96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a23      	ldr	r2, [pc, #140]	@ (800bb28 <TIM_OC2_SetConfig+0xe8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d003      	beq.n	800baa8 <TIM_OC2_SetConfig+0x68>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a22      	ldr	r2, [pc, #136]	@ (800bb2c <TIM_OC2_SetConfig+0xec>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d10d      	bne.n	800bac4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800baae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	011b      	lsls	r3, r3, #4
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	4313      	orrs	r3, r2
 800baba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bac2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a18      	ldr	r2, [pc, #96]	@ (800bb28 <TIM_OC2_SetConfig+0xe8>)
 800bac8:	4293      	cmp	r3, r2
 800baca:	d003      	beq.n	800bad4 <TIM_OC2_SetConfig+0x94>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a17      	ldr	r2, [pc, #92]	@ (800bb2c <TIM_OC2_SetConfig+0xec>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d113      	bne.n	800bafc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	693a      	ldr	r2, [r7, #16]
 800baec:	4313      	orrs	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	693a      	ldr	r2, [r7, #16]
 800baf8:	4313      	orrs	r3, r2
 800bafa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	621a      	str	r2, [r3, #32]
}
 800bb16:	bf00      	nop
 800bb18:	371c      	adds	r7, #28
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	feff8fff 	.word	0xfeff8fff
 800bb28:	40010000 	.word	0x40010000
 800bb2c:	40010400 	.word	0x40010400

0800bb30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a1b      	ldr	r3, [r3, #32]
 800bb3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6a1b      	ldr	r3, [r3, #32]
 800bb44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	69db      	ldr	r3, [r3, #28]
 800bb56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	4b2d      	ldr	r3, [pc, #180]	@ (800bc10 <TIM_OC3_SetConfig+0xe0>)
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f023 0303 	bic.w	r3, r3, #3
 800bb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bb78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	021b      	lsls	r3, r3, #8
 800bb80:	697a      	ldr	r2, [r7, #20]
 800bb82:	4313      	orrs	r3, r2
 800bb84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a22      	ldr	r2, [pc, #136]	@ (800bc14 <TIM_OC3_SetConfig+0xe4>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d003      	beq.n	800bb96 <TIM_OC3_SetConfig+0x66>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a21      	ldr	r2, [pc, #132]	@ (800bc18 <TIM_OC3_SetConfig+0xe8>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d10d      	bne.n	800bbb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bb9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	021b      	lsls	r3, r3, #8
 800bba4:	697a      	ldr	r2, [r7, #20]
 800bba6:	4313      	orrs	r3, r2
 800bba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bbb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	4a17      	ldr	r2, [pc, #92]	@ (800bc14 <TIM_OC3_SetConfig+0xe4>)
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	d003      	beq.n	800bbc2 <TIM_OC3_SetConfig+0x92>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	4a16      	ldr	r2, [pc, #88]	@ (800bc18 <TIM_OC3_SetConfig+0xe8>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d113      	bne.n	800bbea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bbc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bbd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	011b      	lsls	r3, r3, #4
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	4313      	orrs	r3, r2
 800bbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	011b      	lsls	r3, r3, #4
 800bbe4:	693a      	ldr	r2, [r7, #16]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	693a      	ldr	r2, [r7, #16]
 800bbee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	697a      	ldr	r2, [r7, #20]
 800bc02:	621a      	str	r2, [r3, #32]
}
 800bc04:	bf00      	nop
 800bc06:	371c      	adds	r7, #28
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	fffeff8f 	.word	0xfffeff8f
 800bc14:	40010000 	.word	0x40010000
 800bc18:	40010400 	.word	0x40010400

0800bc1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b087      	sub	sp, #28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6a1b      	ldr	r3, [r3, #32]
 800bc30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	4b1e      	ldr	r3, [pc, #120]	@ (800bcc0 <TIM_OC4_SetConfig+0xa4>)
 800bc48:	4013      	ands	r3, r2
 800bc4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bc66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	689b      	ldr	r3, [r3, #8]
 800bc6c:	031b      	lsls	r3, r3, #12
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	4a13      	ldr	r2, [pc, #76]	@ (800bcc4 <TIM_OC4_SetConfig+0xa8>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d003      	beq.n	800bc84 <TIM_OC4_SetConfig+0x68>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a12      	ldr	r2, [pc, #72]	@ (800bcc8 <TIM_OC4_SetConfig+0xac>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d109      	bne.n	800bc98 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	695b      	ldr	r3, [r3, #20]
 800bc90:	019b      	lsls	r3, r3, #6
 800bc92:	697a      	ldr	r2, [r7, #20]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	697a      	ldr	r2, [r7, #20]
 800bc9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	68fa      	ldr	r2, [r7, #12]
 800bca2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	685a      	ldr	r2, [r3, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	693a      	ldr	r2, [r7, #16]
 800bcb0:	621a      	str	r2, [r3, #32]
}
 800bcb2:	bf00      	nop
 800bcb4:	371c      	adds	r7, #28
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	feff8fff 	.word	0xfeff8fff
 800bcc4:	40010000 	.word	0x40010000
 800bcc8:	40010400 	.word	0x40010400

0800bccc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b087      	sub	sp, #28
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6a1b      	ldr	r3, [r3, #32]
 800bcda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a1b      	ldr	r3, [r3, #32]
 800bce0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4b1b      	ldr	r3, [pc, #108]	@ (800bd64 <TIM_OC5_SetConfig+0x98>)
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	4313      	orrs	r3, r2
 800bd04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bd0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	041b      	lsls	r3, r3, #16
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a12      	ldr	r2, [pc, #72]	@ (800bd68 <TIM_OC5_SetConfig+0x9c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d003      	beq.n	800bd2a <TIM_OC5_SetConfig+0x5e>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a11      	ldr	r2, [pc, #68]	@ (800bd6c <TIM_OC5_SetConfig+0xa0>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d109      	bne.n	800bd3e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd30:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	697a      	ldr	r2, [r7, #20]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	697a      	ldr	r2, [r7, #20]
 800bd42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	685a      	ldr	r2, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	693a      	ldr	r2, [r7, #16]
 800bd56:	621a      	str	r2, [r3, #32]
}
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	fffeff8f 	.word	0xfffeff8f
 800bd68:	40010000 	.word	0x40010000
 800bd6c:	40010400 	.word	0x40010400

0800bd70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
 800bd78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6a1b      	ldr	r3, [r3, #32]
 800bd7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	6a1b      	ldr	r3, [r3, #32]
 800bd84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	4b1c      	ldr	r3, [pc, #112]	@ (800be0c <TIM_OC6_SetConfig+0x9c>)
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	021b      	lsls	r3, r3, #8
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bdb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	051b      	lsls	r3, r3, #20
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	4a13      	ldr	r2, [pc, #76]	@ (800be10 <TIM_OC6_SetConfig+0xa0>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d003      	beq.n	800bdd0 <TIM_OC6_SetConfig+0x60>
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	4a12      	ldr	r2, [pc, #72]	@ (800be14 <TIM_OC6_SetConfig+0xa4>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d109      	bne.n	800bde4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdd6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	029b      	lsls	r3, r3, #10
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	693a      	ldr	r2, [r7, #16]
 800bdfc:	621a      	str	r2, [r3, #32]
}
 800bdfe:	bf00      	nop
 800be00:	371c      	adds	r7, #28
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	feff8fff 	.word	0xfeff8fff
 800be10:	40010000 	.word	0x40010000
 800be14:	40010400 	.word	0x40010400

0800be18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be18:	b480      	push	{r7}
 800be1a:	b087      	sub	sp, #28
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	f023 0201 	bic.w	r2, r3, #1
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800be42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	011b      	lsls	r3, r3, #4
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f023 030a 	bic.w	r3, r3, #10
 800be54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4313      	orrs	r3, r2
 800be5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	621a      	str	r2, [r3, #32]
}
 800be6a:	bf00      	nop
 800be6c:	371c      	adds	r7, #28
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be76:	b480      	push	{r7}
 800be78:	b087      	sub	sp, #28
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	60f8      	str	r0, [r7, #12]
 800be7e:	60b9      	str	r1, [r7, #8]
 800be80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	f023 0210 	bic.w	r2, r3, #16
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	031b      	lsls	r3, r3, #12
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800beb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	011b      	lsls	r3, r3, #4
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	4313      	orrs	r3, r2
 800bebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	697a      	ldr	r2, [r7, #20]
 800bec8:	621a      	str	r2, [r3, #32]
}
 800beca:	bf00      	nop
 800becc:	371c      	adds	r7, #28
 800bece:	46bd      	mov	sp, r7
 800bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed4:	4770      	bx	lr

0800bed6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bed6:	b480      	push	{r7}
 800bed8:	b085      	sub	sp, #20
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6078      	str	r0, [r7, #4]
 800bede:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689b      	ldr	r3, [r3, #8]
 800bee4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800beee:	683a      	ldr	r2, [r7, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	f043 0307 	orr.w	r3, r3, #7
 800bef8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	609a      	str	r2, [r3, #8]
}
 800bf00:	bf00      	nop
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	60f8      	str	r0, [r7, #12]
 800bf14:	60b9      	str	r1, [r7, #8]
 800bf16:	607a      	str	r2, [r7, #4]
 800bf18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	021a      	lsls	r2, r3, #8
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	4313      	orrs	r3, r2
 800bf38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	697a      	ldr	r2, [r7, #20]
 800bf3e:	609a      	str	r2, [r3, #8]
}
 800bf40:	bf00      	nop
 800bf42:	371c      	adds	r7, #28
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b087      	sub	sp, #28
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	f003 031f 	and.w	r3, r3, #31
 800bf5e:	2201      	movs	r2, #1
 800bf60:	fa02 f303 	lsl.w	r3, r2, r3
 800bf64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6a1a      	ldr	r2, [r3, #32]
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	43db      	mvns	r3, r3
 800bf6e:	401a      	ands	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6a1a      	ldr	r2, [r3, #32]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 031f 	and.w	r3, r3, #31
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	fa01 f303 	lsl.w	r3, r1, r3
 800bf84:	431a      	orrs	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	621a      	str	r2, [r3, #32]
}
 800bf8a:	bf00      	nop
 800bf8c:	371c      	adds	r7, #28
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf94:	4770      	bx	lr
	...

0800bf98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d101      	bne.n	800bfb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfac:	2302      	movs	r3, #2
 800bfae:	e06d      	b.n	800c08c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2202      	movs	r2, #2
 800bfbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a30      	ldr	r2, [pc, #192]	@ (800c098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d004      	beq.n	800bfe4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a2f      	ldr	r2, [pc, #188]	@ (800c09c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d108      	bne.n	800bff6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bfea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bffc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4313      	orrs	r3, r2
 800c006:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4a20      	ldr	r2, [pc, #128]	@ (800c098 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d022      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c022:	d01d      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a1d      	ldr	r2, [pc, #116]	@ (800c0a0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d018      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a1c      	ldr	r2, [pc, #112]	@ (800c0a4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d013      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a1a      	ldr	r2, [pc, #104]	@ (800c0a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d00e      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a15      	ldr	r2, [pc, #84]	@ (800c09c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d009      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a16      	ldr	r2, [pc, #88]	@ (800c0ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d004      	beq.n	800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a15      	ldr	r2, [pc, #84]	@ (800c0b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d10c      	bne.n	800c07a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c066:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	68ba      	ldr	r2, [r7, #8]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2201      	movs	r2, #1
 800c07e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3714      	adds	r7, #20
 800c090:	46bd      	mov	sp, r7
 800c092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c096:	4770      	bx	lr
 800c098:	40010000 	.word	0x40010000
 800c09c:	40010400 	.word	0x40010400
 800c0a0:	40000400 	.word	0x40000400
 800c0a4:	40000800 	.word	0x40000800
 800c0a8:	40000c00 	.word	0x40000c00
 800c0ac:	40014000 	.word	0x40014000
 800c0b0:	40001800 	.word	0x40001800

0800c0b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	d101      	bne.n	800c0d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	e065      	b.n	800c19c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	689b      	ldr	r3, [r3, #8]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	4313      	orrs	r3, r2
 800c100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4313      	orrs	r3, r2
 800c10e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	4313      	orrs	r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c136:	4313      	orrs	r3, r2
 800c138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	699b      	ldr	r3, [r3, #24]
 800c144:	041b      	lsls	r3, r3, #16
 800c146:	4313      	orrs	r3, r2
 800c148:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4a16      	ldr	r2, [pc, #88]	@ (800c1a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d004      	beq.n	800c15e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4a14      	ldr	r2, [pc, #80]	@ (800c1ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d115      	bne.n	800c18a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c168:	051b      	lsls	r3, r3, #20
 800c16a:	4313      	orrs	r3, r2
 800c16c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	69db      	ldr	r3, [r3, #28]
 800c178:	4313      	orrs	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	6a1b      	ldr	r3, [r3, #32]
 800c186:	4313      	orrs	r3, r2
 800c188:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	40010000 	.word	0x40010000
 800c1ac:	40010400 	.word	0x40010400

0800c1b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1b8:	bf00      	nop
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1cc:	bf00      	nop
 800c1ce:	370c      	adds	r7, #12
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1e0:	bf00      	nop
 800c1e2:	370c      	adds	r7, #12
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ea:	4770      	bx	lr

0800c1ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1fa:	2301      	movs	r3, #1
 800c1fc:	e040      	b.n	800c280 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7fa f86e 	bl	80062f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2224      	movs	r2, #36	@ 0x24
 800c218:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f022 0201 	bic.w	r2, r2, #1
 800c228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d002      	beq.n	800c238 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 fedc 	bl	800cff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f000 fc75 	bl	800cb28 <UART_SetConfig>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b01      	cmp	r3, #1
 800c242:	d101      	bne.n	800c248 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	e01b      	b.n	800c280 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689a      	ldr	r2, [r3, #8]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f042 0201 	orr.w	r2, r2, #1
 800c276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 ff5b 	bl	800d134 <UART_CheckIdleState>
 800c27e:	4603      	mov	r3, r0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b08a      	sub	sp, #40	@ 0x28
 800c28c:	af02      	add	r7, sp, #8
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	603b      	str	r3, [r7, #0]
 800c294:	4613      	mov	r3, r2
 800c296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c29c:	2b20      	cmp	r3, #32
 800c29e:	d177      	bne.n	800c390 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d002      	beq.n	800c2ac <HAL_UART_Transmit+0x24>
 800c2a6:	88fb      	ldrh	r3, [r7, #6]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d101      	bne.n	800c2b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	e070      	b.n	800c392 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2221      	movs	r2, #33	@ 0x21
 800c2bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2be:	f7fa fde1 	bl	8006e84 <HAL_GetTick>
 800c2c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	88fa      	ldrh	r2, [r7, #6]
 800c2c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	88fa      	ldrh	r2, [r7, #6]
 800c2d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2dc:	d108      	bne.n	800c2f0 <HAL_UART_Transmit+0x68>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	691b      	ldr	r3, [r3, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d104      	bne.n	800c2f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2ea:	68bb      	ldr	r3, [r7, #8]
 800c2ec:	61bb      	str	r3, [r7, #24]
 800c2ee:	e003      	b.n	800c2f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c2f8:	e02f      	b.n	800c35a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2200      	movs	r2, #0
 800c302:	2180      	movs	r1, #128	@ 0x80
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 ff6c 	bl	800d1e2 <UART_WaitOnFlagUntilTimeout>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d004      	beq.n	800c31a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2220      	movs	r2, #32
 800c314:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e03b      	b.n	800c392 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800c31a:	69fb      	ldr	r3, [r7, #28]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d10b      	bne.n	800c338 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c32e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	3302      	adds	r3, #2
 800c334:	61bb      	str	r3, [r7, #24]
 800c336:	e007      	b.n	800c348 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	781a      	ldrb	r2, [r3, #0]
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	3301      	adds	r3, #1
 800c346:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c34e:	b29b      	uxth	r3, r3
 800c350:	3b01      	subs	r3, #1
 800c352:	b29a      	uxth	r2, r3
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c360:	b29b      	uxth	r3, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	d1c9      	bne.n	800c2fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	9300      	str	r3, [sp, #0]
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	2200      	movs	r2, #0
 800c36e:	2140      	movs	r1, #64	@ 0x40
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f000 ff36 	bl	800d1e2 <UART_WaitOnFlagUntilTimeout>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d004      	beq.n	800c386 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800c382:	2303      	movs	r3, #3
 800c384:	e005      	b.n	800c392 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2220      	movs	r2, #32
 800c38a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800c38c:	2300      	movs	r3, #0
 800c38e:	e000      	b.n	800c392 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800c390:	2302      	movs	r3, #2
  }
}
 800c392:	4618      	mov	r0, r3
 800c394:	3720      	adds	r7, #32
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
	...

0800c39c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b08a      	sub	sp, #40	@ 0x28
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	60f8      	str	r0, [r7, #12]
 800c3a4:	60b9      	str	r1, [r7, #8]
 800c3a6:	4613      	mov	r3, r2
 800c3a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3ae:	2b20      	cmp	r3, #32
 800c3b0:	d165      	bne.n	800c47e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <HAL_UART_Transmit_DMA+0x22>
 800c3b8:	88fb      	ldrh	r3, [r7, #6]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d101      	bne.n	800c3c2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	e05e      	b.n	800c480 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	88fa      	ldrh	r2, [r7, #6]
 800c3cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	88fa      	ldrh	r2, [r7, #6]
 800c3d4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2221      	movs	r2, #33	@ 0x21
 800c3e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d027      	beq.n	800c43e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3f2:	4a25      	ldr	r2, [pc, #148]	@ (800c488 <HAL_UART_Transmit_DMA+0xec>)
 800c3f4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c3fa:	4a24      	ldr	r2, [pc, #144]	@ (800c48c <HAL_UART_Transmit_DMA+0xf0>)
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c402:	4a23      	ldr	r2, [pc, #140]	@ (800c490 <HAL_UART_Transmit_DMA+0xf4>)
 800c404:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c40a:	2200      	movs	r2, #0
 800c40c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c416:	4619      	mov	r1, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	3328      	adds	r3, #40	@ 0x28
 800c41e:	461a      	mov	r2, r3
 800c420:	88fb      	ldrh	r3, [r7, #6]
 800c422:	f7fa feef 	bl	8007204 <HAL_DMA_Start_IT>
 800c426:	4603      	mov	r3, r0
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d008      	beq.n	800c43e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	2210      	movs	r2, #16
 800c430:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2220      	movs	r2, #32
 800c438:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e020      	b.n	800c480 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2240      	movs	r2, #64	@ 0x40
 800c444:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3308      	adds	r3, #8
 800c44c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	e853 3f00 	ldrex	r3, [r3]
 800c454:	613b      	str	r3, [r7, #16]
   return(result);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c45c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	3308      	adds	r3, #8
 800c464:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c466:	623a      	str	r2, [r7, #32]
 800c468:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46a:	69f9      	ldr	r1, [r7, #28]
 800c46c:	6a3a      	ldr	r2, [r7, #32]
 800c46e:	e841 2300 	strex	r3, r2, [r1]
 800c472:	61bb      	str	r3, [r7, #24]
   return(result);
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e5      	bne.n	800c446 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c47a:	2300      	movs	r3, #0
 800c47c:	e000      	b.n	800c480 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c47e:	2302      	movs	r3, #2
  }
}
 800c480:	4618      	mov	r0, r3
 800c482:	3728      	adds	r7, #40	@ 0x28
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	0800d511 	.word	0x0800d511
 800c48c:	0800d5a7 	.word	0x0800d5a7
 800c490:	0800d729 	.word	0x0800d729

0800c494 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b08a      	sub	sp, #40	@ 0x28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	60f8      	str	r0, [r7, #12]
 800c49c:	60b9      	str	r1, [r7, #8]
 800c49e:	4613      	mov	r3, r2
 800c4a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c4a8:	2b20      	cmp	r3, #32
 800c4aa:	d132      	bne.n	800c512 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <HAL_UART_Receive_DMA+0x24>
 800c4b2:	88fb      	ldrh	r3, [r7, #6]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	e02b      	b.n	800c514 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d018      	beq.n	800c502 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	e853 3f00 	ldrex	r3, [r3]
 800c4dc:	613b      	str	r3, [r7, #16]
   return(result);
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c4e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ee:	623b      	str	r3, [r7, #32]
 800c4f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f2:	69f9      	ldr	r1, [r7, #28]
 800c4f4:	6a3a      	ldr	r2, [r7, #32]
 800c4f6:	e841 2300 	strex	r3, r2, [r1]
 800c4fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d1e6      	bne.n	800c4d0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c502:	88fb      	ldrh	r3, [r7, #6]
 800c504:	461a      	mov	r2, r3
 800c506:	68b9      	ldr	r1, [r7, #8]
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f000 fed7 	bl	800d2bc <UART_Start_Receive_DMA>
 800c50e:	4603      	mov	r3, r0
 800c510:	e000      	b.n	800c514 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c512:	2302      	movs	r3, #2
  }
}
 800c514:	4618      	mov	r0, r3
 800c516:	3728      	adds	r7, #40	@ 0x28
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b0ba      	sub	sp, #232	@ 0xe8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	69db      	ldr	r3, [r3, #28]
 800c52a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c542:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c546:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c54a:	4013      	ands	r3, r2
 800c54c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c554:	2b00      	cmp	r3, #0
 800c556:	d115      	bne.n	800c584 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c55c:	f003 0320 	and.w	r3, r3, #32
 800c560:	2b00      	cmp	r3, #0
 800c562:	d00f      	beq.n	800c584 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c568:	f003 0320 	and.w	r3, r3, #32
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d009      	beq.n	800c584 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c574:	2b00      	cmp	r3, #0
 800c576:	f000 8297 	beq.w	800caa8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	4798      	blx	r3
      }
      return;
 800c582:	e291      	b.n	800caa8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 8117 	beq.w	800c7bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c58e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c59a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c59e:	4b85      	ldr	r3, [pc, #532]	@ (800c7b4 <HAL_UART_IRQHandler+0x298>)
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	f000 810a 	beq.w	800c7bc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d011      	beq.n	800c5d8 <HAL_UART_IRQHandler+0xbc>
 800c5b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d00b      	beq.n	800c5d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5ce:	f043 0201 	orr.w	r2, r3, #1
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5dc:	f003 0302 	and.w	r3, r3, #2
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d011      	beq.n	800c608 <HAL_UART_IRQHandler+0xec>
 800c5e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5e8:	f003 0301 	and.w	r3, r3, #1
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d00b      	beq.n	800c608 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c5fe:	f043 0204 	orr.w	r2, r3, #4
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c60c:	f003 0304 	and.w	r3, r3, #4
 800c610:	2b00      	cmp	r3, #0
 800c612:	d011      	beq.n	800c638 <HAL_UART_IRQHandler+0x11c>
 800c614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00b      	beq.n	800c638 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2204      	movs	r2, #4
 800c626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c62e:	f043 0202 	orr.w	r2, r3, #2
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c63c:	f003 0308 	and.w	r3, r3, #8
 800c640:	2b00      	cmp	r3, #0
 800c642:	d017      	beq.n	800c674 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c648:	f003 0320 	and.w	r3, r3, #32
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d105      	bne.n	800c65c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c654:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d00b      	beq.n	800c674 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2208      	movs	r2, #8
 800c662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c66a:	f043 0208 	orr.w	r2, r3, #8
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d012      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x18a>
 800c680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c684:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00c      	beq.n	800c6a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c69c:	f043 0220 	orr.w	r2, r3, #32
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f000 81fd 	beq.w	800caac <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6b6:	f003 0320 	and.w	r3, r3, #32
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00d      	beq.n	800c6da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c2:	f003 0320 	and.w	r3, r3, #32
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d007      	beq.n	800c6da <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d003      	beq.n	800c6da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c6e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ee:	2b40      	cmp	r3, #64	@ 0x40
 800c6f0:	d005      	beq.n	800c6fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c6f6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d04f      	beq.n	800c79e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 fea2 	bl	800d448 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c70e:	2b40      	cmp	r3, #64	@ 0x40
 800c710:	d141      	bne.n	800c796 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	3308      	adds	r3, #8
 800c718:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c71c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c720:	e853 3f00 	ldrex	r3, [r3]
 800c724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c728:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c72c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c730:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	3308      	adds	r3, #8
 800c73a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c73e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c742:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c74a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c74e:	e841 2300 	strex	r3, r2, [r1]
 800c752:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1d9      	bne.n	800c712 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c762:	2b00      	cmp	r3, #0
 800c764:	d013      	beq.n	800c78e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c76a:	4a13      	ldr	r2, [pc, #76]	@ (800c7b8 <HAL_UART_IRQHandler+0x29c>)
 800c76c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c772:	4618      	mov	r0, r3
 800c774:	f7fa fe16 	bl	80073a4 <HAL_DMA_Abort_IT>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d017      	beq.n	800c7ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c788:	4610      	mov	r0, r2
 800c78a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c78c:	e00f      	b.n	800c7ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9b4 	bl	800cafc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c794:	e00b      	b.n	800c7ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9b0 	bl	800cafc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c79c:	e007      	b.n	800c7ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9ac 	bl	800cafc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800c7ac:	e17e      	b.n	800caac <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ae:	bf00      	nop
    return;
 800c7b0:	e17c      	b.n	800caac <HAL_UART_IRQHandler+0x590>
 800c7b2:	bf00      	nop
 800c7b4:	04000120 	.word	0x04000120
 800c7b8:	0800d7a7 	.word	0x0800d7a7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	f040 814c 	bne.w	800ca5e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c7c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7ca:	f003 0310 	and.w	r3, r3, #16
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	f000 8145 	beq.w	800ca5e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c7d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c7d8:	f003 0310 	and.w	r3, r3, #16
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	f000 813e 	beq.w	800ca5e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	2210      	movs	r2, #16
 800c7e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7f4:	2b40      	cmp	r3, #64	@ 0x40
 800c7f6:	f040 80b6 	bne.w	800c966 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c806:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 8150 	beq.w	800cab0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c81a:	429a      	cmp	r2, r3
 800c81c:	f080 8148 	bcs.w	800cab0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c826:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c82e:	69db      	ldr	r3, [r3, #28]
 800c830:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c834:	f000 8086 	beq.w	800c944 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c844:	e853 3f00 	ldrex	r3, [r3]
 800c848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c84c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c854:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	461a      	mov	r2, r3
 800c85e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c866:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c86e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1da      	bne.n	800c838 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c88c:	e853 3f00 	ldrex	r3, [r3]
 800c890:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c892:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c894:	f023 0301 	bic.w	r3, r3, #1
 800c898:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e1      	bne.n	800c882 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3308      	adds	r3, #8
 800c8c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c8ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3308      	adds	r3, #8
 800c8de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c8e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c8e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c8e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c8f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e3      	bne.n	800c8be <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2200      	movs	r2, #0
 800c902:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c90a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c90c:	e853 3f00 	ldrex	r3, [r3]
 800c910:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c912:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c914:	f023 0310 	bic.w	r3, r3, #16
 800c918:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	461a      	mov	r2, r3
 800c922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c928:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c92a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c92c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c92e:	e841 2300 	strex	r3, r2, [r1]
 800c932:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1e4      	bne.n	800c904 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c93e:	4618      	mov	r0, r3
 800c940:	f7fa fcc0 	bl	80072c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2202      	movs	r2, #2
 800c948:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c956:	b29b      	uxth	r3, r3
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	b29b      	uxth	r3, r3
 800c95c:	4619      	mov	r1, r3
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f8d6 	bl	800cb10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c964:	e0a4      	b.n	800cab0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c972:	b29b      	uxth	r3, r3
 800c974:	1ad3      	subs	r3, r2, r3
 800c976:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c980:	b29b      	uxth	r3, r3
 800c982:	2b00      	cmp	r3, #0
 800c984:	f000 8096 	beq.w	800cab4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c988:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	f000 8091 	beq.w	800cab4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c99a:	e853 3f00 	ldrex	r3, [r3]
 800c99e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c9b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9bc:	e841 2300 	strex	r3, r2, [r1]
 800c9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1e4      	bne.n	800c992 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	e853 3f00 	ldrex	r3, [r3]
 800c9d6:	623b      	str	r3, [r7, #32]
   return(result);
 800c9d8:	6a3b      	ldr	r3, [r7, #32]
 800c9da:	f023 0301 	bic.w	r3, r3, #1
 800c9de:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	3308      	adds	r3, #8
 800c9e8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c9ec:	633a      	str	r2, [r7, #48]	@ 0x30
 800c9ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c9f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9f4:	e841 2300 	strex	r3, r2, [r1]
 800c9f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c9fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e3      	bne.n	800c9c8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2220      	movs	r2, #32
 800ca04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2200      	movs	r2, #0
 800ca12:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	e853 3f00 	ldrex	r3, [r3]
 800ca20:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f023 0310 	bic.w	r3, r3, #16
 800ca28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ca36:	61fb      	str	r3, [r7, #28]
 800ca38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca3a:	69b9      	ldr	r1, [r7, #24]
 800ca3c:	69fa      	ldr	r2, [r7, #28]
 800ca3e:	e841 2300 	strex	r3, r2, [r1]
 800ca42:	617b      	str	r3, [r7, #20]
   return(result);
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1e4      	bne.n	800ca14 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2202      	movs	r2, #2
 800ca4e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f000 f85a 	bl	800cb10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca5c:	e02a      	b.n	800cab4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ca5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00e      	beq.n	800ca88 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ca6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d008      	beq.n	800ca88 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d01c      	beq.n	800cab8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	4798      	blx	r3
    }
    return;
 800ca86:	e017      	b.n	800cab8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ca88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d012      	beq.n	800caba <HAL_UART_IRQHandler+0x59e>
 800ca94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ca98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d00c      	beq.n	800caba <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800caa0:	6878      	ldr	r0, [r7, #4]
 800caa2:	f000 fe96 	bl	800d7d2 <UART_EndTransmit_IT>
    return;
 800caa6:	e008      	b.n	800caba <HAL_UART_IRQHandler+0x59e>
      return;
 800caa8:	bf00      	nop
 800caaa:	e006      	b.n	800caba <HAL_UART_IRQHandler+0x59e>
    return;
 800caac:	bf00      	nop
 800caae:	e004      	b.n	800caba <HAL_UART_IRQHandler+0x59e>
      return;
 800cab0:	bf00      	nop
 800cab2:	e002      	b.n	800caba <HAL_UART_IRQHandler+0x59e>
      return;
 800cab4:	bf00      	nop
 800cab6:	e000      	b.n	800caba <HAL_UART_IRQHandler+0x59e>
    return;
 800cab8:	bf00      	nop
  }

}
 800caba:	37e8      	adds	r7, #232	@ 0xe8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb1c:	bf00      	nop
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b088      	sub	sp, #32
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689a      	ldr	r2, [r3, #8]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	431a      	orrs	r2, r3
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	695b      	ldr	r3, [r3, #20]
 800cb42:	431a      	orrs	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	69db      	ldr	r3, [r3, #28]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	681a      	ldr	r2, [r3, #0]
 800cb52:	4ba6      	ldr	r3, [pc, #664]	@ (800cdec <UART_SetConfig+0x2c4>)
 800cb54:	4013      	ands	r3, r2
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	6812      	ldr	r2, [r2, #0]
 800cb5a:	6979      	ldr	r1, [r7, #20]
 800cb5c:	430b      	orrs	r3, r1
 800cb5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	68da      	ldr	r2, [r3, #12]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	699b      	ldr	r3, [r3, #24]
 800cb7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a1b      	ldr	r3, [r3, #32]
 800cb80:	697a      	ldr	r2, [r7, #20]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	430a      	orrs	r2, r1
 800cb98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4a94      	ldr	r2, [pc, #592]	@ (800cdf0 <UART_SetConfig+0x2c8>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d120      	bne.n	800cbe6 <UART_SetConfig+0xbe>
 800cba4:	4b93      	ldr	r3, [pc, #588]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800cba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbaa:	f003 0303 	and.w	r3, r3, #3
 800cbae:	2b03      	cmp	r3, #3
 800cbb0:	d816      	bhi.n	800cbe0 <UART_SetConfig+0xb8>
 800cbb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cbb8 <UART_SetConfig+0x90>)
 800cbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb8:	0800cbc9 	.word	0x0800cbc9
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbcf 	.word	0x0800cbcf
 800cbc4:	0800cbdb 	.word	0x0800cbdb
 800cbc8:	2301      	movs	r3, #1
 800cbca:	77fb      	strb	r3, [r7, #31]
 800cbcc:	e150      	b.n	800ce70 <UART_SetConfig+0x348>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	77fb      	strb	r3, [r7, #31]
 800cbd2:	e14d      	b.n	800ce70 <UART_SetConfig+0x348>
 800cbd4:	2304      	movs	r3, #4
 800cbd6:	77fb      	strb	r3, [r7, #31]
 800cbd8:	e14a      	b.n	800ce70 <UART_SetConfig+0x348>
 800cbda:	2308      	movs	r3, #8
 800cbdc:	77fb      	strb	r3, [r7, #31]
 800cbde:	e147      	b.n	800ce70 <UART_SetConfig+0x348>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	77fb      	strb	r3, [r7, #31]
 800cbe4:	e144      	b.n	800ce70 <UART_SetConfig+0x348>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a83      	ldr	r2, [pc, #524]	@ (800cdf8 <UART_SetConfig+0x2d0>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d132      	bne.n	800cc56 <UART_SetConfig+0x12e>
 800cbf0:	4b80      	ldr	r3, [pc, #512]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800cbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf6:	f003 030c 	and.w	r3, r3, #12
 800cbfa:	2b0c      	cmp	r3, #12
 800cbfc:	d828      	bhi.n	800cc50 <UART_SetConfig+0x128>
 800cbfe:	a201      	add	r2, pc, #4	@ (adr r2, 800cc04 <UART_SetConfig+0xdc>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc39 	.word	0x0800cc39
 800cc08:	0800cc51 	.word	0x0800cc51
 800cc0c:	0800cc51 	.word	0x0800cc51
 800cc10:	0800cc51 	.word	0x0800cc51
 800cc14:	0800cc45 	.word	0x0800cc45
 800cc18:	0800cc51 	.word	0x0800cc51
 800cc1c:	0800cc51 	.word	0x0800cc51
 800cc20:	0800cc51 	.word	0x0800cc51
 800cc24:	0800cc3f 	.word	0x0800cc3f
 800cc28:	0800cc51 	.word	0x0800cc51
 800cc2c:	0800cc51 	.word	0x0800cc51
 800cc30:	0800cc51 	.word	0x0800cc51
 800cc34:	0800cc4b 	.word	0x0800cc4b
 800cc38:	2300      	movs	r3, #0
 800cc3a:	77fb      	strb	r3, [r7, #31]
 800cc3c:	e118      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc3e:	2302      	movs	r3, #2
 800cc40:	77fb      	strb	r3, [r7, #31]
 800cc42:	e115      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc44:	2304      	movs	r3, #4
 800cc46:	77fb      	strb	r3, [r7, #31]
 800cc48:	e112      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	77fb      	strb	r3, [r7, #31]
 800cc4e:	e10f      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc50:	2310      	movs	r3, #16
 800cc52:	77fb      	strb	r3, [r7, #31]
 800cc54:	e10c      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a68      	ldr	r2, [pc, #416]	@ (800cdfc <UART_SetConfig+0x2d4>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d120      	bne.n	800cca2 <UART_SetConfig+0x17a>
 800cc60:	4b64      	ldr	r3, [pc, #400]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800cc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc66:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cc6a:	2b30      	cmp	r3, #48	@ 0x30
 800cc6c:	d013      	beq.n	800cc96 <UART_SetConfig+0x16e>
 800cc6e:	2b30      	cmp	r3, #48	@ 0x30
 800cc70:	d814      	bhi.n	800cc9c <UART_SetConfig+0x174>
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d009      	beq.n	800cc8a <UART_SetConfig+0x162>
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	d810      	bhi.n	800cc9c <UART_SetConfig+0x174>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <UART_SetConfig+0x15c>
 800cc7e:	2b10      	cmp	r3, #16
 800cc80:	d006      	beq.n	800cc90 <UART_SetConfig+0x168>
 800cc82:	e00b      	b.n	800cc9c <UART_SetConfig+0x174>
 800cc84:	2300      	movs	r3, #0
 800cc86:	77fb      	strb	r3, [r7, #31]
 800cc88:	e0f2      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	77fb      	strb	r3, [r7, #31]
 800cc8e:	e0ef      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc90:	2304      	movs	r3, #4
 800cc92:	77fb      	strb	r3, [r7, #31]
 800cc94:	e0ec      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc96:	2308      	movs	r3, #8
 800cc98:	77fb      	strb	r3, [r7, #31]
 800cc9a:	e0e9      	b.n	800ce70 <UART_SetConfig+0x348>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	77fb      	strb	r3, [r7, #31]
 800cca0:	e0e6      	b.n	800ce70 <UART_SetConfig+0x348>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a56      	ldr	r2, [pc, #344]	@ (800ce00 <UART_SetConfig+0x2d8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d120      	bne.n	800ccee <UART_SetConfig+0x1c6>
 800ccac:	4b51      	ldr	r3, [pc, #324]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800ccae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ccb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800ccb8:	d013      	beq.n	800cce2 <UART_SetConfig+0x1ba>
 800ccba:	2bc0      	cmp	r3, #192	@ 0xc0
 800ccbc:	d814      	bhi.n	800cce8 <UART_SetConfig+0x1c0>
 800ccbe:	2b80      	cmp	r3, #128	@ 0x80
 800ccc0:	d009      	beq.n	800ccd6 <UART_SetConfig+0x1ae>
 800ccc2:	2b80      	cmp	r3, #128	@ 0x80
 800ccc4:	d810      	bhi.n	800cce8 <UART_SetConfig+0x1c0>
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <UART_SetConfig+0x1a8>
 800ccca:	2b40      	cmp	r3, #64	@ 0x40
 800cccc:	d006      	beq.n	800ccdc <UART_SetConfig+0x1b4>
 800ccce:	e00b      	b.n	800cce8 <UART_SetConfig+0x1c0>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	77fb      	strb	r3, [r7, #31]
 800ccd4:	e0cc      	b.n	800ce70 <UART_SetConfig+0x348>
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	77fb      	strb	r3, [r7, #31]
 800ccda:	e0c9      	b.n	800ce70 <UART_SetConfig+0x348>
 800ccdc:	2304      	movs	r3, #4
 800ccde:	77fb      	strb	r3, [r7, #31]
 800cce0:	e0c6      	b.n	800ce70 <UART_SetConfig+0x348>
 800cce2:	2308      	movs	r3, #8
 800cce4:	77fb      	strb	r3, [r7, #31]
 800cce6:	e0c3      	b.n	800ce70 <UART_SetConfig+0x348>
 800cce8:	2310      	movs	r3, #16
 800ccea:	77fb      	strb	r3, [r7, #31]
 800ccec:	e0c0      	b.n	800ce70 <UART_SetConfig+0x348>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a44      	ldr	r2, [pc, #272]	@ (800ce04 <UART_SetConfig+0x2dc>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d125      	bne.n	800cd44 <UART_SetConfig+0x21c>
 800ccf8:	4b3e      	ldr	r3, [pc, #248]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800ccfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd06:	d017      	beq.n	800cd38 <UART_SetConfig+0x210>
 800cd08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd0c:	d817      	bhi.n	800cd3e <UART_SetConfig+0x216>
 800cd0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd12:	d00b      	beq.n	800cd2c <UART_SetConfig+0x204>
 800cd14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd18:	d811      	bhi.n	800cd3e <UART_SetConfig+0x216>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <UART_SetConfig+0x1fe>
 800cd1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd22:	d006      	beq.n	800cd32 <UART_SetConfig+0x20a>
 800cd24:	e00b      	b.n	800cd3e <UART_SetConfig+0x216>
 800cd26:	2300      	movs	r3, #0
 800cd28:	77fb      	strb	r3, [r7, #31]
 800cd2a:	e0a1      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	77fb      	strb	r3, [r7, #31]
 800cd30:	e09e      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd32:	2304      	movs	r3, #4
 800cd34:	77fb      	strb	r3, [r7, #31]
 800cd36:	e09b      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	77fb      	strb	r3, [r7, #31]
 800cd3c:	e098      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd3e:	2310      	movs	r3, #16
 800cd40:	77fb      	strb	r3, [r7, #31]
 800cd42:	e095      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a2f      	ldr	r2, [pc, #188]	@ (800ce08 <UART_SetConfig+0x2e0>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d125      	bne.n	800cd9a <UART_SetConfig+0x272>
 800cd4e:	4b29      	ldr	r3, [pc, #164]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800cd50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800cd58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd5c:	d017      	beq.n	800cd8e <UART_SetConfig+0x266>
 800cd5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cd62:	d817      	bhi.n	800cd94 <UART_SetConfig+0x26c>
 800cd64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd68:	d00b      	beq.n	800cd82 <UART_SetConfig+0x25a>
 800cd6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd6e:	d811      	bhi.n	800cd94 <UART_SetConfig+0x26c>
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <UART_SetConfig+0x254>
 800cd74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd78:	d006      	beq.n	800cd88 <UART_SetConfig+0x260>
 800cd7a:	e00b      	b.n	800cd94 <UART_SetConfig+0x26c>
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	77fb      	strb	r3, [r7, #31]
 800cd80:	e076      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd82:	2302      	movs	r3, #2
 800cd84:	77fb      	strb	r3, [r7, #31]
 800cd86:	e073      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd88:	2304      	movs	r3, #4
 800cd8a:	77fb      	strb	r3, [r7, #31]
 800cd8c:	e070      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd8e:	2308      	movs	r3, #8
 800cd90:	77fb      	strb	r3, [r7, #31]
 800cd92:	e06d      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd94:	2310      	movs	r3, #16
 800cd96:	77fb      	strb	r3, [r7, #31]
 800cd98:	e06a      	b.n	800ce70 <UART_SetConfig+0x348>
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a1b      	ldr	r2, [pc, #108]	@ (800ce0c <UART_SetConfig+0x2e4>)
 800cda0:	4293      	cmp	r3, r2
 800cda2:	d138      	bne.n	800ce16 <UART_SetConfig+0x2ee>
 800cda4:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <UART_SetConfig+0x2cc>)
 800cda6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdaa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800cdae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdb2:	d017      	beq.n	800cde4 <UART_SetConfig+0x2bc>
 800cdb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cdb8:	d82a      	bhi.n	800ce10 <UART_SetConfig+0x2e8>
 800cdba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdbe:	d00b      	beq.n	800cdd8 <UART_SetConfig+0x2b0>
 800cdc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cdc4:	d824      	bhi.n	800ce10 <UART_SetConfig+0x2e8>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <UART_SetConfig+0x2aa>
 800cdca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cdce:	d006      	beq.n	800cdde <UART_SetConfig+0x2b6>
 800cdd0:	e01e      	b.n	800ce10 <UART_SetConfig+0x2e8>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	77fb      	strb	r3, [r7, #31]
 800cdd6:	e04b      	b.n	800ce70 <UART_SetConfig+0x348>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	77fb      	strb	r3, [r7, #31]
 800cddc:	e048      	b.n	800ce70 <UART_SetConfig+0x348>
 800cdde:	2304      	movs	r3, #4
 800cde0:	77fb      	strb	r3, [r7, #31]
 800cde2:	e045      	b.n	800ce70 <UART_SetConfig+0x348>
 800cde4:	2308      	movs	r3, #8
 800cde6:	77fb      	strb	r3, [r7, #31]
 800cde8:	e042      	b.n	800ce70 <UART_SetConfig+0x348>
 800cdea:	bf00      	nop
 800cdec:	efff69f3 	.word	0xefff69f3
 800cdf0:	40011000 	.word	0x40011000
 800cdf4:	40023800 	.word	0x40023800
 800cdf8:	40004400 	.word	0x40004400
 800cdfc:	40004800 	.word	0x40004800
 800ce00:	40004c00 	.word	0x40004c00
 800ce04:	40005000 	.word	0x40005000
 800ce08:	40011400 	.word	0x40011400
 800ce0c:	40007800 	.word	0x40007800
 800ce10:	2310      	movs	r3, #16
 800ce12:	77fb      	strb	r3, [r7, #31]
 800ce14:	e02c      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a72      	ldr	r2, [pc, #456]	@ (800cfe4 <UART_SetConfig+0x4bc>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d125      	bne.n	800ce6c <UART_SetConfig+0x344>
 800ce20:	4b71      	ldr	r3, [pc, #452]	@ (800cfe8 <UART_SetConfig+0x4c0>)
 800ce22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ce2a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ce2e:	d017      	beq.n	800ce60 <UART_SetConfig+0x338>
 800ce30:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ce34:	d817      	bhi.n	800ce66 <UART_SetConfig+0x33e>
 800ce36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce3a:	d00b      	beq.n	800ce54 <UART_SetConfig+0x32c>
 800ce3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce40:	d811      	bhi.n	800ce66 <UART_SetConfig+0x33e>
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d003      	beq.n	800ce4e <UART_SetConfig+0x326>
 800ce46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce4a:	d006      	beq.n	800ce5a <UART_SetConfig+0x332>
 800ce4c:	e00b      	b.n	800ce66 <UART_SetConfig+0x33e>
 800ce4e:	2300      	movs	r3, #0
 800ce50:	77fb      	strb	r3, [r7, #31]
 800ce52:	e00d      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce54:	2302      	movs	r3, #2
 800ce56:	77fb      	strb	r3, [r7, #31]
 800ce58:	e00a      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce5a:	2304      	movs	r3, #4
 800ce5c:	77fb      	strb	r3, [r7, #31]
 800ce5e:	e007      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce60:	2308      	movs	r3, #8
 800ce62:	77fb      	strb	r3, [r7, #31]
 800ce64:	e004      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce66:	2310      	movs	r3, #16
 800ce68:	77fb      	strb	r3, [r7, #31]
 800ce6a:	e001      	b.n	800ce70 <UART_SetConfig+0x348>
 800ce6c:	2310      	movs	r3, #16
 800ce6e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	69db      	ldr	r3, [r3, #28]
 800ce74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ce78:	d15b      	bne.n	800cf32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ce7a:	7ffb      	ldrb	r3, [r7, #31]
 800ce7c:	2b08      	cmp	r3, #8
 800ce7e:	d828      	bhi.n	800ced2 <UART_SetConfig+0x3aa>
 800ce80:	a201      	add	r2, pc, #4	@ (adr r2, 800ce88 <UART_SetConfig+0x360>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cead 	.word	0x0800cead
 800ce8c:	0800ceb5 	.word	0x0800ceb5
 800ce90:	0800cebd 	.word	0x0800cebd
 800ce94:	0800ced3 	.word	0x0800ced3
 800ce98:	0800cec3 	.word	0x0800cec3
 800ce9c:	0800ced3 	.word	0x0800ced3
 800cea0:	0800ced3 	.word	0x0800ced3
 800cea4:	0800ced3 	.word	0x0800ced3
 800cea8:	0800cecb 	.word	0x0800cecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ceac:	f7fc f98e 	bl	80091cc <HAL_RCC_GetPCLK1Freq>
 800ceb0:	61b8      	str	r0, [r7, #24]
        break;
 800ceb2:	e013      	b.n	800cedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ceb4:	f7fc f99e 	bl	80091f4 <HAL_RCC_GetPCLK2Freq>
 800ceb8:	61b8      	str	r0, [r7, #24]
        break;
 800ceba:	e00f      	b.n	800cedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cebc:	4b4b      	ldr	r3, [pc, #300]	@ (800cfec <UART_SetConfig+0x4c4>)
 800cebe:	61bb      	str	r3, [r7, #24]
        break;
 800cec0:	e00c      	b.n	800cedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cec2:	f7fc f871 	bl	8008fa8 <HAL_RCC_GetSysClockFreq>
 800cec6:	61b8      	str	r0, [r7, #24]
        break;
 800cec8:	e008      	b.n	800cedc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cece:	61bb      	str	r3, [r7, #24]
        break;
 800ced0:	e004      	b.n	800cedc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ced2:	2300      	movs	r3, #0
 800ced4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	77bb      	strb	r3, [r7, #30]
        break;
 800ceda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cedc:	69bb      	ldr	r3, [r7, #24]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d074      	beq.n	800cfcc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cee2:	69bb      	ldr	r3, [r7, #24]
 800cee4:	005a      	lsls	r2, r3, #1
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	085b      	lsrs	r3, r3, #1
 800ceec:	441a      	add	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	685b      	ldr	r3, [r3, #4]
 800cef2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	2b0f      	cmp	r3, #15
 800cefc:	d916      	bls.n	800cf2c <UART_SetConfig+0x404>
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf04:	d212      	bcs.n	800cf2c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	f023 030f 	bic.w	r3, r3, #15
 800cf0e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf10:	693b      	ldr	r3, [r7, #16]
 800cf12:	085b      	lsrs	r3, r3, #1
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	f003 0307 	and.w	r3, r3, #7
 800cf1a:	b29a      	uxth	r2, r3
 800cf1c:	89fb      	ldrh	r3, [r7, #14]
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	89fa      	ldrh	r2, [r7, #14]
 800cf28:	60da      	str	r2, [r3, #12]
 800cf2a:	e04f      	b.n	800cfcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	77bb      	strb	r3, [r7, #30]
 800cf30:	e04c      	b.n	800cfcc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf32:	7ffb      	ldrb	r3, [r7, #31]
 800cf34:	2b08      	cmp	r3, #8
 800cf36:	d828      	bhi.n	800cf8a <UART_SetConfig+0x462>
 800cf38:	a201      	add	r2, pc, #4	@ (adr r2, 800cf40 <UART_SetConfig+0x418>)
 800cf3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3e:	bf00      	nop
 800cf40:	0800cf65 	.word	0x0800cf65
 800cf44:	0800cf6d 	.word	0x0800cf6d
 800cf48:	0800cf75 	.word	0x0800cf75
 800cf4c:	0800cf8b 	.word	0x0800cf8b
 800cf50:	0800cf7b 	.word	0x0800cf7b
 800cf54:	0800cf8b 	.word	0x0800cf8b
 800cf58:	0800cf8b 	.word	0x0800cf8b
 800cf5c:	0800cf8b 	.word	0x0800cf8b
 800cf60:	0800cf83 	.word	0x0800cf83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf64:	f7fc f932 	bl	80091cc <HAL_RCC_GetPCLK1Freq>
 800cf68:	61b8      	str	r0, [r7, #24]
        break;
 800cf6a:	e013      	b.n	800cf94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf6c:	f7fc f942 	bl	80091f4 <HAL_RCC_GetPCLK2Freq>
 800cf70:	61b8      	str	r0, [r7, #24]
        break;
 800cf72:	e00f      	b.n	800cf94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf74:	4b1d      	ldr	r3, [pc, #116]	@ (800cfec <UART_SetConfig+0x4c4>)
 800cf76:	61bb      	str	r3, [r7, #24]
        break;
 800cf78:	e00c      	b.n	800cf94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf7a:	f7fc f815 	bl	8008fa8 <HAL_RCC_GetSysClockFreq>
 800cf7e:	61b8      	str	r0, [r7, #24]
        break;
 800cf80:	e008      	b.n	800cf94 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf86:	61bb      	str	r3, [r7, #24]
        break;
 800cf88:	e004      	b.n	800cf94 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	77bb      	strb	r3, [r7, #30]
        break;
 800cf92:	bf00      	nop
    }

    if (pclk != 0U)
 800cf94:	69bb      	ldr	r3, [r7, #24]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d018      	beq.n	800cfcc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	085a      	lsrs	r2, r3, #1
 800cfa0:	69bb      	ldr	r3, [r7, #24]
 800cfa2:	441a      	add	r2, r3
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	2b0f      	cmp	r3, #15
 800cfb2:	d909      	bls.n	800cfc8 <UART_SetConfig+0x4a0>
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfba:	d205      	bcs.n	800cfc8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	b29a      	uxth	r2, r3
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	60da      	str	r2, [r3, #12]
 800cfc6:	e001      	b.n	800cfcc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cfc8:	2301      	movs	r3, #1
 800cfca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800cfd8:	7fbb      	ldrb	r3, [r7, #30]
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3720      	adds	r7, #32
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	40007c00 	.word	0x40007c00
 800cfe8:	40023800 	.word	0x40023800
 800cfec:	00f42400 	.word	0x00f42400

0800cff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cffc:	f003 0308 	and.w	r3, r3, #8
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00a      	beq.n	800d01a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	430a      	orrs	r2, r1
 800d018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00a      	beq.n	800d03c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	430a      	orrs	r2, r1
 800d03a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d040:	f003 0302 	and.w	r3, r3, #2
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00a      	beq.n	800d05e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	685b      	ldr	r3, [r3, #4]
 800d04e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	430a      	orrs	r2, r1
 800d05c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d062:	f003 0304 	and.w	r3, r3, #4
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00a      	beq.n	800d080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d084:	f003 0310 	and.w	r3, r3, #16
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00a      	beq.n	800d0a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	689b      	ldr	r3, [r3, #8]
 800d092:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	430a      	orrs	r2, r1
 800d0a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a6:	f003 0320 	and.w	r3, r3, #32
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d00a      	beq.n	800d0c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	430a      	orrs	r2, r1
 800d0c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d01a      	beq.n	800d106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	685b      	ldr	r3, [r3, #4]
 800d0d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	430a      	orrs	r2, r1
 800d0e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d0ee:	d10a      	bne.n	800d106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	430a      	orrs	r2, r1
 800d104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d00a      	beq.n	800d128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	430a      	orrs	r2, r1
 800d126:	605a      	str	r2, [r3, #4]
  }
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b08c      	sub	sp, #48	@ 0x30
 800d138:	af02      	add	r7, sp, #8
 800d13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2200      	movs	r2, #0
 800d140:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d144:	f7f9 fe9e 	bl	8006e84 <HAL_GetTick>
 800d148:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f003 0308 	and.w	r3, r3, #8
 800d154:	2b08      	cmp	r3, #8
 800d156:	d12e      	bne.n	800d1b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d158:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d15c:	9300      	str	r3, [sp, #0]
 800d15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d160:	2200      	movs	r2, #0
 800d162:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 f83b 	bl	800d1e2 <UART_WaitOnFlagUntilTimeout>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d021      	beq.n	800d1b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	e853 3f00 	ldrex	r3, [r3]
 800d17e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d186:	623b      	str	r3, [r7, #32]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	461a      	mov	r2, r3
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	61fb      	str	r3, [r7, #28]
 800d192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d194:	69b9      	ldr	r1, [r7, #24]
 800d196:	69fa      	ldr	r2, [r7, #28]
 800d198:	e841 2300 	strex	r3, r2, [r1]
 800d19c:	617b      	str	r3, [r7, #20]
   return(result);
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1e6      	bne.n	800d172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e011      	b.n	800d1da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2220      	movs	r2, #32
 800d1ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800d1d8:	2300      	movs	r3, #0
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3728      	adds	r7, #40	@ 0x28
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	60f8      	str	r0, [r7, #12]
 800d1ea:	60b9      	str	r1, [r7, #8]
 800d1ec:	603b      	str	r3, [r7, #0]
 800d1ee:	4613      	mov	r3, r2
 800d1f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1f2:	e04f      	b.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1fa:	d04b      	beq.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d1fc:	f7f9 fe42 	bl	8006e84 <HAL_GetTick>
 800d200:	4602      	mov	r2, r0
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	69ba      	ldr	r2, [r7, #24]
 800d208:	429a      	cmp	r2, r3
 800d20a:	d302      	bcc.n	800d212 <UART_WaitOnFlagUntilTimeout+0x30>
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d101      	bne.n	800d216 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d212:	2303      	movs	r3, #3
 800d214:	e04e      	b.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0304 	and.w	r3, r3, #4
 800d220:	2b00      	cmp	r3, #0
 800d222:	d037      	beq.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b80      	cmp	r3, #128	@ 0x80
 800d228:	d034      	beq.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b40      	cmp	r3, #64	@ 0x40
 800d22e:	d031      	beq.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	69db      	ldr	r3, [r3, #28]
 800d236:	f003 0308 	and.w	r3, r3, #8
 800d23a:	2b08      	cmp	r3, #8
 800d23c:	d110      	bne.n	800d260 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	2208      	movs	r2, #8
 800d244:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f000 f8fe 	bl	800d448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2208      	movs	r2, #8
 800d250:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	2200      	movs	r2, #0
 800d258:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e029      	b.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d26a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d26e:	d111      	bne.n	800d294 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d278:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d27a:	68f8      	ldr	r0, [r7, #12]
 800d27c:	f000 f8e4 	bl	800d448 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2220      	movs	r2, #32
 800d284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800d290:	2303      	movs	r3, #3
 800d292:	e00f      	b.n	800d2b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	69da      	ldr	r2, [r3, #28]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	4013      	ands	r3, r2
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	bf0c      	ite	eq
 800d2a4:	2301      	moveq	r3, #1
 800d2a6:	2300      	movne	r3, #0
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	79fb      	ldrb	r3, [r7, #7]
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d0a0      	beq.n	800d1f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d2b2:	2300      	movs	r3, #0
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3710      	adds	r7, #16
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b096      	sub	sp, #88	@ 0x58
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	60b9      	str	r1, [r7, #8]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	88fa      	ldrh	r2, [r7, #6]
 800d2d4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	2222      	movs	r2, #34	@ 0x22
 800d2e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d028      	beq.n	800d342 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2f4:	4a3e      	ldr	r2, [pc, #248]	@ (800d3f0 <UART_Start_Receive_DMA+0x134>)
 800d2f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d2fc:	4a3d      	ldr	r2, [pc, #244]	@ (800d3f4 <UART_Start_Receive_DMA+0x138>)
 800d2fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d304:	4a3c      	ldr	r2, [pc, #240]	@ (800d3f8 <UART_Start_Receive_DMA+0x13c>)
 800d306:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d30c:	2200      	movs	r2, #0
 800d30e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	3324      	adds	r3, #36	@ 0x24
 800d31a:	4619      	mov	r1, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d320:	461a      	mov	r2, r3
 800d322:	88fb      	ldrh	r3, [r7, #6]
 800d324:	f7f9 ff6e 	bl	8007204 <HAL_DMA_Start_IT>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d009      	beq.n	800d342 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2210      	movs	r2, #16
 800d332:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	2220      	movs	r2, #32
 800d33a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800d33e:	2301      	movs	r3, #1
 800d340:	e051      	b.n	800d3e6 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	691b      	ldr	r3, [r3, #16]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d018      	beq.n	800d37c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d352:	e853 3f00 	ldrex	r3, [r3]
 800d356:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d35a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d35e:	657b      	str	r3, [r7, #84]	@ 0x54
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	461a      	mov	r2, r3
 800d366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d36a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d36e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d370:	e841 2300 	strex	r3, r2, [r1]
 800d374:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d376:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1e6      	bne.n	800d34a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	3308      	adds	r3, #8
 800d382:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d386:	e853 3f00 	ldrex	r3, [r3]
 800d38a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	f043 0301 	orr.w	r3, r3, #1
 800d392:	653b      	str	r3, [r7, #80]	@ 0x50
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	3308      	adds	r3, #8
 800d39a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d39c:	637a      	str	r2, [r7, #52]	@ 0x34
 800d39e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3a4:	e841 2300 	strex	r3, r2, [r1]
 800d3a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1e5      	bne.n	800d37c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	3308      	adds	r3, #8
 800d3b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	e853 3f00 	ldrex	r3, [r3]
 800d3be:	613b      	str	r3, [r7, #16]
   return(result);
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	3308      	adds	r3, #8
 800d3ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d3d0:	623a      	str	r2, [r7, #32]
 800d3d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d4:	69f9      	ldr	r1, [r7, #28]
 800d3d6:	6a3a      	ldr	r2, [r7, #32]
 800d3d8:	e841 2300 	strex	r3, r2, [r1]
 800d3dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d1e5      	bne.n	800d3b0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3758      	adds	r7, #88	@ 0x58
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	0800d5c3 	.word	0x0800d5c3
 800d3f4:	0800d6eb 	.word	0x0800d6eb
 800d3f8:	0800d729 	.word	0x0800d729

0800d3fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b089      	sub	sp, #36	@ 0x24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	e853 3f00 	ldrex	r3, [r3]
 800d410:	60bb      	str	r3, [r7, #8]
   return(result);
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d418:	61fb      	str	r3, [r7, #28]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	61bb      	str	r3, [r7, #24]
 800d424:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d426:	6979      	ldr	r1, [r7, #20]
 800d428:	69ba      	ldr	r2, [r7, #24]
 800d42a:	e841 2300 	strex	r3, r2, [r1]
 800d42e:	613b      	str	r3, [r7, #16]
   return(result);
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e6      	bne.n	800d404 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2220      	movs	r2, #32
 800d43a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800d43c:	bf00      	nop
 800d43e:	3724      	adds	r7, #36	@ 0x24
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d448:	b480      	push	{r7}
 800d44a:	b095      	sub	sp, #84	@ 0x54
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d458:	e853 3f00 	ldrex	r3, [r3]
 800d45c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	461a      	mov	r2, r3
 800d46c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d46e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d470:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d476:	e841 2300 	strex	r3, r2, [r1]
 800d47a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d1e6      	bne.n	800d450 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3308      	adds	r3, #8
 800d488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48a:	6a3b      	ldr	r3, [r7, #32]
 800d48c:	e853 3f00 	ldrex	r3, [r3]
 800d490:	61fb      	str	r3, [r7, #28]
   return(result);
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	f023 0301 	bic.w	r3, r3, #1
 800d498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3308      	adds	r3, #8
 800d4a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4aa:	e841 2300 	strex	r3, r2, [r1]
 800d4ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d1e5      	bne.n	800d482 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d4ba:	2b01      	cmp	r3, #1
 800d4bc:	d118      	bne.n	800d4f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	e853 3f00 	ldrex	r3, [r3]
 800d4ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	f023 0310 	bic.w	r3, r3, #16
 800d4d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	461a      	mov	r2, r3
 800d4da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e0:	6979      	ldr	r1, [r7, #20]
 800d4e2:	69ba      	ldr	r2, [r7, #24]
 800d4e4:	e841 2300 	strex	r3, r2, [r1]
 800d4e8:	613b      	str	r3, [r7, #16]
   return(result);
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d1e6      	bne.n	800d4be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2220      	movs	r2, #32
 800d4f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800d504:	bf00      	nop
 800d506:	3754      	adds	r7, #84	@ 0x54
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b090      	sub	sp, #64	@ 0x40
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d51c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	69db      	ldr	r3, [r3, #28]
 800d522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d526:	d037      	beq.n	800d598 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d52a:	2200      	movs	r2, #0
 800d52c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	3308      	adds	r3, #8
 800d536:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d53a:	e853 3f00 	ldrex	r3, [r3]
 800d53e:	623b      	str	r3, [r7, #32]
   return(result);
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d546:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d548:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	3308      	adds	r3, #8
 800d54e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d550:	633a      	str	r2, [r7, #48]	@ 0x30
 800d552:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d554:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d556:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d558:	e841 2300 	strex	r3, r2, [r1]
 800d55c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1e5      	bne.n	800d530 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	e853 3f00 	ldrex	r3, [r3]
 800d570:	60fb      	str	r3, [r7, #12]
   return(result);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d578:	637b      	str	r3, [r7, #52]	@ 0x34
 800d57a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	461a      	mov	r2, r3
 800d580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d586:	69b9      	ldr	r1, [r7, #24]
 800d588:	69fa      	ldr	r2, [r7, #28]
 800d58a:	e841 2300 	strex	r3, r2, [r1]
 800d58e:	617b      	str	r3, [r7, #20]
   return(result);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1e6      	bne.n	800d564 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d596:	e002      	b.n	800d59e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d598:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d59a:	f7ff fa91 	bl	800cac0 <HAL_UART_TxCpltCallback>
}
 800d59e:	bf00      	nop
 800d5a0:	3740      	adds	r7, #64	@ 0x40
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff fa8d 	bl	800cad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b09c      	sub	sp, #112	@ 0x70
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	69db      	ldr	r3, [r3, #28]
 800d5d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d5d8:	d071      	beq.n	800d6be <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d5da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5dc:	2200      	movs	r2, #0
 800d5de:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d5ea:	e853 3f00 	ldrex	r3, [r3]
 800d5ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d5f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d5f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d5f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	461a      	mov	r2, r3
 800d5fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d600:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d602:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d604:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d606:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d608:	e841 2300 	strex	r3, r2, [r1]
 800d60c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d60e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1e6      	bne.n	800d5e2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d614:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3308      	adds	r3, #8
 800d61a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61e:	e853 3f00 	ldrex	r3, [r3]
 800d622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d626:	f023 0301 	bic.w	r3, r3, #1
 800d62a:	667b      	str	r3, [r7, #100]	@ 0x64
 800d62c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	3308      	adds	r3, #8
 800d632:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d634:	647a      	str	r2, [r7, #68]	@ 0x44
 800d636:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d63a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d63c:	e841 2300 	strex	r3, r2, [r1]
 800d640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1e5      	bne.n	800d614 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	3308      	adds	r3, #8
 800d64e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d652:	e853 3f00 	ldrex	r3, [r3]
 800d656:	623b      	str	r3, [r7, #32]
   return(result);
 800d658:	6a3b      	ldr	r3, [r7, #32]
 800d65a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d65e:	663b      	str	r3, [r7, #96]	@ 0x60
 800d660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	3308      	adds	r3, #8
 800d666:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d668:	633a      	str	r2, [r7, #48]	@ 0x30
 800d66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d66e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d670:	e841 2300 	strex	r3, r2, [r1]
 800d674:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1e5      	bne.n	800d648 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d67c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d67e:	2220      	movs	r2, #32
 800d680:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d688:	2b01      	cmp	r3, #1
 800d68a:	d118      	bne.n	800d6be <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d68c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	e853 3f00 	ldrex	r3, [r3]
 800d698:	60fb      	str	r3, [r7, #12]
   return(result);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	f023 0310 	bic.w	r3, r3, #16
 800d6a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d6a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6aa:	61fb      	str	r3, [r7, #28]
 800d6ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ae:	69b9      	ldr	r1, [r7, #24]
 800d6b0:	69fa      	ldr	r2, [r7, #28]
 800d6b2:	e841 2300 	strex	r3, r2, [r1]
 800d6b6:	617b      	str	r3, [r7, #20]
   return(result);
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d1e6      	bne.n	800d68c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d6be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d107      	bne.n	800d6dc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d6d6:	f7ff fa1b 	bl	800cb10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d6da:	e002      	b.n	800d6e2 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d6dc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d6de:	f7f6 f85d 	bl	800379c <HAL_UART_RxCpltCallback>
}
 800d6e2:	bf00      	nop
 800d6e4:	3770      	adds	r7, #112	@ 0x70
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}

0800d6ea <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d6ea:	b580      	push	{r7, lr}
 800d6ec:	b084      	sub	sp, #16
 800d6ee:	af00      	add	r7, sp, #0
 800d6f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6f6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d702:	2b01      	cmp	r3, #1
 800d704:	d109      	bne.n	800d71a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	b29b      	uxth	r3, r3
 800d710:	4619      	mov	r1, r3
 800d712:	68f8      	ldr	r0, [r7, #12]
 800d714:	f7ff f9fc 	bl	800cb10 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d718:	e002      	b.n	800d720 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d71a:	68f8      	ldr	r0, [r7, #12]
 800d71c:	f7ff f9e4 	bl	800cae8 <HAL_UART_RxHalfCpltCallback>
}
 800d720:	bf00      	nop
 800d722:	3710      	adds	r7, #16
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b086      	sub	sp, #24
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d734:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d73a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d742:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	689b      	ldr	r3, [r3, #8]
 800d74a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d74e:	2b80      	cmp	r3, #128	@ 0x80
 800d750:	d109      	bne.n	800d766 <UART_DMAError+0x3e>
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	2b21      	cmp	r3, #33	@ 0x21
 800d756:	d106      	bne.n	800d766 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800d760:	6978      	ldr	r0, [r7, #20]
 800d762:	f7ff fe4b 	bl	800d3fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	689b      	ldr	r3, [r3, #8]
 800d76c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d770:	2b40      	cmp	r3, #64	@ 0x40
 800d772:	d109      	bne.n	800d788 <UART_DMAError+0x60>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2b22      	cmp	r3, #34	@ 0x22
 800d778:	d106      	bne.n	800d788 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800d782:	6978      	ldr	r0, [r7, #20]
 800d784:	f7ff fe60 	bl	800d448 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d78e:	f043 0210 	orr.w	r2, r3, #16
 800d792:	697b      	ldr	r3, [r7, #20]
 800d794:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d798:	6978      	ldr	r0, [r7, #20]
 800d79a:	f7ff f9af 	bl	800cafc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d79e:	bf00      	nop
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f7ff f999 	bl	800cafc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7ca:	bf00      	nop
 800d7cc:	3710      	adds	r7, #16
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	bd80      	pop	{r7, pc}

0800d7d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d7d2:	b580      	push	{r7, lr}
 800d7d4:	b088      	sub	sp, #32
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	e853 3f00 	ldrex	r3, [r3]
 800d7e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7ee:	61fb      	str	r3, [r7, #28]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	61bb      	str	r3, [r7, #24]
 800d7fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fc:	6979      	ldr	r1, [r7, #20]
 800d7fe:	69ba      	ldr	r2, [r7, #24]
 800d800:	e841 2300 	strex	r3, r2, [r1]
 800d804:	613b      	str	r3, [r7, #16]
   return(result);
 800d806:	693b      	ldr	r3, [r7, #16]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d1e6      	bne.n	800d7da <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2220      	movs	r2, #32
 800d810:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff f951 	bl	800cac0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d81e:	bf00      	nop
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}
	...

0800d828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d828:	b084      	sub	sp, #16
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	f107 001c 	add.w	r0, r7, #28
 800d836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d83a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d121      	bne.n	800d886 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d846:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	4b21      	ldr	r3, [pc, #132]	@ (800d8d8 <USB_CoreInit+0xb0>)
 800d854:	4013      	ands	r3, r2
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	68db      	ldr	r3, [r3, #12]
 800d85e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d86a:	2b01      	cmp	r3, #1
 800d86c:	d105      	bne.n	800d87a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fa92 	bl	800dda4 <USB_CoreReset>
 800d880:	4603      	mov	r3, r0
 800d882:	73fb      	strb	r3, [r7, #15]
 800d884:	e010      	b.n	800d8a8 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 fa86 	bl	800dda4 <USB_CoreReset>
 800d898:	4603      	mov	r3, r0
 800d89a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800d8a8:	7fbb      	ldrb	r3, [r7, #30]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d10b      	bne.n	800d8c6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	f043 0206 	orr.w	r2, r3, #6
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f043 0220 	orr.w	r2, r3, #32
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8d2:	b004      	add	sp, #16
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	ffbdffbf 	.word	0xffbdffbf

0800d8dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	b083      	sub	sp, #12
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f023 0201 	bic.w	r2, r3, #1
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
 800d906:	460b      	mov	r3, r1
 800d908:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d90a:	2300      	movs	r3, #0
 800d90c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d91a:	78fb      	ldrb	r3, [r7, #3]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d115      	bne.n	800d94c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d92c:	200a      	movs	r0, #10
 800d92e:	f7f9 fab5 	bl	8006e9c <HAL_Delay>
      ms += 10U;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	330a      	adds	r3, #10
 800d936:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f000 fa25 	bl	800dd88 <USB_GetMode>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b01      	cmp	r3, #1
 800d942:	d01e      	beq.n	800d982 <USB_SetCurrentMode+0x84>
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2bc7      	cmp	r3, #199	@ 0xc7
 800d948:	d9f0      	bls.n	800d92c <USB_SetCurrentMode+0x2e>
 800d94a:	e01a      	b.n	800d982 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d115      	bne.n	800d97e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d95e:	200a      	movs	r0, #10
 800d960:	f7f9 fa9c 	bl	8006e9c <HAL_Delay>
      ms += 10U;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	330a      	adds	r3, #10
 800d968:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fa0c 	bl	800dd88 <USB_GetMode>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d005      	beq.n	800d982 <USB_SetCurrentMode+0x84>
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2bc7      	cmp	r3, #199	@ 0xc7
 800d97a:	d9f0      	bls.n	800d95e <USB_SetCurrentMode+0x60>
 800d97c:	e001      	b.n	800d982 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d97e:	2301      	movs	r3, #1
 800d980:	e005      	b.n	800d98e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2bc8      	cmp	r3, #200	@ 0xc8
 800d986:	d101      	bne.n	800d98c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e000      	b.n	800d98e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d998:	b084      	sub	sp, #16
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b086      	sub	sp, #24
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d9a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]
 800d9b6:	e009      	b.n	800d9cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	3340      	adds	r3, #64	@ 0x40
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	4413      	add	r3, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	2b0e      	cmp	r3, #14
 800d9d0:	d9f2      	bls.n	800d9b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d9d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d11c      	bne.n	800da14 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	68fa      	ldr	r2, [r7, #12]
 800d9e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d9e8:	f043 0302 	orr.w	r3, r3, #2
 800d9ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	601a      	str	r2, [r3, #0]
 800da12:	e005      	b.n	800da20 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800da26:	461a      	mov	r2, r3
 800da28:	2300      	movs	r3, #0
 800da2a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da2c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800da30:	2b01      	cmp	r3, #1
 800da32:	d10d      	bne.n	800da50 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800da34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d104      	bne.n	800da46 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800da3c:	2100      	movs	r1, #0
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f000 f968 	bl	800dd14 <USB_SetDevSpeed>
 800da44:	e008      	b.n	800da58 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800da46:	2101      	movs	r1, #1
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f000 f963 	bl	800dd14 <USB_SetDevSpeed>
 800da4e:	e003      	b.n	800da58 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800da50:	2103      	movs	r1, #3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f000 f95e 	bl	800dd14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800da58:	2110      	movs	r1, #16
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f8fa 	bl	800dc54 <USB_FlushTxFifo>
 800da60:	4603      	mov	r3, r0
 800da62:	2b00      	cmp	r3, #0
 800da64:	d001      	beq.n	800da6a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 f924 	bl	800dcb8 <USB_FlushRxFifo>
 800da70:	4603      	mov	r3, r0
 800da72:	2b00      	cmp	r3, #0
 800da74:	d001      	beq.n	800da7a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800da76:	2301      	movs	r3, #1
 800da78:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da80:	461a      	mov	r2, r3
 800da82:	2300      	movs	r3, #0
 800da84:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da8c:	461a      	mov	r2, r3
 800da8e:	2300      	movs	r3, #0
 800da90:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800da98:	461a      	mov	r2, r3
 800da9a:	2300      	movs	r3, #0
 800da9c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800da9e:	2300      	movs	r3, #0
 800daa0:	613b      	str	r3, [r7, #16]
 800daa2:	e043      	b.n	800db2c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	015a      	lsls	r2, r3, #5
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	4413      	add	r3, r2
 800daac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800daba:	d118      	bne.n	800daee <USB_DevInit+0x156>
    {
      if (i == 0U)
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dace:	461a      	mov	r2, r3
 800dad0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dad4:	6013      	str	r3, [r2, #0]
 800dad6:	e013      	b.n	800db00 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	015a      	lsls	r2, r3, #5
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	4413      	add	r3, r2
 800dae0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dae4:	461a      	mov	r2, r3
 800dae6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800daea:	6013      	str	r3, [r2, #0]
 800daec:	e008      	b.n	800db00 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dafa:	461a      	mov	r2, r3
 800dafc:	2300      	movs	r3, #0
 800dafe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	015a      	lsls	r2, r3, #5
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	4413      	add	r3, r2
 800db08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db0c:	461a      	mov	r2, r3
 800db0e:	2300      	movs	r3, #0
 800db10:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	015a      	lsls	r2, r3, #5
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	4413      	add	r3, r2
 800db1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800db1e:	461a      	mov	r2, r3
 800db20:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800db24:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	3301      	adds	r3, #1
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800db30:	461a      	mov	r2, r3
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	4293      	cmp	r3, r2
 800db36:	d3b5      	bcc.n	800daa4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	e043      	b.n	800dbc6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	015a      	lsls	r2, r3, #5
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	4413      	add	r3, r2
 800db46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800db50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800db54:	d118      	bne.n	800db88 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d10a      	bne.n	800db72 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	015a      	lsls	r2, r3, #5
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db68:	461a      	mov	r2, r3
 800db6a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db6e:	6013      	str	r3, [r2, #0]
 800db70:	e013      	b.n	800db9a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	015a      	lsls	r2, r3, #5
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	4413      	add	r3, r2
 800db7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db7e:	461a      	mov	r2, r3
 800db80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800db84:	6013      	str	r3, [r2, #0]
 800db86:	e008      	b.n	800db9a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	015a      	lsls	r2, r3, #5
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4413      	add	r3, r2
 800db90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db94:	461a      	mov	r2, r3
 800db96:	2300      	movs	r3, #0
 800db98:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	015a      	lsls	r2, r3, #5
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dba6:	461a      	mov	r2, r3
 800dba8:	2300      	movs	r3, #0
 800dbaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	015a      	lsls	r2, r3, #5
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbb8:	461a      	mov	r2, r3
 800dbba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800dbbe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	613b      	str	r3, [r7, #16]
 800dbc6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800dbca:	461a      	mov	r2, r3
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d3b5      	bcc.n	800db3e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	68fa      	ldr	r2, [r7, #12]
 800dbdc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dbe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dbe4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800dbf2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dbf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d105      	bne.n	800dc08 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	f043 0210 	orr.w	r2, r3, #16
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	4b0f      	ldr	r3, [pc, #60]	@ (800dc4c <USB_DevInit+0x2b4>)
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dc14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	699b      	ldr	r3, [r3, #24]
 800dc20:	f043 0208 	orr.w	r2, r3, #8
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dc28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dc2c:	2b01      	cmp	r3, #1
 800dc2e:	d105      	bne.n	800dc3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	699a      	ldr	r2, [r3, #24]
 800dc34:	4b06      	ldr	r3, [pc, #24]	@ (800dc50 <USB_DevInit+0x2b8>)
 800dc36:	4313      	orrs	r3, r2
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800dc3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3718      	adds	r7, #24
 800dc42:	46bd      	mov	sp, r7
 800dc44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dc48:	b004      	add	sp, #16
 800dc4a:	4770      	bx	lr
 800dc4c:	803c3800 	.word	0x803c3800
 800dc50:	40000004 	.word	0x40000004

0800dc54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3301      	adds	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc6e:	d901      	bls.n	800dc74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800dc70:	2303      	movs	r3, #3
 800dc72:	e01b      	b.n	800dcac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	691b      	ldr	r3, [r3, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	daf2      	bge.n	800dc62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	019b      	lsls	r3, r3, #6
 800dc84:	f043 0220 	orr.w	r2, r3, #32
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dc98:	d901      	bls.n	800dc9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dc9a:	2303      	movs	r3, #3
 800dc9c:	e006      	b.n	800dcac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	691b      	ldr	r3, [r3, #16]
 800dca2:	f003 0320 	and.w	r3, r3, #32
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	d0f0      	beq.n	800dc8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800dcaa:	2300      	movs	r3, #0
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3714      	adds	r7, #20
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb6:	4770      	bx	lr

0800dcb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dcd0:	d901      	bls.n	800dcd6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800dcd2:	2303      	movs	r3, #3
 800dcd4:	e018      	b.n	800dd08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	daf2      	bge.n	800dcc4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2210      	movs	r2, #16
 800dce6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	3301      	adds	r3, #1
 800dcec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dcf4:	d901      	bls.n	800dcfa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800dcf6:	2303      	movs	r3, #3
 800dcf8:	e006      	b.n	800dd08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	691b      	ldr	r3, [r3, #16]
 800dcfe:	f003 0310 	and.w	r3, r3, #16
 800dd02:	2b10      	cmp	r3, #16
 800dd04:	d0f0      	beq.n	800dce8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800dd06:	2300      	movs	r3, #0
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3714      	adds	r7, #20
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr

0800dd14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b085      	sub	sp, #20
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	68f9      	ldr	r1, [r7, #12]
 800dd30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800dd34:	4313      	orrs	r3, r2
 800dd36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800dd38:	2300      	movs	r3, #0
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3714      	adds	r7, #20
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd44:	4770      	bx	lr

0800dd46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd46:	b480      	push	{r7}
 800dd48:	b085      	sub	sp, #20
 800dd4a:	af00      	add	r7, sp, #0
 800dd4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	68fa      	ldr	r2, [r7, #12]
 800dd5c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800dd60:	f023 0303 	bic.w	r3, r3, #3
 800dd64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dd6c:	685b      	ldr	r3, [r3, #4]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dd74:	f043 0302 	orr.w	r3, r3, #2
 800dd78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dd7a:	2300      	movs	r3, #0
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr

0800dd88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	f003 0301 	and.w	r3, r3, #1
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	370c      	adds	r7, #12
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b085      	sub	sp, #20
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ddac:	2300      	movs	r3, #0
 800ddae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ddbc:	d901      	bls.n	800ddc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	e01b      	b.n	800ddfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	691b      	ldr	r3, [r3, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	daf2      	bge.n	800ddb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	f043 0201 	orr.w	r2, r3, #1
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	3301      	adds	r3, #1
 800ddde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800dde6:	d901      	bls.n	800ddec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800dde8:	2303      	movs	r3, #3
 800ddea:	e006      	b.n	800ddfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	691b      	ldr	r3, [r3, #16]
 800ddf0:	f003 0301 	and.w	r3, r3, #1
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d0f0      	beq.n	800ddda <USB_CoreReset+0x36>

  return HAL_OK;
 800ddf8:	2300      	movs	r3, #0
}
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
	...

0800de08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800de0c:	4904      	ldr	r1, [pc, #16]	@ (800de20 <MX_FATFS_Init+0x18>)
 800de0e:	4805      	ldr	r0, [pc, #20]	@ (800de24 <MX_FATFS_Init+0x1c>)
 800de10:	f004 f97a 	bl	8012108 <FATFS_LinkDriver>
 800de14:	4603      	mov	r3, r0
 800de16:	461a      	mov	r2, r3
 800de18:	4b03      	ldr	r3, [pc, #12]	@ (800de28 <MX_FATFS_Init+0x20>)
 800de1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de1c:	bf00      	nop
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	20005b80 	.word	0x20005b80
 800de24:	20000060 	.word	0x20000060
 800de28:	20005b7c 	.word	0x20005b7c

0800de2c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de2c:	b480      	push	{r7}
 800de2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de32:	4618      	mov	r0, r3
 800de34:	46bd      	mov	sp, r7
 800de36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3a:	4770      	bx	lr

0800de3c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	4603      	mov	r3, r0
 800de44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800de46:	79fb      	ldrb	r3, [r7, #7]
 800de48:	4618      	mov	r0, r3
 800de4a:	f000 f9d7 	bl	800e1fc <USER_SPI_initialize>
 800de4e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800de50:	4618      	mov	r0, r3
 800de52:	3708      	adds	r7, #8
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b082      	sub	sp, #8
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	4618      	mov	r0, r3
 800de66:	f000 fabd 	bl	800e3e4 <USER_SPI_status>
 800de6a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3708      	adds	r7, #8
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	60b9      	str	r1, [r7, #8]
 800de7c:	607a      	str	r2, [r7, #4]
 800de7e:	603b      	str	r3, [r7, #0]
 800de80:	4603      	mov	r3, r0
 800de82:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);return RES_OK;
 800de84:	7bf8      	ldrb	r0, [r7, #15]
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	68b9      	ldr	r1, [r7, #8]
 800de8c:	f000 fac0 	bl	800e410 <USER_SPI_read>
 800de90:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800de92:	4618      	mov	r0, r3
 800de94:	3710      	adds	r7, #16
 800de96:	46bd      	mov	sp, r7
 800de98:	bd80      	pop	{r7, pc}

0800de9a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800de9a:	b580      	push	{r7, lr}
 800de9c:	b084      	sub	sp, #16
 800de9e:	af00      	add	r7, sp, #0
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
 800dea4:	603b      	str	r3, [r7, #0]
 800dea6:	4603      	mov	r3, r0
 800dea8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800deaa:	7bf8      	ldrb	r0, [r7, #15]
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	68b9      	ldr	r1, [r7, #8]
 800deb2:	f000 fb13 	bl	800e4dc <USER_SPI_write>
 800deb6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800deb8:	4618      	mov	r0, r3
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	4603      	mov	r3, r0
 800dec8:	603a      	str	r2, [r7, #0]
 800deca:	71fb      	strb	r3, [r7, #7]
 800decc:	460b      	mov	r3, r1
 800dece:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800ded0:	79b9      	ldrb	r1, [r7, #6]
 800ded2:	79fb      	ldrb	r3, [r7, #7]
 800ded4:	683a      	ldr	r2, [r7, #0]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 fb7c 	bl	800e5d4 <USER_SPI_ioctl>
 800dedc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
	...

0800dee8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800dee8:	b580      	push	{r7, lr}
 800deea:	b082      	sub	sp, #8
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800def0:	f7f8 ffc8 	bl	8006e84 <HAL_GetTick>
 800def4:	4603      	mov	r3, r0
 800def6:	4a04      	ldr	r2, [pc, #16]	@ (800df08 <SPI_Timer_On+0x20>)
 800def8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800defa:	4a04      	ldr	r2, [pc, #16]	@ (800df0c <SPI_Timer_On+0x24>)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6013      	str	r3, [r2, #0]
}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}
 800df08:	20005b8c 	.word	0x20005b8c
 800df0c:	20005b90 	.word	0x20005b90

0800df10 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800df10:	b580      	push	{r7, lr}
 800df12:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800df14:	f7f8 ffb6 	bl	8006e84 <HAL_GetTick>
 800df18:	4602      	mov	r2, r0
 800df1a:	4b06      	ldr	r3, [pc, #24]	@ (800df34 <SPI_Timer_Status+0x24>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	1ad2      	subs	r2, r2, r3
 800df20:	4b05      	ldr	r3, [pc, #20]	@ (800df38 <SPI_Timer_Status+0x28>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	429a      	cmp	r2, r3
 800df26:	bf34      	ite	cc
 800df28:	2301      	movcc	r3, #1
 800df2a:	2300      	movcs	r3, #0
 800df2c:	b2db      	uxtb	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	20005b8c 	.word	0x20005b8c
 800df38:	20005b90 	.word	0x20005b90

0800df3c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b086      	sub	sp, #24
 800df40:	af02      	add	r7, sp, #8
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800df46:	f107 020f 	add.w	r2, r7, #15
 800df4a:	1df9      	adds	r1, r7, #7
 800df4c:	2332      	movs	r3, #50	@ 0x32
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	2301      	movs	r3, #1
 800df52:	4804      	ldr	r0, [pc, #16]	@ (800df64 <xchg_spi+0x28>)
 800df54:	f7fb ffa4 	bl	8009ea0 <HAL_SPI_TransmitReceive>
    return rxDat;
 800df58:	7bfb      	ldrb	r3, [r7, #15]
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20004bb8 	.word	0x20004bb8

0800df68 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800df68:	b590      	push	{r4, r7, lr}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800df72:	2300      	movs	r3, #0
 800df74:	60fb      	str	r3, [r7, #12]
 800df76:	e00a      	b.n	800df8e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	18d4      	adds	r4, r2, r3
 800df7e:	20ff      	movs	r0, #255	@ 0xff
 800df80:	f7ff ffdc 	bl	800df3c <xchg_spi>
 800df84:	4603      	mov	r3, r0
 800df86:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	3301      	adds	r3, #1
 800df8c:	60fb      	str	r3, [r7, #12]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	429a      	cmp	r2, r3
 800df94:	d3f0      	bcc.n	800df78 <rcvr_spi_multi+0x10>
	}
}
 800df96:	bf00      	nop
 800df98:	bf00      	nop
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd90      	pop	{r4, r7, pc}

0800dfa0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800dfaa:	683b      	ldr	r3, [r7, #0]
 800dfac:	b29a      	uxth	r2, r3
 800dfae:	f04f 33ff 	mov.w	r3, #4294967295
 800dfb2:	6879      	ldr	r1, [r7, #4]
 800dfb4:	4803      	ldr	r0, [pc, #12]	@ (800dfc4 <xmit_spi_multi+0x24>)
 800dfb6:	f7fb fdfe 	bl	8009bb6 <HAL_SPI_Transmit>
}
 800dfba:	bf00      	nop
 800dfbc:	3708      	adds	r7, #8
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	20004bb8 	.word	0x20004bb8

0800dfc8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800dfd0:	f7f8 ff58 	bl	8006e84 <HAL_GetTick>
 800dfd4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800dfda:	20ff      	movs	r0, #255	@ 0xff
 800dfdc:	f7ff ffae 	bl	800df3c <xchg_spi>
 800dfe0:	4603      	mov	r3, r0
 800dfe2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	2bff      	cmp	r3, #255	@ 0xff
 800dfe8:	d007      	beq.n	800dffa <wait_ready+0x32>
 800dfea:	f7f8 ff4b 	bl	8006e84 <HAL_GetTick>
 800dfee:	4602      	mov	r2, r0
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	1ad3      	subs	r3, r2, r3
 800dff4:	693a      	ldr	r2, [r7, #16]
 800dff6:	429a      	cmp	r2, r3
 800dff8:	d8ef      	bhi.n	800dfda <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800dffa:	7bfb      	ldrb	r3, [r7, #15]
 800dffc:	2bff      	cmp	r3, #255	@ 0xff
 800dffe:	bf0c      	ite	eq
 800e000:	2301      	moveq	r3, #1
 800e002:	2300      	movne	r3, #0
 800e004:	b2db      	uxtb	r3, r3
}
 800e006:	4618      	mov	r0, r3
 800e008:	3718      	adds	r7, #24
 800e00a:	46bd      	mov	sp, r7
 800e00c:	bd80      	pop	{r7, pc}
	...

0800e010 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800e014:	2201      	movs	r2, #1
 800e016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e01a:	4804      	ldr	r0, [pc, #16]	@ (800e02c <despiselect+0x1c>)
 800e01c:	f7f9 fe12 	bl	8007c44 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800e020:	20ff      	movs	r0, #255	@ 0xff
 800e022:	f7ff ff8b 	bl	800df3c <xchg_spi>

}
 800e026:	bf00      	nop
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	40020400 	.word	0x40020400

0800e030 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800e030:	b580      	push	{r7, lr}
 800e032:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800e034:	2200      	movs	r2, #0
 800e036:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e03a:	480a      	ldr	r0, [pc, #40]	@ (800e064 <spiselect+0x34>)
 800e03c:	f7f9 fe02 	bl	8007c44 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800e040:	20ff      	movs	r0, #255	@ 0xff
 800e042:	f7ff ff7b 	bl	800df3c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800e046:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e04a:	f7ff ffbd 	bl	800dfc8 <wait_ready>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <spiselect+0x28>
 800e054:	2301      	movs	r3, #1
 800e056:	e002      	b.n	800e05e <spiselect+0x2e>

	despiselect();
 800e058:	f7ff ffda 	bl	800e010 <despiselect>
	return 0;	/* Timeout */
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	40020400 	.word	0x40020400

0800e068 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800e072:	20c8      	movs	r0, #200	@ 0xc8
 800e074:	f7ff ff38 	bl	800dee8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800e078:	20ff      	movs	r0, #255	@ 0xff
 800e07a:	f7ff ff5f 	bl	800df3c <xchg_spi>
 800e07e:	4603      	mov	r3, r0
 800e080:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800e082:	7bfb      	ldrb	r3, [r7, #15]
 800e084:	2bff      	cmp	r3, #255	@ 0xff
 800e086:	d104      	bne.n	800e092 <rcvr_datablock+0x2a>
 800e088:	f7ff ff42 	bl	800df10 <SPI_Timer_Status>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d1f2      	bne.n	800e078 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	2bfe      	cmp	r3, #254	@ 0xfe
 800e096:	d001      	beq.n	800e09c <rcvr_datablock+0x34>
 800e098:	2300      	movs	r3, #0
 800e09a:	e00a      	b.n	800e0b2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f7ff ff62 	bl	800df68 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800e0a4:	20ff      	movs	r0, #255	@ 0xff
 800e0a6:	f7ff ff49 	bl	800df3c <xchg_spi>
 800e0aa:	20ff      	movs	r0, #255	@ 0xff
 800e0ac:	f7ff ff46 	bl	800df3c <xchg_spi>

	return 1;						/* Function succeeded */
 800e0b0:	2301      	movs	r3, #1
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b084      	sub	sp, #16
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	460b      	mov	r3, r1
 800e0c4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800e0c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e0ca:	f7ff ff7d 	bl	800dfc8 <wait_ready>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d101      	bne.n	800e0d8 <xmit_datablock+0x1e>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	e01e      	b.n	800e116 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800e0d8:	78fb      	ldrb	r3, [r7, #3]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7ff ff2e 	bl	800df3c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	2bfd      	cmp	r3, #253	@ 0xfd
 800e0e4:	d016      	beq.n	800e114 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800e0e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f7ff ff58 	bl	800dfa0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800e0f0:	20ff      	movs	r0, #255	@ 0xff
 800e0f2:	f7ff ff23 	bl	800df3c <xchg_spi>
 800e0f6:	20ff      	movs	r0, #255	@ 0xff
 800e0f8:	f7ff ff20 	bl	800df3c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800e0fc:	20ff      	movs	r0, #255	@ 0xff
 800e0fe:	f7ff ff1d 	bl	800df3c <xchg_spi>
 800e102:	4603      	mov	r3, r0
 800e104:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800e106:	7bfb      	ldrb	r3, [r7, #15]
 800e108:	f003 031f 	and.w	r3, r3, #31
 800e10c:	2b05      	cmp	r3, #5
 800e10e:	d001      	beq.n	800e114 <xmit_datablock+0x5a>
 800e110:	2300      	movs	r3, #0
 800e112:	e000      	b.n	800e116 <xmit_datablock+0x5c>
	}
	return 1;
 800e114:	2301      	movs	r3, #1
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}

0800e11e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800e11e:	b580      	push	{r7, lr}
 800e120:	b084      	sub	sp, #16
 800e122:	af00      	add	r7, sp, #0
 800e124:	4603      	mov	r3, r0
 800e126:	6039      	str	r1, [r7, #0]
 800e128:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800e12a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	da0e      	bge.n	800e150 <send_cmd+0x32>
		cmd &= 0x7F;
 800e132:	79fb      	ldrb	r3, [r7, #7]
 800e134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e138:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800e13a:	2100      	movs	r1, #0
 800e13c:	2037      	movs	r0, #55	@ 0x37
 800e13e:	f7ff ffee 	bl	800e11e <send_cmd>
 800e142:	4603      	mov	r3, r0
 800e144:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800e146:	7bbb      	ldrb	r3, [r7, #14]
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d901      	bls.n	800e150 <send_cmd+0x32>
 800e14c:	7bbb      	ldrb	r3, [r7, #14]
 800e14e:	e051      	b.n	800e1f4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	2b0c      	cmp	r3, #12
 800e154:	d008      	beq.n	800e168 <send_cmd+0x4a>
		despiselect();
 800e156:	f7ff ff5b 	bl	800e010 <despiselect>
		if (!spiselect()) return 0xFF;
 800e15a:	f7ff ff69 	bl	800e030 <spiselect>
 800e15e:	4603      	mov	r3, r0
 800e160:	2b00      	cmp	r3, #0
 800e162:	d101      	bne.n	800e168 <send_cmd+0x4a>
 800e164:	23ff      	movs	r3, #255	@ 0xff
 800e166:	e045      	b.n	800e1f4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800e168:	79fb      	ldrb	r3, [r7, #7]
 800e16a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff fee3 	bl	800df3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	0e1b      	lsrs	r3, r3, #24
 800e17a:	b2db      	uxtb	r3, r3
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fedd 	bl	800df3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	0c1b      	lsrs	r3, r3, #16
 800e186:	b2db      	uxtb	r3, r3
 800e188:	4618      	mov	r0, r3
 800e18a:	f7ff fed7 	bl	800df3c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	0a1b      	lsrs	r3, r3, #8
 800e192:	b2db      	uxtb	r3, r3
 800e194:	4618      	mov	r0, r3
 800e196:	f7ff fed1 	bl	800df3c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff fecc 	bl	800df3c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800e1a8:	79fb      	ldrb	r3, [r7, #7]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d101      	bne.n	800e1b2 <send_cmd+0x94>
 800e1ae:	2395      	movs	r3, #149	@ 0x95
 800e1b0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800e1b2:	79fb      	ldrb	r3, [r7, #7]
 800e1b4:	2b08      	cmp	r3, #8
 800e1b6:	d101      	bne.n	800e1bc <send_cmd+0x9e>
 800e1b8:	2387      	movs	r3, #135	@ 0x87
 800e1ba:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800e1bc:	7bfb      	ldrb	r3, [r7, #15]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff febc 	bl	800df3c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	2b0c      	cmp	r3, #12
 800e1c8:	d102      	bne.n	800e1d0 <send_cmd+0xb2>
 800e1ca:	20ff      	movs	r0, #255	@ 0xff
 800e1cc:	f7ff feb6 	bl	800df3c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800e1d0:	230a      	movs	r3, #10
 800e1d2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800e1d4:	20ff      	movs	r0, #255	@ 0xff
 800e1d6:	f7ff feb1 	bl	800df3c <xchg_spi>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800e1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	da05      	bge.n	800e1f2 <send_cmd+0xd4>
 800e1e6:	7bfb      	ldrb	r3, [r7, #15]
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	73fb      	strb	r3, [r7, #15]
 800e1ec:	7bfb      	ldrb	r3, [r7, #15]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d1f0      	bne.n	800e1d4 <send_cmd+0xb6>

	return res;							/* Return received response */
 800e1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3710      	adds	r7, #16
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b085      	sub	sp, #20
 800e200:	af00      	add	r7, sp, #0
 800e202:	4603      	mov	r3, r0
 800e204:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800e206:	79fb      	ldrb	r3, [r7, #7]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d001      	beq.n	800e210 <USER_SPI_initialize+0x14>
 800e20c:	2301      	movs	r3, #1
 800e20e:	e0dc      	b.n	800e3ca <USER_SPI_initialize+0x1ce>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800e210:	4b70      	ldr	r3, [pc, #448]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0302 	and.w	r3, r3, #2
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <USER_SPI_initialize+0x2a>
 800e21e:	4b6d      	ldr	r3, [pc, #436]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e220:	781b      	ldrb	r3, [r3, #0]
 800e222:	b2db      	uxtb	r3, r3
 800e224:	e0d1      	b.n	800e3ca <USER_SPI_initialize+0x1ce>
	flag = Stat;
 800e226:	4b6b      	ldr	r3, [pc, #428]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e228:	781b      	ldrb	r3, [r3, #0]
 800e22a:	b2db      	uxtb	r3, r3
 800e22c:	461a      	mov	r2, r3
 800e22e:	4b6a      	ldr	r3, [pc, #424]	@ (800e3d8 <USER_SPI_initialize+0x1dc>)
 800e230:	601a      	str	r2, [r3, #0]

	FCLK_SLOW();
 800e232:	4b6a      	ldr	r3, [pc, #424]	@ (800e3dc <USER_SPI_initialize+0x1e0>)
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e23c:	4b67      	ldr	r3, [pc, #412]	@ (800e3dc <USER_SPI_initialize+0x1e0>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800e244:	601a      	str	r2, [r3, #0]
	//SD_SPI_HANDLE.Instance->CR1 = SPI_BAUDRATEPRESCALER_128;


	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800e246:	230a      	movs	r3, #10
 800e248:	73fb      	strb	r3, [r7, #15]
 800e24a:	e005      	b.n	800e258 <USER_SPI_initialize+0x5c>
 800e24c:	20ff      	movs	r0, #255	@ 0xff
 800e24e:	f7ff fe75 	bl	800df3c <xchg_spi>
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	3b01      	subs	r3, #1
 800e256:	73fb      	strb	r3, [r7, #15]
 800e258:	7bfb      	ldrb	r3, [r7, #15]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d1f6      	bne.n	800e24c <USER_SPI_initialize+0x50>

	ty = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800e262:	2100      	movs	r1, #0
 800e264:	2000      	movs	r0, #0
 800e266:	f7ff ff5a 	bl	800e11e <send_cmd>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	f040 808b 	bne.w	800e388 <USER_SPI_initialize+0x18c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800e272:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e276:	f7ff fe37 	bl	800dee8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800e27a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800e27e:	2008      	movs	r0, #8
 800e280:	f7ff ff4d 	bl	800e11e <send_cmd>
 800e284:	4603      	mov	r3, r0
 800e286:	2b01      	cmp	r3, #1
 800e288:	d151      	bne.n	800e32e <USER_SPI_initialize+0x132>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800e28a:	2300      	movs	r3, #0
 800e28c:	73fb      	strb	r3, [r7, #15]
 800e28e:	e00d      	b.n	800e2ac <USER_SPI_initialize+0xb0>
 800e290:	7bfc      	ldrb	r4, [r7, #15]
 800e292:	20ff      	movs	r0, #255	@ 0xff
 800e294:	f7ff fe52 	bl	800df3c <xchg_spi>
 800e298:	4603      	mov	r3, r0
 800e29a:	461a      	mov	r2, r3
 800e29c:	f104 0310 	add.w	r3, r4, #16
 800e2a0:	443b      	add	r3, r7
 800e2a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e2a6:	7bfb      	ldrb	r3, [r7, #15]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	73fb      	strb	r3, [r7, #15]
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b03      	cmp	r3, #3
 800e2b0:	d9ee      	bls.n	800e290 <USER_SPI_initialize+0x94>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800e2b2:	7abb      	ldrb	r3, [r7, #10]
 800e2b4:	2b01      	cmp	r3, #1
 800e2b6:	d167      	bne.n	800e388 <USER_SPI_initialize+0x18c>
 800e2b8:	7afb      	ldrb	r3, [r7, #11]
 800e2ba:	2baa      	cmp	r3, #170	@ 0xaa
 800e2bc:	d164      	bne.n	800e388 <USER_SPI_initialize+0x18c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800e2be:	bf00      	nop
 800e2c0:	f7ff fe26 	bl	800df10 <SPI_Timer_Status>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d007      	beq.n	800e2da <USER_SPI_initialize+0xde>
 800e2ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800e2ce:	20a9      	movs	r0, #169	@ 0xa9
 800e2d0:	f7ff ff25 	bl	800e11e <send_cmd>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1f2      	bne.n	800e2c0 <USER_SPI_initialize+0xc4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800e2da:	f7ff fe19 	bl	800df10 <SPI_Timer_Status>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d051      	beq.n	800e388 <USER_SPI_initialize+0x18c>
 800e2e4:	2100      	movs	r1, #0
 800e2e6:	203a      	movs	r0, #58	@ 0x3a
 800e2e8:	f7ff ff19 	bl	800e11e <send_cmd>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d14a      	bne.n	800e388 <USER_SPI_initialize+0x18c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	73fb      	strb	r3, [r7, #15]
 800e2f6:	e00d      	b.n	800e314 <USER_SPI_initialize+0x118>
 800e2f8:	7bfc      	ldrb	r4, [r7, #15]
 800e2fa:	20ff      	movs	r0, #255	@ 0xff
 800e2fc:	f7ff fe1e 	bl	800df3c <xchg_spi>
 800e300:	4603      	mov	r3, r0
 800e302:	461a      	mov	r2, r3
 800e304:	f104 0310 	add.w	r3, r4, #16
 800e308:	443b      	add	r3, r7
 800e30a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800e30e:	7bfb      	ldrb	r3, [r7, #15]
 800e310:	3301      	adds	r3, #1
 800e312:	73fb      	strb	r3, [r7, #15]
 800e314:	7bfb      	ldrb	r3, [r7, #15]
 800e316:	2b03      	cmp	r3, #3
 800e318:	d9ee      	bls.n	800e2f8 <USER_SPI_initialize+0xfc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800e31a:	7a3b      	ldrb	r3, [r7, #8]
 800e31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e320:	2b00      	cmp	r3, #0
 800e322:	d001      	beq.n	800e328 <USER_SPI_initialize+0x12c>
 800e324:	230c      	movs	r3, #12
 800e326:	e000      	b.n	800e32a <USER_SPI_initialize+0x12e>
 800e328:	2304      	movs	r3, #4
 800e32a:	737b      	strb	r3, [r7, #13]
 800e32c:	e02c      	b.n	800e388 <USER_SPI_initialize+0x18c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800e32e:	2100      	movs	r1, #0
 800e330:	20a9      	movs	r0, #169	@ 0xa9
 800e332:	f7ff fef4 	bl	800e11e <send_cmd>
 800e336:	4603      	mov	r3, r0
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d804      	bhi.n	800e346 <USER_SPI_initialize+0x14a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800e33c:	2302      	movs	r3, #2
 800e33e:	737b      	strb	r3, [r7, #13]
 800e340:	23a9      	movs	r3, #169	@ 0xa9
 800e342:	73bb      	strb	r3, [r7, #14]
 800e344:	e003      	b.n	800e34e <USER_SPI_initialize+0x152>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800e346:	2301      	movs	r3, #1
 800e348:	737b      	strb	r3, [r7, #13]
 800e34a:	2301      	movs	r3, #1
 800e34c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800e34e:	bf00      	nop
 800e350:	f7ff fdde 	bl	800df10 <SPI_Timer_Status>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d007      	beq.n	800e36a <USER_SPI_initialize+0x16e>
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	2100      	movs	r1, #0
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff fedd 	bl	800e11e <send_cmd>
 800e364:	4603      	mov	r3, r0
 800e366:	2b00      	cmp	r3, #0
 800e368:	d1f2      	bne.n	800e350 <USER_SPI_initialize+0x154>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800e36a:	f7ff fdd1 	bl	800df10 <SPI_Timer_Status>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <USER_SPI_initialize+0x188>
 800e374:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e378:	2010      	movs	r0, #16
 800e37a:	f7ff fed0 	bl	800e11e <send_cmd>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <USER_SPI_initialize+0x18c>
				ty = 0;
 800e384:	2300      	movs	r3, #0
 800e386:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800e388:	4a15      	ldr	r2, [pc, #84]	@ (800e3e0 <USER_SPI_initialize+0x1e4>)
 800e38a:	7b7b      	ldrb	r3, [r7, #13]
 800e38c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800e38e:	f7ff fe3f 	bl	800e010 <despiselect>

	if (ty) {			/* OK */
 800e392:	7b7b      	ldrb	r3, [r7, #13]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d012      	beq.n	800e3be <USER_SPI_initialize+0x1c2>
		FCLK_FAST();			/* Set fast clock */
 800e398:	4b10      	ldr	r3, [pc, #64]	@ (800e3dc <USER_SPI_initialize+0x1e0>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800e3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800e3dc <USER_SPI_initialize+0x1e0>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f042 0210 	orr.w	r2, r2, #16
 800e3aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800e3ac:	4b09      	ldr	r3, [pc, #36]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	f023 0301 	bic.w	r3, r3, #1
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	4b06      	ldr	r3, [pc, #24]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e3ba:	701a      	strb	r2, [r3, #0]
 800e3bc:	e002      	b.n	800e3c4 <USER_SPI_initialize+0x1c8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800e3be:	4b05      	ldr	r3, [pc, #20]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800e3c4:	4b03      	ldr	r3, [pc, #12]	@ (800e3d4 <USER_SPI_initialize+0x1d8>)
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	b2db      	uxtb	r3, r3
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3714      	adds	r7, #20
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd90      	pop	{r4, r7, pc}
 800e3d2:	bf00      	nop
 800e3d4:	20000074 	.word	0x20000074
 800e3d8:	20005b84 	.word	0x20005b84
 800e3dc:	20004bb8 	.word	0x20004bb8
 800e3e0:	20005b88 	.word	0x20005b88

0800e3e4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b083      	sub	sp, #12
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800e3ee:	79fb      	ldrb	r3, [r7, #7]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d001      	beq.n	800e3f8 <USER_SPI_status+0x14>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e002      	b.n	800e3fe <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800e3f8:	4b04      	ldr	r3, [pc, #16]	@ (800e40c <USER_SPI_status+0x28>)
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	b2db      	uxtb	r3, r3
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	370c      	adds	r7, #12
 800e402:	46bd      	mov	sp, r7
 800e404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e408:	4770      	bx	lr
 800e40a:	bf00      	nop
 800e40c:	20000074 	.word	0x20000074

0800e410 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	607a      	str	r2, [r7, #4]
 800e41a:	603b      	str	r3, [r7, #0]
 800e41c:	4603      	mov	r3, r0
 800e41e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e420:	7bfb      	ldrb	r3, [r7, #15]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d102      	bne.n	800e42c <USER_SPI_read+0x1c>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d101      	bne.n	800e430 <USER_SPI_read+0x20>
 800e42c:	2304      	movs	r3, #4
 800e42e:	e04d      	b.n	800e4cc <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e430:	4b28      	ldr	r3, [pc, #160]	@ (800e4d4 <USER_SPI_read+0xc4>)
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	b2db      	uxtb	r3, r3
 800e436:	f003 0301 	and.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <USER_SPI_read+0x32>
 800e43e:	2303      	movs	r3, #3
 800e440:	e044      	b.n	800e4cc <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800e442:	4b25      	ldr	r3, [pc, #148]	@ (800e4d8 <USER_SPI_read+0xc8>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	f003 0308 	and.w	r3, r3, #8
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d102      	bne.n	800e454 <USER_SPI_read+0x44>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	025b      	lsls	r3, r3, #9
 800e452:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b01      	cmp	r3, #1
 800e458:	d111      	bne.n	800e47e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800e45a:	6879      	ldr	r1, [r7, #4]
 800e45c:	2011      	movs	r0, #17
 800e45e:	f7ff fe5e 	bl	800e11e <send_cmd>
 800e462:	4603      	mov	r3, r0
 800e464:	2b00      	cmp	r3, #0
 800e466:	d129      	bne.n	800e4bc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800e468:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e46c:	68b8      	ldr	r0, [r7, #8]
 800e46e:	f7ff fdfb 	bl	800e068 <rcvr_datablock>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d021      	beq.n	800e4bc <USER_SPI_read+0xac>
			count = 0;
 800e478:	2300      	movs	r3, #0
 800e47a:	603b      	str	r3, [r7, #0]
 800e47c:	e01e      	b.n	800e4bc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	2012      	movs	r0, #18
 800e482:	f7ff fe4c 	bl	800e11e <send_cmd>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d117      	bne.n	800e4bc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800e48c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800e490:	68b8      	ldr	r0, [r7, #8]
 800e492:	f7ff fde9 	bl	800e068 <rcvr_datablock>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00a      	beq.n	800e4b2 <USER_SPI_read+0xa2>
				buff += 512;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e4a2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e4a4:	683b      	ldr	r3, [r7, #0]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	603b      	str	r3, [r7, #0]
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1ed      	bne.n	800e48c <USER_SPI_read+0x7c>
 800e4b0:	e000      	b.n	800e4b4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800e4b2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	200c      	movs	r0, #12
 800e4b8:	f7ff fe31 	bl	800e11e <send_cmd>
		}
	}
	despiselect();
 800e4bc:	f7ff fda8 	bl	800e010 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e4c0:	683b      	ldr	r3, [r7, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	bf14      	ite	ne
 800e4c6:	2301      	movne	r3, #1
 800e4c8:	2300      	moveq	r3, #0
 800e4ca:	b2db      	uxtb	r3, r3
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}
 800e4d4:	20000074 	.word	0x20000074
 800e4d8:	20005b88 	.word	0x20005b88

0800e4dc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	60b9      	str	r1, [r7, #8]
 800e4e4:	607a      	str	r2, [r7, #4]
 800e4e6:	603b      	str	r3, [r7, #0]
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800e4ec:	7bfb      	ldrb	r3, [r7, #15]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d102      	bne.n	800e4f8 <USER_SPI_write+0x1c>
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d101      	bne.n	800e4fc <USER_SPI_write+0x20>
 800e4f8:	2304      	movs	r3, #4
 800e4fa:	e063      	b.n	800e5c4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800e4fc:	4b33      	ldr	r3, [pc, #204]	@ (800e5cc <USER_SPI_write+0xf0>)
 800e4fe:	781b      	ldrb	r3, [r3, #0]
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d001      	beq.n	800e50e <USER_SPI_write+0x32>
 800e50a:	2303      	movs	r3, #3
 800e50c:	e05a      	b.n	800e5c4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800e50e:	4b2f      	ldr	r3, [pc, #188]	@ (800e5cc <USER_SPI_write+0xf0>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	b2db      	uxtb	r3, r3
 800e514:	f003 0304 	and.w	r3, r3, #4
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <USER_SPI_write+0x44>
 800e51c:	2302      	movs	r3, #2
 800e51e:	e051      	b.n	800e5c4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800e520:	4b2b      	ldr	r3, [pc, #172]	@ (800e5d0 <USER_SPI_write+0xf4>)
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 0308 	and.w	r3, r3, #8
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d102      	bne.n	800e532 <USER_SPI_write+0x56>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	025b      	lsls	r3, r3, #9
 800e530:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b01      	cmp	r3, #1
 800e536:	d110      	bne.n	800e55a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800e538:	6879      	ldr	r1, [r7, #4]
 800e53a:	2018      	movs	r0, #24
 800e53c:	f7ff fdef 	bl	800e11e <send_cmd>
 800e540:	4603      	mov	r3, r0
 800e542:	2b00      	cmp	r3, #0
 800e544:	d136      	bne.n	800e5b4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800e546:	21fe      	movs	r1, #254	@ 0xfe
 800e548:	68b8      	ldr	r0, [r7, #8]
 800e54a:	f7ff fdb6 	bl	800e0ba <xmit_datablock>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d02f      	beq.n	800e5b4 <USER_SPI_write+0xd8>
			count = 0;
 800e554:	2300      	movs	r3, #0
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	e02c      	b.n	800e5b4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800e55a:	4b1d      	ldr	r3, [pc, #116]	@ (800e5d0 <USER_SPI_write+0xf4>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	f003 0306 	and.w	r3, r3, #6
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <USER_SPI_write+0x92>
 800e566:	6839      	ldr	r1, [r7, #0]
 800e568:	2097      	movs	r0, #151	@ 0x97
 800e56a:	f7ff fdd8 	bl	800e11e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800e56e:	6879      	ldr	r1, [r7, #4]
 800e570:	2019      	movs	r0, #25
 800e572:	f7ff fdd4 	bl	800e11e <send_cmd>
 800e576:	4603      	mov	r3, r0
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d11b      	bne.n	800e5b4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800e57c:	21fc      	movs	r1, #252	@ 0xfc
 800e57e:	68b8      	ldr	r0, [r7, #8]
 800e580:	f7ff fd9b 	bl	800e0ba <xmit_datablock>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00a      	beq.n	800e5a0 <USER_SPI_write+0xc4>
				buff += 512;
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800e590:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	3b01      	subs	r3, #1
 800e596:	603b      	str	r3, [r7, #0]
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1ee      	bne.n	800e57c <USER_SPI_write+0xa0>
 800e59e:	e000      	b.n	800e5a2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800e5a0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800e5a2:	21fd      	movs	r1, #253	@ 0xfd
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f7ff fd88 	bl	800e0ba <xmit_datablock>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <USER_SPI_write+0xd8>
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800e5b4:	f7ff fd2c 	bl	800e010 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	bf14      	ite	ne
 800e5be:	2301      	movne	r3, #1
 800e5c0:	2300      	moveq	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	3710      	adds	r7, #16
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}
 800e5cc:	20000074 	.word	0x20000074
 800e5d0:	20005b88 	.word	0x20005b88

0800e5d4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800e5d4:	b580      	push	{r7, lr}
 800e5d6:	b08c      	sub	sp, #48	@ 0x30
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	603a      	str	r2, [r7, #0]
 800e5de:	71fb      	strb	r3, [r7, #7]
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800e5e4:	79fb      	ldrb	r3, [r7, #7]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <USER_SPI_ioctl+0x1a>
 800e5ea:	2304      	movs	r3, #4
 800e5ec:	e15a      	b.n	800e8a4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800e5ee:	4baf      	ldr	r3, [pc, #700]	@ (800e8ac <USER_SPI_ioctl+0x2d8>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d001      	beq.n	800e600 <USER_SPI_ioctl+0x2c>
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e151      	b.n	800e8a4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800e600:	2301      	movs	r3, #1
 800e602:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 800e606:	79bb      	ldrb	r3, [r7, #6]
 800e608:	2b04      	cmp	r3, #4
 800e60a:	f200 8136 	bhi.w	800e87a <USER_SPI_ioctl+0x2a6>
 800e60e:	a201      	add	r2, pc, #4	@ (adr r2, 800e614 <USER_SPI_ioctl+0x40>)
 800e610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e614:	0800e629 	.word	0x0800e629
 800e618:	0800e63d 	.word	0x0800e63d
 800e61c:	0800e87b 	.word	0x0800e87b
 800e620:	0800e6e9 	.word	0x0800e6e9
 800e624:	0800e7df 	.word	0x0800e7df
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800e628:	f7ff fd02 	bl	800e030 <spiselect>
 800e62c:	4603      	mov	r3, r0
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f000 8127 	beq.w	800e882 <USER_SPI_ioctl+0x2ae>
 800e634:	2300      	movs	r3, #0
 800e636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e63a:	e122      	b.n	800e882 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800e63c:	2100      	movs	r1, #0
 800e63e:	2009      	movs	r0, #9
 800e640:	f7ff fd6d 	bl	800e11e <send_cmd>
 800e644:	4603      	mov	r3, r0
 800e646:	2b00      	cmp	r3, #0
 800e648:	f040 811d 	bne.w	800e886 <USER_SPI_ioctl+0x2b2>
 800e64c:	f107 030c 	add.w	r3, r7, #12
 800e650:	2110      	movs	r1, #16
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff fd08 	bl	800e068 <rcvr_datablock>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f000 8113 	beq.w	800e886 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800e660:	7b3b      	ldrb	r3, [r7, #12]
 800e662:	099b      	lsrs	r3, r3, #6
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b01      	cmp	r3, #1
 800e668:	d111      	bne.n	800e68e <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800e66a:	7d7b      	ldrb	r3, [r7, #21]
 800e66c:	461a      	mov	r2, r3
 800e66e:	7d3b      	ldrb	r3, [r7, #20]
 800e670:	021b      	lsls	r3, r3, #8
 800e672:	4413      	add	r3, r2
 800e674:	461a      	mov	r2, r3
 800e676:	7cfb      	ldrb	r3, [r7, #19]
 800e678:	041b      	lsls	r3, r3, #16
 800e67a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800e67e:	4413      	add	r3, r2
 800e680:	3301      	adds	r3, #1
 800e682:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	029a      	lsls	r2, r3, #10
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	601a      	str	r2, [r3, #0]
 800e68c:	e028      	b.n	800e6e0 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800e68e:	7c7b      	ldrb	r3, [r7, #17]
 800e690:	f003 030f 	and.w	r3, r3, #15
 800e694:	b2da      	uxtb	r2, r3
 800e696:	7dbb      	ldrb	r3, [r7, #22]
 800e698:	09db      	lsrs	r3, r3, #7
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	4413      	add	r3, r2
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	7d7b      	ldrb	r3, [r7, #21]
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	f003 0306 	and.w	r3, r3, #6
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	4413      	add	r3, r2
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	3302      	adds	r3, #2
 800e6b2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800e6b6:	7d3b      	ldrb	r3, [r7, #20]
 800e6b8:	099b      	lsrs	r3, r3, #6
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	461a      	mov	r2, r3
 800e6be:	7cfb      	ldrb	r3, [r7, #19]
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	441a      	add	r2, r3
 800e6c4:	7cbb      	ldrb	r3, [r7, #18]
 800e6c6:	029b      	lsls	r3, r3, #10
 800e6c8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e6cc:	4413      	add	r3, r2
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800e6d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6d6:	3b09      	subs	r3, #9
 800e6d8:	69fa      	ldr	r2, [r7, #28]
 800e6da:	409a      	lsls	r2, r3
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e6e6:	e0ce      	b.n	800e886 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800e6e8:	4b71      	ldr	r3, [pc, #452]	@ (800e8b0 <USER_SPI_ioctl+0x2dc>)
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	f003 0304 	and.w	r3, r3, #4
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d031      	beq.n	800e758 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	208d      	movs	r0, #141	@ 0x8d
 800e6f8:	f7ff fd11 	bl	800e11e <send_cmd>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f040 80c3 	bne.w	800e88a <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800e704:	20ff      	movs	r0, #255	@ 0xff
 800e706:	f7ff fc19 	bl	800df3c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800e70a:	f107 030c 	add.w	r3, r7, #12
 800e70e:	2110      	movs	r1, #16
 800e710:	4618      	mov	r0, r3
 800e712:	f7ff fca9 	bl	800e068 <rcvr_datablock>
 800e716:	4603      	mov	r3, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 80b6 	beq.w	800e88a <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800e71e:	2330      	movs	r3, #48	@ 0x30
 800e720:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e724:	e007      	b.n	800e736 <USER_SPI_ioctl+0x162>
 800e726:	20ff      	movs	r0, #255	@ 0xff
 800e728:	f7ff fc08 	bl	800df3c <xchg_spi>
 800e72c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e730:	3b01      	subs	r3, #1
 800e732:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 800e736:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f3      	bne.n	800e726 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800e73e:	7dbb      	ldrb	r3, [r7, #22]
 800e740:	091b      	lsrs	r3, r3, #4
 800e742:	b2db      	uxtb	r3, r3
 800e744:	461a      	mov	r2, r3
 800e746:	2310      	movs	r3, #16
 800e748:	fa03 f202 	lsl.w	r2, r3, r2
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800e756:	e098      	b.n	800e88a <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800e758:	2100      	movs	r1, #0
 800e75a:	2009      	movs	r0, #9
 800e75c:	f7ff fcdf 	bl	800e11e <send_cmd>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	f040 8091 	bne.w	800e88a <USER_SPI_ioctl+0x2b6>
 800e768:	f107 030c 	add.w	r3, r7, #12
 800e76c:	2110      	movs	r1, #16
 800e76e:	4618      	mov	r0, r3
 800e770:	f7ff fc7a 	bl	800e068 <rcvr_datablock>
 800e774:	4603      	mov	r3, r0
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 8087 	beq.w	800e88a <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800e77c:	4b4c      	ldr	r3, [pc, #304]	@ (800e8b0 <USER_SPI_ioctl+0x2dc>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d012      	beq.n	800e7ae <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800e788:	7dbb      	ldrb	r3, [r7, #22]
 800e78a:	005b      	lsls	r3, r3, #1
 800e78c:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800e790:	7dfa      	ldrb	r2, [r7, #23]
 800e792:	09d2      	lsrs	r2, r2, #7
 800e794:	b2d2      	uxtb	r2, r2
 800e796:	4413      	add	r3, r2
 800e798:	1c5a      	adds	r2, r3, #1
 800e79a:	7e7b      	ldrb	r3, [r7, #25]
 800e79c:	099b      	lsrs	r3, r3, #6
 800e79e:	b2db      	uxtb	r3, r3
 800e7a0:	3b01      	subs	r3, #1
 800e7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	e013      	b.n	800e7d6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800e7ae:	7dbb      	ldrb	r3, [r7, #22]
 800e7b0:	109b      	asrs	r3, r3, #2
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	f003 031f 	and.w	r3, r3, #31
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	7dfa      	ldrb	r2, [r7, #23]
 800e7bc:	00d2      	lsls	r2, r2, #3
 800e7be:	f002 0218 	and.w	r2, r2, #24
 800e7c2:	7df9      	ldrb	r1, [r7, #23]
 800e7c4:	0949      	lsrs	r1, r1, #5
 800e7c6:	b2c9      	uxtb	r1, r1
 800e7c8:	440a      	add	r2, r1
 800e7ca:	3201      	adds	r2, #1
 800e7cc:	fb02 f303 	mul.w	r3, r2, r3
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800e7dc:	e055      	b.n	800e88a <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e7de:	4b34      	ldr	r3, [pc, #208]	@ (800e8b0 <USER_SPI_ioctl+0x2dc>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	f003 0306 	and.w	r3, r3, #6
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d051      	beq.n	800e88e <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e7ea:	f107 020c 	add.w	r2, r7, #12
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	210b      	movs	r1, #11
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f7ff feee 	bl	800e5d4 <USER_SPI_ioctl>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d149      	bne.n	800e892 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e7fe:	7b3b      	ldrb	r3, [r7, #12]
 800e800:	099b      	lsrs	r3, r3, #6
 800e802:	b2db      	uxtb	r3, r3
 800e804:	2b00      	cmp	r3, #0
 800e806:	d104      	bne.n	800e812 <USER_SPI_ioctl+0x23e>
 800e808:	7dbb      	ldrb	r3, [r7, #22]
 800e80a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d041      	beq.n	800e896 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	623b      	str	r3, [r7, #32]
 800e816:	6a3b      	ldr	r3, [r7, #32]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e81c:	6a3b      	ldr	r3, [r7, #32]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 800e822:	4b23      	ldr	r3, [pc, #140]	@ (800e8b0 <USER_SPI_ioctl+0x2dc>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0308 	and.w	r3, r3, #8
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d105      	bne.n	800e83a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800e82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e830:	025b      	lsls	r3, r3, #9
 800e832:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e836:	025b      	lsls	r3, r3, #9
 800e838:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800e83a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e83c:	2020      	movs	r0, #32
 800e83e:	f7ff fc6e 	bl	800e11e <send_cmd>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d128      	bne.n	800e89a <USER_SPI_ioctl+0x2c6>
 800e848:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e84a:	2021      	movs	r0, #33	@ 0x21
 800e84c:	f7ff fc67 	bl	800e11e <send_cmd>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	d121      	bne.n	800e89a <USER_SPI_ioctl+0x2c6>
 800e856:	2100      	movs	r1, #0
 800e858:	2026      	movs	r0, #38	@ 0x26
 800e85a:	f7ff fc60 	bl	800e11e <send_cmd>
 800e85e:	4603      	mov	r3, r0
 800e860:	2b00      	cmp	r3, #0
 800e862:	d11a      	bne.n	800e89a <USER_SPI_ioctl+0x2c6>
 800e864:	f247 5030 	movw	r0, #30000	@ 0x7530
 800e868:	f7ff fbae 	bl	800dfc8 <wait_ready>
 800e86c:	4603      	mov	r3, r0
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d013      	beq.n	800e89a <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800e872:	2300      	movs	r3, #0
 800e874:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 800e878:	e00f      	b.n	800e89a <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800e87a:	2304      	movs	r3, #4
 800e87c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e880:	e00c      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		break;
 800e882:	bf00      	nop
 800e884:	e00a      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		break;
 800e886:	bf00      	nop
 800e888:	e008      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		break;
 800e88a:	bf00      	nop
 800e88c:	e006      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800e88e:	bf00      	nop
 800e890:	e004      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800e892:	bf00      	nop
 800e894:	e002      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800e896:	bf00      	nop
 800e898:	e000      	b.n	800e89c <USER_SPI_ioctl+0x2c8>
		break;
 800e89a:	bf00      	nop
	}

	despiselect();
 800e89c:	f7ff fbb8 	bl	800e010 <despiselect>

	return res;
 800e8a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3730      	adds	r7, #48	@ 0x30
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	20000074 	.word	0x20000074
 800e8b0:	20005b88 	.word	0x20005b88

0800e8b4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b084      	sub	sp, #16
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	4603      	mov	r3, r0
 800e8bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e8be:	79fb      	ldrb	r3, [r7, #7]
 800e8c0:	4a08      	ldr	r2, [pc, #32]	@ (800e8e4 <disk_status+0x30>)
 800e8c2:	009b      	lsls	r3, r3, #2
 800e8c4:	4413      	add	r3, r2
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	79fa      	ldrb	r2, [r7, #7]
 800e8cc:	4905      	ldr	r1, [pc, #20]	@ (800e8e4 <disk_status+0x30>)
 800e8ce:	440a      	add	r2, r1
 800e8d0:	7a12      	ldrb	r2, [r2, #8]
 800e8d2:	4610      	mov	r0, r2
 800e8d4:	4798      	blx	r3
 800e8d6:	4603      	mov	r3, r0
 800e8d8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8dc:	4618      	mov	r0, r3
 800e8de:	3710      	adds	r7, #16
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	20005bbc 	.word	0x20005bbc

0800e8e8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b084      	sub	sp, #16
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	4a0d      	ldr	r2, [pc, #52]	@ (800e930 <disk_initialize+0x48>)
 800e8fa:	5cd3      	ldrb	r3, [r2, r3]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d111      	bne.n	800e924 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	4a0b      	ldr	r2, [pc, #44]	@ (800e930 <disk_initialize+0x48>)
 800e904:	2101      	movs	r1, #1
 800e906:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e908:	79fb      	ldrb	r3, [r7, #7]
 800e90a:	4a09      	ldr	r2, [pc, #36]	@ (800e930 <disk_initialize+0x48>)
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	4413      	add	r3, r2
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	79fa      	ldrb	r2, [r7, #7]
 800e916:	4906      	ldr	r1, [pc, #24]	@ (800e930 <disk_initialize+0x48>)
 800e918:	440a      	add	r2, r1
 800e91a:	7a12      	ldrb	r2, [r2, #8]
 800e91c:	4610      	mov	r0, r2
 800e91e:	4798      	blx	r3
 800e920:	4603      	mov	r3, r0
 800e922:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e924:	7bfb      	ldrb	r3, [r7, #15]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20005bbc 	.word	0x20005bbc

0800e934 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e934:	b590      	push	{r4, r7, lr}
 800e936:	b087      	sub	sp, #28
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
 800e93e:	603b      	str	r3, [r7, #0]
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e944:	7bfb      	ldrb	r3, [r7, #15]
 800e946:	4a0a      	ldr	r2, [pc, #40]	@ (800e970 <disk_read+0x3c>)
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	689c      	ldr	r4, [r3, #8]
 800e950:	7bfb      	ldrb	r3, [r7, #15]
 800e952:	4a07      	ldr	r2, [pc, #28]	@ (800e970 <disk_read+0x3c>)
 800e954:	4413      	add	r3, r2
 800e956:	7a18      	ldrb	r0, [r3, #8]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	687a      	ldr	r2, [r7, #4]
 800e95c:	68b9      	ldr	r1, [r7, #8]
 800e95e:	47a0      	blx	r4
 800e960:	4603      	mov	r3, r0
 800e962:	75fb      	strb	r3, [r7, #23]
  return res;
 800e964:	7dfb      	ldrb	r3, [r7, #23]
}
 800e966:	4618      	mov	r0, r3
 800e968:	371c      	adds	r7, #28
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd90      	pop	{r4, r7, pc}
 800e96e:	bf00      	nop
 800e970:	20005bbc 	.word	0x20005bbc

0800e974 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e974:	b590      	push	{r4, r7, lr}
 800e976:	b087      	sub	sp, #28
 800e978:	af00      	add	r7, sp, #0
 800e97a:	60b9      	str	r1, [r7, #8]
 800e97c:	607a      	str	r2, [r7, #4]
 800e97e:	603b      	str	r3, [r7, #0]
 800e980:	4603      	mov	r3, r0
 800e982:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e984:	7bfb      	ldrb	r3, [r7, #15]
 800e986:	4a0a      	ldr	r2, [pc, #40]	@ (800e9b0 <disk_write+0x3c>)
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	4413      	add	r3, r2
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	68dc      	ldr	r4, [r3, #12]
 800e990:	7bfb      	ldrb	r3, [r7, #15]
 800e992:	4a07      	ldr	r2, [pc, #28]	@ (800e9b0 <disk_write+0x3c>)
 800e994:	4413      	add	r3, r2
 800e996:	7a18      	ldrb	r0, [r3, #8]
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	687a      	ldr	r2, [r7, #4]
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	47a0      	blx	r4
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	371c      	adds	r7, #28
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd90      	pop	{r4, r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20005bbc 	.word	0x20005bbc

0800e9b4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	603a      	str	r2, [r7, #0]
 800e9be:	71fb      	strb	r3, [r7, #7]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e9c4:	79fb      	ldrb	r3, [r7, #7]
 800e9c6:	4a09      	ldr	r2, [pc, #36]	@ (800e9ec <disk_ioctl+0x38>)
 800e9c8:	009b      	lsls	r3, r3, #2
 800e9ca:	4413      	add	r3, r2
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	691b      	ldr	r3, [r3, #16]
 800e9d0:	79fa      	ldrb	r2, [r7, #7]
 800e9d2:	4906      	ldr	r1, [pc, #24]	@ (800e9ec <disk_ioctl+0x38>)
 800e9d4:	440a      	add	r2, r1
 800e9d6:	7a10      	ldrb	r0, [r2, #8]
 800e9d8:	79b9      	ldrb	r1, [r7, #6]
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	4798      	blx	r3
 800e9de:	4603      	mov	r3, r0
 800e9e0:	73fb      	strb	r3, [r7, #15]
  return res;
 800e9e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}
 800e9ec:	20005bbc 	.word	0x20005bbc

0800e9f0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b085      	sub	sp, #20
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	3301      	adds	r3, #1
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ea00:	89fb      	ldrh	r3, [r7, #14]
 800ea02:	021b      	lsls	r3, r3, #8
 800ea04:	b21a      	sxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	b21b      	sxth	r3, r3
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	b21b      	sxth	r3, r3
 800ea10:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ea12:	89fb      	ldrh	r3, [r7, #14]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3303      	adds	r3, #3
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	021b      	lsls	r3, r3, #8
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	3202      	adds	r2, #2
 800ea38:	7812      	ldrb	r2, [r2, #0]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	021b      	lsls	r3, r3, #8
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	3201      	adds	r2, #1
 800ea46:	7812      	ldrb	r2, [r2, #0]
 800ea48:	4313      	orrs	r3, r2
 800ea4a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	021b      	lsls	r3, r3, #8
 800ea50:	687a      	ldr	r2, [r7, #4]
 800ea52:	7812      	ldrb	r2, [r2, #0]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	60fb      	str	r3, [r7, #12]
	return rv;
 800ea58:	68fb      	ldr	r3, [r7, #12]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	3714      	adds	r7, #20
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ea66:	b480      	push	{r7}
 800ea68:	b083      	sub	sp, #12
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
 800ea6e:	460b      	mov	r3, r1
 800ea70:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	887a      	ldrh	r2, [r7, #2]
 800ea7a:	b2d2      	uxtb	r2, r2
 800ea7c:	701a      	strb	r2, [r3, #0]
 800ea7e:	887b      	ldrh	r3, [r7, #2]
 800ea80:	0a1b      	lsrs	r3, r3, #8
 800ea82:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	1c5a      	adds	r2, r3, #1
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	887a      	ldrh	r2, [r7, #2]
 800ea8c:	b2d2      	uxtb	r2, r2
 800ea8e:	701a      	strb	r2, [r3, #0]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	1c5a      	adds	r2, r3, #1
 800eaaa:	607a      	str	r2, [r7, #4]
 800eaac:	683a      	ldr	r2, [r7, #0]
 800eaae:	b2d2      	uxtb	r2, r2
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	0a1b      	lsrs	r3, r3, #8
 800eab6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	1c5a      	adds	r2, r3, #1
 800eabc:	607a      	str	r2, [r7, #4]
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	b2d2      	uxtb	r2, r2
 800eac2:	701a      	strb	r2, [r3, #0]
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	0a1b      	lsrs	r3, r3, #8
 800eac8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	1c5a      	adds	r2, r3, #1
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	b2d2      	uxtb	r2, r2
 800ead4:	701a      	strb	r2, [r3, #0]
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	0a1b      	lsrs	r3, r3, #8
 800eada:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	607a      	str	r2, [r7, #4]
 800eae2:	683a      	ldr	r2, [r7, #0]
 800eae4:	b2d2      	uxtb	r2, r2
 800eae6:	701a      	strb	r2, [r3, #0]
}
 800eae8:	bf00      	nop
 800eaea:	370c      	adds	r7, #12
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr

0800eaf4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eaf4:	b480      	push	{r7}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	60f8      	str	r0, [r7, #12]
 800eafc:	60b9      	str	r1, [r7, #8]
 800eafe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d00d      	beq.n	800eb2a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eb0e:	693a      	ldr	r2, [r7, #16]
 800eb10:	1c53      	adds	r3, r2, #1
 800eb12:	613b      	str	r3, [r7, #16]
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	1c59      	adds	r1, r3, #1
 800eb18:	6179      	str	r1, [r7, #20]
 800eb1a:	7812      	ldrb	r2, [r2, #0]
 800eb1c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	3b01      	subs	r3, #1
 800eb22:	607b      	str	r3, [r7, #4]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1f1      	bne.n	800eb0e <mem_cpy+0x1a>
	}
}
 800eb2a:	bf00      	nop
 800eb2c:	371c      	adds	r7, #28
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800eb36:	b480      	push	{r7}
 800eb38:	b087      	sub	sp, #28
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	60f8      	str	r0, [r7, #12]
 800eb3e:	60b9      	str	r1, [r7, #8]
 800eb40:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	1c5a      	adds	r2, r3, #1
 800eb4a:	617a      	str	r2, [r7, #20]
 800eb4c:	68ba      	ldr	r2, [r7, #8]
 800eb4e:	b2d2      	uxtb	r2, r2
 800eb50:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3b01      	subs	r3, #1
 800eb56:	607b      	str	r3, [r7, #4]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d1f3      	bne.n	800eb46 <mem_set+0x10>
}
 800eb5e:	bf00      	nop
 800eb60:	bf00      	nop
 800eb62:	371c      	adds	r7, #28
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800eb6c:	b480      	push	{r7}
 800eb6e:	b089      	sub	sp, #36	@ 0x24
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	61fb      	str	r3, [r7, #28]
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	61fa      	str	r2, [r7, #28]
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	61ba      	str	r2, [r7, #24]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	1acb      	subs	r3, r1, r3
 800eb98:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	607b      	str	r3, [r7, #4]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d002      	beq.n	800ebac <mem_cmp+0x40>
 800eba6:	697b      	ldr	r3, [r7, #20]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d0eb      	beq.n	800eb84 <mem_cmp+0x18>

	return r;
 800ebac:	697b      	ldr	r3, [r7, #20]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3724      	adds	r7, #36	@ 0x24
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr

0800ebba <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ebba:	b480      	push	{r7}
 800ebbc:	b083      	sub	sp, #12
 800ebbe:	af00      	add	r7, sp, #0
 800ebc0:	6078      	str	r0, [r7, #4]
 800ebc2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ebc4:	e002      	b.n	800ebcc <chk_chr+0x12>
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	607b      	str	r3, [r7, #4]
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d005      	beq.n	800ebe0 <chk_chr+0x26>
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	461a      	mov	r2, r3
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d1f2      	bne.n	800ebc6 <chk_chr+0xc>
	return *str;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	781b      	ldrb	r3, [r3, #0]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b082      	sub	sp, #8
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d009      	beq.n	800ec12 <lock_fs+0x22>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	691b      	ldr	r3, [r3, #16]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f003 fb82 	bl	801230c <ff_req_grant>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d001      	beq.n	800ec12 <lock_fs+0x22>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e000      	b.n	800ec14 <lock_fs+0x24>
 800ec12:	2300      	movs	r3, #0
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	460b      	mov	r3, r1
 800ec26:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00d      	beq.n	800ec4a <unlock_fs+0x2e>
 800ec2e:	78fb      	ldrb	r3, [r7, #3]
 800ec30:	2b0c      	cmp	r3, #12
 800ec32:	d00a      	beq.n	800ec4a <unlock_fs+0x2e>
 800ec34:	78fb      	ldrb	r3, [r7, #3]
 800ec36:	2b0b      	cmp	r3, #11
 800ec38:	d007      	beq.n	800ec4a <unlock_fs+0x2e>
 800ec3a:	78fb      	ldrb	r3, [r7, #3]
 800ec3c:	2b0f      	cmp	r3, #15
 800ec3e:	d004      	beq.n	800ec4a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	4618      	mov	r0, r3
 800ec46:	f003 fb76 	bl	8012336 <ff_rel_grant>
	}
}
 800ec4a:	bf00      	nop
 800ec4c:	3708      	adds	r7, #8
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
	...

0800ec54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ec54:	b480      	push	{r7}
 800ec56:	b085      	sub	sp, #20
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60bb      	str	r3, [r7, #8]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	60fb      	str	r3, [r7, #12]
 800ec66:	e029      	b.n	800ecbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ec68:	4a27      	ldr	r2, [pc, #156]	@ (800ed08 <chk_lock+0xb4>)
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	011b      	lsls	r3, r3, #4
 800ec6e:	4413      	add	r3, r2
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d01d      	beq.n	800ecb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec76:	4a24      	ldr	r2, [pc, #144]	@ (800ed08 <chk_lock+0xb4>)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	011b      	lsls	r3, r3, #4
 800ec7c:	4413      	add	r3, r2
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d116      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ec88:	4a1f      	ldr	r2, [pc, #124]	@ (800ed08 <chk_lock+0xb4>)
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	011b      	lsls	r3, r3, #4
 800ec8e:	4413      	add	r3, r2
 800ec90:	3304      	adds	r3, #4
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	d10c      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ec9c:	4a1a      	ldr	r2, [pc, #104]	@ (800ed08 <chk_lock+0xb4>)
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	011b      	lsls	r3, r3, #4
 800eca2:	4413      	add	r3, r2
 800eca4:	3308      	adds	r3, #8
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d102      	bne.n	800ecb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ecb0:	e007      	b.n	800ecc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3301      	adds	r3, #1
 800ecba:	60fb      	str	r3, [r7, #12]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d9d2      	bls.n	800ec68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b02      	cmp	r3, #2
 800ecc6:	d109      	bne.n	800ecdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ecc8:	68bb      	ldr	r3, [r7, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d102      	bne.n	800ecd4 <chk_lock+0x80>
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	2b02      	cmp	r3, #2
 800ecd2:	d101      	bne.n	800ecd8 <chk_lock+0x84>
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e010      	b.n	800ecfa <chk_lock+0xa6>
 800ecd8:	2312      	movs	r3, #18
 800ecda:	e00e      	b.n	800ecfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d108      	bne.n	800ecf4 <chk_lock+0xa0>
 800ece2:	4a09      	ldr	r2, [pc, #36]	@ (800ed08 <chk_lock+0xb4>)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	011b      	lsls	r3, r3, #4
 800ece8:	4413      	add	r3, r2
 800ecea:	330c      	adds	r3, #12
 800ecec:	881b      	ldrh	r3, [r3, #0]
 800ecee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ecf2:	d101      	bne.n	800ecf8 <chk_lock+0xa4>
 800ecf4:	2310      	movs	r3, #16
 800ecf6:	e000      	b.n	800ecfa <chk_lock+0xa6>
 800ecf8:	2300      	movs	r3, #0
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	20005b9c 	.word	0x20005b9c

0800ed0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ed12:	2300      	movs	r3, #0
 800ed14:	607b      	str	r3, [r7, #4]
 800ed16:	e002      	b.n	800ed1e <enq_lock+0x12>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	607b      	str	r3, [r7, #4]
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d806      	bhi.n	800ed32 <enq_lock+0x26>
 800ed24:	4a09      	ldr	r2, [pc, #36]	@ (800ed4c <enq_lock+0x40>)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	011b      	lsls	r3, r3, #4
 800ed2a:	4413      	add	r3, r2
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d1f2      	bne.n	800ed18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	bf14      	ite	ne
 800ed38:	2301      	movne	r3, #1
 800ed3a:	2300      	moveq	r3, #0
 800ed3c:	b2db      	uxtb	r3, r3
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	370c      	adds	r7, #12
 800ed42:	46bd      	mov	sp, r7
 800ed44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	20005b9c 	.word	0x20005b9c

0800ed50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b085      	sub	sp, #20
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	60fb      	str	r3, [r7, #12]
 800ed5e:	e01f      	b.n	800eda0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ed60:	4a41      	ldr	r2, [pc, #260]	@ (800ee68 <inc_lock+0x118>)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	4413      	add	r3, r2
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	429a      	cmp	r2, r3
 800ed70:	d113      	bne.n	800ed9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ed72:	4a3d      	ldr	r2, [pc, #244]	@ (800ee68 <inc_lock+0x118>)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	011b      	lsls	r3, r3, #4
 800ed78:	4413      	add	r3, r2
 800ed7a:	3304      	adds	r3, #4
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d109      	bne.n	800ed9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ed86:	4a38      	ldr	r2, [pc, #224]	@ (800ee68 <inc_lock+0x118>)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	011b      	lsls	r3, r3, #4
 800ed8c:	4413      	add	r3, r2
 800ed8e:	3308      	adds	r3, #8
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d006      	beq.n	800eda8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	60fb      	str	r3, [r7, #12]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	2b01      	cmp	r3, #1
 800eda4:	d9dc      	bls.n	800ed60 <inc_lock+0x10>
 800eda6:	e000      	b.n	800edaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eda8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b02      	cmp	r3, #2
 800edae:	d132      	bne.n	800ee16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800edb0:	2300      	movs	r3, #0
 800edb2:	60fb      	str	r3, [r7, #12]
 800edb4:	e002      	b.n	800edbc <inc_lock+0x6c>
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	3301      	adds	r3, #1
 800edba:	60fb      	str	r3, [r7, #12]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d806      	bhi.n	800edd0 <inc_lock+0x80>
 800edc2:	4a29      	ldr	r2, [pc, #164]	@ (800ee68 <inc_lock+0x118>)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	011b      	lsls	r3, r3, #4
 800edc8:	4413      	add	r3, r2
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1f2      	bne.n	800edb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b02      	cmp	r3, #2
 800edd4:	d101      	bne.n	800edda <inc_lock+0x8a>
 800edd6:	2300      	movs	r3, #0
 800edd8:	e040      	b.n	800ee5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681a      	ldr	r2, [r3, #0]
 800edde:	4922      	ldr	r1, [pc, #136]	@ (800ee68 <inc_lock+0x118>)
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	011b      	lsls	r3, r3, #4
 800ede4:	440b      	add	r3, r1
 800ede6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	689a      	ldr	r2, [r3, #8]
 800edec:	491e      	ldr	r1, [pc, #120]	@ (800ee68 <inc_lock+0x118>)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	011b      	lsls	r3, r3, #4
 800edf2:	440b      	add	r3, r1
 800edf4:	3304      	adds	r3, #4
 800edf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	695a      	ldr	r2, [r3, #20]
 800edfc:	491a      	ldr	r1, [pc, #104]	@ (800ee68 <inc_lock+0x118>)
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	011b      	lsls	r3, r3, #4
 800ee02:	440b      	add	r3, r1
 800ee04:	3308      	adds	r3, #8
 800ee06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ee08:	4a17      	ldr	r2, [pc, #92]	@ (800ee68 <inc_lock+0x118>)
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	011b      	lsls	r3, r3, #4
 800ee0e:	4413      	add	r3, r2
 800ee10:	330c      	adds	r3, #12
 800ee12:	2200      	movs	r2, #0
 800ee14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d009      	beq.n	800ee30 <inc_lock+0xe0>
 800ee1c:	4a12      	ldr	r2, [pc, #72]	@ (800ee68 <inc_lock+0x118>)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	011b      	lsls	r3, r3, #4
 800ee22:	4413      	add	r3, r2
 800ee24:	330c      	adds	r3, #12
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <inc_lock+0xe0>
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e015      	b.n	800ee5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d108      	bne.n	800ee48 <inc_lock+0xf8>
 800ee36:	4a0c      	ldr	r2, [pc, #48]	@ (800ee68 <inc_lock+0x118>)
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	011b      	lsls	r3, r3, #4
 800ee3c:	4413      	add	r3, r2
 800ee3e:	330c      	adds	r3, #12
 800ee40:	881b      	ldrh	r3, [r3, #0]
 800ee42:	3301      	adds	r3, #1
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	e001      	b.n	800ee4c <inc_lock+0xfc>
 800ee48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ee4c:	4906      	ldr	r1, [pc, #24]	@ (800ee68 <inc_lock+0x118>)
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	011b      	lsls	r3, r3, #4
 800ee52:	440b      	add	r3, r1
 800ee54:	330c      	adds	r3, #12
 800ee56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	3301      	adds	r3, #1
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3714      	adds	r7, #20
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr
 800ee68:	20005b9c 	.word	0x20005b9c

0800ee6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	607b      	str	r3, [r7, #4]
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d825      	bhi.n	800eecc <dec_lock+0x60>
		n = Files[i].ctr;
 800ee80:	4a17      	ldr	r2, [pc, #92]	@ (800eee0 <dec_lock+0x74>)
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	011b      	lsls	r3, r3, #4
 800ee86:	4413      	add	r3, r2
 800ee88:	330c      	adds	r3, #12
 800ee8a:	881b      	ldrh	r3, [r3, #0]
 800ee8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ee8e:	89fb      	ldrh	r3, [r7, #14]
 800ee90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee94:	d101      	bne.n	800ee9a <dec_lock+0x2e>
 800ee96:	2300      	movs	r3, #0
 800ee98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ee9a:	89fb      	ldrh	r3, [r7, #14]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <dec_lock+0x3a>
 800eea0:	89fb      	ldrh	r3, [r7, #14]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800eea6:	4a0e      	ldr	r2, [pc, #56]	@ (800eee0 <dec_lock+0x74>)
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	011b      	lsls	r3, r3, #4
 800eeac:	4413      	add	r3, r2
 800eeae:	330c      	adds	r3, #12
 800eeb0:	89fa      	ldrh	r2, [r7, #14]
 800eeb2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800eeb4:	89fb      	ldrh	r3, [r7, #14]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d105      	bne.n	800eec6 <dec_lock+0x5a>
 800eeba:	4a09      	ldr	r2, [pc, #36]	@ (800eee0 <dec_lock+0x74>)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	4413      	add	r3, r2
 800eec2:	2200      	movs	r2, #0
 800eec4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800eec6:	2300      	movs	r3, #0
 800eec8:	737b      	strb	r3, [r7, #13]
 800eeca:	e001      	b.n	800eed0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800eecc:	2302      	movs	r3, #2
 800eece:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800eed0:	7b7b      	ldrb	r3, [r7, #13]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3714      	adds	r7, #20
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	20005b9c 	.word	0x20005b9c

0800eee4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800eeec:	2300      	movs	r3, #0
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e010      	b.n	800ef14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800eef2:	4a0d      	ldr	r2, [pc, #52]	@ (800ef28 <clear_lock+0x44>)
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	4413      	add	r3, r2
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	687a      	ldr	r2, [r7, #4]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d105      	bne.n	800ef0e <clear_lock+0x2a>
 800ef02:	4a09      	ldr	r2, [pc, #36]	@ (800ef28 <clear_lock+0x44>)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	4413      	add	r3, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3301      	adds	r3, #1
 800ef12:	60fb      	str	r3, [r7, #12]
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d9eb      	bls.n	800eef2 <clear_lock+0xe>
	}
}
 800ef1a:	bf00      	nop
 800ef1c:	bf00      	nop
 800ef1e:	3714      	adds	r7, #20
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	20005b9c 	.word	0x20005b9c

0800ef2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b086      	sub	sp, #24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ef34:	2300      	movs	r3, #0
 800ef36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	78db      	ldrb	r3, [r3, #3]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d034      	beq.n	800efaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	7858      	ldrb	r0, [r3, #1]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ef50:	2301      	movs	r3, #1
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	f7ff fd0e 	bl	800e974 <disk_write>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d002      	beq.n	800ef64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	73fb      	strb	r3, [r7, #15]
 800ef62:	e022      	b.n	800efaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6e:	697a      	ldr	r2, [r7, #20]
 800ef70:	1ad2      	subs	r2, r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d217      	bcs.n	800efaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	789b      	ldrb	r3, [r3, #2]
 800ef7e:	613b      	str	r3, [r7, #16]
 800ef80:	e010      	b.n	800efa4 <sync_window+0x78>
					wsect += fs->fsize;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6a1b      	ldr	r3, [r3, #32]
 800ef86:	697a      	ldr	r2, [r7, #20]
 800ef88:	4413      	add	r3, r2
 800ef8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	7858      	ldrb	r0, [r3, #1]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ef96:	2301      	movs	r3, #1
 800ef98:	697a      	ldr	r2, [r7, #20]
 800ef9a:	f7ff fceb 	bl	800e974 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ef9e:	693b      	ldr	r3, [r7, #16]
 800efa0:	3b01      	subs	r3, #1
 800efa2:	613b      	str	r3, [r7, #16]
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d8eb      	bhi.n	800ef82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800efaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800efbe:	2300      	movs	r3, #0
 800efc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc6:	683a      	ldr	r2, [r7, #0]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d01b      	beq.n	800f004 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7ff ffad 	bl	800ef2c <sync_window>
 800efd2:	4603      	mov	r3, r0
 800efd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d113      	bne.n	800f004 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	7858      	ldrb	r0, [r3, #1]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800efe6:	2301      	movs	r3, #1
 800efe8:	683a      	ldr	r2, [r7, #0]
 800efea:	f7ff fca3 	bl	800e934 <disk_read>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eff4:	f04f 33ff 	mov.w	r3, #4294967295
 800eff8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800effa:	2301      	movs	r3, #1
 800effc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	683a      	ldr	r2, [r7, #0]
 800f002:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800f004:	7bfb      	ldrb	r3, [r7, #15]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3710      	adds	r7, #16
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}
	...

0800f010 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f7ff ff87 	bl	800ef2c <sync_window>
 800f01e:	4603      	mov	r3, r0
 800f020:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f022:	7bfb      	ldrb	r3, [r7, #15]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d158      	bne.n	800f0da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b03      	cmp	r3, #3
 800f02e:	d148      	bne.n	800f0c2 <sync_fs+0xb2>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	791b      	ldrb	r3, [r3, #4]
 800f034:	2b01      	cmp	r3, #1
 800f036:	d144      	bne.n	800f0c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3338      	adds	r3, #56	@ 0x38
 800f03c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f040:	2100      	movs	r1, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f7ff fd77 	bl	800eb36 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	3338      	adds	r3, #56	@ 0x38
 800f04c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f050:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fd06 	bl	800ea66 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	3338      	adds	r3, #56	@ 0x38
 800f05e:	4921      	ldr	r1, [pc, #132]	@ (800f0e4 <sync_fs+0xd4>)
 800f060:	4618      	mov	r0, r3
 800f062:	f7ff fd1b 	bl	800ea9c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	3338      	adds	r3, #56	@ 0x38
 800f06a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f06e:	491e      	ldr	r1, [pc, #120]	@ (800f0e8 <sync_fs+0xd8>)
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd13 	bl	800ea9c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	3338      	adds	r3, #56	@ 0x38
 800f07a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	699b      	ldr	r3, [r3, #24]
 800f082:	4619      	mov	r1, r3
 800f084:	4610      	mov	r0, r2
 800f086:	f7ff fd09 	bl	800ea9c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3338      	adds	r3, #56	@ 0x38
 800f08e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	695b      	ldr	r3, [r3, #20]
 800f096:	4619      	mov	r1, r3
 800f098:	4610      	mov	r0, r2
 800f09a:	f7ff fcff 	bl	800ea9c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a2:	1c5a      	adds	r2, r3, #1
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	7858      	ldrb	r0, [r3, #1]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	f7ff fc5c 	bl	800e974 <disk_write>
			fs->fsi_flag = 0;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	785b      	ldrb	r3, [r3, #1]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	2100      	movs	r1, #0
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f7ff fc72 	bl	800e9b4 <disk_ioctl>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d001      	beq.n	800f0da <sync_fs+0xca>
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3710      	adds	r7, #16
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}
 800f0e4:	41615252 	.word	0x41615252
 800f0e8:	61417272 	.word	0x61417272

0800f0ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b083      	sub	sp, #12
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	3b02      	subs	r3, #2
 800f0fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	3b02      	subs	r3, #2
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	429a      	cmp	r2, r3
 800f106:	d301      	bcc.n	800f10c <clust2sect+0x20>
 800f108:	2300      	movs	r3, #0
 800f10a:	e008      	b.n	800f11e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	895b      	ldrh	r3, [r3, #10]
 800f110:	461a      	mov	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	fb03 f202 	mul.w	r2, r3, r2
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f11c:	4413      	add	r3, r2
}
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f12a:	b580      	push	{r7, lr}
 800f12c:	b086      	sub	sp, #24
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
 800f132:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d904      	bls.n	800f14a <get_fat+0x20>
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	69db      	ldr	r3, [r3, #28]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d302      	bcc.n	800f150 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f14a:	2301      	movs	r3, #1
 800f14c:	617b      	str	r3, [r7, #20]
 800f14e:	e08e      	b.n	800f26e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f150:	f04f 33ff 	mov.w	r3, #4294967295
 800f154:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d061      	beq.n	800f222 <get_fat+0xf8>
 800f15e:	2b03      	cmp	r3, #3
 800f160:	dc7b      	bgt.n	800f25a <get_fat+0x130>
 800f162:	2b01      	cmp	r3, #1
 800f164:	d002      	beq.n	800f16c <get_fat+0x42>
 800f166:	2b02      	cmp	r3, #2
 800f168:	d041      	beq.n	800f1ee <get_fat+0xc4>
 800f16a:	e076      	b.n	800f25a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	60fb      	str	r3, [r7, #12]
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	085b      	lsrs	r3, r3, #1
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	4413      	add	r3, r2
 800f178:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	0a5b      	lsrs	r3, r3, #9
 800f182:	4413      	add	r3, r2
 800f184:	4619      	mov	r1, r3
 800f186:	6938      	ldr	r0, [r7, #16]
 800f188:	f7ff ff14 	bl	800efb4 <move_window>
 800f18c:	4603      	mov	r3, r0
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d166      	bne.n	800f260 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	1c5a      	adds	r2, r3, #1
 800f196:	60fa      	str	r2, [r7, #12]
 800f198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f19c:	693a      	ldr	r2, [r7, #16]
 800f19e:	4413      	add	r3, r2
 800f1a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	0a5b      	lsrs	r3, r3, #9
 800f1ae:	4413      	add	r3, r2
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6938      	ldr	r0, [r7, #16]
 800f1b4:	f7ff fefe 	bl	800efb4 <move_window>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d152      	bne.n	800f264 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	4413      	add	r3, r2
 800f1c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f1cc:	021b      	lsls	r3, r3, #8
 800f1ce:	68ba      	ldr	r2, [r7, #8]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	f003 0301 	and.w	r3, r3, #1
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <get_fat+0xba>
 800f1de:	68bb      	ldr	r3, [r7, #8]
 800f1e0:	091b      	lsrs	r3, r3, #4
 800f1e2:	e002      	b.n	800f1ea <get_fat+0xc0>
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f1ea:	617b      	str	r3, [r7, #20]
			break;
 800f1ec:	e03f      	b.n	800f26e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	0a1b      	lsrs	r3, r3, #8
 800f1f6:	4413      	add	r3, r2
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	6938      	ldr	r0, [r7, #16]
 800f1fc:	f7ff feda 	bl	800efb4 <move_window>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d130      	bne.n	800f268 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f206:	693b      	ldr	r3, [r7, #16]
 800f208:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	005b      	lsls	r3, r3, #1
 800f210:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f214:	4413      	add	r3, r2
 800f216:	4618      	mov	r0, r3
 800f218:	f7ff fbea 	bl	800e9f0 <ld_word>
 800f21c:	4603      	mov	r3, r0
 800f21e:	617b      	str	r3, [r7, #20]
			break;
 800f220:	e025      	b.n	800f26e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	09db      	lsrs	r3, r3, #7
 800f22a:	4413      	add	r3, r2
 800f22c:	4619      	mov	r1, r3
 800f22e:	6938      	ldr	r0, [r7, #16]
 800f230:	f7ff fec0 	bl	800efb4 <move_window>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d118      	bne.n	800f26c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f248:	4413      	add	r3, r2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff fbe8 	bl	800ea20 <ld_dword>
 800f250:	4603      	mov	r3, r0
 800f252:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800f256:	617b      	str	r3, [r7, #20]
			break;
 800f258:	e009      	b.n	800f26e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f25a:	2301      	movs	r3, #1
 800f25c:	617b      	str	r3, [r7, #20]
 800f25e:	e006      	b.n	800f26e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f260:	bf00      	nop
 800f262:	e004      	b.n	800f26e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f264:	bf00      	nop
 800f266:	e002      	b.n	800f26e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f268:	bf00      	nop
 800f26a:	e000      	b.n	800f26e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f26c:	bf00      	nop
		}
	}

	return val;
 800f26e:	697b      	ldr	r3, [r7, #20]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f278:	b590      	push	{r4, r7, lr}
 800f27a:	b089      	sub	sp, #36	@ 0x24
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	60f8      	str	r0, [r7, #12]
 800f280:	60b9      	str	r1, [r7, #8]
 800f282:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f284:	2302      	movs	r3, #2
 800f286:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	2b01      	cmp	r3, #1
 800f28c:	f240 80d9 	bls.w	800f442 <put_fat+0x1ca>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	69db      	ldr	r3, [r3, #28]
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	429a      	cmp	r2, r3
 800f298:	f080 80d3 	bcs.w	800f442 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	2b03      	cmp	r3, #3
 800f2a2:	f000 8096 	beq.w	800f3d2 <put_fat+0x15a>
 800f2a6:	2b03      	cmp	r3, #3
 800f2a8:	f300 80cb 	bgt.w	800f442 <put_fat+0x1ca>
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d002      	beq.n	800f2b6 <put_fat+0x3e>
 800f2b0:	2b02      	cmp	r3, #2
 800f2b2:	d06e      	beq.n	800f392 <put_fat+0x11a>
 800f2b4:	e0c5      	b.n	800f442 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	61bb      	str	r3, [r7, #24]
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	085b      	lsrs	r3, r3, #1
 800f2be:	69ba      	ldr	r2, [r7, #24]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f2c8:	69bb      	ldr	r3, [r7, #24]
 800f2ca:	0a5b      	lsrs	r3, r3, #9
 800f2cc:	4413      	add	r3, r2
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f7ff fe6f 	bl	800efb4 <move_window>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f2da:	7ffb      	ldrb	r3, [r7, #31]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f040 80a9 	bne.w	800f434 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f2e8:	69bb      	ldr	r3, [r7, #24]
 800f2ea:	1c59      	adds	r1, r3, #1
 800f2ec:	61b9      	str	r1, [r7, #24]
 800f2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2f2:	4413      	add	r3, r2
 800f2f4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	f003 0301 	and.w	r3, r3, #1
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00d      	beq.n	800f31c <put_fat+0xa4>
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	b25b      	sxtb	r3, r3
 800f306:	f003 030f 	and.w	r3, r3, #15
 800f30a:	b25a      	sxtb	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	011b      	lsls	r3, r3, #4
 800f312:	b25b      	sxtb	r3, r3
 800f314:	4313      	orrs	r3, r2
 800f316:	b25b      	sxtb	r3, r3
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	e001      	b.n	800f320 <put_fat+0xa8>
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	2201      	movs	r2, #1
 800f328:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	0a5b      	lsrs	r3, r3, #9
 800f332:	4413      	add	r3, r2
 800f334:	4619      	mov	r1, r3
 800f336:	68f8      	ldr	r0, [r7, #12]
 800f338:	f7ff fe3c 	bl	800efb4 <move_window>
 800f33c:	4603      	mov	r3, r0
 800f33e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f340:	7ffb      	ldrb	r3, [r7, #31]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d178      	bne.n	800f438 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f352:	4413      	add	r3, r2
 800f354:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	f003 0301 	and.w	r3, r3, #1
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <put_fat+0xf0>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	091b      	lsrs	r3, r3, #4
 800f364:	b2db      	uxtb	r3, r3
 800f366:	e00e      	b.n	800f386 <put_fat+0x10e>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	b25b      	sxtb	r3, r3
 800f36e:	f023 030f 	bic.w	r3, r3, #15
 800f372:	b25a      	sxtb	r2, r3
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	0a1b      	lsrs	r3, r3, #8
 800f378:	b25b      	sxtb	r3, r3
 800f37a:	f003 030f 	and.w	r3, r3, #15
 800f37e:	b25b      	sxtb	r3, r3
 800f380:	4313      	orrs	r3, r2
 800f382:	b25b      	sxtb	r3, r3
 800f384:	b2db      	uxtb	r3, r3
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	2201      	movs	r2, #1
 800f38e:	70da      	strb	r2, [r3, #3]
			break;
 800f390:	e057      	b.n	800f442 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	0a1b      	lsrs	r3, r3, #8
 800f39a:	4413      	add	r3, r2
 800f39c:	4619      	mov	r1, r3
 800f39e:	68f8      	ldr	r0, [r7, #12]
 800f3a0:	f7ff fe08 	bl	800efb4 <move_window>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3a8:	7ffb      	ldrb	r3, [r7, #31]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d146      	bne.n	800f43c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	005b      	lsls	r3, r3, #1
 800f3b8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800f3bc:	4413      	add	r3, r2
 800f3be:	687a      	ldr	r2, [r7, #4]
 800f3c0:	b292      	uxth	r2, r2
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fb4e 	bl	800ea66 <st_word>
			fs->wflag = 1;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	70da      	strb	r2, [r3, #3]
			break;
 800f3d0:	e037      	b.n	800f442 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	09db      	lsrs	r3, r3, #7
 800f3da:	4413      	add	r3, r2
 800f3dc:	4619      	mov	r1, r3
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f7ff fde8 	bl	800efb4 <move_window>
 800f3e4:	4603      	mov	r3, r0
 800f3e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3e8:	7ffb      	ldrb	r3, [r7, #31]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d128      	bne.n	800f440 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	009b      	lsls	r3, r3, #2
 800f3fe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f402:	4413      	add	r3, r2
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff fb0b 	bl	800ea20 <ld_dword>
 800f40a:	4603      	mov	r3, r0
 800f40c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800f410:	4323      	orrs	r3, r4
 800f412:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800f422:	4413      	add	r3, r2
 800f424:	6879      	ldr	r1, [r7, #4]
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fb38 	bl	800ea9c <st_dword>
			fs->wflag = 1;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2201      	movs	r2, #1
 800f430:	70da      	strb	r2, [r3, #3]
			break;
 800f432:	e006      	b.n	800f442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f434:	bf00      	nop
 800f436:	e004      	b.n	800f442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f438:	bf00      	nop
 800f43a:	e002      	b.n	800f442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f43c:	bf00      	nop
 800f43e:	e000      	b.n	800f442 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800f440:	bf00      	nop
		}
	}
	return res;
 800f442:	7ffb      	ldrb	r3, [r7, #31]
}
 800f444:	4618      	mov	r0, r3
 800f446:	3724      	adds	r7, #36	@ 0x24
 800f448:	46bd      	mov	sp, r7
 800f44a:	bd90      	pop	{r4, r7, pc}

0800f44c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b088      	sub	sp, #32
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f458:	2300      	movs	r3, #0
 800f45a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	2b01      	cmp	r3, #1
 800f466:	d904      	bls.n	800f472 <remove_chain+0x26>
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	429a      	cmp	r2, r3
 800f470:	d301      	bcc.n	800f476 <remove_chain+0x2a>
 800f472:	2302      	movs	r3, #2
 800f474:	e04b      	b.n	800f50e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d00c      	beq.n	800f496 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f47c:	f04f 32ff 	mov.w	r2, #4294967295
 800f480:	6879      	ldr	r1, [r7, #4]
 800f482:	69b8      	ldr	r0, [r7, #24]
 800f484:	f7ff fef8 	bl	800f278 <put_fat>
 800f488:	4603      	mov	r3, r0
 800f48a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f48c:	7ffb      	ldrb	r3, [r7, #31]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d001      	beq.n	800f496 <remove_chain+0x4a>
 800f492:	7ffb      	ldrb	r3, [r7, #31]
 800f494:	e03b      	b.n	800f50e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f496:	68b9      	ldr	r1, [r7, #8]
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f7ff fe46 	bl	800f12a <get_fat>
 800f49e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d031      	beq.n	800f50a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	d101      	bne.n	800f4b0 <remove_chain+0x64>
 800f4ac:	2302      	movs	r3, #2
 800f4ae:	e02e      	b.n	800f50e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4b6:	d101      	bne.n	800f4bc <remove_chain+0x70>
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	e028      	b.n	800f50e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f4bc:	2200      	movs	r2, #0
 800f4be:	68b9      	ldr	r1, [r7, #8]
 800f4c0:	69b8      	ldr	r0, [r7, #24]
 800f4c2:	f7ff fed9 	bl	800f278 <put_fat>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f4ca:	7ffb      	ldrb	r3, [r7, #31]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d001      	beq.n	800f4d4 <remove_chain+0x88>
 800f4d0:	7ffb      	ldrb	r3, [r7, #31]
 800f4d2:	e01c      	b.n	800f50e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f4d4:	69bb      	ldr	r3, [r7, #24]
 800f4d6:	699a      	ldr	r2, [r3, #24]
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	3b02      	subs	r3, #2
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d20b      	bcs.n	800f4fa <remove_chain+0xae>
			fs->free_clst++;
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	699b      	ldr	r3, [r3, #24]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	69bb      	ldr	r3, [r7, #24]
 800f4ea:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800f4ec:	69bb      	ldr	r3, [r7, #24]
 800f4ee:	791b      	ldrb	r3, [r3, #4]
 800f4f0:	f043 0301 	orr.w	r3, r3, #1
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	69bb      	ldr	r3, [r7, #24]
 800f4f8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4fa:	697b      	ldr	r3, [r7, #20]
 800f4fc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4fe:	69bb      	ldr	r3, [r7, #24]
 800f500:	69db      	ldr	r3, [r3, #28]
 800f502:	68ba      	ldr	r2, [r7, #8]
 800f504:	429a      	cmp	r2, r3
 800f506:	d3c6      	bcc.n	800f496 <remove_chain+0x4a>
 800f508:	e000      	b.n	800f50c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f50a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f50c:	2300      	movs	r3, #0
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b088      	sub	sp, #32
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d10d      	bne.n	800f548 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	695b      	ldr	r3, [r3, #20]
 800f530:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f532:	69bb      	ldr	r3, [r7, #24]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d004      	beq.n	800f542 <create_chain+0x2c>
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d31b      	bcc.n	800f57a <create_chain+0x64>
 800f542:	2301      	movs	r3, #1
 800f544:	61bb      	str	r3, [r7, #24]
 800f546:	e018      	b.n	800f57a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f548:	6839      	ldr	r1, [r7, #0]
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff fded 	bl	800f12a <get_fat>
 800f550:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d801      	bhi.n	800f55c <create_chain+0x46>
 800f558:	2301      	movs	r3, #1
 800f55a:	e070      	b.n	800f63e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d101      	bne.n	800f568 <create_chain+0x52>
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	e06a      	b.n	800f63e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	68fa      	ldr	r2, [r7, #12]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d201      	bcs.n	800f576 <create_chain+0x60>
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	e063      	b.n	800f63e <create_chain+0x128>
		scl = clst;
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	3301      	adds	r3, #1
 800f582:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	69db      	ldr	r3, [r3, #28]
 800f588:	69fa      	ldr	r2, [r7, #28]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d307      	bcc.n	800f59e <create_chain+0x88>
				ncl = 2;
 800f58e:	2302      	movs	r3, #2
 800f590:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f592:	69fa      	ldr	r2, [r7, #28]
 800f594:	69bb      	ldr	r3, [r7, #24]
 800f596:	429a      	cmp	r2, r3
 800f598:	d901      	bls.n	800f59e <create_chain+0x88>
 800f59a:	2300      	movs	r3, #0
 800f59c:	e04f      	b.n	800f63e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f59e:	69f9      	ldr	r1, [r7, #28]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff fdc2 	bl	800f12a <get_fat>
 800f5a6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00e      	beq.n	800f5cc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d003      	beq.n	800f5bc <create_chain+0xa6>
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ba:	d101      	bne.n	800f5c0 <create_chain+0xaa>
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	e03e      	b.n	800f63e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f5c0:	69fa      	ldr	r2, [r7, #28]
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d1da      	bne.n	800f57e <create_chain+0x68>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	e038      	b.n	800f63e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f5cc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f5d2:	69f9      	ldr	r1, [r7, #28]
 800f5d4:	6938      	ldr	r0, [r7, #16]
 800f5d6:	f7ff fe4f 	bl	800f278 <put_fat>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f5de:	7dfb      	ldrb	r3, [r7, #23]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d109      	bne.n	800f5f8 <create_chain+0xe2>
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d006      	beq.n	800f5f8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f5ea:	69fa      	ldr	r2, [r7, #28]
 800f5ec:	6839      	ldr	r1, [r7, #0]
 800f5ee:	6938      	ldr	r0, [r7, #16]
 800f5f0:	f7ff fe42 	bl	800f278 <put_fat>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f5f8:	7dfb      	ldrb	r3, [r7, #23]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d116      	bne.n	800f62c <create_chain+0x116>
		fs->last_clst = ncl;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	69fa      	ldr	r2, [r7, #28]
 800f602:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f604:	693b      	ldr	r3, [r7, #16]
 800f606:	699a      	ldr	r2, [r3, #24]
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	69db      	ldr	r3, [r3, #28]
 800f60c:	3b02      	subs	r3, #2
 800f60e:	429a      	cmp	r2, r3
 800f610:	d804      	bhi.n	800f61c <create_chain+0x106>
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	699b      	ldr	r3, [r3, #24]
 800f616:	1e5a      	subs	r2, r3, #1
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	791b      	ldrb	r3, [r3, #4]
 800f620:	f043 0301 	orr.w	r3, r3, #1
 800f624:	b2da      	uxtb	r2, r3
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	711a      	strb	r2, [r3, #4]
 800f62a:	e007      	b.n	800f63c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f62c:	7dfb      	ldrb	r3, [r7, #23]
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d102      	bne.n	800f638 <create_chain+0x122>
 800f632:	f04f 33ff 	mov.w	r3, #4294967295
 800f636:	e000      	b.n	800f63a <create_chain+0x124>
 800f638:	2301      	movs	r3, #1
 800f63a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f63c:	69fb      	ldr	r3, [r7, #28]
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3720      	adds	r7, #32
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f646:	b480      	push	{r7}
 800f648:	b087      	sub	sp, #28
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f65a:	3304      	adds	r3, #4
 800f65c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	0a5b      	lsrs	r3, r3, #9
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	8952      	ldrh	r2, [r2, #10]
 800f666:	fbb3 f3f2 	udiv	r3, r3, r2
 800f66a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	1d1a      	adds	r2, r3, #4
 800f670:	613a      	str	r2, [r7, #16]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f676:	68bb      	ldr	r3, [r7, #8]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d101      	bne.n	800f680 <clmt_clust+0x3a>
 800f67c:	2300      	movs	r3, #0
 800f67e:	e010      	b.n	800f6a2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f680:	697a      	ldr	r2, [r7, #20]
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	429a      	cmp	r2, r3
 800f686:	d307      	bcc.n	800f698 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f688:	697a      	ldr	r2, [r7, #20]
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	617b      	str	r3, [r7, #20]
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	3304      	adds	r3, #4
 800f694:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f696:	e7e9      	b.n	800f66c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f698:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	4413      	add	r3, r2
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	371c      	adds	r7, #28
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr

0800f6ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b086      	sub	sp, #24
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f6c4:	d204      	bcs.n	800f6d0 <dir_sdi+0x22>
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	f003 031f 	and.w	r3, r3, #31
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d001      	beq.n	800f6d4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e063      	b.n	800f79c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	683a      	ldr	r2, [r7, #0]
 800f6d8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f6e0:	697b      	ldr	r3, [r7, #20]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d106      	bne.n	800f6f4 <dir_sdi+0x46>
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	d902      	bls.n	800f6f4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6f2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d10c      	bne.n	800f714 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	095b      	lsrs	r3, r3, #5
 800f6fe:	693a      	ldr	r2, [r7, #16]
 800f700:	8912      	ldrh	r2, [r2, #8]
 800f702:	4293      	cmp	r3, r2
 800f704:	d301      	bcc.n	800f70a <dir_sdi+0x5c>
 800f706:	2302      	movs	r3, #2
 800f708:	e048      	b.n	800f79c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	61da      	str	r2, [r3, #28]
 800f712:	e029      	b.n	800f768 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	895b      	ldrh	r3, [r3, #10]
 800f718:	025b      	lsls	r3, r3, #9
 800f71a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f71c:	e019      	b.n	800f752 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6979      	ldr	r1, [r7, #20]
 800f722:	4618      	mov	r0, r3
 800f724:	f7ff fd01 	bl	800f12a <get_fat>
 800f728:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f72a:	697b      	ldr	r3, [r7, #20]
 800f72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f730:	d101      	bne.n	800f736 <dir_sdi+0x88>
 800f732:	2301      	movs	r3, #1
 800f734:	e032      	b.n	800f79c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2b01      	cmp	r3, #1
 800f73a:	d904      	bls.n	800f746 <dir_sdi+0x98>
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	69db      	ldr	r3, [r3, #28]
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	429a      	cmp	r2, r3
 800f744:	d301      	bcc.n	800f74a <dir_sdi+0x9c>
 800f746:	2302      	movs	r3, #2
 800f748:	e028      	b.n	800f79c <dir_sdi+0xee>
			ofs -= csz;
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	1ad3      	subs	r3, r2, r3
 800f750:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	429a      	cmp	r2, r3
 800f758:	d2e1      	bcs.n	800f71e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f75a:	6979      	ldr	r1, [r7, #20]
 800f75c:	6938      	ldr	r0, [r7, #16]
 800f75e:	f7ff fcc5 	bl	800f0ec <clust2sect>
 800f762:	4602      	mov	r2, r0
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	697a      	ldr	r2, [r7, #20]
 800f76c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d101      	bne.n	800f77a <dir_sdi+0xcc>
 800f776:	2302      	movs	r3, #2
 800f778:	e010      	b.n	800f79c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	69da      	ldr	r2, [r3, #28]
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	0a5b      	lsrs	r3, r3, #9
 800f782:	441a      	add	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f794:	441a      	add	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f79a:	2300      	movs	r3, #0
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b086      	sub	sp, #24
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	3320      	adds	r3, #32
 800f7ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	69db      	ldr	r3, [r3, #28]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d003      	beq.n	800f7cc <dir_next+0x28>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800f7ca:	d301      	bcc.n	800f7d0 <dir_next+0x2c>
 800f7cc:	2304      	movs	r3, #4
 800f7ce:	e0aa      	b.n	800f926 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f040 8098 	bne.w	800f90c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	69db      	ldr	r3, [r3, #28]
 800f7e0:	1c5a      	adds	r2, r3, #1
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	699b      	ldr	r3, [r3, #24]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d10b      	bne.n	800f806 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	095b      	lsrs	r3, r3, #5
 800f7f2:	68fa      	ldr	r2, [r7, #12]
 800f7f4:	8912      	ldrh	r2, [r2, #8]
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	f0c0 8088 	bcc.w	800f90c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	61da      	str	r2, [r3, #28]
 800f802:	2304      	movs	r3, #4
 800f804:	e08f      	b.n	800f926 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	0a5b      	lsrs	r3, r3, #9
 800f80a:	68fa      	ldr	r2, [r7, #12]
 800f80c:	8952      	ldrh	r2, [r2, #10]
 800f80e:	3a01      	subs	r2, #1
 800f810:	4013      	ands	r3, r2
 800f812:	2b00      	cmp	r3, #0
 800f814:	d17a      	bne.n	800f90c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	699b      	ldr	r3, [r3, #24]
 800f81c:	4619      	mov	r1, r3
 800f81e:	4610      	mov	r0, r2
 800f820:	f7ff fc83 	bl	800f12a <get_fat>
 800f824:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b01      	cmp	r3, #1
 800f82a:	d801      	bhi.n	800f830 <dir_next+0x8c>
 800f82c:	2302      	movs	r3, #2
 800f82e:	e07a      	b.n	800f926 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f836:	d101      	bne.n	800f83c <dir_next+0x98>
 800f838:	2301      	movs	r3, #1
 800f83a:	e074      	b.n	800f926 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	69db      	ldr	r3, [r3, #28]
 800f840:	697a      	ldr	r2, [r7, #20]
 800f842:	429a      	cmp	r2, r3
 800f844:	d358      	bcc.n	800f8f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d104      	bne.n	800f856 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2200      	movs	r2, #0
 800f850:	61da      	str	r2, [r3, #28]
 800f852:	2304      	movs	r3, #4
 800f854:	e067      	b.n	800f926 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	699b      	ldr	r3, [r3, #24]
 800f85c:	4619      	mov	r1, r3
 800f85e:	4610      	mov	r0, r2
 800f860:	f7ff fe59 	bl	800f516 <create_chain>
 800f864:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <dir_next+0xcc>
 800f86c:	2307      	movs	r3, #7
 800f86e:	e05a      	b.n	800f926 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d101      	bne.n	800f87a <dir_next+0xd6>
 800f876:	2302      	movs	r3, #2
 800f878:	e055      	b.n	800f926 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f880:	d101      	bne.n	800f886 <dir_next+0xe2>
 800f882:	2301      	movs	r3, #1
 800f884:	e04f      	b.n	800f926 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f886:	68f8      	ldr	r0, [r7, #12]
 800f888:	f7ff fb50 	bl	800ef2c <sync_window>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <dir_next+0xf2>
 800f892:	2301      	movs	r3, #1
 800f894:	e047      	b.n	800f926 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3338      	adds	r3, #56	@ 0x38
 800f89a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7ff f948 	bl	800eb36 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	613b      	str	r3, [r7, #16]
 800f8aa:	6979      	ldr	r1, [r7, #20]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff fc1d 	bl	800f0ec <clust2sect>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	635a      	str	r2, [r3, #52]	@ 0x34
 800f8b8:	e012      	b.n	800f8e0 <dir_next+0x13c>
						fs->wflag = 1;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f8c0:	68f8      	ldr	r0, [r7, #12]
 800f8c2:	f7ff fb33 	bl	800ef2c <sync_window>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d001      	beq.n	800f8d0 <dir_next+0x12c>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e02a      	b.n	800f926 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	613b      	str	r3, [r7, #16]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f8da:	1c5a      	adds	r2, r3, #1
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	635a      	str	r2, [r3, #52]	@ 0x34
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	895b      	ldrh	r3, [r3, #10]
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d3e6      	bcc.n	800f8ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f8f0:	693b      	ldr	r3, [r7, #16]
 800f8f2:	1ad2      	subs	r2, r2, r3
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	697a      	ldr	r2, [r7, #20]
 800f8fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f8fe:	6979      	ldr	r1, [r7, #20]
 800f900:	68f8      	ldr	r0, [r7, #12]
 800f902:	f7ff fbf3 	bl	800f0ec <clust2sect>
 800f906:	4602      	mov	r2, r0
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f91e:	441a      	add	r2, r3
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b086      	sub	sp, #24
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
 800f936:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f93e:	2100      	movs	r1, #0
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f7ff feb4 	bl	800f6ae <dir_sdi>
 800f946:	4603      	mov	r3, r0
 800f948:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f94a:	7dfb      	ldrb	r3, [r7, #23]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d12b      	bne.n	800f9a8 <dir_alloc+0x7a>
		n = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	69db      	ldr	r3, [r3, #28]
 800f958:	4619      	mov	r1, r3
 800f95a:	68f8      	ldr	r0, [r7, #12]
 800f95c:	f7ff fb2a 	bl	800efb4 <move_window>
 800f960:	4603      	mov	r3, r0
 800f962:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d11d      	bne.n	800f9a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	6a1b      	ldr	r3, [r3, #32]
 800f96e:	781b      	ldrb	r3, [r3, #0]
 800f970:	2be5      	cmp	r3, #229	@ 0xe5
 800f972:	d004      	beq.n	800f97e <dir_alloc+0x50>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	6a1b      	ldr	r3, [r3, #32]
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d107      	bne.n	800f98e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	3301      	adds	r3, #1
 800f982:	613b      	str	r3, [r7, #16]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d102      	bne.n	800f992 <dir_alloc+0x64>
 800f98c:	e00c      	b.n	800f9a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f98e:	2300      	movs	r3, #0
 800f990:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f992:	2101      	movs	r1, #1
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	f7ff ff05 	bl	800f7a4 <dir_next>
 800f99a:	4603      	mov	r3, r0
 800f99c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f99e:	7dfb      	ldrb	r3, [r7, #23]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0d7      	beq.n	800f954 <dir_alloc+0x26>
 800f9a4:	e000      	b.n	800f9a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f9a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f9a8:	7dfb      	ldrb	r3, [r7, #23]
 800f9aa:	2b04      	cmp	r3, #4
 800f9ac:	d101      	bne.n	800f9b2 <dir_alloc+0x84>
 800f9ae:	2307      	movs	r3, #7
 800f9b0:	75fb      	strb	r3, [r7, #23]
	return res;
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3718      	adds	r7, #24
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	331a      	adds	r3, #26
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7ff f810 	bl	800e9f0 <ld_word>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	2b03      	cmp	r3, #3
 800f9da:	d109      	bne.n	800f9f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	3314      	adds	r3, #20
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	f7ff f805 	bl	800e9f0 <ld_word>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	041b      	lsls	r3, r3, #16
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	331a      	adds	r3, #26
 800fa0a:	687a      	ldr	r2, [r7, #4]
 800fa0c:	b292      	uxth	r2, r2
 800fa0e:	4611      	mov	r1, r2
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7ff f828 	bl	800ea66 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	781b      	ldrb	r3, [r3, #0]
 800fa1a:	2b03      	cmp	r3, #3
 800fa1c:	d109      	bne.n	800fa32 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	f103 0214 	add.w	r2, r3, #20
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	0c1b      	lsrs	r3, r3, #16
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4610      	mov	r0, r2
 800fa2e:	f7ff f81a 	bl	800ea66 <st_word>
	}
}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}
	...

0800fa3c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800fa3c:	b590      	push	{r4, r7, lr}
 800fa3e:	b087      	sub	sp, #28
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	331a      	adds	r3, #26
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe ffd0 	bl	800e9f0 <ld_word>
 800fa50:	4603      	mov	r3, r0
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <cmp_lfn+0x1e>
 800fa56:	2300      	movs	r3, #0
 800fa58:	e059      	b.n	800fb0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	781b      	ldrb	r3, [r3, #0]
 800fa5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa62:	1e5a      	subs	r2, r3, #1
 800fa64:	4613      	mov	r3, r2
 800fa66:	005b      	lsls	r3, r3, #1
 800fa68:	4413      	add	r3, r2
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fa70:	2301      	movs	r3, #1
 800fa72:	81fb      	strh	r3, [r7, #14]
 800fa74:	2300      	movs	r3, #0
 800fa76:	613b      	str	r3, [r7, #16]
 800fa78:	e033      	b.n	800fae2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fa7a:	4a27      	ldr	r2, [pc, #156]	@ (800fb18 <cmp_lfn+0xdc>)
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	4413      	add	r3, r2
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	461a      	mov	r2, r3
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	4413      	add	r3, r2
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe ffb1 	bl	800e9f0 <ld_word>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fa92:	89fb      	ldrh	r3, [r7, #14]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d01a      	beq.n	800face <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	2bfe      	cmp	r3, #254	@ 0xfe
 800fa9c:	d812      	bhi.n	800fac4 <cmp_lfn+0x88>
 800fa9e:	89bb      	ldrh	r3, [r7, #12]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f002 fb7d 	bl	80121a0 <ff_wtoupper>
 800faa6:	4603      	mov	r3, r0
 800faa8:	461c      	mov	r4, r3
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	617a      	str	r2, [r7, #20]
 800fab0:	005b      	lsls	r3, r3, #1
 800fab2:	687a      	ldr	r2, [r7, #4]
 800fab4:	4413      	add	r3, r2
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	4618      	mov	r0, r3
 800faba:	f002 fb71 	bl	80121a0 <ff_wtoupper>
 800fabe:	4603      	mov	r3, r0
 800fac0:	429c      	cmp	r4, r3
 800fac2:	d001      	beq.n	800fac8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fac4:	2300      	movs	r3, #0
 800fac6:	e022      	b.n	800fb0e <cmp_lfn+0xd2>
			}
			wc = uc;
 800fac8:	89bb      	ldrh	r3, [r7, #12]
 800faca:	81fb      	strh	r3, [r7, #14]
 800facc:	e006      	b.n	800fadc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800face:	89bb      	ldrh	r3, [r7, #12]
 800fad0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d001      	beq.n	800fadc <cmp_lfn+0xa0>
 800fad8:	2300      	movs	r3, #0
 800fada:	e018      	b.n	800fb0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	3301      	adds	r3, #1
 800fae0:	613b      	str	r3, [r7, #16]
 800fae2:	693b      	ldr	r3, [r7, #16]
 800fae4:	2b0c      	cmp	r3, #12
 800fae6:	d9c8      	bls.n	800fa7a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	781b      	ldrb	r3, [r3, #0]
 800faec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00b      	beq.n	800fb0c <cmp_lfn+0xd0>
 800faf4:	89fb      	ldrh	r3, [r7, #14]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d008      	beq.n	800fb0c <cmp_lfn+0xd0>
 800fafa:	697b      	ldr	r3, [r7, #20]
 800fafc:	005b      	lsls	r3, r3, #1
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	4413      	add	r3, r2
 800fb02:	881b      	ldrh	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d001      	beq.n	800fb0c <cmp_lfn+0xd0>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	e000      	b.n	800fb0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fb0c:	2301      	movs	r3, #1
}
 800fb0e:	4618      	mov	r0, r3
 800fb10:	371c      	adds	r7, #28
 800fb12:	46bd      	mov	sp, r7
 800fb14:	bd90      	pop	{r4, r7, pc}
 800fb16:	bf00      	nop
 800fb18:	080189dc 	.word	0x080189dc

0800fb1c <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b086      	sub	sp, #24
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fb26:	683b      	ldr	r3, [r7, #0]
 800fb28:	331a      	adds	r3, #26
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	f7fe ff60 	bl	800e9f0 <ld_word>
 800fb30:	4603      	mov	r3, r0
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d001      	beq.n	800fb3a <pick_lfn+0x1e>
 800fb36:	2300      	movs	r3, #0
 800fb38:	e04d      	b.n	800fbd6 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb42:	1e5a      	subs	r2, r3, #1
 800fb44:	4613      	mov	r3, r2
 800fb46:	005b      	lsls	r3, r3, #1
 800fb48:	4413      	add	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	4413      	add	r3, r2
 800fb4e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fb50:	2301      	movs	r3, #1
 800fb52:	81fb      	strh	r3, [r7, #14]
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]
 800fb58:	e028      	b.n	800fbac <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fb5a:	4a21      	ldr	r2, [pc, #132]	@ (800fbe0 <pick_lfn+0xc4>)
 800fb5c:	693b      	ldr	r3, [r7, #16]
 800fb5e:	4413      	add	r3, r2
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	461a      	mov	r2, r3
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	4413      	add	r3, r2
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7fe ff41 	bl	800e9f0 <ld_word>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fb72:	89fb      	ldrh	r3, [r7, #14]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00f      	beq.n	800fb98 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fb78:	697b      	ldr	r3, [r7, #20]
 800fb7a:	2bfe      	cmp	r3, #254	@ 0xfe
 800fb7c:	d901      	bls.n	800fb82 <pick_lfn+0x66>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e029      	b.n	800fbd6 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fb82:	89bb      	ldrh	r3, [r7, #12]
 800fb84:	81fb      	strh	r3, [r7, #14]
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	1c5a      	adds	r2, r3, #1
 800fb8a:	617a      	str	r2, [r7, #20]
 800fb8c:	005b      	lsls	r3, r3, #1
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	4413      	add	r3, r2
 800fb92:	89fa      	ldrh	r2, [r7, #14]
 800fb94:	801a      	strh	r2, [r3, #0]
 800fb96:	e006      	b.n	800fba6 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fb98:	89bb      	ldrh	r3, [r7, #12]
 800fb9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d001      	beq.n	800fba6 <pick_lfn+0x8a>
 800fba2:	2300      	movs	r3, #0
 800fba4:	e017      	b.n	800fbd6 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	3301      	adds	r3, #1
 800fbaa:	613b      	str	r3, [r7, #16]
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	2b0c      	cmp	r3, #12
 800fbb0:	d9d3      	bls.n	800fb5a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d00a      	beq.n	800fbd4 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	2bfe      	cmp	r3, #254	@ 0xfe
 800fbc2:	d901      	bls.n	800fbc8 <pick_lfn+0xac>
 800fbc4:	2300      	movs	r3, #0
 800fbc6:	e006      	b.n	800fbd6 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	4413      	add	r3, r2
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fbd4:	2301      	movs	r3, #1
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3718      	adds	r7, #24
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	080189dc 	.word	0x080189dc

0800fbe4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b088      	sub	sp, #32
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	4611      	mov	r1, r2
 800fbf0:	461a      	mov	r2, r3
 800fbf2:	460b      	mov	r3, r1
 800fbf4:	71fb      	strb	r3, [r7, #7]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	330d      	adds	r3, #13
 800fbfe:	79ba      	ldrb	r2, [r7, #6]
 800fc00:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	330b      	adds	r3, #11
 800fc06:	220f      	movs	r2, #15
 800fc08:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	330c      	adds	r3, #12
 800fc0e:	2200      	movs	r2, #0
 800fc10:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	331a      	adds	r3, #26
 800fc16:	2100      	movs	r1, #0
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fe ff24 	bl	800ea66 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fc1e:	79fb      	ldrb	r3, [r7, #7]
 800fc20:	1e5a      	subs	r2, r3, #1
 800fc22:	4613      	mov	r3, r2
 800fc24:	005b      	lsls	r3, r3, #1
 800fc26:	4413      	add	r3, r2
 800fc28:	009b      	lsls	r3, r3, #2
 800fc2a:	4413      	add	r3, r2
 800fc2c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	82fb      	strh	r3, [r7, #22]
 800fc32:	2300      	movs	r3, #0
 800fc34:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fc36:	8afb      	ldrh	r3, [r7, #22]
 800fc38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc3c:	4293      	cmp	r3, r2
 800fc3e:	d007      	beq.n	800fc50 <put_lfn+0x6c>
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	1c5a      	adds	r2, r3, #1
 800fc44:	61fa      	str	r2, [r7, #28]
 800fc46:	005b      	lsls	r3, r3, #1
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	881b      	ldrh	r3, [r3, #0]
 800fc4e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fc50:	4a17      	ldr	r2, [pc, #92]	@ (800fcb0 <put_lfn+0xcc>)
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	4413      	add	r3, r2
 800fc56:	781b      	ldrb	r3, [r3, #0]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	68bb      	ldr	r3, [r7, #8]
 800fc5c:	4413      	add	r3, r2
 800fc5e:	8afa      	ldrh	r2, [r7, #22]
 800fc60:	4611      	mov	r1, r2
 800fc62:	4618      	mov	r0, r3
 800fc64:	f7fe feff 	bl	800ea66 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fc68:	8afb      	ldrh	r3, [r7, #22]
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d102      	bne.n	800fc74 <put_lfn+0x90>
 800fc6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fc72:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fc74:	69bb      	ldr	r3, [r7, #24]
 800fc76:	3301      	adds	r3, #1
 800fc78:	61bb      	str	r3, [r7, #24]
 800fc7a:	69bb      	ldr	r3, [r7, #24]
 800fc7c:	2b0c      	cmp	r3, #12
 800fc7e:	d9da      	bls.n	800fc36 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fc80:	8afb      	ldrh	r3, [r7, #22]
 800fc82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d006      	beq.n	800fc98 <put_lfn+0xb4>
 800fc8a:	69fb      	ldr	r3, [r7, #28]
 800fc8c:	005b      	lsls	r3, r3, #1
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	4413      	add	r3, r2
 800fc92:	881b      	ldrh	r3, [r3, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d103      	bne.n	800fca0 <put_lfn+0xbc>
 800fc98:	79fb      	ldrb	r3, [r7, #7]
 800fc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc9e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	79fa      	ldrb	r2, [r7, #7]
 800fca4:	701a      	strb	r2, [r3, #0]
}
 800fca6:	bf00      	nop
 800fca8:	3720      	adds	r7, #32
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	080189dc 	.word	0x080189dc

0800fcb4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b08c      	sub	sp, #48	@ 0x30
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
 800fcc0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fcc2:	220b      	movs	r2, #11
 800fcc4:	68b9      	ldr	r1, [r7, #8]
 800fcc6:	68f8      	ldr	r0, [r7, #12]
 800fcc8:	f7fe ff14 	bl	800eaf4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	2b05      	cmp	r3, #5
 800fcd0:	d929      	bls.n	800fd26 <gen_numname+0x72>
		sr = seq;
 800fcd2:	683b      	ldr	r3, [r7, #0]
 800fcd4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fcd6:	e020      	b.n	800fd1a <gen_numname+0x66>
			wc = *lfn++;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	1c9a      	adds	r2, r3, #2
 800fcdc:	607a      	str	r2, [r7, #4]
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800fce2:	2300      	movs	r3, #0
 800fce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fce6:	e015      	b.n	800fd14 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	005a      	lsls	r2, r3, #1
 800fcec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	4413      	add	r3, r2
 800fcf4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fcf6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800fcf8:	085b      	lsrs	r3, r3, #1
 800fcfa:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800fcfc:	69fb      	ldr	r3, [r7, #28]
 800fcfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <gen_numname+0x5a>
 800fd06:	69fa      	ldr	r2, [r7, #28]
 800fd08:	4b30      	ldr	r3, [pc, #192]	@ (800fdcc <gen_numname+0x118>)
 800fd0a:	4053      	eors	r3, r2
 800fd0c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	3301      	adds	r3, #1
 800fd12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd16:	2b0f      	cmp	r3, #15
 800fd18:	d9e6      	bls.n	800fce8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	881b      	ldrh	r3, [r3, #0]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d1da      	bne.n	800fcd8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fd26:	2307      	movs	r3, #7
 800fd28:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	b2db      	uxtb	r3, r3
 800fd2e:	f003 030f 	and.w	r3, r3, #15
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	3330      	adds	r3, #48	@ 0x30
 800fd36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800fd3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd3e:	2b39      	cmp	r3, #57	@ 0x39
 800fd40:	d904      	bls.n	800fd4c <gen_numname+0x98>
 800fd42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd46:	3307      	adds	r3, #7
 800fd48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800fd4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4e:	1e5a      	subs	r2, r3, #1
 800fd50:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fd52:	3330      	adds	r3, #48	@ 0x30
 800fd54:	443b      	add	r3, r7
 800fd56:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800fd5a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	091b      	lsrs	r3, r3, #4
 800fd62:	603b      	str	r3, [r7, #0]
	} while (seq);
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d1df      	bne.n	800fd2a <gen_numname+0x76>
	ns[i] = '~';
 800fd6a:	f107 0214 	add.w	r2, r7, #20
 800fd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd70:	4413      	add	r3, r2
 800fd72:	227e      	movs	r2, #126	@ 0x7e
 800fd74:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800fd76:	2300      	movs	r3, #0
 800fd78:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd7a:	e002      	b.n	800fd82 <gen_numname+0xce>
 800fd7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd7e:	3301      	adds	r3, #1
 800fd80:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd86:	429a      	cmp	r2, r3
 800fd88:	d205      	bcs.n	800fd96 <gen_numname+0xe2>
 800fd8a:	68fa      	ldr	r2, [r7, #12]
 800fd8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd8e:	4413      	add	r3, r2
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	2b20      	cmp	r3, #32
 800fd94:	d1f2      	bne.n	800fd7c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800fd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd98:	2b07      	cmp	r3, #7
 800fd9a:	d807      	bhi.n	800fdac <gen_numname+0xf8>
 800fd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	62ba      	str	r2, [r7, #40]	@ 0x28
 800fda2:	3330      	adds	r3, #48	@ 0x30
 800fda4:	443b      	add	r3, r7
 800fda6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800fdaa:	e000      	b.n	800fdae <gen_numname+0xfa>
 800fdac:	2120      	movs	r1, #32
 800fdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdb0:	1c5a      	adds	r2, r3, #1
 800fdb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	460a      	mov	r2, r1
 800fdba:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800fdbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdbe:	2b07      	cmp	r3, #7
 800fdc0:	d9e9      	bls.n	800fd96 <gen_numname+0xe2>
}
 800fdc2:	bf00      	nop
 800fdc4:	bf00      	nop
 800fdc6:	3730      	adds	r7, #48	@ 0x30
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	00011021 	.word	0x00011021

0800fdd0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b085      	sub	sp, #20
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800fdd8:	2300      	movs	r3, #0
 800fdda:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800fddc:	230b      	movs	r3, #11
 800fdde:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
 800fde2:	b2da      	uxtb	r2, r3
 800fde4:	0852      	lsrs	r2, r2, #1
 800fde6:	01db      	lsls	r3, r3, #7
 800fde8:	4313      	orrs	r3, r2
 800fdea:	b2da      	uxtb	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	1c59      	adds	r1, r3, #1
 800fdf0:	6079      	str	r1, [r7, #4]
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	3b01      	subs	r3, #1
 800fdfc:	60bb      	str	r3, [r7, #8]
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d1ed      	bne.n	800fde0 <sum_sfn+0x10>
	return sum;
 800fe04:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3714      	adds	r7, #20
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe10:	4770      	bx	lr

0800fe12 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b086      	sub	sp, #24
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fe1c:	2304      	movs	r3, #4
 800fe1e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800fe26:	23ff      	movs	r3, #255	@ 0xff
 800fe28:	757b      	strb	r3, [r7, #21]
 800fe2a:	23ff      	movs	r3, #255	@ 0xff
 800fe2c:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800fe2e:	e081      	b.n	800ff34 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	69db      	ldr	r3, [r3, #28]
 800fe34:	4619      	mov	r1, r3
 800fe36:	6938      	ldr	r0, [r7, #16]
 800fe38:	f7ff f8bc 	bl	800efb4 <move_window>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fe40:	7dfb      	ldrb	r3, [r7, #23]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d17c      	bne.n	800ff40 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a1b      	ldr	r3, [r3, #32]
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800fe4e:	7dbb      	ldrb	r3, [r7, #22]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d102      	bne.n	800fe5a <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fe54:	2304      	movs	r3, #4
 800fe56:	75fb      	strb	r3, [r7, #23]
 800fe58:	e077      	b.n	800ff4a <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	6a1b      	ldr	r3, [r3, #32]
 800fe5e:	330b      	adds	r3, #11
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fe66:	73fb      	strb	r3, [r7, #15]
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	7bfa      	ldrb	r2, [r7, #15]
 800fe6c:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800fe6e:	7dbb      	ldrb	r3, [r7, #22]
 800fe70:	2be5      	cmp	r3, #229	@ 0xe5
 800fe72:	d00e      	beq.n	800fe92 <dir_read+0x80>
 800fe74:	7dbb      	ldrb	r3, [r7, #22]
 800fe76:	2b2e      	cmp	r3, #46	@ 0x2e
 800fe78:	d00b      	beq.n	800fe92 <dir_read+0x80>
 800fe7a:	7bfb      	ldrb	r3, [r7, #15]
 800fe7c:	f023 0320 	bic.w	r3, r3, #32
 800fe80:	2b08      	cmp	r3, #8
 800fe82:	bf0c      	ite	eq
 800fe84:	2301      	moveq	r3, #1
 800fe86:	2300      	movne	r3, #0
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	461a      	mov	r2, r3
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d002      	beq.n	800fe98 <dir_read+0x86>
				ord = 0xFF;
 800fe92:	23ff      	movs	r3, #255	@ 0xff
 800fe94:	757b      	strb	r3, [r7, #21]
 800fe96:	e044      	b.n	800ff22 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800fe98:	7bfb      	ldrb	r3, [r7, #15]
 800fe9a:	2b0f      	cmp	r3, #15
 800fe9c:	d12f      	bne.n	800fefe <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800fe9e:	7dbb      	ldrb	r3, [r7, #22]
 800fea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00d      	beq.n	800fec4 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6a1b      	ldr	r3, [r3, #32]
 800feac:	7b5b      	ldrb	r3, [r3, #13]
 800feae:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800feb0:	7dbb      	ldrb	r3, [r7, #22]
 800feb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800feb6:	75bb      	strb	r3, [r7, #22]
 800feb8:	7dbb      	ldrb	r3, [r7, #22]
 800feba:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	695a      	ldr	r2, [r3, #20]
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fec4:	7dba      	ldrb	r2, [r7, #22]
 800fec6:	7d7b      	ldrb	r3, [r7, #21]
 800fec8:	429a      	cmp	r2, r3
 800feca:	d115      	bne.n	800fef8 <dir_read+0xe6>
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	330d      	adds	r3, #13
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	7d3a      	ldrb	r2, [r7, #20]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d10e      	bne.n	800fef8 <dir_read+0xe6>
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	68da      	ldr	r2, [r3, #12]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	6a1b      	ldr	r3, [r3, #32]
 800fee2:	4619      	mov	r1, r3
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7ff fe19 	bl	800fb1c <pick_lfn>
 800feea:	4603      	mov	r3, r0
 800feec:	2b00      	cmp	r3, #0
 800feee:	d003      	beq.n	800fef8 <dir_read+0xe6>
 800fef0:	7d7b      	ldrb	r3, [r7, #21]
 800fef2:	3b01      	subs	r3, #1
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	e000      	b.n	800fefa <dir_read+0xe8>
 800fef8:	23ff      	movs	r3, #255	@ 0xff
 800fefa:	757b      	strb	r3, [r7, #21]
 800fefc:	e011      	b.n	800ff22 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800fefe:	7d7b      	ldrb	r3, [r7, #21]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d109      	bne.n	800ff18 <dir_read+0x106>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a1b      	ldr	r3, [r3, #32]
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7ff ff61 	bl	800fdd0 <sum_sfn>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	461a      	mov	r2, r3
 800ff12:	7d3b      	ldrb	r3, [r7, #20]
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d015      	beq.n	800ff44 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ff1e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 800ff20:	e010      	b.n	800ff44 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ff22:	2100      	movs	r1, #0
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f7ff fc3d 	bl	800f7a4 <dir_next>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ff2e:	7dfb      	ldrb	r3, [r7, #23]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d109      	bne.n	800ff48 <dir_read+0x136>
	while (dp->sect) {
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	69db      	ldr	r3, [r3, #28]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f47f af79 	bne.w	800fe30 <dir_read+0x1e>
 800ff3e:	e004      	b.n	800ff4a <dir_read+0x138>
		if (res != FR_OK) break;
 800ff40:	bf00      	nop
 800ff42:	e002      	b.n	800ff4a <dir_read+0x138>
					break;
 800ff44:	bf00      	nop
 800ff46:	e000      	b.n	800ff4a <dir_read+0x138>
		if (res != FR_OK) break;
 800ff48:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ff4a:	7dfb      	ldrb	r3, [r7, #23]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d002      	beq.n	800ff56 <dir_read+0x144>
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	61da      	str	r2, [r3, #28]
	return res;
 800ff56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3718      	adds	r7, #24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}

0800ff60 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b086      	sub	sp, #24
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ff6e:	2100      	movs	r1, #0
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f7ff fb9c 	bl	800f6ae <dir_sdi>
 800ff76:	4603      	mov	r3, r0
 800ff78:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ff7a:	7dfb      	ldrb	r3, [r7, #23]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <dir_find+0x24>
 800ff80:	7dfb      	ldrb	r3, [r7, #23]
 800ff82:	e0a9      	b.n	80100d8 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ff84:	23ff      	movs	r3, #255	@ 0xff
 800ff86:	753b      	strb	r3, [r7, #20]
 800ff88:	7d3b      	ldrb	r3, [r7, #20]
 800ff8a:	757b      	strb	r3, [r7, #21]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff92:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	69db      	ldr	r3, [r3, #28]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	6938      	ldr	r0, [r7, #16]
 800ff9c:	f7ff f80a 	bl	800efb4 <move_window>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffa4:	7dfb      	ldrb	r3, [r7, #23]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f040 8090 	bne.w	80100cc <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a1b      	ldr	r3, [r3, #32]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ffb4:	7dbb      	ldrb	r3, [r7, #22]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d102      	bne.n	800ffc0 <dir_find+0x60>
 800ffba:	2304      	movs	r3, #4
 800ffbc:	75fb      	strb	r3, [r7, #23]
 800ffbe:	e08a      	b.n	80100d6 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6a1b      	ldr	r3, [r3, #32]
 800ffc4:	330b      	adds	r3, #11
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ffcc:	73fb      	strb	r3, [r7, #15]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	7bfa      	ldrb	r2, [r7, #15]
 800ffd2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ffd4:	7dbb      	ldrb	r3, [r7, #22]
 800ffd6:	2be5      	cmp	r3, #229	@ 0xe5
 800ffd8:	d007      	beq.n	800ffea <dir_find+0x8a>
 800ffda:	7bfb      	ldrb	r3, [r7, #15]
 800ffdc:	f003 0308 	and.w	r3, r3, #8
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d009      	beq.n	800fff8 <dir_find+0x98>
 800ffe4:	7bfb      	ldrb	r3, [r7, #15]
 800ffe6:	2b0f      	cmp	r3, #15
 800ffe8:	d006      	beq.n	800fff8 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ffea:	23ff      	movs	r3, #255	@ 0xff
 800ffec:	757b      	strb	r3, [r7, #21]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f04f 32ff 	mov.w	r2, #4294967295
 800fff4:	631a      	str	r2, [r3, #48]	@ 0x30
 800fff6:	e05e      	b.n	80100b6 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	2b0f      	cmp	r3, #15
 800fffc:	d136      	bne.n	801006c <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010008:	2b00      	cmp	r3, #0
 801000a:	d154      	bne.n	80100b6 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801000c:	7dbb      	ldrb	r3, [r7, #22]
 801000e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00d      	beq.n	8010032 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	7b5b      	ldrb	r3, [r3, #13]
 801001c:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801001e:	7dbb      	ldrb	r3, [r7, #22]
 8010020:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010024:	75bb      	strb	r3, [r7, #22]
 8010026:	7dbb      	ldrb	r3, [r7, #22]
 8010028:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	695a      	ldr	r2, [r3, #20]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010032:	7dba      	ldrb	r2, [r7, #22]
 8010034:	7d7b      	ldrb	r3, [r7, #21]
 8010036:	429a      	cmp	r2, r3
 8010038:	d115      	bne.n	8010066 <dir_find+0x106>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	6a1b      	ldr	r3, [r3, #32]
 801003e:	330d      	adds	r3, #13
 8010040:	781b      	ldrb	r3, [r3, #0]
 8010042:	7d3a      	ldrb	r2, [r7, #20]
 8010044:	429a      	cmp	r2, r3
 8010046:	d10e      	bne.n	8010066 <dir_find+0x106>
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	68da      	ldr	r2, [r3, #12]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6a1b      	ldr	r3, [r3, #32]
 8010050:	4619      	mov	r1, r3
 8010052:	4610      	mov	r0, r2
 8010054:	f7ff fcf2 	bl	800fa3c <cmp_lfn>
 8010058:	4603      	mov	r3, r0
 801005a:	2b00      	cmp	r3, #0
 801005c:	d003      	beq.n	8010066 <dir_find+0x106>
 801005e:	7d7b      	ldrb	r3, [r7, #21]
 8010060:	3b01      	subs	r3, #1
 8010062:	b2db      	uxtb	r3, r3
 8010064:	e000      	b.n	8010068 <dir_find+0x108>
 8010066:	23ff      	movs	r3, #255	@ 0xff
 8010068:	757b      	strb	r3, [r7, #21]
 801006a:	e024      	b.n	80100b6 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801006c:	7d7b      	ldrb	r3, [r7, #21]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d109      	bne.n	8010086 <dir_find+0x126>
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff feaa 	bl	800fdd0 <sum_sfn>
 801007c:	4603      	mov	r3, r0
 801007e:	461a      	mov	r2, r3
 8010080:	7d3b      	ldrb	r3, [r7, #20]
 8010082:	4293      	cmp	r3, r2
 8010084:	d024      	beq.n	80100d0 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	d10a      	bne.n	80100aa <dir_find+0x14a>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a18      	ldr	r0, [r3, #32]
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	3324      	adds	r3, #36	@ 0x24
 801009c:	220b      	movs	r2, #11
 801009e:	4619      	mov	r1, r3
 80100a0:	f7fe fd64 	bl	800eb6c <mem_cmp>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d014      	beq.n	80100d4 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80100aa:	23ff      	movs	r3, #255	@ 0xff
 80100ac:	757b      	strb	r3, [r7, #21]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f04f 32ff 	mov.w	r2, #4294967295
 80100b4:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80100b6:	2100      	movs	r1, #0
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7ff fb73 	bl	800f7a4 <dir_next>
 80100be:	4603      	mov	r3, r0
 80100c0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	f43f af65 	beq.w	800ff94 <dir_find+0x34>
 80100ca:	e004      	b.n	80100d6 <dir_find+0x176>
		if (res != FR_OK) break;
 80100cc:	bf00      	nop
 80100ce:	e002      	b.n	80100d6 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80100d0:	bf00      	nop
 80100d2:	e000      	b.n	80100d6 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80100d4:	bf00      	nop

	return res;
 80100d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3718      	adds	r7, #24
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b08c      	sub	sp, #48	@ 0x30
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80100f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d001      	beq.n	8010100 <dir_register+0x20>
 80100fc:	2306      	movs	r3, #6
 80100fe:	e0e0      	b.n	80102c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010100:	2300      	movs	r3, #0
 8010102:	627b      	str	r3, [r7, #36]	@ 0x24
 8010104:	e002      	b.n	801010c <dir_register+0x2c>
 8010106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010108:	3301      	adds	r3, #1
 801010a:	627b      	str	r3, [r7, #36]	@ 0x24
 801010c:	69fb      	ldr	r3, [r7, #28]
 801010e:	68da      	ldr	r2, [r3, #12]
 8010110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	4413      	add	r3, r2
 8010116:	881b      	ldrh	r3, [r3, #0]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d1f4      	bne.n	8010106 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8010122:	f107 030c 	add.w	r3, r7, #12
 8010126:	220c      	movs	r2, #12
 8010128:	4618      	mov	r0, r3
 801012a:	f7fe fce3 	bl	800eaf4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801012e:	7dfb      	ldrb	r3, [r7, #23]
 8010130:	f003 0301 	and.w	r3, r3, #1
 8010134:	2b00      	cmp	r3, #0
 8010136:	d032      	beq.n	801019e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2240      	movs	r2, #64	@ 0x40
 801013c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8010140:	2301      	movs	r3, #1
 8010142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010144:	e016      	b.n	8010174 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 801014c:	69fb      	ldr	r3, [r7, #28]
 801014e:	68da      	ldr	r2, [r3, #12]
 8010150:	f107 010c 	add.w	r1, r7, #12
 8010154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010156:	f7ff fdad 	bl	800fcb4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801015a:	6878      	ldr	r0, [r7, #4]
 801015c:	f7ff ff00 	bl	800ff60 <dir_find>
 8010160:	4603      	mov	r3, r0
 8010162:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8010166:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801016a:	2b00      	cmp	r3, #0
 801016c:	d106      	bne.n	801017c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801016e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010170:	3301      	adds	r3, #1
 8010172:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010176:	2b63      	cmp	r3, #99	@ 0x63
 8010178:	d9e5      	bls.n	8010146 <dir_register+0x66>
 801017a:	e000      	b.n	801017e <dir_register+0x9e>
			if (res != FR_OK) break;
 801017c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801017e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010180:	2b64      	cmp	r3, #100	@ 0x64
 8010182:	d101      	bne.n	8010188 <dir_register+0xa8>
 8010184:	2307      	movs	r3, #7
 8010186:	e09c      	b.n	80102c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010188:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801018c:	2b04      	cmp	r3, #4
 801018e:	d002      	beq.n	8010196 <dir_register+0xb6>
 8010190:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010194:	e095      	b.n	80102c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010196:	7dfa      	ldrb	r2, [r7, #23]
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801019e:	7dfb      	ldrb	r3, [r7, #23]
 80101a0:	f003 0302 	and.w	r3, r3, #2
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d007      	beq.n	80101b8 <dir_register+0xd8>
 80101a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101aa:	330c      	adds	r3, #12
 80101ac:	4a47      	ldr	r2, [pc, #284]	@ (80102cc <dir_register+0x1ec>)
 80101ae:	fba2 2303 	umull	r2, r3, r2, r3
 80101b2:	089b      	lsrs	r3, r3, #2
 80101b4:	3301      	adds	r3, #1
 80101b6:	e000      	b.n	80101ba <dir_register+0xda>
 80101b8:	2301      	movs	r3, #1
 80101ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80101bc:	6a39      	ldr	r1, [r7, #32]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f7ff fbb5 	bl	800f92e <dir_alloc>
 80101c4:	4603      	mov	r3, r0
 80101c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80101ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d148      	bne.n	8010264 <dir_register+0x184>
 80101d2:	6a3b      	ldr	r3, [r7, #32]
 80101d4:	3b01      	subs	r3, #1
 80101d6:	623b      	str	r3, [r7, #32]
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d042      	beq.n	8010264 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	695a      	ldr	r2, [r3, #20]
 80101e2:	6a3b      	ldr	r3, [r7, #32]
 80101e4:	015b      	lsls	r3, r3, #5
 80101e6:	1ad3      	subs	r3, r2, r3
 80101e8:	4619      	mov	r1, r3
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f7ff fa5f 	bl	800f6ae <dir_sdi>
 80101f0:	4603      	mov	r3, r0
 80101f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80101f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d132      	bne.n	8010264 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	3324      	adds	r3, #36	@ 0x24
 8010202:	4618      	mov	r0, r3
 8010204:	f7ff fde4 	bl	800fdd0 <sum_sfn>
 8010208:	4603      	mov	r3, r0
 801020a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	69db      	ldr	r3, [r3, #28]
 8010210:	4619      	mov	r1, r3
 8010212:	69f8      	ldr	r0, [r7, #28]
 8010214:	f7fe fece 	bl	800efb4 <move_window>
 8010218:	4603      	mov	r3, r0
 801021a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 801021e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010222:	2b00      	cmp	r3, #0
 8010224:	d11d      	bne.n	8010262 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	68d8      	ldr	r0, [r3, #12]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6a19      	ldr	r1, [r3, #32]
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	b2da      	uxtb	r2, r3
 8010232:	7efb      	ldrb	r3, [r7, #27]
 8010234:	f7ff fcd6 	bl	800fbe4 <put_lfn>
				fs->wflag = 1;
 8010238:	69fb      	ldr	r3, [r7, #28]
 801023a:	2201      	movs	r2, #1
 801023c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801023e:	2100      	movs	r1, #0
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7ff faaf 	bl	800f7a4 <dir_next>
 8010246:	4603      	mov	r3, r0
 8010248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 801024c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d107      	bne.n	8010264 <dir_register+0x184>
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	3b01      	subs	r3, #1
 8010258:	623b      	str	r3, [r7, #32]
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1d5      	bne.n	801020c <dir_register+0x12c>
 8010260:	e000      	b.n	8010264 <dir_register+0x184>
				if (res != FR_OK) break;
 8010262:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010264:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010268:	2b00      	cmp	r3, #0
 801026a:	d128      	bne.n	80102be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	69db      	ldr	r3, [r3, #28]
 8010270:	4619      	mov	r1, r3
 8010272:	69f8      	ldr	r0, [r7, #28]
 8010274:	f7fe fe9e 	bl	800efb4 <move_window>
 8010278:	4603      	mov	r3, r0
 801027a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 801027e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8010282:	2b00      	cmp	r3, #0
 8010284:	d11b      	bne.n	80102be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	6a1b      	ldr	r3, [r3, #32]
 801028a:	2220      	movs	r2, #32
 801028c:	2100      	movs	r1, #0
 801028e:	4618      	mov	r0, r3
 8010290:	f7fe fc51 	bl	800eb36 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a18      	ldr	r0, [r3, #32]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	3324      	adds	r3, #36	@ 0x24
 801029c:	220b      	movs	r2, #11
 801029e:	4619      	mov	r1, r3
 80102a0:	f7fe fc28 	bl	800eaf4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	6a1b      	ldr	r3, [r3, #32]
 80102ae:	330c      	adds	r3, #12
 80102b0:	f002 0218 	and.w	r2, r2, #24
 80102b4:	b2d2      	uxtb	r2, r2
 80102b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	2201      	movs	r2, #1
 80102bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80102be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3730      	adds	r7, #48	@ 0x30
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	4ec4ec4f 	.word	0x4ec4ec4f

080102d0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b088      	sub	sp, #32
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	2200      	movs	r2, #0
 80102e4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 80ca 	beq.w	8010484 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102f8:	d032      	beq.n	8010360 <get_fileinfo+0x90>
			i = j = 0;
 80102fa:	2300      	movs	r3, #0
 80102fc:	61bb      	str	r3, [r7, #24]
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010302:	e01b      	b.n	801033c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010304:	89fb      	ldrh	r3, [r7, #14]
 8010306:	2100      	movs	r1, #0
 8010308:	4618      	mov	r0, r3
 801030a:	f001 ff0d 	bl	8012128 <ff_convert>
 801030e:	4603      	mov	r3, r0
 8010310:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010312:	89fb      	ldrh	r3, [r7, #14]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d102      	bne.n	801031e <get_fileinfo+0x4e>
 8010318:	2300      	movs	r3, #0
 801031a:	61fb      	str	r3, [r7, #28]
 801031c:	e01a      	b.n	8010354 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	2bfe      	cmp	r3, #254	@ 0xfe
 8010322:	d902      	bls.n	801032a <get_fileinfo+0x5a>
 8010324:	2300      	movs	r3, #0
 8010326:	61fb      	str	r3, [r7, #28]
 8010328:	e014      	b.n	8010354 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	1c5a      	adds	r2, r3, #1
 801032e:	61fa      	str	r2, [r7, #28]
 8010330:	89fa      	ldrh	r2, [r7, #14]
 8010332:	b2d1      	uxtb	r1, r2
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	4413      	add	r3, r2
 8010338:	460a      	mov	r2, r1
 801033a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	68da      	ldr	r2, [r3, #12]
 8010340:	69bb      	ldr	r3, [r7, #24]
 8010342:	1c59      	adds	r1, r3, #1
 8010344:	61b9      	str	r1, [r7, #24]
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	4413      	add	r3, r2
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	81fb      	strh	r3, [r7, #14]
 801034e:	89fb      	ldrh	r3, [r7, #14]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1d7      	bne.n	8010304 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010354:	683a      	ldr	r2, [r7, #0]
 8010356:	69fb      	ldr	r3, [r7, #28]
 8010358:	4413      	add	r3, r2
 801035a:	3316      	adds	r3, #22
 801035c:	2200      	movs	r2, #0
 801035e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010360:	2300      	movs	r3, #0
 8010362:	61bb      	str	r3, [r7, #24]
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010368:	683a      	ldr	r2, [r7, #0]
 801036a:	69fb      	ldr	r3, [r7, #28]
 801036c:	4413      	add	r3, r2
 801036e:	3316      	adds	r3, #22
 8010370:	781b      	ldrb	r3, [r3, #0]
 8010372:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010374:	e04d      	b.n	8010412 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a1a      	ldr	r2, [r3, #32]
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	1c59      	adds	r1, r3, #1
 801037e:	61f9      	str	r1, [r7, #28]
 8010380:	4413      	add	r3, r2
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010386:	7dfb      	ldrb	r3, [r7, #23]
 8010388:	2b20      	cmp	r3, #32
 801038a:	d041      	beq.n	8010410 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801038c:	7dfb      	ldrb	r3, [r7, #23]
 801038e:	2b05      	cmp	r3, #5
 8010390:	d101      	bne.n	8010396 <get_fileinfo+0xc6>
 8010392:	23e5      	movs	r3, #229	@ 0xe5
 8010394:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010396:	69fb      	ldr	r3, [r7, #28]
 8010398:	2b09      	cmp	r3, #9
 801039a:	d10f      	bne.n	80103bc <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 801039c:	89bb      	ldrh	r3, [r7, #12]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d105      	bne.n	80103ae <get_fileinfo+0xde>
 80103a2:	683a      	ldr	r2, [r7, #0]
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	4413      	add	r3, r2
 80103a8:	3316      	adds	r3, #22
 80103aa:	222e      	movs	r2, #46	@ 0x2e
 80103ac:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	1c5a      	adds	r2, r3, #1
 80103b2:	61ba      	str	r2, [r7, #24]
 80103b4:	683a      	ldr	r2, [r7, #0]
 80103b6:	4413      	add	r3, r2
 80103b8:	222e      	movs	r2, #46	@ 0x2e
 80103ba:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80103bc:	683a      	ldr	r2, [r7, #0]
 80103be:	69bb      	ldr	r3, [r7, #24]
 80103c0:	4413      	add	r3, r2
 80103c2:	3309      	adds	r3, #9
 80103c4:	7dfa      	ldrb	r2, [r7, #23]
 80103c6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80103c8:	89bb      	ldrh	r3, [r7, #12]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d11c      	bne.n	8010408 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
 80103d0:	2b40      	cmp	r3, #64	@ 0x40
 80103d2:	d913      	bls.n	80103fc <get_fileinfo+0x12c>
 80103d4:	7dfb      	ldrb	r3, [r7, #23]
 80103d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80103d8:	d810      	bhi.n	80103fc <get_fileinfo+0x12c>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	330c      	adds	r3, #12
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	461a      	mov	r2, r3
 80103e4:	69fb      	ldr	r3, [r7, #28]
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	d901      	bls.n	80103ee <get_fileinfo+0x11e>
 80103ea:	2310      	movs	r3, #16
 80103ec:	e000      	b.n	80103f0 <get_fileinfo+0x120>
 80103ee:	2308      	movs	r3, #8
 80103f0:	4013      	ands	r3, r2
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d002      	beq.n	80103fc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80103f6:	7dfb      	ldrb	r3, [r7, #23]
 80103f8:	3320      	adds	r3, #32
 80103fa:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	4413      	add	r3, r2
 8010402:	3316      	adds	r3, #22
 8010404:	7dfa      	ldrb	r2, [r7, #23]
 8010406:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	3301      	adds	r3, #1
 801040c:	61bb      	str	r3, [r7, #24]
 801040e:	e000      	b.n	8010412 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8010410:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	2b0a      	cmp	r3, #10
 8010416:	d9ae      	bls.n	8010376 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8010418:	89bb      	ldrh	r3, [r7, #12]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d10d      	bne.n	801043a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	4413      	add	r3, r2
 8010424:	3316      	adds	r3, #22
 8010426:	2200      	movs	r2, #0
 8010428:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	6a1b      	ldr	r3, [r3, #32]
 801042e:	330c      	adds	r3, #12
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <get_fileinfo+0x16a>
 8010436:	2300      	movs	r3, #0
 8010438:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801043a:	683a      	ldr	r2, [r7, #0]
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	4413      	add	r3, r2
 8010440:	3309      	adds	r3, #9
 8010442:	2200      	movs	r2, #0
 8010444:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6a1b      	ldr	r3, [r3, #32]
 801044a:	7ada      	ldrb	r2, [r3, #11]
 801044c:	683b      	ldr	r3, [r7, #0]
 801044e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a1b      	ldr	r3, [r3, #32]
 8010454:	331c      	adds	r3, #28
 8010456:	4618      	mov	r0, r3
 8010458:	f7fe fae2 	bl	800ea20 <ld_dword>
 801045c:	4602      	mov	r2, r0
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6a1b      	ldr	r3, [r3, #32]
 8010466:	3316      	adds	r3, #22
 8010468:	4618      	mov	r0, r3
 801046a:	f7fe fad9 	bl	800ea20 <ld_dword>
 801046e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010470:	68bb      	ldr	r3, [r7, #8]
 8010472:	b29a      	uxth	r2, r3
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	80da      	strh	r2, [r3, #6]
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	0c1b      	lsrs	r3, r3, #16
 801047c:	b29a      	uxth	r2, r3
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	809a      	strh	r2, [r3, #4]
 8010482:	e000      	b.n	8010486 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010484:	bf00      	nop
}
 8010486:	3720      	adds	r7, #32
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b08a      	sub	sp, #40	@ 0x28
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	613b      	str	r3, [r7, #16]
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	68db      	ldr	r3, [r3, #12]
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	2300      	movs	r3, #0
 80104a6:	617b      	str	r3, [r7, #20]
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	1c5a      	adds	r2, r3, #1
 80104b0:	61ba      	str	r2, [r7, #24]
 80104b2:	693a      	ldr	r2, [r7, #16]
 80104b4:	4413      	add	r3, r2
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80104ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104bc:	2b1f      	cmp	r3, #31
 80104be:	d940      	bls.n	8010542 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80104c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80104c4:	d006      	beq.n	80104d4 <create_name+0x48>
 80104c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80104ca:	d110      	bne.n	80104ee <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80104cc:	e002      	b.n	80104d4 <create_name+0x48>
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	3301      	adds	r3, #1
 80104d2:	61bb      	str	r3, [r7, #24]
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	69bb      	ldr	r3, [r7, #24]
 80104d8:	4413      	add	r3, r2
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b2f      	cmp	r3, #47	@ 0x2f
 80104de:	d0f6      	beq.n	80104ce <create_name+0x42>
 80104e0:	693a      	ldr	r2, [r7, #16]
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	4413      	add	r3, r2
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80104ea:	d0f0      	beq.n	80104ce <create_name+0x42>
			break;
 80104ec:	e02a      	b.n	8010544 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80104ee:	697b      	ldr	r3, [r7, #20]
 80104f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80104f2:	d901      	bls.n	80104f8 <create_name+0x6c>
 80104f4:	2306      	movs	r3, #6
 80104f6:	e17d      	b.n	80107f4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80104f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80104fa:	b2db      	uxtb	r3, r3
 80104fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80104fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010500:	2101      	movs	r1, #1
 8010502:	4618      	mov	r0, r3
 8010504:	f001 fe10 	bl	8012128 <ff_convert>
 8010508:	4603      	mov	r3, r0
 801050a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801050c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801050e:	2b00      	cmp	r3, #0
 8010510:	d101      	bne.n	8010516 <create_name+0x8a>
 8010512:	2306      	movs	r3, #6
 8010514:	e16e      	b.n	80107f4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010516:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010518:	2b7f      	cmp	r3, #127	@ 0x7f
 801051a:	d809      	bhi.n	8010530 <create_name+0xa4>
 801051c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801051e:	4619      	mov	r1, r3
 8010520:	488d      	ldr	r0, [pc, #564]	@ (8010758 <create_name+0x2cc>)
 8010522:	f7fe fb4a 	bl	800ebba <chk_chr>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <create_name+0xa4>
 801052c:	2306      	movs	r3, #6
 801052e:	e161      	b.n	80107f4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	1c5a      	adds	r2, r3, #1
 8010534:	617a      	str	r2, [r7, #20]
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	68fa      	ldr	r2, [r7, #12]
 801053a:	4413      	add	r3, r2
 801053c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801053e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010540:	e7b4      	b.n	80104ac <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010542:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010544:	693a      	ldr	r2, [r7, #16]
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	441a      	add	r2, r3
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801054e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010550:	2b1f      	cmp	r3, #31
 8010552:	d801      	bhi.n	8010558 <create_name+0xcc>
 8010554:	2304      	movs	r3, #4
 8010556:	e000      	b.n	801055a <create_name+0xce>
 8010558:	2300      	movs	r3, #0
 801055a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801055e:	e011      	b.n	8010584 <create_name+0xf8>
		w = lfn[di - 1];
 8010560:	697a      	ldr	r2, [r7, #20]
 8010562:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010566:	4413      	add	r3, r2
 8010568:	005b      	lsls	r3, r3, #1
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	4413      	add	r3, r2
 801056e:	881b      	ldrh	r3, [r3, #0]
 8010570:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8010572:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010574:	2b20      	cmp	r3, #32
 8010576:	d002      	beq.n	801057e <create_name+0xf2>
 8010578:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801057a:	2b2e      	cmp	r3, #46	@ 0x2e
 801057c:	d106      	bne.n	801058c <create_name+0x100>
		di--;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	3b01      	subs	r3, #1
 8010582:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1ea      	bne.n	8010560 <create_name+0xd4>
 801058a:	e000      	b.n	801058e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801058c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	68fa      	ldr	r2, [r7, #12]
 8010594:	4413      	add	r3, r2
 8010596:	2200      	movs	r2, #0
 8010598:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <create_name+0x118>
 80105a0:	2306      	movs	r3, #6
 80105a2:	e127      	b.n	80107f4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3324      	adds	r3, #36	@ 0x24
 80105a8:	220b      	movs	r2, #11
 80105aa:	2120      	movs	r1, #32
 80105ac:	4618      	mov	r0, r3
 80105ae:	f7fe fac2 	bl	800eb36 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80105b2:	2300      	movs	r3, #0
 80105b4:	61bb      	str	r3, [r7, #24]
 80105b6:	e002      	b.n	80105be <create_name+0x132>
 80105b8:	69bb      	ldr	r3, [r7, #24]
 80105ba:	3301      	adds	r3, #1
 80105bc:	61bb      	str	r3, [r7, #24]
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	005b      	lsls	r3, r3, #1
 80105c2:	68fa      	ldr	r2, [r7, #12]
 80105c4:	4413      	add	r3, r2
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	2b20      	cmp	r3, #32
 80105ca:	d0f5      	beq.n	80105b8 <create_name+0x12c>
 80105cc:	69bb      	ldr	r3, [r7, #24]
 80105ce:	005b      	lsls	r3, r3, #1
 80105d0:	68fa      	ldr	r2, [r7, #12]
 80105d2:	4413      	add	r3, r2
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80105d8:	d0ee      	beq.n	80105b8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80105da:	69bb      	ldr	r3, [r7, #24]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d009      	beq.n	80105f4 <create_name+0x168>
 80105e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80105e4:	f043 0303 	orr.w	r3, r3, #3
 80105e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80105ec:	e002      	b.n	80105f4 <create_name+0x168>
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	617b      	str	r3, [r7, #20]
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d009      	beq.n	801060e <create_name+0x182>
 80105fa:	697a      	ldr	r2, [r7, #20]
 80105fc:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010600:	4413      	add	r3, r2
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	4413      	add	r3, r2
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	2b2e      	cmp	r3, #46	@ 0x2e
 801060c:	d1ef      	bne.n	80105ee <create_name+0x162>

	i = b = 0; ni = 8;
 801060e:	2300      	movs	r3, #0
 8010610:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010614:	2300      	movs	r3, #0
 8010616:	623b      	str	r3, [r7, #32]
 8010618:	2308      	movs	r3, #8
 801061a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801061c:	69bb      	ldr	r3, [r7, #24]
 801061e:	1c5a      	adds	r2, r3, #1
 8010620:	61ba      	str	r2, [r7, #24]
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	68fa      	ldr	r2, [r7, #12]
 8010626:	4413      	add	r3, r2
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 801062c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801062e:	2b00      	cmp	r3, #0
 8010630:	f000 8090 	beq.w	8010754 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010634:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010636:	2b20      	cmp	r3, #32
 8010638:	d006      	beq.n	8010648 <create_name+0x1bc>
 801063a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801063c:	2b2e      	cmp	r3, #46	@ 0x2e
 801063e:	d10a      	bne.n	8010656 <create_name+0x1ca>
 8010640:	69ba      	ldr	r2, [r7, #24]
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	429a      	cmp	r2, r3
 8010646:	d006      	beq.n	8010656 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801064c:	f043 0303 	orr.w	r3, r3, #3
 8010650:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010654:	e07d      	b.n	8010752 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010656:	6a3a      	ldr	r2, [r7, #32]
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	429a      	cmp	r2, r3
 801065c:	d203      	bcs.n	8010666 <create_name+0x1da>
 801065e:	69ba      	ldr	r2, [r7, #24]
 8010660:	697b      	ldr	r3, [r7, #20]
 8010662:	429a      	cmp	r2, r3
 8010664:	d123      	bne.n	80106ae <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010666:	69fb      	ldr	r3, [r7, #28]
 8010668:	2b0b      	cmp	r3, #11
 801066a:	d106      	bne.n	801067a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801066c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010670:	f043 0303 	orr.w	r3, r3, #3
 8010674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010678:	e075      	b.n	8010766 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801067a:	69ba      	ldr	r2, [r7, #24]
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	429a      	cmp	r2, r3
 8010680:	d005      	beq.n	801068e <create_name+0x202>
 8010682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010686:	f043 0303 	orr.w	r3, r3, #3
 801068a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801068e:	69ba      	ldr	r2, [r7, #24]
 8010690:	697b      	ldr	r3, [r7, #20]
 8010692:	429a      	cmp	r2, r3
 8010694:	d866      	bhi.n	8010764 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	61bb      	str	r3, [r7, #24]
 801069a:	2308      	movs	r3, #8
 801069c:	623b      	str	r3, [r7, #32]
 801069e:	230b      	movs	r3, #11
 80106a0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80106a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80106ac:	e051      	b.n	8010752 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80106ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80106b2:	d914      	bls.n	80106de <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80106b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106b6:	2100      	movs	r1, #0
 80106b8:	4618      	mov	r0, r3
 80106ba:	f001 fd35 	bl	8012128 <ff_convert>
 80106be:	4603      	mov	r3, r0
 80106c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80106c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d004      	beq.n	80106d2 <create_name+0x246>
 80106c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106ca:	3b80      	subs	r3, #128	@ 0x80
 80106cc:	4a23      	ldr	r2, [pc, #140]	@ (801075c <create_name+0x2d0>)
 80106ce:	5cd3      	ldrb	r3, [r2, r3]
 80106d0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80106d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106d6:	f043 0302 	orr.w	r3, r3, #2
 80106da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80106de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d007      	beq.n	80106f4 <create_name+0x268>
 80106e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80106e6:	4619      	mov	r1, r3
 80106e8:	481d      	ldr	r0, [pc, #116]	@ (8010760 <create_name+0x2d4>)
 80106ea:	f7fe fa66 	bl	800ebba <chk_chr>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d008      	beq.n	8010706 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80106f4:	235f      	movs	r3, #95	@ 0x5f
 80106f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80106f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80106fc:	f043 0303 	orr.w	r3, r3, #3
 8010700:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010704:	e01b      	b.n	801073e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010708:	2b40      	cmp	r3, #64	@ 0x40
 801070a:	d909      	bls.n	8010720 <create_name+0x294>
 801070c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801070e:	2b5a      	cmp	r3, #90	@ 0x5a
 8010710:	d806      	bhi.n	8010720 <create_name+0x294>
					b |= 2;
 8010712:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010716:	f043 0302 	orr.w	r3, r3, #2
 801071a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801071e:	e00e      	b.n	801073e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010720:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010722:	2b60      	cmp	r3, #96	@ 0x60
 8010724:	d90b      	bls.n	801073e <create_name+0x2b2>
 8010726:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010728:	2b7a      	cmp	r3, #122	@ 0x7a
 801072a:	d808      	bhi.n	801073e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801072c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010730:	f043 0301 	orr.w	r3, r3, #1
 8010734:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010738:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801073a:	3b20      	subs	r3, #32
 801073c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801073e:	6a3b      	ldr	r3, [r7, #32]
 8010740:	1c5a      	adds	r2, r3, #1
 8010742:	623a      	str	r2, [r7, #32]
 8010744:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8010746:	b2d1      	uxtb	r1, r2
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	4413      	add	r3, r2
 801074c:	460a      	mov	r2, r1
 801074e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010752:	e763      	b.n	801061c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010754:	bf00      	nop
 8010756:	e006      	b.n	8010766 <create_name+0x2da>
 8010758:	080188e8 	.word	0x080188e8
 801075c:	0801895c 	.word	0x0801895c
 8010760:	080188f4 	.word	0x080188f4
			if (si > di) break;			/* No extension */
 8010764:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 801076c:	2be5      	cmp	r3, #229	@ 0xe5
 801076e:	d103      	bne.n	8010778 <create_name+0x2ec>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2205      	movs	r2, #5
 8010774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	2b08      	cmp	r3, #8
 801077c:	d104      	bne.n	8010788 <create_name+0x2fc>
 801077e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010782:	009b      	lsls	r3, r3, #2
 8010784:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010788:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801078c:	f003 030c 	and.w	r3, r3, #12
 8010790:	2b0c      	cmp	r3, #12
 8010792:	d005      	beq.n	80107a0 <create_name+0x314>
 8010794:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010798:	f003 0303 	and.w	r3, r3, #3
 801079c:	2b03      	cmp	r3, #3
 801079e:	d105      	bne.n	80107ac <create_name+0x320>
 80107a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107a4:	f043 0302 	orr.w	r3, r3, #2
 80107a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80107ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107b0:	f003 0302 	and.w	r3, r3, #2
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d117      	bne.n	80107e8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80107b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107bc:	f003 0303 	and.w	r3, r3, #3
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	d105      	bne.n	80107d0 <create_name+0x344>
 80107c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107c8:	f043 0310 	orr.w	r3, r3, #16
 80107cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80107d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80107d4:	f003 030c 	and.w	r3, r3, #12
 80107d8:	2b04      	cmp	r3, #4
 80107da:	d105      	bne.n	80107e8 <create_name+0x35c>
 80107dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107e0:	f043 0308 	orr.w	r3, r3, #8
 80107e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80107ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80107f2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3728      	adds	r7, #40	@ 0x28
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}

080107fc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b086      	sub	sp, #24
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
 8010804:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801080a:	693b      	ldr	r3, [r7, #16]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010810:	e002      	b.n	8010818 <follow_path+0x1c>
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	3301      	adds	r3, #1
 8010816:	603b      	str	r3, [r7, #0]
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	2b2f      	cmp	r3, #47	@ 0x2f
 801081e:	d0f8      	beq.n	8010812 <follow_path+0x16>
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	2b5c      	cmp	r3, #92	@ 0x5c
 8010826:	d0f4      	beq.n	8010812 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	2200      	movs	r2, #0
 801082c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	781b      	ldrb	r3, [r3, #0]
 8010832:	2b1f      	cmp	r3, #31
 8010834:	d80a      	bhi.n	801084c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2280      	movs	r2, #128	@ 0x80
 801083a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801083e:	2100      	movs	r1, #0
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7fe ff34 	bl	800f6ae <dir_sdi>
 8010846:	4603      	mov	r3, r0
 8010848:	75fb      	strb	r3, [r7, #23]
 801084a:	e043      	b.n	80108d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801084c:	463b      	mov	r3, r7
 801084e:	4619      	mov	r1, r3
 8010850:	6878      	ldr	r0, [r7, #4]
 8010852:	f7ff fe1b 	bl	801048c <create_name>
 8010856:	4603      	mov	r3, r0
 8010858:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801085a:	7dfb      	ldrb	r3, [r7, #23]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d134      	bne.n	80108ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff fb7d 	bl	800ff60 <dir_find>
 8010866:	4603      	mov	r3, r0
 8010868:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8010870:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010872:	7dfb      	ldrb	r3, [r7, #23]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d00a      	beq.n	801088e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010878:	7dfb      	ldrb	r3, [r7, #23]
 801087a:	2b04      	cmp	r3, #4
 801087c:	d127      	bne.n	80108ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801087e:	7afb      	ldrb	r3, [r7, #11]
 8010880:	f003 0304 	and.w	r3, r3, #4
 8010884:	2b00      	cmp	r3, #0
 8010886:	d122      	bne.n	80108ce <follow_path+0xd2>
 8010888:	2305      	movs	r3, #5
 801088a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801088c:	e01f      	b.n	80108ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801088e:	7afb      	ldrb	r3, [r7, #11]
 8010890:	f003 0304 	and.w	r3, r3, #4
 8010894:	2b00      	cmp	r3, #0
 8010896:	d11c      	bne.n	80108d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	799b      	ldrb	r3, [r3, #6]
 801089c:	f003 0310 	and.w	r3, r3, #16
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d102      	bne.n	80108aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80108a4:	2305      	movs	r3, #5
 80108a6:	75fb      	strb	r3, [r7, #23]
 80108a8:	e014      	b.n	80108d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	695b      	ldr	r3, [r3, #20]
 80108b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108b8:	4413      	add	r3, r2
 80108ba:	4619      	mov	r1, r3
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	f7ff f87d 	bl	800f9bc <ld_clust>
 80108c2:	4602      	mov	r2, r0
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80108c8:	e7c0      	b.n	801084c <follow_path+0x50>
			if (res != FR_OK) break;
 80108ca:	bf00      	nop
 80108cc:	e002      	b.n	80108d4 <follow_path+0xd8>
				break;
 80108ce:	bf00      	nop
 80108d0:	e000      	b.n	80108d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80108d2:	bf00      	nop
			}
		}
	}

	return res;
 80108d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3718      	adds	r7, #24
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80108de:	b480      	push	{r7}
 80108e0:	b087      	sub	sp, #28
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80108e6:	f04f 33ff 	mov.w	r3, #4294967295
 80108ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d031      	beq.n	8010958 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	617b      	str	r3, [r7, #20]
 80108fa:	e002      	b.n	8010902 <get_ldnumber+0x24>
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	3301      	adds	r3, #1
 8010900:	617b      	str	r3, [r7, #20]
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	2b1f      	cmp	r3, #31
 8010908:	d903      	bls.n	8010912 <get_ldnumber+0x34>
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	2b3a      	cmp	r3, #58	@ 0x3a
 8010910:	d1f4      	bne.n	80108fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	2b3a      	cmp	r3, #58	@ 0x3a
 8010918:	d11c      	bne.n	8010954 <get_ldnumber+0x76>
			tp = *path;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	1c5a      	adds	r2, r3, #1
 8010924:	60fa      	str	r2, [r7, #12]
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	3b30      	subs	r3, #48	@ 0x30
 801092a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	2b09      	cmp	r3, #9
 8010930:	d80e      	bhi.n	8010950 <get_ldnumber+0x72>
 8010932:	68fa      	ldr	r2, [r7, #12]
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	429a      	cmp	r2, r3
 8010938:	d10a      	bne.n	8010950 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d107      	bne.n	8010950 <get_ldnumber+0x72>
					vol = (int)i;
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	3301      	adds	r3, #1
 8010948:	617b      	str	r3, [r7, #20]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	697a      	ldr	r2, [r7, #20]
 801094e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010950:	693b      	ldr	r3, [r7, #16]
 8010952:	e002      	b.n	801095a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010954:	2300      	movs	r3, #0
 8010956:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010958:	693b      	ldr	r3, [r7, #16]
}
 801095a:	4618      	mov	r0, r3
 801095c:	371c      	adds	r7, #28
 801095e:	46bd      	mov	sp, r7
 8010960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010964:	4770      	bx	lr
	...

08010968 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	70da      	strb	r2, [r3, #3]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f04f 32ff 	mov.w	r2, #4294967295
 801097e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7fe fb16 	bl	800efb4 <move_window>
 8010988:	4603      	mov	r3, r0
 801098a:	2b00      	cmp	r3, #0
 801098c:	d001      	beq.n	8010992 <check_fs+0x2a>
 801098e:	2304      	movs	r3, #4
 8010990:	e038      	b.n	8010a04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	3338      	adds	r3, #56	@ 0x38
 8010996:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801099a:	4618      	mov	r0, r3
 801099c:	f7fe f828 	bl	800e9f0 <ld_word>
 80109a0:	4603      	mov	r3, r0
 80109a2:	461a      	mov	r2, r3
 80109a4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d001      	beq.n	80109b0 <check_fs+0x48>
 80109ac:	2303      	movs	r3, #3
 80109ae:	e029      	b.n	8010a04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80109b6:	2be9      	cmp	r3, #233	@ 0xe9
 80109b8:	d009      	beq.n	80109ce <check_fs+0x66>
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80109c0:	2beb      	cmp	r3, #235	@ 0xeb
 80109c2:	d11e      	bne.n	8010a02 <check_fs+0x9a>
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80109ca:	2b90      	cmp	r3, #144	@ 0x90
 80109cc:	d119      	bne.n	8010a02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3338      	adds	r3, #56	@ 0x38
 80109d2:	3336      	adds	r3, #54	@ 0x36
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe f823 	bl	800ea20 <ld_dword>
 80109da:	4603      	mov	r3, r0
 80109dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80109e0:	4a0a      	ldr	r2, [pc, #40]	@ (8010a0c <check_fs+0xa4>)
 80109e2:	4293      	cmp	r3, r2
 80109e4:	d101      	bne.n	80109ea <check_fs+0x82>
 80109e6:	2300      	movs	r3, #0
 80109e8:	e00c      	b.n	8010a04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	3338      	adds	r3, #56	@ 0x38
 80109ee:	3352      	adds	r3, #82	@ 0x52
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fe f815 	bl	800ea20 <ld_dword>
 80109f6:	4603      	mov	r3, r0
 80109f8:	4a05      	ldr	r2, [pc, #20]	@ (8010a10 <check_fs+0xa8>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d101      	bne.n	8010a02 <check_fs+0x9a>
 80109fe:	2300      	movs	r3, #0
 8010a00:	e000      	b.n	8010a04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010a02:	2302      	movs	r3, #2
}
 8010a04:	4618      	mov	r0, r3
 8010a06:	3708      	adds	r7, #8
 8010a08:	46bd      	mov	sp, r7
 8010a0a:	bd80      	pop	{r7, pc}
 8010a0c:	00544146 	.word	0x00544146
 8010a10:	33544146 	.word	0x33544146

08010a14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b096      	sub	sp, #88	@ 0x58
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	60f8      	str	r0, [r7, #12]
 8010a1c:	60b9      	str	r1, [r7, #8]
 8010a1e:	4613      	mov	r3, r2
 8010a20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f7ff ff58 	bl	80108de <get_ldnumber>
 8010a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	da01      	bge.n	8010a3a <find_volume+0x26>
 8010a36:	230b      	movs	r3, #11
 8010a38:	e235      	b.n	8010ea6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010a3a:	4aa5      	ldr	r2, [pc, #660]	@ (8010cd0 <find_volume+0x2bc>)
 8010a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d101      	bne.n	8010a4e <find_volume+0x3a>
 8010a4a:	230c      	movs	r3, #12
 8010a4c:	e22b      	b.n	8010ea6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010a4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010a50:	f7fe f8ce 	bl	800ebf0 <lock_fs>
 8010a54:	4603      	mov	r3, r0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d101      	bne.n	8010a5e <find_volume+0x4a>
 8010a5a:	230f      	movs	r3, #15
 8010a5c:	e223      	b.n	8010ea6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a62:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010a64:	79fb      	ldrb	r3, [r7, #7]
 8010a66:	f023 0301 	bic.w	r3, r3, #1
 8010a6a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6e:	781b      	ldrb	r3, [r3, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d01a      	beq.n	8010aaa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a76:	785b      	ldrb	r3, [r3, #1]
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f7fd ff1b 	bl	800e8b4 <disk_status>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010a84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d10c      	bne.n	8010aaa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010a90:	79fb      	ldrb	r3, [r7, #7]
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d007      	beq.n	8010aa6 <find_volume+0x92>
 8010a96:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a9a:	f003 0304 	and.w	r3, r3, #4
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d001      	beq.n	8010aa6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010aa2:	230a      	movs	r3, #10
 8010aa4:	e1ff      	b.n	8010ea6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	e1fd      	b.n	8010ea6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ab2:	b2da      	uxtb	r2, r3
 8010ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ab6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aba:	785b      	ldrb	r3, [r3, #1]
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fd ff13 	bl	800e8e8 <disk_initialize>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010acc:	f003 0301 	and.w	r3, r3, #1
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d001      	beq.n	8010ad8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010ad4:	2303      	movs	r3, #3
 8010ad6:	e1e6      	b.n	8010ea6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010ad8:	79fb      	ldrb	r3, [r7, #7]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d007      	beq.n	8010aee <find_volume+0xda>
 8010ade:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010ae2:	f003 0304 	and.w	r3, r3, #4
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d001      	beq.n	8010aee <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010aea:	230a      	movs	r3, #10
 8010aec:	e1db      	b.n	8010ea6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010aee:	2300      	movs	r3, #0
 8010af0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010af2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010af4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010af6:	f7ff ff37 	bl	8010968 <check_fs>
 8010afa:	4603      	mov	r3, r0
 8010afc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010b00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b04:	2b02      	cmp	r3, #2
 8010b06:	d149      	bne.n	8010b9c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b08:	2300      	movs	r3, #0
 8010b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b0c:	e01e      	b.n	8010b4c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b10:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8010b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b16:	011b      	lsls	r3, r3, #4
 8010b18:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8010b1c:	4413      	add	r3, r2
 8010b1e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b22:	3304      	adds	r3, #4
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d006      	beq.n	8010b38 <find_volume+0x124>
 8010b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b2c:	3308      	adds	r3, #8
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fd ff76 	bl	800ea20 <ld_dword>
 8010b34:	4602      	mov	r2, r0
 8010b36:	e000      	b.n	8010b3a <find_volume+0x126>
 8010b38:	2200      	movs	r2, #0
 8010b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	3358      	adds	r3, #88	@ 0x58
 8010b40:	443b      	add	r3, r7
 8010b42:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010b46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b48:	3301      	adds	r3, #1
 8010b4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d9dd      	bls.n	8010b0e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010b52:	2300      	movs	r3, #0
 8010b54:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8010b56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <find_volume+0x14e>
 8010b5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b5e:	3b01      	subs	r3, #1
 8010b60:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010b62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	3358      	adds	r3, #88	@ 0x58
 8010b68:	443b      	add	r3, r7
 8010b6a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010b6e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d005      	beq.n	8010b82 <find_volume+0x16e>
 8010b76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8010b78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010b7a:	f7ff fef5 	bl	8010968 <check_fs>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	e000      	b.n	8010b84 <find_volume+0x170>
 8010b82:	2303      	movs	r3, #3
 8010b84:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010b88:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	d905      	bls.n	8010b9c <find_volume+0x188>
 8010b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b92:	3301      	adds	r3, #1
 8010b94:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	d9e2      	bls.n	8010b62 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010ba0:	2b04      	cmp	r3, #4
 8010ba2:	d101      	bne.n	8010ba8 <find_volume+0x194>
 8010ba4:	2301      	movs	r3, #1
 8010ba6:	e17e      	b.n	8010ea6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010ba8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010bac:	2b01      	cmp	r3, #1
 8010bae:	d901      	bls.n	8010bb4 <find_volume+0x1a0>
 8010bb0:	230d      	movs	r3, #13
 8010bb2:	e178      	b.n	8010ea6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb6:	3338      	adds	r3, #56	@ 0x38
 8010bb8:	330b      	adds	r3, #11
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fd ff18 	bl	800e9f0 <ld_word>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010bc6:	d001      	beq.n	8010bcc <find_volume+0x1b8>
 8010bc8:	230d      	movs	r3, #13
 8010bca:	e16c      	b.n	8010ea6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bce:	3338      	adds	r3, #56	@ 0x38
 8010bd0:	3316      	adds	r3, #22
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fd ff0c 	bl	800e9f0 <ld_word>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d106      	bne.n	8010bf0 <find_volume+0x1dc>
 8010be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010be4:	3338      	adds	r3, #56	@ 0x38
 8010be6:	3324      	adds	r3, #36	@ 0x24
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7fd ff19 	bl	800ea20 <ld_dword>
 8010bee:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8010bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010bf4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bf8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bfe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c02:	789b      	ldrb	r3, [r3, #2]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d005      	beq.n	8010c14 <find_volume+0x200>
 8010c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c0a:	789b      	ldrb	r3, [r3, #2]
 8010c0c:	2b02      	cmp	r3, #2
 8010c0e:	d001      	beq.n	8010c14 <find_volume+0x200>
 8010c10:	230d      	movs	r3, #13
 8010c12:	e148      	b.n	8010ea6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c16:	789b      	ldrb	r3, [r3, #2]
 8010c18:	461a      	mov	r2, r3
 8010c1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c1c:	fb02 f303 	mul.w	r3, r2, r3
 8010c20:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c28:	461a      	mov	r2, r3
 8010c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c30:	895b      	ldrh	r3, [r3, #10]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d008      	beq.n	8010c48 <find_volume+0x234>
 8010c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c38:	895b      	ldrh	r3, [r3, #10]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c3e:	895b      	ldrh	r3, [r3, #10]
 8010c40:	3b01      	subs	r3, #1
 8010c42:	4013      	ands	r3, r2
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d001      	beq.n	8010c4c <find_volume+0x238>
 8010c48:	230d      	movs	r3, #13
 8010c4a:	e12c      	b.n	8010ea6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c4e:	3338      	adds	r3, #56	@ 0x38
 8010c50:	3311      	adds	r3, #17
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7fd fecc 	bl	800e9f0 <ld_word>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	461a      	mov	r2, r3
 8010c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c5e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c62:	891b      	ldrh	r3, [r3, #8]
 8010c64:	f003 030f 	and.w	r3, r3, #15
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <find_volume+0x25e>
 8010c6e:	230d      	movs	r3, #13
 8010c70:	e119      	b.n	8010ea6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c74:	3338      	adds	r3, #56	@ 0x38
 8010c76:	3313      	adds	r3, #19
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fd feb9 	bl	800e9f0 <ld_word>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d106      	bne.n	8010c96 <find_volume+0x282>
 8010c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c8a:	3338      	adds	r3, #56	@ 0x38
 8010c8c:	3320      	adds	r3, #32
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fd fec6 	bl	800ea20 <ld_dword>
 8010c94:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c98:	3338      	adds	r3, #56	@ 0x38
 8010c9a:	330e      	adds	r3, #14
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fd fea7 	bl	800e9f0 <ld_word>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010ca6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d101      	bne.n	8010cb0 <find_volume+0x29c>
 8010cac:	230d      	movs	r3, #13
 8010cae:	e0fa      	b.n	8010ea6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010cb0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cb4:	4413      	add	r3, r2
 8010cb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cb8:	8912      	ldrh	r2, [r2, #8]
 8010cba:	0912      	lsrs	r2, r2, #4
 8010cbc:	b292      	uxth	r2, r2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010cc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d204      	bcs.n	8010cd4 <find_volume+0x2c0>
 8010cca:	230d      	movs	r3, #13
 8010ccc:	e0eb      	b.n	8010ea6 <find_volume+0x492>
 8010cce:	bf00      	nop
 8010cd0:	20005b94 	.word	0x20005b94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010cd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd8:	1ad3      	subs	r3, r2, r3
 8010cda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010cdc:	8952      	ldrh	r2, [r2, #10]
 8010cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ce2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <find_volume+0x2da>
 8010cea:	230d      	movs	r3, #13
 8010cec:	e0db      	b.n	8010ea6 <find_volume+0x492>
		fmt = FS_FAT32;
 8010cee:	2303      	movs	r3, #3
 8010cf0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cf6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8010cfa:	4293      	cmp	r3, r2
 8010cfc:	d802      	bhi.n	8010d04 <find_volume+0x2f0>
 8010cfe:	2302      	movs	r3, #2
 8010d00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d06:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	d802      	bhi.n	8010d14 <find_volume+0x300>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d16:	1c9a      	adds	r2, r3, #2
 8010d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8010d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010d20:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010d22:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8010d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d26:	441a      	add	r2, r3
 8010d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d2a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8010d2c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d30:	441a      	add	r2, r3
 8010d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d34:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8010d36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d3a:	2b03      	cmp	r3, #3
 8010d3c:	d11e      	bne.n	8010d7c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d40:	3338      	adds	r3, #56	@ 0x38
 8010d42:	332a      	adds	r3, #42	@ 0x2a
 8010d44:	4618      	mov	r0, r3
 8010d46:	f7fd fe53 	bl	800e9f0 <ld_word>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d001      	beq.n	8010d54 <find_volume+0x340>
 8010d50:	230d      	movs	r3, #13
 8010d52:	e0a8      	b.n	8010ea6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d56:	891b      	ldrh	r3, [r3, #8]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d001      	beq.n	8010d60 <find_volume+0x34c>
 8010d5c:	230d      	movs	r3, #13
 8010d5e:	e0a2      	b.n	8010ea6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d62:	3338      	adds	r3, #56	@ 0x38
 8010d64:	332c      	adds	r3, #44	@ 0x2c
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7fd fe5a 	bl	800ea20 <ld_dword>
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d70:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d74:	69db      	ldr	r3, [r3, #28]
 8010d76:	009b      	lsls	r3, r3, #2
 8010d78:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d7a:	e01f      	b.n	8010dbc <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d7e:	891b      	ldrh	r3, [r3, #8]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d101      	bne.n	8010d88 <find_volume+0x374>
 8010d84:	230d      	movs	r3, #13
 8010d86:	e08e      	b.n	8010ea6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d8a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d8e:	441a      	add	r2, r3
 8010d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d92:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010d94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010d98:	2b02      	cmp	r3, #2
 8010d9a:	d103      	bne.n	8010da4 <find_volume+0x390>
 8010d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d9e:	69db      	ldr	r3, [r3, #28]
 8010da0:	005b      	lsls	r3, r3, #1
 8010da2:	e00a      	b.n	8010dba <find_volume+0x3a6>
 8010da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010da6:	69da      	ldr	r2, [r3, #28]
 8010da8:	4613      	mov	r3, r2
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	085a      	lsrs	r2, r3, #1
 8010db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010db2:	69db      	ldr	r3, [r3, #28]
 8010db4:	f003 0301 	and.w	r3, r3, #1
 8010db8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010dba:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dbe:	6a1a      	ldr	r2, [r3, #32]
 8010dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010dc2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8010dc6:	0a5b      	lsrs	r3, r3, #9
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d201      	bcs.n	8010dd0 <find_volume+0x3bc>
 8010dcc:	230d      	movs	r3, #13
 8010dce:	e06a      	b.n	8010ea6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8010dd6:	619a      	str	r2, [r3, #24]
 8010dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dda:	699a      	ldr	r2, [r3, #24]
 8010ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dde:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010de2:	2280      	movs	r2, #128	@ 0x80
 8010de4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010de6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8010dea:	2b03      	cmp	r3, #3
 8010dec:	d149      	bne.n	8010e82 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010df0:	3338      	adds	r3, #56	@ 0x38
 8010df2:	3330      	adds	r3, #48	@ 0x30
 8010df4:	4618      	mov	r0, r3
 8010df6:	f7fd fdfb 	bl	800e9f0 <ld_word>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d140      	bne.n	8010e82 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e02:	3301      	adds	r3, #1
 8010e04:	4619      	mov	r1, r3
 8010e06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010e08:	f7fe f8d4 	bl	800efb4 <move_window>
 8010e0c:	4603      	mov	r3, r0
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d137      	bne.n	8010e82 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8010e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e14:	2200      	movs	r2, #0
 8010e16:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e1a:	3338      	adds	r3, #56	@ 0x38
 8010e1c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fd fde5 	bl	800e9f0 <ld_word>
 8010e26:	4603      	mov	r3, r0
 8010e28:	461a      	mov	r2, r3
 8010e2a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d127      	bne.n	8010e82 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e34:	3338      	adds	r3, #56	@ 0x38
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7fd fdf2 	bl	800ea20 <ld_dword>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8010eb0 <find_volume+0x49c>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d11e      	bne.n	8010e82 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e46:	3338      	adds	r3, #56	@ 0x38
 8010e48:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f7fd fde7 	bl	800ea20 <ld_dword>
 8010e52:	4603      	mov	r3, r0
 8010e54:	4a17      	ldr	r2, [pc, #92]	@ (8010eb4 <find_volume+0x4a0>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d113      	bne.n	8010e82 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5c:	3338      	adds	r3, #56	@ 0x38
 8010e5e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fd fddc 	bl	800ea20 <ld_dword>
 8010e68:	4602      	mov	r2, r0
 8010e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e6c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e70:	3338      	adds	r3, #56	@ 0x38
 8010e72:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fd fdd2 	bl	800ea20 <ld_dword>
 8010e7c:	4602      	mov	r2, r0
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e80:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e84:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8010e88:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010eb8 <find_volume+0x4a4>)
 8010e8c:	881b      	ldrh	r3, [r3, #0]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	b29a      	uxth	r2, r3
 8010e92:	4b09      	ldr	r3, [pc, #36]	@ (8010eb8 <find_volume+0x4a4>)
 8010e94:	801a      	strh	r2, [r3, #0]
 8010e96:	4b08      	ldr	r3, [pc, #32]	@ (8010eb8 <find_volume+0x4a4>)
 8010e98:	881a      	ldrh	r2, [r3, #0]
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010e9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8010ea0:	f7fe f820 	bl	800eee4 <clear_lock>
#endif
	return FR_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3758      	adds	r7, #88	@ 0x58
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}
 8010eae:	bf00      	nop
 8010eb0:	41615252 	.word	0x41615252
 8010eb4:	61417272 	.word	0x61417272
 8010eb8:	20005b98 	.word	0x20005b98

08010ebc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b084      	sub	sp, #16
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
 8010ec4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010ec6:	2309      	movs	r3, #9
 8010ec8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d02e      	beq.n	8010f2e <validate+0x72>
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d02a      	beq.n	8010f2e <validate+0x72>
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	781b      	ldrb	r3, [r3, #0]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d025      	beq.n	8010f2e <validate+0x72>
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	889a      	ldrh	r2, [r3, #4]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	88db      	ldrh	r3, [r3, #6]
 8010eec:	429a      	cmp	r2, r3
 8010eee:	d11e      	bne.n	8010f2e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fd fe7b 	bl	800ebf0 <lock_fs>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d014      	beq.n	8010f2a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	785b      	ldrb	r3, [r3, #1]
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fd fcd4 	bl	800e8b4 <disk_status>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	f003 0301 	and.w	r3, r3, #1
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d102      	bne.n	8010f1c <validate+0x60>
				res = FR_OK;
 8010f16:	2300      	movs	r3, #0
 8010f18:	73fb      	strb	r3, [r7, #15]
 8010f1a:	e008      	b.n	8010f2e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2100      	movs	r1, #0
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7fd fe7a 	bl	800ec1c <unlock_fs>
 8010f28:	e001      	b.n	8010f2e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010f2a:	230f      	movs	r3, #15
 8010f2c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010f2e:	7bfb      	ldrb	r3, [r7, #15]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d102      	bne.n	8010f3a <validate+0x7e>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	e000      	b.n	8010f3c <validate+0x80>
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	683a      	ldr	r2, [r7, #0]
 8010f3e:	6013      	str	r3, [r2, #0]
	return res;
 8010f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3710      	adds	r7, #16
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
	...

08010f4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	4613      	mov	r3, r2
 8010f58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010f5e:	f107 0310 	add.w	r3, r7, #16
 8010f62:	4618      	mov	r0, r3
 8010f64:	f7ff fcbb 	bl	80108de <get_ldnumber>
 8010f68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	da01      	bge.n	8010f74 <f_mount+0x28>
 8010f70:	230b      	movs	r3, #11
 8010f72:	e048      	b.n	8011006 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010f74:	4a26      	ldr	r2, [pc, #152]	@ (8011010 <f_mount+0xc4>)
 8010f76:	69fb      	ldr	r3, [r7, #28]
 8010f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010f7e:	69bb      	ldr	r3, [r7, #24]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00f      	beq.n	8010fa4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010f84:	69b8      	ldr	r0, [r7, #24]
 8010f86:	f7fd ffad 	bl	800eee4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f001 f9b0 	bl	80122f4 <ff_del_syncobj>
 8010f94:	4603      	mov	r3, r0
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d101      	bne.n	8010f9e <f_mount+0x52>
 8010f9a:	2302      	movs	r3, #2
 8010f9c:	e033      	b.n	8011006 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010f9e:	69bb      	ldr	r3, [r7, #24]
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d00f      	beq.n	8010fca <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	2200      	movs	r2, #0
 8010fae:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010fb0:	69fb      	ldr	r3, [r7, #28]
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	3310      	adds	r3, #16
 8010fb8:	4619      	mov	r1, r3
 8010fba:	4610      	mov	r0, r2
 8010fbc:	f001 f97a 	bl	80122b4 <ff_cre_syncobj>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <f_mount+0x7e>
 8010fc6:	2302      	movs	r3, #2
 8010fc8:	e01d      	b.n	8011006 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010fca:	68fa      	ldr	r2, [r7, #12]
 8010fcc:	4910      	ldr	r1, [pc, #64]	@ (8011010 <f_mount+0xc4>)
 8010fce:	69fb      	ldr	r3, [r7, #28]
 8010fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <f_mount+0x94>
 8010fda:	79fb      	ldrb	r3, [r7, #7]
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d001      	beq.n	8010fe4 <f_mount+0x98>
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e010      	b.n	8011006 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010fe4:	f107 010c 	add.w	r1, r7, #12
 8010fe8:	f107 0308 	add.w	r3, r7, #8
 8010fec:	2200      	movs	r2, #0
 8010fee:	4618      	mov	r0, r3
 8010ff0:	f7ff fd10 	bl	8010a14 <find_volume>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	7dfa      	ldrb	r2, [r7, #23]
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7fd fe0c 	bl	800ec1c <unlock_fs>
 8011004:	7dfb      	ldrb	r3, [r7, #23]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3720      	adds	r7, #32
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20005b94 	.word	0x20005b94

08011014 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 801101a:	af00      	add	r7, sp, #0
 801101c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011020:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011024:	6018      	str	r0, [r3, #0]
 8011026:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801102a:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 801102e:	6019      	str	r1, [r3, #0]
 8011030:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011034:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011038:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801103a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801103e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d101      	bne.n	801104c <f_open+0x38>
 8011048:	2309      	movs	r3, #9
 801104a:	e299      	b.n	8011580 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801104c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011050:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011054:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 8011058:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801105c:	7812      	ldrb	r2, [r2, #0]
 801105e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8011062:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8011064:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011068:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801106c:	781a      	ldrb	r2, [r3, #0]
 801106e:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8011072:	f107 0308 	add.w	r3, r7, #8
 8011076:	4618      	mov	r0, r3
 8011078:	f7ff fccc 	bl	8010a14 <find_volume>
 801107c:	4603      	mov	r3, r0
 801107e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 8011082:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011086:	2b00      	cmp	r3, #0
 8011088:	f040 8265 	bne.w	8011556 <f_open+0x542>
		dj.obj.fs = fs;
 801108c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011090:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 8011094:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011098:	f107 0214 	add.w	r2, r7, #20
 801109c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 801109e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80110a2:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80110ac:	4611      	mov	r1, r2
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff fba4 	bl	80107fc <follow_path>
 80110b4:	4603      	mov	r3, r0
 80110b6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80110ba:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d11c      	bne.n	80110fc <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80110c2:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 80110c6:	b25b      	sxtb	r3, r3
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	da03      	bge.n	80110d4 <f_open+0xc0>
				res = FR_INVALID_NAME;
 80110cc:	2306      	movs	r3, #6
 80110ce:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 80110d2:	e013      	b.n	80110fc <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80110d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80110d8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80110dc:	781b      	ldrb	r3, [r3, #0]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	bf8c      	ite	hi
 80110e2:	2301      	movhi	r3, #1
 80110e4:	2300      	movls	r3, #0
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	461a      	mov	r2, r3
 80110ea:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 80110ee:	4611      	mov	r1, r2
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fd fdaf 	bl	800ec54 <chk_lock>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80110fc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011100:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011104:	781b      	ldrb	r3, [r3, #0]
 8011106:	f003 031c 	and.w	r3, r3, #28
 801110a:	2b00      	cmp	r3, #0
 801110c:	f000 80a7 	beq.w	801125e <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 8011110:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011114:	2b00      	cmp	r3, #0
 8011116:	d01f      	beq.n	8011158 <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011118:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801111c:	2b04      	cmp	r3, #4
 801111e:	d10e      	bne.n	801113e <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011120:	f7fd fdf4 	bl	800ed0c <enq_lock>
 8011124:	4603      	mov	r3, r0
 8011126:	2b00      	cmp	r3, #0
 8011128:	d006      	beq.n	8011138 <f_open+0x124>
 801112a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801112e:	4618      	mov	r0, r3
 8011130:	f7fe ffd6 	bl	80100e0 <dir_register>
 8011134:	4603      	mov	r3, r0
 8011136:	e000      	b.n	801113a <f_open+0x126>
 8011138:	2312      	movs	r3, #18
 801113a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801113e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011142:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011146:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 801114a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 801114e:	7812      	ldrb	r2, [r2, #0]
 8011150:	f042 0208 	orr.w	r2, r2, #8
 8011154:	701a      	strb	r2, [r3, #0]
 8011156:	e015      	b.n	8011184 <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011158:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801115c:	f003 0311 	and.w	r3, r3, #17
 8011160:	2b00      	cmp	r3, #0
 8011162:	d003      	beq.n	801116c <f_open+0x158>
					res = FR_DENIED;
 8011164:	2307      	movs	r3, #7
 8011166:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801116a:	e00b      	b.n	8011184 <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801116c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011170:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	f003 0304 	and.w	r3, r3, #4
 801117a:	2b00      	cmp	r3, #0
 801117c:	d002      	beq.n	8011184 <f_open+0x170>
 801117e:	2308      	movs	r3, #8
 8011180:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011184:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011188:	2b00      	cmp	r3, #0
 801118a:	f040 8088 	bne.w	801129e <f_open+0x28a>
 801118e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011192:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011196:	781b      	ldrb	r3, [r3, #0]
 8011198:	f003 0308 	and.w	r3, r3, #8
 801119c:	2b00      	cmp	r3, #0
 801119e:	d07e      	beq.n	801129e <f_open+0x28a>
				dw = GET_FATTIME();
 80111a0:	f7fc fe44 	bl	800de2c <get_fattime>
 80111a4:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80111a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80111ac:	330e      	adds	r3, #14
 80111ae:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fd fc72 	bl	800ea9c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80111b8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80111bc:	3316      	adds	r3, #22
 80111be:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fd fc6a 	bl	800ea9c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80111c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80111cc:	330b      	adds	r3, #11
 80111ce:	2220      	movs	r2, #32
 80111d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80111d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80111d6:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80111da:	4611      	mov	r1, r2
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fe fbed 	bl	800f9bc <ld_clust>
 80111e2:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80111e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80111ea:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 80111ee:	2200      	movs	r2, #0
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fe fc02 	bl	800f9fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80111f6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 80111fa:	331c      	adds	r3, #28
 80111fc:	2100      	movs	r1, #0
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fd fc4c 	bl	800ea9c <st_dword>
					fs->wflag = 1;
 8011204:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011208:	2201      	movs	r2, #1
 801120a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801120c:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 8011210:	2b00      	cmp	r3, #0
 8011212:	d044      	beq.n	801129e <f_open+0x28a>
						dw = fs->winsect;
 8011214:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011218:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801121a:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801121e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011222:	2200      	movs	r2, #0
 8011224:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 8011228:	4618      	mov	r0, r3
 801122a:	f7fe f90f 	bl	800f44c <remove_chain>
 801122e:	4603      	mov	r3, r0
 8011230:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 8011234:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011238:	2b00      	cmp	r3, #0
 801123a:	d130      	bne.n	801129e <f_open+0x28a>
							res = move_window(fs, dw);
 801123c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011240:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 8011244:	4618      	mov	r0, r3
 8011246:	f7fd feb5 	bl	800efb4 <move_window>
 801124a:	4603      	mov	r3, r0
 801124c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011250:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011254:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8011258:	3a01      	subs	r2, #1
 801125a:	615a      	str	r2, [r3, #20]
 801125c:	e01f      	b.n	801129e <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801125e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8011262:	2b00      	cmp	r3, #0
 8011264:	d11b      	bne.n	801129e <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011266:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 801126a:	f003 0310 	and.w	r3, r3, #16
 801126e:	2b00      	cmp	r3, #0
 8011270:	d003      	beq.n	801127a <f_open+0x266>
					res = FR_NO_FILE;
 8011272:	2304      	movs	r3, #4
 8011274:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 8011278:	e011      	b.n	801129e <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801127a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801127e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	f003 0302 	and.w	r3, r3, #2
 8011288:	2b00      	cmp	r3, #0
 801128a:	d008      	beq.n	801129e <f_open+0x28a>
 801128c:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8011290:	f003 0301 	and.w	r3, r3, #1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d002      	beq.n	801129e <f_open+0x28a>
						res = FR_DENIED;
 8011298:	2307      	movs	r3, #7
 801129a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801129e:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d148      	bne.n	8011338 <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80112a6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112aa:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	f003 0308 	and.w	r3, r3, #8
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00b      	beq.n	80112d0 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 80112b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112bc:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112c0:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80112c4:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80112c8:	7812      	ldrb	r2, [r2, #0]
 80112ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80112ce:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80112d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80112d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80112d6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112da:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80112e2:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 80112e6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112ea:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80112f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80112f6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b01      	cmp	r3, #1
 80112fe:	bf8c      	ite	hi
 8011300:	2301      	movhi	r3, #1
 8011302:	2300      	movls	r3, #0
 8011304:	b2db      	uxtb	r3, r3
 8011306:	461a      	mov	r2, r3
 8011308:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 801130c:	4611      	mov	r1, r2
 801130e:	4618      	mov	r0, r3
 8011310:	f7fd fd1e 	bl	800ed50 <inc_lock>
 8011314:	4602      	mov	r2, r0
 8011316:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801131a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011322:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011326:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d102      	bne.n	8011338 <f_open+0x324>
 8011332:	2302      	movs	r3, #2
 8011334:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011338:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801133c:	2b00      	cmp	r3, #0
 801133e:	f040 810a 	bne.w	8011556 <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011342:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011346:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 801134a:	4611      	mov	r1, r2
 801134c:	4618      	mov	r0, r3
 801134e:	f7fe fb35 	bl	800f9bc <ld_clust>
 8011352:	4602      	mov	r2, r0
 8011354:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011358:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011360:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 8011364:	331c      	adds	r3, #28
 8011366:	4618      	mov	r0, r3
 8011368:	f7fd fb5a 	bl	800ea20 <ld_dword>
 801136c:	4602      	mov	r2, r0
 801136e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011372:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801137a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801137e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2200      	movs	r2, #0
 8011386:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011388:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 801138c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011390:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011398:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 801139c:	88da      	ldrh	r2, [r3, #6]
 801139e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113a2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80113aa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113ae:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 80113b8:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 80113bc:	7812      	ldrb	r2, [r2, #0]
 80113be:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80113c0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113c4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2200      	movs	r2, #0
 80113cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80113ce:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113d2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2200      	movs	r2, #0
 80113da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80113dc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113e0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2200      	movs	r2, #0
 80113e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80113ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80113ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3330      	adds	r3, #48	@ 0x30
 80113f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113fa:	2100      	movs	r1, #0
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fd fb9a 	bl	800eb36 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011402:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011406:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	f003 0320 	and.w	r3, r3, #32
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80a0 	beq.w	8011556 <f_open+0x542>
 8011416:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801141a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	2b00      	cmp	r3, #0
 8011424:	f000 8097 	beq.w	8011556 <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011428:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801142c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	68da      	ldr	r2, [r3, #12]
 8011434:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011438:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011440:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011444:	895b      	ldrh	r3, [r3, #10]
 8011446:	025b      	lsls	r3, r3, #9
 8011448:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801144c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011450:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	689b      	ldr	r3, [r3, #8]
 8011458:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801145c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011460:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	68db      	ldr	r3, [r3, #12]
 8011468:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 801146c:	e021      	b.n	80114b2 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 801146e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011472:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 801147c:	4618      	mov	r0, r3
 801147e:	f7fd fe54 	bl	800f12a <get_fat>
 8011482:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8011486:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 801148a:	2b01      	cmp	r3, #1
 801148c:	d802      	bhi.n	8011494 <f_open+0x480>
 801148e:	2302      	movs	r3, #2
 8011490:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011494:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 8011498:	f1b3 3fff 	cmp.w	r3, #4294967295
 801149c:	d102      	bne.n	80114a4 <f_open+0x490>
 801149e:	2301      	movs	r3, #1
 80114a0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80114a4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80114a8:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80114b2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d105      	bne.n	80114c6 <f_open+0x4b2>
 80114ba:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80114be:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d8d3      	bhi.n	801146e <f_open+0x45a>
				}
				fp->clust = clst;
 80114c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 80114ca:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80114d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80114d6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d13b      	bne.n	8011556 <f_open+0x542>
 80114de:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 80114e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d035      	beq.n	8011556 <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80114ea:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 80114ee:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fd fdfa 	bl	800f0ec <clust2sect>
 80114f8:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 80114fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011500:	2b00      	cmp	r3, #0
 8011502:	d103      	bne.n	801150c <f_open+0x4f8>
						res = FR_INT_ERR;
 8011504:	2302      	movs	r3, #2
 8011506:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 801150a:	e024      	b.n	8011556 <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801150c:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8011510:	0a5a      	lsrs	r2, r3, #9
 8011512:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 8011516:	441a      	add	r2, r3
 8011518:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801151c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011524:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011528:	7858      	ldrb	r0, [r3, #1]
 801152a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801152e:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011538:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 801153c:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	6a1a      	ldr	r2, [r3, #32]
 8011544:	2301      	movs	r3, #1
 8011546:	f7fd f9f5 	bl	800e934 <disk_read>
 801154a:	4603      	mov	r3, r0
 801154c:	2b00      	cmp	r3, #0
 801154e:	d002      	beq.n	8011556 <f_open+0x542>
 8011550:	2301      	movs	r3, #1
 8011552:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011556:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 801155a:	2b00      	cmp	r3, #0
 801155c:	d006      	beq.n	801156c <f_open+0x558>
 801155e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 8011562:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	2200      	movs	r2, #0
 801156a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801156c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8011570:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 8011574:	4611      	mov	r1, r2
 8011576:	4618      	mov	r0, r3
 8011578:	f7fd fb50 	bl	800ec1c <unlock_fs>
 801157c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 8011580:	4618      	mov	r0, r3
 8011582:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b08e      	sub	sp, #56	@ 0x38
 801158e:	af00      	add	r7, sp, #0
 8011590:	60f8      	str	r0, [r7, #12]
 8011592:	60b9      	str	r1, [r7, #8]
 8011594:	607a      	str	r2, [r7, #4]
 8011596:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	2200      	movs	r2, #0
 80115a0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	f107 0214 	add.w	r2, r7, #20
 80115a8:	4611      	mov	r1, r2
 80115aa:	4618      	mov	r0, r3
 80115ac:	f7ff fc86 	bl	8010ebc <validate>
 80115b0:	4603      	mov	r3, r0
 80115b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80115b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d107      	bne.n	80115ce <f_read+0x44>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	7d5b      	ldrb	r3, [r3, #21]
 80115c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80115c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d009      	beq.n	80115e2 <f_read+0x58>
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80115d4:	4611      	mov	r1, r2
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7fd fb20 	bl	800ec1c <unlock_fs>
 80115dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80115e0:	e13d      	b.n	801185e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	7d1b      	ldrb	r3, [r3, #20]
 80115e6:	f003 0301 	and.w	r3, r3, #1
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d106      	bne.n	80115fc <f_read+0x72>
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	2107      	movs	r1, #7
 80115f2:	4618      	mov	r0, r3
 80115f4:	f7fd fb12 	bl	800ec1c <unlock_fs>
 80115f8:	2307      	movs	r3, #7
 80115fa:	e130      	b.n	801185e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	68da      	ldr	r2, [r3, #12]
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	699b      	ldr	r3, [r3, #24]
 8011604:	1ad3      	subs	r3, r2, r3
 8011606:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	429a      	cmp	r2, r3
 801160e:	f240 811c 	bls.w	801184a <f_read+0x2c0>
 8011612:	6a3b      	ldr	r3, [r7, #32]
 8011614:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011616:	e118      	b.n	801184a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	699b      	ldr	r3, [r3, #24]
 801161c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011620:	2b00      	cmp	r3, #0
 8011622:	f040 80e4 	bne.w	80117ee <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	699b      	ldr	r3, [r3, #24]
 801162a:	0a5b      	lsrs	r3, r3, #9
 801162c:	697a      	ldr	r2, [r7, #20]
 801162e:	8952      	ldrh	r2, [r2, #10]
 8011630:	3a01      	subs	r2, #1
 8011632:	4013      	ands	r3, r2
 8011634:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d139      	bne.n	80116b0 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	699b      	ldr	r3, [r3, #24]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d103      	bne.n	801164c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	633b      	str	r3, [r7, #48]	@ 0x30
 801164a:	e013      	b.n	8011674 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011650:	2b00      	cmp	r3, #0
 8011652:	d007      	beq.n	8011664 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	699b      	ldr	r3, [r3, #24]
 8011658:	4619      	mov	r1, r3
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7fd fff3 	bl	800f646 <clmt_clust>
 8011660:	6338      	str	r0, [r7, #48]	@ 0x30
 8011662:	e007      	b.n	8011674 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011664:	68fa      	ldr	r2, [r7, #12]
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	69db      	ldr	r3, [r3, #28]
 801166a:	4619      	mov	r1, r3
 801166c:	4610      	mov	r0, r2
 801166e:	f7fd fd5c 	bl	800f12a <get_fat>
 8011672:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011676:	2b01      	cmp	r3, #1
 8011678:	d809      	bhi.n	801168e <f_read+0x104>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2202      	movs	r2, #2
 801167e:	755a      	strb	r2, [r3, #21]
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2102      	movs	r1, #2
 8011684:	4618      	mov	r0, r3
 8011686:	f7fd fac9 	bl	800ec1c <unlock_fs>
 801168a:	2302      	movs	r3, #2
 801168c:	e0e7      	b.n	801185e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801168e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011694:	d109      	bne.n	80116aa <f_read+0x120>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	2201      	movs	r2, #1
 801169a:	755a      	strb	r2, [r3, #21]
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2101      	movs	r1, #1
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fd fabb 	bl	800ec1c <unlock_fs>
 80116a6:	2301      	movs	r3, #1
 80116a8:	e0d9      	b.n	801185e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80116ae:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80116b0:	697a      	ldr	r2, [r7, #20]
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	69db      	ldr	r3, [r3, #28]
 80116b6:	4619      	mov	r1, r3
 80116b8:	4610      	mov	r0, r2
 80116ba:	f7fd fd17 	bl	800f0ec <clust2sect>
 80116be:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d109      	bne.n	80116da <f_read+0x150>
 80116c6:	68fb      	ldr	r3, [r7, #12]
 80116c8:	2202      	movs	r2, #2
 80116ca:	755a      	strb	r2, [r3, #21]
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	2102      	movs	r1, #2
 80116d0:	4618      	mov	r0, r3
 80116d2:	f7fd faa3 	bl	800ec1c <unlock_fs>
 80116d6:	2302      	movs	r3, #2
 80116d8:	e0c1      	b.n	801185e <f_read+0x2d4>
			sect += csect;
 80116da:	69ba      	ldr	r2, [r7, #24]
 80116dc:	69fb      	ldr	r3, [r7, #28]
 80116de:	4413      	add	r3, r2
 80116e0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	0a5b      	lsrs	r3, r3, #9
 80116e6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80116e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d03e      	beq.n	801176c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80116ee:	69fa      	ldr	r2, [r7, #28]
 80116f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116f2:	4413      	add	r3, r2
 80116f4:	697a      	ldr	r2, [r7, #20]
 80116f6:	8952      	ldrh	r2, [r2, #10]
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d905      	bls.n	8011708 <f_read+0x17e>
					cc = fs->csize - csect;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	461a      	mov	r2, r3
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	7858      	ldrb	r0, [r3, #1]
 801170c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801170e:	69ba      	ldr	r2, [r7, #24]
 8011710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011712:	f7fd f90f 	bl	800e934 <disk_read>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d009      	beq.n	8011730 <f_read+0x1a6>
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	2201      	movs	r2, #1
 8011720:	755a      	strb	r2, [r3, #21]
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	2101      	movs	r1, #1
 8011726:	4618      	mov	r0, r3
 8011728:	f7fd fa78 	bl	800ec1c <unlock_fs>
 801172c:	2301      	movs	r3, #1
 801172e:	e096      	b.n	801185e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	7d1b      	ldrb	r3, [r3, #20]
 8011734:	b25b      	sxtb	r3, r3
 8011736:	2b00      	cmp	r3, #0
 8011738:	da14      	bge.n	8011764 <f_read+0x1da>
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	6a1a      	ldr	r2, [r3, #32]
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011744:	429a      	cmp	r2, r3
 8011746:	d90d      	bls.n	8011764 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	6a1a      	ldr	r2, [r3, #32]
 801174c:	69bb      	ldr	r3, [r7, #24]
 801174e:	1ad3      	subs	r3, r2, r3
 8011750:	025b      	lsls	r3, r3, #9
 8011752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011754:	18d0      	adds	r0, r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	3330      	adds	r3, #48	@ 0x30
 801175a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801175e:	4619      	mov	r1, r3
 8011760:	f7fd f9c8 	bl	800eaf4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011766:	025b      	lsls	r3, r3, #9
 8011768:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 801176a:	e05a      	b.n	8011822 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6a1b      	ldr	r3, [r3, #32]
 8011770:	69ba      	ldr	r2, [r7, #24]
 8011772:	429a      	cmp	r2, r3
 8011774:	d038      	beq.n	80117e8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	7d1b      	ldrb	r3, [r3, #20]
 801177a:	b25b      	sxtb	r3, r3
 801177c:	2b00      	cmp	r3, #0
 801177e:	da1d      	bge.n	80117bc <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	7858      	ldrb	r0, [r3, #1]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	6a1a      	ldr	r2, [r3, #32]
 801178e:	2301      	movs	r3, #1
 8011790:	f7fd f8f0 	bl	800e974 <disk_write>
 8011794:	4603      	mov	r3, r0
 8011796:	2b00      	cmp	r3, #0
 8011798:	d009      	beq.n	80117ae <f_read+0x224>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2201      	movs	r2, #1
 801179e:	755a      	strb	r2, [r3, #21]
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	2101      	movs	r1, #1
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7fd fa39 	bl	800ec1c <unlock_fs>
 80117aa:	2301      	movs	r3, #1
 80117ac:	e057      	b.n	801185e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	7d1b      	ldrb	r3, [r3, #20]
 80117b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117b6:	b2da      	uxtb	r2, r3
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	7858      	ldrb	r0, [r3, #1]
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80117c6:	2301      	movs	r3, #1
 80117c8:	69ba      	ldr	r2, [r7, #24]
 80117ca:	f7fd f8b3 	bl	800e934 <disk_read>
 80117ce:	4603      	mov	r3, r0
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d009      	beq.n	80117e8 <f_read+0x25e>
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2201      	movs	r2, #1
 80117d8:	755a      	strb	r2, [r3, #21]
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	2101      	movs	r1, #1
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fd fa1c 	bl	800ec1c <unlock_fs>
 80117e4:	2301      	movs	r3, #1
 80117e6:	e03a      	b.n	801185e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	69ba      	ldr	r2, [r7, #24]
 80117ec:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	699b      	ldr	r3, [r3, #24]
 80117f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117f6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80117fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80117fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	429a      	cmp	r2, r3
 8011802:	d901      	bls.n	8011808 <f_read+0x27e>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	699b      	ldr	r3, [r3, #24]
 8011812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011816:	4413      	add	r3, r2
 8011818:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801181a:	4619      	mov	r1, r3
 801181c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801181e:	f7fd f969 	bl	800eaf4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011826:	4413      	add	r3, r2
 8011828:	627b      	str	r3, [r7, #36]	@ 0x24
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	699a      	ldr	r2, [r3, #24]
 801182e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011830:	441a      	add	r2, r3
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	619a      	str	r2, [r3, #24]
 8011836:	683b      	ldr	r3, [r7, #0]
 8011838:	681a      	ldr	r2, [r3, #0]
 801183a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801183c:	441a      	add	r2, r3
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011846:	1ad3      	subs	r3, r2, r3
 8011848:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2b00      	cmp	r3, #0
 801184e:	f47f aee3 	bne.w	8011618 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	2100      	movs	r1, #0
 8011856:	4618      	mov	r0, r3
 8011858:	f7fd f9e0 	bl	800ec1c <unlock_fs>
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3738      	adds	r7, #56	@ 0x38
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b08c      	sub	sp, #48	@ 0x30
 801186a:	af00      	add	r7, sp, #0
 801186c:	60f8      	str	r0, [r7, #12]
 801186e:	60b9      	str	r1, [r7, #8]
 8011870:	607a      	str	r2, [r7, #4]
 8011872:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	2200      	movs	r2, #0
 801187c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	f107 0210 	add.w	r2, r7, #16
 8011884:	4611      	mov	r1, r2
 8011886:	4618      	mov	r0, r3
 8011888:	f7ff fb18 	bl	8010ebc <validate>
 801188c:	4603      	mov	r3, r0
 801188e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011892:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011896:	2b00      	cmp	r3, #0
 8011898:	d107      	bne.n	80118aa <f_write+0x44>
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	7d5b      	ldrb	r3, [r3, #21]
 801189e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80118a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d009      	beq.n	80118be <f_write+0x58>
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80118b0:	4611      	mov	r1, r2
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7fd f9b2 	bl	800ec1c <unlock_fs>
 80118b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118bc:	e173      	b.n	8011ba6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	7d1b      	ldrb	r3, [r3, #20]
 80118c2:	f003 0302 	and.w	r3, r3, #2
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d106      	bne.n	80118d8 <f_write+0x72>
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	2107      	movs	r1, #7
 80118ce:	4618      	mov	r0, r3
 80118d0:	f7fd f9a4 	bl	800ec1c <unlock_fs>
 80118d4:	2307      	movs	r3, #7
 80118d6:	e166      	b.n	8011ba6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	699a      	ldr	r2, [r3, #24]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	441a      	add	r2, r3
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	699b      	ldr	r3, [r3, #24]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	f080 814b 	bcs.w	8011b80 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	699b      	ldr	r3, [r3, #24]
 80118ee:	43db      	mvns	r3, r3
 80118f0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80118f2:	e145      	b.n	8011b80 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	699b      	ldr	r3, [r3, #24]
 80118f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	f040 8101 	bne.w	8011b04 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	699b      	ldr	r3, [r3, #24]
 8011906:	0a5b      	lsrs	r3, r3, #9
 8011908:	693a      	ldr	r2, [r7, #16]
 801190a:	8952      	ldrh	r2, [r2, #10]
 801190c:	3a01      	subs	r2, #1
 801190e:	4013      	ands	r3, r2
 8011910:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d14d      	bne.n	80119b4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	699b      	ldr	r3, [r3, #24]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d10c      	bne.n	801193a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011928:	2b00      	cmp	r3, #0
 801192a:	d11a      	bne.n	8011962 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	2100      	movs	r1, #0
 8011930:	4618      	mov	r0, r3
 8011932:	f7fd fdf0 	bl	800f516 <create_chain>
 8011936:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011938:	e013      	b.n	8011962 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d007      	beq.n	8011952 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	699b      	ldr	r3, [r3, #24]
 8011946:	4619      	mov	r1, r3
 8011948:	68f8      	ldr	r0, [r7, #12]
 801194a:	f7fd fe7c 	bl	800f646 <clmt_clust>
 801194e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8011950:	e007      	b.n	8011962 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011952:	68fa      	ldr	r2, [r7, #12]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	69db      	ldr	r3, [r3, #28]
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f7fd fddb 	bl	800f516 <create_chain>
 8011960:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011964:	2b00      	cmp	r3, #0
 8011966:	f000 8110 	beq.w	8011b8a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801196a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801196c:	2b01      	cmp	r3, #1
 801196e:	d109      	bne.n	8011984 <f_write+0x11e>
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2202      	movs	r2, #2
 8011974:	755a      	strb	r2, [r3, #21]
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2102      	movs	r1, #2
 801197a:	4618      	mov	r0, r3
 801197c:	f7fd f94e 	bl	800ec1c <unlock_fs>
 8011980:	2302      	movs	r3, #2
 8011982:	e110      	b.n	8011ba6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011986:	f1b3 3fff 	cmp.w	r3, #4294967295
 801198a:	d109      	bne.n	80119a0 <f_write+0x13a>
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2201      	movs	r2, #1
 8011990:	755a      	strb	r2, [r3, #21]
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2101      	movs	r1, #1
 8011996:	4618      	mov	r0, r3
 8011998:	f7fd f940 	bl	800ec1c <unlock_fs>
 801199c:	2301      	movs	r3, #1
 801199e:	e102      	b.n	8011ba6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119a4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d102      	bne.n	80119b4 <f_write+0x14e>
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119b2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	7d1b      	ldrb	r3, [r3, #20]
 80119b8:	b25b      	sxtb	r3, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	da1d      	bge.n	80119fa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	7858      	ldrb	r0, [r3, #1]
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	6a1a      	ldr	r2, [r3, #32]
 80119cc:	2301      	movs	r3, #1
 80119ce:	f7fc ffd1 	bl	800e974 <disk_write>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d009      	beq.n	80119ec <f_write+0x186>
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2201      	movs	r2, #1
 80119dc:	755a      	strb	r2, [r3, #21]
 80119de:	693b      	ldr	r3, [r7, #16]
 80119e0:	2101      	movs	r1, #1
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fd f91a 	bl	800ec1c <unlock_fs>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e0dc      	b.n	8011ba6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	7d1b      	ldrb	r3, [r3, #20]
 80119f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80119fa:	693a      	ldr	r2, [r7, #16]
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	69db      	ldr	r3, [r3, #28]
 8011a00:	4619      	mov	r1, r3
 8011a02:	4610      	mov	r0, r2
 8011a04:	f7fd fb72 	bl	800f0ec <clust2sect>
 8011a08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011a0a:	697b      	ldr	r3, [r7, #20]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d109      	bne.n	8011a24 <f_write+0x1be>
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2202      	movs	r2, #2
 8011a14:	755a      	strb	r2, [r3, #21]
 8011a16:	693b      	ldr	r3, [r7, #16]
 8011a18:	2102      	movs	r1, #2
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fd f8fe 	bl	800ec1c <unlock_fs>
 8011a20:	2302      	movs	r3, #2
 8011a22:	e0c0      	b.n	8011ba6 <f_write+0x340>
			sect += csect;
 8011a24:	697a      	ldr	r2, [r7, #20]
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	4413      	add	r3, r2
 8011a2a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	0a5b      	lsrs	r3, r3, #9
 8011a30:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011a32:	6a3b      	ldr	r3, [r7, #32]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d041      	beq.n	8011abc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011a38:	69ba      	ldr	r2, [r7, #24]
 8011a3a:	6a3b      	ldr	r3, [r7, #32]
 8011a3c:	4413      	add	r3, r2
 8011a3e:	693a      	ldr	r2, [r7, #16]
 8011a40:	8952      	ldrh	r2, [r2, #10]
 8011a42:	4293      	cmp	r3, r2
 8011a44:	d905      	bls.n	8011a52 <f_write+0x1ec>
					cc = fs->csize - csect;
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	895b      	ldrh	r3, [r3, #10]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a52:	693b      	ldr	r3, [r7, #16]
 8011a54:	7858      	ldrb	r0, [r3, #1]
 8011a56:	6a3b      	ldr	r3, [r7, #32]
 8011a58:	697a      	ldr	r2, [r7, #20]
 8011a5a:	69f9      	ldr	r1, [r7, #28]
 8011a5c:	f7fc ff8a 	bl	800e974 <disk_write>
 8011a60:	4603      	mov	r3, r0
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d009      	beq.n	8011a7a <f_write+0x214>
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	2201      	movs	r2, #1
 8011a6a:	755a      	strb	r2, [r3, #21]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	2101      	movs	r1, #1
 8011a70:	4618      	mov	r0, r3
 8011a72:	f7fd f8d3 	bl	800ec1c <unlock_fs>
 8011a76:	2301      	movs	r3, #1
 8011a78:	e095      	b.n	8011ba6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	6a1a      	ldr	r2, [r3, #32]
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	6a3a      	ldr	r2, [r7, #32]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d915      	bls.n	8011ab4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	6a1a      	ldr	r2, [r3, #32]
 8011a92:	697b      	ldr	r3, [r7, #20]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	025b      	lsls	r3, r3, #9
 8011a98:	69fa      	ldr	r2, [r7, #28]
 8011a9a:	4413      	add	r3, r2
 8011a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	f7fd f827 	bl	800eaf4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	7d1b      	ldrb	r3, [r3, #20]
 8011aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011aae:	b2da      	uxtb	r2, r3
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011ab4:	6a3b      	ldr	r3, [r7, #32]
 8011ab6:	025b      	lsls	r3, r3, #9
 8011ab8:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8011aba:	e044      	b.n	8011b46 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	6a1b      	ldr	r3, [r3, #32]
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d01b      	beq.n	8011afe <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	699a      	ldr	r2, [r3, #24]
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	d215      	bcs.n	8011afe <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	7858      	ldrb	r0, [r3, #1]
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011adc:	2301      	movs	r3, #1
 8011ade:	697a      	ldr	r2, [r7, #20]
 8011ae0:	f7fc ff28 	bl	800e934 <disk_read>
 8011ae4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d009      	beq.n	8011afe <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2201      	movs	r2, #1
 8011aee:	755a      	strb	r2, [r3, #21]
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	2101      	movs	r1, #1
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7fd f891 	bl	800ec1c <unlock_fs>
 8011afa:	2301      	movs	r3, #1
 8011afc:	e053      	b.n	8011ba6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	697a      	ldr	r2, [r7, #20]
 8011b02:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	699b      	ldr	r3, [r3, #24]
 8011b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b0c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8011b10:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d901      	bls.n	8011b1e <f_write+0x2b8>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	699b      	ldr	r3, [r3, #24]
 8011b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b2c:	4413      	add	r3, r2
 8011b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	4618      	mov	r0, r3
 8011b34:	f7fc ffde 	bl	800eaf4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	7d1b      	ldrb	r3, [r3, #20]
 8011b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011b40:	b2da      	uxtb	r2, r3
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011b46:	69fa      	ldr	r2, [r7, #28]
 8011b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b4a:	4413      	add	r3, r2
 8011b4c:	61fb      	str	r3, [r7, #28]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	699a      	ldr	r2, [r3, #24]
 8011b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b54:	441a      	add	r2, r3
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	619a      	str	r2, [r3, #24]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68da      	ldr	r2, [r3, #12]
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	429a      	cmp	r2, r3
 8011b64:	bf38      	it	cc
 8011b66:	461a      	movcc	r2, r3
 8011b68:	68fb      	ldr	r3, [r7, #12]
 8011b6a:	60da      	str	r2, [r3, #12]
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	681a      	ldr	r2, [r3, #0]
 8011b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b72:	441a      	add	r2, r3
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	601a      	str	r2, [r3, #0]
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b7c:	1ad3      	subs	r3, r2, r3
 8011b7e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f47f aeb6 	bne.w	80118f4 <f_write+0x8e>
 8011b88:	e000      	b.n	8011b8c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011b8a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	7d1b      	ldrb	r3, [r3, #20]
 8011b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b94:	b2da      	uxtb	r2, r3
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011b9a:	693b      	ldr	r3, [r7, #16]
 8011b9c:	2100      	movs	r1, #0
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fd f83c 	bl	800ec1c <unlock_fs>
 8011ba4:	2300      	movs	r3, #0
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	3730      	adds	r7, #48	@ 0x30
 8011baa:	46bd      	mov	sp, r7
 8011bac:	bd80      	pop	{r7, pc}

08011bae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b086      	sub	sp, #24
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f107 0208 	add.w	r2, r7, #8
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ff f97c 	bl	8010ebc <validate>
 8011bc4:	4603      	mov	r3, r0
 8011bc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011bc8:	7dfb      	ldrb	r3, [r7, #23]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d16d      	bne.n	8011caa <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	7d1b      	ldrb	r3, [r3, #20]
 8011bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d067      	beq.n	8011caa <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	7d1b      	ldrb	r3, [r3, #20]
 8011bde:	b25b      	sxtb	r3, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	da1a      	bge.n	8011c1a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	7858      	ldrb	r0, [r3, #1]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	6a1a      	ldr	r2, [r3, #32]
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	f7fc febe 	bl	800e974 <disk_write>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d006      	beq.n	8011c0c <f_sync+0x5e>
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	2101      	movs	r1, #1
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fd f80a 	bl	800ec1c <unlock_fs>
 8011c08:	2301      	movs	r3, #1
 8011c0a:	e055      	b.n	8011cb8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	7d1b      	ldrb	r3, [r3, #20]
 8011c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c14:	b2da      	uxtb	r2, r3
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011c1a:	f7fc f907 	bl	800de2c <get_fattime>
 8011c1e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011c20:	68ba      	ldr	r2, [r7, #8]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c26:	4619      	mov	r1, r3
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7fd f9c3 	bl	800efb4 <move_window>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011c32:	7dfb      	ldrb	r3, [r7, #23]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d138      	bne.n	8011caa <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c3c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	330b      	adds	r3, #11
 8011c42:	781a      	ldrb	r2, [r3, #0]
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	330b      	adds	r3, #11
 8011c48:	f042 0220 	orr.w	r2, r2, #32
 8011c4c:	b2d2      	uxtb	r2, r2
 8011c4e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	6818      	ldr	r0, [r3, #0]
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	689b      	ldr	r3, [r3, #8]
 8011c58:	461a      	mov	r2, r3
 8011c5a:	68f9      	ldr	r1, [r7, #12]
 8011c5c:	f7fd fecd 	bl	800f9fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	f103 021c 	add.w	r2, r3, #28
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	68db      	ldr	r3, [r3, #12]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	4610      	mov	r0, r2
 8011c6e:	f7fc ff15 	bl	800ea9c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	3316      	adds	r3, #22
 8011c76:	6939      	ldr	r1, [r7, #16]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fc ff0f 	bl	800ea9c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3312      	adds	r3, #18
 8011c82:	2100      	movs	r1, #0
 8011c84:	4618      	mov	r0, r3
 8011c86:	f7fc feee 	bl	800ea66 <st_word>
					fs->wflag = 1;
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011c90:	68bb      	ldr	r3, [r7, #8]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7fd f9bc 	bl	800f010 <sync_fs>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	7d1b      	ldrb	r3, [r3, #20]
 8011ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011ca4:	b2da      	uxtb	r2, r3
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	7dfa      	ldrb	r2, [r7, #23]
 8011cae:	4611      	mov	r1, r2
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fc ffb3 	bl	800ec1c <unlock_fs>
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7ff ff70 	bl	8011bae <f_sync>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011cd2:	7bfb      	ldrb	r3, [r7, #15]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d11d      	bne.n	8011d14 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	f107 0208 	add.w	r2, r7, #8
 8011cde:	4611      	mov	r1, r2
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	f7ff f8eb 	bl	8010ebc <validate>
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011cea:	7bfb      	ldrb	r3, [r7, #15]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d111      	bne.n	8011d14 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	691b      	ldr	r3, [r3, #16]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fd f8b9 	bl	800ee6c <dec_lock>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011cfe:	7bfb      	ldrb	r3, [r7, #15]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d102      	bne.n	8011d0a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	2100      	movs	r1, #0
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fc ff84 	bl	800ec1c <unlock_fs>
#endif
		}
	}
	return res;
 8011d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d16:	4618      	mov	r0, r3
 8011d18:	3710      	adds	r7, #16
 8011d1a:	46bd      	mov	sp, r7
 8011d1c:	bd80      	pop	{r7, pc}

08011d1e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8011d1e:	b580      	push	{r7, lr}
 8011d20:	f5ad 7d06 	sub.w	sp, sp, #536	@ 0x218
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d2a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d2e:	6018      	str	r0, [r3, #0]
 8011d30:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d34:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011d38:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8011d3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d3e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d101      	bne.n	8011d4c <f_opendir+0x2e>
 8011d48:	2309      	movs	r3, #9
 8011d4a:	e0a8      	b.n	8011e9e <f_opendir+0x180>

	/* Get logical drive */
	obj = &dp->obj;
 8011d4c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d50:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
	res = find_volume(&path, &fs, 0);
 8011d5a:	f507 7103 	add.w	r1, r7, #524	@ 0x20c
 8011d5e:	463b      	mov	r3, r7
 8011d60:	2200      	movs	r2, #0
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fe fe56 	bl	8010a14 <find_volume>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	if (res == FR_OK) {
 8011d6e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	f040 8081 	bne.w	8011e7a <f_opendir+0x15c>
		obj->fs = fs;
 8011d78:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011d7c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011d80:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8011d82:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011d86:	f107 020c 	add.w	r2, r7, #12
 8011d8a:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8011d8c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d90:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011d9a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011d9e:	4611      	mov	r1, r2
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f7fe fd2b 	bl	80107fc <follow_path>
 8011da6:	4603      	mov	r3, r0
 8011da8:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
		if (res == FR_OK) {						/* Follow completed */
 8011dac:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d15b      	bne.n	8011e6c <f_opendir+0x14e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8011db4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011db8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011dc2:	b25b      	sxtb	r3, r3
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	db1a      	blt.n	8011dfe <f_opendir+0xe0>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8011dc8:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011dcc:	799b      	ldrb	r3, [r3, #6]
 8011dce:	f003 0310 	and.w	r3, r3, #16
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d010      	beq.n	8011df8 <f_opendir+0xda>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8011dd6:	f8d7 220c 	ldr.w	r2, [r7, #524]	@ 0x20c
 8011dda:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011dde:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	6a1b      	ldr	r3, [r3, #32]
 8011de6:	4619      	mov	r1, r3
 8011de8:	4610      	mov	r0, r2
 8011dea:	f7fd fde7 	bl	800f9bc <ld_clust>
 8011dee:	4602      	mov	r2, r0
 8011df0:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011df4:	609a      	str	r2, [r3, #8]
 8011df6:	e002      	b.n	8011dfe <f_opendir+0xe0>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8011df8:	2305      	movs	r3, #5
 8011dfa:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
				}
			}
			if (res == FR_OK) {
 8011dfe:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d132      	bne.n	8011e6c <f_opendir+0x14e>
				obj->id = fs->id;
 8011e06:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011e0a:	88da      	ldrh	r2, [r3, #6]
 8011e0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e10:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8011e12:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011e16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	6818      	ldr	r0, [r3, #0]
 8011e1e:	f7fd fc46 	bl	800f6ae <dir_sdi>
 8011e22:	4603      	mov	r3, r0
 8011e24:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8011e28:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d11d      	bne.n	8011e6c <f_opendir+0x14e>
					if (obj->sclust) {
 8011e30:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e34:	689b      	ldr	r3, [r3, #8]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d014      	beq.n	8011e64 <f_opendir+0x146>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8011e3a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8011e3e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8011e42:	2100      	movs	r1, #0
 8011e44:	6818      	ldr	r0, [r3, #0]
 8011e46:	f7fc ff83 	bl	800ed50 <inc_lock>
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e50:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8011e52:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d107      	bne.n	8011e6c <f_opendir+0x14e>
 8011e5c:	2312      	movs	r3, #18
 8011e5e:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8011e62:	e003      	b.n	8011e6c <f_opendir+0x14e>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8011e64:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e68:	2200      	movs	r2, #0
 8011e6a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011e6c:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011e70:	2b04      	cmp	r3, #4
 8011e72:	d102      	bne.n	8011e7a <f_opendir+0x15c>
 8011e74:	2305      	movs	r3, #5
 8011e76:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8011e7a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d003      	beq.n	8011e8a <f_opendir+0x16c>
 8011e82:	f8d7 3210 	ldr.w	r3, [r7, #528]	@ 0x210
 8011e86:	2200      	movs	r2, #0
 8011e88:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011e8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8011e8e:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8011e92:	4611      	mov	r1, r2
 8011e94:	4618      	mov	r0, r3
 8011e96:	f7fc fec1 	bl	800ec1c <unlock_fs>
 8011e9a:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f507 7706 	add.w	r7, r7, #536	@ 0x218
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bd80      	pop	{r7, pc}

08011ea8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b084      	sub	sp, #16
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f107 0208 	add.w	r2, r7, #8
 8011eb6:	4611      	mov	r1, r2
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7fe ffff 	bl	8010ebc <validate>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ec2:	7bfb      	ldrb	r3, [r7, #15]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d115      	bne.n	8011ef4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	691b      	ldr	r3, [r3, #16]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d006      	beq.n	8011ede <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	691b      	ldr	r3, [r3, #16]
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f7fc ffc9 	bl	800ee6c <dec_lock>
 8011eda:	4603      	mov	r3, r0
 8011edc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011ede:	7bfb      	ldrb	r3, [r7, #15]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d102      	bne.n	8011eea <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	2100      	movs	r1, #0
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7fc fe94 	bl	800ec1c <unlock_fs>
#endif
	}
	return res;
 8011ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}

08011efe <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011efe:	b580      	push	{r7, lr}
 8011f00:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f0a:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f0e:	6018      	str	r0, [r3, #0]
 8011f10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f14:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8011f18:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011f1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f1e:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8011f28:	4611      	mov	r1, r2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7fe ffc6 	bl	8010ebc <validate>
 8011f30:	4603      	mov	r3, r0
 8011f32:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (res == FR_OK) {
 8011f36:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d14b      	bne.n	8011fd6 <f_readdir+0xd8>
		if (!fno) {
 8011f3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f42:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d10b      	bne.n	8011f64 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8011f4c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f50:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f54:	2100      	movs	r1, #0
 8011f56:	6818      	ldr	r0, [r3, #0]
 8011f58:	f7fd fba9 	bl	800f6ae <dir_sdi>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
 8011f62:	e038      	b.n	8011fd6 <f_readdir+0xd8>
		} else {
			INIT_NAMBUF(fs);
 8011f64:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8011f68:	f107 0208 	add.w	r2, r7, #8
 8011f6c:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8011f6e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f72:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011f76:	2100      	movs	r1, #0
 8011f78:	6818      	ldr	r0, [r3, #0]
 8011f7a:	f7fd ff4a 	bl	800fe12 <dir_read>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8011f84:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f88:	2b04      	cmp	r3, #4
 8011f8a:	d102      	bne.n	8011f92 <f_readdir+0x94>
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8011f92:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d11d      	bne.n	8011fd6 <f_readdir+0xd8>
				get_fileinfo(dp, fno);		/* Get the object information */
 8011f9a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011f9e:	f5a3 7204 	sub.w	r2, r3, #528	@ 0x210
 8011fa2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011fa6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011faa:	6811      	ldr	r1, [r2, #0]
 8011fac:	6818      	ldr	r0, [r3, #0]
 8011fae:	f7fe f98f 	bl	80102d0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8011fb2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8011fb6:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8011fba:	2100      	movs	r1, #0
 8011fbc:	6818      	ldr	r0, [r3, #0]
 8011fbe:	f7fd fbf1 	bl	800f7a4 <dir_next>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8011fc8:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8011fcc:	2b04      	cmp	r3, #4
 8011fce:	d102      	bne.n	8011fd6 <f_readdir+0xd8>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8011fd6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 8011fda:	f897 220f 	ldrb.w	r2, [r7, #527]	@ 0x20f
 8011fde:	4611      	mov	r1, r2
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	f7fc fe1b 	bl	800ec1c <unlock_fs>
 8011fe6:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
}
 8011fea:	4618      	mov	r0, r3
 8011fec:	f507 7704 	add.w	r7, r7, #528	@ 0x210
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}

08011ff4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b088      	sub	sp, #32
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	60b9      	str	r1, [r7, #8]
 8011ffe:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012000:	2300      	movs	r3, #0
 8012002:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012008:	e01c      	b.n	8012044 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801200a:	f107 0310 	add.w	r3, r7, #16
 801200e:	f107 0114 	add.w	r1, r7, #20
 8012012:	2201      	movs	r2, #1
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f7ff fab8 	bl	801158a <f_read>
		if (rc != 1) break;
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d117      	bne.n	8012050 <f_gets+0x5c>
		c = s[0];
 8012020:	7d3b      	ldrb	r3, [r7, #20]
 8012022:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8012024:	7dfb      	ldrb	r3, [r7, #23]
 8012026:	2b0d      	cmp	r3, #13
 8012028:	d00b      	beq.n	8012042 <f_gets+0x4e>
		*p++ = c;
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	1c5a      	adds	r2, r3, #1
 801202e:	61ba      	str	r2, [r7, #24]
 8012030:	7dfa      	ldrb	r2, [r7, #23]
 8012032:	701a      	strb	r2, [r3, #0]
		n++;
 8012034:	69fb      	ldr	r3, [r7, #28]
 8012036:	3301      	adds	r3, #1
 8012038:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801203a:	7dfb      	ldrb	r3, [r7, #23]
 801203c:	2b0a      	cmp	r3, #10
 801203e:	d009      	beq.n	8012054 <f_gets+0x60>
 8012040:	e000      	b.n	8012044 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8012042:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	3b01      	subs	r3, #1
 8012048:	69fa      	ldr	r2, [r7, #28]
 801204a:	429a      	cmp	r2, r3
 801204c:	dbdd      	blt.n	801200a <f_gets+0x16>
 801204e:	e002      	b.n	8012056 <f_gets+0x62>
		if (rc != 1) break;
 8012050:	bf00      	nop
 8012052:	e000      	b.n	8012056 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8012054:	bf00      	nop
	}
	*p = 0;
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	2200      	movs	r2, #0
 801205a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d001      	beq.n	8012066 <f_gets+0x72>
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	e000      	b.n	8012068 <f_gets+0x74>
 8012066:	2300      	movs	r3, #0
}
 8012068:	4618      	mov	r0, r3
 801206a:	3720      	adds	r7, #32
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012070:	b480      	push	{r7}
 8012072:	b087      	sub	sp, #28
 8012074:	af00      	add	r7, sp, #0
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	4613      	mov	r3, r2
 801207c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801207e:	2301      	movs	r3, #1
 8012080:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012082:	2300      	movs	r3, #0
 8012084:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012086:	4b1f      	ldr	r3, [pc, #124]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 8012088:	7a5b      	ldrb	r3, [r3, #9]
 801208a:	b2db      	uxtb	r3, r3
 801208c:	2b00      	cmp	r3, #0
 801208e:	d131      	bne.n	80120f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012090:	4b1c      	ldr	r3, [pc, #112]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 8012092:	7a5b      	ldrb	r3, [r3, #9]
 8012094:	b2db      	uxtb	r3, r3
 8012096:	461a      	mov	r2, r3
 8012098:	4b1a      	ldr	r3, [pc, #104]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 801209a:	2100      	movs	r1, #0
 801209c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801209e:	4b19      	ldr	r3, [pc, #100]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120a0:	7a5b      	ldrb	r3, [r3, #9]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	4a17      	ldr	r2, [pc, #92]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80120ae:	4b15      	ldr	r3, [pc, #84]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120b0:	7a5b      	ldrb	r3, [r3, #9]
 80120b2:	b2db      	uxtb	r3, r3
 80120b4:	461a      	mov	r2, r3
 80120b6:	4b13      	ldr	r3, [pc, #76]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120b8:	4413      	add	r3, r2
 80120ba:	79fa      	ldrb	r2, [r7, #7]
 80120bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120be:	4b11      	ldr	r3, [pc, #68]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120c0:	7a5b      	ldrb	r3, [r3, #9]
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	1c5a      	adds	r2, r3, #1
 80120c6:	b2d1      	uxtb	r1, r2
 80120c8:	4a0e      	ldr	r2, [pc, #56]	@ (8012104 <FATFS_LinkDriverEx+0x94>)
 80120ca:	7251      	strb	r1, [r2, #9]
 80120cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120ce:	7dbb      	ldrb	r3, [r7, #22]
 80120d0:	3330      	adds	r3, #48	@ 0x30
 80120d2:	b2da      	uxtb	r2, r3
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80120d8:	68bb      	ldr	r3, [r7, #8]
 80120da:	3301      	adds	r3, #1
 80120dc:	223a      	movs	r2, #58	@ 0x3a
 80120de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	3302      	adds	r3, #2
 80120e4:	222f      	movs	r2, #47	@ 0x2f
 80120e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	3303      	adds	r3, #3
 80120ec:	2200      	movs	r2, #0
 80120ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80120f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	371c      	adds	r7, #28
 80120fa:	46bd      	mov	sp, r7
 80120fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop
 8012104:	20005bbc 	.word	0x20005bbc

08012108 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012112:	2200      	movs	r2, #0
 8012114:	6839      	ldr	r1, [r7, #0]
 8012116:	6878      	ldr	r0, [r7, #4]
 8012118:	f7ff ffaa 	bl	8012070 <FATFS_LinkDriverEx>
 801211c:	4603      	mov	r3, r0
}
 801211e:	4618      	mov	r0, r3
 8012120:	3708      	adds	r7, #8
 8012122:	46bd      	mov	sp, r7
 8012124:	bd80      	pop	{r7, pc}
	...

08012128 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012128:	b480      	push	{r7}
 801212a:	b085      	sub	sp, #20
 801212c:	af00      	add	r7, sp, #0
 801212e:	4603      	mov	r3, r0
 8012130:	6039      	str	r1, [r7, #0]
 8012132:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012134:	88fb      	ldrh	r3, [r7, #6]
 8012136:	2b7f      	cmp	r3, #127	@ 0x7f
 8012138:	d802      	bhi.n	8012140 <ff_convert+0x18>
		c = chr;
 801213a:	88fb      	ldrh	r3, [r7, #6]
 801213c:	81fb      	strh	r3, [r7, #14]
 801213e:	e025      	b.n	801218c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012140:	683b      	ldr	r3, [r7, #0]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d00b      	beq.n	801215e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012146:	88fb      	ldrh	r3, [r7, #6]
 8012148:	2bff      	cmp	r3, #255	@ 0xff
 801214a:	d805      	bhi.n	8012158 <ff_convert+0x30>
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	3b80      	subs	r3, #128	@ 0x80
 8012150:	4a12      	ldr	r2, [pc, #72]	@ (801219c <ff_convert+0x74>)
 8012152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012156:	e000      	b.n	801215a <ff_convert+0x32>
 8012158:	2300      	movs	r3, #0
 801215a:	81fb      	strh	r3, [r7, #14]
 801215c:	e016      	b.n	801218c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801215e:	2300      	movs	r3, #0
 8012160:	81fb      	strh	r3, [r7, #14]
 8012162:	e009      	b.n	8012178 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012164:	89fb      	ldrh	r3, [r7, #14]
 8012166:	4a0d      	ldr	r2, [pc, #52]	@ (801219c <ff_convert+0x74>)
 8012168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801216c:	88fa      	ldrh	r2, [r7, #6]
 801216e:	429a      	cmp	r2, r3
 8012170:	d006      	beq.n	8012180 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012172:	89fb      	ldrh	r3, [r7, #14]
 8012174:	3301      	adds	r3, #1
 8012176:	81fb      	strh	r3, [r7, #14]
 8012178:	89fb      	ldrh	r3, [r7, #14]
 801217a:	2b7f      	cmp	r3, #127	@ 0x7f
 801217c:	d9f2      	bls.n	8012164 <ff_convert+0x3c>
 801217e:	e000      	b.n	8012182 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012180:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012182:	89fb      	ldrh	r3, [r7, #14]
 8012184:	3380      	adds	r3, #128	@ 0x80
 8012186:	b29b      	uxth	r3, r3
 8012188:	b2db      	uxtb	r3, r3
 801218a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801218c:	89fb      	ldrh	r3, [r7, #14]
}
 801218e:	4618      	mov	r0, r3
 8012190:	3714      	adds	r7, #20
 8012192:	46bd      	mov	sp, r7
 8012194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012198:	4770      	bx	lr
 801219a:	bf00      	nop
 801219c:	080189ec 	.word	0x080189ec

080121a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b087      	sub	sp, #28
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	4603      	mov	r3, r0
 80121a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80121aa:	88fb      	ldrh	r3, [r7, #6]
 80121ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80121b0:	d201      	bcs.n	80121b6 <ff_wtoupper+0x16>
 80121b2:	4b3e      	ldr	r3, [pc, #248]	@ (80122ac <ff_wtoupper+0x10c>)
 80121b4:	e000      	b.n	80121b8 <ff_wtoupper+0x18>
 80121b6:	4b3e      	ldr	r3, [pc, #248]	@ (80122b0 <ff_wtoupper+0x110>)
 80121b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80121ba:	697b      	ldr	r3, [r7, #20]
 80121bc:	1c9a      	adds	r2, r3, #2
 80121be:	617a      	str	r2, [r7, #20]
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80121c4:	8a7b      	ldrh	r3, [r7, #18]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d068      	beq.n	801229c <ff_wtoupper+0xfc>
 80121ca:	88fa      	ldrh	r2, [r7, #6]
 80121cc:	8a7b      	ldrh	r3, [r7, #18]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d364      	bcc.n	801229c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	1c9a      	adds	r2, r3, #2
 80121d6:	617a      	str	r2, [r7, #20]
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	823b      	strh	r3, [r7, #16]
 80121dc:	8a3b      	ldrh	r3, [r7, #16]
 80121de:	0a1b      	lsrs	r3, r3, #8
 80121e0:	81fb      	strh	r3, [r7, #14]
 80121e2:	8a3b      	ldrh	r3, [r7, #16]
 80121e4:	b2db      	uxtb	r3, r3
 80121e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80121e8:	88fa      	ldrh	r2, [r7, #6]
 80121ea:	8a79      	ldrh	r1, [r7, #18]
 80121ec:	8a3b      	ldrh	r3, [r7, #16]
 80121ee:	440b      	add	r3, r1
 80121f0:	429a      	cmp	r2, r3
 80121f2:	da49      	bge.n	8012288 <ff_wtoupper+0xe8>
			switch (cmd) {
 80121f4:	89fb      	ldrh	r3, [r7, #14]
 80121f6:	2b08      	cmp	r3, #8
 80121f8:	d84f      	bhi.n	801229a <ff_wtoupper+0xfa>
 80121fa:	a201      	add	r2, pc, #4	@ (adr r2, 8012200 <ff_wtoupper+0x60>)
 80121fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012200:	08012225 	.word	0x08012225
 8012204:	08012237 	.word	0x08012237
 8012208:	0801224d 	.word	0x0801224d
 801220c:	08012255 	.word	0x08012255
 8012210:	0801225d 	.word	0x0801225d
 8012214:	08012265 	.word	0x08012265
 8012218:	0801226d 	.word	0x0801226d
 801221c:	08012275 	.word	0x08012275
 8012220:	0801227d 	.word	0x0801227d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012224:	88fa      	ldrh	r2, [r7, #6]
 8012226:	8a7b      	ldrh	r3, [r7, #18]
 8012228:	1ad3      	subs	r3, r2, r3
 801222a:	005b      	lsls	r3, r3, #1
 801222c:	697a      	ldr	r2, [r7, #20]
 801222e:	4413      	add	r3, r2
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	80fb      	strh	r3, [r7, #6]
 8012234:	e027      	b.n	8012286 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012236:	88fa      	ldrh	r2, [r7, #6]
 8012238:	8a7b      	ldrh	r3, [r7, #18]
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	b29b      	uxth	r3, r3
 801223e:	f003 0301 	and.w	r3, r3, #1
 8012242:	b29b      	uxth	r3, r3
 8012244:	88fa      	ldrh	r2, [r7, #6]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	80fb      	strh	r3, [r7, #6]
 801224a:	e01c      	b.n	8012286 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801224c:	88fb      	ldrh	r3, [r7, #6]
 801224e:	3b10      	subs	r3, #16
 8012250:	80fb      	strh	r3, [r7, #6]
 8012252:	e018      	b.n	8012286 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012254:	88fb      	ldrh	r3, [r7, #6]
 8012256:	3b20      	subs	r3, #32
 8012258:	80fb      	strh	r3, [r7, #6]
 801225a:	e014      	b.n	8012286 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801225c:	88fb      	ldrh	r3, [r7, #6]
 801225e:	3b30      	subs	r3, #48	@ 0x30
 8012260:	80fb      	strh	r3, [r7, #6]
 8012262:	e010      	b.n	8012286 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012264:	88fb      	ldrh	r3, [r7, #6]
 8012266:	3b1a      	subs	r3, #26
 8012268:	80fb      	strh	r3, [r7, #6]
 801226a:	e00c      	b.n	8012286 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	3308      	adds	r3, #8
 8012270:	80fb      	strh	r3, [r7, #6]
 8012272:	e008      	b.n	8012286 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012274:	88fb      	ldrh	r3, [r7, #6]
 8012276:	3b50      	subs	r3, #80	@ 0x50
 8012278:	80fb      	strh	r3, [r7, #6]
 801227a:	e004      	b.n	8012286 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801227c:	88fb      	ldrh	r3, [r7, #6]
 801227e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8012282:	80fb      	strh	r3, [r7, #6]
 8012284:	bf00      	nop
			}
			break;
 8012286:	e008      	b.n	801229a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012288:	89fb      	ldrh	r3, [r7, #14]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d195      	bne.n	80121ba <ff_wtoupper+0x1a>
 801228e:	8a3b      	ldrh	r3, [r7, #16]
 8012290:	005b      	lsls	r3, r3, #1
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	4413      	add	r3, r2
 8012296:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012298:	e78f      	b.n	80121ba <ff_wtoupper+0x1a>
			break;
 801229a:	bf00      	nop
	}

	return chr;
 801229c:	88fb      	ldrh	r3, [r7, #6]
}
 801229e:	4618      	mov	r0, r3
 80122a0:	371c      	adds	r7, #28
 80122a2:	46bd      	mov	sp, r7
 80122a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	08018aec 	.word	0x08018aec
 80122b0:	08018ce0 	.word	0x08018ce0

080122b4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	6039      	str	r1, [r7, #0]
 80122be:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80122c0:	2300      	movs	r3, #0
 80122c2:	60fb      	str	r3, [r7, #12]
 80122c4:	2300      	movs	r3, #0
 80122c6:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80122c8:	f107 030c 	add.w	r3, r7, #12
 80122cc:	2101      	movs	r1, #1
 80122ce:	4618      	mov	r0, r3
 80122d0:	f000 f869 	bl	80123a6 <osSemaphoreCreate>
 80122d4:	4602      	mov	r2, r0
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	bf14      	ite	ne
 80122e2:	2301      	movne	r3, #1
 80122e4:	2300      	moveq	r3, #0
 80122e6:	b2db      	uxtb	r3, r3
 80122e8:	617b      	str	r3, [r7, #20]

    return ret;
 80122ea:	697b      	ldr	r3, [r7, #20]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3718      	adds	r7, #24
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80122fc:	6878      	ldr	r0, [r7, #4]
 80122fe:	f000 f909 	bl	8012514 <osSemaphoreDelete>
#endif
    return 1;
 8012302:	2301      	movs	r3, #1
}
 8012304:	4618      	mov	r0, r3
 8012306:	3708      	adds	r7, #8
 8012308:	46bd      	mov	sp, r7
 801230a:	bd80      	pop	{r7, pc}

0801230c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b084      	sub	sp, #16
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012314:	2300      	movs	r3, #0
 8012316:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8012318:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f000 f875 	bl	801240c <osSemaphoreWait>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d101      	bne.n	801232c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8012328:	2301      	movs	r3, #1
 801232a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801232c:	68fb      	ldr	r3, [r7, #12]
}
 801232e:	4618      	mov	r0, r3
 8012330:	3710      	adds	r7, #16
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}

08012336 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012336:	b580      	push	{r7, lr}
 8012338:	b082      	sub	sp, #8
 801233a:	af00      	add	r7, sp, #0
 801233c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f000 f8b2 	bl	80124a8 <osSemaphoreRelease>
#endif
}
 8012344:	bf00      	nop
 8012346:	3708      	adds	r7, #8
 8012348:	46bd      	mov	sp, r7
 801234a:	bd80      	pop	{r7, pc}

0801234c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801234c:	b480      	push	{r7}
 801234e:	b083      	sub	sp, #12
 8012350:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012352:	f3ef 8305 	mrs	r3, IPSR
 8012356:	607b      	str	r3, [r7, #4]
  return(result);
 8012358:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801235a:	2b00      	cmp	r3, #0
 801235c:	bf14      	ite	ne
 801235e:	2301      	movne	r3, #1
 8012360:	2300      	moveq	r3, #0
 8012362:	b2db      	uxtb	r3, r3
}
 8012364:	4618      	mov	r0, r3
 8012366:	370c      	adds	r7, #12
 8012368:	46bd      	mov	sp, r7
 801236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801236e:	4770      	bx	lr

08012370 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8012374:	f001 fc50 	bl	8013c18 <vTaskStartScheduler>
  
  return osOK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	bd80      	pop	{r7, pc}

0801237e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b084      	sub	sp, #16
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d001      	beq.n	8012394 <osDelay+0x16>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	e000      	b.n	8012396 <osDelay+0x18>
 8012394:	2301      	movs	r3, #1
 8012396:	4618      	mov	r0, r3
 8012398:	f001 fc06 	bl	8013ba8 <vTaskDelay>
  
  return osOK;
 801239c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80123a6:	b580      	push	{r7, lr}
 80123a8:	b086      	sub	sp, #24
 80123aa:	af02      	add	r7, sp, #8
 80123ac:	6078      	str	r0, [r7, #4]
 80123ae:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d00f      	beq.n	80123d8 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d10a      	bne.n	80123d4 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	2203      	movs	r2, #3
 80123c4:	9200      	str	r2, [sp, #0]
 80123c6:	2200      	movs	r2, #0
 80123c8:	2100      	movs	r1, #0
 80123ca:	2001      	movs	r0, #1
 80123cc:	f000 fb7c 	bl	8012ac8 <xQueueGenericCreateStatic>
 80123d0:	4603      	mov	r3, r0
 80123d2:	e016      	b.n	8012402 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80123d4:	2300      	movs	r3, #0
 80123d6:	e014      	b.n	8012402 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d110      	bne.n	8012400 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80123de:	2203      	movs	r2, #3
 80123e0:	2100      	movs	r1, #0
 80123e2:	2001      	movs	r0, #1
 80123e4:	f000 fbf7 	bl	8012bd6 <xQueueGenericCreate>
 80123e8:	60f8      	str	r0, [r7, #12]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d005      	beq.n	80123fc <osSemaphoreCreate+0x56>
 80123f0:	2300      	movs	r3, #0
 80123f2:	2200      	movs	r2, #0
 80123f4:	2100      	movs	r1, #0
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f000 fc86 	bl	8012d08 <xQueueGenericSend>
      return sema;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	e000      	b.n	8012402 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8012400:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8012402:	4618      	mov	r0, r3
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
	...

0801240c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
 8012414:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8012416:	2300      	movs	r3, #0
 8012418:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b00      	cmp	r3, #0
 801241e:	d101      	bne.n	8012424 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8012420:	2380      	movs	r3, #128	@ 0x80
 8012422:	e03a      	b.n	801249a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801242e:	d103      	bne.n	8012438 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8012430:	f04f 33ff 	mov.w	r3, #4294967295
 8012434:	60fb      	str	r3, [r7, #12]
 8012436:	e009      	b.n	801244c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d006      	beq.n	801244c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801243e:	683b      	ldr	r3, [r7, #0]
 8012440:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d101      	bne.n	801244c <osSemaphoreWait+0x40>
      ticks = 1;
 8012448:	2301      	movs	r3, #1
 801244a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 801244c:	f7ff ff7e 	bl	801234c <inHandlerMode>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d017      	beq.n	8012486 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8012456:	f107 0308 	add.w	r3, r7, #8
 801245a:	461a      	mov	r2, r3
 801245c:	2100      	movs	r1, #0
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fff4 	bl	801344c <xQueueReceiveFromISR>
 8012464:	4603      	mov	r3, r0
 8012466:	2b01      	cmp	r3, #1
 8012468:	d001      	beq.n	801246e <osSemaphoreWait+0x62>
      return osErrorOS;
 801246a:	23ff      	movs	r3, #255	@ 0xff
 801246c:	e015      	b.n	801249a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d011      	beq.n	8012498 <osSemaphoreWait+0x8c>
 8012474:	4b0b      	ldr	r3, [pc, #44]	@ (80124a4 <osSemaphoreWait+0x98>)
 8012476:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801247a:	601a      	str	r2, [r3, #0]
 801247c:	f3bf 8f4f 	dsb	sy
 8012480:	f3bf 8f6f 	isb	sy
 8012484:	e008      	b.n	8012498 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8012486:	68f9      	ldr	r1, [r7, #12]
 8012488:	6878      	ldr	r0, [r7, #4]
 801248a:	f000 fec7 	bl	801321c <xQueueSemaphoreTake>
 801248e:	4603      	mov	r3, r0
 8012490:	2b01      	cmp	r3, #1
 8012492:	d001      	beq.n	8012498 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8012494:	23ff      	movs	r3, #255	@ 0xff
 8012496:	e000      	b.n	801249a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3710      	adds	r7, #16
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	e000ed04 	.word	0xe000ed04

080124a8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80124b0:	2300      	movs	r3, #0
 80124b2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80124b4:	2300      	movs	r3, #0
 80124b6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80124b8:	f7ff ff48 	bl	801234c <inHandlerMode>
 80124bc:	4603      	mov	r3, r0
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d016      	beq.n	80124f0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80124c2:	f107 0308 	add.w	r3, r7, #8
 80124c6:	4619      	mov	r1, r3
 80124c8:	6878      	ldr	r0, [r7, #4]
 80124ca:	f000 fd27 	bl	8012f1c <xQueueGiveFromISR>
 80124ce:	4603      	mov	r3, r0
 80124d0:	2b01      	cmp	r3, #1
 80124d2:	d001      	beq.n	80124d8 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80124d4:	23ff      	movs	r3, #255	@ 0xff
 80124d6:	e017      	b.n	8012508 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80124d8:	68bb      	ldr	r3, [r7, #8]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d013      	beq.n	8012506 <osSemaphoreRelease+0x5e>
 80124de:	4b0c      	ldr	r3, [pc, #48]	@ (8012510 <osSemaphoreRelease+0x68>)
 80124e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80124e4:	601a      	str	r2, [r3, #0]
 80124e6:	f3bf 8f4f 	dsb	sy
 80124ea:	f3bf 8f6f 	isb	sy
 80124ee:	e00a      	b.n	8012506 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80124f0:	2300      	movs	r3, #0
 80124f2:	2200      	movs	r2, #0
 80124f4:	2100      	movs	r1, #0
 80124f6:	6878      	ldr	r0, [r7, #4]
 80124f8:	f000 fc06 	bl	8012d08 <xQueueGenericSend>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d001      	beq.n	8012506 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8012502:	23ff      	movs	r3, #255	@ 0xff
 8012504:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8012506:	68fb      	ldr	r3, [r7, #12]
}
 8012508:	4618      	mov	r0, r3
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}
 8012510:	e000ed04 	.word	0xe000ed04

08012514 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 801251c:	f7ff ff16 	bl	801234c <inHandlerMode>
 8012520:	4603      	mov	r3, r0
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <osSemaphoreDelete+0x16>
    return osErrorISR;
 8012526:	2382      	movs	r3, #130	@ 0x82
 8012528:	e003      	b.n	8012532 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f001 f816 	bl	801355c <vQueueDelete>

  return osOK; 
 8012530:	2300      	movs	r3, #0
}
 8012532:	4618      	mov	r0, r3
 8012534:	3708      	adds	r7, #8
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801253a:	b580      	push	{r7, lr}
 801253c:	b082      	sub	sp, #8
 801253e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012540:	2020      	movs	r0, #32
 8012542:	f002 fd21 	bl	8014f88 <pvPortMalloc>
 8012546:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00a      	beq.n	8012564 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	3304      	adds	r3, #4
 8012558:	4618      	mov	r0, r3
 801255a:	f000 f995 	bl	8012888 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	2200      	movs	r2, #0
 8012562:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012564:	687b      	ldr	r3, [r7, #4]
	}
 8012566:	4618      	mov	r0, r3
 8012568:	3708      	adds	r7, #8
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
	...

08012570 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b090      	sub	sp, #64	@ 0x40
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
 801257c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012582:	2300      	movs	r3, #0
 8012584:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012586:	2300      	movs	r3, #0
 8012588:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10d      	bne.n	80125ac <xEventGroupWaitBits+0x3c>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012594:	b672      	cpsid	i
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	b662      	cpsie	i
 80125a4:	623b      	str	r3, [r7, #32]
}
 80125a6:	bf00      	nop
 80125a8:	bf00      	nop
 80125aa:	e7fd      	b.n	80125a8 <xEventGroupWaitBits+0x38>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80125b2:	d30d      	bcc.n	80125d0 <xEventGroupWaitBits+0x60>
	__asm volatile
 80125b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125b8:	b672      	cpsid	i
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	b662      	cpsie	i
 80125c8:	61fb      	str	r3, [r7, #28]
}
 80125ca:	bf00      	nop
 80125cc:	bf00      	nop
 80125ce:	e7fd      	b.n	80125cc <xEventGroupWaitBits+0x5c>
	configASSERT( uxBitsToWaitFor != 0 );
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10d      	bne.n	80125f2 <xEventGroupWaitBits+0x82>
	__asm volatile
 80125d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125da:	b672      	cpsid	i
 80125dc:	f383 8811 	msr	BASEPRI, r3
 80125e0:	f3bf 8f6f 	isb	sy
 80125e4:	f3bf 8f4f 	dsb	sy
 80125e8:	b662      	cpsie	i
 80125ea:	61bb      	str	r3, [r7, #24]
}
 80125ec:	bf00      	nop
 80125ee:	bf00      	nop
 80125f0:	e7fd      	b.n	80125ee <xEventGroupWaitBits+0x7e>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80125f2:	f002 f82d 	bl	8014650 <xTaskGetSchedulerState>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d102      	bne.n	8012602 <xEventGroupWaitBits+0x92>
 80125fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d101      	bne.n	8012606 <xEventGroupWaitBits+0x96>
 8012602:	2301      	movs	r3, #1
 8012604:	e000      	b.n	8012608 <xEventGroupWaitBits+0x98>
 8012606:	2300      	movs	r3, #0
 8012608:	2b00      	cmp	r3, #0
 801260a:	d10d      	bne.n	8012628 <xEventGroupWaitBits+0xb8>
	__asm volatile
 801260c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012610:	b672      	cpsid	i
 8012612:	f383 8811 	msr	BASEPRI, r3
 8012616:	f3bf 8f6f 	isb	sy
 801261a:	f3bf 8f4f 	dsb	sy
 801261e:	b662      	cpsie	i
 8012620:	617b      	str	r3, [r7, #20]
}
 8012622:	bf00      	nop
 8012624:	bf00      	nop
 8012626:	e7fd      	b.n	8012624 <xEventGroupWaitBits+0xb4>
	}
	#endif

	vTaskSuspendAll();
 8012628:	f001 fb5e 	bl	8013ce8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801262c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8012632:	683a      	ldr	r2, [r7, #0]
 8012634:	68b9      	ldr	r1, [r7, #8]
 8012636:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012638:	f000 f904 	bl	8012844 <prvTestWaitCondition>
 801263c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 801263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00e      	beq.n	8012662 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8012644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012646:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8012648:	2300      	movs	r3, #0
 801264a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d028      	beq.n	80126a4 <xEventGroupWaitBits+0x134>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8012652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012654:	681a      	ldr	r2, [r3, #0]
 8012656:	68bb      	ldr	r3, [r7, #8]
 8012658:	43db      	mvns	r3, r3
 801265a:	401a      	ands	r2, r3
 801265c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	e020      	b.n	80126a4 <xEventGroupWaitBits+0x134>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8012662:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012664:	2b00      	cmp	r3, #0
 8012666:	d104      	bne.n	8012672 <xEventGroupWaitBits+0x102>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8012668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801266a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 801266c:	2301      	movs	r3, #1
 801266e:	633b      	str	r3, [r7, #48]	@ 0x30
 8012670:	e018      	b.n	80126a4 <xEventGroupWaitBits+0x134>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d003      	beq.n	8012680 <xEventGroupWaitBits+0x110>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8012678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801267e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8012680:	683b      	ldr	r3, [r7, #0]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d003      	beq.n	801268e <xEventGroupWaitBits+0x11e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8012686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012688:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801268c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012690:	1d18      	adds	r0, r3, #4
 8012692:	68ba      	ldr	r2, [r7, #8]
 8012694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012696:	4313      	orrs	r3, r2
 8012698:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801269a:	4619      	mov	r1, r3
 801269c:	f001 fd66 	bl	801416c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80126a0:	2300      	movs	r3, #0
 80126a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80126a4:	f001 fb2e 	bl	8013d04 <xTaskResumeAll>
 80126a8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80126aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d031      	beq.n	8012714 <xEventGroupWaitBits+0x1a4>
	{
		if( xAlreadyYielded == pdFALSE )
 80126b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d107      	bne.n	80126c6 <xEventGroupWaitBits+0x156>
		{
			portYIELD_WITHIN_API();
 80126b6:	4b1a      	ldr	r3, [pc, #104]	@ (8012720 <xEventGroupWaitBits+0x1b0>)
 80126b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126bc:	601a      	str	r2, [r3, #0]
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80126c6:	f002 f98d 	bl	80149e4 <uxTaskResetEventItemValue>
 80126ca:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80126cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d11a      	bne.n	801270c <xEventGroupWaitBits+0x19c>
		{
			taskENTER_CRITICAL();
 80126d6:	f002 fb29 	bl	8014d2c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80126da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80126e0:	683a      	ldr	r2, [r7, #0]
 80126e2:	68b9      	ldr	r1, [r7, #8]
 80126e4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80126e6:	f000 f8ad 	bl	8012844 <prvTestWaitCondition>
 80126ea:	4603      	mov	r3, r0
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d009      	beq.n	8012704 <xEventGroupWaitBits+0x194>
				{
					if( xClearOnExit != pdFALSE )
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d006      	beq.n	8012704 <xEventGroupWaitBits+0x194>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80126f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	43db      	mvns	r3, r3
 80126fe:	401a      	ands	r2, r3
 8012700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012702:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8012704:	2301      	movs	r3, #1
 8012706:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8012708:	f002 fb46 	bl	8014d98 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801270e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012712:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8012714:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012716:	4618      	mov	r0, r3
 8012718:	3740      	adds	r7, #64	@ 0x40
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	e000ed04 	.word	0xe000ed04

08012724 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08e      	sub	sp, #56	@ 0x38
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801272e:	2300      	movs	r3, #0
 8012730:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8012736:	2300      	movs	r3, #0
 8012738:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d10d      	bne.n	801275c <xEventGroupSetBits+0x38>
	__asm volatile
 8012740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012744:	b672      	cpsid	i
 8012746:	f383 8811 	msr	BASEPRI, r3
 801274a:	f3bf 8f6f 	isb	sy
 801274e:	f3bf 8f4f 	dsb	sy
 8012752:	b662      	cpsie	i
 8012754:	613b      	str	r3, [r7, #16]
}
 8012756:	bf00      	nop
 8012758:	bf00      	nop
 801275a:	e7fd      	b.n	8012758 <xEventGroupSetBits+0x34>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012762:	d30d      	bcc.n	8012780 <xEventGroupSetBits+0x5c>
	__asm volatile
 8012764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012768:	b672      	cpsid	i
 801276a:	f383 8811 	msr	BASEPRI, r3
 801276e:	f3bf 8f6f 	isb	sy
 8012772:	f3bf 8f4f 	dsb	sy
 8012776:	b662      	cpsie	i
 8012778:	60fb      	str	r3, [r7, #12]
}
 801277a:	bf00      	nop
 801277c:	bf00      	nop
 801277e:	e7fd      	b.n	801277c <xEventGroupSetBits+0x58>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8012780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012782:	3304      	adds	r3, #4
 8012784:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012788:	3308      	adds	r3, #8
 801278a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801278c:	f001 faac 	bl	8013ce8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8012790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012792:	68db      	ldr	r3, [r3, #12]
 8012794:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8012796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	431a      	orrs	r2, r3
 801279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127a0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80127a2:	e03c      	b.n	801281e <xEventGroupSetBits+0xfa>
		{
			pxNext = listGET_NEXT( pxListItem );
 80127a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80127aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80127b0:	2300      	movs	r3, #0
 80127b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80127ba:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80127c2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80127c4:	697b      	ldr	r3, [r7, #20]
 80127c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d108      	bne.n	80127e0 <xEventGroupSetBits+0xbc>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80127ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	4013      	ands	r3, r2
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d00b      	beq.n	80127f2 <xEventGroupSetBits+0xce>
				{
					xMatchFound = pdTRUE;
 80127da:	2301      	movs	r3, #1
 80127dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80127de:	e008      	b.n	80127f2 <xEventGroupSetBits+0xce>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80127e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	69bb      	ldr	r3, [r7, #24]
 80127e6:	4013      	ands	r3, r2
 80127e8:	69ba      	ldr	r2, [r7, #24]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d101      	bne.n	80127f2 <xEventGroupSetBits+0xce>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80127ee:	2301      	movs	r3, #1
 80127f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80127f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d010      	beq.n	801281a <xEventGroupSetBits+0xf6>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80127f8:	697b      	ldr	r3, [r7, #20]
 80127fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d003      	beq.n	801280a <xEventGroupSetBits+0xe6>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8012802:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012804:	69bb      	ldr	r3, [r7, #24]
 8012806:	4313      	orrs	r3, r2
 8012808:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012812:	4619      	mov	r1, r3
 8012814:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8012816:	f001 fd51 	bl	80142bc <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801281a:	69fb      	ldr	r3, [r7, #28]
 801281c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 801281e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012820:	6a3b      	ldr	r3, [r7, #32]
 8012822:	429a      	cmp	r2, r3
 8012824:	d1be      	bne.n	80127a4 <xEventGroupSetBits+0x80>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8012826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801282c:	43db      	mvns	r3, r3
 801282e:	401a      	ands	r2, r3
 8012830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012832:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8012834:	f001 fa66 	bl	8013d04 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8012838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801283a:	681b      	ldr	r3, [r3, #0]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3738      	adds	r7, #56	@ 0x38
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8012844:	b480      	push	{r7}
 8012846:	b087      	sub	sp, #28
 8012848:	af00      	add	r7, sp, #0
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8012850:	2300      	movs	r3, #0
 8012852:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d107      	bne.n	801286a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 801285a:	68fa      	ldr	r2, [r7, #12]
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	4013      	ands	r3, r2
 8012860:	2b00      	cmp	r3, #0
 8012862:	d00a      	beq.n	801287a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012864:	2301      	movs	r3, #1
 8012866:	617b      	str	r3, [r7, #20]
 8012868:	e007      	b.n	801287a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	4013      	ands	r3, r2
 8012870:	68ba      	ldr	r2, [r7, #8]
 8012872:	429a      	cmp	r2, r3
 8012874:	d101      	bne.n	801287a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8012876:	2301      	movs	r3, #1
 8012878:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 801287a:	697b      	ldr	r3, [r7, #20]
}
 801287c:	4618      	mov	r0, r3
 801287e:	371c      	adds	r7, #28
 8012880:	46bd      	mov	sp, r7
 8012882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012886:	4770      	bx	lr

08012888 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012888:	b480      	push	{r7}
 801288a:	b083      	sub	sp, #12
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f103 0208 	add.w	r2, r3, #8
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f04f 32ff 	mov.w	r2, #4294967295
 80128a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f103 0208 	add.w	r2, r3, #8
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f103 0208 	add.w	r2, r3, #8
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80128bc:	bf00      	nop
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80128d6:	bf00      	nop
 80128d8:	370c      	adds	r7, #12
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr

080128e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80128e2:	b480      	push	{r7}
 80128e4:	b085      	sub	sp, #20
 80128e6:	af00      	add	r7, sp, #0
 80128e8:	6078      	str	r0, [r7, #4]
 80128ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	685b      	ldr	r3, [r3, #4]
 80128f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	68fa      	ldr	r2, [r7, #12]
 80128f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	689a      	ldr	r2, [r3, #8]
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	689b      	ldr	r3, [r3, #8]
 8012904:	683a      	ldr	r2, [r7, #0]
 8012906:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	683a      	ldr	r2, [r7, #0]
 801290c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	1c5a      	adds	r2, r3, #1
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	601a      	str	r2, [r3, #0]
}
 801291e:	bf00      	nop
 8012920:	3714      	adds	r7, #20
 8012922:	46bd      	mov	sp, r7
 8012924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012928:	4770      	bx	lr

0801292a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801292a:	b480      	push	{r7}
 801292c:	b085      	sub	sp, #20
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
 8012932:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801293a:	68bb      	ldr	r3, [r7, #8]
 801293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012940:	d103      	bne.n	801294a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	691b      	ldr	r3, [r3, #16]
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	e00c      	b.n	8012964 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3308      	adds	r3, #8
 801294e:	60fb      	str	r3, [r7, #12]
 8012950:	e002      	b.n	8012958 <vListInsert+0x2e>
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	60fb      	str	r3, [r7, #12]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	68ba      	ldr	r2, [r7, #8]
 8012960:	429a      	cmp	r2, r3
 8012962:	d2f6      	bcs.n	8012952 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	685a      	ldr	r2, [r3, #4]
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	683a      	ldr	r2, [r7, #0]
 8012972:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012974:	683b      	ldr	r3, [r7, #0]
 8012976:	68fa      	ldr	r2, [r7, #12]
 8012978:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	683a      	ldr	r2, [r7, #0]
 801297e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	1c5a      	adds	r2, r3, #1
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	601a      	str	r2, [r3, #0]
}
 8012990:	bf00      	nop
 8012992:	3714      	adds	r7, #20
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801299c:	b480      	push	{r7}
 801299e:	b085      	sub	sp, #20
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	691b      	ldr	r3, [r3, #16]
 80129a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	6892      	ldr	r2, [r2, #8]
 80129b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	689b      	ldr	r3, [r3, #8]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	6852      	ldr	r2, [r2, #4]
 80129bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	685b      	ldr	r3, [r3, #4]
 80129c2:	687a      	ldr	r2, [r7, #4]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d103      	bne.n	80129d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	689a      	ldr	r2, [r3, #8]
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2200      	movs	r2, #0
 80129d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	1e5a      	subs	r2, r3, #1
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	681b      	ldr	r3, [r3, #0]
}
 80129e4:	4618      	mov	r0, r3
 80129e6:	3714      	adds	r7, #20
 80129e8:	46bd      	mov	sp, r7
 80129ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ee:	4770      	bx	lr

080129f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b084      	sub	sp, #16
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d10d      	bne.n	8012a20 <xQueueGenericReset+0x30>
	__asm volatile
 8012a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a08:	b672      	cpsid	i
 8012a0a:	f383 8811 	msr	BASEPRI, r3
 8012a0e:	f3bf 8f6f 	isb	sy
 8012a12:	f3bf 8f4f 	dsb	sy
 8012a16:	b662      	cpsie	i
 8012a18:	60bb      	str	r3, [r7, #8]
}
 8012a1a:	bf00      	nop
 8012a1c:	bf00      	nop
 8012a1e:	e7fd      	b.n	8012a1c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012a20:	f002 f984 	bl	8014d2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	681a      	ldr	r2, [r3, #0]
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a2c:	68f9      	ldr	r1, [r7, #12]
 8012a2e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012a30:	fb01 f303 	mul.w	r3, r1, r3
 8012a34:	441a      	add	r2, r3
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a50:	3b01      	subs	r3, #1
 8012a52:	68f9      	ldr	r1, [r7, #12]
 8012a54:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8012a56:	fb01 f303 	mul.w	r3, r1, r3
 8012a5a:	441a      	add	r2, r3
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	22ff      	movs	r2, #255	@ 0xff
 8012a64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	22ff      	movs	r2, #255	@ 0xff
 8012a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d114      	bne.n	8012aa0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	691b      	ldr	r3, [r3, #16]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	d01a      	beq.n	8012ab4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	3310      	adds	r3, #16
 8012a82:	4618      	mov	r0, r3
 8012a84:	f001 fbb4 	bl	80141f0 <xTaskRemoveFromEventList>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d012      	beq.n	8012ab4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ac4 <xQueueGenericReset+0xd4>)
 8012a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a94:	601a      	str	r2, [r3, #0]
 8012a96:	f3bf 8f4f 	dsb	sy
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	e009      	b.n	8012ab4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	3310      	adds	r3, #16
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f7ff feef 	bl	8012888 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	3324      	adds	r3, #36	@ 0x24
 8012aae:	4618      	mov	r0, r3
 8012ab0:	f7ff feea 	bl	8012888 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012ab4:	f002 f970 	bl	8014d98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012ab8:	2301      	movs	r3, #1
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3710      	adds	r7, #16
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	bf00      	nop
 8012ac4:	e000ed04 	.word	0xe000ed04

08012ac8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b08e      	sub	sp, #56	@ 0x38
 8012acc:	af02      	add	r7, sp, #8
 8012ace:	60f8      	str	r0, [r7, #12]
 8012ad0:	60b9      	str	r1, [r7, #8]
 8012ad2:	607a      	str	r2, [r7, #4]
 8012ad4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d10d      	bne.n	8012af8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8012adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ae0:	b672      	cpsid	i
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	b662      	cpsie	i
 8012af0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012af2:	bf00      	nop
 8012af4:	bf00      	nop
 8012af6:	e7fd      	b.n	8012af4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d10d      	bne.n	8012b1a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8012afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b02:	b672      	cpsid	i
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	b662      	cpsie	i
 8012b12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012b14:	bf00      	nop
 8012b16:	bf00      	nop
 8012b18:	e7fd      	b.n	8012b16 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d002      	beq.n	8012b26 <xQueueGenericCreateStatic+0x5e>
 8012b20:	68bb      	ldr	r3, [r7, #8]
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d001      	beq.n	8012b2a <xQueueGenericCreateStatic+0x62>
 8012b26:	2301      	movs	r3, #1
 8012b28:	e000      	b.n	8012b2c <xQueueGenericCreateStatic+0x64>
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d10d      	bne.n	8012b4c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8012b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b34:	b672      	cpsid	i
 8012b36:	f383 8811 	msr	BASEPRI, r3
 8012b3a:	f3bf 8f6f 	isb	sy
 8012b3e:	f3bf 8f4f 	dsb	sy
 8012b42:	b662      	cpsie	i
 8012b44:	623b      	str	r3, [r7, #32]
}
 8012b46:	bf00      	nop
 8012b48:	bf00      	nop
 8012b4a:	e7fd      	b.n	8012b48 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d102      	bne.n	8012b58 <xQueueGenericCreateStatic+0x90>
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d101      	bne.n	8012b5c <xQueueGenericCreateStatic+0x94>
 8012b58:	2301      	movs	r3, #1
 8012b5a:	e000      	b.n	8012b5e <xQueueGenericCreateStatic+0x96>
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d10d      	bne.n	8012b7e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8012b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b66:	b672      	cpsid	i
 8012b68:	f383 8811 	msr	BASEPRI, r3
 8012b6c:	f3bf 8f6f 	isb	sy
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	b662      	cpsie	i
 8012b76:	61fb      	str	r3, [r7, #28]
}
 8012b78:	bf00      	nop
 8012b7a:	bf00      	nop
 8012b7c:	e7fd      	b.n	8012b7a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012b7e:	2350      	movs	r3, #80	@ 0x50
 8012b80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012b82:	697b      	ldr	r3, [r7, #20]
 8012b84:	2b50      	cmp	r3, #80	@ 0x50
 8012b86:	d00d      	beq.n	8012ba4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8012b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b8c:	b672      	cpsid	i
 8012b8e:	f383 8811 	msr	BASEPRI, r3
 8012b92:	f3bf 8f6f 	isb	sy
 8012b96:	f3bf 8f4f 	dsb	sy
 8012b9a:	b662      	cpsie	i
 8012b9c:	61bb      	str	r3, [r7, #24]
}
 8012b9e:	bf00      	nop
 8012ba0:	bf00      	nop
 8012ba2:	e7fd      	b.n	8012ba0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012ba4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8012baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d00d      	beq.n	8012bcc <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb2:	2201      	movs	r2, #1
 8012bb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012bb8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8012bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	4613      	mov	r3, r2
 8012bc2:	687a      	ldr	r2, [r7, #4]
 8012bc4:	68b9      	ldr	r1, [r7, #8]
 8012bc6:	68f8      	ldr	r0, [r7, #12]
 8012bc8:	f000 f848 	bl	8012c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3730      	adds	r7, #48	@ 0x30
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b08a      	sub	sp, #40	@ 0x28
 8012bda:	af02      	add	r7, sp, #8
 8012bdc:	60f8      	str	r0, [r7, #12]
 8012bde:	60b9      	str	r1, [r7, #8]
 8012be0:	4613      	mov	r3, r2
 8012be2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d10d      	bne.n	8012c06 <xQueueGenericCreate+0x30>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bee:	b672      	cpsid	i
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
 8012bfc:	b662      	cpsie	i
 8012bfe:	613b      	str	r3, [r7, #16]
}
 8012c00:	bf00      	nop
 8012c02:	bf00      	nop
 8012c04:	e7fd      	b.n	8012c02 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d102      	bne.n	8012c12 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	61fb      	str	r3, [r7, #28]
 8012c10:	e004      	b.n	8012c1c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	68ba      	ldr	r2, [r7, #8]
 8012c16:	fb02 f303 	mul.w	r3, r2, r3
 8012c1a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	3350      	adds	r3, #80	@ 0x50
 8012c20:	4618      	mov	r0, r3
 8012c22:	f002 f9b1 	bl	8014f88 <pvPortMalloc>
 8012c26:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d011      	beq.n	8012c52 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012c2e:	69bb      	ldr	r3, [r7, #24]
 8012c30:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	3350      	adds	r3, #80	@ 0x50
 8012c36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012c40:	79fa      	ldrb	r2, [r7, #7]
 8012c42:	69bb      	ldr	r3, [r7, #24]
 8012c44:	9300      	str	r3, [sp, #0]
 8012c46:	4613      	mov	r3, r2
 8012c48:	697a      	ldr	r2, [r7, #20]
 8012c4a:	68b9      	ldr	r1, [r7, #8]
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f000 f805 	bl	8012c5c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012c52:	69bb      	ldr	r3, [r7, #24]
	}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3720      	adds	r7, #32
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b084      	sub	sp, #16
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012c6a:	68bb      	ldr	r3, [r7, #8]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d103      	bne.n	8012c78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	69ba      	ldr	r2, [r7, #24]
 8012c74:	601a      	str	r2, [r3, #0]
 8012c76:	e002      	b.n	8012c7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012c78:	69bb      	ldr	r3, [r7, #24]
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	68fa      	ldr	r2, [r7, #12]
 8012c82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	68ba      	ldr	r2, [r7, #8]
 8012c88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012c8a:	2101      	movs	r1, #1
 8012c8c:	69b8      	ldr	r0, [r7, #24]
 8012c8e:	f7ff feaf 	bl	80129f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	78fa      	ldrb	r2, [r7, #3]
 8012c96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012c9a:	bf00      	nop
 8012c9c:	3710      	adds	r7, #16
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}

08012ca2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8012ca2:	b580      	push	{r7, lr}
 8012ca4:	b082      	sub	sp, #8
 8012ca6:	af00      	add	r7, sp, #0
 8012ca8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00e      	beq.n	8012cce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2200      	movs	r2, #0
 8012cba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	2100      	movs	r1, #0
 8012cc8:	6878      	ldr	r0, [r7, #4]
 8012cca:	f000 f81d 	bl	8012d08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}

08012cd6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012cd6:	b580      	push	{r7, lr}
 8012cd8:	b086      	sub	sp, #24
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	4603      	mov	r3, r0
 8012cde:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	617b      	str	r3, [r7, #20]
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012ce8:	79fb      	ldrb	r3, [r7, #7]
 8012cea:	461a      	mov	r2, r3
 8012cec:	6939      	ldr	r1, [r7, #16]
 8012cee:	6978      	ldr	r0, [r7, #20]
 8012cf0:	f7ff ff71 	bl	8012bd6 <xQueueGenericCreate>
 8012cf4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012cf6:	68f8      	ldr	r0, [r7, #12]
 8012cf8:	f7ff ffd3 	bl	8012ca2 <prvInitialiseMutex>

		return xNewQueue;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
	}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3718      	adds	r7, #24
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
	...

08012d08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b08e      	sub	sp, #56	@ 0x38
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
 8012d14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012d16:	2300      	movs	r3, #0
 8012d18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d10d      	bne.n	8012d40 <xQueueGenericSend+0x38>
	__asm volatile
 8012d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d28:	b672      	cpsid	i
 8012d2a:	f383 8811 	msr	BASEPRI, r3
 8012d2e:	f3bf 8f6f 	isb	sy
 8012d32:	f3bf 8f4f 	dsb	sy
 8012d36:	b662      	cpsie	i
 8012d38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8012d3a:	bf00      	nop
 8012d3c:	bf00      	nop
 8012d3e:	e7fd      	b.n	8012d3c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d40:	68bb      	ldr	r3, [r7, #8]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d103      	bne.n	8012d4e <xQueueGenericSend+0x46>
 8012d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d101      	bne.n	8012d52 <xQueueGenericSend+0x4a>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e000      	b.n	8012d54 <xQueueGenericSend+0x4c>
 8012d52:	2300      	movs	r3, #0
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d10d      	bne.n	8012d74 <xQueueGenericSend+0x6c>
	__asm volatile
 8012d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d5c:	b672      	cpsid	i
 8012d5e:	f383 8811 	msr	BASEPRI, r3
 8012d62:	f3bf 8f6f 	isb	sy
 8012d66:	f3bf 8f4f 	dsb	sy
 8012d6a:	b662      	cpsie	i
 8012d6c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8012d6e:	bf00      	nop
 8012d70:	bf00      	nop
 8012d72:	e7fd      	b.n	8012d70 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	2b02      	cmp	r3, #2
 8012d78:	d103      	bne.n	8012d82 <xQueueGenericSend+0x7a>
 8012d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d101      	bne.n	8012d86 <xQueueGenericSend+0x7e>
 8012d82:	2301      	movs	r3, #1
 8012d84:	e000      	b.n	8012d88 <xQueueGenericSend+0x80>
 8012d86:	2300      	movs	r3, #0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d10d      	bne.n	8012da8 <xQueueGenericSend+0xa0>
	__asm volatile
 8012d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d90:	b672      	cpsid	i
 8012d92:	f383 8811 	msr	BASEPRI, r3
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	f3bf 8f4f 	dsb	sy
 8012d9e:	b662      	cpsie	i
 8012da0:	623b      	str	r3, [r7, #32]
}
 8012da2:	bf00      	nop
 8012da4:	bf00      	nop
 8012da6:	e7fd      	b.n	8012da4 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012da8:	f001 fc52 	bl	8014650 <xTaskGetSchedulerState>
 8012dac:	4603      	mov	r3, r0
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d102      	bne.n	8012db8 <xQueueGenericSend+0xb0>
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d101      	bne.n	8012dbc <xQueueGenericSend+0xb4>
 8012db8:	2301      	movs	r3, #1
 8012dba:	e000      	b.n	8012dbe <xQueueGenericSend+0xb6>
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d10d      	bne.n	8012dde <xQueueGenericSend+0xd6>
	__asm volatile
 8012dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dc6:	b672      	cpsid	i
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	b662      	cpsie	i
 8012dd6:	61fb      	str	r3, [r7, #28]
}
 8012dd8:	bf00      	nop
 8012dda:	bf00      	nop
 8012ddc:	e7fd      	b.n	8012dda <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012dde:	f001 ffa5 	bl	8014d2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012dea:	429a      	cmp	r2, r3
 8012dec:	d302      	bcc.n	8012df4 <xQueueGenericSend+0xec>
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	2b02      	cmp	r3, #2
 8012df2:	d129      	bne.n	8012e48 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	68b9      	ldr	r1, [r7, #8]
 8012df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012dfa:	f000 fbed 	bl	80135d8 <prvCopyDataToQueue>
 8012dfe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d010      	beq.n	8012e2a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e0a:	3324      	adds	r3, #36	@ 0x24
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f001 f9ef 	bl	80141f0 <xTaskRemoveFromEventList>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d013      	beq.n	8012e40 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012e18:	4b3f      	ldr	r3, [pc, #252]	@ (8012f18 <xQueueGenericSend+0x210>)
 8012e1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e1e:	601a      	str	r2, [r3, #0]
 8012e20:	f3bf 8f4f 	dsb	sy
 8012e24:	f3bf 8f6f 	isb	sy
 8012e28:	e00a      	b.n	8012e40 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d007      	beq.n	8012e40 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012e30:	4b39      	ldr	r3, [pc, #228]	@ (8012f18 <xQueueGenericSend+0x210>)
 8012e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e36:	601a      	str	r2, [r3, #0]
 8012e38:	f3bf 8f4f 	dsb	sy
 8012e3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012e40:	f001 ffaa 	bl	8014d98 <vPortExitCritical>
				return pdPASS;
 8012e44:	2301      	movs	r3, #1
 8012e46:	e063      	b.n	8012f10 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d103      	bne.n	8012e56 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012e4e:	f001 ffa3 	bl	8014d98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012e52:	2300      	movs	r3, #0
 8012e54:	e05c      	b.n	8012f10 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d106      	bne.n	8012e6a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e5c:	f107 0314 	add.w	r3, r7, #20
 8012e60:	4618      	mov	r0, r3
 8012e62:	f001 fa93 	bl	801438c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e66:	2301      	movs	r3, #1
 8012e68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e6a:	f001 ff95 	bl	8014d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e6e:	f000 ff3b 	bl	8013ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e72:	f001 ff5b 	bl	8014d2c <vPortEnterCritical>
 8012e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8012e7c:	b25b      	sxtb	r3, r3
 8012e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e82:	d103      	bne.n	8012e8c <xQueueGenericSend+0x184>
 8012e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e86:	2200      	movs	r2, #0
 8012e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8012e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012e92:	b25b      	sxtb	r3, r3
 8012e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e98:	d103      	bne.n	8012ea2 <xQueueGenericSend+0x19a>
 8012e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8012ea2:	f001 ff79 	bl	8014d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ea6:	1d3a      	adds	r2, r7, #4
 8012ea8:	f107 0314 	add.w	r3, r7, #20
 8012eac:	4611      	mov	r1, r2
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f001 fa82 	bl	80143b8 <xTaskCheckForTimeOut>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d124      	bne.n	8012f04 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012eba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ebc:	f000 fc84 	bl	80137c8 <prvIsQueueFull>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d018      	beq.n	8012ef8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ec8:	3310      	adds	r3, #16
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	4611      	mov	r1, r2
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f001 f924 	bl	801411c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012ed4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012ed6:	f000 fc0f 	bl	80136f8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012eda:	f000 ff13 	bl	8013d04 <xTaskResumeAll>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	f47f af7c 	bne.w	8012dde <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8012ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8012f18 <xQueueGenericSend+0x210>)
 8012ee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012eec:	601a      	str	r2, [r3, #0]
 8012eee:	f3bf 8f4f 	dsb	sy
 8012ef2:	f3bf 8f6f 	isb	sy
 8012ef6:	e772      	b.n	8012dde <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012ef8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012efa:	f000 fbfd 	bl	80136f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012efe:	f000 ff01 	bl	8013d04 <xTaskResumeAll>
 8012f02:	e76c      	b.n	8012dde <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012f04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012f06:	f000 fbf7 	bl	80136f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f0a:	f000 fefb 	bl	8013d04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012f0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3738      	adds	r7, #56	@ 0x38
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd80      	pop	{r7, pc}
 8012f18:	e000ed04 	.word	0xe000ed04

08012f1c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b08e      	sub	sp, #56	@ 0x38
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d10d      	bne.n	8012f4c <xQueueGiveFromISR+0x30>
	__asm volatile
 8012f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f34:	b672      	cpsid	i
 8012f36:	f383 8811 	msr	BASEPRI, r3
 8012f3a:	f3bf 8f6f 	isb	sy
 8012f3e:	f3bf 8f4f 	dsb	sy
 8012f42:	b662      	cpsie	i
 8012f44:	623b      	str	r3, [r7, #32]
}
 8012f46:	bf00      	nop
 8012f48:	bf00      	nop
 8012f4a:	e7fd      	b.n	8012f48 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00d      	beq.n	8012f70 <xQueueGiveFromISR+0x54>
	__asm volatile
 8012f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f58:	b672      	cpsid	i
 8012f5a:	f383 8811 	msr	BASEPRI, r3
 8012f5e:	f3bf 8f6f 	isb	sy
 8012f62:	f3bf 8f4f 	dsb	sy
 8012f66:	b662      	cpsie	i
 8012f68:	61fb      	str	r3, [r7, #28]
}
 8012f6a:	bf00      	nop
 8012f6c:	bf00      	nop
 8012f6e:	e7fd      	b.n	8012f6c <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d103      	bne.n	8012f80 <xQueueGiveFromISR+0x64>
 8012f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f7a:	689b      	ldr	r3, [r3, #8]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d101      	bne.n	8012f84 <xQueueGiveFromISR+0x68>
 8012f80:	2301      	movs	r3, #1
 8012f82:	e000      	b.n	8012f86 <xQueueGiveFromISR+0x6a>
 8012f84:	2300      	movs	r3, #0
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d10d      	bne.n	8012fa6 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8012f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f8e:	b672      	cpsid	i
 8012f90:	f383 8811 	msr	BASEPRI, r3
 8012f94:	f3bf 8f6f 	isb	sy
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	b662      	cpsie	i
 8012f9e:	61bb      	str	r3, [r7, #24]
}
 8012fa0:	bf00      	nop
 8012fa2:	bf00      	nop
 8012fa4:	e7fd      	b.n	8012fa2 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fa6:	f001 ffa9 	bl	8014efc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012faa:	f3ef 8211 	mrs	r2, BASEPRI
 8012fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb2:	b672      	cpsid	i
 8012fb4:	f383 8811 	msr	BASEPRI, r3
 8012fb8:	f3bf 8f6f 	isb	sy
 8012fbc:	f3bf 8f4f 	dsb	sy
 8012fc0:	b662      	cpsie	i
 8012fc2:	617a      	str	r2, [r7, #20]
 8012fc4:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012fc6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012fce:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fd6:	429a      	cmp	r2, r3
 8012fd8:	d22b      	bcs.n	8013032 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012fec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ff4:	d112      	bne.n	801301c <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d016      	beq.n	801302c <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013000:	3324      	adds	r3, #36	@ 0x24
 8013002:	4618      	mov	r0, r3
 8013004:	f001 f8f4 	bl	80141f0 <xTaskRemoveFromEventList>
 8013008:	4603      	mov	r3, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	d00e      	beq.n	801302c <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00b      	beq.n	801302c <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	2201      	movs	r2, #1
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	e007      	b.n	801302c <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801301c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013020:	3301      	adds	r3, #1
 8013022:	b2db      	uxtb	r3, r3
 8013024:	b25a      	sxtb	r2, r3
 8013026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801302c:	2301      	movs	r3, #1
 801302e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013030:	e001      	b.n	8013036 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013032:	2300      	movs	r3, #0
 8013034:	637b      	str	r3, [r7, #52]	@ 0x34
 8013036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013038:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013040:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013044:	4618      	mov	r0, r3
 8013046:	3738      	adds	r7, #56	@ 0x38
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b08c      	sub	sp, #48	@ 0x30
 8013050:	af00      	add	r7, sp, #0
 8013052:	60f8      	str	r0, [r7, #12]
 8013054:	60b9      	str	r1, [r7, #8]
 8013056:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013058:	2300      	movs	r3, #0
 801305a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013062:	2b00      	cmp	r3, #0
 8013064:	d10d      	bne.n	8013082 <xQueueReceive+0x36>
	__asm volatile
 8013066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801306a:	b672      	cpsid	i
 801306c:	f383 8811 	msr	BASEPRI, r3
 8013070:	f3bf 8f6f 	isb	sy
 8013074:	f3bf 8f4f 	dsb	sy
 8013078:	b662      	cpsie	i
 801307a:	623b      	str	r3, [r7, #32]
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	e7fd      	b.n	801307e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013082:	68bb      	ldr	r3, [r7, #8]
 8013084:	2b00      	cmp	r3, #0
 8013086:	d103      	bne.n	8013090 <xQueueReceive+0x44>
 8013088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801308c:	2b00      	cmp	r3, #0
 801308e:	d101      	bne.n	8013094 <xQueueReceive+0x48>
 8013090:	2301      	movs	r3, #1
 8013092:	e000      	b.n	8013096 <xQueueReceive+0x4a>
 8013094:	2300      	movs	r3, #0
 8013096:	2b00      	cmp	r3, #0
 8013098:	d10d      	bne.n	80130b6 <xQueueReceive+0x6a>
	__asm volatile
 801309a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801309e:	b672      	cpsid	i
 80130a0:	f383 8811 	msr	BASEPRI, r3
 80130a4:	f3bf 8f6f 	isb	sy
 80130a8:	f3bf 8f4f 	dsb	sy
 80130ac:	b662      	cpsie	i
 80130ae:	61fb      	str	r3, [r7, #28]
}
 80130b0:	bf00      	nop
 80130b2:	bf00      	nop
 80130b4:	e7fd      	b.n	80130b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80130b6:	f001 facb 	bl	8014650 <xTaskGetSchedulerState>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d102      	bne.n	80130c6 <xQueueReceive+0x7a>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d101      	bne.n	80130ca <xQueueReceive+0x7e>
 80130c6:	2301      	movs	r3, #1
 80130c8:	e000      	b.n	80130cc <xQueueReceive+0x80>
 80130ca:	2300      	movs	r3, #0
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d10d      	bne.n	80130ec <xQueueReceive+0xa0>
	__asm volatile
 80130d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d4:	b672      	cpsid	i
 80130d6:	f383 8811 	msr	BASEPRI, r3
 80130da:	f3bf 8f6f 	isb	sy
 80130de:	f3bf 8f4f 	dsb	sy
 80130e2:	b662      	cpsie	i
 80130e4:	61bb      	str	r3, [r7, #24]
}
 80130e6:	bf00      	nop
 80130e8:	bf00      	nop
 80130ea:	e7fd      	b.n	80130e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80130ec:	f001 fe1e 	bl	8014d2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80130f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80130f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80130f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d01f      	beq.n	801313c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80130fc:	68b9      	ldr	r1, [r7, #8]
 80130fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013100:	f000 fad4 	bl	80136ac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013106:	1e5a      	subs	r2, r3, #1
 8013108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310e:	691b      	ldr	r3, [r3, #16]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d00f      	beq.n	8013134 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013116:	3310      	adds	r3, #16
 8013118:	4618      	mov	r0, r3
 801311a:	f001 f869 	bl	80141f0 <xTaskRemoveFromEventList>
 801311e:	4603      	mov	r3, r0
 8013120:	2b00      	cmp	r3, #0
 8013122:	d007      	beq.n	8013134 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013124:	4b3c      	ldr	r3, [pc, #240]	@ (8013218 <xQueueReceive+0x1cc>)
 8013126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801312a:	601a      	str	r2, [r3, #0]
 801312c:	f3bf 8f4f 	dsb	sy
 8013130:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013134:	f001 fe30 	bl	8014d98 <vPortExitCritical>
				return pdPASS;
 8013138:	2301      	movs	r3, #1
 801313a:	e069      	b.n	8013210 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d103      	bne.n	801314a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013142:	f001 fe29 	bl	8014d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013146:	2300      	movs	r3, #0
 8013148:	e062      	b.n	8013210 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801314a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d106      	bne.n	801315e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013150:	f107 0310 	add.w	r3, r7, #16
 8013154:	4618      	mov	r0, r3
 8013156:	f001 f919 	bl	801438c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801315a:	2301      	movs	r3, #1
 801315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801315e:	f001 fe1b 	bl	8014d98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013162:	f000 fdc1 	bl	8013ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013166:	f001 fde1 	bl	8014d2c <vPortEnterCritical>
 801316a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801316c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013170:	b25b      	sxtb	r3, r3
 8013172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013176:	d103      	bne.n	8013180 <xQueueReceive+0x134>
 8013178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317a:	2200      	movs	r2, #0
 801317c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013182:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013186:	b25b      	sxtb	r3, r3
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d103      	bne.n	8013196 <xQueueReceive+0x14a>
 801318e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013190:	2200      	movs	r2, #0
 8013192:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013196:	f001 fdff 	bl	8014d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801319a:	1d3a      	adds	r2, r7, #4
 801319c:	f107 0310 	add.w	r3, r7, #16
 80131a0:	4611      	mov	r1, r2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f001 f908 	bl	80143b8 <xTaskCheckForTimeOut>
 80131a8:	4603      	mov	r3, r0
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d123      	bne.n	80131f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80131ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131b0:	f000 faf4 	bl	801379c <prvIsQueueEmpty>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d017      	beq.n	80131ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80131ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131bc:	3324      	adds	r3, #36	@ 0x24
 80131be:	687a      	ldr	r2, [r7, #4]
 80131c0:	4611      	mov	r1, r2
 80131c2:	4618      	mov	r0, r3
 80131c4:	f000 ffaa 	bl	801411c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80131c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131ca:	f000 fa95 	bl	80136f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80131ce:	f000 fd99 	bl	8013d04 <xTaskResumeAll>
 80131d2:	4603      	mov	r3, r0
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d189      	bne.n	80130ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80131d8:	4b0f      	ldr	r3, [pc, #60]	@ (8013218 <xQueueReceive+0x1cc>)
 80131da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80131de:	601a      	str	r2, [r3, #0]
 80131e0:	f3bf 8f4f 	dsb	sy
 80131e4:	f3bf 8f6f 	isb	sy
 80131e8:	e780      	b.n	80130ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80131ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131ec:	f000 fa84 	bl	80136f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80131f0:	f000 fd88 	bl	8013d04 <xTaskResumeAll>
 80131f4:	e77a      	b.n	80130ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80131f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80131f8:	f000 fa7e 	bl	80136f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80131fc:	f000 fd82 	bl	8013d04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013202:	f000 facb 	bl	801379c <prvIsQueueEmpty>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	f43f af6f 	beq.w	80130ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801320e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013210:	4618      	mov	r0, r3
 8013212:	3730      	adds	r7, #48	@ 0x30
 8013214:	46bd      	mov	sp, r7
 8013216:	bd80      	pop	{r7, pc}
 8013218:	e000ed04 	.word	0xe000ed04

0801321c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b08e      	sub	sp, #56	@ 0x38
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013226:	2300      	movs	r3, #0
 8013228:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801322e:	2300      	movs	r3, #0
 8013230:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013234:	2b00      	cmp	r3, #0
 8013236:	d10d      	bne.n	8013254 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8013238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801323c:	b672      	cpsid	i
 801323e:	f383 8811 	msr	BASEPRI, r3
 8013242:	f3bf 8f6f 	isb	sy
 8013246:	f3bf 8f4f 	dsb	sy
 801324a:	b662      	cpsie	i
 801324c:	623b      	str	r3, [r7, #32]
}
 801324e:	bf00      	nop
 8013250:	bf00      	nop
 8013252:	e7fd      	b.n	8013250 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013258:	2b00      	cmp	r3, #0
 801325a:	d00d      	beq.n	8013278 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 801325c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013260:	b672      	cpsid	i
 8013262:	f383 8811 	msr	BASEPRI, r3
 8013266:	f3bf 8f6f 	isb	sy
 801326a:	f3bf 8f4f 	dsb	sy
 801326e:	b662      	cpsie	i
 8013270:	61fb      	str	r3, [r7, #28]
}
 8013272:	bf00      	nop
 8013274:	bf00      	nop
 8013276:	e7fd      	b.n	8013274 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013278:	f001 f9ea 	bl	8014650 <xTaskGetSchedulerState>
 801327c:	4603      	mov	r3, r0
 801327e:	2b00      	cmp	r3, #0
 8013280:	d102      	bne.n	8013288 <xQueueSemaphoreTake+0x6c>
 8013282:	683b      	ldr	r3, [r7, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d101      	bne.n	801328c <xQueueSemaphoreTake+0x70>
 8013288:	2301      	movs	r3, #1
 801328a:	e000      	b.n	801328e <xQueueSemaphoreTake+0x72>
 801328c:	2300      	movs	r3, #0
 801328e:	2b00      	cmp	r3, #0
 8013290:	d10d      	bne.n	80132ae <xQueueSemaphoreTake+0x92>
	__asm volatile
 8013292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013296:	b672      	cpsid	i
 8013298:	f383 8811 	msr	BASEPRI, r3
 801329c:	f3bf 8f6f 	isb	sy
 80132a0:	f3bf 8f4f 	dsb	sy
 80132a4:	b662      	cpsie	i
 80132a6:	61bb      	str	r3, [r7, #24]
}
 80132a8:	bf00      	nop
 80132aa:	bf00      	nop
 80132ac:	e7fd      	b.n	80132aa <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80132ae:	f001 fd3d 	bl	8014d2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80132b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80132b6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80132b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d024      	beq.n	8013308 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80132be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c0:	1e5a      	subs	r2, r3, #1
 80132c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80132c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d104      	bne.n	80132d8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80132ce:	f001 fba1 	bl	8014a14 <pvTaskIncrementMutexHeldCount>
 80132d2:	4602      	mov	r2, r0
 80132d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132d6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80132d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132da:	691b      	ldr	r3, [r3, #16]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d00f      	beq.n	8013300 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80132e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e2:	3310      	adds	r3, #16
 80132e4:	4618      	mov	r0, r3
 80132e6:	f000 ff83 	bl	80141f0 <xTaskRemoveFromEventList>
 80132ea:	4603      	mov	r3, r0
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d007      	beq.n	8013300 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80132f0:	4b55      	ldr	r3, [pc, #340]	@ (8013448 <xQueueSemaphoreTake+0x22c>)
 80132f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80132f6:	601a      	str	r2, [r3, #0]
 80132f8:	f3bf 8f4f 	dsb	sy
 80132fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013300:	f001 fd4a 	bl	8014d98 <vPortExitCritical>
				return pdPASS;
 8013304:	2301      	movs	r3, #1
 8013306:	e09a      	b.n	801343e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013308:	683b      	ldr	r3, [r7, #0]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d114      	bne.n	8013338 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013310:	2b00      	cmp	r3, #0
 8013312:	d00d      	beq.n	8013330 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8013314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013318:	b672      	cpsid	i
 801331a:	f383 8811 	msr	BASEPRI, r3
 801331e:	f3bf 8f6f 	isb	sy
 8013322:	f3bf 8f4f 	dsb	sy
 8013326:	b662      	cpsie	i
 8013328:	617b      	str	r3, [r7, #20]
}
 801332a:	bf00      	nop
 801332c:	bf00      	nop
 801332e:	e7fd      	b.n	801332c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013330:	f001 fd32 	bl	8014d98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013334:	2300      	movs	r3, #0
 8013336:	e082      	b.n	801343e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801333a:	2b00      	cmp	r3, #0
 801333c:	d106      	bne.n	801334c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801333e:	f107 030c 	add.w	r3, r7, #12
 8013342:	4618      	mov	r0, r3
 8013344:	f001 f822 	bl	801438c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013348:	2301      	movs	r3, #1
 801334a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801334c:	f001 fd24 	bl	8014d98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013350:	f000 fcca 	bl	8013ce8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013354:	f001 fcea 	bl	8014d2c <vPortEnterCritical>
 8013358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801335a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801335e:	b25b      	sxtb	r3, r3
 8013360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013364:	d103      	bne.n	801336e <xQueueSemaphoreTake+0x152>
 8013366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013368:	2200      	movs	r2, #0
 801336a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013370:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013374:	b25b      	sxtb	r3, r3
 8013376:	f1b3 3fff 	cmp.w	r3, #4294967295
 801337a:	d103      	bne.n	8013384 <xQueueSemaphoreTake+0x168>
 801337c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801337e:	2200      	movs	r2, #0
 8013380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8013384:	f001 fd08 	bl	8014d98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013388:	463a      	mov	r2, r7
 801338a:	f107 030c 	add.w	r3, r7, #12
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f001 f811 	bl	80143b8 <xTaskCheckForTimeOut>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d132      	bne.n	8013402 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801339c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801339e:	f000 f9fd 	bl	801379c <prvIsQueueEmpty>
 80133a2:	4603      	mov	r3, r0
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d026      	beq.n	80133f6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80133a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d109      	bne.n	80133c4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80133b0:	f001 fcbc 	bl	8014d2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80133b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f001 f967 	bl	801468c <xTaskPriorityInherit>
 80133be:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80133c0:	f001 fcea 	bl	8014d98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80133c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c6:	3324      	adds	r3, #36	@ 0x24
 80133c8:	683a      	ldr	r2, [r7, #0]
 80133ca:	4611      	mov	r1, r2
 80133cc:	4618      	mov	r0, r3
 80133ce:	f000 fea5 	bl	801411c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80133d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133d4:	f000 f990 	bl	80136f8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80133d8:	f000 fc94 	bl	8013d04 <xTaskResumeAll>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	f47f af65 	bne.w	80132ae <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80133e4:	4b18      	ldr	r3, [pc, #96]	@ (8013448 <xQueueSemaphoreTake+0x22c>)
 80133e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80133ea:	601a      	str	r2, [r3, #0]
 80133ec:	f3bf 8f4f 	dsb	sy
 80133f0:	f3bf 8f6f 	isb	sy
 80133f4:	e75b      	b.n	80132ae <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80133f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80133f8:	f000 f97e 	bl	80136f8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80133fc:	f000 fc82 	bl	8013d04 <xTaskResumeAll>
 8013400:	e755      	b.n	80132ae <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8013402:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013404:	f000 f978 	bl	80136f8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013408:	f000 fc7c 	bl	8013d04 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801340c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801340e:	f000 f9c5 	bl	801379c <prvIsQueueEmpty>
 8013412:	4603      	mov	r3, r0
 8013414:	2b00      	cmp	r3, #0
 8013416:	f43f af4a 	beq.w	80132ae <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801341a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00d      	beq.n	801343c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8013420:	f001 fc84 	bl	8014d2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013424:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013426:	f000 f8bf 	bl	80135a8 <prvGetDisinheritPriorityAfterTimeout>
 801342a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801342c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801342e:	689b      	ldr	r3, [r3, #8]
 8013430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013432:	4618      	mov	r0, r3
 8013434:	f001 fa36 	bl	80148a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013438:	f001 fcae 	bl	8014d98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801343c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801343e:	4618      	mov	r0, r3
 8013440:	3738      	adds	r7, #56	@ 0x38
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	e000ed04 	.word	0xe000ed04

0801344c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b08e      	sub	sp, #56	@ 0x38
 8013450:	af00      	add	r7, sp, #0
 8013452:	60f8      	str	r0, [r7, #12]
 8013454:	60b9      	str	r1, [r7, #8]
 8013456:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10d      	bne.n	801347e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8013462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013466:	b672      	cpsid	i
 8013468:	f383 8811 	msr	BASEPRI, r3
 801346c:	f3bf 8f6f 	isb	sy
 8013470:	f3bf 8f4f 	dsb	sy
 8013474:	b662      	cpsie	i
 8013476:	623b      	str	r3, [r7, #32]
}
 8013478:	bf00      	nop
 801347a:	bf00      	nop
 801347c:	e7fd      	b.n	801347a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d103      	bne.n	801348c <xQueueReceiveFromISR+0x40>
 8013484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013488:	2b00      	cmp	r3, #0
 801348a:	d101      	bne.n	8013490 <xQueueReceiveFromISR+0x44>
 801348c:	2301      	movs	r3, #1
 801348e:	e000      	b.n	8013492 <xQueueReceiveFromISR+0x46>
 8013490:	2300      	movs	r3, #0
 8013492:	2b00      	cmp	r3, #0
 8013494:	d10d      	bne.n	80134b2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8013496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801349a:	b672      	cpsid	i
 801349c:	f383 8811 	msr	BASEPRI, r3
 80134a0:	f3bf 8f6f 	isb	sy
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	b662      	cpsie	i
 80134aa:	61fb      	str	r3, [r7, #28]
}
 80134ac:	bf00      	nop
 80134ae:	bf00      	nop
 80134b0:	e7fd      	b.n	80134ae <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134b2:	f001 fd23 	bl	8014efc <vPortValidateInterruptPriority>
	__asm volatile
 80134b6:	f3ef 8211 	mrs	r2, BASEPRI
 80134ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80134be:	b672      	cpsid	i
 80134c0:	f383 8811 	msr	BASEPRI, r3
 80134c4:	f3bf 8f6f 	isb	sy
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	b662      	cpsie	i
 80134ce:	61ba      	str	r2, [r7, #24]
 80134d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80134d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80134d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80134da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80134dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d02f      	beq.n	8013542 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80134e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80134e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80134ec:	68b9      	ldr	r1, [r7, #8]
 80134ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80134f0:	f000 f8dc 	bl	80136ac <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80134f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f6:	1e5a      	subs	r2, r3, #1
 80134f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80134fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013504:	d112      	bne.n	801352c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013508:	691b      	ldr	r3, [r3, #16]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d016      	beq.n	801353c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013510:	3310      	adds	r3, #16
 8013512:	4618      	mov	r0, r3
 8013514:	f000 fe6c 	bl	80141f0 <xTaskRemoveFromEventList>
 8013518:	4603      	mov	r3, r0
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00e      	beq.n	801353c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d00b      	beq.n	801353c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2201      	movs	r2, #1
 8013528:	601a      	str	r2, [r3, #0]
 801352a:	e007      	b.n	801353c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801352c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013530:	3301      	adds	r3, #1
 8013532:	b2db      	uxtb	r3, r3
 8013534:	b25a      	sxtb	r2, r3
 8013536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801353c:	2301      	movs	r3, #1
 801353e:	637b      	str	r3, [r7, #52]	@ 0x34
 8013540:	e001      	b.n	8013546 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8013542:	2300      	movs	r3, #0
 8013544:	637b      	str	r3, [r7, #52]	@ 0x34
 8013546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013548:	613b      	str	r3, [r7, #16]
	__asm volatile
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	f383 8811 	msr	BASEPRI, r3
}
 8013550:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8013554:	4618      	mov	r0, r3
 8013556:	3738      	adds	r7, #56	@ 0x38
 8013558:	46bd      	mov	sp, r7
 801355a:	bd80      	pop	{r7, pc}

0801355c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b084      	sub	sp, #16
 8013560:	af00      	add	r7, sp, #0
 8013562:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d10d      	bne.n	801358a <vQueueDelete+0x2e>
	__asm volatile
 801356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013572:	b672      	cpsid	i
 8013574:	f383 8811 	msr	BASEPRI, r3
 8013578:	f3bf 8f6f 	isb	sy
 801357c:	f3bf 8f4f 	dsb	sy
 8013580:	b662      	cpsie	i
 8013582:	60bb      	str	r3, [r7, #8]
}
 8013584:	bf00      	nop
 8013586:	bf00      	nop
 8013588:	e7fd      	b.n	8013586 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801358a:	68f8      	ldr	r0, [r7, #12]
 801358c:	f000 f934 	bl	80137f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8013596:	2b00      	cmp	r3, #0
 8013598:	d102      	bne.n	80135a0 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	f001 fdc2 	bl	8015124 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80135a0:	bf00      	nop
 80135a2:	3710      	adds	r7, #16
 80135a4:	46bd      	mov	sp, r7
 80135a6:	bd80      	pop	{r7, pc}

080135a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80135a8:	b480      	push	{r7}
 80135aa:	b085      	sub	sp, #20
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d006      	beq.n	80135c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	f1c3 030c 	rsb	r3, r3, #12
 80135c2:	60fb      	str	r3, [r7, #12]
 80135c4:	e001      	b.n	80135ca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80135c6:	2300      	movs	r3, #0
 80135c8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80135ca:	68fb      	ldr	r3, [r7, #12]
	}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr

080135d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b086      	sub	sp, #24
 80135dc:	af00      	add	r7, sp, #0
 80135de:	60f8      	str	r0, [r7, #12]
 80135e0:	60b9      	str	r1, [r7, #8]
 80135e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80135e4:	2300      	movs	r3, #0
 80135e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d10d      	bne.n	8013612 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d14d      	bne.n	801369a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	4618      	mov	r0, r3
 8013604:	f001 f8c2 	bl	801478c <xTaskPriorityDisinherit>
 8013608:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	609a      	str	r2, [r3, #8]
 8013610:	e043      	b.n	801369a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d119      	bne.n	801364c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6858      	ldr	r0, [r3, #4]
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013620:	461a      	mov	r2, r3
 8013622:	68b9      	ldr	r1, [r7, #8]
 8013624:	f002 fedb 	bl	80163de <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	685a      	ldr	r2, [r3, #4]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013630:	441a      	add	r2, r3
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	685a      	ldr	r2, [r3, #4]
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	429a      	cmp	r2, r3
 8013640:	d32b      	bcc.n	801369a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	681a      	ldr	r2, [r3, #0]
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	605a      	str	r2, [r3, #4]
 801364a:	e026      	b.n	801369a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	68d8      	ldr	r0, [r3, #12]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013654:	461a      	mov	r2, r3
 8013656:	68b9      	ldr	r1, [r7, #8]
 8013658:	f002 fec1 	bl	80163de <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	68da      	ldr	r2, [r3, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013664:	425b      	negs	r3, r3
 8013666:	441a      	add	r2, r3
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	68da      	ldr	r2, [r3, #12]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	429a      	cmp	r2, r3
 8013676:	d207      	bcs.n	8013688 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	689a      	ldr	r2, [r3, #8]
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013680:	425b      	negs	r3, r3
 8013682:	441a      	add	r2, r3
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2b02      	cmp	r3, #2
 801368c:	d105      	bne.n	801369a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d002      	beq.n	801369a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	3b01      	subs	r3, #1
 8013698:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	1c5a      	adds	r2, r3, #1
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80136a2:	697b      	ldr	r3, [r7, #20]
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	3718      	adds	r7, #24
 80136a8:	46bd      	mov	sp, r7
 80136aa:	bd80      	pop	{r7, pc}

080136ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b082      	sub	sp, #8
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d018      	beq.n	80136f0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	68da      	ldr	r2, [r3, #12]
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136c6:	441a      	add	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	68da      	ldr	r2, [r3, #12]
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	689b      	ldr	r3, [r3, #8]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d303      	bcc.n	80136e0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	681a      	ldr	r2, [r3, #0]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	68d9      	ldr	r1, [r3, #12]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136e8:	461a      	mov	r2, r3
 80136ea:	6838      	ldr	r0, [r7, #0]
 80136ec:	f002 fe77 	bl	80163de <memcpy>
	}
}
 80136f0:	bf00      	nop
 80136f2:	3708      	adds	r7, #8
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}

080136f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b084      	sub	sp, #16
 80136fc:	af00      	add	r7, sp, #0
 80136fe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013700:	f001 fb14 	bl	8014d2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801370a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801370c:	e011      	b.n	8013732 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013712:	2b00      	cmp	r3, #0
 8013714:	d012      	beq.n	801373c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	3324      	adds	r3, #36	@ 0x24
 801371a:	4618      	mov	r0, r3
 801371c:	f000 fd68 	bl	80141f0 <xTaskRemoveFromEventList>
 8013720:	4603      	mov	r3, r0
 8013722:	2b00      	cmp	r3, #0
 8013724:	d001      	beq.n	801372a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013726:	f000 feaf 	bl	8014488 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801372a:	7bfb      	ldrb	r3, [r7, #15]
 801372c:	3b01      	subs	r3, #1
 801372e:	b2db      	uxtb	r3, r3
 8013730:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013736:	2b00      	cmp	r3, #0
 8013738:	dce9      	bgt.n	801370e <prvUnlockQueue+0x16>
 801373a:	e000      	b.n	801373e <prvUnlockQueue+0x46>
					break;
 801373c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	22ff      	movs	r2, #255	@ 0xff
 8013742:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8013746:	f001 fb27 	bl	8014d98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801374a:	f001 faef 	bl	8014d2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8013754:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013756:	e011      	b.n	801377c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	691b      	ldr	r3, [r3, #16]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d012      	beq.n	8013786 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3310      	adds	r3, #16
 8013764:	4618      	mov	r0, r3
 8013766:	f000 fd43 	bl	80141f0 <xTaskRemoveFromEventList>
 801376a:	4603      	mov	r3, r0
 801376c:	2b00      	cmp	r3, #0
 801376e:	d001      	beq.n	8013774 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013770:	f000 fe8a 	bl	8014488 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013774:	7bbb      	ldrb	r3, [r7, #14]
 8013776:	3b01      	subs	r3, #1
 8013778:	b2db      	uxtb	r3, r3
 801377a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801377c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013780:	2b00      	cmp	r3, #0
 8013782:	dce9      	bgt.n	8013758 <prvUnlockQueue+0x60>
 8013784:	e000      	b.n	8013788 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013786:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	22ff      	movs	r2, #255	@ 0xff
 801378c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8013790:	f001 fb02 	bl	8014d98 <vPortExitCritical>
}
 8013794:	bf00      	nop
 8013796:	3710      	adds	r7, #16
 8013798:	46bd      	mov	sp, r7
 801379a:	bd80      	pop	{r7, pc}

0801379c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137a4:	f001 fac2 	bl	8014d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d102      	bne.n	80137b6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80137b0:	2301      	movs	r3, #1
 80137b2:	60fb      	str	r3, [r7, #12]
 80137b4:	e001      	b.n	80137ba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80137b6:	2300      	movs	r3, #0
 80137b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137ba:	f001 faed 	bl	8014d98 <vPortExitCritical>

	return xReturn;
 80137be:	68fb      	ldr	r3, [r7, #12]
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b084      	sub	sp, #16
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80137d0:	f001 faac 	bl	8014d2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80137dc:	429a      	cmp	r2, r3
 80137de:	d102      	bne.n	80137e6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80137e0:	2301      	movs	r3, #1
 80137e2:	60fb      	str	r3, [r7, #12]
 80137e4:	e001      	b.n	80137ea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80137e6:	2300      	movs	r3, #0
 80137e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80137ea:	f001 fad5 	bl	8014d98 <vPortExitCritical>

	return xReturn;
 80137ee:	68fb      	ldr	r3, [r7, #12]
}
 80137f0:	4618      	mov	r0, r3
 80137f2:	3710      	adds	r7, #16
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}

080137f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80137f8:	b480      	push	{r7}
 80137fa:	b085      	sub	sp, #20
 80137fc:	af00      	add	r7, sp, #0
 80137fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013800:	2300      	movs	r3, #0
 8013802:	60fb      	str	r3, [r7, #12]
 8013804:	e016      	b.n	8013834 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013806:	4a10      	ldr	r2, [pc, #64]	@ (8013848 <vQueueUnregisterQueue+0x50>)
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	00db      	lsls	r3, r3, #3
 801380c:	4413      	add	r3, r2
 801380e:	685b      	ldr	r3, [r3, #4]
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	429a      	cmp	r2, r3
 8013814:	d10b      	bne.n	801382e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013816:	4a0c      	ldr	r2, [pc, #48]	@ (8013848 <vQueueUnregisterQueue+0x50>)
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	2100      	movs	r1, #0
 801381c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013820:	4a09      	ldr	r2, [pc, #36]	@ (8013848 <vQueueUnregisterQueue+0x50>)
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	00db      	lsls	r3, r3, #3
 8013826:	4413      	add	r3, r2
 8013828:	2200      	movs	r2, #0
 801382a:	605a      	str	r2, [r3, #4]
				break;
 801382c:	e006      	b.n	801383c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	3301      	adds	r3, #1
 8013832:	60fb      	str	r3, [r7, #12]
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	2bfe      	cmp	r3, #254	@ 0xfe
 8013838:	d9e5      	bls.n	8013806 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801383a:	bf00      	nop
 801383c:	bf00      	nop
 801383e:	3714      	adds	r7, #20
 8013840:	46bd      	mov	sp, r7
 8013842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013846:	4770      	bx	lr
 8013848:	20005bc8 	.word	0x20005bc8

0801384c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801384c:	b580      	push	{r7, lr}
 801384e:	b08e      	sub	sp, #56	@ 0x38
 8013850:	af04      	add	r7, sp, #16
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	607a      	str	r2, [r7, #4]
 8013858:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801385a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801385c:	2b00      	cmp	r3, #0
 801385e:	d10d      	bne.n	801387c <xTaskCreateStatic+0x30>
	__asm volatile
 8013860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013864:	b672      	cpsid	i
 8013866:	f383 8811 	msr	BASEPRI, r3
 801386a:	f3bf 8f6f 	isb	sy
 801386e:	f3bf 8f4f 	dsb	sy
 8013872:	b662      	cpsie	i
 8013874:	623b      	str	r3, [r7, #32]
}
 8013876:	bf00      	nop
 8013878:	bf00      	nop
 801387a:	e7fd      	b.n	8013878 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801387c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801387e:	2b00      	cmp	r3, #0
 8013880:	d10d      	bne.n	801389e <xTaskCreateStatic+0x52>
	__asm volatile
 8013882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013886:	b672      	cpsid	i
 8013888:	f383 8811 	msr	BASEPRI, r3
 801388c:	f3bf 8f6f 	isb	sy
 8013890:	f3bf 8f4f 	dsb	sy
 8013894:	b662      	cpsie	i
 8013896:	61fb      	str	r3, [r7, #28]
}
 8013898:	bf00      	nop
 801389a:	bf00      	nop
 801389c:	e7fd      	b.n	801389a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801389e:	2360      	movs	r3, #96	@ 0x60
 80138a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	2b60      	cmp	r3, #96	@ 0x60
 80138a6:	d00d      	beq.n	80138c4 <xTaskCreateStatic+0x78>
	__asm volatile
 80138a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80138ac:	b672      	cpsid	i
 80138ae:	f383 8811 	msr	BASEPRI, r3
 80138b2:	f3bf 8f6f 	isb	sy
 80138b6:	f3bf 8f4f 	dsb	sy
 80138ba:	b662      	cpsie	i
 80138bc:	61bb      	str	r3, [r7, #24]
}
 80138be:	bf00      	nop
 80138c0:	bf00      	nop
 80138c2:	e7fd      	b.n	80138c0 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80138c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80138c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d01e      	beq.n	801390a <xTaskCreateStatic+0xbe>
 80138cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d01b      	beq.n	801390a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80138d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80138d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80138dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138de:	2202      	movs	r2, #2
 80138e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80138e4:	2300      	movs	r3, #0
 80138e6:	9303      	str	r3, [sp, #12]
 80138e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138ea:	9302      	str	r3, [sp, #8]
 80138ec:	f107 0314 	add.w	r3, r7, #20
 80138f0:	9301      	str	r3, [sp, #4]
 80138f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f4:	9300      	str	r3, [sp, #0]
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	68b9      	ldr	r1, [r7, #8]
 80138fc:	68f8      	ldr	r0, [r7, #12]
 80138fe:	f000 f850 	bl	80139a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013902:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013904:	f000 f8e2 	bl	8013acc <prvAddNewTaskToReadyList>
 8013908:	e001      	b.n	801390e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801390a:	2300      	movs	r3, #0
 801390c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801390e:	697b      	ldr	r3, [r7, #20]
	}
 8013910:	4618      	mov	r0, r3
 8013912:	3728      	adds	r7, #40	@ 0x28
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013918:	b580      	push	{r7, lr}
 801391a:	b08c      	sub	sp, #48	@ 0x30
 801391c:	af04      	add	r7, sp, #16
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	603b      	str	r3, [r7, #0]
 8013924:	4613      	mov	r3, r2
 8013926:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013928:	88fb      	ldrh	r3, [r7, #6]
 801392a:	009b      	lsls	r3, r3, #2
 801392c:	4618      	mov	r0, r3
 801392e:	f001 fb2b 	bl	8014f88 <pvPortMalloc>
 8013932:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013934:	697b      	ldr	r3, [r7, #20]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00e      	beq.n	8013958 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801393a:	2060      	movs	r0, #96	@ 0x60
 801393c:	f001 fb24 	bl	8014f88 <pvPortMalloc>
 8013940:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013942:	69fb      	ldr	r3, [r7, #28]
 8013944:	2b00      	cmp	r3, #0
 8013946:	d003      	beq.n	8013950 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	697a      	ldr	r2, [r7, #20]
 801394c:	631a      	str	r2, [r3, #48]	@ 0x30
 801394e:	e005      	b.n	801395c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013950:	6978      	ldr	r0, [r7, #20]
 8013952:	f001 fbe7 	bl	8015124 <vPortFree>
 8013956:	e001      	b.n	801395c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013958:	2300      	movs	r3, #0
 801395a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d017      	beq.n	8013992 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013962:	69fb      	ldr	r3, [r7, #28]
 8013964:	2200      	movs	r2, #0
 8013966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801396a:	88fa      	ldrh	r2, [r7, #6]
 801396c:	2300      	movs	r3, #0
 801396e:	9303      	str	r3, [sp, #12]
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	9302      	str	r3, [sp, #8]
 8013974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	68b9      	ldr	r1, [r7, #8]
 8013980:	68f8      	ldr	r0, [r7, #12]
 8013982:	f000 f80e 	bl	80139a2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013986:	69f8      	ldr	r0, [r7, #28]
 8013988:	f000 f8a0 	bl	8013acc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801398c:	2301      	movs	r3, #1
 801398e:	61bb      	str	r3, [r7, #24]
 8013990:	e002      	b.n	8013998 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013992:	f04f 33ff 	mov.w	r3, #4294967295
 8013996:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013998:	69bb      	ldr	r3, [r7, #24]
	}
 801399a:	4618      	mov	r0, r3
 801399c:	3720      	adds	r7, #32
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}

080139a2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80139a2:	b580      	push	{r7, lr}
 80139a4:	b088      	sub	sp, #32
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	60f8      	str	r0, [r7, #12]
 80139aa:	60b9      	str	r1, [r7, #8]
 80139ac:	607a      	str	r2, [r7, #4]
 80139ae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80139b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	461a      	mov	r2, r3
 80139ba:	21a5      	movs	r1, #165	@ 0xa5
 80139bc:	f002 fc33 	bl	8016226 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80139c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80139c4:	6879      	ldr	r1, [r7, #4]
 80139c6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80139ca:	440b      	add	r3, r1
 80139cc:	009b      	lsls	r3, r3, #2
 80139ce:	4413      	add	r3, r2
 80139d0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80139d2:	69bb      	ldr	r3, [r7, #24]
 80139d4:	f023 0307 	bic.w	r3, r3, #7
 80139d8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	f003 0307 	and.w	r3, r3, #7
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d00d      	beq.n	8013a00 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80139e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80139e8:	b672      	cpsid	i
 80139ea:	f383 8811 	msr	BASEPRI, r3
 80139ee:	f3bf 8f6f 	isb	sy
 80139f2:	f3bf 8f4f 	dsb	sy
 80139f6:	b662      	cpsie	i
 80139f8:	617b      	str	r3, [r7, #20]
}
 80139fa:	bf00      	nop
 80139fc:	bf00      	nop
 80139fe:	e7fd      	b.n	80139fc <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d01f      	beq.n	8013a46 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a06:	2300      	movs	r3, #0
 8013a08:	61fb      	str	r3, [r7, #28]
 8013a0a:	e012      	b.n	8013a32 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013a0c:	68ba      	ldr	r2, [r7, #8]
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	4413      	add	r3, r2
 8013a12:	7819      	ldrb	r1, [r3, #0]
 8013a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	4413      	add	r3, r2
 8013a1a:	3334      	adds	r3, #52	@ 0x34
 8013a1c:	460a      	mov	r2, r1
 8013a1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013a20:	68ba      	ldr	r2, [r7, #8]
 8013a22:	69fb      	ldr	r3, [r7, #28]
 8013a24:	4413      	add	r3, r2
 8013a26:	781b      	ldrb	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d006      	beq.n	8013a3a <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	61fb      	str	r3, [r7, #28]
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	2b0f      	cmp	r3, #15
 8013a36:	d9e9      	bls.n	8013a0c <prvInitialiseNewTask+0x6a>
 8013a38:	e000      	b.n	8013a3c <prvInitialiseNewTask+0x9a>
			{
				break;
 8013a3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a3e:	2200      	movs	r2, #0
 8013a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8013a44:	e003      	b.n	8013a4e <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a48:	2200      	movs	r2, #0
 8013a4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	2b0b      	cmp	r3, #11
 8013a52:	d901      	bls.n	8013a58 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013a54:	230b      	movs	r3, #11
 8013a56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a62:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a66:	2200      	movs	r2, #0
 8013a68:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a6c:	3304      	adds	r3, #4
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f7fe ff2a 	bl	80128c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a76:	3318      	adds	r3, #24
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe ff25 	bl	80128c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a86:	f1c3 020c 	rsb	r2, r3, #12
 8013a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a96:	2200      	movs	r2, #0
 8013a98:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a9c:	2200      	movs	r2, #0
 8013a9e:	659a      	str	r2, [r3, #88]	@ 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013aa8:	683a      	ldr	r2, [r7, #0]
 8013aaa:	68f9      	ldr	r1, [r7, #12]
 8013aac:	69b8      	ldr	r0, [r7, #24]
 8013aae:	f001 f82b 	bl	8014b08 <pxPortInitialiseStack>
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ab6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d002      	beq.n	8013ac4 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ac0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013ac2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013ac4:	bf00      	nop
 8013ac6:	3720      	adds	r7, #32
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}

08013acc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013ad4:	f001 f92a 	bl	8014d2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8013b8c <prvAddNewTaskToReadyList+0xc0>)
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	3301      	adds	r3, #1
 8013ade:	4a2b      	ldr	r2, [pc, #172]	@ (8013b8c <prvAddNewTaskToReadyList+0xc0>)
 8013ae0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8013b90 <prvAddNewTaskToReadyList+0xc4>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d109      	bne.n	8013afe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013aea:	4a29      	ldr	r2, [pc, #164]	@ (8013b90 <prvAddNewTaskToReadyList+0xc4>)
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013af0:	4b26      	ldr	r3, [pc, #152]	@ (8013b8c <prvAddNewTaskToReadyList+0xc0>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	2b01      	cmp	r3, #1
 8013af6:	d110      	bne.n	8013b1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013af8:	f000 fcea 	bl	80144d0 <prvInitialiseTaskLists>
 8013afc:	e00d      	b.n	8013b1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013afe:	4b25      	ldr	r3, [pc, #148]	@ (8013b94 <prvAddNewTaskToReadyList+0xc8>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d109      	bne.n	8013b1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013b06:	4b22      	ldr	r3, [pc, #136]	@ (8013b90 <prvAddNewTaskToReadyList+0xc4>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b10:	429a      	cmp	r2, r3
 8013b12:	d802      	bhi.n	8013b1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013b14:	4a1e      	ldr	r2, [pc, #120]	@ (8013b90 <prvAddNewTaskToReadyList+0xc4>)
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8013b98 <prvAddNewTaskToReadyList+0xcc>)
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3301      	adds	r3, #1
 8013b20:	4a1d      	ldr	r2, [pc, #116]	@ (8013b98 <prvAddNewTaskToReadyList+0xcc>)
 8013b22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013b24:	4b1c      	ldr	r3, [pc, #112]	@ (8013b98 <prvAddNewTaskToReadyList+0xcc>)
 8013b26:	681a      	ldr	r2, [r3, #0]
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b30:	2201      	movs	r2, #1
 8013b32:	409a      	lsls	r2, r3
 8013b34:	4b19      	ldr	r3, [pc, #100]	@ (8013b9c <prvAddNewTaskToReadyList+0xd0>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	4313      	orrs	r3, r2
 8013b3a:	4a18      	ldr	r2, [pc, #96]	@ (8013b9c <prvAddNewTaskToReadyList+0xd0>)
 8013b3c:	6013      	str	r3, [r2, #0]
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b42:	4613      	mov	r3, r2
 8013b44:	009b      	lsls	r3, r3, #2
 8013b46:	4413      	add	r3, r2
 8013b48:	009b      	lsls	r3, r3, #2
 8013b4a:	4a15      	ldr	r2, [pc, #84]	@ (8013ba0 <prvAddNewTaskToReadyList+0xd4>)
 8013b4c:	441a      	add	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	3304      	adds	r3, #4
 8013b52:	4619      	mov	r1, r3
 8013b54:	4610      	mov	r0, r2
 8013b56:	f7fe fec4 	bl	80128e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013b5a:	f001 f91d 	bl	8014d98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8013b94 <prvAddNewTaskToReadyList+0xc8>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d00e      	beq.n	8013b84 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b66:	4b0a      	ldr	r3, [pc, #40]	@ (8013b90 <prvAddNewTaskToReadyList+0xc4>)
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d207      	bcs.n	8013b84 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b74:	4b0b      	ldr	r3, [pc, #44]	@ (8013ba4 <prvAddNewTaskToReadyList+0xd8>)
 8013b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013b7a:	601a      	str	r2, [r3, #0]
 8013b7c:	f3bf 8f4f 	dsb	sy
 8013b80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b84:	bf00      	nop
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}
 8013b8c:	20006524 	.word	0x20006524
 8013b90:	200063c0 	.word	0x200063c0
 8013b94:	20006530 	.word	0x20006530
 8013b98:	20006540 	.word	0x20006540
 8013b9c:	2000652c 	.word	0x2000652c
 8013ba0:	200063c4 	.word	0x200063c4
 8013ba4:	e000ed04 	.word	0xe000ed04

08013ba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b084      	sub	sp, #16
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d01a      	beq.n	8013bf0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013bba:	4b15      	ldr	r3, [pc, #84]	@ (8013c10 <vTaskDelay+0x68>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d00d      	beq.n	8013bde <vTaskDelay+0x36>
	__asm volatile
 8013bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013bc6:	b672      	cpsid	i
 8013bc8:	f383 8811 	msr	BASEPRI, r3
 8013bcc:	f3bf 8f6f 	isb	sy
 8013bd0:	f3bf 8f4f 	dsb	sy
 8013bd4:	b662      	cpsie	i
 8013bd6:	60bb      	str	r3, [r7, #8]
}
 8013bd8:	bf00      	nop
 8013bda:	bf00      	nop
 8013bdc:	e7fd      	b.n	8013bda <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013bde:	f000 f883 	bl	8013ce8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013be2:	2100      	movs	r1, #0
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 ff29 	bl	8014a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013bea:	f000 f88b 	bl	8013d04 <xTaskResumeAll>
 8013bee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d107      	bne.n	8013c06 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8013bf6:	4b07      	ldr	r3, [pc, #28]	@ (8013c14 <vTaskDelay+0x6c>)
 8013bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013bfc:	601a      	str	r2, [r3, #0]
 8013bfe:	f3bf 8f4f 	dsb	sy
 8013c02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013c06:	bf00      	nop
 8013c08:	3710      	adds	r7, #16
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	2000654c 	.word	0x2000654c
 8013c14:	e000ed04 	.word	0xe000ed04

08013c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b08a      	sub	sp, #40	@ 0x28
 8013c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013c22:	2300      	movs	r3, #0
 8013c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013c26:	463a      	mov	r2, r7
 8013c28:	1d39      	adds	r1, r7, #4
 8013c2a:	f107 0308 	add.w	r3, r7, #8
 8013c2e:	4618      	mov	r0, r3
 8013c30:	f7f1 f892 	bl	8004d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013c34:	6839      	ldr	r1, [r7, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	68ba      	ldr	r2, [r7, #8]
 8013c3a:	9202      	str	r2, [sp, #8]
 8013c3c:	9301      	str	r3, [sp, #4]
 8013c3e:	2300      	movs	r3, #0
 8013c40:	9300      	str	r3, [sp, #0]
 8013c42:	2300      	movs	r3, #0
 8013c44:	460a      	mov	r2, r1
 8013c46:	4922      	ldr	r1, [pc, #136]	@ (8013cd0 <vTaskStartScheduler+0xb8>)
 8013c48:	4822      	ldr	r0, [pc, #136]	@ (8013cd4 <vTaskStartScheduler+0xbc>)
 8013c4a:	f7ff fdff 	bl	801384c <xTaskCreateStatic>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	4a21      	ldr	r2, [pc, #132]	@ (8013cd8 <vTaskStartScheduler+0xc0>)
 8013c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013c54:	4b20      	ldr	r3, [pc, #128]	@ (8013cd8 <vTaskStartScheduler+0xc0>)
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d002      	beq.n	8013c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013c5c:	2301      	movs	r3, #1
 8013c5e:	617b      	str	r3, [r7, #20]
 8013c60:	e001      	b.n	8013c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013c62:	2300      	movs	r3, #0
 8013c64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	2b01      	cmp	r3, #1
 8013c6a:	d11a      	bne.n	8013ca2 <vTaskStartScheduler+0x8a>
	__asm volatile
 8013c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013c70:	b672      	cpsid	i
 8013c72:	f383 8811 	msr	BASEPRI, r3
 8013c76:	f3bf 8f6f 	isb	sy
 8013c7a:	f3bf 8f4f 	dsb	sy
 8013c7e:	b662      	cpsie	i
 8013c80:	613b      	str	r3, [r7, #16]
}
 8013c82:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013c84:	4b15      	ldr	r3, [pc, #84]	@ (8013cdc <vTaskStartScheduler+0xc4>)
 8013c86:	f04f 32ff 	mov.w	r2, #4294967295
 8013c8a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013c8c:	4b14      	ldr	r3, [pc, #80]	@ (8013ce0 <vTaskStartScheduler+0xc8>)
 8013c8e:	2201      	movs	r2, #1
 8013c90:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013c92:	4b14      	ldr	r3, [pc, #80]	@ (8013ce4 <vTaskStartScheduler+0xcc>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013c98:	f7f1 f844 	bl	8004d24 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013c9c:	f000 ffc8 	bl	8014c30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013ca0:	e011      	b.n	8013cc6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ca8:	d10d      	bne.n	8013cc6 <vTaskStartScheduler+0xae>
	__asm volatile
 8013caa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013cae:	b672      	cpsid	i
 8013cb0:	f383 8811 	msr	BASEPRI, r3
 8013cb4:	f3bf 8f6f 	isb	sy
 8013cb8:	f3bf 8f4f 	dsb	sy
 8013cbc:	b662      	cpsie	i
 8013cbe:	60fb      	str	r3, [r7, #12]
}
 8013cc0:	bf00      	nop
 8013cc2:	bf00      	nop
 8013cc4:	e7fd      	b.n	8013cc2 <vTaskStartScheduler+0xaa>
}
 8013cc6:	bf00      	nop
 8013cc8:	3718      	adds	r7, #24
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}
 8013cce:	bf00      	nop
 8013cd0:	08018930 	.word	0x08018930
 8013cd4:	080144a1 	.word	0x080144a1
 8013cd8:	20006548 	.word	0x20006548
 8013cdc:	20006544 	.word	0x20006544
 8013ce0:	20006530 	.word	0x20006530
 8013ce4:	20006528 	.word	0x20006528

08013ce8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013ce8:	b480      	push	{r7}
 8013cea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013cec:	4b04      	ldr	r3, [pc, #16]	@ (8013d00 <vTaskSuspendAll+0x18>)
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	3301      	adds	r3, #1
 8013cf2:	4a03      	ldr	r2, [pc, #12]	@ (8013d00 <vTaskSuspendAll+0x18>)
 8013cf4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013cf6:	bf00      	nop
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cfe:	4770      	bx	lr
 8013d00:	2000654c 	.word	0x2000654c

08013d04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b084      	sub	sp, #16
 8013d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013d12:	4b43      	ldr	r3, [pc, #268]	@ (8013e20 <xTaskResumeAll+0x11c>)
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d10d      	bne.n	8013d36 <xTaskResumeAll+0x32>
	__asm volatile
 8013d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013d1e:	b672      	cpsid	i
 8013d20:	f383 8811 	msr	BASEPRI, r3
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	f3bf 8f4f 	dsb	sy
 8013d2c:	b662      	cpsie	i
 8013d2e:	603b      	str	r3, [r7, #0]
}
 8013d30:	bf00      	nop
 8013d32:	bf00      	nop
 8013d34:	e7fd      	b.n	8013d32 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013d36:	f000 fff9 	bl	8014d2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013d3a:	4b39      	ldr	r3, [pc, #228]	@ (8013e20 <xTaskResumeAll+0x11c>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	3b01      	subs	r3, #1
 8013d40:	4a37      	ldr	r2, [pc, #220]	@ (8013e20 <xTaskResumeAll+0x11c>)
 8013d42:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013d44:	4b36      	ldr	r3, [pc, #216]	@ (8013e20 <xTaskResumeAll+0x11c>)
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d161      	bne.n	8013e10 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013d4c:	4b35      	ldr	r3, [pc, #212]	@ (8013e24 <xTaskResumeAll+0x120>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d05d      	beq.n	8013e10 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013d54:	e02e      	b.n	8013db4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d56:	4b34      	ldr	r3, [pc, #208]	@ (8013e28 <xTaskResumeAll+0x124>)
 8013d58:	68db      	ldr	r3, [r3, #12]
 8013d5a:	68db      	ldr	r3, [r3, #12]
 8013d5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	3318      	adds	r3, #24
 8013d62:	4618      	mov	r0, r3
 8013d64:	f7fe fe1a 	bl	801299c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	3304      	adds	r3, #4
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	f7fe fe15 	bl	801299c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d76:	2201      	movs	r2, #1
 8013d78:	409a      	lsls	r2, r3
 8013d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8013e2c <xTaskResumeAll+0x128>)
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4313      	orrs	r3, r2
 8013d80:	4a2a      	ldr	r2, [pc, #168]	@ (8013e2c <xTaskResumeAll+0x128>)
 8013d82:	6013      	str	r3, [r2, #0]
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013d88:	4613      	mov	r3, r2
 8013d8a:	009b      	lsls	r3, r3, #2
 8013d8c:	4413      	add	r3, r2
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	4a27      	ldr	r2, [pc, #156]	@ (8013e30 <xTaskResumeAll+0x12c>)
 8013d92:	441a      	add	r2, r3
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	3304      	adds	r3, #4
 8013d98:	4619      	mov	r1, r3
 8013d9a:	4610      	mov	r0, r2
 8013d9c:	f7fe fda1 	bl	80128e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013da4:	4b23      	ldr	r3, [pc, #140]	@ (8013e34 <xTaskResumeAll+0x130>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013daa:	429a      	cmp	r2, r3
 8013dac:	d302      	bcc.n	8013db4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8013dae:	4b22      	ldr	r3, [pc, #136]	@ (8013e38 <xTaskResumeAll+0x134>)
 8013db0:	2201      	movs	r2, #1
 8013db2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013db4:	4b1c      	ldr	r3, [pc, #112]	@ (8013e28 <xTaskResumeAll+0x124>)
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1cc      	bne.n	8013d56 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d001      	beq.n	8013dc6 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013dc2:	f000 fc25 	bl	8014610 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8013e3c <xTaskResumeAll+0x138>)
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d010      	beq.n	8013df4 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013dd2:	f000 f847 	bl	8013e64 <xTaskIncrementTick>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d002      	beq.n	8013de2 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8013ddc:	4b16      	ldr	r3, [pc, #88]	@ (8013e38 <xTaskResumeAll+0x134>)
 8013dde:	2201      	movs	r2, #1
 8013de0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	3b01      	subs	r3, #1
 8013de6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d1f1      	bne.n	8013dd2 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8013dee:	4b13      	ldr	r3, [pc, #76]	@ (8013e3c <xTaskResumeAll+0x138>)
 8013df0:	2200      	movs	r2, #0
 8013df2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013df4:	4b10      	ldr	r3, [pc, #64]	@ (8013e38 <xTaskResumeAll+0x134>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d009      	beq.n	8013e10 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013dfc:	2301      	movs	r3, #1
 8013dfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013e00:	4b0f      	ldr	r3, [pc, #60]	@ (8013e40 <xTaskResumeAll+0x13c>)
 8013e02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013e06:	601a      	str	r2, [r3, #0]
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013e10:	f000 ffc2 	bl	8014d98 <vPortExitCritical>

	return xAlreadyYielded;
 8013e14:	68bb      	ldr	r3, [r7, #8]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3710      	adds	r7, #16
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	2000654c 	.word	0x2000654c
 8013e24:	20006524 	.word	0x20006524
 8013e28:	200064e4 	.word	0x200064e4
 8013e2c:	2000652c 	.word	0x2000652c
 8013e30:	200063c4 	.word	0x200063c4
 8013e34:	200063c0 	.word	0x200063c0
 8013e38:	20006538 	.word	0x20006538
 8013e3c:	20006534 	.word	0x20006534
 8013e40:	e000ed04 	.word	0xe000ed04

08013e44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013e44:	b480      	push	{r7}
 8013e46:	b083      	sub	sp, #12
 8013e48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013e4a:	4b05      	ldr	r3, [pc, #20]	@ (8013e60 <xTaskGetTickCount+0x1c>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013e50:	687b      	ldr	r3, [r7, #4]
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr
 8013e5e:	bf00      	nop
 8013e60:	20006528 	.word	0x20006528

08013e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b086      	sub	sp, #24
 8013e68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013e6e:	4b50      	ldr	r3, [pc, #320]	@ (8013fb0 <xTaskIncrementTick+0x14c>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	f040 808b 	bne.w	8013f8e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013e78:	4b4e      	ldr	r3, [pc, #312]	@ (8013fb4 <xTaskIncrementTick+0x150>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	3301      	adds	r3, #1
 8013e7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013e80:	4a4c      	ldr	r2, [pc, #304]	@ (8013fb4 <xTaskIncrementTick+0x150>)
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013e86:	693b      	ldr	r3, [r7, #16]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d123      	bne.n	8013ed4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8013e8c:	4b4a      	ldr	r3, [pc, #296]	@ (8013fb8 <xTaskIncrementTick+0x154>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d00d      	beq.n	8013eb2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8013e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e9a:	b672      	cpsid	i
 8013e9c:	f383 8811 	msr	BASEPRI, r3
 8013ea0:	f3bf 8f6f 	isb	sy
 8013ea4:	f3bf 8f4f 	dsb	sy
 8013ea8:	b662      	cpsie	i
 8013eaa:	603b      	str	r3, [r7, #0]
}
 8013eac:	bf00      	nop
 8013eae:	bf00      	nop
 8013eb0:	e7fd      	b.n	8013eae <xTaskIncrementTick+0x4a>
 8013eb2:	4b41      	ldr	r3, [pc, #260]	@ (8013fb8 <xTaskIncrementTick+0x154>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	60fb      	str	r3, [r7, #12]
 8013eb8:	4b40      	ldr	r3, [pc, #256]	@ (8013fbc <xTaskIncrementTick+0x158>)
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8013fb8 <xTaskIncrementTick+0x154>)
 8013ebe:	6013      	str	r3, [r2, #0]
 8013ec0:	4a3e      	ldr	r2, [pc, #248]	@ (8013fbc <xTaskIncrementTick+0x158>)
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	6013      	str	r3, [r2, #0]
 8013ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8013fc0 <xTaskIncrementTick+0x15c>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8013fc0 <xTaskIncrementTick+0x15c>)
 8013ece:	6013      	str	r3, [r2, #0]
 8013ed0:	f000 fb9e 	bl	8014610 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8013fc4 <xTaskIncrementTick+0x160>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	693a      	ldr	r2, [r7, #16]
 8013eda:	429a      	cmp	r2, r3
 8013edc:	d348      	bcc.n	8013f70 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013ede:	4b36      	ldr	r3, [pc, #216]	@ (8013fb8 <xTaskIncrementTick+0x154>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d104      	bne.n	8013ef2 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013ee8:	4b36      	ldr	r3, [pc, #216]	@ (8013fc4 <xTaskIncrementTick+0x160>)
 8013eea:	f04f 32ff 	mov.w	r2, #4294967295
 8013eee:	601a      	str	r2, [r3, #0]
					break;
 8013ef0:	e03e      	b.n	8013f70 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef2:	4b31      	ldr	r3, [pc, #196]	@ (8013fb8 <xTaskIncrementTick+0x154>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	68db      	ldr	r3, [r3, #12]
 8013efa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013efc:	68bb      	ldr	r3, [r7, #8]
 8013efe:	685b      	ldr	r3, [r3, #4]
 8013f00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013f02:	693a      	ldr	r2, [r7, #16]
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d203      	bcs.n	8013f12 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013f0a:	4a2e      	ldr	r2, [pc, #184]	@ (8013fc4 <xTaskIncrementTick+0x160>)
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013f10:	e02e      	b.n	8013f70 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f12:	68bb      	ldr	r3, [r7, #8]
 8013f14:	3304      	adds	r3, #4
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fd40 	bl	801299c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013f1c:	68bb      	ldr	r3, [r7, #8]
 8013f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d004      	beq.n	8013f2e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	3318      	adds	r3, #24
 8013f28:	4618      	mov	r0, r3
 8013f2a:	f7fe fd37 	bl	801299c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f32:	2201      	movs	r2, #1
 8013f34:	409a      	lsls	r2, r3
 8013f36:	4b24      	ldr	r3, [pc, #144]	@ (8013fc8 <xTaskIncrementTick+0x164>)
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	4a22      	ldr	r2, [pc, #136]	@ (8013fc8 <xTaskIncrementTick+0x164>)
 8013f3e:	6013      	str	r3, [r2, #0]
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f44:	4613      	mov	r3, r2
 8013f46:	009b      	lsls	r3, r3, #2
 8013f48:	4413      	add	r3, r2
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8013fcc <xTaskIncrementTick+0x168>)
 8013f4e:	441a      	add	r2, r3
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	3304      	adds	r3, #4
 8013f54:	4619      	mov	r1, r3
 8013f56:	4610      	mov	r0, r2
 8013f58:	f7fe fcc3 	bl	80128e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f60:	4b1b      	ldr	r3, [pc, #108]	@ (8013fd0 <xTaskIncrementTick+0x16c>)
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d3b9      	bcc.n	8013ede <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013f6e:	e7b6      	b.n	8013ede <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013f70:	4b17      	ldr	r3, [pc, #92]	@ (8013fd0 <xTaskIncrementTick+0x16c>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013f76:	4915      	ldr	r1, [pc, #84]	@ (8013fcc <xTaskIncrementTick+0x168>)
 8013f78:	4613      	mov	r3, r2
 8013f7a:	009b      	lsls	r3, r3, #2
 8013f7c:	4413      	add	r3, r2
 8013f7e:	009b      	lsls	r3, r3, #2
 8013f80:	440b      	add	r3, r1
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	2b01      	cmp	r3, #1
 8013f86:	d907      	bls.n	8013f98 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8013f88:	2301      	movs	r3, #1
 8013f8a:	617b      	str	r3, [r7, #20]
 8013f8c:	e004      	b.n	8013f98 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013f8e:	4b11      	ldr	r3, [pc, #68]	@ (8013fd4 <xTaskIncrementTick+0x170>)
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	3301      	adds	r3, #1
 8013f94:	4a0f      	ldr	r2, [pc, #60]	@ (8013fd4 <xTaskIncrementTick+0x170>)
 8013f96:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013f98:	4b0f      	ldr	r3, [pc, #60]	@ (8013fd8 <xTaskIncrementTick+0x174>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d001      	beq.n	8013fa4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8013fa0:	2301      	movs	r3, #1
 8013fa2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013fa4:	697b      	ldr	r3, [r7, #20]
}
 8013fa6:	4618      	mov	r0, r3
 8013fa8:	3718      	adds	r7, #24
 8013faa:	46bd      	mov	sp, r7
 8013fac:	bd80      	pop	{r7, pc}
 8013fae:	bf00      	nop
 8013fb0:	2000654c 	.word	0x2000654c
 8013fb4:	20006528 	.word	0x20006528
 8013fb8:	200064dc 	.word	0x200064dc
 8013fbc:	200064e0 	.word	0x200064e0
 8013fc0:	2000653c 	.word	0x2000653c
 8013fc4:	20006544 	.word	0x20006544
 8013fc8:	2000652c 	.word	0x2000652c
 8013fcc:	200063c4 	.word	0x200063c4
 8013fd0:	200063c0 	.word	0x200063c0
 8013fd4:	20006534 	.word	0x20006534
 8013fd8:	20006538 	.word	0x20006538

08013fdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b088      	sub	sp, #32
 8013fe0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013fe2:	4b47      	ldr	r3, [pc, #284]	@ (8014100 <vTaskSwitchContext+0x124>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d003      	beq.n	8013ff2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013fea:	4b46      	ldr	r3, [pc, #280]	@ (8014104 <vTaskSwitchContext+0x128>)
 8013fec:	2201      	movs	r2, #1
 8013fee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013ff0:	e082      	b.n	80140f8 <vTaskSwitchContext+0x11c>
		xYieldPending = pdFALSE;
 8013ff2:	4b44      	ldr	r3, [pc, #272]	@ (8014104 <vTaskSwitchContext+0x128>)
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013ff8:	f7f0 fe9b 	bl	8004d32 <getRunTimeCounterValue>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	4a42      	ldr	r2, [pc, #264]	@ (8014108 <vTaskSwitchContext+0x12c>)
 8014000:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8014002:	4b41      	ldr	r3, [pc, #260]	@ (8014108 <vTaskSwitchContext+0x12c>)
 8014004:	681a      	ldr	r2, [r3, #0]
 8014006:	4b41      	ldr	r3, [pc, #260]	@ (801410c <vTaskSwitchContext+0x130>)
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	429a      	cmp	r2, r3
 801400c:	d909      	bls.n	8014022 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801400e:	4b40      	ldr	r3, [pc, #256]	@ (8014110 <vTaskSwitchContext+0x134>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014014:	4a3c      	ldr	r2, [pc, #240]	@ (8014108 <vTaskSwitchContext+0x12c>)
 8014016:	6810      	ldr	r0, [r2, #0]
 8014018:	4a3c      	ldr	r2, [pc, #240]	@ (801410c <vTaskSwitchContext+0x130>)
 801401a:	6812      	ldr	r2, [r2, #0]
 801401c:	1a82      	subs	r2, r0, r2
 801401e:	440a      	add	r2, r1
 8014020:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8014022:	4b39      	ldr	r3, [pc, #228]	@ (8014108 <vTaskSwitchContext+0x12c>)
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	4a39      	ldr	r2, [pc, #228]	@ (801410c <vTaskSwitchContext+0x130>)
 8014028:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801402a:	4b39      	ldr	r3, [pc, #228]	@ (8014110 <vTaskSwitchContext+0x134>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014030:	61fb      	str	r3, [r7, #28]
 8014032:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8014036:	61bb      	str	r3, [r7, #24]
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	69ba      	ldr	r2, [r7, #24]
 801403e:	429a      	cmp	r2, r3
 8014040:	d111      	bne.n	8014066 <vTaskSwitchContext+0x8a>
 8014042:	69fb      	ldr	r3, [r7, #28]
 8014044:	3304      	adds	r3, #4
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	69ba      	ldr	r2, [r7, #24]
 801404a:	429a      	cmp	r2, r3
 801404c:	d10b      	bne.n	8014066 <vTaskSwitchContext+0x8a>
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	3308      	adds	r3, #8
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	69ba      	ldr	r2, [r7, #24]
 8014056:	429a      	cmp	r2, r3
 8014058:	d105      	bne.n	8014066 <vTaskSwitchContext+0x8a>
 801405a:	69fb      	ldr	r3, [r7, #28]
 801405c:	330c      	adds	r3, #12
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	69ba      	ldr	r2, [r7, #24]
 8014062:	429a      	cmp	r2, r3
 8014064:	d008      	beq.n	8014078 <vTaskSwitchContext+0x9c>
 8014066:	4b2a      	ldr	r3, [pc, #168]	@ (8014110 <vTaskSwitchContext+0x134>)
 8014068:	681a      	ldr	r2, [r3, #0]
 801406a:	4b29      	ldr	r3, [pc, #164]	@ (8014110 <vTaskSwitchContext+0x134>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	3334      	adds	r3, #52	@ 0x34
 8014070:	4619      	mov	r1, r3
 8014072:	4610      	mov	r0, r2
 8014074:	f7f0 fe65 	bl	8004d42 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014078:	4b26      	ldr	r3, [pc, #152]	@ (8014114 <vTaskSwitchContext+0x138>)
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	fab3 f383 	clz	r3, r3
 8014084:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8014086:	7afb      	ldrb	r3, [r7, #11]
 8014088:	f1c3 031f 	rsb	r3, r3, #31
 801408c:	617b      	str	r3, [r7, #20]
 801408e:	4922      	ldr	r1, [pc, #136]	@ (8014118 <vTaskSwitchContext+0x13c>)
 8014090:	697a      	ldr	r2, [r7, #20]
 8014092:	4613      	mov	r3, r2
 8014094:	009b      	lsls	r3, r3, #2
 8014096:	4413      	add	r3, r2
 8014098:	009b      	lsls	r3, r3, #2
 801409a:	440b      	add	r3, r1
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d10d      	bne.n	80140be <vTaskSwitchContext+0xe2>
	__asm volatile
 80140a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80140a6:	b672      	cpsid	i
 80140a8:	f383 8811 	msr	BASEPRI, r3
 80140ac:	f3bf 8f6f 	isb	sy
 80140b0:	f3bf 8f4f 	dsb	sy
 80140b4:	b662      	cpsie	i
 80140b6:	607b      	str	r3, [r7, #4]
}
 80140b8:	bf00      	nop
 80140ba:	bf00      	nop
 80140bc:	e7fd      	b.n	80140ba <vTaskSwitchContext+0xde>
 80140be:	697a      	ldr	r2, [r7, #20]
 80140c0:	4613      	mov	r3, r2
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4413      	add	r3, r2
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	4a13      	ldr	r2, [pc, #76]	@ (8014118 <vTaskSwitchContext+0x13c>)
 80140ca:	4413      	add	r3, r2
 80140cc:	613b      	str	r3, [r7, #16]
 80140ce:	693b      	ldr	r3, [r7, #16]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	685a      	ldr	r2, [r3, #4]
 80140d4:	693b      	ldr	r3, [r7, #16]
 80140d6:	605a      	str	r2, [r3, #4]
 80140d8:	693b      	ldr	r3, [r7, #16]
 80140da:	685a      	ldr	r2, [r3, #4]
 80140dc:	693b      	ldr	r3, [r7, #16]
 80140de:	3308      	adds	r3, #8
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d104      	bne.n	80140ee <vTaskSwitchContext+0x112>
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	685a      	ldr	r2, [r3, #4]
 80140ea:	693b      	ldr	r3, [r7, #16]
 80140ec:	605a      	str	r2, [r3, #4]
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	68db      	ldr	r3, [r3, #12]
 80140f4:	4a06      	ldr	r2, [pc, #24]	@ (8014110 <vTaskSwitchContext+0x134>)
 80140f6:	6013      	str	r3, [r2, #0]
}
 80140f8:	bf00      	nop
 80140fa:	3720      	adds	r7, #32
 80140fc:	46bd      	mov	sp, r7
 80140fe:	bd80      	pop	{r7, pc}
 8014100:	2000654c 	.word	0x2000654c
 8014104:	20006538 	.word	0x20006538
 8014108:	20006554 	.word	0x20006554
 801410c:	20006550 	.word	0x20006550
 8014110:	200063c0 	.word	0x200063c0
 8014114:	2000652c 	.word	0x2000652c
 8014118:	200063c4 	.word	0x200063c4

0801411c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
 8014124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d10d      	bne.n	8014148 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 801412c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014130:	b672      	cpsid	i
 8014132:	f383 8811 	msr	BASEPRI, r3
 8014136:	f3bf 8f6f 	isb	sy
 801413a:	f3bf 8f4f 	dsb	sy
 801413e:	b662      	cpsie	i
 8014140:	60fb      	str	r3, [r7, #12]
}
 8014142:	bf00      	nop
 8014144:	bf00      	nop
 8014146:	e7fd      	b.n	8014144 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014148:	4b07      	ldr	r3, [pc, #28]	@ (8014168 <vTaskPlaceOnEventList+0x4c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	3318      	adds	r3, #24
 801414e:	4619      	mov	r1, r3
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f7fe fbea 	bl	801292a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014156:	2101      	movs	r1, #1
 8014158:	6838      	ldr	r0, [r7, #0]
 801415a:	f000 fc6f 	bl	8014a3c <prvAddCurrentTaskToDelayedList>
}
 801415e:	bf00      	nop
 8014160:	3710      	adds	r7, #16
 8014162:	46bd      	mov	sp, r7
 8014164:	bd80      	pop	{r7, pc}
 8014166:	bf00      	nop
 8014168:	200063c0 	.word	0x200063c0

0801416c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b086      	sub	sp, #24
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	60b9      	str	r1, [r7, #8]
 8014176:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d10d      	bne.n	801419a <vTaskPlaceOnUnorderedEventList+0x2e>
	__asm volatile
 801417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014182:	b672      	cpsid	i
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	b662      	cpsie	i
 8014192:	617b      	str	r3, [r7, #20]
}
 8014194:	bf00      	nop
 8014196:	bf00      	nop
 8014198:	e7fd      	b.n	8014196 <vTaskPlaceOnUnorderedEventList+0x2a>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801419a:	4b13      	ldr	r3, [pc, #76]	@ (80141e8 <vTaskPlaceOnUnorderedEventList+0x7c>)
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d10d      	bne.n	80141be <vTaskPlaceOnUnorderedEventList+0x52>
	__asm volatile
 80141a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141a6:	b672      	cpsid	i
 80141a8:	f383 8811 	msr	BASEPRI, r3
 80141ac:	f3bf 8f6f 	isb	sy
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	b662      	cpsie	i
 80141b6:	613b      	str	r3, [r7, #16]
}
 80141b8:	bf00      	nop
 80141ba:	bf00      	nop
 80141bc:	e7fd      	b.n	80141ba <vTaskPlaceOnUnorderedEventList+0x4e>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80141be:	4b0b      	ldr	r3, [pc, #44]	@ (80141ec <vTaskPlaceOnUnorderedEventList+0x80>)
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	68ba      	ldr	r2, [r7, #8]
 80141c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80141c8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80141ca:	4b08      	ldr	r3, [pc, #32]	@ (80141ec <vTaskPlaceOnUnorderedEventList+0x80>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	3318      	adds	r3, #24
 80141d0:	4619      	mov	r1, r3
 80141d2:	68f8      	ldr	r0, [r7, #12]
 80141d4:	f7fe fb85 	bl	80128e2 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80141d8:	2101      	movs	r1, #1
 80141da:	6878      	ldr	r0, [r7, #4]
 80141dc:	f000 fc2e 	bl	8014a3c <prvAddCurrentTaskToDelayedList>
}
 80141e0:	bf00      	nop
 80141e2:	3718      	adds	r7, #24
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	2000654c 	.word	0x2000654c
 80141ec:	200063c0 	.word	0x200063c0

080141f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b086      	sub	sp, #24
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d10d      	bne.n	8014222 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8014206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801420a:	b672      	cpsid	i
 801420c:	f383 8811 	msr	BASEPRI, r3
 8014210:	f3bf 8f6f 	isb	sy
 8014214:	f3bf 8f4f 	dsb	sy
 8014218:	b662      	cpsie	i
 801421a:	60fb      	str	r3, [r7, #12]
}
 801421c:	bf00      	nop
 801421e:	bf00      	nop
 8014220:	e7fd      	b.n	801421e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014222:	693b      	ldr	r3, [r7, #16]
 8014224:	3318      	adds	r3, #24
 8014226:	4618      	mov	r0, r3
 8014228:	f7fe fbb8 	bl	801299c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801422c:	4b1d      	ldr	r3, [pc, #116]	@ (80142a4 <xTaskRemoveFromEventList+0xb4>)
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d11c      	bne.n	801426e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014234:	693b      	ldr	r3, [r7, #16]
 8014236:	3304      	adds	r3, #4
 8014238:	4618      	mov	r0, r3
 801423a:	f7fe fbaf 	bl	801299c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801423e:	693b      	ldr	r3, [r7, #16]
 8014240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014242:	2201      	movs	r2, #1
 8014244:	409a      	lsls	r2, r3
 8014246:	4b18      	ldr	r3, [pc, #96]	@ (80142a8 <xTaskRemoveFromEventList+0xb8>)
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	4313      	orrs	r3, r2
 801424c:	4a16      	ldr	r2, [pc, #88]	@ (80142a8 <xTaskRemoveFromEventList+0xb8>)
 801424e:	6013      	str	r3, [r2, #0]
 8014250:	693b      	ldr	r3, [r7, #16]
 8014252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014254:	4613      	mov	r3, r2
 8014256:	009b      	lsls	r3, r3, #2
 8014258:	4413      	add	r3, r2
 801425a:	009b      	lsls	r3, r3, #2
 801425c:	4a13      	ldr	r2, [pc, #76]	@ (80142ac <xTaskRemoveFromEventList+0xbc>)
 801425e:	441a      	add	r2, r3
 8014260:	693b      	ldr	r3, [r7, #16]
 8014262:	3304      	adds	r3, #4
 8014264:	4619      	mov	r1, r3
 8014266:	4610      	mov	r0, r2
 8014268:	f7fe fb3b 	bl	80128e2 <vListInsertEnd>
 801426c:	e005      	b.n	801427a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	3318      	adds	r3, #24
 8014272:	4619      	mov	r1, r3
 8014274:	480e      	ldr	r0, [pc, #56]	@ (80142b0 <xTaskRemoveFromEventList+0xc0>)
 8014276:	f7fe fb34 	bl	80128e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801427a:	693b      	ldr	r3, [r7, #16]
 801427c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801427e:	4b0d      	ldr	r3, [pc, #52]	@ (80142b4 <xTaskRemoveFromEventList+0xc4>)
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014284:	429a      	cmp	r2, r3
 8014286:	d905      	bls.n	8014294 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014288:	2301      	movs	r3, #1
 801428a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801428c:	4b0a      	ldr	r3, [pc, #40]	@ (80142b8 <xTaskRemoveFromEventList+0xc8>)
 801428e:	2201      	movs	r2, #1
 8014290:	601a      	str	r2, [r3, #0]
 8014292:	e001      	b.n	8014298 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8014294:	2300      	movs	r3, #0
 8014296:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014298:	697b      	ldr	r3, [r7, #20]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3718      	adds	r7, #24
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}
 80142a2:	bf00      	nop
 80142a4:	2000654c 	.word	0x2000654c
 80142a8:	2000652c 	.word	0x2000652c
 80142ac:	200063c4 	.word	0x200063c4
 80142b0:	200064e4 	.word	0x200064e4
 80142b4:	200063c0 	.word	0x200063c0
 80142b8:	20006538 	.word	0x20006538

080142bc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b086      	sub	sp, #24
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80142c6:	4b2c      	ldr	r3, [pc, #176]	@ (8014378 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d10d      	bne.n	80142ea <vTaskRemoveFromUnorderedEventList+0x2e>
	__asm volatile
 80142ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80142d2:	b672      	cpsid	i
 80142d4:	f383 8811 	msr	BASEPRI, r3
 80142d8:	f3bf 8f6f 	isb	sy
 80142dc:	f3bf 8f4f 	dsb	sy
 80142e0:	b662      	cpsie	i
 80142e2:	613b      	str	r3, [r7, #16]
}
 80142e4:	bf00      	nop
 80142e6:	bf00      	nop
 80142e8:	e7fd      	b.n	80142e6 <vTaskRemoveFromUnorderedEventList+0x2a>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	68db      	ldr	r3, [r3, #12]
 80142f8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80142fa:	697b      	ldr	r3, [r7, #20]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d10d      	bne.n	801431c <vTaskRemoveFromUnorderedEventList+0x60>
	__asm volatile
 8014300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014304:	b672      	cpsid	i
 8014306:	f383 8811 	msr	BASEPRI, r3
 801430a:	f3bf 8f6f 	isb	sy
 801430e:	f3bf 8f4f 	dsb	sy
 8014312:	b662      	cpsie	i
 8014314:	60fb      	str	r3, [r7, #12]
}
 8014316:	bf00      	nop
 8014318:	bf00      	nop
 801431a:	e7fd      	b.n	8014318 <vTaskRemoveFromUnorderedEventList+0x5c>
	( void ) uxListRemove( pxEventListItem );
 801431c:	6878      	ldr	r0, [r7, #4]
 801431e:	f7fe fb3d 	bl	801299c <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014322:	697b      	ldr	r3, [r7, #20]
 8014324:	3304      	adds	r3, #4
 8014326:	4618      	mov	r0, r3
 8014328:	f7fe fb38 	bl	801299c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014330:	2201      	movs	r2, #1
 8014332:	409a      	lsls	r2, r3
 8014334:	4b11      	ldr	r3, [pc, #68]	@ (801437c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	4313      	orrs	r3, r2
 801433a:	4a10      	ldr	r2, [pc, #64]	@ (801437c <vTaskRemoveFromUnorderedEventList+0xc0>)
 801433c:	6013      	str	r3, [r2, #0]
 801433e:	697b      	ldr	r3, [r7, #20]
 8014340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014342:	4613      	mov	r3, r2
 8014344:	009b      	lsls	r3, r3, #2
 8014346:	4413      	add	r3, r2
 8014348:	009b      	lsls	r3, r3, #2
 801434a:	4a0d      	ldr	r2, [pc, #52]	@ (8014380 <vTaskRemoveFromUnorderedEventList+0xc4>)
 801434c:	441a      	add	r2, r3
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	3304      	adds	r3, #4
 8014352:	4619      	mov	r1, r3
 8014354:	4610      	mov	r0, r2
 8014356:	f7fe fac4 	bl	80128e2 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801435e:	4b09      	ldr	r3, [pc, #36]	@ (8014384 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014364:	429a      	cmp	r2, r3
 8014366:	d902      	bls.n	801436e <vTaskRemoveFromUnorderedEventList+0xb2>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014368:	4b07      	ldr	r3, [pc, #28]	@ (8014388 <vTaskRemoveFromUnorderedEventList+0xcc>)
 801436a:	2201      	movs	r2, #1
 801436c:	601a      	str	r2, [r3, #0]
	}
}
 801436e:	bf00      	nop
 8014370:	3718      	adds	r7, #24
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	2000654c 	.word	0x2000654c
 801437c:	2000652c 	.word	0x2000652c
 8014380:	200063c4 	.word	0x200063c4
 8014384:	200063c0 	.word	0x200063c0
 8014388:	20006538 	.word	0x20006538

0801438c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801438c:	b480      	push	{r7}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014394:	4b06      	ldr	r3, [pc, #24]	@ (80143b0 <vTaskInternalSetTimeOutState+0x24>)
 8014396:	681a      	ldr	r2, [r3, #0]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801439c:	4b05      	ldr	r3, [pc, #20]	@ (80143b4 <vTaskInternalSetTimeOutState+0x28>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	605a      	str	r2, [r3, #4]
}
 80143a4:	bf00      	nop
 80143a6:	370c      	adds	r7, #12
 80143a8:	46bd      	mov	sp, r7
 80143aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ae:	4770      	bx	lr
 80143b0:	2000653c 	.word	0x2000653c
 80143b4:	20006528 	.word	0x20006528

080143b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b088      	sub	sp, #32
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d10d      	bne.n	80143e4 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80143c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143cc:	b672      	cpsid	i
 80143ce:	f383 8811 	msr	BASEPRI, r3
 80143d2:	f3bf 8f6f 	isb	sy
 80143d6:	f3bf 8f4f 	dsb	sy
 80143da:	b662      	cpsie	i
 80143dc:	613b      	str	r3, [r7, #16]
}
 80143de:	bf00      	nop
 80143e0:	bf00      	nop
 80143e2:	e7fd      	b.n	80143e0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80143e4:	683b      	ldr	r3, [r7, #0]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d10d      	bne.n	8014406 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80143ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143ee:	b672      	cpsid	i
 80143f0:	f383 8811 	msr	BASEPRI, r3
 80143f4:	f3bf 8f6f 	isb	sy
 80143f8:	f3bf 8f4f 	dsb	sy
 80143fc:	b662      	cpsie	i
 80143fe:	60fb      	str	r3, [r7, #12]
}
 8014400:	bf00      	nop
 8014402:	bf00      	nop
 8014404:	e7fd      	b.n	8014402 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8014406:	f000 fc91 	bl	8014d2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801440a:	4b1d      	ldr	r3, [pc, #116]	@ (8014480 <xTaskCheckForTimeOut+0xc8>)
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	685b      	ldr	r3, [r3, #4]
 8014414:	69ba      	ldr	r2, [r7, #24]
 8014416:	1ad3      	subs	r3, r2, r3
 8014418:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014422:	d102      	bne.n	801442a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014424:	2300      	movs	r3, #0
 8014426:	61fb      	str	r3, [r7, #28]
 8014428:	e023      	b.n	8014472 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	4b15      	ldr	r3, [pc, #84]	@ (8014484 <xTaskCheckForTimeOut+0xcc>)
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	429a      	cmp	r2, r3
 8014434:	d007      	beq.n	8014446 <xTaskCheckForTimeOut+0x8e>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	69ba      	ldr	r2, [r7, #24]
 801443c:	429a      	cmp	r2, r3
 801443e:	d302      	bcc.n	8014446 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014440:	2301      	movs	r3, #1
 8014442:	61fb      	str	r3, [r7, #28]
 8014444:	e015      	b.n	8014472 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014446:	683b      	ldr	r3, [r7, #0]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	697a      	ldr	r2, [r7, #20]
 801444c:	429a      	cmp	r2, r3
 801444e:	d20b      	bcs.n	8014468 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	1ad2      	subs	r2, r2, r3
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7ff ff95 	bl	801438c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014462:	2300      	movs	r3, #0
 8014464:	61fb      	str	r3, [r7, #28]
 8014466:	e004      	b.n	8014472 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	2200      	movs	r2, #0
 801446c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801446e:	2301      	movs	r3, #1
 8014470:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014472:	f000 fc91 	bl	8014d98 <vPortExitCritical>

	return xReturn;
 8014476:	69fb      	ldr	r3, [r7, #28]
}
 8014478:	4618      	mov	r0, r3
 801447a:	3720      	adds	r7, #32
 801447c:	46bd      	mov	sp, r7
 801447e:	bd80      	pop	{r7, pc}
 8014480:	20006528 	.word	0x20006528
 8014484:	2000653c 	.word	0x2000653c

08014488 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014488:	b480      	push	{r7}
 801448a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801448c:	4b03      	ldr	r3, [pc, #12]	@ (801449c <vTaskMissedYield+0x14>)
 801448e:	2201      	movs	r2, #1
 8014490:	601a      	str	r2, [r3, #0]
}
 8014492:	bf00      	nop
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr
 801449c:	20006538 	.word	0x20006538

080144a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144a8:	f000 f852 	bl	8014550 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144ac:	4b06      	ldr	r3, [pc, #24]	@ (80144c8 <prvIdleTask+0x28>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	2b01      	cmp	r3, #1
 80144b2:	d9f9      	bls.n	80144a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144b4:	4b05      	ldr	r3, [pc, #20]	@ (80144cc <prvIdleTask+0x2c>)
 80144b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80144ba:	601a      	str	r2, [r3, #0]
 80144bc:	f3bf 8f4f 	dsb	sy
 80144c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144c4:	e7f0      	b.n	80144a8 <prvIdleTask+0x8>
 80144c6:	bf00      	nop
 80144c8:	200063c4 	.word	0x200063c4
 80144cc:	e000ed04 	.word	0xe000ed04

080144d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144d6:	2300      	movs	r3, #0
 80144d8:	607b      	str	r3, [r7, #4]
 80144da:	e00c      	b.n	80144f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	4613      	mov	r3, r2
 80144e0:	009b      	lsls	r3, r3, #2
 80144e2:	4413      	add	r3, r2
 80144e4:	009b      	lsls	r3, r3, #2
 80144e6:	4a12      	ldr	r2, [pc, #72]	@ (8014530 <prvInitialiseTaskLists+0x60>)
 80144e8:	4413      	add	r3, r2
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe f9cc 	bl	8012888 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	3301      	adds	r3, #1
 80144f4:	607b      	str	r3, [r7, #4]
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	2b0b      	cmp	r3, #11
 80144fa:	d9ef      	bls.n	80144dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80144fc:	480d      	ldr	r0, [pc, #52]	@ (8014534 <prvInitialiseTaskLists+0x64>)
 80144fe:	f7fe f9c3 	bl	8012888 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014502:	480d      	ldr	r0, [pc, #52]	@ (8014538 <prvInitialiseTaskLists+0x68>)
 8014504:	f7fe f9c0 	bl	8012888 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014508:	480c      	ldr	r0, [pc, #48]	@ (801453c <prvInitialiseTaskLists+0x6c>)
 801450a:	f7fe f9bd 	bl	8012888 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801450e:	480c      	ldr	r0, [pc, #48]	@ (8014540 <prvInitialiseTaskLists+0x70>)
 8014510:	f7fe f9ba 	bl	8012888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014514:	480b      	ldr	r0, [pc, #44]	@ (8014544 <prvInitialiseTaskLists+0x74>)
 8014516:	f7fe f9b7 	bl	8012888 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801451a:	4b0b      	ldr	r3, [pc, #44]	@ (8014548 <prvInitialiseTaskLists+0x78>)
 801451c:	4a05      	ldr	r2, [pc, #20]	@ (8014534 <prvInitialiseTaskLists+0x64>)
 801451e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014520:	4b0a      	ldr	r3, [pc, #40]	@ (801454c <prvInitialiseTaskLists+0x7c>)
 8014522:	4a05      	ldr	r2, [pc, #20]	@ (8014538 <prvInitialiseTaskLists+0x68>)
 8014524:	601a      	str	r2, [r3, #0]
}
 8014526:	bf00      	nop
 8014528:	3708      	adds	r7, #8
 801452a:	46bd      	mov	sp, r7
 801452c:	bd80      	pop	{r7, pc}
 801452e:	bf00      	nop
 8014530:	200063c4 	.word	0x200063c4
 8014534:	200064b4 	.word	0x200064b4
 8014538:	200064c8 	.word	0x200064c8
 801453c:	200064e4 	.word	0x200064e4
 8014540:	200064f8 	.word	0x200064f8
 8014544:	20006510 	.word	0x20006510
 8014548:	200064dc 	.word	0x200064dc
 801454c:	200064e0 	.word	0x200064e0

08014550 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	b082      	sub	sp, #8
 8014554:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014556:	e019      	b.n	801458c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014558:	f000 fbe8 	bl	8014d2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801455c:	4b10      	ldr	r3, [pc, #64]	@ (80145a0 <prvCheckTasksWaitingTermination+0x50>)
 801455e:	68db      	ldr	r3, [r3, #12]
 8014560:	68db      	ldr	r3, [r3, #12]
 8014562:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	3304      	adds	r3, #4
 8014568:	4618      	mov	r0, r3
 801456a:	f7fe fa17 	bl	801299c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801456e:	4b0d      	ldr	r3, [pc, #52]	@ (80145a4 <prvCheckTasksWaitingTermination+0x54>)
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	3b01      	subs	r3, #1
 8014574:	4a0b      	ldr	r2, [pc, #44]	@ (80145a4 <prvCheckTasksWaitingTermination+0x54>)
 8014576:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014578:	4b0b      	ldr	r3, [pc, #44]	@ (80145a8 <prvCheckTasksWaitingTermination+0x58>)
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	3b01      	subs	r3, #1
 801457e:	4a0a      	ldr	r2, [pc, #40]	@ (80145a8 <prvCheckTasksWaitingTermination+0x58>)
 8014580:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014582:	f000 fc09 	bl	8014d98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	f000 f810 	bl	80145ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801458c:	4b06      	ldr	r3, [pc, #24]	@ (80145a8 <prvCheckTasksWaitingTermination+0x58>)
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d1e1      	bne.n	8014558 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014594:	bf00      	nop
 8014596:	bf00      	nop
 8014598:	3708      	adds	r7, #8
 801459a:	46bd      	mov	sp, r7
 801459c:	bd80      	pop	{r7, pc}
 801459e:	bf00      	nop
 80145a0:	200064f8 	.word	0x200064f8
 80145a4:	20006524 	.word	0x20006524
 80145a8:	2000650c 	.word	0x2000650c

080145ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d108      	bne.n	80145d0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145c2:	4618      	mov	r0, r3
 80145c4:	f000 fdae 	bl	8015124 <vPortFree>
				vPortFree( pxTCB );
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 fdab 	bl	8015124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80145ce:	e01b      	b.n	8014608 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80145d6:	2b01      	cmp	r3, #1
 80145d8:	d103      	bne.n	80145e2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 fda2 	bl	8015124 <vPortFree>
	}
 80145e0:	e012      	b.n	8014608 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d00d      	beq.n	8014608 <prvDeleteTCB+0x5c>
	__asm volatile
 80145ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145f0:	b672      	cpsid	i
 80145f2:	f383 8811 	msr	BASEPRI, r3
 80145f6:	f3bf 8f6f 	isb	sy
 80145fa:	f3bf 8f4f 	dsb	sy
 80145fe:	b662      	cpsie	i
 8014600:	60fb      	str	r3, [r7, #12]
}
 8014602:	bf00      	nop
 8014604:	bf00      	nop
 8014606:	e7fd      	b.n	8014604 <prvDeleteTCB+0x58>
	}
 8014608:	bf00      	nop
 801460a:	3710      	adds	r7, #16
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}

08014610 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014610:	b480      	push	{r7}
 8014612:	b083      	sub	sp, #12
 8014614:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014616:	4b0c      	ldr	r3, [pc, #48]	@ (8014648 <prvResetNextTaskUnblockTime+0x38>)
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	2b00      	cmp	r3, #0
 801461e:	d104      	bne.n	801462a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014620:	4b0a      	ldr	r3, [pc, #40]	@ (801464c <prvResetNextTaskUnblockTime+0x3c>)
 8014622:	f04f 32ff 	mov.w	r2, #4294967295
 8014626:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014628:	e008      	b.n	801463c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801462a:	4b07      	ldr	r3, [pc, #28]	@ (8014648 <prvResetNextTaskUnblockTime+0x38>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	685b      	ldr	r3, [r3, #4]
 8014638:	4a04      	ldr	r2, [pc, #16]	@ (801464c <prvResetNextTaskUnblockTime+0x3c>)
 801463a:	6013      	str	r3, [r2, #0]
}
 801463c:	bf00      	nop
 801463e:	370c      	adds	r7, #12
 8014640:	46bd      	mov	sp, r7
 8014642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014646:	4770      	bx	lr
 8014648:	200064dc 	.word	0x200064dc
 801464c:	20006544 	.word	0x20006544

08014650 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014650:	b480      	push	{r7}
 8014652:	b083      	sub	sp, #12
 8014654:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014656:	4b0b      	ldr	r3, [pc, #44]	@ (8014684 <xTaskGetSchedulerState+0x34>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d102      	bne.n	8014664 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801465e:	2301      	movs	r3, #1
 8014660:	607b      	str	r3, [r7, #4]
 8014662:	e008      	b.n	8014676 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014664:	4b08      	ldr	r3, [pc, #32]	@ (8014688 <xTaskGetSchedulerState+0x38>)
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d102      	bne.n	8014672 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801466c:	2302      	movs	r3, #2
 801466e:	607b      	str	r3, [r7, #4]
 8014670:	e001      	b.n	8014676 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014672:	2300      	movs	r3, #0
 8014674:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014676:	687b      	ldr	r3, [r7, #4]
	}
 8014678:	4618      	mov	r0, r3
 801467a:	370c      	adds	r7, #12
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr
 8014684:	20006530 	.word	0x20006530
 8014688:	2000654c 	.word	0x2000654c

0801468c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014698:	2300      	movs	r3, #0
 801469a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d069      	beq.n	8014776 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146a6:	4b36      	ldr	r3, [pc, #216]	@ (8014780 <xTaskPriorityInherit+0xf4>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d259      	bcs.n	8014764 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	699b      	ldr	r3, [r3, #24]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	db06      	blt.n	80146c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146b8:	4b31      	ldr	r3, [pc, #196]	@ (8014780 <xTaskPriorityInherit+0xf4>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80146be:	f1c3 020c 	rsb	r2, r3, #12
 80146c2:	68bb      	ldr	r3, [r7, #8]
 80146c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	6959      	ldr	r1, [r3, #20]
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146ce:	4613      	mov	r3, r2
 80146d0:	009b      	lsls	r3, r3, #2
 80146d2:	4413      	add	r3, r2
 80146d4:	009b      	lsls	r3, r3, #2
 80146d6:	4a2b      	ldr	r2, [pc, #172]	@ (8014784 <xTaskPriorityInherit+0xf8>)
 80146d8:	4413      	add	r3, r2
 80146da:	4299      	cmp	r1, r3
 80146dc:	d13a      	bne.n	8014754 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	3304      	adds	r3, #4
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7fe f95a 	bl	801299c <uxListRemove>
 80146e8:	4603      	mov	r3, r0
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d115      	bne.n	801471a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80146ee:	68bb      	ldr	r3, [r7, #8]
 80146f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80146f2:	4924      	ldr	r1, [pc, #144]	@ (8014784 <xTaskPriorityInherit+0xf8>)
 80146f4:	4613      	mov	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4413      	add	r3, r2
 80146fa:	009b      	lsls	r3, r3, #2
 80146fc:	440b      	add	r3, r1
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d10a      	bne.n	801471a <xTaskPriorityInherit+0x8e>
 8014704:	68bb      	ldr	r3, [r7, #8]
 8014706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014708:	2201      	movs	r2, #1
 801470a:	fa02 f303 	lsl.w	r3, r2, r3
 801470e:	43da      	mvns	r2, r3
 8014710:	4b1d      	ldr	r3, [pc, #116]	@ (8014788 <xTaskPriorityInherit+0xfc>)
 8014712:	681b      	ldr	r3, [r3, #0]
 8014714:	4013      	ands	r3, r2
 8014716:	4a1c      	ldr	r2, [pc, #112]	@ (8014788 <xTaskPriorityInherit+0xfc>)
 8014718:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801471a:	4b19      	ldr	r3, [pc, #100]	@ (8014780 <xTaskPriorityInherit+0xf4>)
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014720:	68bb      	ldr	r3, [r7, #8]
 8014722:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014724:	68bb      	ldr	r3, [r7, #8]
 8014726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014728:	2201      	movs	r2, #1
 801472a:	409a      	lsls	r2, r3
 801472c:	4b16      	ldr	r3, [pc, #88]	@ (8014788 <xTaskPriorityInherit+0xfc>)
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	4313      	orrs	r3, r2
 8014732:	4a15      	ldr	r2, [pc, #84]	@ (8014788 <xTaskPriorityInherit+0xfc>)
 8014734:	6013      	str	r3, [r2, #0]
 8014736:	68bb      	ldr	r3, [r7, #8]
 8014738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801473a:	4613      	mov	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	4413      	add	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4a10      	ldr	r2, [pc, #64]	@ (8014784 <xTaskPriorityInherit+0xf8>)
 8014744:	441a      	add	r2, r3
 8014746:	68bb      	ldr	r3, [r7, #8]
 8014748:	3304      	adds	r3, #4
 801474a:	4619      	mov	r1, r3
 801474c:	4610      	mov	r0, r2
 801474e:	f7fe f8c8 	bl	80128e2 <vListInsertEnd>
 8014752:	e004      	b.n	801475e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014754:	4b0a      	ldr	r3, [pc, #40]	@ (8014780 <xTaskPriorityInherit+0xf4>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801475e:	2301      	movs	r3, #1
 8014760:	60fb      	str	r3, [r7, #12]
 8014762:	e008      	b.n	8014776 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014768:	4b05      	ldr	r3, [pc, #20]	@ (8014780 <xTaskPriorityInherit+0xf4>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801476e:	429a      	cmp	r2, r3
 8014770:	d201      	bcs.n	8014776 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014772:	2301      	movs	r3, #1
 8014774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014776:	68fb      	ldr	r3, [r7, #12]
	}
 8014778:	4618      	mov	r0, r3
 801477a:	3710      	adds	r7, #16
 801477c:	46bd      	mov	sp, r7
 801477e:	bd80      	pop	{r7, pc}
 8014780:	200063c0 	.word	0x200063c0
 8014784:	200063c4 	.word	0x200063c4
 8014788:	2000652c 	.word	0x2000652c

0801478c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801478c:	b580      	push	{r7, lr}
 801478e:	b086      	sub	sp, #24
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014798:	2300      	movs	r3, #0
 801479a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d074      	beq.n	801488c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147a2:	4b3d      	ldr	r3, [pc, #244]	@ (8014898 <xTaskPriorityDisinherit+0x10c>)
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	693a      	ldr	r2, [r7, #16]
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d00d      	beq.n	80147c8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80147ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b0:	b672      	cpsid	i
 80147b2:	f383 8811 	msr	BASEPRI, r3
 80147b6:	f3bf 8f6f 	isb	sy
 80147ba:	f3bf 8f4f 	dsb	sy
 80147be:	b662      	cpsie	i
 80147c0:	60fb      	str	r3, [r7, #12]
}
 80147c2:	bf00      	nop
 80147c4:	bf00      	nop
 80147c6:	e7fd      	b.n	80147c4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80147c8:	693b      	ldr	r3, [r7, #16]
 80147ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10d      	bne.n	80147ec <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80147d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147d4:	b672      	cpsid	i
 80147d6:	f383 8811 	msr	BASEPRI, r3
 80147da:	f3bf 8f6f 	isb	sy
 80147de:	f3bf 8f4f 	dsb	sy
 80147e2:	b662      	cpsie	i
 80147e4:	60bb      	str	r3, [r7, #8]
}
 80147e6:	bf00      	nop
 80147e8:	bf00      	nop
 80147ea:	e7fd      	b.n	80147e8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80147ec:	693b      	ldr	r3, [r7, #16]
 80147ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80147f0:	1e5a      	subs	r2, r3, #1
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80147fe:	429a      	cmp	r2, r3
 8014800:	d044      	beq.n	801488c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014806:	2b00      	cmp	r3, #0
 8014808:	d140      	bne.n	801488c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801480a:	693b      	ldr	r3, [r7, #16]
 801480c:	3304      	adds	r3, #4
 801480e:	4618      	mov	r0, r3
 8014810:	f7fe f8c4 	bl	801299c <uxListRemove>
 8014814:	4603      	mov	r3, r0
 8014816:	2b00      	cmp	r3, #0
 8014818:	d115      	bne.n	8014846 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801481a:	693b      	ldr	r3, [r7, #16]
 801481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801481e:	491f      	ldr	r1, [pc, #124]	@ (801489c <xTaskPriorityDisinherit+0x110>)
 8014820:	4613      	mov	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	4413      	add	r3, r2
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	440b      	add	r3, r1
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d10a      	bne.n	8014846 <xTaskPriorityDisinherit+0xba>
 8014830:	693b      	ldr	r3, [r7, #16]
 8014832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014834:	2201      	movs	r2, #1
 8014836:	fa02 f303 	lsl.w	r3, r2, r3
 801483a:	43da      	mvns	r2, r3
 801483c:	4b18      	ldr	r3, [pc, #96]	@ (80148a0 <xTaskPriorityDisinherit+0x114>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	4013      	ands	r3, r2
 8014842:	4a17      	ldr	r2, [pc, #92]	@ (80148a0 <xTaskPriorityDisinherit+0x114>)
 8014844:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014852:	f1c3 020c 	rsb	r2, r3, #12
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801485e:	2201      	movs	r2, #1
 8014860:	409a      	lsls	r2, r3
 8014862:	4b0f      	ldr	r3, [pc, #60]	@ (80148a0 <xTaskPriorityDisinherit+0x114>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	4313      	orrs	r3, r2
 8014868:	4a0d      	ldr	r2, [pc, #52]	@ (80148a0 <xTaskPriorityDisinherit+0x114>)
 801486a:	6013      	str	r3, [r2, #0]
 801486c:	693b      	ldr	r3, [r7, #16]
 801486e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014870:	4613      	mov	r3, r2
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4a08      	ldr	r2, [pc, #32]	@ (801489c <xTaskPriorityDisinherit+0x110>)
 801487a:	441a      	add	r2, r3
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	3304      	adds	r3, #4
 8014880:	4619      	mov	r1, r3
 8014882:	4610      	mov	r0, r2
 8014884:	f7fe f82d 	bl	80128e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014888:	2301      	movs	r3, #1
 801488a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801488c:	697b      	ldr	r3, [r7, #20]
	}
 801488e:	4618      	mov	r0, r3
 8014890:	3718      	adds	r7, #24
 8014892:	46bd      	mov	sp, r7
 8014894:	bd80      	pop	{r7, pc}
 8014896:	bf00      	nop
 8014898:	200063c0 	.word	0x200063c0
 801489c:	200063c4 	.word	0x200063c4
 80148a0:	2000652c 	.word	0x2000652c

080148a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80148a4:	b580      	push	{r7, lr}
 80148a6:	b088      	sub	sp, #32
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
 80148ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80148b2:	2301      	movs	r3, #1
 80148b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	f000 8089 	beq.w	80149d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80148be:	69bb      	ldr	r3, [r7, #24]
 80148c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d10d      	bne.n	80148e2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80148c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148ca:	b672      	cpsid	i
 80148cc:	f383 8811 	msr	BASEPRI, r3
 80148d0:	f3bf 8f6f 	isb	sy
 80148d4:	f3bf 8f4f 	dsb	sy
 80148d8:	b662      	cpsie	i
 80148da:	60fb      	str	r3, [r7, #12]
}
 80148dc:	bf00      	nop
 80148de:	bf00      	nop
 80148e0:	e7fd      	b.n	80148de <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80148e2:	69bb      	ldr	r3, [r7, #24]
 80148e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148e6:	683a      	ldr	r2, [r7, #0]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d902      	bls.n	80148f2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	61fb      	str	r3, [r7, #28]
 80148f0:	e002      	b.n	80148f8 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80148f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80148fc:	69fa      	ldr	r2, [r7, #28]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d066      	beq.n	80149d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014902:	69bb      	ldr	r3, [r7, #24]
 8014904:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014906:	697a      	ldr	r2, [r7, #20]
 8014908:	429a      	cmp	r2, r3
 801490a:	d161      	bne.n	80149d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801490c:	4b32      	ldr	r3, [pc, #200]	@ (80149d8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	69ba      	ldr	r2, [r7, #24]
 8014912:	429a      	cmp	r2, r3
 8014914:	d10d      	bne.n	8014932 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8014916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801491a:	b672      	cpsid	i
 801491c:	f383 8811 	msr	BASEPRI, r3
 8014920:	f3bf 8f6f 	isb	sy
 8014924:	f3bf 8f4f 	dsb	sy
 8014928:	b662      	cpsie	i
 801492a:	60bb      	str	r3, [r7, #8]
}
 801492c:	bf00      	nop
 801492e:	bf00      	nop
 8014930:	e7fd      	b.n	801492e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8014932:	69bb      	ldr	r3, [r7, #24]
 8014934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014936:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014938:	69bb      	ldr	r3, [r7, #24]
 801493a:	69fa      	ldr	r2, [r7, #28]
 801493c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	699b      	ldr	r3, [r3, #24]
 8014942:	2b00      	cmp	r3, #0
 8014944:	db04      	blt.n	8014950 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014946:	69fb      	ldr	r3, [r7, #28]
 8014948:	f1c3 020c 	rsb	r2, r3, #12
 801494c:	69bb      	ldr	r3, [r7, #24]
 801494e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014950:	69bb      	ldr	r3, [r7, #24]
 8014952:	6959      	ldr	r1, [r3, #20]
 8014954:	693a      	ldr	r2, [r7, #16]
 8014956:	4613      	mov	r3, r2
 8014958:	009b      	lsls	r3, r3, #2
 801495a:	4413      	add	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4a1f      	ldr	r2, [pc, #124]	@ (80149dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014960:	4413      	add	r3, r2
 8014962:	4299      	cmp	r1, r3
 8014964:	d134      	bne.n	80149d0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	3304      	adds	r3, #4
 801496a:	4618      	mov	r0, r3
 801496c:	f7fe f816 	bl	801299c <uxListRemove>
 8014970:	4603      	mov	r3, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d115      	bne.n	80149a2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801497a:	4918      	ldr	r1, [pc, #96]	@ (80149dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801497c:	4613      	mov	r3, r2
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	4413      	add	r3, r2
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	440b      	add	r3, r1
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d10a      	bne.n	80149a2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801498c:	69bb      	ldr	r3, [r7, #24]
 801498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014990:	2201      	movs	r2, #1
 8014992:	fa02 f303 	lsl.w	r3, r2, r3
 8014996:	43da      	mvns	r2, r3
 8014998:	4b11      	ldr	r3, [pc, #68]	@ (80149e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	4013      	ands	r3, r2
 801499e:	4a10      	ldr	r2, [pc, #64]	@ (80149e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149a0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80149a6:	2201      	movs	r2, #1
 80149a8:	409a      	lsls	r2, r3
 80149aa:	4b0d      	ldr	r3, [pc, #52]	@ (80149e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	4313      	orrs	r3, r2
 80149b0:	4a0b      	ldr	r2, [pc, #44]	@ (80149e0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80149b2:	6013      	str	r3, [r2, #0]
 80149b4:	69bb      	ldr	r3, [r7, #24]
 80149b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149b8:	4613      	mov	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4a06      	ldr	r2, [pc, #24]	@ (80149dc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80149c2:	441a      	add	r2, r3
 80149c4:	69bb      	ldr	r3, [r7, #24]
 80149c6:	3304      	adds	r3, #4
 80149c8:	4619      	mov	r1, r3
 80149ca:	4610      	mov	r0, r2
 80149cc:	f7fd ff89 	bl	80128e2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149d0:	bf00      	nop
 80149d2:	3720      	adds	r7, #32
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	200063c0 	.word	0x200063c0
 80149dc:	200063c4 	.word	0x200063c4
 80149e0:	2000652c 	.word	0x2000652c

080149e4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80149e4:	b480      	push	{r7}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80149ea:	4b09      	ldr	r3, [pc, #36]	@ (8014a10 <uxTaskResetEventItemValue+0x2c>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	699b      	ldr	r3, [r3, #24]
 80149f0:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80149f2:	4b07      	ldr	r3, [pc, #28]	@ (8014a10 <uxTaskResetEventItemValue+0x2c>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80149f8:	4b05      	ldr	r3, [pc, #20]	@ (8014a10 <uxTaskResetEventItemValue+0x2c>)
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	f1c2 020c 	rsb	r2, r2, #12
 8014a00:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8014a02:	687b      	ldr	r3, [r7, #4]
}
 8014a04:	4618      	mov	r0, r3
 8014a06:	370c      	adds	r7, #12
 8014a08:	46bd      	mov	sp, r7
 8014a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0e:	4770      	bx	lr
 8014a10:	200063c0 	.word	0x200063c0

08014a14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014a14:	b480      	push	{r7}
 8014a16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014a18:	4b07      	ldr	r3, [pc, #28]	@ (8014a38 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d004      	beq.n	8014a2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a20:	4b05      	ldr	r3, [pc, #20]	@ (8014a38 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014a26:	3201      	adds	r2, #1
 8014a28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8014a2a:	4b03      	ldr	r3, [pc, #12]	@ (8014a38 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a2c:	681b      	ldr	r3, [r3, #0]
	}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	46bd      	mov	sp, r7
 8014a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a36:	4770      	bx	lr
 8014a38:	200063c0 	.word	0x200063c0

08014a3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a3c:	b580      	push	{r7, lr}
 8014a3e:	b084      	sub	sp, #16
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	6078      	str	r0, [r7, #4]
 8014a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a46:	4b29      	ldr	r3, [pc, #164]	@ (8014aec <prvAddCurrentTaskToDelayedList+0xb0>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a4c:	4b28      	ldr	r3, [pc, #160]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	3304      	adds	r3, #4
 8014a52:	4618      	mov	r0, r3
 8014a54:	f7fd ffa2 	bl	801299c <uxListRemove>
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d10b      	bne.n	8014a76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8014a5e:	4b24      	ldr	r3, [pc, #144]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a64:	2201      	movs	r2, #1
 8014a66:	fa02 f303 	lsl.w	r3, r2, r3
 8014a6a:	43da      	mvns	r2, r3
 8014a6c:	4b21      	ldr	r3, [pc, #132]	@ (8014af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	4013      	ands	r3, r2
 8014a72:	4a20      	ldr	r2, [pc, #128]	@ (8014af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8014a74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a7c:	d10a      	bne.n	8014a94 <prvAddCurrentTaskToDelayedList+0x58>
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d007      	beq.n	8014a94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a84:	4b1a      	ldr	r3, [pc, #104]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	3304      	adds	r3, #4
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	481a      	ldr	r0, [pc, #104]	@ (8014af8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014a8e:	f7fd ff28 	bl	80128e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a92:	e026      	b.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4413      	add	r3, r2
 8014a9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a9c:	4b14      	ldr	r3, [pc, #80]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	68ba      	ldr	r2, [r7, #8]
 8014aa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d209      	bcs.n	8014ac0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014aac:	4b13      	ldr	r3, [pc, #76]	@ (8014afc <prvAddCurrentTaskToDelayedList+0xc0>)
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	3304      	adds	r3, #4
 8014ab6:	4619      	mov	r1, r3
 8014ab8:	4610      	mov	r0, r2
 8014aba:	f7fd ff36 	bl	801292a <vListInsert>
}
 8014abe:	e010      	b.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8014b00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8014ac2:	681a      	ldr	r2, [r3, #0]
 8014ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8014af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	3304      	adds	r3, #4
 8014aca:	4619      	mov	r1, r3
 8014acc:	4610      	mov	r0, r2
 8014ace:	f7fd ff2c 	bl	801292a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8014b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d202      	bcs.n	8014ae2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014adc:	4a09      	ldr	r2, [pc, #36]	@ (8014b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	6013      	str	r3, [r2, #0]
}
 8014ae2:	bf00      	nop
 8014ae4:	3710      	adds	r7, #16
 8014ae6:	46bd      	mov	sp, r7
 8014ae8:	bd80      	pop	{r7, pc}
 8014aea:	bf00      	nop
 8014aec:	20006528 	.word	0x20006528
 8014af0:	200063c0 	.word	0x200063c0
 8014af4:	2000652c 	.word	0x2000652c
 8014af8:	20006510 	.word	0x20006510
 8014afc:	200064e0 	.word	0x200064e0
 8014b00:	200064dc 	.word	0x200064dc
 8014b04:	20006544 	.word	0x20006544

08014b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014b08:	b480      	push	{r7}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	3b04      	subs	r3, #4
 8014b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8014b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	3b04      	subs	r3, #4
 8014b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	f023 0201 	bic.w	r2, r3, #1
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3b04      	subs	r3, #4
 8014b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014b38:	4a0c      	ldr	r2, [pc, #48]	@ (8014b6c <pxPortInitialiseStack+0x64>)
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	3b14      	subs	r3, #20
 8014b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	3b04      	subs	r3, #4
 8014b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f06f 0202 	mvn.w	r2, #2
 8014b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	3b20      	subs	r3, #32
 8014b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3714      	adds	r7, #20
 8014b64:	46bd      	mov	sp, r7
 8014b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6a:	4770      	bx	lr
 8014b6c:	08014b71 	.word	0x08014b71

08014b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014b70:	b480      	push	{r7}
 8014b72:	b085      	sub	sp, #20
 8014b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014b76:	2300      	movs	r3, #0
 8014b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8014b7a:	4b15      	ldr	r3, [pc, #84]	@ (8014bd0 <prvTaskExitError+0x60>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b82:	d00d      	beq.n	8014ba0 <prvTaskExitError+0x30>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b88:	b672      	cpsid	i
 8014b8a:	f383 8811 	msr	BASEPRI, r3
 8014b8e:	f3bf 8f6f 	isb	sy
 8014b92:	f3bf 8f4f 	dsb	sy
 8014b96:	b662      	cpsie	i
 8014b98:	60fb      	str	r3, [r7, #12]
}
 8014b9a:	bf00      	nop
 8014b9c:	bf00      	nop
 8014b9e:	e7fd      	b.n	8014b9c <prvTaskExitError+0x2c>
	__asm volatile
 8014ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ba4:	b672      	cpsid	i
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	b662      	cpsie	i
 8014bb4:	60bb      	str	r3, [r7, #8]
}
 8014bb6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8014bb8:	bf00      	nop
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d0fc      	beq.n	8014bba <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014bc0:	bf00      	nop
 8014bc2:	bf00      	nop
 8014bc4:	3714      	adds	r7, #20
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr
 8014bce:	bf00      	nop
 8014bd0:	20000078 	.word	0x20000078
	...

08014be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014be0:	4b07      	ldr	r3, [pc, #28]	@ (8014c00 <pxCurrentTCBConst2>)
 8014be2:	6819      	ldr	r1, [r3, #0]
 8014be4:	6808      	ldr	r0, [r1, #0]
 8014be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bea:	f380 8809 	msr	PSP, r0
 8014bee:	f3bf 8f6f 	isb	sy
 8014bf2:	f04f 0000 	mov.w	r0, #0
 8014bf6:	f380 8811 	msr	BASEPRI, r0
 8014bfa:	4770      	bx	lr
 8014bfc:	f3af 8000 	nop.w

08014c00 <pxCurrentTCBConst2>:
 8014c00:	200063c0 	.word	0x200063c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014c04:	bf00      	nop
 8014c06:	bf00      	nop

08014c08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014c08:	4808      	ldr	r0, [pc, #32]	@ (8014c2c <prvPortStartFirstTask+0x24>)
 8014c0a:	6800      	ldr	r0, [r0, #0]
 8014c0c:	6800      	ldr	r0, [r0, #0]
 8014c0e:	f380 8808 	msr	MSP, r0
 8014c12:	f04f 0000 	mov.w	r0, #0
 8014c16:	f380 8814 	msr	CONTROL, r0
 8014c1a:	b662      	cpsie	i
 8014c1c:	b661      	cpsie	f
 8014c1e:	f3bf 8f4f 	dsb	sy
 8014c22:	f3bf 8f6f 	isb	sy
 8014c26:	df00      	svc	0
 8014c28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8014c2a:	bf00      	nop
 8014c2c:	e000ed08 	.word	0xe000ed08

08014c30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014c36:	4b37      	ldr	r3, [pc, #220]	@ (8014d14 <xPortStartScheduler+0xe4>)
 8014c38:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8014c3a:	68fb      	ldr	r3, [r7, #12]
 8014c3c:	781b      	ldrb	r3, [r3, #0]
 8014c3e:	b2db      	uxtb	r3, r3
 8014c40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	22ff      	movs	r2, #255	@ 0xff
 8014c46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	b2db      	uxtb	r3, r3
 8014c4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014c50:	78fb      	ldrb	r3, [r7, #3]
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8014c58:	b2da      	uxtb	r2, r3
 8014c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8014d18 <xPortStartScheduler+0xe8>)
 8014c5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8014c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014c60:	2207      	movs	r2, #7
 8014c62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c64:	e009      	b.n	8014c7a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8014c66:	4b2d      	ldr	r3, [pc, #180]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	3b01      	subs	r3, #1
 8014c6c:	4a2b      	ldr	r2, [pc, #172]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014c6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014c70:	78fb      	ldrb	r3, [r7, #3]
 8014c72:	b2db      	uxtb	r3, r3
 8014c74:	005b      	lsls	r3, r3, #1
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014c7a:	78fb      	ldrb	r3, [r7, #3]
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c82:	2b80      	cmp	r3, #128	@ 0x80
 8014c84:	d0ef      	beq.n	8014c66 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014c86:	4b25      	ldr	r3, [pc, #148]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	f1c3 0307 	rsb	r3, r3, #7
 8014c8e:	2b04      	cmp	r3, #4
 8014c90:	d00d      	beq.n	8014cae <xPortStartScheduler+0x7e>
	__asm volatile
 8014c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c96:	b672      	cpsid	i
 8014c98:	f383 8811 	msr	BASEPRI, r3
 8014c9c:	f3bf 8f6f 	isb	sy
 8014ca0:	f3bf 8f4f 	dsb	sy
 8014ca4:	b662      	cpsie	i
 8014ca6:	60bb      	str	r3, [r7, #8]
}
 8014ca8:	bf00      	nop
 8014caa:	bf00      	nop
 8014cac:	e7fd      	b.n	8014caa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014cae:	4b1b      	ldr	r3, [pc, #108]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	021b      	lsls	r3, r3, #8
 8014cb4:	4a19      	ldr	r2, [pc, #100]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014cb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014cb8:	4b18      	ldr	r3, [pc, #96]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8014cc0:	4a16      	ldr	r2, [pc, #88]	@ (8014d1c <xPortStartScheduler+0xec>)
 8014cc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	b2da      	uxtb	r2, r3
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014ccc:	4b14      	ldr	r3, [pc, #80]	@ (8014d20 <xPortStartScheduler+0xf0>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	4a13      	ldr	r2, [pc, #76]	@ (8014d20 <xPortStartScheduler+0xf0>)
 8014cd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8014cd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014cd8:	4b11      	ldr	r3, [pc, #68]	@ (8014d20 <xPortStartScheduler+0xf0>)
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a10      	ldr	r2, [pc, #64]	@ (8014d20 <xPortStartScheduler+0xf0>)
 8014cde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8014ce2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014ce4:	f000 f8dc 	bl	8014ea0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8014d24 <xPortStartScheduler+0xf4>)
 8014cea:	2200      	movs	r2, #0
 8014cec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014cee:	f000 f8fb 	bl	8014ee8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8014d28 <xPortStartScheduler+0xf8>)
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	4a0c      	ldr	r2, [pc, #48]	@ (8014d28 <xPortStartScheduler+0xf8>)
 8014cf8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8014cfc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8014cfe:	f7ff ff83 	bl	8014c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014d02:	f7ff f96b 	bl	8013fdc <vTaskSwitchContext>
	prvTaskExitError();
 8014d06:	f7ff ff33 	bl	8014b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014d0a:	2300      	movs	r3, #0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3710      	adds	r7, #16
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	e000e400 	.word	0xe000e400
 8014d18:	20006558 	.word	0x20006558
 8014d1c:	2000655c 	.word	0x2000655c
 8014d20:	e000ed20 	.word	0xe000ed20
 8014d24:	20000078 	.word	0x20000078
 8014d28:	e000ef34 	.word	0xe000ef34

08014d2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b083      	sub	sp, #12
 8014d30:	af00      	add	r7, sp, #0
	__asm volatile
 8014d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d36:	b672      	cpsid	i
 8014d38:	f383 8811 	msr	BASEPRI, r3
 8014d3c:	f3bf 8f6f 	isb	sy
 8014d40:	f3bf 8f4f 	dsb	sy
 8014d44:	b662      	cpsie	i
 8014d46:	607b      	str	r3, [r7, #4]
}
 8014d48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8014d4a:	4b11      	ldr	r3, [pc, #68]	@ (8014d90 <vPortEnterCritical+0x64>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	4a0f      	ldr	r2, [pc, #60]	@ (8014d90 <vPortEnterCritical+0x64>)
 8014d52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014d54:	4b0e      	ldr	r3, [pc, #56]	@ (8014d90 <vPortEnterCritical+0x64>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	2b01      	cmp	r3, #1
 8014d5a:	d112      	bne.n	8014d82 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8014d94 <vPortEnterCritical+0x68>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d00d      	beq.n	8014d82 <vPortEnterCritical+0x56>
	__asm volatile
 8014d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014d6a:	b672      	cpsid	i
 8014d6c:	f383 8811 	msr	BASEPRI, r3
 8014d70:	f3bf 8f6f 	isb	sy
 8014d74:	f3bf 8f4f 	dsb	sy
 8014d78:	b662      	cpsie	i
 8014d7a:	603b      	str	r3, [r7, #0]
}
 8014d7c:	bf00      	nop
 8014d7e:	bf00      	nop
 8014d80:	e7fd      	b.n	8014d7e <vPortEnterCritical+0x52>
	}
}
 8014d82:	bf00      	nop
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr
 8014d8e:	bf00      	nop
 8014d90:	20000078 	.word	0x20000078
 8014d94:	e000ed04 	.word	0xe000ed04

08014d98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014d98:	b480      	push	{r7}
 8014d9a:	b083      	sub	sp, #12
 8014d9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014d9e:	4b13      	ldr	r3, [pc, #76]	@ (8014dec <vPortExitCritical+0x54>)
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d10d      	bne.n	8014dc2 <vPortExitCritical+0x2a>
	__asm volatile
 8014da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014daa:	b672      	cpsid	i
 8014dac:	f383 8811 	msr	BASEPRI, r3
 8014db0:	f3bf 8f6f 	isb	sy
 8014db4:	f3bf 8f4f 	dsb	sy
 8014db8:	b662      	cpsie	i
 8014dba:	607b      	str	r3, [r7, #4]
}
 8014dbc:	bf00      	nop
 8014dbe:	bf00      	nop
 8014dc0:	e7fd      	b.n	8014dbe <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8014dec <vPortExitCritical+0x54>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	3b01      	subs	r3, #1
 8014dc8:	4a08      	ldr	r2, [pc, #32]	@ (8014dec <vPortExitCritical+0x54>)
 8014dca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014dcc:	4b07      	ldr	r3, [pc, #28]	@ (8014dec <vPortExitCritical+0x54>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d105      	bne.n	8014de0 <vPortExitCritical+0x48>
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	f383 8811 	msr	BASEPRI, r3
}
 8014dde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014de0:	bf00      	nop
 8014de2:	370c      	adds	r7, #12
 8014de4:	46bd      	mov	sp, r7
 8014de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dea:	4770      	bx	lr
 8014dec:	20000078 	.word	0x20000078

08014df0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014df0:	f3ef 8009 	mrs	r0, PSP
 8014df4:	f3bf 8f6f 	isb	sy
 8014df8:	4b15      	ldr	r3, [pc, #84]	@ (8014e50 <pxCurrentTCBConst>)
 8014dfa:	681a      	ldr	r2, [r3, #0]
 8014dfc:	f01e 0f10 	tst.w	lr, #16
 8014e00:	bf08      	it	eq
 8014e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e0a:	6010      	str	r0, [r2, #0]
 8014e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014e10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8014e14:	b672      	cpsid	i
 8014e16:	f380 8811 	msr	BASEPRI, r0
 8014e1a:	f3bf 8f4f 	dsb	sy
 8014e1e:	f3bf 8f6f 	isb	sy
 8014e22:	b662      	cpsie	i
 8014e24:	f7ff f8da 	bl	8013fdc <vTaskSwitchContext>
 8014e28:	f04f 0000 	mov.w	r0, #0
 8014e2c:	f380 8811 	msr	BASEPRI, r0
 8014e30:	bc09      	pop	{r0, r3}
 8014e32:	6819      	ldr	r1, [r3, #0]
 8014e34:	6808      	ldr	r0, [r1, #0]
 8014e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3a:	f01e 0f10 	tst.w	lr, #16
 8014e3e:	bf08      	it	eq
 8014e40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014e44:	f380 8809 	msr	PSP, r0
 8014e48:	f3bf 8f6f 	isb	sy
 8014e4c:	4770      	bx	lr
 8014e4e:	bf00      	nop

08014e50 <pxCurrentTCBConst>:
 8014e50:	200063c0 	.word	0x200063c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014e54:	bf00      	nop
 8014e56:	bf00      	nop

08014e58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b082      	sub	sp, #8
 8014e5c:	af00      	add	r7, sp, #0
	__asm volatile
 8014e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e62:	b672      	cpsid	i
 8014e64:	f383 8811 	msr	BASEPRI, r3
 8014e68:	f3bf 8f6f 	isb	sy
 8014e6c:	f3bf 8f4f 	dsb	sy
 8014e70:	b662      	cpsie	i
 8014e72:	607b      	str	r3, [r7, #4]
}
 8014e74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014e76:	f7fe fff5 	bl	8013e64 <xTaskIncrementTick>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d003      	beq.n	8014e88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014e80:	4b06      	ldr	r3, [pc, #24]	@ (8014e9c <SysTick_Handler+0x44>)
 8014e82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e86:	601a      	str	r2, [r3, #0]
 8014e88:	2300      	movs	r3, #0
 8014e8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	f383 8811 	msr	BASEPRI, r3
}
 8014e92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014e94:	bf00      	nop
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	e000ed04 	.word	0xe000ed04

08014ea0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8014ed4 <vPortSetupTimerInterrupt+0x34>)
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8014ed8 <vPortSetupTimerInterrupt+0x38>)
 8014eac:	2200      	movs	r2, #0
 8014eae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8014edc <vPortSetupTimerInterrupt+0x3c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8014ee0 <vPortSetupTimerInterrupt+0x40>)
 8014eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8014eba:	099b      	lsrs	r3, r3, #6
 8014ebc:	4a09      	ldr	r2, [pc, #36]	@ (8014ee4 <vPortSetupTimerInterrupt+0x44>)
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014ec2:	4b04      	ldr	r3, [pc, #16]	@ (8014ed4 <vPortSetupTimerInterrupt+0x34>)
 8014ec4:	2207      	movs	r2, #7
 8014ec6:	601a      	str	r2, [r3, #0]
}
 8014ec8:	bf00      	nop
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop
 8014ed4:	e000e010 	.word	0xe000e010
 8014ed8:	e000e018 	.word	0xe000e018
 8014edc:	20000054 	.word	0x20000054
 8014ee0:	10624dd3 	.word	0x10624dd3
 8014ee4:	e000e014 	.word	0xe000e014

08014ee8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014ee8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8014ef8 <vPortEnableVFP+0x10>
 8014eec:	6801      	ldr	r1, [r0, #0]
 8014eee:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8014ef2:	6001      	str	r1, [r0, #0]
 8014ef4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014ef6:	bf00      	nop
 8014ef8:	e000ed88 	.word	0xe000ed88

08014efc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014efc:	b480      	push	{r7}
 8014efe:	b085      	sub	sp, #20
 8014f00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014f02:	f3ef 8305 	mrs	r3, IPSR
 8014f06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2b0f      	cmp	r3, #15
 8014f0c:	d917      	bls.n	8014f3e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8014f78 <vPortValidateInterruptPriority+0x7c>)
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	4413      	add	r3, r2
 8014f14:	781b      	ldrb	r3, [r3, #0]
 8014f16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014f18:	4b18      	ldr	r3, [pc, #96]	@ (8014f7c <vPortValidateInterruptPriority+0x80>)
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	7afa      	ldrb	r2, [r7, #11]
 8014f1e:	429a      	cmp	r2, r3
 8014f20:	d20d      	bcs.n	8014f3e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8014f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f26:	b672      	cpsid	i
 8014f28:	f383 8811 	msr	BASEPRI, r3
 8014f2c:	f3bf 8f6f 	isb	sy
 8014f30:	f3bf 8f4f 	dsb	sy
 8014f34:	b662      	cpsie	i
 8014f36:	607b      	str	r3, [r7, #4]
}
 8014f38:	bf00      	nop
 8014f3a:	bf00      	nop
 8014f3c:	e7fd      	b.n	8014f3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014f3e:	4b10      	ldr	r3, [pc, #64]	@ (8014f80 <vPortValidateInterruptPriority+0x84>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014f46:	4b0f      	ldr	r3, [pc, #60]	@ (8014f84 <vPortValidateInterruptPriority+0x88>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d90d      	bls.n	8014f6a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8014f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f52:	b672      	cpsid	i
 8014f54:	f383 8811 	msr	BASEPRI, r3
 8014f58:	f3bf 8f6f 	isb	sy
 8014f5c:	f3bf 8f4f 	dsb	sy
 8014f60:	b662      	cpsie	i
 8014f62:	603b      	str	r3, [r7, #0]
}
 8014f64:	bf00      	nop
 8014f66:	bf00      	nop
 8014f68:	e7fd      	b.n	8014f66 <vPortValidateInterruptPriority+0x6a>
	}
 8014f6a:	bf00      	nop
 8014f6c:	3714      	adds	r7, #20
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f74:	4770      	bx	lr
 8014f76:	bf00      	nop
 8014f78:	e000e3f0 	.word	0xe000e3f0
 8014f7c:	20006558 	.word	0x20006558
 8014f80:	e000ed0c 	.word	0xe000ed0c
 8014f84:	2000655c 	.word	0x2000655c

08014f88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b08a      	sub	sp, #40	@ 0x28
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014f90:	2300      	movs	r3, #0
 8014f92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014f94:	f7fe fea8 	bl	8013ce8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014f98:	4b5d      	ldr	r3, [pc, #372]	@ (8015110 <pvPortMalloc+0x188>)
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d101      	bne.n	8014fa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014fa0:	f000 f920 	bl	80151e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014fa4:	4b5b      	ldr	r3, [pc, #364]	@ (8015114 <pvPortMalloc+0x18c>)
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	4013      	ands	r3, r2
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	f040 8094 	bne.w	80150da <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d020      	beq.n	8014ffa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8014fb8:	2208      	movs	r2, #8
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f003 0307 	and.w	r3, r3, #7
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d017      	beq.n	8014ffa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f023 0307 	bic.w	r3, r3, #7
 8014fd0:	3308      	adds	r3, #8
 8014fd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f003 0307 	and.w	r3, r3, #7
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00d      	beq.n	8014ffa <pvPortMalloc+0x72>
	__asm volatile
 8014fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fe2:	b672      	cpsid	i
 8014fe4:	f383 8811 	msr	BASEPRI, r3
 8014fe8:	f3bf 8f6f 	isb	sy
 8014fec:	f3bf 8f4f 	dsb	sy
 8014ff0:	b662      	cpsie	i
 8014ff2:	617b      	str	r3, [r7, #20]
}
 8014ff4:	bf00      	nop
 8014ff6:	bf00      	nop
 8014ff8:	e7fd      	b.n	8014ff6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d06c      	beq.n	80150da <pvPortMalloc+0x152>
 8015000:	4b45      	ldr	r3, [pc, #276]	@ (8015118 <pvPortMalloc+0x190>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	687a      	ldr	r2, [r7, #4]
 8015006:	429a      	cmp	r2, r3
 8015008:	d867      	bhi.n	80150da <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801500a:	4b44      	ldr	r3, [pc, #272]	@ (801511c <pvPortMalloc+0x194>)
 801500c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801500e:	4b43      	ldr	r3, [pc, #268]	@ (801511c <pvPortMalloc+0x194>)
 8015010:	681b      	ldr	r3, [r3, #0]
 8015012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015014:	e004      	b.n	8015020 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8015016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015022:	685b      	ldr	r3, [r3, #4]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	429a      	cmp	r2, r3
 8015028:	d903      	bls.n	8015032 <pvPortMalloc+0xaa>
 801502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	d1f1      	bne.n	8015016 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015032:	4b37      	ldr	r3, [pc, #220]	@ (8015110 <pvPortMalloc+0x188>)
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015038:	429a      	cmp	r2, r3
 801503a:	d04e      	beq.n	80150da <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801503c:	6a3b      	ldr	r3, [r7, #32]
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	2208      	movs	r2, #8
 8015042:	4413      	add	r3, r2
 8015044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015048:	681a      	ldr	r2, [r3, #0]
 801504a:	6a3b      	ldr	r3, [r7, #32]
 801504c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015050:	685a      	ldr	r2, [r3, #4]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	1ad2      	subs	r2, r2, r3
 8015056:	2308      	movs	r3, #8
 8015058:	005b      	lsls	r3, r3, #1
 801505a:	429a      	cmp	r2, r3
 801505c:	d922      	bls.n	80150a4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801505e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	4413      	add	r3, r2
 8015064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	f003 0307 	and.w	r3, r3, #7
 801506c:	2b00      	cmp	r3, #0
 801506e:	d00d      	beq.n	801508c <pvPortMalloc+0x104>
	__asm volatile
 8015070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015074:	b672      	cpsid	i
 8015076:	f383 8811 	msr	BASEPRI, r3
 801507a:	f3bf 8f6f 	isb	sy
 801507e:	f3bf 8f4f 	dsb	sy
 8015082:	b662      	cpsie	i
 8015084:	613b      	str	r3, [r7, #16]
}
 8015086:	bf00      	nop
 8015088:	bf00      	nop
 801508a:	e7fd      	b.n	8015088 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801508e:	685a      	ldr	r2, [r3, #4]
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	1ad2      	subs	r2, r2, r3
 8015094:	69bb      	ldr	r3, [r7, #24]
 8015096:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801509a:	687a      	ldr	r2, [r7, #4]
 801509c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801509e:	69b8      	ldr	r0, [r7, #24]
 80150a0:	f000 f902 	bl	80152a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80150a4:	4b1c      	ldr	r3, [pc, #112]	@ (8015118 <pvPortMalloc+0x190>)
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150aa:	685b      	ldr	r3, [r3, #4]
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	4a1a      	ldr	r2, [pc, #104]	@ (8015118 <pvPortMalloc+0x190>)
 80150b0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80150b2:	4b19      	ldr	r3, [pc, #100]	@ (8015118 <pvPortMalloc+0x190>)
 80150b4:	681a      	ldr	r2, [r3, #0]
 80150b6:	4b1a      	ldr	r3, [pc, #104]	@ (8015120 <pvPortMalloc+0x198>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	429a      	cmp	r2, r3
 80150bc:	d203      	bcs.n	80150c6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80150be:	4b16      	ldr	r3, [pc, #88]	@ (8015118 <pvPortMalloc+0x190>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	4a17      	ldr	r2, [pc, #92]	@ (8015120 <pvPortMalloc+0x198>)
 80150c4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80150c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150c8:	685a      	ldr	r2, [r3, #4]
 80150ca:	4b12      	ldr	r3, [pc, #72]	@ (8015114 <pvPortMalloc+0x18c>)
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	431a      	orrs	r2, r3
 80150d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80150d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150d6:	2200      	movs	r2, #0
 80150d8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80150da:	f7fe fe13 	bl	8013d04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80150de:	69fb      	ldr	r3, [r7, #28]
 80150e0:	f003 0307 	and.w	r3, r3, #7
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d00d      	beq.n	8015104 <pvPortMalloc+0x17c>
	__asm volatile
 80150e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150ec:	b672      	cpsid	i
 80150ee:	f383 8811 	msr	BASEPRI, r3
 80150f2:	f3bf 8f6f 	isb	sy
 80150f6:	f3bf 8f4f 	dsb	sy
 80150fa:	b662      	cpsie	i
 80150fc:	60fb      	str	r3, [r7, #12]
}
 80150fe:	bf00      	nop
 8015100:	bf00      	nop
 8015102:	e7fd      	b.n	8015100 <pvPortMalloc+0x178>
	return pvReturn;
 8015104:	69fb      	ldr	r3, [r7, #28]
}
 8015106:	4618      	mov	r0, r3
 8015108:	3728      	adds	r7, #40	@ 0x28
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	2000e568 	.word	0x2000e568
 8015114:	2000e574 	.word	0x2000e574
 8015118:	2000e56c 	.word	0x2000e56c
 801511c:	2000e560 	.word	0x2000e560
 8015120:	2000e570 	.word	0x2000e570

08015124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b086      	sub	sp, #24
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	2b00      	cmp	r3, #0
 8015134:	d04e      	beq.n	80151d4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015136:	2308      	movs	r3, #8
 8015138:	425b      	negs	r3, r3
 801513a:	697a      	ldr	r2, [r7, #20]
 801513c:	4413      	add	r3, r2
 801513e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015140:	697b      	ldr	r3, [r7, #20]
 8015142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015144:	693b      	ldr	r3, [r7, #16]
 8015146:	685a      	ldr	r2, [r3, #4]
 8015148:	4b24      	ldr	r3, [pc, #144]	@ (80151dc <vPortFree+0xb8>)
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	4013      	ands	r3, r2
 801514e:	2b00      	cmp	r3, #0
 8015150:	d10d      	bne.n	801516e <vPortFree+0x4a>
	__asm volatile
 8015152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015156:	b672      	cpsid	i
 8015158:	f383 8811 	msr	BASEPRI, r3
 801515c:	f3bf 8f6f 	isb	sy
 8015160:	f3bf 8f4f 	dsb	sy
 8015164:	b662      	cpsie	i
 8015166:	60fb      	str	r3, [r7, #12]
}
 8015168:	bf00      	nop
 801516a:	bf00      	nop
 801516c:	e7fd      	b.n	801516a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801516e:	693b      	ldr	r3, [r7, #16]
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d00d      	beq.n	8015192 <vPortFree+0x6e>
	__asm volatile
 8015176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801517a:	b672      	cpsid	i
 801517c:	f383 8811 	msr	BASEPRI, r3
 8015180:	f3bf 8f6f 	isb	sy
 8015184:	f3bf 8f4f 	dsb	sy
 8015188:	b662      	cpsie	i
 801518a:	60bb      	str	r3, [r7, #8]
}
 801518c:	bf00      	nop
 801518e:	bf00      	nop
 8015190:	e7fd      	b.n	801518e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	685a      	ldr	r2, [r3, #4]
 8015196:	4b11      	ldr	r3, [pc, #68]	@ (80151dc <vPortFree+0xb8>)
 8015198:	681b      	ldr	r3, [r3, #0]
 801519a:	4013      	ands	r3, r2
 801519c:	2b00      	cmp	r3, #0
 801519e:	d019      	beq.n	80151d4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d115      	bne.n	80151d4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	685a      	ldr	r2, [r3, #4]
 80151ac:	4b0b      	ldr	r3, [pc, #44]	@ (80151dc <vPortFree+0xb8>)
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	43db      	mvns	r3, r3
 80151b2:	401a      	ands	r2, r3
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80151b8:	f7fe fd96 	bl	8013ce8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	685a      	ldr	r2, [r3, #4]
 80151c0:	4b07      	ldr	r3, [pc, #28]	@ (80151e0 <vPortFree+0xbc>)
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	4413      	add	r3, r2
 80151c6:	4a06      	ldr	r2, [pc, #24]	@ (80151e0 <vPortFree+0xbc>)
 80151c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80151ca:	6938      	ldr	r0, [r7, #16]
 80151cc:	f000 f86c 	bl	80152a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80151d0:	f7fe fd98 	bl	8013d04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80151d4:	bf00      	nop
 80151d6:	3718      	adds	r7, #24
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	2000e574 	.word	0x2000e574
 80151e0:	2000e56c 	.word	0x2000e56c

080151e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80151e4:	b480      	push	{r7}
 80151e6:	b085      	sub	sp, #20
 80151e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80151ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80151ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80151f0:	4b27      	ldr	r3, [pc, #156]	@ (8015290 <prvHeapInit+0xac>)
 80151f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	f003 0307 	and.w	r3, r3, #7
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d00c      	beq.n	8015218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	3307      	adds	r3, #7
 8015202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	f023 0307 	bic.w	r3, r3, #7
 801520a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801520c:	68ba      	ldr	r2, [r7, #8]
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	1ad3      	subs	r3, r2, r3
 8015212:	4a1f      	ldr	r2, [pc, #124]	@ (8015290 <prvHeapInit+0xac>)
 8015214:	4413      	add	r3, r2
 8015216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801521c:	4a1d      	ldr	r2, [pc, #116]	@ (8015294 <prvHeapInit+0xb0>)
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015222:	4b1c      	ldr	r3, [pc, #112]	@ (8015294 <prvHeapInit+0xb0>)
 8015224:	2200      	movs	r2, #0
 8015226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	4413      	add	r3, r2
 801522e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015230:	2208      	movs	r2, #8
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	1a9b      	subs	r3, r3, r2
 8015236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	f023 0307 	bic.w	r3, r3, #7
 801523e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4a15      	ldr	r2, [pc, #84]	@ (8015298 <prvHeapInit+0xb4>)
 8015244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015246:	4b14      	ldr	r3, [pc, #80]	@ (8015298 <prvHeapInit+0xb4>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2200      	movs	r2, #0
 801524c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801524e:	4b12      	ldr	r3, [pc, #72]	@ (8015298 <prvHeapInit+0xb4>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	2200      	movs	r2, #0
 8015254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	68fa      	ldr	r2, [r7, #12]
 801525e:	1ad2      	subs	r2, r2, r3
 8015260:	683b      	ldr	r3, [r7, #0]
 8015262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015264:	4b0c      	ldr	r3, [pc, #48]	@ (8015298 <prvHeapInit+0xb4>)
 8015266:	681a      	ldr	r2, [r3, #0]
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	4a0a      	ldr	r2, [pc, #40]	@ (801529c <prvHeapInit+0xb8>)
 8015272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015274:	683b      	ldr	r3, [r7, #0]
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	4a09      	ldr	r2, [pc, #36]	@ (80152a0 <prvHeapInit+0xbc>)
 801527a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801527c:	4b09      	ldr	r3, [pc, #36]	@ (80152a4 <prvHeapInit+0xc0>)
 801527e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8015282:	601a      	str	r2, [r3, #0]
}
 8015284:	bf00      	nop
 8015286:	3714      	adds	r7, #20
 8015288:	46bd      	mov	sp, r7
 801528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528e:	4770      	bx	lr
 8015290:	20006560 	.word	0x20006560
 8015294:	2000e560 	.word	0x2000e560
 8015298:	2000e568 	.word	0x2000e568
 801529c:	2000e570 	.word	0x2000e570
 80152a0:	2000e56c 	.word	0x2000e56c
 80152a4:	2000e574 	.word	0x2000e574

080152a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80152a8:	b480      	push	{r7}
 80152aa:	b085      	sub	sp, #20
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80152b0:	4b28      	ldr	r3, [pc, #160]	@ (8015354 <prvInsertBlockIntoFreeList+0xac>)
 80152b2:	60fb      	str	r3, [r7, #12]
 80152b4:	e002      	b.n	80152bc <prvInsertBlockIntoFreeList+0x14>
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	60fb      	str	r3, [r7, #12]
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	687a      	ldr	r2, [r7, #4]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d8f7      	bhi.n	80152b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	685b      	ldr	r3, [r3, #4]
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	4413      	add	r3, r2
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d108      	bne.n	80152ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80152d8:	68fb      	ldr	r3, [r7, #12]
 80152da:	685a      	ldr	r2, [r3, #4]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	441a      	add	r2, r3
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	685b      	ldr	r3, [r3, #4]
 80152f2:	68ba      	ldr	r2, [r7, #8]
 80152f4:	441a      	add	r2, r3
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	429a      	cmp	r2, r3
 80152fc:	d118      	bne.n	8015330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	681a      	ldr	r2, [r3, #0]
 8015302:	4b15      	ldr	r3, [pc, #84]	@ (8015358 <prvInsertBlockIntoFreeList+0xb0>)
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	429a      	cmp	r2, r3
 8015308:	d00d      	beq.n	8015326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	685a      	ldr	r2, [r3, #4]
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	685b      	ldr	r3, [r3, #4]
 8015314:	441a      	add	r2, r3
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801531a:	68fb      	ldr	r3, [r7, #12]
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	681a      	ldr	r2, [r3, #0]
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	601a      	str	r2, [r3, #0]
 8015324:	e008      	b.n	8015338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015326:	4b0c      	ldr	r3, [pc, #48]	@ (8015358 <prvInsertBlockIntoFreeList+0xb0>)
 8015328:	681a      	ldr	r2, [r3, #0]
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	601a      	str	r2, [r3, #0]
 801532e:	e003      	b.n	8015338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015338:	68fa      	ldr	r2, [r7, #12]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	429a      	cmp	r2, r3
 801533e:	d002      	beq.n	8015346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015346:	bf00      	nop
 8015348:	3714      	adds	r7, #20
 801534a:	46bd      	mov	sp, r7
 801534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop
 8015354:	2000e560 	.word	0x2000e560
 8015358:	2000e568 	.word	0x2000e568

0801535c <atof>:
 801535c:	2100      	movs	r1, #0
 801535e:	f000 be03 	b.w	8015f68 <strtod>

08015362 <sulp>:
 8015362:	b570      	push	{r4, r5, r6, lr}
 8015364:	4604      	mov	r4, r0
 8015366:	460d      	mov	r5, r1
 8015368:	ec45 4b10 	vmov	d0, r4, r5
 801536c:	4616      	mov	r6, r2
 801536e:	f002 f807 	bl	8017380 <__ulp>
 8015372:	ec51 0b10 	vmov	r0, r1, d0
 8015376:	b17e      	cbz	r6, 8015398 <sulp+0x36>
 8015378:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801537c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015380:	2b00      	cmp	r3, #0
 8015382:	dd09      	ble.n	8015398 <sulp+0x36>
 8015384:	051b      	lsls	r3, r3, #20
 8015386:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801538a:	2400      	movs	r4, #0
 801538c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8015390:	4622      	mov	r2, r4
 8015392:	462b      	mov	r3, r5
 8015394:	f7eb f950 	bl	8000638 <__aeabi_dmul>
 8015398:	ec41 0b10 	vmov	d0, r0, r1
 801539c:	bd70      	pop	{r4, r5, r6, pc}
	...

080153a0 <_strtod_l>:
 80153a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a4:	b09f      	sub	sp, #124	@ 0x7c
 80153a6:	460c      	mov	r4, r1
 80153a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80153aa:	2200      	movs	r2, #0
 80153ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80153ae:	9005      	str	r0, [sp, #20]
 80153b0:	f04f 0a00 	mov.w	sl, #0
 80153b4:	f04f 0b00 	mov.w	fp, #0
 80153b8:	460a      	mov	r2, r1
 80153ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80153bc:	7811      	ldrb	r1, [r2, #0]
 80153be:	292b      	cmp	r1, #43	@ 0x2b
 80153c0:	d04a      	beq.n	8015458 <_strtod_l+0xb8>
 80153c2:	d838      	bhi.n	8015436 <_strtod_l+0x96>
 80153c4:	290d      	cmp	r1, #13
 80153c6:	d832      	bhi.n	801542e <_strtod_l+0x8e>
 80153c8:	2908      	cmp	r1, #8
 80153ca:	d832      	bhi.n	8015432 <_strtod_l+0x92>
 80153cc:	2900      	cmp	r1, #0
 80153ce:	d03b      	beq.n	8015448 <_strtod_l+0xa8>
 80153d0:	2200      	movs	r2, #0
 80153d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80153d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80153d6:	782a      	ldrb	r2, [r5, #0]
 80153d8:	2a30      	cmp	r2, #48	@ 0x30
 80153da:	f040 80b3 	bne.w	8015544 <_strtod_l+0x1a4>
 80153de:	786a      	ldrb	r2, [r5, #1]
 80153e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80153e4:	2a58      	cmp	r2, #88	@ 0x58
 80153e6:	d16e      	bne.n	80154c6 <_strtod_l+0x126>
 80153e8:	9302      	str	r3, [sp, #8]
 80153ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80153ec:	9301      	str	r3, [sp, #4]
 80153ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80153f0:	9300      	str	r3, [sp, #0]
 80153f2:	4a8e      	ldr	r2, [pc, #568]	@ (801562c <_strtod_l+0x28c>)
 80153f4:	9805      	ldr	r0, [sp, #20]
 80153f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80153f8:	a919      	add	r1, sp, #100	@ 0x64
 80153fa:	f001 f8bb 	bl	8016574 <__gethex>
 80153fe:	f010 060f 	ands.w	r6, r0, #15
 8015402:	4604      	mov	r4, r0
 8015404:	d005      	beq.n	8015412 <_strtod_l+0x72>
 8015406:	2e06      	cmp	r6, #6
 8015408:	d128      	bne.n	801545c <_strtod_l+0xbc>
 801540a:	3501      	adds	r5, #1
 801540c:	2300      	movs	r3, #0
 801540e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015410:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015412:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015414:	2b00      	cmp	r3, #0
 8015416:	f040 858e 	bne.w	8015f36 <_strtod_l+0xb96>
 801541a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801541c:	b1cb      	cbz	r3, 8015452 <_strtod_l+0xb2>
 801541e:	4652      	mov	r2, sl
 8015420:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8015424:	ec43 2b10 	vmov	d0, r2, r3
 8015428:	b01f      	add	sp, #124	@ 0x7c
 801542a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801542e:	2920      	cmp	r1, #32
 8015430:	d1ce      	bne.n	80153d0 <_strtod_l+0x30>
 8015432:	3201      	adds	r2, #1
 8015434:	e7c1      	b.n	80153ba <_strtod_l+0x1a>
 8015436:	292d      	cmp	r1, #45	@ 0x2d
 8015438:	d1ca      	bne.n	80153d0 <_strtod_l+0x30>
 801543a:	2101      	movs	r1, #1
 801543c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801543e:	1c51      	adds	r1, r2, #1
 8015440:	9119      	str	r1, [sp, #100]	@ 0x64
 8015442:	7852      	ldrb	r2, [r2, #1]
 8015444:	2a00      	cmp	r2, #0
 8015446:	d1c5      	bne.n	80153d4 <_strtod_l+0x34>
 8015448:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801544a:	9419      	str	r4, [sp, #100]	@ 0x64
 801544c:	2b00      	cmp	r3, #0
 801544e:	f040 8570 	bne.w	8015f32 <_strtod_l+0xb92>
 8015452:	4652      	mov	r2, sl
 8015454:	465b      	mov	r3, fp
 8015456:	e7e5      	b.n	8015424 <_strtod_l+0x84>
 8015458:	2100      	movs	r1, #0
 801545a:	e7ef      	b.n	801543c <_strtod_l+0x9c>
 801545c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801545e:	b13a      	cbz	r2, 8015470 <_strtod_l+0xd0>
 8015460:	2135      	movs	r1, #53	@ 0x35
 8015462:	a81c      	add	r0, sp, #112	@ 0x70
 8015464:	f002 f886 	bl	8017574 <__copybits>
 8015468:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801546a:	9805      	ldr	r0, [sp, #20]
 801546c:	f001 fc54 	bl	8016d18 <_Bfree>
 8015470:	3e01      	subs	r6, #1
 8015472:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8015474:	2e04      	cmp	r6, #4
 8015476:	d806      	bhi.n	8015486 <_strtod_l+0xe6>
 8015478:	e8df f006 	tbb	[pc, r6]
 801547c:	201d0314 	.word	0x201d0314
 8015480:	14          	.byte	0x14
 8015481:	00          	.byte	0x00
 8015482:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8015486:	05e1      	lsls	r1, r4, #23
 8015488:	bf48      	it	mi
 801548a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801548e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015492:	0d1b      	lsrs	r3, r3, #20
 8015494:	051b      	lsls	r3, r3, #20
 8015496:	2b00      	cmp	r3, #0
 8015498:	d1bb      	bne.n	8015412 <_strtod_l+0x72>
 801549a:	f000 ff6b 	bl	8016374 <__errno>
 801549e:	2322      	movs	r3, #34	@ 0x22
 80154a0:	6003      	str	r3, [r0, #0]
 80154a2:	e7b6      	b.n	8015412 <_strtod_l+0x72>
 80154a4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80154a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80154ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80154b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80154b4:	e7e7      	b.n	8015486 <_strtod_l+0xe6>
 80154b6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8015634 <_strtod_l+0x294>
 80154ba:	e7e4      	b.n	8015486 <_strtod_l+0xe6>
 80154bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80154c0:	f04f 3aff 	mov.w	sl, #4294967295
 80154c4:	e7df      	b.n	8015486 <_strtod_l+0xe6>
 80154c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80154cc:	785b      	ldrb	r3, [r3, #1]
 80154ce:	2b30      	cmp	r3, #48	@ 0x30
 80154d0:	d0f9      	beq.n	80154c6 <_strtod_l+0x126>
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d09d      	beq.n	8015412 <_strtod_l+0x72>
 80154d6:	2301      	movs	r3, #1
 80154d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80154da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80154dc:	930c      	str	r3, [sp, #48]	@ 0x30
 80154de:	2300      	movs	r3, #0
 80154e0:	9308      	str	r3, [sp, #32]
 80154e2:	930a      	str	r3, [sp, #40]	@ 0x28
 80154e4:	461f      	mov	r7, r3
 80154e6:	220a      	movs	r2, #10
 80154e8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80154ea:	7805      	ldrb	r5, [r0, #0]
 80154ec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80154f0:	b2d9      	uxtb	r1, r3
 80154f2:	2909      	cmp	r1, #9
 80154f4:	d928      	bls.n	8015548 <_strtod_l+0x1a8>
 80154f6:	494e      	ldr	r1, [pc, #312]	@ (8015630 <_strtod_l+0x290>)
 80154f8:	2201      	movs	r2, #1
 80154fa:	f000 feba 	bl	8016272 <strncmp>
 80154fe:	2800      	cmp	r0, #0
 8015500:	d032      	beq.n	8015568 <_strtod_l+0x1c8>
 8015502:	2000      	movs	r0, #0
 8015504:	462a      	mov	r2, r5
 8015506:	4681      	mov	r9, r0
 8015508:	463d      	mov	r5, r7
 801550a:	4603      	mov	r3, r0
 801550c:	2a65      	cmp	r2, #101	@ 0x65
 801550e:	d001      	beq.n	8015514 <_strtod_l+0x174>
 8015510:	2a45      	cmp	r2, #69	@ 0x45
 8015512:	d114      	bne.n	801553e <_strtod_l+0x19e>
 8015514:	b91d      	cbnz	r5, 801551e <_strtod_l+0x17e>
 8015516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015518:	4302      	orrs	r2, r0
 801551a:	d095      	beq.n	8015448 <_strtod_l+0xa8>
 801551c:	2500      	movs	r5, #0
 801551e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8015520:	1c62      	adds	r2, r4, #1
 8015522:	9219      	str	r2, [sp, #100]	@ 0x64
 8015524:	7862      	ldrb	r2, [r4, #1]
 8015526:	2a2b      	cmp	r2, #43	@ 0x2b
 8015528:	d077      	beq.n	801561a <_strtod_l+0x27a>
 801552a:	2a2d      	cmp	r2, #45	@ 0x2d
 801552c:	d07b      	beq.n	8015626 <_strtod_l+0x286>
 801552e:	f04f 0c00 	mov.w	ip, #0
 8015532:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015536:	2909      	cmp	r1, #9
 8015538:	f240 8082 	bls.w	8015640 <_strtod_l+0x2a0>
 801553c:	9419      	str	r4, [sp, #100]	@ 0x64
 801553e:	f04f 0800 	mov.w	r8, #0
 8015542:	e0a2      	b.n	801568a <_strtod_l+0x2ea>
 8015544:	2300      	movs	r3, #0
 8015546:	e7c7      	b.n	80154d8 <_strtod_l+0x138>
 8015548:	2f08      	cmp	r7, #8
 801554a:	bfd5      	itete	le
 801554c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801554e:	9908      	ldrgt	r1, [sp, #32]
 8015550:	fb02 3301 	mlale	r3, r2, r1, r3
 8015554:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015558:	f100 0001 	add.w	r0, r0, #1
 801555c:	bfd4      	ite	le
 801555e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8015560:	9308      	strgt	r3, [sp, #32]
 8015562:	3701      	adds	r7, #1
 8015564:	9019      	str	r0, [sp, #100]	@ 0x64
 8015566:	e7bf      	b.n	80154e8 <_strtod_l+0x148>
 8015568:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801556a:	1c5a      	adds	r2, r3, #1
 801556c:	9219      	str	r2, [sp, #100]	@ 0x64
 801556e:	785a      	ldrb	r2, [r3, #1]
 8015570:	b37f      	cbz	r7, 80155d2 <_strtod_l+0x232>
 8015572:	4681      	mov	r9, r0
 8015574:	463d      	mov	r5, r7
 8015576:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801557a:	2b09      	cmp	r3, #9
 801557c:	d912      	bls.n	80155a4 <_strtod_l+0x204>
 801557e:	2301      	movs	r3, #1
 8015580:	e7c4      	b.n	801550c <_strtod_l+0x16c>
 8015582:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015584:	1c5a      	adds	r2, r3, #1
 8015586:	9219      	str	r2, [sp, #100]	@ 0x64
 8015588:	785a      	ldrb	r2, [r3, #1]
 801558a:	3001      	adds	r0, #1
 801558c:	2a30      	cmp	r2, #48	@ 0x30
 801558e:	d0f8      	beq.n	8015582 <_strtod_l+0x1e2>
 8015590:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8015594:	2b08      	cmp	r3, #8
 8015596:	f200 84d3 	bhi.w	8015f40 <_strtod_l+0xba0>
 801559a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801559c:	930c      	str	r3, [sp, #48]	@ 0x30
 801559e:	4681      	mov	r9, r0
 80155a0:	2000      	movs	r0, #0
 80155a2:	4605      	mov	r5, r0
 80155a4:	3a30      	subs	r2, #48	@ 0x30
 80155a6:	f100 0301 	add.w	r3, r0, #1
 80155aa:	d02a      	beq.n	8015602 <_strtod_l+0x262>
 80155ac:	4499      	add	r9, r3
 80155ae:	eb00 0c05 	add.w	ip, r0, r5
 80155b2:	462b      	mov	r3, r5
 80155b4:	210a      	movs	r1, #10
 80155b6:	4563      	cmp	r3, ip
 80155b8:	d10d      	bne.n	80155d6 <_strtod_l+0x236>
 80155ba:	1c69      	adds	r1, r5, #1
 80155bc:	4401      	add	r1, r0
 80155be:	4428      	add	r0, r5
 80155c0:	2808      	cmp	r0, #8
 80155c2:	dc16      	bgt.n	80155f2 <_strtod_l+0x252>
 80155c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80155c6:	230a      	movs	r3, #10
 80155c8:	fb03 2300 	mla	r3, r3, r0, r2
 80155cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80155ce:	2300      	movs	r3, #0
 80155d0:	e018      	b.n	8015604 <_strtod_l+0x264>
 80155d2:	4638      	mov	r0, r7
 80155d4:	e7da      	b.n	801558c <_strtod_l+0x1ec>
 80155d6:	2b08      	cmp	r3, #8
 80155d8:	f103 0301 	add.w	r3, r3, #1
 80155dc:	dc03      	bgt.n	80155e6 <_strtod_l+0x246>
 80155de:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80155e0:	434e      	muls	r6, r1
 80155e2:	960a      	str	r6, [sp, #40]	@ 0x28
 80155e4:	e7e7      	b.n	80155b6 <_strtod_l+0x216>
 80155e6:	2b10      	cmp	r3, #16
 80155e8:	bfde      	ittt	le
 80155ea:	9e08      	ldrle	r6, [sp, #32]
 80155ec:	434e      	mulle	r6, r1
 80155ee:	9608      	strle	r6, [sp, #32]
 80155f0:	e7e1      	b.n	80155b6 <_strtod_l+0x216>
 80155f2:	280f      	cmp	r0, #15
 80155f4:	dceb      	bgt.n	80155ce <_strtod_l+0x22e>
 80155f6:	9808      	ldr	r0, [sp, #32]
 80155f8:	230a      	movs	r3, #10
 80155fa:	fb03 2300 	mla	r3, r3, r0, r2
 80155fe:	9308      	str	r3, [sp, #32]
 8015600:	e7e5      	b.n	80155ce <_strtod_l+0x22e>
 8015602:	4629      	mov	r1, r5
 8015604:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015606:	1c50      	adds	r0, r2, #1
 8015608:	9019      	str	r0, [sp, #100]	@ 0x64
 801560a:	7852      	ldrb	r2, [r2, #1]
 801560c:	4618      	mov	r0, r3
 801560e:	460d      	mov	r5, r1
 8015610:	e7b1      	b.n	8015576 <_strtod_l+0x1d6>
 8015612:	f04f 0900 	mov.w	r9, #0
 8015616:	2301      	movs	r3, #1
 8015618:	e77d      	b.n	8015516 <_strtod_l+0x176>
 801561a:	f04f 0c00 	mov.w	ip, #0
 801561e:	1ca2      	adds	r2, r4, #2
 8015620:	9219      	str	r2, [sp, #100]	@ 0x64
 8015622:	78a2      	ldrb	r2, [r4, #2]
 8015624:	e785      	b.n	8015532 <_strtod_l+0x192>
 8015626:	f04f 0c01 	mov.w	ip, #1
 801562a:	e7f8      	b.n	801561e <_strtod_l+0x27e>
 801562c:	08018dc0 	.word	0x08018dc0
 8015630:	08018d9c 	.word	0x08018d9c
 8015634:	7ff00000 	.word	0x7ff00000
 8015638:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801563a:	1c51      	adds	r1, r2, #1
 801563c:	9119      	str	r1, [sp, #100]	@ 0x64
 801563e:	7852      	ldrb	r2, [r2, #1]
 8015640:	2a30      	cmp	r2, #48	@ 0x30
 8015642:	d0f9      	beq.n	8015638 <_strtod_l+0x298>
 8015644:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8015648:	2908      	cmp	r1, #8
 801564a:	f63f af78 	bhi.w	801553e <_strtod_l+0x19e>
 801564e:	3a30      	subs	r2, #48	@ 0x30
 8015650:	920e      	str	r2, [sp, #56]	@ 0x38
 8015652:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015654:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015656:	f04f 080a 	mov.w	r8, #10
 801565a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801565c:	1c56      	adds	r6, r2, #1
 801565e:	9619      	str	r6, [sp, #100]	@ 0x64
 8015660:	7852      	ldrb	r2, [r2, #1]
 8015662:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8015666:	f1be 0f09 	cmp.w	lr, #9
 801566a:	d939      	bls.n	80156e0 <_strtod_l+0x340>
 801566c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801566e:	1a76      	subs	r6, r6, r1
 8015670:	2e08      	cmp	r6, #8
 8015672:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8015676:	dc03      	bgt.n	8015680 <_strtod_l+0x2e0>
 8015678:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801567a:	4588      	cmp	r8, r1
 801567c:	bfa8      	it	ge
 801567e:	4688      	movge	r8, r1
 8015680:	f1bc 0f00 	cmp.w	ip, #0
 8015684:	d001      	beq.n	801568a <_strtod_l+0x2ea>
 8015686:	f1c8 0800 	rsb	r8, r8, #0
 801568a:	2d00      	cmp	r5, #0
 801568c:	d14e      	bne.n	801572c <_strtod_l+0x38c>
 801568e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015690:	4308      	orrs	r0, r1
 8015692:	f47f aebe 	bne.w	8015412 <_strtod_l+0x72>
 8015696:	2b00      	cmp	r3, #0
 8015698:	f47f aed6 	bne.w	8015448 <_strtod_l+0xa8>
 801569c:	2a69      	cmp	r2, #105	@ 0x69
 801569e:	d028      	beq.n	80156f2 <_strtod_l+0x352>
 80156a0:	dc25      	bgt.n	80156ee <_strtod_l+0x34e>
 80156a2:	2a49      	cmp	r2, #73	@ 0x49
 80156a4:	d025      	beq.n	80156f2 <_strtod_l+0x352>
 80156a6:	2a4e      	cmp	r2, #78	@ 0x4e
 80156a8:	f47f aece 	bne.w	8015448 <_strtod_l+0xa8>
 80156ac:	499b      	ldr	r1, [pc, #620]	@ (801591c <_strtod_l+0x57c>)
 80156ae:	a819      	add	r0, sp, #100	@ 0x64
 80156b0:	f001 f982 	bl	80169b8 <__match>
 80156b4:	2800      	cmp	r0, #0
 80156b6:	f43f aec7 	beq.w	8015448 <_strtod_l+0xa8>
 80156ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	2b28      	cmp	r3, #40	@ 0x28
 80156c0:	d12e      	bne.n	8015720 <_strtod_l+0x380>
 80156c2:	4997      	ldr	r1, [pc, #604]	@ (8015920 <_strtod_l+0x580>)
 80156c4:	aa1c      	add	r2, sp, #112	@ 0x70
 80156c6:	a819      	add	r0, sp, #100	@ 0x64
 80156c8:	f001 f98a 	bl	80169e0 <__hexnan>
 80156cc:	2805      	cmp	r0, #5
 80156ce:	d127      	bne.n	8015720 <_strtod_l+0x380>
 80156d0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80156d2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80156d6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80156da:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80156de:	e698      	b.n	8015412 <_strtod_l+0x72>
 80156e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80156e2:	fb08 2101 	mla	r1, r8, r1, r2
 80156e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80156ea:	920e      	str	r2, [sp, #56]	@ 0x38
 80156ec:	e7b5      	b.n	801565a <_strtod_l+0x2ba>
 80156ee:	2a6e      	cmp	r2, #110	@ 0x6e
 80156f0:	e7da      	b.n	80156a8 <_strtod_l+0x308>
 80156f2:	498c      	ldr	r1, [pc, #560]	@ (8015924 <_strtod_l+0x584>)
 80156f4:	a819      	add	r0, sp, #100	@ 0x64
 80156f6:	f001 f95f 	bl	80169b8 <__match>
 80156fa:	2800      	cmp	r0, #0
 80156fc:	f43f aea4 	beq.w	8015448 <_strtod_l+0xa8>
 8015700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015702:	4989      	ldr	r1, [pc, #548]	@ (8015928 <_strtod_l+0x588>)
 8015704:	3b01      	subs	r3, #1
 8015706:	a819      	add	r0, sp, #100	@ 0x64
 8015708:	9319      	str	r3, [sp, #100]	@ 0x64
 801570a:	f001 f955 	bl	80169b8 <__match>
 801570e:	b910      	cbnz	r0, 8015716 <_strtod_l+0x376>
 8015710:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015712:	3301      	adds	r3, #1
 8015714:	9319      	str	r3, [sp, #100]	@ 0x64
 8015716:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015938 <_strtod_l+0x598>
 801571a:	f04f 0a00 	mov.w	sl, #0
 801571e:	e678      	b.n	8015412 <_strtod_l+0x72>
 8015720:	4882      	ldr	r0, [pc, #520]	@ (801592c <_strtod_l+0x58c>)
 8015722:	f000 fe6d 	bl	8016400 <nan>
 8015726:	ec5b ab10 	vmov	sl, fp, d0
 801572a:	e672      	b.n	8015412 <_strtod_l+0x72>
 801572c:	eba8 0309 	sub.w	r3, r8, r9
 8015730:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015732:	9309      	str	r3, [sp, #36]	@ 0x24
 8015734:	2f00      	cmp	r7, #0
 8015736:	bf08      	it	eq
 8015738:	462f      	moveq	r7, r5
 801573a:	2d10      	cmp	r5, #16
 801573c:	462c      	mov	r4, r5
 801573e:	bfa8      	it	ge
 8015740:	2410      	movge	r4, #16
 8015742:	f7ea feff 	bl	8000544 <__aeabi_ui2d>
 8015746:	2d09      	cmp	r5, #9
 8015748:	4682      	mov	sl, r0
 801574a:	468b      	mov	fp, r1
 801574c:	dc13      	bgt.n	8015776 <_strtod_l+0x3d6>
 801574e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015750:	2b00      	cmp	r3, #0
 8015752:	f43f ae5e 	beq.w	8015412 <_strtod_l+0x72>
 8015756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015758:	dd78      	ble.n	801584c <_strtod_l+0x4ac>
 801575a:	2b16      	cmp	r3, #22
 801575c:	dc5f      	bgt.n	801581e <_strtod_l+0x47e>
 801575e:	4974      	ldr	r1, [pc, #464]	@ (8015930 <_strtod_l+0x590>)
 8015760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015768:	4652      	mov	r2, sl
 801576a:	465b      	mov	r3, fp
 801576c:	f7ea ff64 	bl	8000638 <__aeabi_dmul>
 8015770:	4682      	mov	sl, r0
 8015772:	468b      	mov	fp, r1
 8015774:	e64d      	b.n	8015412 <_strtod_l+0x72>
 8015776:	4b6e      	ldr	r3, [pc, #440]	@ (8015930 <_strtod_l+0x590>)
 8015778:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801577c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8015780:	f7ea ff5a 	bl	8000638 <__aeabi_dmul>
 8015784:	4682      	mov	sl, r0
 8015786:	9808      	ldr	r0, [sp, #32]
 8015788:	468b      	mov	fp, r1
 801578a:	f7ea fedb 	bl	8000544 <__aeabi_ui2d>
 801578e:	4602      	mov	r2, r0
 8015790:	460b      	mov	r3, r1
 8015792:	4650      	mov	r0, sl
 8015794:	4659      	mov	r1, fp
 8015796:	f7ea fd99 	bl	80002cc <__adddf3>
 801579a:	2d0f      	cmp	r5, #15
 801579c:	4682      	mov	sl, r0
 801579e:	468b      	mov	fp, r1
 80157a0:	ddd5      	ble.n	801574e <_strtod_l+0x3ae>
 80157a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157a4:	1b2c      	subs	r4, r5, r4
 80157a6:	441c      	add	r4, r3
 80157a8:	2c00      	cmp	r4, #0
 80157aa:	f340 8096 	ble.w	80158da <_strtod_l+0x53a>
 80157ae:	f014 030f 	ands.w	r3, r4, #15
 80157b2:	d00a      	beq.n	80157ca <_strtod_l+0x42a>
 80157b4:	495e      	ldr	r1, [pc, #376]	@ (8015930 <_strtod_l+0x590>)
 80157b6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80157ba:	4652      	mov	r2, sl
 80157bc:	465b      	mov	r3, fp
 80157be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157c2:	f7ea ff39 	bl	8000638 <__aeabi_dmul>
 80157c6:	4682      	mov	sl, r0
 80157c8:	468b      	mov	fp, r1
 80157ca:	f034 040f 	bics.w	r4, r4, #15
 80157ce:	d073      	beq.n	80158b8 <_strtod_l+0x518>
 80157d0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80157d4:	dd48      	ble.n	8015868 <_strtod_l+0x4c8>
 80157d6:	2400      	movs	r4, #0
 80157d8:	46a0      	mov	r8, r4
 80157da:	940a      	str	r4, [sp, #40]	@ 0x28
 80157dc:	46a1      	mov	r9, r4
 80157de:	9a05      	ldr	r2, [sp, #20]
 80157e0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015938 <_strtod_l+0x598>
 80157e4:	2322      	movs	r3, #34	@ 0x22
 80157e6:	6013      	str	r3, [r2, #0]
 80157e8:	f04f 0a00 	mov.w	sl, #0
 80157ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	f43f ae0f 	beq.w	8015412 <_strtod_l+0x72>
 80157f4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80157f6:	9805      	ldr	r0, [sp, #20]
 80157f8:	f001 fa8e 	bl	8016d18 <_Bfree>
 80157fc:	9805      	ldr	r0, [sp, #20]
 80157fe:	4649      	mov	r1, r9
 8015800:	f001 fa8a 	bl	8016d18 <_Bfree>
 8015804:	9805      	ldr	r0, [sp, #20]
 8015806:	4641      	mov	r1, r8
 8015808:	f001 fa86 	bl	8016d18 <_Bfree>
 801580c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801580e:	9805      	ldr	r0, [sp, #20]
 8015810:	f001 fa82 	bl	8016d18 <_Bfree>
 8015814:	9805      	ldr	r0, [sp, #20]
 8015816:	4621      	mov	r1, r4
 8015818:	f001 fa7e 	bl	8016d18 <_Bfree>
 801581c:	e5f9      	b.n	8015412 <_strtod_l+0x72>
 801581e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015820:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8015824:	4293      	cmp	r3, r2
 8015826:	dbbc      	blt.n	80157a2 <_strtod_l+0x402>
 8015828:	4c41      	ldr	r4, [pc, #260]	@ (8015930 <_strtod_l+0x590>)
 801582a:	f1c5 050f 	rsb	r5, r5, #15
 801582e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015832:	4652      	mov	r2, sl
 8015834:	465b      	mov	r3, fp
 8015836:	e9d1 0100 	ldrd	r0, r1, [r1]
 801583a:	f7ea fefd 	bl	8000638 <__aeabi_dmul>
 801583e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015840:	1b5d      	subs	r5, r3, r5
 8015842:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8015846:	e9d4 2300 	ldrd	r2, r3, [r4]
 801584a:	e78f      	b.n	801576c <_strtod_l+0x3cc>
 801584c:	3316      	adds	r3, #22
 801584e:	dba8      	blt.n	80157a2 <_strtod_l+0x402>
 8015850:	4b37      	ldr	r3, [pc, #220]	@ (8015930 <_strtod_l+0x590>)
 8015852:	eba9 0808 	sub.w	r8, r9, r8
 8015856:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801585a:	e9d8 2300 	ldrd	r2, r3, [r8]
 801585e:	4650      	mov	r0, sl
 8015860:	4659      	mov	r1, fp
 8015862:	f7eb f813 	bl	800088c <__aeabi_ddiv>
 8015866:	e783      	b.n	8015770 <_strtod_l+0x3d0>
 8015868:	4b32      	ldr	r3, [pc, #200]	@ (8015934 <_strtod_l+0x594>)
 801586a:	9308      	str	r3, [sp, #32]
 801586c:	2300      	movs	r3, #0
 801586e:	1124      	asrs	r4, r4, #4
 8015870:	4650      	mov	r0, sl
 8015872:	4659      	mov	r1, fp
 8015874:	461e      	mov	r6, r3
 8015876:	2c01      	cmp	r4, #1
 8015878:	dc21      	bgt.n	80158be <_strtod_l+0x51e>
 801587a:	b10b      	cbz	r3, 8015880 <_strtod_l+0x4e0>
 801587c:	4682      	mov	sl, r0
 801587e:	468b      	mov	fp, r1
 8015880:	492c      	ldr	r1, [pc, #176]	@ (8015934 <_strtod_l+0x594>)
 8015882:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8015886:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801588a:	4652      	mov	r2, sl
 801588c:	465b      	mov	r3, fp
 801588e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015892:	f7ea fed1 	bl	8000638 <__aeabi_dmul>
 8015896:	4b28      	ldr	r3, [pc, #160]	@ (8015938 <_strtod_l+0x598>)
 8015898:	460a      	mov	r2, r1
 801589a:	400b      	ands	r3, r1
 801589c:	4927      	ldr	r1, [pc, #156]	@ (801593c <_strtod_l+0x59c>)
 801589e:	428b      	cmp	r3, r1
 80158a0:	4682      	mov	sl, r0
 80158a2:	d898      	bhi.n	80157d6 <_strtod_l+0x436>
 80158a4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80158a8:	428b      	cmp	r3, r1
 80158aa:	bf86      	itte	hi
 80158ac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8015940 <_strtod_l+0x5a0>
 80158b0:	f04f 3aff 	movhi.w	sl, #4294967295
 80158b4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80158b8:	2300      	movs	r3, #0
 80158ba:	9308      	str	r3, [sp, #32]
 80158bc:	e07a      	b.n	80159b4 <_strtod_l+0x614>
 80158be:	07e2      	lsls	r2, r4, #31
 80158c0:	d505      	bpl.n	80158ce <_strtod_l+0x52e>
 80158c2:	9b08      	ldr	r3, [sp, #32]
 80158c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158c8:	f7ea feb6 	bl	8000638 <__aeabi_dmul>
 80158cc:	2301      	movs	r3, #1
 80158ce:	9a08      	ldr	r2, [sp, #32]
 80158d0:	3208      	adds	r2, #8
 80158d2:	3601      	adds	r6, #1
 80158d4:	1064      	asrs	r4, r4, #1
 80158d6:	9208      	str	r2, [sp, #32]
 80158d8:	e7cd      	b.n	8015876 <_strtod_l+0x4d6>
 80158da:	d0ed      	beq.n	80158b8 <_strtod_l+0x518>
 80158dc:	4264      	negs	r4, r4
 80158de:	f014 020f 	ands.w	r2, r4, #15
 80158e2:	d00a      	beq.n	80158fa <_strtod_l+0x55a>
 80158e4:	4b12      	ldr	r3, [pc, #72]	@ (8015930 <_strtod_l+0x590>)
 80158e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80158ea:	4650      	mov	r0, sl
 80158ec:	4659      	mov	r1, fp
 80158ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80158f2:	f7ea ffcb 	bl	800088c <__aeabi_ddiv>
 80158f6:	4682      	mov	sl, r0
 80158f8:	468b      	mov	fp, r1
 80158fa:	1124      	asrs	r4, r4, #4
 80158fc:	d0dc      	beq.n	80158b8 <_strtod_l+0x518>
 80158fe:	2c1f      	cmp	r4, #31
 8015900:	dd20      	ble.n	8015944 <_strtod_l+0x5a4>
 8015902:	2400      	movs	r4, #0
 8015904:	46a0      	mov	r8, r4
 8015906:	940a      	str	r4, [sp, #40]	@ 0x28
 8015908:	46a1      	mov	r9, r4
 801590a:	9a05      	ldr	r2, [sp, #20]
 801590c:	2322      	movs	r3, #34	@ 0x22
 801590e:	f04f 0a00 	mov.w	sl, #0
 8015912:	f04f 0b00 	mov.w	fp, #0
 8015916:	6013      	str	r3, [r2, #0]
 8015918:	e768      	b.n	80157ec <_strtod_l+0x44c>
 801591a:	bf00      	nop
 801591c:	08018da7 	.word	0x08018da7
 8015920:	08018dac 	.word	0x08018dac
 8015924:	08018d9e 	.word	0x08018d9e
 8015928:	08018da1 	.word	0x08018da1
 801592c:	08019156 	.word	0x08019156
 8015930:	08019020 	.word	0x08019020
 8015934:	08018ff8 	.word	0x08018ff8
 8015938:	7ff00000 	.word	0x7ff00000
 801593c:	7ca00000 	.word	0x7ca00000
 8015940:	7fefffff 	.word	0x7fefffff
 8015944:	f014 0310 	ands.w	r3, r4, #16
 8015948:	bf18      	it	ne
 801594a:	236a      	movne	r3, #106	@ 0x6a
 801594c:	4ea9      	ldr	r6, [pc, #676]	@ (8015bf4 <_strtod_l+0x854>)
 801594e:	9308      	str	r3, [sp, #32]
 8015950:	4650      	mov	r0, sl
 8015952:	4659      	mov	r1, fp
 8015954:	2300      	movs	r3, #0
 8015956:	07e2      	lsls	r2, r4, #31
 8015958:	d504      	bpl.n	8015964 <_strtod_l+0x5c4>
 801595a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801595e:	f7ea fe6b 	bl	8000638 <__aeabi_dmul>
 8015962:	2301      	movs	r3, #1
 8015964:	1064      	asrs	r4, r4, #1
 8015966:	f106 0608 	add.w	r6, r6, #8
 801596a:	d1f4      	bne.n	8015956 <_strtod_l+0x5b6>
 801596c:	b10b      	cbz	r3, 8015972 <_strtod_l+0x5d2>
 801596e:	4682      	mov	sl, r0
 8015970:	468b      	mov	fp, r1
 8015972:	9b08      	ldr	r3, [sp, #32]
 8015974:	b1b3      	cbz	r3, 80159a4 <_strtod_l+0x604>
 8015976:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801597a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801597e:	2b00      	cmp	r3, #0
 8015980:	4659      	mov	r1, fp
 8015982:	dd0f      	ble.n	80159a4 <_strtod_l+0x604>
 8015984:	2b1f      	cmp	r3, #31
 8015986:	dd55      	ble.n	8015a34 <_strtod_l+0x694>
 8015988:	2b34      	cmp	r3, #52	@ 0x34
 801598a:	bfde      	ittt	le
 801598c:	f04f 33ff 	movle.w	r3, #4294967295
 8015990:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8015994:	4093      	lslle	r3, r2
 8015996:	f04f 0a00 	mov.w	sl, #0
 801599a:	bfcc      	ite	gt
 801599c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80159a0:	ea03 0b01 	andle.w	fp, r3, r1
 80159a4:	2200      	movs	r2, #0
 80159a6:	2300      	movs	r3, #0
 80159a8:	4650      	mov	r0, sl
 80159aa:	4659      	mov	r1, fp
 80159ac:	f7eb f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	d1a6      	bne.n	8015902 <_strtod_l+0x562>
 80159b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159b6:	9300      	str	r3, [sp, #0]
 80159b8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80159ba:	9805      	ldr	r0, [sp, #20]
 80159bc:	462b      	mov	r3, r5
 80159be:	463a      	mov	r2, r7
 80159c0:	f001 fa12 	bl	8016de8 <__s2b>
 80159c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80159c6:	2800      	cmp	r0, #0
 80159c8:	f43f af05 	beq.w	80157d6 <_strtod_l+0x436>
 80159cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159ce:	2a00      	cmp	r2, #0
 80159d0:	eba9 0308 	sub.w	r3, r9, r8
 80159d4:	bfa8      	it	ge
 80159d6:	2300      	movge	r3, #0
 80159d8:	9312      	str	r3, [sp, #72]	@ 0x48
 80159da:	2400      	movs	r4, #0
 80159dc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80159e0:	9316      	str	r3, [sp, #88]	@ 0x58
 80159e2:	46a0      	mov	r8, r4
 80159e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159e6:	9805      	ldr	r0, [sp, #20]
 80159e8:	6859      	ldr	r1, [r3, #4]
 80159ea:	f001 f955 	bl	8016c98 <_Balloc>
 80159ee:	4681      	mov	r9, r0
 80159f0:	2800      	cmp	r0, #0
 80159f2:	f43f aef4 	beq.w	80157de <_strtod_l+0x43e>
 80159f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80159f8:	691a      	ldr	r2, [r3, #16]
 80159fa:	3202      	adds	r2, #2
 80159fc:	f103 010c 	add.w	r1, r3, #12
 8015a00:	0092      	lsls	r2, r2, #2
 8015a02:	300c      	adds	r0, #12
 8015a04:	f000 fceb 	bl	80163de <memcpy>
 8015a08:	ec4b ab10 	vmov	d0, sl, fp
 8015a0c:	9805      	ldr	r0, [sp, #20]
 8015a0e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015a10:	a91b      	add	r1, sp, #108	@ 0x6c
 8015a12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015a16:	f001 fd23 	bl	8017460 <__d2b>
 8015a1a:	901a      	str	r0, [sp, #104]	@ 0x68
 8015a1c:	2800      	cmp	r0, #0
 8015a1e:	f43f aede 	beq.w	80157de <_strtod_l+0x43e>
 8015a22:	9805      	ldr	r0, [sp, #20]
 8015a24:	2101      	movs	r1, #1
 8015a26:	f001 fa75 	bl	8016f14 <__i2b>
 8015a2a:	4680      	mov	r8, r0
 8015a2c:	b948      	cbnz	r0, 8015a42 <_strtod_l+0x6a2>
 8015a2e:	f04f 0800 	mov.w	r8, #0
 8015a32:	e6d4      	b.n	80157de <_strtod_l+0x43e>
 8015a34:	f04f 32ff 	mov.w	r2, #4294967295
 8015a38:	fa02 f303 	lsl.w	r3, r2, r3
 8015a3c:	ea03 0a0a 	and.w	sl, r3, sl
 8015a40:	e7b0      	b.n	80159a4 <_strtod_l+0x604>
 8015a42:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015a44:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015a46:	2d00      	cmp	r5, #0
 8015a48:	bfab      	itete	ge
 8015a4a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015a4c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015a4e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015a50:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015a52:	bfac      	ite	ge
 8015a54:	18ef      	addge	r7, r5, r3
 8015a56:	1b5e      	sublt	r6, r3, r5
 8015a58:	9b08      	ldr	r3, [sp, #32]
 8015a5a:	1aed      	subs	r5, r5, r3
 8015a5c:	4415      	add	r5, r2
 8015a5e:	4b66      	ldr	r3, [pc, #408]	@ (8015bf8 <_strtod_l+0x858>)
 8015a60:	3d01      	subs	r5, #1
 8015a62:	429d      	cmp	r5, r3
 8015a64:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015a68:	da50      	bge.n	8015b0c <_strtod_l+0x76c>
 8015a6a:	1b5b      	subs	r3, r3, r5
 8015a6c:	2b1f      	cmp	r3, #31
 8015a6e:	eba2 0203 	sub.w	r2, r2, r3
 8015a72:	f04f 0101 	mov.w	r1, #1
 8015a76:	dc3d      	bgt.n	8015af4 <_strtod_l+0x754>
 8015a78:	fa01 f303 	lsl.w	r3, r1, r3
 8015a7c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015a7e:	2300      	movs	r3, #0
 8015a80:	9310      	str	r3, [sp, #64]	@ 0x40
 8015a82:	18bd      	adds	r5, r7, r2
 8015a84:	9b08      	ldr	r3, [sp, #32]
 8015a86:	42af      	cmp	r7, r5
 8015a88:	4416      	add	r6, r2
 8015a8a:	441e      	add	r6, r3
 8015a8c:	463b      	mov	r3, r7
 8015a8e:	bfa8      	it	ge
 8015a90:	462b      	movge	r3, r5
 8015a92:	42b3      	cmp	r3, r6
 8015a94:	bfa8      	it	ge
 8015a96:	4633      	movge	r3, r6
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	bfc2      	ittt	gt
 8015a9c:	1aed      	subgt	r5, r5, r3
 8015a9e:	1af6      	subgt	r6, r6, r3
 8015aa0:	1aff      	subgt	r7, r7, r3
 8015aa2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	dd16      	ble.n	8015ad6 <_strtod_l+0x736>
 8015aa8:	4641      	mov	r1, r8
 8015aaa:	9805      	ldr	r0, [sp, #20]
 8015aac:	461a      	mov	r2, r3
 8015aae:	f001 faf1 	bl	8017094 <__pow5mult>
 8015ab2:	4680      	mov	r8, r0
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d0ba      	beq.n	8015a2e <_strtod_l+0x68e>
 8015ab8:	4601      	mov	r1, r0
 8015aba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015abc:	9805      	ldr	r0, [sp, #20]
 8015abe:	f001 fa3f 	bl	8016f40 <__multiply>
 8015ac2:	900e      	str	r0, [sp, #56]	@ 0x38
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	f43f ae8a 	beq.w	80157de <_strtod_l+0x43e>
 8015aca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015acc:	9805      	ldr	r0, [sp, #20]
 8015ace:	f001 f923 	bl	8016d18 <_Bfree>
 8015ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015ad4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015ad6:	2d00      	cmp	r5, #0
 8015ad8:	dc1d      	bgt.n	8015b16 <_strtod_l+0x776>
 8015ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	dd23      	ble.n	8015b28 <_strtod_l+0x788>
 8015ae0:	4649      	mov	r1, r9
 8015ae2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015ae4:	9805      	ldr	r0, [sp, #20]
 8015ae6:	f001 fad5 	bl	8017094 <__pow5mult>
 8015aea:	4681      	mov	r9, r0
 8015aec:	b9e0      	cbnz	r0, 8015b28 <_strtod_l+0x788>
 8015aee:	f04f 0900 	mov.w	r9, #0
 8015af2:	e674      	b.n	80157de <_strtod_l+0x43e>
 8015af4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015af8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015afc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015b00:	35e2      	adds	r5, #226	@ 0xe2
 8015b02:	fa01 f305 	lsl.w	r3, r1, r5
 8015b06:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b08:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b0a:	e7ba      	b.n	8015a82 <_strtod_l+0x6e2>
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b10:	2301      	movs	r3, #1
 8015b12:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015b14:	e7b5      	b.n	8015a82 <_strtod_l+0x6e2>
 8015b16:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b18:	9805      	ldr	r0, [sp, #20]
 8015b1a:	462a      	mov	r2, r5
 8015b1c:	f001 fb14 	bl	8017148 <__lshift>
 8015b20:	901a      	str	r0, [sp, #104]	@ 0x68
 8015b22:	2800      	cmp	r0, #0
 8015b24:	d1d9      	bne.n	8015ada <_strtod_l+0x73a>
 8015b26:	e65a      	b.n	80157de <_strtod_l+0x43e>
 8015b28:	2e00      	cmp	r6, #0
 8015b2a:	dd07      	ble.n	8015b3c <_strtod_l+0x79c>
 8015b2c:	4649      	mov	r1, r9
 8015b2e:	9805      	ldr	r0, [sp, #20]
 8015b30:	4632      	mov	r2, r6
 8015b32:	f001 fb09 	bl	8017148 <__lshift>
 8015b36:	4681      	mov	r9, r0
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	d0d8      	beq.n	8015aee <_strtod_l+0x74e>
 8015b3c:	2f00      	cmp	r7, #0
 8015b3e:	dd08      	ble.n	8015b52 <_strtod_l+0x7b2>
 8015b40:	4641      	mov	r1, r8
 8015b42:	9805      	ldr	r0, [sp, #20]
 8015b44:	463a      	mov	r2, r7
 8015b46:	f001 faff 	bl	8017148 <__lshift>
 8015b4a:	4680      	mov	r8, r0
 8015b4c:	2800      	cmp	r0, #0
 8015b4e:	f43f ae46 	beq.w	80157de <_strtod_l+0x43e>
 8015b52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b54:	9805      	ldr	r0, [sp, #20]
 8015b56:	464a      	mov	r2, r9
 8015b58:	f001 fb7e 	bl	8017258 <__mdiff>
 8015b5c:	4604      	mov	r4, r0
 8015b5e:	2800      	cmp	r0, #0
 8015b60:	f43f ae3d 	beq.w	80157de <_strtod_l+0x43e>
 8015b64:	68c3      	ldr	r3, [r0, #12]
 8015b66:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015b68:	2300      	movs	r3, #0
 8015b6a:	60c3      	str	r3, [r0, #12]
 8015b6c:	4641      	mov	r1, r8
 8015b6e:	f001 fb57 	bl	8017220 <__mcmp>
 8015b72:	2800      	cmp	r0, #0
 8015b74:	da46      	bge.n	8015c04 <_strtod_l+0x864>
 8015b76:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015b78:	ea53 030a 	orrs.w	r3, r3, sl
 8015b7c:	d16c      	bne.n	8015c58 <_strtod_l+0x8b8>
 8015b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d168      	bne.n	8015c58 <_strtod_l+0x8b8>
 8015b86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015b8a:	0d1b      	lsrs	r3, r3, #20
 8015b8c:	051b      	lsls	r3, r3, #20
 8015b8e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015b92:	d961      	bls.n	8015c58 <_strtod_l+0x8b8>
 8015b94:	6963      	ldr	r3, [r4, #20]
 8015b96:	b913      	cbnz	r3, 8015b9e <_strtod_l+0x7fe>
 8015b98:	6923      	ldr	r3, [r4, #16]
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	dd5c      	ble.n	8015c58 <_strtod_l+0x8b8>
 8015b9e:	4621      	mov	r1, r4
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	9805      	ldr	r0, [sp, #20]
 8015ba4:	f001 fad0 	bl	8017148 <__lshift>
 8015ba8:	4641      	mov	r1, r8
 8015baa:	4604      	mov	r4, r0
 8015bac:	f001 fb38 	bl	8017220 <__mcmp>
 8015bb0:	2800      	cmp	r0, #0
 8015bb2:	dd51      	ble.n	8015c58 <_strtod_l+0x8b8>
 8015bb4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015bb8:	9a08      	ldr	r2, [sp, #32]
 8015bba:	0d1b      	lsrs	r3, r3, #20
 8015bbc:	051b      	lsls	r3, r3, #20
 8015bbe:	2a00      	cmp	r2, #0
 8015bc0:	d06b      	beq.n	8015c9a <_strtod_l+0x8fa>
 8015bc2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015bc6:	d868      	bhi.n	8015c9a <_strtod_l+0x8fa>
 8015bc8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015bcc:	f67f ae9d 	bls.w	801590a <_strtod_l+0x56a>
 8015bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8015bfc <_strtod_l+0x85c>)
 8015bd2:	4650      	mov	r0, sl
 8015bd4:	4659      	mov	r1, fp
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	f7ea fd2e 	bl	8000638 <__aeabi_dmul>
 8015bdc:	4b08      	ldr	r3, [pc, #32]	@ (8015c00 <_strtod_l+0x860>)
 8015bde:	400b      	ands	r3, r1
 8015be0:	4682      	mov	sl, r0
 8015be2:	468b      	mov	fp, r1
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	f47f ae05 	bne.w	80157f4 <_strtod_l+0x454>
 8015bea:	9a05      	ldr	r2, [sp, #20]
 8015bec:	2322      	movs	r3, #34	@ 0x22
 8015bee:	6013      	str	r3, [r2, #0]
 8015bf0:	e600      	b.n	80157f4 <_strtod_l+0x454>
 8015bf2:	bf00      	nop
 8015bf4:	08018dd8 	.word	0x08018dd8
 8015bf8:	fffffc02 	.word	0xfffffc02
 8015bfc:	39500000 	.word	0x39500000
 8015c00:	7ff00000 	.word	0x7ff00000
 8015c04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015c08:	d165      	bne.n	8015cd6 <_strtod_l+0x936>
 8015c0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015c0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c10:	b35a      	cbz	r2, 8015c6a <_strtod_l+0x8ca>
 8015c12:	4a9f      	ldr	r2, [pc, #636]	@ (8015e90 <_strtod_l+0xaf0>)
 8015c14:	4293      	cmp	r3, r2
 8015c16:	d12b      	bne.n	8015c70 <_strtod_l+0x8d0>
 8015c18:	9b08      	ldr	r3, [sp, #32]
 8015c1a:	4651      	mov	r1, sl
 8015c1c:	b303      	cbz	r3, 8015c60 <_strtod_l+0x8c0>
 8015c1e:	4b9d      	ldr	r3, [pc, #628]	@ (8015e94 <_strtod_l+0xaf4>)
 8015c20:	465a      	mov	r2, fp
 8015c22:	4013      	ands	r3, r2
 8015c24:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015c28:	f04f 32ff 	mov.w	r2, #4294967295
 8015c2c:	d81b      	bhi.n	8015c66 <_strtod_l+0x8c6>
 8015c2e:	0d1b      	lsrs	r3, r3, #20
 8015c30:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015c34:	fa02 f303 	lsl.w	r3, r2, r3
 8015c38:	4299      	cmp	r1, r3
 8015c3a:	d119      	bne.n	8015c70 <_strtod_l+0x8d0>
 8015c3c:	4b96      	ldr	r3, [pc, #600]	@ (8015e98 <_strtod_l+0xaf8>)
 8015c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c40:	429a      	cmp	r2, r3
 8015c42:	d102      	bne.n	8015c4a <_strtod_l+0x8aa>
 8015c44:	3101      	adds	r1, #1
 8015c46:	f43f adca 	beq.w	80157de <_strtod_l+0x43e>
 8015c4a:	4b92      	ldr	r3, [pc, #584]	@ (8015e94 <_strtod_l+0xaf4>)
 8015c4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c4e:	401a      	ands	r2, r3
 8015c50:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015c54:	f04f 0a00 	mov.w	sl, #0
 8015c58:	9b08      	ldr	r3, [sp, #32]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d1b8      	bne.n	8015bd0 <_strtod_l+0x830>
 8015c5e:	e5c9      	b.n	80157f4 <_strtod_l+0x454>
 8015c60:	f04f 33ff 	mov.w	r3, #4294967295
 8015c64:	e7e8      	b.n	8015c38 <_strtod_l+0x898>
 8015c66:	4613      	mov	r3, r2
 8015c68:	e7e6      	b.n	8015c38 <_strtod_l+0x898>
 8015c6a:	ea53 030a 	orrs.w	r3, r3, sl
 8015c6e:	d0a1      	beq.n	8015bb4 <_strtod_l+0x814>
 8015c70:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015c72:	b1db      	cbz	r3, 8015cac <_strtod_l+0x90c>
 8015c74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c76:	4213      	tst	r3, r2
 8015c78:	d0ee      	beq.n	8015c58 <_strtod_l+0x8b8>
 8015c7a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c7c:	9a08      	ldr	r2, [sp, #32]
 8015c7e:	4650      	mov	r0, sl
 8015c80:	4659      	mov	r1, fp
 8015c82:	b1bb      	cbz	r3, 8015cb4 <_strtod_l+0x914>
 8015c84:	f7ff fb6d 	bl	8015362 <sulp>
 8015c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015c8c:	ec53 2b10 	vmov	r2, r3, d0
 8015c90:	f7ea fb1c 	bl	80002cc <__adddf3>
 8015c94:	4682      	mov	sl, r0
 8015c96:	468b      	mov	fp, r1
 8015c98:	e7de      	b.n	8015c58 <_strtod_l+0x8b8>
 8015c9a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015c9e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015ca2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015ca6:	f04f 3aff 	mov.w	sl, #4294967295
 8015caa:	e7d5      	b.n	8015c58 <_strtod_l+0x8b8>
 8015cac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015cae:	ea13 0f0a 	tst.w	r3, sl
 8015cb2:	e7e1      	b.n	8015c78 <_strtod_l+0x8d8>
 8015cb4:	f7ff fb55 	bl	8015362 <sulp>
 8015cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015cbc:	ec53 2b10 	vmov	r2, r3, d0
 8015cc0:	f7ea fb02 	bl	80002c8 <__aeabi_dsub>
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	4682      	mov	sl, r0
 8015cca:	468b      	mov	fp, r1
 8015ccc:	f7ea ff1c 	bl	8000b08 <__aeabi_dcmpeq>
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	d0c1      	beq.n	8015c58 <_strtod_l+0x8b8>
 8015cd4:	e619      	b.n	801590a <_strtod_l+0x56a>
 8015cd6:	4641      	mov	r1, r8
 8015cd8:	4620      	mov	r0, r4
 8015cda:	f001 fc19 	bl	8017510 <__ratio>
 8015cde:	ec57 6b10 	vmov	r6, r7, d0
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015ce8:	4630      	mov	r0, r6
 8015cea:	4639      	mov	r1, r7
 8015cec:	f7ea ff20 	bl	8000b30 <__aeabi_dcmple>
 8015cf0:	2800      	cmp	r0, #0
 8015cf2:	d06f      	beq.n	8015dd4 <_strtod_l+0xa34>
 8015cf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d17a      	bne.n	8015df0 <_strtod_l+0xa50>
 8015cfa:	f1ba 0f00 	cmp.w	sl, #0
 8015cfe:	d158      	bne.n	8015db2 <_strtod_l+0xa12>
 8015d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d15a      	bne.n	8015dc0 <_strtod_l+0xa20>
 8015d0a:	4b64      	ldr	r3, [pc, #400]	@ (8015e9c <_strtod_l+0xafc>)
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	4630      	mov	r0, r6
 8015d10:	4639      	mov	r1, r7
 8015d12:	f7ea ff03 	bl	8000b1c <__aeabi_dcmplt>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d159      	bne.n	8015dce <_strtod_l+0xa2e>
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	4639      	mov	r1, r7
 8015d1e:	4b60      	ldr	r3, [pc, #384]	@ (8015ea0 <_strtod_l+0xb00>)
 8015d20:	2200      	movs	r2, #0
 8015d22:	f7ea fc89 	bl	8000638 <__aeabi_dmul>
 8015d26:	4606      	mov	r6, r0
 8015d28:	460f      	mov	r7, r1
 8015d2a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015d2e:	9606      	str	r6, [sp, #24]
 8015d30:	9307      	str	r3, [sp, #28]
 8015d32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015d36:	4d57      	ldr	r5, [pc, #348]	@ (8015e94 <_strtod_l+0xaf4>)
 8015d38:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015d3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d3e:	401d      	ands	r5, r3
 8015d40:	4b58      	ldr	r3, [pc, #352]	@ (8015ea4 <_strtod_l+0xb04>)
 8015d42:	429d      	cmp	r5, r3
 8015d44:	f040 80b2 	bne.w	8015eac <_strtod_l+0xb0c>
 8015d48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d4a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015d4e:	ec4b ab10 	vmov	d0, sl, fp
 8015d52:	f001 fb15 	bl	8017380 <__ulp>
 8015d56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015d5a:	ec51 0b10 	vmov	r0, r1, d0
 8015d5e:	f7ea fc6b 	bl	8000638 <__aeabi_dmul>
 8015d62:	4652      	mov	r2, sl
 8015d64:	465b      	mov	r3, fp
 8015d66:	f7ea fab1 	bl	80002cc <__adddf3>
 8015d6a:	460b      	mov	r3, r1
 8015d6c:	4949      	ldr	r1, [pc, #292]	@ (8015e94 <_strtod_l+0xaf4>)
 8015d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8015ea8 <_strtod_l+0xb08>)
 8015d70:	4019      	ands	r1, r3
 8015d72:	4291      	cmp	r1, r2
 8015d74:	4682      	mov	sl, r0
 8015d76:	d942      	bls.n	8015dfe <_strtod_l+0xa5e>
 8015d78:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015d7a:	4b47      	ldr	r3, [pc, #284]	@ (8015e98 <_strtod_l+0xaf8>)
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d103      	bne.n	8015d88 <_strtod_l+0x9e8>
 8015d80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d82:	3301      	adds	r3, #1
 8015d84:	f43f ad2b 	beq.w	80157de <_strtod_l+0x43e>
 8015d88:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015e98 <_strtod_l+0xaf8>
 8015d8c:	f04f 3aff 	mov.w	sl, #4294967295
 8015d90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015d92:	9805      	ldr	r0, [sp, #20]
 8015d94:	f000 ffc0 	bl	8016d18 <_Bfree>
 8015d98:	9805      	ldr	r0, [sp, #20]
 8015d9a:	4649      	mov	r1, r9
 8015d9c:	f000 ffbc 	bl	8016d18 <_Bfree>
 8015da0:	9805      	ldr	r0, [sp, #20]
 8015da2:	4641      	mov	r1, r8
 8015da4:	f000 ffb8 	bl	8016d18 <_Bfree>
 8015da8:	9805      	ldr	r0, [sp, #20]
 8015daa:	4621      	mov	r1, r4
 8015dac:	f000 ffb4 	bl	8016d18 <_Bfree>
 8015db0:	e618      	b.n	80159e4 <_strtod_l+0x644>
 8015db2:	f1ba 0f01 	cmp.w	sl, #1
 8015db6:	d103      	bne.n	8015dc0 <_strtod_l+0xa20>
 8015db8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015dba:	2b00      	cmp	r3, #0
 8015dbc:	f43f ada5 	beq.w	801590a <_strtod_l+0x56a>
 8015dc0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015e70 <_strtod_l+0xad0>
 8015dc4:	4f35      	ldr	r7, [pc, #212]	@ (8015e9c <_strtod_l+0xafc>)
 8015dc6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015dca:	2600      	movs	r6, #0
 8015dcc:	e7b1      	b.n	8015d32 <_strtod_l+0x992>
 8015dce:	4f34      	ldr	r7, [pc, #208]	@ (8015ea0 <_strtod_l+0xb00>)
 8015dd0:	2600      	movs	r6, #0
 8015dd2:	e7aa      	b.n	8015d2a <_strtod_l+0x98a>
 8015dd4:	4b32      	ldr	r3, [pc, #200]	@ (8015ea0 <_strtod_l+0xb00>)
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	4639      	mov	r1, r7
 8015dda:	2200      	movs	r2, #0
 8015ddc:	f7ea fc2c 	bl	8000638 <__aeabi_dmul>
 8015de0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015de2:	4606      	mov	r6, r0
 8015de4:	460f      	mov	r7, r1
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d09f      	beq.n	8015d2a <_strtod_l+0x98a>
 8015dea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015dee:	e7a0      	b.n	8015d32 <_strtod_l+0x992>
 8015df0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015e78 <_strtod_l+0xad8>
 8015df4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015df8:	ec57 6b17 	vmov	r6, r7, d7
 8015dfc:	e799      	b.n	8015d32 <_strtod_l+0x992>
 8015dfe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015e02:	9b08      	ldr	r3, [sp, #32]
 8015e04:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d1c1      	bne.n	8015d90 <_strtod_l+0x9f0>
 8015e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015e10:	0d1b      	lsrs	r3, r3, #20
 8015e12:	051b      	lsls	r3, r3, #20
 8015e14:	429d      	cmp	r5, r3
 8015e16:	d1bb      	bne.n	8015d90 <_strtod_l+0x9f0>
 8015e18:	4630      	mov	r0, r6
 8015e1a:	4639      	mov	r1, r7
 8015e1c:	f7ea ff2e 	bl	8000c7c <__aeabi_d2lz>
 8015e20:	f7ea fbdc 	bl	80005dc <__aeabi_l2d>
 8015e24:	4602      	mov	r2, r0
 8015e26:	460b      	mov	r3, r1
 8015e28:	4630      	mov	r0, r6
 8015e2a:	4639      	mov	r1, r7
 8015e2c:	f7ea fa4c 	bl	80002c8 <__aeabi_dsub>
 8015e30:	460b      	mov	r3, r1
 8015e32:	4602      	mov	r2, r0
 8015e34:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015e38:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015e3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e3e:	ea46 060a 	orr.w	r6, r6, sl
 8015e42:	431e      	orrs	r6, r3
 8015e44:	d06f      	beq.n	8015f26 <_strtod_l+0xb86>
 8015e46:	a30e      	add	r3, pc, #56	@ (adr r3, 8015e80 <_strtod_l+0xae0>)
 8015e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e4c:	f7ea fe66 	bl	8000b1c <__aeabi_dcmplt>
 8015e50:	2800      	cmp	r0, #0
 8015e52:	f47f accf 	bne.w	80157f4 <_strtod_l+0x454>
 8015e56:	a30c      	add	r3, pc, #48	@ (adr r3, 8015e88 <_strtod_l+0xae8>)
 8015e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015e60:	f7ea fe7a 	bl	8000b58 <__aeabi_dcmpgt>
 8015e64:	2800      	cmp	r0, #0
 8015e66:	d093      	beq.n	8015d90 <_strtod_l+0x9f0>
 8015e68:	e4c4      	b.n	80157f4 <_strtod_l+0x454>
 8015e6a:	bf00      	nop
 8015e6c:	f3af 8000 	nop.w
 8015e70:	00000000 	.word	0x00000000
 8015e74:	bff00000 	.word	0xbff00000
 8015e78:	00000000 	.word	0x00000000
 8015e7c:	3ff00000 	.word	0x3ff00000
 8015e80:	94a03595 	.word	0x94a03595
 8015e84:	3fdfffff 	.word	0x3fdfffff
 8015e88:	35afe535 	.word	0x35afe535
 8015e8c:	3fe00000 	.word	0x3fe00000
 8015e90:	000fffff 	.word	0x000fffff
 8015e94:	7ff00000 	.word	0x7ff00000
 8015e98:	7fefffff 	.word	0x7fefffff
 8015e9c:	3ff00000 	.word	0x3ff00000
 8015ea0:	3fe00000 	.word	0x3fe00000
 8015ea4:	7fe00000 	.word	0x7fe00000
 8015ea8:	7c9fffff 	.word	0x7c9fffff
 8015eac:	9b08      	ldr	r3, [sp, #32]
 8015eae:	b323      	cbz	r3, 8015efa <_strtod_l+0xb5a>
 8015eb0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015eb4:	d821      	bhi.n	8015efa <_strtod_l+0xb5a>
 8015eb6:	a328      	add	r3, pc, #160	@ (adr r3, 8015f58 <_strtod_l+0xbb8>)
 8015eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ebc:	4630      	mov	r0, r6
 8015ebe:	4639      	mov	r1, r7
 8015ec0:	f7ea fe36 	bl	8000b30 <__aeabi_dcmple>
 8015ec4:	b1a0      	cbz	r0, 8015ef0 <_strtod_l+0xb50>
 8015ec6:	4639      	mov	r1, r7
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f7ea fe4f 	bl	8000b6c <__aeabi_d2uiz>
 8015ece:	2801      	cmp	r0, #1
 8015ed0:	bf38      	it	cc
 8015ed2:	2001      	movcc	r0, #1
 8015ed4:	f7ea fb36 	bl	8000544 <__aeabi_ui2d>
 8015ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015eda:	4606      	mov	r6, r0
 8015edc:	460f      	mov	r7, r1
 8015ede:	b9fb      	cbnz	r3, 8015f20 <_strtod_l+0xb80>
 8015ee0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015ee4:	9014      	str	r0, [sp, #80]	@ 0x50
 8015ee6:	9315      	str	r3, [sp, #84]	@ 0x54
 8015ee8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015eec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015ef0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015ef2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015ef6:	1b5b      	subs	r3, r3, r5
 8015ef8:	9311      	str	r3, [sp, #68]	@ 0x44
 8015efa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015efe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015f02:	f001 fa3d 	bl	8017380 <__ulp>
 8015f06:	4650      	mov	r0, sl
 8015f08:	ec53 2b10 	vmov	r2, r3, d0
 8015f0c:	4659      	mov	r1, fp
 8015f0e:	f7ea fb93 	bl	8000638 <__aeabi_dmul>
 8015f12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015f16:	f7ea f9d9 	bl	80002cc <__adddf3>
 8015f1a:	4682      	mov	sl, r0
 8015f1c:	468b      	mov	fp, r1
 8015f1e:	e770      	b.n	8015e02 <_strtod_l+0xa62>
 8015f20:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015f24:	e7e0      	b.n	8015ee8 <_strtod_l+0xb48>
 8015f26:	a30e      	add	r3, pc, #56	@ (adr r3, 8015f60 <_strtod_l+0xbc0>)
 8015f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f2c:	f7ea fdf6 	bl	8000b1c <__aeabi_dcmplt>
 8015f30:	e798      	b.n	8015e64 <_strtod_l+0xac4>
 8015f32:	2300      	movs	r3, #0
 8015f34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f36:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015f38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f3a:	6013      	str	r3, [r2, #0]
 8015f3c:	f7ff ba6d 	b.w	801541a <_strtod_l+0x7a>
 8015f40:	2a65      	cmp	r2, #101	@ 0x65
 8015f42:	f43f ab66 	beq.w	8015612 <_strtod_l+0x272>
 8015f46:	2a45      	cmp	r2, #69	@ 0x45
 8015f48:	f43f ab63 	beq.w	8015612 <_strtod_l+0x272>
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	f7ff bb9e 	b.w	801568e <_strtod_l+0x2ee>
 8015f52:	bf00      	nop
 8015f54:	f3af 8000 	nop.w
 8015f58:	ffc00000 	.word	0xffc00000
 8015f5c:	41dfffff 	.word	0x41dfffff
 8015f60:	94a03595 	.word	0x94a03595
 8015f64:	3fcfffff 	.word	0x3fcfffff

08015f68 <strtod>:
 8015f68:	460a      	mov	r2, r1
 8015f6a:	4601      	mov	r1, r0
 8015f6c:	4802      	ldr	r0, [pc, #8]	@ (8015f78 <strtod+0x10>)
 8015f6e:	4b03      	ldr	r3, [pc, #12]	@ (8015f7c <strtod+0x14>)
 8015f70:	6800      	ldr	r0, [r0, #0]
 8015f72:	f7ff ba15 	b.w	80153a0 <_strtod_l>
 8015f76:	bf00      	nop
 8015f78:	200001f4 	.word	0x200001f4
 8015f7c:	20000088 	.word	0x20000088

08015f80 <std>:
 8015f80:	2300      	movs	r3, #0
 8015f82:	b510      	push	{r4, lr}
 8015f84:	4604      	mov	r4, r0
 8015f86:	e9c0 3300 	strd	r3, r3, [r0]
 8015f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f8e:	6083      	str	r3, [r0, #8]
 8015f90:	8181      	strh	r1, [r0, #12]
 8015f92:	6643      	str	r3, [r0, #100]	@ 0x64
 8015f94:	81c2      	strh	r2, [r0, #14]
 8015f96:	6183      	str	r3, [r0, #24]
 8015f98:	4619      	mov	r1, r3
 8015f9a:	2208      	movs	r2, #8
 8015f9c:	305c      	adds	r0, #92	@ 0x5c
 8015f9e:	f000 f942 	bl	8016226 <memset>
 8015fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8015fd8 <std+0x58>)
 8015fa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8015fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8015fdc <std+0x5c>)
 8015fa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015faa:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe0 <std+0x60>)
 8015fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015fae:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe4 <std+0x64>)
 8015fb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8015fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8015fe8 <std+0x68>)
 8015fb4:	6224      	str	r4, [r4, #32]
 8015fb6:	429c      	cmp	r4, r3
 8015fb8:	d006      	beq.n	8015fc8 <std+0x48>
 8015fba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015fbe:	4294      	cmp	r4, r2
 8015fc0:	d002      	beq.n	8015fc8 <std+0x48>
 8015fc2:	33d0      	adds	r3, #208	@ 0xd0
 8015fc4:	429c      	cmp	r4, r3
 8015fc6:	d105      	bne.n	8015fd4 <std+0x54>
 8015fc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015fd0:	f000 b9fa 	b.w	80163c8 <__retarget_lock_init_recursive>
 8015fd4:	bd10      	pop	{r4, pc}
 8015fd6:	bf00      	nop
 8015fd8:	0801616d 	.word	0x0801616d
 8015fdc:	0801618f 	.word	0x0801618f
 8015fe0:	080161c7 	.word	0x080161c7
 8015fe4:	080161eb 	.word	0x080161eb
 8015fe8:	2000e578 	.word	0x2000e578

08015fec <stdio_exit_handler>:
 8015fec:	4a02      	ldr	r2, [pc, #8]	@ (8015ff8 <stdio_exit_handler+0xc>)
 8015fee:	4903      	ldr	r1, [pc, #12]	@ (8015ffc <stdio_exit_handler+0x10>)
 8015ff0:	4803      	ldr	r0, [pc, #12]	@ (8016000 <stdio_exit_handler+0x14>)
 8015ff2:	f000 b869 	b.w	80160c8 <_fwalk_sglue>
 8015ff6:	bf00      	nop
 8015ff8:	2000007c 	.word	0x2000007c
 8015ffc:	08017ce9 	.word	0x08017ce9
 8016000:	200001f8 	.word	0x200001f8

08016004 <cleanup_stdio>:
 8016004:	6841      	ldr	r1, [r0, #4]
 8016006:	4b0c      	ldr	r3, [pc, #48]	@ (8016038 <cleanup_stdio+0x34>)
 8016008:	4299      	cmp	r1, r3
 801600a:	b510      	push	{r4, lr}
 801600c:	4604      	mov	r4, r0
 801600e:	d001      	beq.n	8016014 <cleanup_stdio+0x10>
 8016010:	f001 fe6a 	bl	8017ce8 <_fflush_r>
 8016014:	68a1      	ldr	r1, [r4, #8]
 8016016:	4b09      	ldr	r3, [pc, #36]	@ (801603c <cleanup_stdio+0x38>)
 8016018:	4299      	cmp	r1, r3
 801601a:	d002      	beq.n	8016022 <cleanup_stdio+0x1e>
 801601c:	4620      	mov	r0, r4
 801601e:	f001 fe63 	bl	8017ce8 <_fflush_r>
 8016022:	68e1      	ldr	r1, [r4, #12]
 8016024:	4b06      	ldr	r3, [pc, #24]	@ (8016040 <cleanup_stdio+0x3c>)
 8016026:	4299      	cmp	r1, r3
 8016028:	d004      	beq.n	8016034 <cleanup_stdio+0x30>
 801602a:	4620      	mov	r0, r4
 801602c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016030:	f001 be5a 	b.w	8017ce8 <_fflush_r>
 8016034:	bd10      	pop	{r4, pc}
 8016036:	bf00      	nop
 8016038:	2000e578 	.word	0x2000e578
 801603c:	2000e5e0 	.word	0x2000e5e0
 8016040:	2000e648 	.word	0x2000e648

08016044 <global_stdio_init.part.0>:
 8016044:	b510      	push	{r4, lr}
 8016046:	4b0b      	ldr	r3, [pc, #44]	@ (8016074 <global_stdio_init.part.0+0x30>)
 8016048:	4c0b      	ldr	r4, [pc, #44]	@ (8016078 <global_stdio_init.part.0+0x34>)
 801604a:	4a0c      	ldr	r2, [pc, #48]	@ (801607c <global_stdio_init.part.0+0x38>)
 801604c:	601a      	str	r2, [r3, #0]
 801604e:	4620      	mov	r0, r4
 8016050:	2200      	movs	r2, #0
 8016052:	2104      	movs	r1, #4
 8016054:	f7ff ff94 	bl	8015f80 <std>
 8016058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801605c:	2201      	movs	r2, #1
 801605e:	2109      	movs	r1, #9
 8016060:	f7ff ff8e 	bl	8015f80 <std>
 8016064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016068:	2202      	movs	r2, #2
 801606a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801606e:	2112      	movs	r1, #18
 8016070:	f7ff bf86 	b.w	8015f80 <std>
 8016074:	2000e6b0 	.word	0x2000e6b0
 8016078:	2000e578 	.word	0x2000e578
 801607c:	08015fed 	.word	0x08015fed

08016080 <__sfp_lock_acquire>:
 8016080:	4801      	ldr	r0, [pc, #4]	@ (8016088 <__sfp_lock_acquire+0x8>)
 8016082:	f000 b9a2 	b.w	80163ca <__retarget_lock_acquire_recursive>
 8016086:	bf00      	nop
 8016088:	2000e6b9 	.word	0x2000e6b9

0801608c <__sfp_lock_release>:
 801608c:	4801      	ldr	r0, [pc, #4]	@ (8016094 <__sfp_lock_release+0x8>)
 801608e:	f000 b99d 	b.w	80163cc <__retarget_lock_release_recursive>
 8016092:	bf00      	nop
 8016094:	2000e6b9 	.word	0x2000e6b9

08016098 <__sinit>:
 8016098:	b510      	push	{r4, lr}
 801609a:	4604      	mov	r4, r0
 801609c:	f7ff fff0 	bl	8016080 <__sfp_lock_acquire>
 80160a0:	6a23      	ldr	r3, [r4, #32]
 80160a2:	b11b      	cbz	r3, 80160ac <__sinit+0x14>
 80160a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160a8:	f7ff bff0 	b.w	801608c <__sfp_lock_release>
 80160ac:	4b04      	ldr	r3, [pc, #16]	@ (80160c0 <__sinit+0x28>)
 80160ae:	6223      	str	r3, [r4, #32]
 80160b0:	4b04      	ldr	r3, [pc, #16]	@ (80160c4 <__sinit+0x2c>)
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d1f5      	bne.n	80160a4 <__sinit+0xc>
 80160b8:	f7ff ffc4 	bl	8016044 <global_stdio_init.part.0>
 80160bc:	e7f2      	b.n	80160a4 <__sinit+0xc>
 80160be:	bf00      	nop
 80160c0:	08016005 	.word	0x08016005
 80160c4:	2000e6b0 	.word	0x2000e6b0

080160c8 <_fwalk_sglue>:
 80160c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80160cc:	4607      	mov	r7, r0
 80160ce:	4688      	mov	r8, r1
 80160d0:	4614      	mov	r4, r2
 80160d2:	2600      	movs	r6, #0
 80160d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80160d8:	f1b9 0901 	subs.w	r9, r9, #1
 80160dc:	d505      	bpl.n	80160ea <_fwalk_sglue+0x22>
 80160de:	6824      	ldr	r4, [r4, #0]
 80160e0:	2c00      	cmp	r4, #0
 80160e2:	d1f7      	bne.n	80160d4 <_fwalk_sglue+0xc>
 80160e4:	4630      	mov	r0, r6
 80160e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80160ea:	89ab      	ldrh	r3, [r5, #12]
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	d907      	bls.n	8016100 <_fwalk_sglue+0x38>
 80160f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80160f4:	3301      	adds	r3, #1
 80160f6:	d003      	beq.n	8016100 <_fwalk_sglue+0x38>
 80160f8:	4629      	mov	r1, r5
 80160fa:	4638      	mov	r0, r7
 80160fc:	47c0      	blx	r8
 80160fe:	4306      	orrs	r6, r0
 8016100:	3568      	adds	r5, #104	@ 0x68
 8016102:	e7e9      	b.n	80160d8 <_fwalk_sglue+0x10>

08016104 <sniprintf>:
 8016104:	b40c      	push	{r2, r3}
 8016106:	b530      	push	{r4, r5, lr}
 8016108:	4b17      	ldr	r3, [pc, #92]	@ (8016168 <sniprintf+0x64>)
 801610a:	1e0c      	subs	r4, r1, #0
 801610c:	681d      	ldr	r5, [r3, #0]
 801610e:	b09d      	sub	sp, #116	@ 0x74
 8016110:	da08      	bge.n	8016124 <sniprintf+0x20>
 8016112:	238b      	movs	r3, #139	@ 0x8b
 8016114:	602b      	str	r3, [r5, #0]
 8016116:	f04f 30ff 	mov.w	r0, #4294967295
 801611a:	b01d      	add	sp, #116	@ 0x74
 801611c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016120:	b002      	add	sp, #8
 8016122:	4770      	bx	lr
 8016124:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016128:	f8ad 3014 	strh.w	r3, [sp, #20]
 801612c:	bf14      	ite	ne
 801612e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016132:	4623      	moveq	r3, r4
 8016134:	9304      	str	r3, [sp, #16]
 8016136:	9307      	str	r3, [sp, #28]
 8016138:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801613c:	9002      	str	r0, [sp, #8]
 801613e:	9006      	str	r0, [sp, #24]
 8016140:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016144:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016146:	ab21      	add	r3, sp, #132	@ 0x84
 8016148:	a902      	add	r1, sp, #8
 801614a:	4628      	mov	r0, r5
 801614c:	9301      	str	r3, [sp, #4]
 801614e:	f001 fabd 	bl	80176cc <_svfiprintf_r>
 8016152:	1c43      	adds	r3, r0, #1
 8016154:	bfbc      	itt	lt
 8016156:	238b      	movlt	r3, #139	@ 0x8b
 8016158:	602b      	strlt	r3, [r5, #0]
 801615a:	2c00      	cmp	r4, #0
 801615c:	d0dd      	beq.n	801611a <sniprintf+0x16>
 801615e:	9b02      	ldr	r3, [sp, #8]
 8016160:	2200      	movs	r2, #0
 8016162:	701a      	strb	r2, [r3, #0]
 8016164:	e7d9      	b.n	801611a <sniprintf+0x16>
 8016166:	bf00      	nop
 8016168:	200001f4 	.word	0x200001f4

0801616c <__sread>:
 801616c:	b510      	push	{r4, lr}
 801616e:	460c      	mov	r4, r1
 8016170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016174:	f000 f8da 	bl	801632c <_read_r>
 8016178:	2800      	cmp	r0, #0
 801617a:	bfab      	itete	ge
 801617c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801617e:	89a3      	ldrhlt	r3, [r4, #12]
 8016180:	181b      	addge	r3, r3, r0
 8016182:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016186:	bfac      	ite	ge
 8016188:	6563      	strge	r3, [r4, #84]	@ 0x54
 801618a:	81a3      	strhlt	r3, [r4, #12]
 801618c:	bd10      	pop	{r4, pc}

0801618e <__swrite>:
 801618e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016192:	461f      	mov	r7, r3
 8016194:	898b      	ldrh	r3, [r1, #12]
 8016196:	05db      	lsls	r3, r3, #23
 8016198:	4605      	mov	r5, r0
 801619a:	460c      	mov	r4, r1
 801619c:	4616      	mov	r6, r2
 801619e:	d505      	bpl.n	80161ac <__swrite+0x1e>
 80161a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161a4:	2302      	movs	r3, #2
 80161a6:	2200      	movs	r2, #0
 80161a8:	f000 f8ae 	bl	8016308 <_lseek_r>
 80161ac:	89a3      	ldrh	r3, [r4, #12]
 80161ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80161b6:	81a3      	strh	r3, [r4, #12]
 80161b8:	4632      	mov	r2, r6
 80161ba:	463b      	mov	r3, r7
 80161bc:	4628      	mov	r0, r5
 80161be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161c2:	f000 b8c5 	b.w	8016350 <_write_r>

080161c6 <__sseek>:
 80161c6:	b510      	push	{r4, lr}
 80161c8:	460c      	mov	r4, r1
 80161ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161ce:	f000 f89b 	bl	8016308 <_lseek_r>
 80161d2:	1c43      	adds	r3, r0, #1
 80161d4:	89a3      	ldrh	r3, [r4, #12]
 80161d6:	bf15      	itete	ne
 80161d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80161da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80161de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80161e2:	81a3      	strheq	r3, [r4, #12]
 80161e4:	bf18      	it	ne
 80161e6:	81a3      	strhne	r3, [r4, #12]
 80161e8:	bd10      	pop	{r4, pc}

080161ea <__sclose>:
 80161ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161ee:	f000 b87b 	b.w	80162e8 <_close_r>

080161f2 <memmove>:
 80161f2:	4288      	cmp	r0, r1
 80161f4:	b510      	push	{r4, lr}
 80161f6:	eb01 0402 	add.w	r4, r1, r2
 80161fa:	d902      	bls.n	8016202 <memmove+0x10>
 80161fc:	4284      	cmp	r4, r0
 80161fe:	4623      	mov	r3, r4
 8016200:	d807      	bhi.n	8016212 <memmove+0x20>
 8016202:	1e43      	subs	r3, r0, #1
 8016204:	42a1      	cmp	r1, r4
 8016206:	d008      	beq.n	801621a <memmove+0x28>
 8016208:	f811 2b01 	ldrb.w	r2, [r1], #1
 801620c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016210:	e7f8      	b.n	8016204 <memmove+0x12>
 8016212:	4402      	add	r2, r0
 8016214:	4601      	mov	r1, r0
 8016216:	428a      	cmp	r2, r1
 8016218:	d100      	bne.n	801621c <memmove+0x2a>
 801621a:	bd10      	pop	{r4, pc}
 801621c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016220:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016224:	e7f7      	b.n	8016216 <memmove+0x24>

08016226 <memset>:
 8016226:	4402      	add	r2, r0
 8016228:	4603      	mov	r3, r0
 801622a:	4293      	cmp	r3, r2
 801622c:	d100      	bne.n	8016230 <memset+0xa>
 801622e:	4770      	bx	lr
 8016230:	f803 1b01 	strb.w	r1, [r3], #1
 8016234:	e7f9      	b.n	801622a <memset+0x4>

08016236 <strchr>:
 8016236:	b2c9      	uxtb	r1, r1
 8016238:	4603      	mov	r3, r0
 801623a:	4618      	mov	r0, r3
 801623c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016240:	b112      	cbz	r2, 8016248 <strchr+0x12>
 8016242:	428a      	cmp	r2, r1
 8016244:	d1f9      	bne.n	801623a <strchr+0x4>
 8016246:	4770      	bx	lr
 8016248:	2900      	cmp	r1, #0
 801624a:	bf18      	it	ne
 801624c:	2000      	movne	r0, #0
 801624e:	4770      	bx	lr

08016250 <strcspn>:
 8016250:	b570      	push	{r4, r5, r6, lr}
 8016252:	4603      	mov	r3, r0
 8016254:	461e      	mov	r6, r3
 8016256:	f813 4b01 	ldrb.w	r4, [r3], #1
 801625a:	b144      	cbz	r4, 801626e <strcspn+0x1e>
 801625c:	1e4a      	subs	r2, r1, #1
 801625e:	e001      	b.n	8016264 <strcspn+0x14>
 8016260:	42a5      	cmp	r5, r4
 8016262:	d004      	beq.n	801626e <strcspn+0x1e>
 8016264:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8016268:	2d00      	cmp	r5, #0
 801626a:	d1f9      	bne.n	8016260 <strcspn+0x10>
 801626c:	e7f2      	b.n	8016254 <strcspn+0x4>
 801626e:	1a30      	subs	r0, r6, r0
 8016270:	bd70      	pop	{r4, r5, r6, pc}

08016272 <strncmp>:
 8016272:	b510      	push	{r4, lr}
 8016274:	b16a      	cbz	r2, 8016292 <strncmp+0x20>
 8016276:	3901      	subs	r1, #1
 8016278:	1884      	adds	r4, r0, r2
 801627a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801627e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016282:	429a      	cmp	r2, r3
 8016284:	d103      	bne.n	801628e <strncmp+0x1c>
 8016286:	42a0      	cmp	r0, r4
 8016288:	d001      	beq.n	801628e <strncmp+0x1c>
 801628a:	2a00      	cmp	r2, #0
 801628c:	d1f5      	bne.n	801627a <strncmp+0x8>
 801628e:	1ad0      	subs	r0, r2, r3
 8016290:	bd10      	pop	{r4, pc}
 8016292:	4610      	mov	r0, r2
 8016294:	e7fc      	b.n	8016290 <strncmp+0x1e>

08016296 <strncpy>:
 8016296:	b510      	push	{r4, lr}
 8016298:	3901      	subs	r1, #1
 801629a:	4603      	mov	r3, r0
 801629c:	b132      	cbz	r2, 80162ac <strncpy+0x16>
 801629e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80162a2:	f803 4b01 	strb.w	r4, [r3], #1
 80162a6:	3a01      	subs	r2, #1
 80162a8:	2c00      	cmp	r4, #0
 80162aa:	d1f7      	bne.n	801629c <strncpy+0x6>
 80162ac:	441a      	add	r2, r3
 80162ae:	2100      	movs	r1, #0
 80162b0:	4293      	cmp	r3, r2
 80162b2:	d100      	bne.n	80162b6 <strncpy+0x20>
 80162b4:	bd10      	pop	{r4, pc}
 80162b6:	f803 1b01 	strb.w	r1, [r3], #1
 80162ba:	e7f9      	b.n	80162b0 <strncpy+0x1a>

080162bc <strstr>:
 80162bc:	780a      	ldrb	r2, [r1, #0]
 80162be:	b570      	push	{r4, r5, r6, lr}
 80162c0:	b96a      	cbnz	r2, 80162de <strstr+0x22>
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	429a      	cmp	r2, r3
 80162c6:	d109      	bne.n	80162dc <strstr+0x20>
 80162c8:	460c      	mov	r4, r1
 80162ca:	4605      	mov	r5, r0
 80162cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d0f6      	beq.n	80162c2 <strstr+0x6>
 80162d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80162d8:	429e      	cmp	r6, r3
 80162da:	d0f7      	beq.n	80162cc <strstr+0x10>
 80162dc:	3001      	adds	r0, #1
 80162de:	7803      	ldrb	r3, [r0, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d1ef      	bne.n	80162c4 <strstr+0x8>
 80162e4:	4618      	mov	r0, r3
 80162e6:	e7ec      	b.n	80162c2 <strstr+0x6>

080162e8 <_close_r>:
 80162e8:	b538      	push	{r3, r4, r5, lr}
 80162ea:	4d06      	ldr	r5, [pc, #24]	@ (8016304 <_close_r+0x1c>)
 80162ec:	2300      	movs	r3, #0
 80162ee:	4604      	mov	r4, r0
 80162f0:	4608      	mov	r0, r1
 80162f2:	602b      	str	r3, [r5, #0]
 80162f4:	f7f0 fd00 	bl	8006cf8 <_close>
 80162f8:	1c43      	adds	r3, r0, #1
 80162fa:	d102      	bne.n	8016302 <_close_r+0x1a>
 80162fc:	682b      	ldr	r3, [r5, #0]
 80162fe:	b103      	cbz	r3, 8016302 <_close_r+0x1a>
 8016300:	6023      	str	r3, [r4, #0]
 8016302:	bd38      	pop	{r3, r4, r5, pc}
 8016304:	2000e6b4 	.word	0x2000e6b4

08016308 <_lseek_r>:
 8016308:	b538      	push	{r3, r4, r5, lr}
 801630a:	4d07      	ldr	r5, [pc, #28]	@ (8016328 <_lseek_r+0x20>)
 801630c:	4604      	mov	r4, r0
 801630e:	4608      	mov	r0, r1
 8016310:	4611      	mov	r1, r2
 8016312:	2200      	movs	r2, #0
 8016314:	602a      	str	r2, [r5, #0]
 8016316:	461a      	mov	r2, r3
 8016318:	f7f0 fd15 	bl	8006d46 <_lseek>
 801631c:	1c43      	adds	r3, r0, #1
 801631e:	d102      	bne.n	8016326 <_lseek_r+0x1e>
 8016320:	682b      	ldr	r3, [r5, #0]
 8016322:	b103      	cbz	r3, 8016326 <_lseek_r+0x1e>
 8016324:	6023      	str	r3, [r4, #0]
 8016326:	bd38      	pop	{r3, r4, r5, pc}
 8016328:	2000e6b4 	.word	0x2000e6b4

0801632c <_read_r>:
 801632c:	b538      	push	{r3, r4, r5, lr}
 801632e:	4d07      	ldr	r5, [pc, #28]	@ (801634c <_read_r+0x20>)
 8016330:	4604      	mov	r4, r0
 8016332:	4608      	mov	r0, r1
 8016334:	4611      	mov	r1, r2
 8016336:	2200      	movs	r2, #0
 8016338:	602a      	str	r2, [r5, #0]
 801633a:	461a      	mov	r2, r3
 801633c:	f7f0 fca3 	bl	8006c86 <_read>
 8016340:	1c43      	adds	r3, r0, #1
 8016342:	d102      	bne.n	801634a <_read_r+0x1e>
 8016344:	682b      	ldr	r3, [r5, #0]
 8016346:	b103      	cbz	r3, 801634a <_read_r+0x1e>
 8016348:	6023      	str	r3, [r4, #0]
 801634a:	bd38      	pop	{r3, r4, r5, pc}
 801634c:	2000e6b4 	.word	0x2000e6b4

08016350 <_write_r>:
 8016350:	b538      	push	{r3, r4, r5, lr}
 8016352:	4d07      	ldr	r5, [pc, #28]	@ (8016370 <_write_r+0x20>)
 8016354:	4604      	mov	r4, r0
 8016356:	4608      	mov	r0, r1
 8016358:	4611      	mov	r1, r2
 801635a:	2200      	movs	r2, #0
 801635c:	602a      	str	r2, [r5, #0]
 801635e:	461a      	mov	r2, r3
 8016360:	f7f0 fcae 	bl	8006cc0 <_write>
 8016364:	1c43      	adds	r3, r0, #1
 8016366:	d102      	bne.n	801636e <_write_r+0x1e>
 8016368:	682b      	ldr	r3, [r5, #0]
 801636a:	b103      	cbz	r3, 801636e <_write_r+0x1e>
 801636c:	6023      	str	r3, [r4, #0]
 801636e:	bd38      	pop	{r3, r4, r5, pc}
 8016370:	2000e6b4 	.word	0x2000e6b4

08016374 <__errno>:
 8016374:	4b01      	ldr	r3, [pc, #4]	@ (801637c <__errno+0x8>)
 8016376:	6818      	ldr	r0, [r3, #0]
 8016378:	4770      	bx	lr
 801637a:	bf00      	nop
 801637c:	200001f4 	.word	0x200001f4

08016380 <__libc_init_array>:
 8016380:	b570      	push	{r4, r5, r6, lr}
 8016382:	4d0d      	ldr	r5, [pc, #52]	@ (80163b8 <__libc_init_array+0x38>)
 8016384:	4c0d      	ldr	r4, [pc, #52]	@ (80163bc <__libc_init_array+0x3c>)
 8016386:	1b64      	subs	r4, r4, r5
 8016388:	10a4      	asrs	r4, r4, #2
 801638a:	2600      	movs	r6, #0
 801638c:	42a6      	cmp	r6, r4
 801638e:	d109      	bne.n	80163a4 <__libc_init_array+0x24>
 8016390:	4d0b      	ldr	r5, [pc, #44]	@ (80163c0 <__libc_init_array+0x40>)
 8016392:	4c0c      	ldr	r4, [pc, #48]	@ (80163c4 <__libc_init_array+0x44>)
 8016394:	f002 f85c 	bl	8018450 <_init>
 8016398:	1b64      	subs	r4, r4, r5
 801639a:	10a4      	asrs	r4, r4, #2
 801639c:	2600      	movs	r6, #0
 801639e:	42a6      	cmp	r6, r4
 80163a0:	d105      	bne.n	80163ae <__libc_init_array+0x2e>
 80163a2:	bd70      	pop	{r4, r5, r6, pc}
 80163a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80163a8:	4798      	blx	r3
 80163aa:	3601      	adds	r6, #1
 80163ac:	e7ee      	b.n	801638c <__libc_init_array+0xc>
 80163ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80163b2:	4798      	blx	r3
 80163b4:	3601      	adds	r6, #1
 80163b6:	e7f2      	b.n	801639e <__libc_init_array+0x1e>
 80163b8:	08019160 	.word	0x08019160
 80163bc:	08019160 	.word	0x08019160
 80163c0:	08019160 	.word	0x08019160
 80163c4:	08019164 	.word	0x08019164

080163c8 <__retarget_lock_init_recursive>:
 80163c8:	4770      	bx	lr

080163ca <__retarget_lock_acquire_recursive>:
 80163ca:	4770      	bx	lr

080163cc <__retarget_lock_release_recursive>:
 80163cc:	4770      	bx	lr

080163ce <strcpy>:
 80163ce:	4603      	mov	r3, r0
 80163d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80163d4:	f803 2b01 	strb.w	r2, [r3], #1
 80163d8:	2a00      	cmp	r2, #0
 80163da:	d1f9      	bne.n	80163d0 <strcpy+0x2>
 80163dc:	4770      	bx	lr

080163de <memcpy>:
 80163de:	440a      	add	r2, r1
 80163e0:	4291      	cmp	r1, r2
 80163e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80163e6:	d100      	bne.n	80163ea <memcpy+0xc>
 80163e8:	4770      	bx	lr
 80163ea:	b510      	push	{r4, lr}
 80163ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80163f4:	4291      	cmp	r1, r2
 80163f6:	d1f9      	bne.n	80163ec <memcpy+0xe>
 80163f8:	bd10      	pop	{r4, pc}
 80163fa:	0000      	movs	r0, r0
 80163fc:	0000      	movs	r0, r0
	...

08016400 <nan>:
 8016400:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016408 <nan+0x8>
 8016404:	4770      	bx	lr
 8016406:	bf00      	nop
 8016408:	00000000 	.word	0x00000000
 801640c:	7ff80000 	.word	0x7ff80000

08016410 <_free_r>:
 8016410:	b538      	push	{r3, r4, r5, lr}
 8016412:	4605      	mov	r5, r0
 8016414:	2900      	cmp	r1, #0
 8016416:	d041      	beq.n	801649c <_free_r+0x8c>
 8016418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801641c:	1f0c      	subs	r4, r1, #4
 801641e:	2b00      	cmp	r3, #0
 8016420:	bfb8      	it	lt
 8016422:	18e4      	addlt	r4, r4, r3
 8016424:	f000 fc2c 	bl	8016c80 <__malloc_lock>
 8016428:	4a1d      	ldr	r2, [pc, #116]	@ (80164a0 <_free_r+0x90>)
 801642a:	6813      	ldr	r3, [r2, #0]
 801642c:	b933      	cbnz	r3, 801643c <_free_r+0x2c>
 801642e:	6063      	str	r3, [r4, #4]
 8016430:	6014      	str	r4, [r2, #0]
 8016432:	4628      	mov	r0, r5
 8016434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016438:	f000 bc28 	b.w	8016c8c <__malloc_unlock>
 801643c:	42a3      	cmp	r3, r4
 801643e:	d908      	bls.n	8016452 <_free_r+0x42>
 8016440:	6820      	ldr	r0, [r4, #0]
 8016442:	1821      	adds	r1, r4, r0
 8016444:	428b      	cmp	r3, r1
 8016446:	bf01      	itttt	eq
 8016448:	6819      	ldreq	r1, [r3, #0]
 801644a:	685b      	ldreq	r3, [r3, #4]
 801644c:	1809      	addeq	r1, r1, r0
 801644e:	6021      	streq	r1, [r4, #0]
 8016450:	e7ed      	b.n	801642e <_free_r+0x1e>
 8016452:	461a      	mov	r2, r3
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	b10b      	cbz	r3, 801645c <_free_r+0x4c>
 8016458:	42a3      	cmp	r3, r4
 801645a:	d9fa      	bls.n	8016452 <_free_r+0x42>
 801645c:	6811      	ldr	r1, [r2, #0]
 801645e:	1850      	adds	r0, r2, r1
 8016460:	42a0      	cmp	r0, r4
 8016462:	d10b      	bne.n	801647c <_free_r+0x6c>
 8016464:	6820      	ldr	r0, [r4, #0]
 8016466:	4401      	add	r1, r0
 8016468:	1850      	adds	r0, r2, r1
 801646a:	4283      	cmp	r3, r0
 801646c:	6011      	str	r1, [r2, #0]
 801646e:	d1e0      	bne.n	8016432 <_free_r+0x22>
 8016470:	6818      	ldr	r0, [r3, #0]
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	6053      	str	r3, [r2, #4]
 8016476:	4408      	add	r0, r1
 8016478:	6010      	str	r0, [r2, #0]
 801647a:	e7da      	b.n	8016432 <_free_r+0x22>
 801647c:	d902      	bls.n	8016484 <_free_r+0x74>
 801647e:	230c      	movs	r3, #12
 8016480:	602b      	str	r3, [r5, #0]
 8016482:	e7d6      	b.n	8016432 <_free_r+0x22>
 8016484:	6820      	ldr	r0, [r4, #0]
 8016486:	1821      	adds	r1, r4, r0
 8016488:	428b      	cmp	r3, r1
 801648a:	bf04      	itt	eq
 801648c:	6819      	ldreq	r1, [r3, #0]
 801648e:	685b      	ldreq	r3, [r3, #4]
 8016490:	6063      	str	r3, [r4, #4]
 8016492:	bf04      	itt	eq
 8016494:	1809      	addeq	r1, r1, r0
 8016496:	6021      	streq	r1, [r4, #0]
 8016498:	6054      	str	r4, [r2, #4]
 801649a:	e7ca      	b.n	8016432 <_free_r+0x22>
 801649c:	bd38      	pop	{r3, r4, r5, pc}
 801649e:	bf00      	nop
 80164a0:	2000e6c0 	.word	0x2000e6c0

080164a4 <rshift>:
 80164a4:	6903      	ldr	r3, [r0, #16]
 80164a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80164aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80164b2:	f100 0414 	add.w	r4, r0, #20
 80164b6:	dd45      	ble.n	8016544 <rshift+0xa0>
 80164b8:	f011 011f 	ands.w	r1, r1, #31
 80164bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80164c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80164c4:	d10c      	bne.n	80164e0 <rshift+0x3c>
 80164c6:	f100 0710 	add.w	r7, r0, #16
 80164ca:	4629      	mov	r1, r5
 80164cc:	42b1      	cmp	r1, r6
 80164ce:	d334      	bcc.n	801653a <rshift+0x96>
 80164d0:	1a9b      	subs	r3, r3, r2
 80164d2:	009b      	lsls	r3, r3, #2
 80164d4:	1eea      	subs	r2, r5, #3
 80164d6:	4296      	cmp	r6, r2
 80164d8:	bf38      	it	cc
 80164da:	2300      	movcc	r3, #0
 80164dc:	4423      	add	r3, r4
 80164de:	e015      	b.n	801650c <rshift+0x68>
 80164e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80164e4:	f1c1 0820 	rsb	r8, r1, #32
 80164e8:	40cf      	lsrs	r7, r1
 80164ea:	f105 0e04 	add.w	lr, r5, #4
 80164ee:	46a1      	mov	r9, r4
 80164f0:	4576      	cmp	r6, lr
 80164f2:	46f4      	mov	ip, lr
 80164f4:	d815      	bhi.n	8016522 <rshift+0x7e>
 80164f6:	1a9a      	subs	r2, r3, r2
 80164f8:	0092      	lsls	r2, r2, #2
 80164fa:	3a04      	subs	r2, #4
 80164fc:	3501      	adds	r5, #1
 80164fe:	42ae      	cmp	r6, r5
 8016500:	bf38      	it	cc
 8016502:	2200      	movcc	r2, #0
 8016504:	18a3      	adds	r3, r4, r2
 8016506:	50a7      	str	r7, [r4, r2]
 8016508:	b107      	cbz	r7, 801650c <rshift+0x68>
 801650a:	3304      	adds	r3, #4
 801650c:	1b1a      	subs	r2, r3, r4
 801650e:	42a3      	cmp	r3, r4
 8016510:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016514:	bf08      	it	eq
 8016516:	2300      	moveq	r3, #0
 8016518:	6102      	str	r2, [r0, #16]
 801651a:	bf08      	it	eq
 801651c:	6143      	streq	r3, [r0, #20]
 801651e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016522:	f8dc c000 	ldr.w	ip, [ip]
 8016526:	fa0c fc08 	lsl.w	ip, ip, r8
 801652a:	ea4c 0707 	orr.w	r7, ip, r7
 801652e:	f849 7b04 	str.w	r7, [r9], #4
 8016532:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016536:	40cf      	lsrs	r7, r1
 8016538:	e7da      	b.n	80164f0 <rshift+0x4c>
 801653a:	f851 cb04 	ldr.w	ip, [r1], #4
 801653e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016542:	e7c3      	b.n	80164cc <rshift+0x28>
 8016544:	4623      	mov	r3, r4
 8016546:	e7e1      	b.n	801650c <rshift+0x68>

08016548 <__hexdig_fun>:
 8016548:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801654c:	2b09      	cmp	r3, #9
 801654e:	d802      	bhi.n	8016556 <__hexdig_fun+0xe>
 8016550:	3820      	subs	r0, #32
 8016552:	b2c0      	uxtb	r0, r0
 8016554:	4770      	bx	lr
 8016556:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801655a:	2b05      	cmp	r3, #5
 801655c:	d801      	bhi.n	8016562 <__hexdig_fun+0x1a>
 801655e:	3847      	subs	r0, #71	@ 0x47
 8016560:	e7f7      	b.n	8016552 <__hexdig_fun+0xa>
 8016562:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016566:	2b05      	cmp	r3, #5
 8016568:	d801      	bhi.n	801656e <__hexdig_fun+0x26>
 801656a:	3827      	subs	r0, #39	@ 0x27
 801656c:	e7f1      	b.n	8016552 <__hexdig_fun+0xa>
 801656e:	2000      	movs	r0, #0
 8016570:	4770      	bx	lr
	...

08016574 <__gethex>:
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	b085      	sub	sp, #20
 801657a:	468a      	mov	sl, r1
 801657c:	9302      	str	r3, [sp, #8]
 801657e:	680b      	ldr	r3, [r1, #0]
 8016580:	9001      	str	r0, [sp, #4]
 8016582:	4690      	mov	r8, r2
 8016584:	1c9c      	adds	r4, r3, #2
 8016586:	46a1      	mov	r9, r4
 8016588:	f814 0b01 	ldrb.w	r0, [r4], #1
 801658c:	2830      	cmp	r0, #48	@ 0x30
 801658e:	d0fa      	beq.n	8016586 <__gethex+0x12>
 8016590:	eba9 0303 	sub.w	r3, r9, r3
 8016594:	f1a3 0b02 	sub.w	fp, r3, #2
 8016598:	f7ff ffd6 	bl	8016548 <__hexdig_fun>
 801659c:	4605      	mov	r5, r0
 801659e:	2800      	cmp	r0, #0
 80165a0:	d168      	bne.n	8016674 <__gethex+0x100>
 80165a2:	49a0      	ldr	r1, [pc, #640]	@ (8016824 <__gethex+0x2b0>)
 80165a4:	2201      	movs	r2, #1
 80165a6:	4648      	mov	r0, r9
 80165a8:	f7ff fe63 	bl	8016272 <strncmp>
 80165ac:	4607      	mov	r7, r0
 80165ae:	2800      	cmp	r0, #0
 80165b0:	d167      	bne.n	8016682 <__gethex+0x10e>
 80165b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80165b6:	4626      	mov	r6, r4
 80165b8:	f7ff ffc6 	bl	8016548 <__hexdig_fun>
 80165bc:	2800      	cmp	r0, #0
 80165be:	d062      	beq.n	8016686 <__gethex+0x112>
 80165c0:	4623      	mov	r3, r4
 80165c2:	7818      	ldrb	r0, [r3, #0]
 80165c4:	2830      	cmp	r0, #48	@ 0x30
 80165c6:	4699      	mov	r9, r3
 80165c8:	f103 0301 	add.w	r3, r3, #1
 80165cc:	d0f9      	beq.n	80165c2 <__gethex+0x4e>
 80165ce:	f7ff ffbb 	bl	8016548 <__hexdig_fun>
 80165d2:	fab0 f580 	clz	r5, r0
 80165d6:	096d      	lsrs	r5, r5, #5
 80165d8:	f04f 0b01 	mov.w	fp, #1
 80165dc:	464a      	mov	r2, r9
 80165de:	4616      	mov	r6, r2
 80165e0:	3201      	adds	r2, #1
 80165e2:	7830      	ldrb	r0, [r6, #0]
 80165e4:	f7ff ffb0 	bl	8016548 <__hexdig_fun>
 80165e8:	2800      	cmp	r0, #0
 80165ea:	d1f8      	bne.n	80165de <__gethex+0x6a>
 80165ec:	498d      	ldr	r1, [pc, #564]	@ (8016824 <__gethex+0x2b0>)
 80165ee:	2201      	movs	r2, #1
 80165f0:	4630      	mov	r0, r6
 80165f2:	f7ff fe3e 	bl	8016272 <strncmp>
 80165f6:	2800      	cmp	r0, #0
 80165f8:	d13f      	bne.n	801667a <__gethex+0x106>
 80165fa:	b944      	cbnz	r4, 801660e <__gethex+0x9a>
 80165fc:	1c74      	adds	r4, r6, #1
 80165fe:	4622      	mov	r2, r4
 8016600:	4616      	mov	r6, r2
 8016602:	3201      	adds	r2, #1
 8016604:	7830      	ldrb	r0, [r6, #0]
 8016606:	f7ff ff9f 	bl	8016548 <__hexdig_fun>
 801660a:	2800      	cmp	r0, #0
 801660c:	d1f8      	bne.n	8016600 <__gethex+0x8c>
 801660e:	1ba4      	subs	r4, r4, r6
 8016610:	00a7      	lsls	r7, r4, #2
 8016612:	7833      	ldrb	r3, [r6, #0]
 8016614:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016618:	2b50      	cmp	r3, #80	@ 0x50
 801661a:	d13e      	bne.n	801669a <__gethex+0x126>
 801661c:	7873      	ldrb	r3, [r6, #1]
 801661e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016620:	d033      	beq.n	801668a <__gethex+0x116>
 8016622:	2b2d      	cmp	r3, #45	@ 0x2d
 8016624:	d034      	beq.n	8016690 <__gethex+0x11c>
 8016626:	1c71      	adds	r1, r6, #1
 8016628:	2400      	movs	r4, #0
 801662a:	7808      	ldrb	r0, [r1, #0]
 801662c:	f7ff ff8c 	bl	8016548 <__hexdig_fun>
 8016630:	1e43      	subs	r3, r0, #1
 8016632:	b2db      	uxtb	r3, r3
 8016634:	2b18      	cmp	r3, #24
 8016636:	d830      	bhi.n	801669a <__gethex+0x126>
 8016638:	f1a0 0210 	sub.w	r2, r0, #16
 801663c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016640:	f7ff ff82 	bl	8016548 <__hexdig_fun>
 8016644:	f100 3cff 	add.w	ip, r0, #4294967295
 8016648:	fa5f fc8c 	uxtb.w	ip, ip
 801664c:	f1bc 0f18 	cmp.w	ip, #24
 8016650:	f04f 030a 	mov.w	r3, #10
 8016654:	d91e      	bls.n	8016694 <__gethex+0x120>
 8016656:	b104      	cbz	r4, 801665a <__gethex+0xe6>
 8016658:	4252      	negs	r2, r2
 801665a:	4417      	add	r7, r2
 801665c:	f8ca 1000 	str.w	r1, [sl]
 8016660:	b1ed      	cbz	r5, 801669e <__gethex+0x12a>
 8016662:	f1bb 0f00 	cmp.w	fp, #0
 8016666:	bf0c      	ite	eq
 8016668:	2506      	moveq	r5, #6
 801666a:	2500      	movne	r5, #0
 801666c:	4628      	mov	r0, r5
 801666e:	b005      	add	sp, #20
 8016670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016674:	2500      	movs	r5, #0
 8016676:	462c      	mov	r4, r5
 8016678:	e7b0      	b.n	80165dc <__gethex+0x68>
 801667a:	2c00      	cmp	r4, #0
 801667c:	d1c7      	bne.n	801660e <__gethex+0x9a>
 801667e:	4627      	mov	r7, r4
 8016680:	e7c7      	b.n	8016612 <__gethex+0x9e>
 8016682:	464e      	mov	r6, r9
 8016684:	462f      	mov	r7, r5
 8016686:	2501      	movs	r5, #1
 8016688:	e7c3      	b.n	8016612 <__gethex+0x9e>
 801668a:	2400      	movs	r4, #0
 801668c:	1cb1      	adds	r1, r6, #2
 801668e:	e7cc      	b.n	801662a <__gethex+0xb6>
 8016690:	2401      	movs	r4, #1
 8016692:	e7fb      	b.n	801668c <__gethex+0x118>
 8016694:	fb03 0002 	mla	r0, r3, r2, r0
 8016698:	e7ce      	b.n	8016638 <__gethex+0xc4>
 801669a:	4631      	mov	r1, r6
 801669c:	e7de      	b.n	801665c <__gethex+0xe8>
 801669e:	eba6 0309 	sub.w	r3, r6, r9
 80166a2:	3b01      	subs	r3, #1
 80166a4:	4629      	mov	r1, r5
 80166a6:	2b07      	cmp	r3, #7
 80166a8:	dc0a      	bgt.n	80166c0 <__gethex+0x14c>
 80166aa:	9801      	ldr	r0, [sp, #4]
 80166ac:	f000 faf4 	bl	8016c98 <_Balloc>
 80166b0:	4604      	mov	r4, r0
 80166b2:	b940      	cbnz	r0, 80166c6 <__gethex+0x152>
 80166b4:	4b5c      	ldr	r3, [pc, #368]	@ (8016828 <__gethex+0x2b4>)
 80166b6:	4602      	mov	r2, r0
 80166b8:	21e4      	movs	r1, #228	@ 0xe4
 80166ba:	485c      	ldr	r0, [pc, #368]	@ (801682c <__gethex+0x2b8>)
 80166bc:	f001 fb4c 	bl	8017d58 <__assert_func>
 80166c0:	3101      	adds	r1, #1
 80166c2:	105b      	asrs	r3, r3, #1
 80166c4:	e7ef      	b.n	80166a6 <__gethex+0x132>
 80166c6:	f100 0a14 	add.w	sl, r0, #20
 80166ca:	2300      	movs	r3, #0
 80166cc:	4655      	mov	r5, sl
 80166ce:	469b      	mov	fp, r3
 80166d0:	45b1      	cmp	r9, r6
 80166d2:	d337      	bcc.n	8016744 <__gethex+0x1d0>
 80166d4:	f845 bb04 	str.w	fp, [r5], #4
 80166d8:	eba5 050a 	sub.w	r5, r5, sl
 80166dc:	10ad      	asrs	r5, r5, #2
 80166de:	6125      	str	r5, [r4, #16]
 80166e0:	4658      	mov	r0, fp
 80166e2:	f000 fbcb 	bl	8016e7c <__hi0bits>
 80166e6:	016d      	lsls	r5, r5, #5
 80166e8:	f8d8 6000 	ldr.w	r6, [r8]
 80166ec:	1a2d      	subs	r5, r5, r0
 80166ee:	42b5      	cmp	r5, r6
 80166f0:	dd54      	ble.n	801679c <__gethex+0x228>
 80166f2:	1bad      	subs	r5, r5, r6
 80166f4:	4629      	mov	r1, r5
 80166f6:	4620      	mov	r0, r4
 80166f8:	f000 ff5f 	bl	80175ba <__any_on>
 80166fc:	4681      	mov	r9, r0
 80166fe:	b178      	cbz	r0, 8016720 <__gethex+0x1ac>
 8016700:	1e6b      	subs	r3, r5, #1
 8016702:	1159      	asrs	r1, r3, #5
 8016704:	f003 021f 	and.w	r2, r3, #31
 8016708:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801670c:	f04f 0901 	mov.w	r9, #1
 8016710:	fa09 f202 	lsl.w	r2, r9, r2
 8016714:	420a      	tst	r2, r1
 8016716:	d003      	beq.n	8016720 <__gethex+0x1ac>
 8016718:	454b      	cmp	r3, r9
 801671a:	dc36      	bgt.n	801678a <__gethex+0x216>
 801671c:	f04f 0902 	mov.w	r9, #2
 8016720:	4629      	mov	r1, r5
 8016722:	4620      	mov	r0, r4
 8016724:	f7ff febe 	bl	80164a4 <rshift>
 8016728:	442f      	add	r7, r5
 801672a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801672e:	42bb      	cmp	r3, r7
 8016730:	da42      	bge.n	80167b8 <__gethex+0x244>
 8016732:	9801      	ldr	r0, [sp, #4]
 8016734:	4621      	mov	r1, r4
 8016736:	f000 faef 	bl	8016d18 <_Bfree>
 801673a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801673c:	2300      	movs	r3, #0
 801673e:	6013      	str	r3, [r2, #0]
 8016740:	25a3      	movs	r5, #163	@ 0xa3
 8016742:	e793      	b.n	801666c <__gethex+0xf8>
 8016744:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016748:	2a2e      	cmp	r2, #46	@ 0x2e
 801674a:	d012      	beq.n	8016772 <__gethex+0x1fe>
 801674c:	2b20      	cmp	r3, #32
 801674e:	d104      	bne.n	801675a <__gethex+0x1e6>
 8016750:	f845 bb04 	str.w	fp, [r5], #4
 8016754:	f04f 0b00 	mov.w	fp, #0
 8016758:	465b      	mov	r3, fp
 801675a:	7830      	ldrb	r0, [r6, #0]
 801675c:	9303      	str	r3, [sp, #12]
 801675e:	f7ff fef3 	bl	8016548 <__hexdig_fun>
 8016762:	9b03      	ldr	r3, [sp, #12]
 8016764:	f000 000f 	and.w	r0, r0, #15
 8016768:	4098      	lsls	r0, r3
 801676a:	ea4b 0b00 	orr.w	fp, fp, r0
 801676e:	3304      	adds	r3, #4
 8016770:	e7ae      	b.n	80166d0 <__gethex+0x15c>
 8016772:	45b1      	cmp	r9, r6
 8016774:	d8ea      	bhi.n	801674c <__gethex+0x1d8>
 8016776:	492b      	ldr	r1, [pc, #172]	@ (8016824 <__gethex+0x2b0>)
 8016778:	9303      	str	r3, [sp, #12]
 801677a:	2201      	movs	r2, #1
 801677c:	4630      	mov	r0, r6
 801677e:	f7ff fd78 	bl	8016272 <strncmp>
 8016782:	9b03      	ldr	r3, [sp, #12]
 8016784:	2800      	cmp	r0, #0
 8016786:	d1e1      	bne.n	801674c <__gethex+0x1d8>
 8016788:	e7a2      	b.n	80166d0 <__gethex+0x15c>
 801678a:	1ea9      	subs	r1, r5, #2
 801678c:	4620      	mov	r0, r4
 801678e:	f000 ff14 	bl	80175ba <__any_on>
 8016792:	2800      	cmp	r0, #0
 8016794:	d0c2      	beq.n	801671c <__gethex+0x1a8>
 8016796:	f04f 0903 	mov.w	r9, #3
 801679a:	e7c1      	b.n	8016720 <__gethex+0x1ac>
 801679c:	da09      	bge.n	80167b2 <__gethex+0x23e>
 801679e:	1b75      	subs	r5, r6, r5
 80167a0:	4621      	mov	r1, r4
 80167a2:	9801      	ldr	r0, [sp, #4]
 80167a4:	462a      	mov	r2, r5
 80167a6:	f000 fccf 	bl	8017148 <__lshift>
 80167aa:	1b7f      	subs	r7, r7, r5
 80167ac:	4604      	mov	r4, r0
 80167ae:	f100 0a14 	add.w	sl, r0, #20
 80167b2:	f04f 0900 	mov.w	r9, #0
 80167b6:	e7b8      	b.n	801672a <__gethex+0x1b6>
 80167b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80167bc:	42bd      	cmp	r5, r7
 80167be:	dd6f      	ble.n	80168a0 <__gethex+0x32c>
 80167c0:	1bed      	subs	r5, r5, r7
 80167c2:	42ae      	cmp	r6, r5
 80167c4:	dc34      	bgt.n	8016830 <__gethex+0x2bc>
 80167c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80167ca:	2b02      	cmp	r3, #2
 80167cc:	d022      	beq.n	8016814 <__gethex+0x2a0>
 80167ce:	2b03      	cmp	r3, #3
 80167d0:	d024      	beq.n	801681c <__gethex+0x2a8>
 80167d2:	2b01      	cmp	r3, #1
 80167d4:	d115      	bne.n	8016802 <__gethex+0x28e>
 80167d6:	42ae      	cmp	r6, r5
 80167d8:	d113      	bne.n	8016802 <__gethex+0x28e>
 80167da:	2e01      	cmp	r6, #1
 80167dc:	d10b      	bne.n	80167f6 <__gethex+0x282>
 80167de:	9a02      	ldr	r2, [sp, #8]
 80167e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80167e4:	6013      	str	r3, [r2, #0]
 80167e6:	2301      	movs	r3, #1
 80167e8:	6123      	str	r3, [r4, #16]
 80167ea:	f8ca 3000 	str.w	r3, [sl]
 80167ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80167f0:	2562      	movs	r5, #98	@ 0x62
 80167f2:	601c      	str	r4, [r3, #0]
 80167f4:	e73a      	b.n	801666c <__gethex+0xf8>
 80167f6:	1e71      	subs	r1, r6, #1
 80167f8:	4620      	mov	r0, r4
 80167fa:	f000 fede 	bl	80175ba <__any_on>
 80167fe:	2800      	cmp	r0, #0
 8016800:	d1ed      	bne.n	80167de <__gethex+0x26a>
 8016802:	9801      	ldr	r0, [sp, #4]
 8016804:	4621      	mov	r1, r4
 8016806:	f000 fa87 	bl	8016d18 <_Bfree>
 801680a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801680c:	2300      	movs	r3, #0
 801680e:	6013      	str	r3, [r2, #0]
 8016810:	2550      	movs	r5, #80	@ 0x50
 8016812:	e72b      	b.n	801666c <__gethex+0xf8>
 8016814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016816:	2b00      	cmp	r3, #0
 8016818:	d1f3      	bne.n	8016802 <__gethex+0x28e>
 801681a:	e7e0      	b.n	80167de <__gethex+0x26a>
 801681c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1dd      	bne.n	80167de <__gethex+0x26a>
 8016822:	e7ee      	b.n	8016802 <__gethex+0x28e>
 8016824:	08018d9c 	.word	0x08018d9c
 8016828:	08018f09 	.word	0x08018f09
 801682c:	08018f1a 	.word	0x08018f1a
 8016830:	1e6f      	subs	r7, r5, #1
 8016832:	f1b9 0f00 	cmp.w	r9, #0
 8016836:	d130      	bne.n	801689a <__gethex+0x326>
 8016838:	b127      	cbz	r7, 8016844 <__gethex+0x2d0>
 801683a:	4639      	mov	r1, r7
 801683c:	4620      	mov	r0, r4
 801683e:	f000 febc 	bl	80175ba <__any_on>
 8016842:	4681      	mov	r9, r0
 8016844:	117a      	asrs	r2, r7, #5
 8016846:	2301      	movs	r3, #1
 8016848:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801684c:	f007 071f 	and.w	r7, r7, #31
 8016850:	40bb      	lsls	r3, r7
 8016852:	4213      	tst	r3, r2
 8016854:	4629      	mov	r1, r5
 8016856:	4620      	mov	r0, r4
 8016858:	bf18      	it	ne
 801685a:	f049 0902 	orrne.w	r9, r9, #2
 801685e:	f7ff fe21 	bl	80164a4 <rshift>
 8016862:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8016866:	1b76      	subs	r6, r6, r5
 8016868:	2502      	movs	r5, #2
 801686a:	f1b9 0f00 	cmp.w	r9, #0
 801686e:	d047      	beq.n	8016900 <__gethex+0x38c>
 8016870:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016874:	2b02      	cmp	r3, #2
 8016876:	d015      	beq.n	80168a4 <__gethex+0x330>
 8016878:	2b03      	cmp	r3, #3
 801687a:	d017      	beq.n	80168ac <__gethex+0x338>
 801687c:	2b01      	cmp	r3, #1
 801687e:	d109      	bne.n	8016894 <__gethex+0x320>
 8016880:	f019 0f02 	tst.w	r9, #2
 8016884:	d006      	beq.n	8016894 <__gethex+0x320>
 8016886:	f8da 3000 	ldr.w	r3, [sl]
 801688a:	ea49 0903 	orr.w	r9, r9, r3
 801688e:	f019 0f01 	tst.w	r9, #1
 8016892:	d10e      	bne.n	80168b2 <__gethex+0x33e>
 8016894:	f045 0510 	orr.w	r5, r5, #16
 8016898:	e032      	b.n	8016900 <__gethex+0x38c>
 801689a:	f04f 0901 	mov.w	r9, #1
 801689e:	e7d1      	b.n	8016844 <__gethex+0x2d0>
 80168a0:	2501      	movs	r5, #1
 80168a2:	e7e2      	b.n	801686a <__gethex+0x2f6>
 80168a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168a6:	f1c3 0301 	rsb	r3, r3, #1
 80168aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80168ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d0f0      	beq.n	8016894 <__gethex+0x320>
 80168b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80168b6:	f104 0314 	add.w	r3, r4, #20
 80168ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80168be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80168c2:	f04f 0c00 	mov.w	ip, #0
 80168c6:	4618      	mov	r0, r3
 80168c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80168cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80168d0:	d01b      	beq.n	801690a <__gethex+0x396>
 80168d2:	3201      	adds	r2, #1
 80168d4:	6002      	str	r2, [r0, #0]
 80168d6:	2d02      	cmp	r5, #2
 80168d8:	f104 0314 	add.w	r3, r4, #20
 80168dc:	d13c      	bne.n	8016958 <__gethex+0x3e4>
 80168de:	f8d8 2000 	ldr.w	r2, [r8]
 80168e2:	3a01      	subs	r2, #1
 80168e4:	42b2      	cmp	r2, r6
 80168e6:	d109      	bne.n	80168fc <__gethex+0x388>
 80168e8:	1171      	asrs	r1, r6, #5
 80168ea:	2201      	movs	r2, #1
 80168ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80168f0:	f006 061f 	and.w	r6, r6, #31
 80168f4:	fa02 f606 	lsl.w	r6, r2, r6
 80168f8:	421e      	tst	r6, r3
 80168fa:	d13a      	bne.n	8016972 <__gethex+0x3fe>
 80168fc:	f045 0520 	orr.w	r5, r5, #32
 8016900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016902:	601c      	str	r4, [r3, #0]
 8016904:	9b02      	ldr	r3, [sp, #8]
 8016906:	601f      	str	r7, [r3, #0]
 8016908:	e6b0      	b.n	801666c <__gethex+0xf8>
 801690a:	4299      	cmp	r1, r3
 801690c:	f843 cc04 	str.w	ip, [r3, #-4]
 8016910:	d8d9      	bhi.n	80168c6 <__gethex+0x352>
 8016912:	68a3      	ldr	r3, [r4, #8]
 8016914:	459b      	cmp	fp, r3
 8016916:	db17      	blt.n	8016948 <__gethex+0x3d4>
 8016918:	6861      	ldr	r1, [r4, #4]
 801691a:	9801      	ldr	r0, [sp, #4]
 801691c:	3101      	adds	r1, #1
 801691e:	f000 f9bb 	bl	8016c98 <_Balloc>
 8016922:	4681      	mov	r9, r0
 8016924:	b918      	cbnz	r0, 801692e <__gethex+0x3ba>
 8016926:	4b1a      	ldr	r3, [pc, #104]	@ (8016990 <__gethex+0x41c>)
 8016928:	4602      	mov	r2, r0
 801692a:	2184      	movs	r1, #132	@ 0x84
 801692c:	e6c5      	b.n	80166ba <__gethex+0x146>
 801692e:	6922      	ldr	r2, [r4, #16]
 8016930:	3202      	adds	r2, #2
 8016932:	f104 010c 	add.w	r1, r4, #12
 8016936:	0092      	lsls	r2, r2, #2
 8016938:	300c      	adds	r0, #12
 801693a:	f7ff fd50 	bl	80163de <memcpy>
 801693e:	4621      	mov	r1, r4
 8016940:	9801      	ldr	r0, [sp, #4]
 8016942:	f000 f9e9 	bl	8016d18 <_Bfree>
 8016946:	464c      	mov	r4, r9
 8016948:	6923      	ldr	r3, [r4, #16]
 801694a:	1c5a      	adds	r2, r3, #1
 801694c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016950:	6122      	str	r2, [r4, #16]
 8016952:	2201      	movs	r2, #1
 8016954:	615a      	str	r2, [r3, #20]
 8016956:	e7be      	b.n	80168d6 <__gethex+0x362>
 8016958:	6922      	ldr	r2, [r4, #16]
 801695a:	455a      	cmp	r2, fp
 801695c:	dd0b      	ble.n	8016976 <__gethex+0x402>
 801695e:	2101      	movs	r1, #1
 8016960:	4620      	mov	r0, r4
 8016962:	f7ff fd9f 	bl	80164a4 <rshift>
 8016966:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801696a:	3701      	adds	r7, #1
 801696c:	42bb      	cmp	r3, r7
 801696e:	f6ff aee0 	blt.w	8016732 <__gethex+0x1be>
 8016972:	2501      	movs	r5, #1
 8016974:	e7c2      	b.n	80168fc <__gethex+0x388>
 8016976:	f016 061f 	ands.w	r6, r6, #31
 801697a:	d0fa      	beq.n	8016972 <__gethex+0x3fe>
 801697c:	4453      	add	r3, sl
 801697e:	f1c6 0620 	rsb	r6, r6, #32
 8016982:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8016986:	f000 fa79 	bl	8016e7c <__hi0bits>
 801698a:	42b0      	cmp	r0, r6
 801698c:	dbe7      	blt.n	801695e <__gethex+0x3ea>
 801698e:	e7f0      	b.n	8016972 <__gethex+0x3fe>
 8016990:	08018f09 	.word	0x08018f09

08016994 <L_shift>:
 8016994:	f1c2 0208 	rsb	r2, r2, #8
 8016998:	0092      	lsls	r2, r2, #2
 801699a:	b570      	push	{r4, r5, r6, lr}
 801699c:	f1c2 0620 	rsb	r6, r2, #32
 80169a0:	6843      	ldr	r3, [r0, #4]
 80169a2:	6804      	ldr	r4, [r0, #0]
 80169a4:	fa03 f506 	lsl.w	r5, r3, r6
 80169a8:	432c      	orrs	r4, r5
 80169aa:	40d3      	lsrs	r3, r2
 80169ac:	6004      	str	r4, [r0, #0]
 80169ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80169b2:	4288      	cmp	r0, r1
 80169b4:	d3f4      	bcc.n	80169a0 <L_shift+0xc>
 80169b6:	bd70      	pop	{r4, r5, r6, pc}

080169b8 <__match>:
 80169b8:	b530      	push	{r4, r5, lr}
 80169ba:	6803      	ldr	r3, [r0, #0]
 80169bc:	3301      	adds	r3, #1
 80169be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169c2:	b914      	cbnz	r4, 80169ca <__match+0x12>
 80169c4:	6003      	str	r3, [r0, #0]
 80169c6:	2001      	movs	r0, #1
 80169c8:	bd30      	pop	{r4, r5, pc}
 80169ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80169d2:	2d19      	cmp	r5, #25
 80169d4:	bf98      	it	ls
 80169d6:	3220      	addls	r2, #32
 80169d8:	42a2      	cmp	r2, r4
 80169da:	d0f0      	beq.n	80169be <__match+0x6>
 80169dc:	2000      	movs	r0, #0
 80169de:	e7f3      	b.n	80169c8 <__match+0x10>

080169e0 <__hexnan>:
 80169e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169e4:	680b      	ldr	r3, [r1, #0]
 80169e6:	6801      	ldr	r1, [r0, #0]
 80169e8:	115e      	asrs	r6, r3, #5
 80169ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80169ee:	f013 031f 	ands.w	r3, r3, #31
 80169f2:	b087      	sub	sp, #28
 80169f4:	bf18      	it	ne
 80169f6:	3604      	addne	r6, #4
 80169f8:	2500      	movs	r5, #0
 80169fa:	1f37      	subs	r7, r6, #4
 80169fc:	4682      	mov	sl, r0
 80169fe:	4690      	mov	r8, r2
 8016a00:	9301      	str	r3, [sp, #4]
 8016a02:	f846 5c04 	str.w	r5, [r6, #-4]
 8016a06:	46b9      	mov	r9, r7
 8016a08:	463c      	mov	r4, r7
 8016a0a:	9502      	str	r5, [sp, #8]
 8016a0c:	46ab      	mov	fp, r5
 8016a0e:	784a      	ldrb	r2, [r1, #1]
 8016a10:	1c4b      	adds	r3, r1, #1
 8016a12:	9303      	str	r3, [sp, #12]
 8016a14:	b342      	cbz	r2, 8016a68 <__hexnan+0x88>
 8016a16:	4610      	mov	r0, r2
 8016a18:	9105      	str	r1, [sp, #20]
 8016a1a:	9204      	str	r2, [sp, #16]
 8016a1c:	f7ff fd94 	bl	8016548 <__hexdig_fun>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d151      	bne.n	8016ac8 <__hexnan+0xe8>
 8016a24:	9a04      	ldr	r2, [sp, #16]
 8016a26:	9905      	ldr	r1, [sp, #20]
 8016a28:	2a20      	cmp	r2, #32
 8016a2a:	d818      	bhi.n	8016a5e <__hexnan+0x7e>
 8016a2c:	9b02      	ldr	r3, [sp, #8]
 8016a2e:	459b      	cmp	fp, r3
 8016a30:	dd13      	ble.n	8016a5a <__hexnan+0x7a>
 8016a32:	454c      	cmp	r4, r9
 8016a34:	d206      	bcs.n	8016a44 <__hexnan+0x64>
 8016a36:	2d07      	cmp	r5, #7
 8016a38:	dc04      	bgt.n	8016a44 <__hexnan+0x64>
 8016a3a:	462a      	mov	r2, r5
 8016a3c:	4649      	mov	r1, r9
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7ff ffa8 	bl	8016994 <L_shift>
 8016a44:	4544      	cmp	r4, r8
 8016a46:	d952      	bls.n	8016aee <__hexnan+0x10e>
 8016a48:	2300      	movs	r3, #0
 8016a4a:	f1a4 0904 	sub.w	r9, r4, #4
 8016a4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016a52:	f8cd b008 	str.w	fp, [sp, #8]
 8016a56:	464c      	mov	r4, r9
 8016a58:	461d      	mov	r5, r3
 8016a5a:	9903      	ldr	r1, [sp, #12]
 8016a5c:	e7d7      	b.n	8016a0e <__hexnan+0x2e>
 8016a5e:	2a29      	cmp	r2, #41	@ 0x29
 8016a60:	d157      	bne.n	8016b12 <__hexnan+0x132>
 8016a62:	3102      	adds	r1, #2
 8016a64:	f8ca 1000 	str.w	r1, [sl]
 8016a68:	f1bb 0f00 	cmp.w	fp, #0
 8016a6c:	d051      	beq.n	8016b12 <__hexnan+0x132>
 8016a6e:	454c      	cmp	r4, r9
 8016a70:	d206      	bcs.n	8016a80 <__hexnan+0xa0>
 8016a72:	2d07      	cmp	r5, #7
 8016a74:	dc04      	bgt.n	8016a80 <__hexnan+0xa0>
 8016a76:	462a      	mov	r2, r5
 8016a78:	4649      	mov	r1, r9
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f7ff ff8a 	bl	8016994 <L_shift>
 8016a80:	4544      	cmp	r4, r8
 8016a82:	d936      	bls.n	8016af2 <__hexnan+0x112>
 8016a84:	f1a8 0204 	sub.w	r2, r8, #4
 8016a88:	4623      	mov	r3, r4
 8016a8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8016a8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8016a92:	429f      	cmp	r7, r3
 8016a94:	d2f9      	bcs.n	8016a8a <__hexnan+0xaa>
 8016a96:	1b3b      	subs	r3, r7, r4
 8016a98:	f023 0303 	bic.w	r3, r3, #3
 8016a9c:	3304      	adds	r3, #4
 8016a9e:	3401      	adds	r4, #1
 8016aa0:	3e03      	subs	r6, #3
 8016aa2:	42b4      	cmp	r4, r6
 8016aa4:	bf88      	it	hi
 8016aa6:	2304      	movhi	r3, #4
 8016aa8:	4443      	add	r3, r8
 8016aaa:	2200      	movs	r2, #0
 8016aac:	f843 2b04 	str.w	r2, [r3], #4
 8016ab0:	429f      	cmp	r7, r3
 8016ab2:	d2fb      	bcs.n	8016aac <__hexnan+0xcc>
 8016ab4:	683b      	ldr	r3, [r7, #0]
 8016ab6:	b91b      	cbnz	r3, 8016ac0 <__hexnan+0xe0>
 8016ab8:	4547      	cmp	r7, r8
 8016aba:	d128      	bne.n	8016b0e <__hexnan+0x12e>
 8016abc:	2301      	movs	r3, #1
 8016abe:	603b      	str	r3, [r7, #0]
 8016ac0:	2005      	movs	r0, #5
 8016ac2:	b007      	add	sp, #28
 8016ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac8:	3501      	adds	r5, #1
 8016aca:	2d08      	cmp	r5, #8
 8016acc:	f10b 0b01 	add.w	fp, fp, #1
 8016ad0:	dd06      	ble.n	8016ae0 <__hexnan+0x100>
 8016ad2:	4544      	cmp	r4, r8
 8016ad4:	d9c1      	bls.n	8016a5a <__hexnan+0x7a>
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	f844 3c04 	str.w	r3, [r4, #-4]
 8016adc:	2501      	movs	r5, #1
 8016ade:	3c04      	subs	r4, #4
 8016ae0:	6822      	ldr	r2, [r4, #0]
 8016ae2:	f000 000f 	and.w	r0, r0, #15
 8016ae6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016aea:	6020      	str	r0, [r4, #0]
 8016aec:	e7b5      	b.n	8016a5a <__hexnan+0x7a>
 8016aee:	2508      	movs	r5, #8
 8016af0:	e7b3      	b.n	8016a5a <__hexnan+0x7a>
 8016af2:	9b01      	ldr	r3, [sp, #4]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d0dd      	beq.n	8016ab4 <__hexnan+0xd4>
 8016af8:	f1c3 0320 	rsb	r3, r3, #32
 8016afc:	f04f 32ff 	mov.w	r2, #4294967295
 8016b00:	40da      	lsrs	r2, r3
 8016b02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8016b06:	4013      	ands	r3, r2
 8016b08:	f846 3c04 	str.w	r3, [r6, #-4]
 8016b0c:	e7d2      	b.n	8016ab4 <__hexnan+0xd4>
 8016b0e:	3f04      	subs	r7, #4
 8016b10:	e7d0      	b.n	8016ab4 <__hexnan+0xd4>
 8016b12:	2004      	movs	r0, #4
 8016b14:	e7d5      	b.n	8016ac2 <__hexnan+0xe2>
	...

08016b18 <sbrk_aligned>:
 8016b18:	b570      	push	{r4, r5, r6, lr}
 8016b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8016b58 <sbrk_aligned+0x40>)
 8016b1c:	460c      	mov	r4, r1
 8016b1e:	6831      	ldr	r1, [r6, #0]
 8016b20:	4605      	mov	r5, r0
 8016b22:	b911      	cbnz	r1, 8016b2a <sbrk_aligned+0x12>
 8016b24:	f001 f908 	bl	8017d38 <_sbrk_r>
 8016b28:	6030      	str	r0, [r6, #0]
 8016b2a:	4621      	mov	r1, r4
 8016b2c:	4628      	mov	r0, r5
 8016b2e:	f001 f903 	bl	8017d38 <_sbrk_r>
 8016b32:	1c43      	adds	r3, r0, #1
 8016b34:	d103      	bne.n	8016b3e <sbrk_aligned+0x26>
 8016b36:	f04f 34ff 	mov.w	r4, #4294967295
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	bd70      	pop	{r4, r5, r6, pc}
 8016b3e:	1cc4      	adds	r4, r0, #3
 8016b40:	f024 0403 	bic.w	r4, r4, #3
 8016b44:	42a0      	cmp	r0, r4
 8016b46:	d0f8      	beq.n	8016b3a <sbrk_aligned+0x22>
 8016b48:	1a21      	subs	r1, r4, r0
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	f001 f8f4 	bl	8017d38 <_sbrk_r>
 8016b50:	3001      	adds	r0, #1
 8016b52:	d1f2      	bne.n	8016b3a <sbrk_aligned+0x22>
 8016b54:	e7ef      	b.n	8016b36 <sbrk_aligned+0x1e>
 8016b56:	bf00      	nop
 8016b58:	2000e6bc 	.word	0x2000e6bc

08016b5c <_malloc_r>:
 8016b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b60:	1ccd      	adds	r5, r1, #3
 8016b62:	f025 0503 	bic.w	r5, r5, #3
 8016b66:	3508      	adds	r5, #8
 8016b68:	2d0c      	cmp	r5, #12
 8016b6a:	bf38      	it	cc
 8016b6c:	250c      	movcc	r5, #12
 8016b6e:	2d00      	cmp	r5, #0
 8016b70:	4606      	mov	r6, r0
 8016b72:	db01      	blt.n	8016b78 <_malloc_r+0x1c>
 8016b74:	42a9      	cmp	r1, r5
 8016b76:	d904      	bls.n	8016b82 <_malloc_r+0x26>
 8016b78:	230c      	movs	r3, #12
 8016b7a:	6033      	str	r3, [r6, #0]
 8016b7c:	2000      	movs	r0, #0
 8016b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016c58 <_malloc_r+0xfc>
 8016b86:	f000 f87b 	bl	8016c80 <__malloc_lock>
 8016b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8016b8e:	461c      	mov	r4, r3
 8016b90:	bb44      	cbnz	r4, 8016be4 <_malloc_r+0x88>
 8016b92:	4629      	mov	r1, r5
 8016b94:	4630      	mov	r0, r6
 8016b96:	f7ff ffbf 	bl	8016b18 <sbrk_aligned>
 8016b9a:	1c43      	adds	r3, r0, #1
 8016b9c:	4604      	mov	r4, r0
 8016b9e:	d158      	bne.n	8016c52 <_malloc_r+0xf6>
 8016ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8016ba4:	4627      	mov	r7, r4
 8016ba6:	2f00      	cmp	r7, #0
 8016ba8:	d143      	bne.n	8016c32 <_malloc_r+0xd6>
 8016baa:	2c00      	cmp	r4, #0
 8016bac:	d04b      	beq.n	8016c46 <_malloc_r+0xea>
 8016bae:	6823      	ldr	r3, [r4, #0]
 8016bb0:	4639      	mov	r1, r7
 8016bb2:	4630      	mov	r0, r6
 8016bb4:	eb04 0903 	add.w	r9, r4, r3
 8016bb8:	f001 f8be 	bl	8017d38 <_sbrk_r>
 8016bbc:	4581      	cmp	r9, r0
 8016bbe:	d142      	bne.n	8016c46 <_malloc_r+0xea>
 8016bc0:	6821      	ldr	r1, [r4, #0]
 8016bc2:	1a6d      	subs	r5, r5, r1
 8016bc4:	4629      	mov	r1, r5
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	f7ff ffa6 	bl	8016b18 <sbrk_aligned>
 8016bcc:	3001      	adds	r0, #1
 8016bce:	d03a      	beq.n	8016c46 <_malloc_r+0xea>
 8016bd0:	6823      	ldr	r3, [r4, #0]
 8016bd2:	442b      	add	r3, r5
 8016bd4:	6023      	str	r3, [r4, #0]
 8016bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8016bda:	685a      	ldr	r2, [r3, #4]
 8016bdc:	bb62      	cbnz	r2, 8016c38 <_malloc_r+0xdc>
 8016bde:	f8c8 7000 	str.w	r7, [r8]
 8016be2:	e00f      	b.n	8016c04 <_malloc_r+0xa8>
 8016be4:	6822      	ldr	r2, [r4, #0]
 8016be6:	1b52      	subs	r2, r2, r5
 8016be8:	d420      	bmi.n	8016c2c <_malloc_r+0xd0>
 8016bea:	2a0b      	cmp	r2, #11
 8016bec:	d917      	bls.n	8016c1e <_malloc_r+0xc2>
 8016bee:	1961      	adds	r1, r4, r5
 8016bf0:	42a3      	cmp	r3, r4
 8016bf2:	6025      	str	r5, [r4, #0]
 8016bf4:	bf18      	it	ne
 8016bf6:	6059      	strne	r1, [r3, #4]
 8016bf8:	6863      	ldr	r3, [r4, #4]
 8016bfa:	bf08      	it	eq
 8016bfc:	f8c8 1000 	streq.w	r1, [r8]
 8016c00:	5162      	str	r2, [r4, r5]
 8016c02:	604b      	str	r3, [r1, #4]
 8016c04:	4630      	mov	r0, r6
 8016c06:	f000 f841 	bl	8016c8c <__malloc_unlock>
 8016c0a:	f104 000b 	add.w	r0, r4, #11
 8016c0e:	1d23      	adds	r3, r4, #4
 8016c10:	f020 0007 	bic.w	r0, r0, #7
 8016c14:	1ac2      	subs	r2, r0, r3
 8016c16:	bf1c      	itt	ne
 8016c18:	1a1b      	subne	r3, r3, r0
 8016c1a:	50a3      	strne	r3, [r4, r2]
 8016c1c:	e7af      	b.n	8016b7e <_malloc_r+0x22>
 8016c1e:	6862      	ldr	r2, [r4, #4]
 8016c20:	42a3      	cmp	r3, r4
 8016c22:	bf0c      	ite	eq
 8016c24:	f8c8 2000 	streq.w	r2, [r8]
 8016c28:	605a      	strne	r2, [r3, #4]
 8016c2a:	e7eb      	b.n	8016c04 <_malloc_r+0xa8>
 8016c2c:	4623      	mov	r3, r4
 8016c2e:	6864      	ldr	r4, [r4, #4]
 8016c30:	e7ae      	b.n	8016b90 <_malloc_r+0x34>
 8016c32:	463c      	mov	r4, r7
 8016c34:	687f      	ldr	r7, [r7, #4]
 8016c36:	e7b6      	b.n	8016ba6 <_malloc_r+0x4a>
 8016c38:	461a      	mov	r2, r3
 8016c3a:	685b      	ldr	r3, [r3, #4]
 8016c3c:	42a3      	cmp	r3, r4
 8016c3e:	d1fb      	bne.n	8016c38 <_malloc_r+0xdc>
 8016c40:	2300      	movs	r3, #0
 8016c42:	6053      	str	r3, [r2, #4]
 8016c44:	e7de      	b.n	8016c04 <_malloc_r+0xa8>
 8016c46:	230c      	movs	r3, #12
 8016c48:	6033      	str	r3, [r6, #0]
 8016c4a:	4630      	mov	r0, r6
 8016c4c:	f000 f81e 	bl	8016c8c <__malloc_unlock>
 8016c50:	e794      	b.n	8016b7c <_malloc_r+0x20>
 8016c52:	6005      	str	r5, [r0, #0]
 8016c54:	e7d6      	b.n	8016c04 <_malloc_r+0xa8>
 8016c56:	bf00      	nop
 8016c58:	2000e6c0 	.word	0x2000e6c0

08016c5c <__ascii_mbtowc>:
 8016c5c:	b082      	sub	sp, #8
 8016c5e:	b901      	cbnz	r1, 8016c62 <__ascii_mbtowc+0x6>
 8016c60:	a901      	add	r1, sp, #4
 8016c62:	b142      	cbz	r2, 8016c76 <__ascii_mbtowc+0x1a>
 8016c64:	b14b      	cbz	r3, 8016c7a <__ascii_mbtowc+0x1e>
 8016c66:	7813      	ldrb	r3, [r2, #0]
 8016c68:	600b      	str	r3, [r1, #0]
 8016c6a:	7812      	ldrb	r2, [r2, #0]
 8016c6c:	1e10      	subs	r0, r2, #0
 8016c6e:	bf18      	it	ne
 8016c70:	2001      	movne	r0, #1
 8016c72:	b002      	add	sp, #8
 8016c74:	4770      	bx	lr
 8016c76:	4610      	mov	r0, r2
 8016c78:	e7fb      	b.n	8016c72 <__ascii_mbtowc+0x16>
 8016c7a:	f06f 0001 	mvn.w	r0, #1
 8016c7e:	e7f8      	b.n	8016c72 <__ascii_mbtowc+0x16>

08016c80 <__malloc_lock>:
 8016c80:	4801      	ldr	r0, [pc, #4]	@ (8016c88 <__malloc_lock+0x8>)
 8016c82:	f7ff bba2 	b.w	80163ca <__retarget_lock_acquire_recursive>
 8016c86:	bf00      	nop
 8016c88:	2000e6b8 	.word	0x2000e6b8

08016c8c <__malloc_unlock>:
 8016c8c:	4801      	ldr	r0, [pc, #4]	@ (8016c94 <__malloc_unlock+0x8>)
 8016c8e:	f7ff bb9d 	b.w	80163cc <__retarget_lock_release_recursive>
 8016c92:	bf00      	nop
 8016c94:	2000e6b8 	.word	0x2000e6b8

08016c98 <_Balloc>:
 8016c98:	b570      	push	{r4, r5, r6, lr}
 8016c9a:	69c6      	ldr	r6, [r0, #28]
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	460d      	mov	r5, r1
 8016ca0:	b976      	cbnz	r6, 8016cc0 <_Balloc+0x28>
 8016ca2:	2010      	movs	r0, #16
 8016ca4:	f001 f88a 	bl	8017dbc <malloc>
 8016ca8:	4602      	mov	r2, r0
 8016caa:	61e0      	str	r0, [r4, #28]
 8016cac:	b920      	cbnz	r0, 8016cb8 <_Balloc+0x20>
 8016cae:	4b18      	ldr	r3, [pc, #96]	@ (8016d10 <_Balloc+0x78>)
 8016cb0:	4818      	ldr	r0, [pc, #96]	@ (8016d14 <_Balloc+0x7c>)
 8016cb2:	216b      	movs	r1, #107	@ 0x6b
 8016cb4:	f001 f850 	bl	8017d58 <__assert_func>
 8016cb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016cbc:	6006      	str	r6, [r0, #0]
 8016cbe:	60c6      	str	r6, [r0, #12]
 8016cc0:	69e6      	ldr	r6, [r4, #28]
 8016cc2:	68f3      	ldr	r3, [r6, #12]
 8016cc4:	b183      	cbz	r3, 8016ce8 <_Balloc+0x50>
 8016cc6:	69e3      	ldr	r3, [r4, #28]
 8016cc8:	68db      	ldr	r3, [r3, #12]
 8016cca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016cce:	b9b8      	cbnz	r0, 8016d00 <_Balloc+0x68>
 8016cd0:	2101      	movs	r1, #1
 8016cd2:	fa01 f605 	lsl.w	r6, r1, r5
 8016cd6:	1d72      	adds	r2, r6, #5
 8016cd8:	0092      	lsls	r2, r2, #2
 8016cda:	4620      	mov	r0, r4
 8016cdc:	f001 f85a 	bl	8017d94 <_calloc_r>
 8016ce0:	b160      	cbz	r0, 8016cfc <_Balloc+0x64>
 8016ce2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016ce6:	e00e      	b.n	8016d06 <_Balloc+0x6e>
 8016ce8:	2221      	movs	r2, #33	@ 0x21
 8016cea:	2104      	movs	r1, #4
 8016cec:	4620      	mov	r0, r4
 8016cee:	f001 f851 	bl	8017d94 <_calloc_r>
 8016cf2:	69e3      	ldr	r3, [r4, #28]
 8016cf4:	60f0      	str	r0, [r6, #12]
 8016cf6:	68db      	ldr	r3, [r3, #12]
 8016cf8:	2b00      	cmp	r3, #0
 8016cfa:	d1e4      	bne.n	8016cc6 <_Balloc+0x2e>
 8016cfc:	2000      	movs	r0, #0
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
 8016d00:	6802      	ldr	r2, [r0, #0]
 8016d02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016d06:	2300      	movs	r3, #0
 8016d08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d0c:	e7f7      	b.n	8016cfe <_Balloc+0x66>
 8016d0e:	bf00      	nop
 8016d10:	08018f7a 	.word	0x08018f7a
 8016d14:	08018f91 	.word	0x08018f91

08016d18 <_Bfree>:
 8016d18:	b570      	push	{r4, r5, r6, lr}
 8016d1a:	69c6      	ldr	r6, [r0, #28]
 8016d1c:	4605      	mov	r5, r0
 8016d1e:	460c      	mov	r4, r1
 8016d20:	b976      	cbnz	r6, 8016d40 <_Bfree+0x28>
 8016d22:	2010      	movs	r0, #16
 8016d24:	f001 f84a 	bl	8017dbc <malloc>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	61e8      	str	r0, [r5, #28]
 8016d2c:	b920      	cbnz	r0, 8016d38 <_Bfree+0x20>
 8016d2e:	4b09      	ldr	r3, [pc, #36]	@ (8016d54 <_Bfree+0x3c>)
 8016d30:	4809      	ldr	r0, [pc, #36]	@ (8016d58 <_Bfree+0x40>)
 8016d32:	218f      	movs	r1, #143	@ 0x8f
 8016d34:	f001 f810 	bl	8017d58 <__assert_func>
 8016d38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d3c:	6006      	str	r6, [r0, #0]
 8016d3e:	60c6      	str	r6, [r0, #12]
 8016d40:	b13c      	cbz	r4, 8016d52 <_Bfree+0x3a>
 8016d42:	69eb      	ldr	r3, [r5, #28]
 8016d44:	6862      	ldr	r2, [r4, #4]
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016d4c:	6021      	str	r1, [r4, #0]
 8016d4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016d52:	bd70      	pop	{r4, r5, r6, pc}
 8016d54:	08018f7a 	.word	0x08018f7a
 8016d58:	08018f91 	.word	0x08018f91

08016d5c <__multadd>:
 8016d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d60:	690d      	ldr	r5, [r1, #16]
 8016d62:	4607      	mov	r7, r0
 8016d64:	460c      	mov	r4, r1
 8016d66:	461e      	mov	r6, r3
 8016d68:	f101 0c14 	add.w	ip, r1, #20
 8016d6c:	2000      	movs	r0, #0
 8016d6e:	f8dc 3000 	ldr.w	r3, [ip]
 8016d72:	b299      	uxth	r1, r3
 8016d74:	fb02 6101 	mla	r1, r2, r1, r6
 8016d78:	0c1e      	lsrs	r6, r3, #16
 8016d7a:	0c0b      	lsrs	r3, r1, #16
 8016d7c:	fb02 3306 	mla	r3, r2, r6, r3
 8016d80:	b289      	uxth	r1, r1
 8016d82:	3001      	adds	r0, #1
 8016d84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016d88:	4285      	cmp	r5, r0
 8016d8a:	f84c 1b04 	str.w	r1, [ip], #4
 8016d8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016d92:	dcec      	bgt.n	8016d6e <__multadd+0x12>
 8016d94:	b30e      	cbz	r6, 8016dda <__multadd+0x7e>
 8016d96:	68a3      	ldr	r3, [r4, #8]
 8016d98:	42ab      	cmp	r3, r5
 8016d9a:	dc19      	bgt.n	8016dd0 <__multadd+0x74>
 8016d9c:	6861      	ldr	r1, [r4, #4]
 8016d9e:	4638      	mov	r0, r7
 8016da0:	3101      	adds	r1, #1
 8016da2:	f7ff ff79 	bl	8016c98 <_Balloc>
 8016da6:	4680      	mov	r8, r0
 8016da8:	b928      	cbnz	r0, 8016db6 <__multadd+0x5a>
 8016daa:	4602      	mov	r2, r0
 8016dac:	4b0c      	ldr	r3, [pc, #48]	@ (8016de0 <__multadd+0x84>)
 8016dae:	480d      	ldr	r0, [pc, #52]	@ (8016de4 <__multadd+0x88>)
 8016db0:	21ba      	movs	r1, #186	@ 0xba
 8016db2:	f000 ffd1 	bl	8017d58 <__assert_func>
 8016db6:	6922      	ldr	r2, [r4, #16]
 8016db8:	3202      	adds	r2, #2
 8016dba:	f104 010c 	add.w	r1, r4, #12
 8016dbe:	0092      	lsls	r2, r2, #2
 8016dc0:	300c      	adds	r0, #12
 8016dc2:	f7ff fb0c 	bl	80163de <memcpy>
 8016dc6:	4621      	mov	r1, r4
 8016dc8:	4638      	mov	r0, r7
 8016dca:	f7ff ffa5 	bl	8016d18 <_Bfree>
 8016dce:	4644      	mov	r4, r8
 8016dd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016dd4:	3501      	adds	r5, #1
 8016dd6:	615e      	str	r6, [r3, #20]
 8016dd8:	6125      	str	r5, [r4, #16]
 8016dda:	4620      	mov	r0, r4
 8016ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016de0:	08018f09 	.word	0x08018f09
 8016de4:	08018f91 	.word	0x08018f91

08016de8 <__s2b>:
 8016de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016dec:	460c      	mov	r4, r1
 8016dee:	4615      	mov	r5, r2
 8016df0:	461f      	mov	r7, r3
 8016df2:	2209      	movs	r2, #9
 8016df4:	3308      	adds	r3, #8
 8016df6:	4606      	mov	r6, r0
 8016df8:	fb93 f3f2 	sdiv	r3, r3, r2
 8016dfc:	2100      	movs	r1, #0
 8016dfe:	2201      	movs	r2, #1
 8016e00:	429a      	cmp	r2, r3
 8016e02:	db09      	blt.n	8016e18 <__s2b+0x30>
 8016e04:	4630      	mov	r0, r6
 8016e06:	f7ff ff47 	bl	8016c98 <_Balloc>
 8016e0a:	b940      	cbnz	r0, 8016e1e <__s2b+0x36>
 8016e0c:	4602      	mov	r2, r0
 8016e0e:	4b19      	ldr	r3, [pc, #100]	@ (8016e74 <__s2b+0x8c>)
 8016e10:	4819      	ldr	r0, [pc, #100]	@ (8016e78 <__s2b+0x90>)
 8016e12:	21d3      	movs	r1, #211	@ 0xd3
 8016e14:	f000 ffa0 	bl	8017d58 <__assert_func>
 8016e18:	0052      	lsls	r2, r2, #1
 8016e1a:	3101      	adds	r1, #1
 8016e1c:	e7f0      	b.n	8016e00 <__s2b+0x18>
 8016e1e:	9b08      	ldr	r3, [sp, #32]
 8016e20:	6143      	str	r3, [r0, #20]
 8016e22:	2d09      	cmp	r5, #9
 8016e24:	f04f 0301 	mov.w	r3, #1
 8016e28:	6103      	str	r3, [r0, #16]
 8016e2a:	dd16      	ble.n	8016e5a <__s2b+0x72>
 8016e2c:	f104 0909 	add.w	r9, r4, #9
 8016e30:	46c8      	mov	r8, r9
 8016e32:	442c      	add	r4, r5
 8016e34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016e38:	4601      	mov	r1, r0
 8016e3a:	3b30      	subs	r3, #48	@ 0x30
 8016e3c:	220a      	movs	r2, #10
 8016e3e:	4630      	mov	r0, r6
 8016e40:	f7ff ff8c 	bl	8016d5c <__multadd>
 8016e44:	45a0      	cmp	r8, r4
 8016e46:	d1f5      	bne.n	8016e34 <__s2b+0x4c>
 8016e48:	f1a5 0408 	sub.w	r4, r5, #8
 8016e4c:	444c      	add	r4, r9
 8016e4e:	1b2d      	subs	r5, r5, r4
 8016e50:	1963      	adds	r3, r4, r5
 8016e52:	42bb      	cmp	r3, r7
 8016e54:	db04      	blt.n	8016e60 <__s2b+0x78>
 8016e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e5a:	340a      	adds	r4, #10
 8016e5c:	2509      	movs	r5, #9
 8016e5e:	e7f6      	b.n	8016e4e <__s2b+0x66>
 8016e60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016e64:	4601      	mov	r1, r0
 8016e66:	3b30      	subs	r3, #48	@ 0x30
 8016e68:	220a      	movs	r2, #10
 8016e6a:	4630      	mov	r0, r6
 8016e6c:	f7ff ff76 	bl	8016d5c <__multadd>
 8016e70:	e7ee      	b.n	8016e50 <__s2b+0x68>
 8016e72:	bf00      	nop
 8016e74:	08018f09 	.word	0x08018f09
 8016e78:	08018f91 	.word	0x08018f91

08016e7c <__hi0bits>:
 8016e7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8016e80:	4603      	mov	r3, r0
 8016e82:	bf36      	itet	cc
 8016e84:	0403      	lslcc	r3, r0, #16
 8016e86:	2000      	movcs	r0, #0
 8016e88:	2010      	movcc	r0, #16
 8016e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016e8e:	bf3c      	itt	cc
 8016e90:	021b      	lslcc	r3, r3, #8
 8016e92:	3008      	addcc	r0, #8
 8016e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016e98:	bf3c      	itt	cc
 8016e9a:	011b      	lslcc	r3, r3, #4
 8016e9c:	3004      	addcc	r0, #4
 8016e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8016ea2:	bf3c      	itt	cc
 8016ea4:	009b      	lslcc	r3, r3, #2
 8016ea6:	3002      	addcc	r0, #2
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	db05      	blt.n	8016eb8 <__hi0bits+0x3c>
 8016eac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8016eb0:	f100 0001 	add.w	r0, r0, #1
 8016eb4:	bf08      	it	eq
 8016eb6:	2020      	moveq	r0, #32
 8016eb8:	4770      	bx	lr

08016eba <__lo0bits>:
 8016eba:	6803      	ldr	r3, [r0, #0]
 8016ebc:	4602      	mov	r2, r0
 8016ebe:	f013 0007 	ands.w	r0, r3, #7
 8016ec2:	d00b      	beq.n	8016edc <__lo0bits+0x22>
 8016ec4:	07d9      	lsls	r1, r3, #31
 8016ec6:	d421      	bmi.n	8016f0c <__lo0bits+0x52>
 8016ec8:	0798      	lsls	r0, r3, #30
 8016eca:	bf49      	itett	mi
 8016ecc:	085b      	lsrmi	r3, r3, #1
 8016ece:	089b      	lsrpl	r3, r3, #2
 8016ed0:	2001      	movmi	r0, #1
 8016ed2:	6013      	strmi	r3, [r2, #0]
 8016ed4:	bf5c      	itt	pl
 8016ed6:	6013      	strpl	r3, [r2, #0]
 8016ed8:	2002      	movpl	r0, #2
 8016eda:	4770      	bx	lr
 8016edc:	b299      	uxth	r1, r3
 8016ede:	b909      	cbnz	r1, 8016ee4 <__lo0bits+0x2a>
 8016ee0:	0c1b      	lsrs	r3, r3, #16
 8016ee2:	2010      	movs	r0, #16
 8016ee4:	b2d9      	uxtb	r1, r3
 8016ee6:	b909      	cbnz	r1, 8016eec <__lo0bits+0x32>
 8016ee8:	3008      	adds	r0, #8
 8016eea:	0a1b      	lsrs	r3, r3, #8
 8016eec:	0719      	lsls	r1, r3, #28
 8016eee:	bf04      	itt	eq
 8016ef0:	091b      	lsreq	r3, r3, #4
 8016ef2:	3004      	addeq	r0, #4
 8016ef4:	0799      	lsls	r1, r3, #30
 8016ef6:	bf04      	itt	eq
 8016ef8:	089b      	lsreq	r3, r3, #2
 8016efa:	3002      	addeq	r0, #2
 8016efc:	07d9      	lsls	r1, r3, #31
 8016efe:	d403      	bmi.n	8016f08 <__lo0bits+0x4e>
 8016f00:	085b      	lsrs	r3, r3, #1
 8016f02:	f100 0001 	add.w	r0, r0, #1
 8016f06:	d003      	beq.n	8016f10 <__lo0bits+0x56>
 8016f08:	6013      	str	r3, [r2, #0]
 8016f0a:	4770      	bx	lr
 8016f0c:	2000      	movs	r0, #0
 8016f0e:	4770      	bx	lr
 8016f10:	2020      	movs	r0, #32
 8016f12:	4770      	bx	lr

08016f14 <__i2b>:
 8016f14:	b510      	push	{r4, lr}
 8016f16:	460c      	mov	r4, r1
 8016f18:	2101      	movs	r1, #1
 8016f1a:	f7ff febd 	bl	8016c98 <_Balloc>
 8016f1e:	4602      	mov	r2, r0
 8016f20:	b928      	cbnz	r0, 8016f2e <__i2b+0x1a>
 8016f22:	4b05      	ldr	r3, [pc, #20]	@ (8016f38 <__i2b+0x24>)
 8016f24:	4805      	ldr	r0, [pc, #20]	@ (8016f3c <__i2b+0x28>)
 8016f26:	f240 1145 	movw	r1, #325	@ 0x145
 8016f2a:	f000 ff15 	bl	8017d58 <__assert_func>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	6144      	str	r4, [r0, #20]
 8016f32:	6103      	str	r3, [r0, #16]
 8016f34:	bd10      	pop	{r4, pc}
 8016f36:	bf00      	nop
 8016f38:	08018f09 	.word	0x08018f09
 8016f3c:	08018f91 	.word	0x08018f91

08016f40 <__multiply>:
 8016f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f44:	4614      	mov	r4, r2
 8016f46:	690a      	ldr	r2, [r1, #16]
 8016f48:	6923      	ldr	r3, [r4, #16]
 8016f4a:	429a      	cmp	r2, r3
 8016f4c:	bfa8      	it	ge
 8016f4e:	4623      	movge	r3, r4
 8016f50:	460f      	mov	r7, r1
 8016f52:	bfa4      	itt	ge
 8016f54:	460c      	movge	r4, r1
 8016f56:	461f      	movge	r7, r3
 8016f58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8016f5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8016f60:	68a3      	ldr	r3, [r4, #8]
 8016f62:	6861      	ldr	r1, [r4, #4]
 8016f64:	eb0a 0609 	add.w	r6, sl, r9
 8016f68:	42b3      	cmp	r3, r6
 8016f6a:	b085      	sub	sp, #20
 8016f6c:	bfb8      	it	lt
 8016f6e:	3101      	addlt	r1, #1
 8016f70:	f7ff fe92 	bl	8016c98 <_Balloc>
 8016f74:	b930      	cbnz	r0, 8016f84 <__multiply+0x44>
 8016f76:	4602      	mov	r2, r0
 8016f78:	4b44      	ldr	r3, [pc, #272]	@ (801708c <__multiply+0x14c>)
 8016f7a:	4845      	ldr	r0, [pc, #276]	@ (8017090 <__multiply+0x150>)
 8016f7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8016f80:	f000 feea 	bl	8017d58 <__assert_func>
 8016f84:	f100 0514 	add.w	r5, r0, #20
 8016f88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016f8c:	462b      	mov	r3, r5
 8016f8e:	2200      	movs	r2, #0
 8016f90:	4543      	cmp	r3, r8
 8016f92:	d321      	bcc.n	8016fd8 <__multiply+0x98>
 8016f94:	f107 0114 	add.w	r1, r7, #20
 8016f98:	f104 0214 	add.w	r2, r4, #20
 8016f9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8016fa0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8016fa4:	9302      	str	r3, [sp, #8]
 8016fa6:	1b13      	subs	r3, r2, r4
 8016fa8:	3b15      	subs	r3, #21
 8016faa:	f023 0303 	bic.w	r3, r3, #3
 8016fae:	3304      	adds	r3, #4
 8016fb0:	f104 0715 	add.w	r7, r4, #21
 8016fb4:	42ba      	cmp	r2, r7
 8016fb6:	bf38      	it	cc
 8016fb8:	2304      	movcc	r3, #4
 8016fba:	9301      	str	r3, [sp, #4]
 8016fbc:	9b02      	ldr	r3, [sp, #8]
 8016fbe:	9103      	str	r1, [sp, #12]
 8016fc0:	428b      	cmp	r3, r1
 8016fc2:	d80c      	bhi.n	8016fde <__multiply+0x9e>
 8016fc4:	2e00      	cmp	r6, #0
 8016fc6:	dd03      	ble.n	8016fd0 <__multiply+0x90>
 8016fc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	d05b      	beq.n	8017088 <__multiply+0x148>
 8016fd0:	6106      	str	r6, [r0, #16]
 8016fd2:	b005      	add	sp, #20
 8016fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fd8:	f843 2b04 	str.w	r2, [r3], #4
 8016fdc:	e7d8      	b.n	8016f90 <__multiply+0x50>
 8016fde:	f8b1 a000 	ldrh.w	sl, [r1]
 8016fe2:	f1ba 0f00 	cmp.w	sl, #0
 8016fe6:	d024      	beq.n	8017032 <__multiply+0xf2>
 8016fe8:	f104 0e14 	add.w	lr, r4, #20
 8016fec:	46a9      	mov	r9, r5
 8016fee:	f04f 0c00 	mov.w	ip, #0
 8016ff2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016ff6:	f8d9 3000 	ldr.w	r3, [r9]
 8016ffa:	fa1f fb87 	uxth.w	fp, r7
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	fb0a 330b 	mla	r3, sl, fp, r3
 8017004:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8017008:	f8d9 7000 	ldr.w	r7, [r9]
 801700c:	4463      	add	r3, ip
 801700e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8017012:	fb0a c70b 	mla	r7, sl, fp, ip
 8017016:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801701a:	b29b      	uxth	r3, r3
 801701c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017020:	4572      	cmp	r2, lr
 8017022:	f849 3b04 	str.w	r3, [r9], #4
 8017026:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801702a:	d8e2      	bhi.n	8016ff2 <__multiply+0xb2>
 801702c:	9b01      	ldr	r3, [sp, #4]
 801702e:	f845 c003 	str.w	ip, [r5, r3]
 8017032:	9b03      	ldr	r3, [sp, #12]
 8017034:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8017038:	3104      	adds	r1, #4
 801703a:	f1b9 0f00 	cmp.w	r9, #0
 801703e:	d021      	beq.n	8017084 <__multiply+0x144>
 8017040:	682b      	ldr	r3, [r5, #0]
 8017042:	f104 0c14 	add.w	ip, r4, #20
 8017046:	46ae      	mov	lr, r5
 8017048:	f04f 0a00 	mov.w	sl, #0
 801704c:	f8bc b000 	ldrh.w	fp, [ip]
 8017050:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8017054:	fb09 770b 	mla	r7, r9, fp, r7
 8017058:	4457      	add	r7, sl
 801705a:	b29b      	uxth	r3, r3
 801705c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8017060:	f84e 3b04 	str.w	r3, [lr], #4
 8017064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8017068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801706c:	f8be 3000 	ldrh.w	r3, [lr]
 8017070:	fb09 330a 	mla	r3, r9, sl, r3
 8017074:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8017078:	4562      	cmp	r2, ip
 801707a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801707e:	d8e5      	bhi.n	801704c <__multiply+0x10c>
 8017080:	9f01      	ldr	r7, [sp, #4]
 8017082:	51eb      	str	r3, [r5, r7]
 8017084:	3504      	adds	r5, #4
 8017086:	e799      	b.n	8016fbc <__multiply+0x7c>
 8017088:	3e01      	subs	r6, #1
 801708a:	e79b      	b.n	8016fc4 <__multiply+0x84>
 801708c:	08018f09 	.word	0x08018f09
 8017090:	08018f91 	.word	0x08018f91

08017094 <__pow5mult>:
 8017094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017098:	4615      	mov	r5, r2
 801709a:	f012 0203 	ands.w	r2, r2, #3
 801709e:	4607      	mov	r7, r0
 80170a0:	460e      	mov	r6, r1
 80170a2:	d007      	beq.n	80170b4 <__pow5mult+0x20>
 80170a4:	4c25      	ldr	r4, [pc, #148]	@ (801713c <__pow5mult+0xa8>)
 80170a6:	3a01      	subs	r2, #1
 80170a8:	2300      	movs	r3, #0
 80170aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170ae:	f7ff fe55 	bl	8016d5c <__multadd>
 80170b2:	4606      	mov	r6, r0
 80170b4:	10ad      	asrs	r5, r5, #2
 80170b6:	d03d      	beq.n	8017134 <__pow5mult+0xa0>
 80170b8:	69fc      	ldr	r4, [r7, #28]
 80170ba:	b97c      	cbnz	r4, 80170dc <__pow5mult+0x48>
 80170bc:	2010      	movs	r0, #16
 80170be:	f000 fe7d 	bl	8017dbc <malloc>
 80170c2:	4602      	mov	r2, r0
 80170c4:	61f8      	str	r0, [r7, #28]
 80170c6:	b928      	cbnz	r0, 80170d4 <__pow5mult+0x40>
 80170c8:	4b1d      	ldr	r3, [pc, #116]	@ (8017140 <__pow5mult+0xac>)
 80170ca:	481e      	ldr	r0, [pc, #120]	@ (8017144 <__pow5mult+0xb0>)
 80170cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80170d0:	f000 fe42 	bl	8017d58 <__assert_func>
 80170d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80170d8:	6004      	str	r4, [r0, #0]
 80170da:	60c4      	str	r4, [r0, #12]
 80170dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80170e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80170e4:	b94c      	cbnz	r4, 80170fa <__pow5mult+0x66>
 80170e6:	f240 2171 	movw	r1, #625	@ 0x271
 80170ea:	4638      	mov	r0, r7
 80170ec:	f7ff ff12 	bl	8016f14 <__i2b>
 80170f0:	2300      	movs	r3, #0
 80170f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80170f6:	4604      	mov	r4, r0
 80170f8:	6003      	str	r3, [r0, #0]
 80170fa:	f04f 0900 	mov.w	r9, #0
 80170fe:	07eb      	lsls	r3, r5, #31
 8017100:	d50a      	bpl.n	8017118 <__pow5mult+0x84>
 8017102:	4631      	mov	r1, r6
 8017104:	4622      	mov	r2, r4
 8017106:	4638      	mov	r0, r7
 8017108:	f7ff ff1a 	bl	8016f40 <__multiply>
 801710c:	4631      	mov	r1, r6
 801710e:	4680      	mov	r8, r0
 8017110:	4638      	mov	r0, r7
 8017112:	f7ff fe01 	bl	8016d18 <_Bfree>
 8017116:	4646      	mov	r6, r8
 8017118:	106d      	asrs	r5, r5, #1
 801711a:	d00b      	beq.n	8017134 <__pow5mult+0xa0>
 801711c:	6820      	ldr	r0, [r4, #0]
 801711e:	b938      	cbnz	r0, 8017130 <__pow5mult+0x9c>
 8017120:	4622      	mov	r2, r4
 8017122:	4621      	mov	r1, r4
 8017124:	4638      	mov	r0, r7
 8017126:	f7ff ff0b 	bl	8016f40 <__multiply>
 801712a:	6020      	str	r0, [r4, #0]
 801712c:	f8c0 9000 	str.w	r9, [r0]
 8017130:	4604      	mov	r4, r0
 8017132:	e7e4      	b.n	80170fe <__pow5mult+0x6a>
 8017134:	4630      	mov	r0, r6
 8017136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801713a:	bf00      	nop
 801713c:	08018fec 	.word	0x08018fec
 8017140:	08018f7a 	.word	0x08018f7a
 8017144:	08018f91 	.word	0x08018f91

08017148 <__lshift>:
 8017148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801714c:	460c      	mov	r4, r1
 801714e:	6849      	ldr	r1, [r1, #4]
 8017150:	6923      	ldr	r3, [r4, #16]
 8017152:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017156:	68a3      	ldr	r3, [r4, #8]
 8017158:	4607      	mov	r7, r0
 801715a:	4691      	mov	r9, r2
 801715c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017160:	f108 0601 	add.w	r6, r8, #1
 8017164:	42b3      	cmp	r3, r6
 8017166:	db0b      	blt.n	8017180 <__lshift+0x38>
 8017168:	4638      	mov	r0, r7
 801716a:	f7ff fd95 	bl	8016c98 <_Balloc>
 801716e:	4605      	mov	r5, r0
 8017170:	b948      	cbnz	r0, 8017186 <__lshift+0x3e>
 8017172:	4602      	mov	r2, r0
 8017174:	4b28      	ldr	r3, [pc, #160]	@ (8017218 <__lshift+0xd0>)
 8017176:	4829      	ldr	r0, [pc, #164]	@ (801721c <__lshift+0xd4>)
 8017178:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801717c:	f000 fdec 	bl	8017d58 <__assert_func>
 8017180:	3101      	adds	r1, #1
 8017182:	005b      	lsls	r3, r3, #1
 8017184:	e7ee      	b.n	8017164 <__lshift+0x1c>
 8017186:	2300      	movs	r3, #0
 8017188:	f100 0114 	add.w	r1, r0, #20
 801718c:	f100 0210 	add.w	r2, r0, #16
 8017190:	4618      	mov	r0, r3
 8017192:	4553      	cmp	r3, sl
 8017194:	db33      	blt.n	80171fe <__lshift+0xb6>
 8017196:	6920      	ldr	r0, [r4, #16]
 8017198:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801719c:	f104 0314 	add.w	r3, r4, #20
 80171a0:	f019 091f 	ands.w	r9, r9, #31
 80171a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80171ac:	d02b      	beq.n	8017206 <__lshift+0xbe>
 80171ae:	f1c9 0e20 	rsb	lr, r9, #32
 80171b2:	468a      	mov	sl, r1
 80171b4:	2200      	movs	r2, #0
 80171b6:	6818      	ldr	r0, [r3, #0]
 80171b8:	fa00 f009 	lsl.w	r0, r0, r9
 80171bc:	4310      	orrs	r0, r2
 80171be:	f84a 0b04 	str.w	r0, [sl], #4
 80171c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80171c6:	459c      	cmp	ip, r3
 80171c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80171cc:	d8f3      	bhi.n	80171b6 <__lshift+0x6e>
 80171ce:	ebac 0304 	sub.w	r3, ip, r4
 80171d2:	3b15      	subs	r3, #21
 80171d4:	f023 0303 	bic.w	r3, r3, #3
 80171d8:	3304      	adds	r3, #4
 80171da:	f104 0015 	add.w	r0, r4, #21
 80171de:	4584      	cmp	ip, r0
 80171e0:	bf38      	it	cc
 80171e2:	2304      	movcc	r3, #4
 80171e4:	50ca      	str	r2, [r1, r3]
 80171e6:	b10a      	cbz	r2, 80171ec <__lshift+0xa4>
 80171e8:	f108 0602 	add.w	r6, r8, #2
 80171ec:	3e01      	subs	r6, #1
 80171ee:	4638      	mov	r0, r7
 80171f0:	612e      	str	r6, [r5, #16]
 80171f2:	4621      	mov	r1, r4
 80171f4:	f7ff fd90 	bl	8016d18 <_Bfree>
 80171f8:	4628      	mov	r0, r5
 80171fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8017202:	3301      	adds	r3, #1
 8017204:	e7c5      	b.n	8017192 <__lshift+0x4a>
 8017206:	3904      	subs	r1, #4
 8017208:	f853 2b04 	ldr.w	r2, [r3], #4
 801720c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017210:	459c      	cmp	ip, r3
 8017212:	d8f9      	bhi.n	8017208 <__lshift+0xc0>
 8017214:	e7ea      	b.n	80171ec <__lshift+0xa4>
 8017216:	bf00      	nop
 8017218:	08018f09 	.word	0x08018f09
 801721c:	08018f91 	.word	0x08018f91

08017220 <__mcmp>:
 8017220:	690a      	ldr	r2, [r1, #16]
 8017222:	4603      	mov	r3, r0
 8017224:	6900      	ldr	r0, [r0, #16]
 8017226:	1a80      	subs	r0, r0, r2
 8017228:	b530      	push	{r4, r5, lr}
 801722a:	d10e      	bne.n	801724a <__mcmp+0x2a>
 801722c:	3314      	adds	r3, #20
 801722e:	3114      	adds	r1, #20
 8017230:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8017234:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017238:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801723c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017240:	4295      	cmp	r5, r2
 8017242:	d003      	beq.n	801724c <__mcmp+0x2c>
 8017244:	d205      	bcs.n	8017252 <__mcmp+0x32>
 8017246:	f04f 30ff 	mov.w	r0, #4294967295
 801724a:	bd30      	pop	{r4, r5, pc}
 801724c:	42a3      	cmp	r3, r4
 801724e:	d3f3      	bcc.n	8017238 <__mcmp+0x18>
 8017250:	e7fb      	b.n	801724a <__mcmp+0x2a>
 8017252:	2001      	movs	r0, #1
 8017254:	e7f9      	b.n	801724a <__mcmp+0x2a>
	...

08017258 <__mdiff>:
 8017258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801725c:	4689      	mov	r9, r1
 801725e:	4606      	mov	r6, r0
 8017260:	4611      	mov	r1, r2
 8017262:	4648      	mov	r0, r9
 8017264:	4614      	mov	r4, r2
 8017266:	f7ff ffdb 	bl	8017220 <__mcmp>
 801726a:	1e05      	subs	r5, r0, #0
 801726c:	d112      	bne.n	8017294 <__mdiff+0x3c>
 801726e:	4629      	mov	r1, r5
 8017270:	4630      	mov	r0, r6
 8017272:	f7ff fd11 	bl	8016c98 <_Balloc>
 8017276:	4602      	mov	r2, r0
 8017278:	b928      	cbnz	r0, 8017286 <__mdiff+0x2e>
 801727a:	4b3f      	ldr	r3, [pc, #252]	@ (8017378 <__mdiff+0x120>)
 801727c:	f240 2137 	movw	r1, #567	@ 0x237
 8017280:	483e      	ldr	r0, [pc, #248]	@ (801737c <__mdiff+0x124>)
 8017282:	f000 fd69 	bl	8017d58 <__assert_func>
 8017286:	2301      	movs	r3, #1
 8017288:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801728c:	4610      	mov	r0, r2
 801728e:	b003      	add	sp, #12
 8017290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017294:	bfbc      	itt	lt
 8017296:	464b      	movlt	r3, r9
 8017298:	46a1      	movlt	r9, r4
 801729a:	4630      	mov	r0, r6
 801729c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80172a0:	bfba      	itte	lt
 80172a2:	461c      	movlt	r4, r3
 80172a4:	2501      	movlt	r5, #1
 80172a6:	2500      	movge	r5, #0
 80172a8:	f7ff fcf6 	bl	8016c98 <_Balloc>
 80172ac:	4602      	mov	r2, r0
 80172ae:	b918      	cbnz	r0, 80172b8 <__mdiff+0x60>
 80172b0:	4b31      	ldr	r3, [pc, #196]	@ (8017378 <__mdiff+0x120>)
 80172b2:	f240 2145 	movw	r1, #581	@ 0x245
 80172b6:	e7e3      	b.n	8017280 <__mdiff+0x28>
 80172b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80172bc:	6926      	ldr	r6, [r4, #16]
 80172be:	60c5      	str	r5, [r0, #12]
 80172c0:	f109 0310 	add.w	r3, r9, #16
 80172c4:	f109 0514 	add.w	r5, r9, #20
 80172c8:	f104 0e14 	add.w	lr, r4, #20
 80172cc:	f100 0b14 	add.w	fp, r0, #20
 80172d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80172d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80172d8:	9301      	str	r3, [sp, #4]
 80172da:	46d9      	mov	r9, fp
 80172dc:	f04f 0c00 	mov.w	ip, #0
 80172e0:	9b01      	ldr	r3, [sp, #4]
 80172e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80172e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80172ea:	9301      	str	r3, [sp, #4]
 80172ec:	fa1f f38a 	uxth.w	r3, sl
 80172f0:	4619      	mov	r1, r3
 80172f2:	b283      	uxth	r3, r0
 80172f4:	1acb      	subs	r3, r1, r3
 80172f6:	0c00      	lsrs	r0, r0, #16
 80172f8:	4463      	add	r3, ip
 80172fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80172fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8017302:	b29b      	uxth	r3, r3
 8017304:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8017308:	4576      	cmp	r6, lr
 801730a:	f849 3b04 	str.w	r3, [r9], #4
 801730e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017312:	d8e5      	bhi.n	80172e0 <__mdiff+0x88>
 8017314:	1b33      	subs	r3, r6, r4
 8017316:	3b15      	subs	r3, #21
 8017318:	f023 0303 	bic.w	r3, r3, #3
 801731c:	3415      	adds	r4, #21
 801731e:	3304      	adds	r3, #4
 8017320:	42a6      	cmp	r6, r4
 8017322:	bf38      	it	cc
 8017324:	2304      	movcc	r3, #4
 8017326:	441d      	add	r5, r3
 8017328:	445b      	add	r3, fp
 801732a:	461e      	mov	r6, r3
 801732c:	462c      	mov	r4, r5
 801732e:	4544      	cmp	r4, r8
 8017330:	d30e      	bcc.n	8017350 <__mdiff+0xf8>
 8017332:	f108 0103 	add.w	r1, r8, #3
 8017336:	1b49      	subs	r1, r1, r5
 8017338:	f021 0103 	bic.w	r1, r1, #3
 801733c:	3d03      	subs	r5, #3
 801733e:	45a8      	cmp	r8, r5
 8017340:	bf38      	it	cc
 8017342:	2100      	movcc	r1, #0
 8017344:	440b      	add	r3, r1
 8017346:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801734a:	b191      	cbz	r1, 8017372 <__mdiff+0x11a>
 801734c:	6117      	str	r7, [r2, #16]
 801734e:	e79d      	b.n	801728c <__mdiff+0x34>
 8017350:	f854 1b04 	ldr.w	r1, [r4], #4
 8017354:	46e6      	mov	lr, ip
 8017356:	0c08      	lsrs	r0, r1, #16
 8017358:	fa1c fc81 	uxtah	ip, ip, r1
 801735c:	4471      	add	r1, lr
 801735e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017362:	b289      	uxth	r1, r1
 8017364:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8017368:	f846 1b04 	str.w	r1, [r6], #4
 801736c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017370:	e7dd      	b.n	801732e <__mdiff+0xd6>
 8017372:	3f01      	subs	r7, #1
 8017374:	e7e7      	b.n	8017346 <__mdiff+0xee>
 8017376:	bf00      	nop
 8017378:	08018f09 	.word	0x08018f09
 801737c:	08018f91 	.word	0x08018f91

08017380 <__ulp>:
 8017380:	b082      	sub	sp, #8
 8017382:	ed8d 0b00 	vstr	d0, [sp]
 8017386:	9a01      	ldr	r2, [sp, #4]
 8017388:	4b0f      	ldr	r3, [pc, #60]	@ (80173c8 <__ulp+0x48>)
 801738a:	4013      	ands	r3, r2
 801738c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8017390:	2b00      	cmp	r3, #0
 8017392:	dc08      	bgt.n	80173a6 <__ulp+0x26>
 8017394:	425b      	negs	r3, r3
 8017396:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801739a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801739e:	da04      	bge.n	80173aa <__ulp+0x2a>
 80173a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80173a4:	4113      	asrs	r3, r2
 80173a6:	2200      	movs	r2, #0
 80173a8:	e008      	b.n	80173bc <__ulp+0x3c>
 80173aa:	f1a2 0314 	sub.w	r3, r2, #20
 80173ae:	2b1e      	cmp	r3, #30
 80173b0:	bfda      	itte	le
 80173b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80173b6:	40da      	lsrle	r2, r3
 80173b8:	2201      	movgt	r2, #1
 80173ba:	2300      	movs	r3, #0
 80173bc:	4619      	mov	r1, r3
 80173be:	4610      	mov	r0, r2
 80173c0:	ec41 0b10 	vmov	d0, r0, r1
 80173c4:	b002      	add	sp, #8
 80173c6:	4770      	bx	lr
 80173c8:	7ff00000 	.word	0x7ff00000

080173cc <__b2d>:
 80173cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173d0:	6906      	ldr	r6, [r0, #16]
 80173d2:	f100 0814 	add.w	r8, r0, #20
 80173d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80173da:	1f37      	subs	r7, r6, #4
 80173dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80173e0:	4610      	mov	r0, r2
 80173e2:	f7ff fd4b 	bl	8016e7c <__hi0bits>
 80173e6:	f1c0 0320 	rsb	r3, r0, #32
 80173ea:	280a      	cmp	r0, #10
 80173ec:	600b      	str	r3, [r1, #0]
 80173ee:	491b      	ldr	r1, [pc, #108]	@ (801745c <__b2d+0x90>)
 80173f0:	dc15      	bgt.n	801741e <__b2d+0x52>
 80173f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80173f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80173fa:	45b8      	cmp	r8, r7
 80173fc:	ea43 0501 	orr.w	r5, r3, r1
 8017400:	bf34      	ite	cc
 8017402:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017406:	2300      	movcs	r3, #0
 8017408:	3015      	adds	r0, #21
 801740a:	fa02 f000 	lsl.w	r0, r2, r0
 801740e:	fa23 f30c 	lsr.w	r3, r3, ip
 8017412:	4303      	orrs	r3, r0
 8017414:	461c      	mov	r4, r3
 8017416:	ec45 4b10 	vmov	d0, r4, r5
 801741a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801741e:	45b8      	cmp	r8, r7
 8017420:	bf3a      	itte	cc
 8017422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8017426:	f1a6 0708 	subcc.w	r7, r6, #8
 801742a:	2300      	movcs	r3, #0
 801742c:	380b      	subs	r0, #11
 801742e:	d012      	beq.n	8017456 <__b2d+0x8a>
 8017430:	f1c0 0120 	rsb	r1, r0, #32
 8017434:	fa23 f401 	lsr.w	r4, r3, r1
 8017438:	4082      	lsls	r2, r0
 801743a:	4322      	orrs	r2, r4
 801743c:	4547      	cmp	r7, r8
 801743e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8017442:	bf8c      	ite	hi
 8017444:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8017448:	2200      	movls	r2, #0
 801744a:	4083      	lsls	r3, r0
 801744c:	40ca      	lsrs	r2, r1
 801744e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8017452:	4313      	orrs	r3, r2
 8017454:	e7de      	b.n	8017414 <__b2d+0x48>
 8017456:	ea42 0501 	orr.w	r5, r2, r1
 801745a:	e7db      	b.n	8017414 <__b2d+0x48>
 801745c:	3ff00000 	.word	0x3ff00000

08017460 <__d2b>:
 8017460:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017464:	460f      	mov	r7, r1
 8017466:	2101      	movs	r1, #1
 8017468:	ec59 8b10 	vmov	r8, r9, d0
 801746c:	4616      	mov	r6, r2
 801746e:	f7ff fc13 	bl	8016c98 <_Balloc>
 8017472:	4604      	mov	r4, r0
 8017474:	b930      	cbnz	r0, 8017484 <__d2b+0x24>
 8017476:	4602      	mov	r2, r0
 8017478:	4b23      	ldr	r3, [pc, #140]	@ (8017508 <__d2b+0xa8>)
 801747a:	4824      	ldr	r0, [pc, #144]	@ (801750c <__d2b+0xac>)
 801747c:	f240 310f 	movw	r1, #783	@ 0x30f
 8017480:	f000 fc6a 	bl	8017d58 <__assert_func>
 8017484:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017488:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801748c:	b10d      	cbz	r5, 8017492 <__d2b+0x32>
 801748e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017492:	9301      	str	r3, [sp, #4]
 8017494:	f1b8 0300 	subs.w	r3, r8, #0
 8017498:	d023      	beq.n	80174e2 <__d2b+0x82>
 801749a:	4668      	mov	r0, sp
 801749c:	9300      	str	r3, [sp, #0]
 801749e:	f7ff fd0c 	bl	8016eba <__lo0bits>
 80174a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80174a6:	b1d0      	cbz	r0, 80174de <__d2b+0x7e>
 80174a8:	f1c0 0320 	rsb	r3, r0, #32
 80174ac:	fa02 f303 	lsl.w	r3, r2, r3
 80174b0:	430b      	orrs	r3, r1
 80174b2:	40c2      	lsrs	r2, r0
 80174b4:	6163      	str	r3, [r4, #20]
 80174b6:	9201      	str	r2, [sp, #4]
 80174b8:	9b01      	ldr	r3, [sp, #4]
 80174ba:	61a3      	str	r3, [r4, #24]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	bf0c      	ite	eq
 80174c0:	2201      	moveq	r2, #1
 80174c2:	2202      	movne	r2, #2
 80174c4:	6122      	str	r2, [r4, #16]
 80174c6:	b1a5      	cbz	r5, 80174f2 <__d2b+0x92>
 80174c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80174cc:	4405      	add	r5, r0
 80174ce:	603d      	str	r5, [r7, #0]
 80174d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80174d4:	6030      	str	r0, [r6, #0]
 80174d6:	4620      	mov	r0, r4
 80174d8:	b003      	add	sp, #12
 80174da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80174de:	6161      	str	r1, [r4, #20]
 80174e0:	e7ea      	b.n	80174b8 <__d2b+0x58>
 80174e2:	a801      	add	r0, sp, #4
 80174e4:	f7ff fce9 	bl	8016eba <__lo0bits>
 80174e8:	9b01      	ldr	r3, [sp, #4]
 80174ea:	6163      	str	r3, [r4, #20]
 80174ec:	3020      	adds	r0, #32
 80174ee:	2201      	movs	r2, #1
 80174f0:	e7e8      	b.n	80174c4 <__d2b+0x64>
 80174f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80174f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80174fa:	6038      	str	r0, [r7, #0]
 80174fc:	6918      	ldr	r0, [r3, #16]
 80174fe:	f7ff fcbd 	bl	8016e7c <__hi0bits>
 8017502:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017506:	e7e5      	b.n	80174d4 <__d2b+0x74>
 8017508:	08018f09 	.word	0x08018f09
 801750c:	08018f91 	.word	0x08018f91

08017510 <__ratio>:
 8017510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017514:	b085      	sub	sp, #20
 8017516:	e9cd 1000 	strd	r1, r0, [sp]
 801751a:	a902      	add	r1, sp, #8
 801751c:	f7ff ff56 	bl	80173cc <__b2d>
 8017520:	9800      	ldr	r0, [sp, #0]
 8017522:	a903      	add	r1, sp, #12
 8017524:	ec55 4b10 	vmov	r4, r5, d0
 8017528:	f7ff ff50 	bl	80173cc <__b2d>
 801752c:	9b01      	ldr	r3, [sp, #4]
 801752e:	6919      	ldr	r1, [r3, #16]
 8017530:	9b00      	ldr	r3, [sp, #0]
 8017532:	691b      	ldr	r3, [r3, #16]
 8017534:	1ac9      	subs	r1, r1, r3
 8017536:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801753a:	1a9b      	subs	r3, r3, r2
 801753c:	ec5b ab10 	vmov	sl, fp, d0
 8017540:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8017544:	2b00      	cmp	r3, #0
 8017546:	bfce      	itee	gt
 8017548:	462a      	movgt	r2, r5
 801754a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801754e:	465a      	movle	r2, fp
 8017550:	462f      	mov	r7, r5
 8017552:	46d9      	mov	r9, fp
 8017554:	bfcc      	ite	gt
 8017556:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801755a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801755e:	464b      	mov	r3, r9
 8017560:	4652      	mov	r2, sl
 8017562:	4620      	mov	r0, r4
 8017564:	4639      	mov	r1, r7
 8017566:	f7e9 f991 	bl	800088c <__aeabi_ddiv>
 801756a:	ec41 0b10 	vmov	d0, r0, r1
 801756e:	b005      	add	sp, #20
 8017570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017574 <__copybits>:
 8017574:	3901      	subs	r1, #1
 8017576:	b570      	push	{r4, r5, r6, lr}
 8017578:	1149      	asrs	r1, r1, #5
 801757a:	6914      	ldr	r4, [r2, #16]
 801757c:	3101      	adds	r1, #1
 801757e:	f102 0314 	add.w	r3, r2, #20
 8017582:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017586:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801758a:	1f05      	subs	r5, r0, #4
 801758c:	42a3      	cmp	r3, r4
 801758e:	d30c      	bcc.n	80175aa <__copybits+0x36>
 8017590:	1aa3      	subs	r3, r4, r2
 8017592:	3b11      	subs	r3, #17
 8017594:	f023 0303 	bic.w	r3, r3, #3
 8017598:	3211      	adds	r2, #17
 801759a:	42a2      	cmp	r2, r4
 801759c:	bf88      	it	hi
 801759e:	2300      	movhi	r3, #0
 80175a0:	4418      	add	r0, r3
 80175a2:	2300      	movs	r3, #0
 80175a4:	4288      	cmp	r0, r1
 80175a6:	d305      	bcc.n	80175b4 <__copybits+0x40>
 80175a8:	bd70      	pop	{r4, r5, r6, pc}
 80175aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80175ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80175b2:	e7eb      	b.n	801758c <__copybits+0x18>
 80175b4:	f840 3b04 	str.w	r3, [r0], #4
 80175b8:	e7f4      	b.n	80175a4 <__copybits+0x30>

080175ba <__any_on>:
 80175ba:	f100 0214 	add.w	r2, r0, #20
 80175be:	6900      	ldr	r0, [r0, #16]
 80175c0:	114b      	asrs	r3, r1, #5
 80175c2:	4298      	cmp	r0, r3
 80175c4:	b510      	push	{r4, lr}
 80175c6:	db11      	blt.n	80175ec <__any_on+0x32>
 80175c8:	dd0a      	ble.n	80175e0 <__any_on+0x26>
 80175ca:	f011 011f 	ands.w	r1, r1, #31
 80175ce:	d007      	beq.n	80175e0 <__any_on+0x26>
 80175d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80175d4:	fa24 f001 	lsr.w	r0, r4, r1
 80175d8:	fa00 f101 	lsl.w	r1, r0, r1
 80175dc:	428c      	cmp	r4, r1
 80175de:	d10b      	bne.n	80175f8 <__any_on+0x3e>
 80175e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80175e4:	4293      	cmp	r3, r2
 80175e6:	d803      	bhi.n	80175f0 <__any_on+0x36>
 80175e8:	2000      	movs	r0, #0
 80175ea:	bd10      	pop	{r4, pc}
 80175ec:	4603      	mov	r3, r0
 80175ee:	e7f7      	b.n	80175e0 <__any_on+0x26>
 80175f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80175f4:	2900      	cmp	r1, #0
 80175f6:	d0f5      	beq.n	80175e4 <__any_on+0x2a>
 80175f8:	2001      	movs	r0, #1
 80175fa:	e7f6      	b.n	80175ea <__any_on+0x30>

080175fc <__ascii_wctomb>:
 80175fc:	4603      	mov	r3, r0
 80175fe:	4608      	mov	r0, r1
 8017600:	b141      	cbz	r1, 8017614 <__ascii_wctomb+0x18>
 8017602:	2aff      	cmp	r2, #255	@ 0xff
 8017604:	d904      	bls.n	8017610 <__ascii_wctomb+0x14>
 8017606:	228a      	movs	r2, #138	@ 0x8a
 8017608:	601a      	str	r2, [r3, #0]
 801760a:	f04f 30ff 	mov.w	r0, #4294967295
 801760e:	4770      	bx	lr
 8017610:	700a      	strb	r2, [r1, #0]
 8017612:	2001      	movs	r0, #1
 8017614:	4770      	bx	lr

08017616 <__ssputs_r>:
 8017616:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801761a:	688e      	ldr	r6, [r1, #8]
 801761c:	461f      	mov	r7, r3
 801761e:	42be      	cmp	r6, r7
 8017620:	680b      	ldr	r3, [r1, #0]
 8017622:	4682      	mov	sl, r0
 8017624:	460c      	mov	r4, r1
 8017626:	4690      	mov	r8, r2
 8017628:	d82d      	bhi.n	8017686 <__ssputs_r+0x70>
 801762a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801762e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017632:	d026      	beq.n	8017682 <__ssputs_r+0x6c>
 8017634:	6965      	ldr	r5, [r4, #20]
 8017636:	6909      	ldr	r1, [r1, #16]
 8017638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801763c:	eba3 0901 	sub.w	r9, r3, r1
 8017640:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017644:	1c7b      	adds	r3, r7, #1
 8017646:	444b      	add	r3, r9
 8017648:	106d      	asrs	r5, r5, #1
 801764a:	429d      	cmp	r5, r3
 801764c:	bf38      	it	cc
 801764e:	461d      	movcc	r5, r3
 8017650:	0553      	lsls	r3, r2, #21
 8017652:	d527      	bpl.n	80176a4 <__ssputs_r+0x8e>
 8017654:	4629      	mov	r1, r5
 8017656:	f7ff fa81 	bl	8016b5c <_malloc_r>
 801765a:	4606      	mov	r6, r0
 801765c:	b360      	cbz	r0, 80176b8 <__ssputs_r+0xa2>
 801765e:	6921      	ldr	r1, [r4, #16]
 8017660:	464a      	mov	r2, r9
 8017662:	f7fe febc 	bl	80163de <memcpy>
 8017666:	89a3      	ldrh	r3, [r4, #12]
 8017668:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801766c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017670:	81a3      	strh	r3, [r4, #12]
 8017672:	6126      	str	r6, [r4, #16]
 8017674:	6165      	str	r5, [r4, #20]
 8017676:	444e      	add	r6, r9
 8017678:	eba5 0509 	sub.w	r5, r5, r9
 801767c:	6026      	str	r6, [r4, #0]
 801767e:	60a5      	str	r5, [r4, #8]
 8017680:	463e      	mov	r6, r7
 8017682:	42be      	cmp	r6, r7
 8017684:	d900      	bls.n	8017688 <__ssputs_r+0x72>
 8017686:	463e      	mov	r6, r7
 8017688:	6820      	ldr	r0, [r4, #0]
 801768a:	4632      	mov	r2, r6
 801768c:	4641      	mov	r1, r8
 801768e:	f7fe fdb0 	bl	80161f2 <memmove>
 8017692:	68a3      	ldr	r3, [r4, #8]
 8017694:	1b9b      	subs	r3, r3, r6
 8017696:	60a3      	str	r3, [r4, #8]
 8017698:	6823      	ldr	r3, [r4, #0]
 801769a:	4433      	add	r3, r6
 801769c:	6023      	str	r3, [r4, #0]
 801769e:	2000      	movs	r0, #0
 80176a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176a4:	462a      	mov	r2, r5
 80176a6:	f000 fb91 	bl	8017dcc <_realloc_r>
 80176aa:	4606      	mov	r6, r0
 80176ac:	2800      	cmp	r0, #0
 80176ae:	d1e0      	bne.n	8017672 <__ssputs_r+0x5c>
 80176b0:	6921      	ldr	r1, [r4, #16]
 80176b2:	4650      	mov	r0, sl
 80176b4:	f7fe feac 	bl	8016410 <_free_r>
 80176b8:	230c      	movs	r3, #12
 80176ba:	f8ca 3000 	str.w	r3, [sl]
 80176be:	89a3      	ldrh	r3, [r4, #12]
 80176c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80176c4:	81a3      	strh	r3, [r4, #12]
 80176c6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ca:	e7e9      	b.n	80176a0 <__ssputs_r+0x8a>

080176cc <_svfiprintf_r>:
 80176cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176d0:	4698      	mov	r8, r3
 80176d2:	898b      	ldrh	r3, [r1, #12]
 80176d4:	061b      	lsls	r3, r3, #24
 80176d6:	b09d      	sub	sp, #116	@ 0x74
 80176d8:	4607      	mov	r7, r0
 80176da:	460d      	mov	r5, r1
 80176dc:	4614      	mov	r4, r2
 80176de:	d510      	bpl.n	8017702 <_svfiprintf_r+0x36>
 80176e0:	690b      	ldr	r3, [r1, #16]
 80176e2:	b973      	cbnz	r3, 8017702 <_svfiprintf_r+0x36>
 80176e4:	2140      	movs	r1, #64	@ 0x40
 80176e6:	f7ff fa39 	bl	8016b5c <_malloc_r>
 80176ea:	6028      	str	r0, [r5, #0]
 80176ec:	6128      	str	r0, [r5, #16]
 80176ee:	b930      	cbnz	r0, 80176fe <_svfiprintf_r+0x32>
 80176f0:	230c      	movs	r3, #12
 80176f2:	603b      	str	r3, [r7, #0]
 80176f4:	f04f 30ff 	mov.w	r0, #4294967295
 80176f8:	b01d      	add	sp, #116	@ 0x74
 80176fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176fe:	2340      	movs	r3, #64	@ 0x40
 8017700:	616b      	str	r3, [r5, #20]
 8017702:	2300      	movs	r3, #0
 8017704:	9309      	str	r3, [sp, #36]	@ 0x24
 8017706:	2320      	movs	r3, #32
 8017708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801770c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017710:	2330      	movs	r3, #48	@ 0x30
 8017712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80178b0 <_svfiprintf_r+0x1e4>
 8017716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801771a:	f04f 0901 	mov.w	r9, #1
 801771e:	4623      	mov	r3, r4
 8017720:	469a      	mov	sl, r3
 8017722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017726:	b10a      	cbz	r2, 801772c <_svfiprintf_r+0x60>
 8017728:	2a25      	cmp	r2, #37	@ 0x25
 801772a:	d1f9      	bne.n	8017720 <_svfiprintf_r+0x54>
 801772c:	ebba 0b04 	subs.w	fp, sl, r4
 8017730:	d00b      	beq.n	801774a <_svfiprintf_r+0x7e>
 8017732:	465b      	mov	r3, fp
 8017734:	4622      	mov	r2, r4
 8017736:	4629      	mov	r1, r5
 8017738:	4638      	mov	r0, r7
 801773a:	f7ff ff6c 	bl	8017616 <__ssputs_r>
 801773e:	3001      	adds	r0, #1
 8017740:	f000 80a7 	beq.w	8017892 <_svfiprintf_r+0x1c6>
 8017744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017746:	445a      	add	r2, fp
 8017748:	9209      	str	r2, [sp, #36]	@ 0x24
 801774a:	f89a 3000 	ldrb.w	r3, [sl]
 801774e:	2b00      	cmp	r3, #0
 8017750:	f000 809f 	beq.w	8017892 <_svfiprintf_r+0x1c6>
 8017754:	2300      	movs	r3, #0
 8017756:	f04f 32ff 	mov.w	r2, #4294967295
 801775a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801775e:	f10a 0a01 	add.w	sl, sl, #1
 8017762:	9304      	str	r3, [sp, #16]
 8017764:	9307      	str	r3, [sp, #28]
 8017766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801776a:	931a      	str	r3, [sp, #104]	@ 0x68
 801776c:	4654      	mov	r4, sl
 801776e:	2205      	movs	r2, #5
 8017770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017774:	484e      	ldr	r0, [pc, #312]	@ (80178b0 <_svfiprintf_r+0x1e4>)
 8017776:	f7e8 fd53 	bl	8000220 <memchr>
 801777a:	9a04      	ldr	r2, [sp, #16]
 801777c:	b9d8      	cbnz	r0, 80177b6 <_svfiprintf_r+0xea>
 801777e:	06d0      	lsls	r0, r2, #27
 8017780:	bf44      	itt	mi
 8017782:	2320      	movmi	r3, #32
 8017784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017788:	0711      	lsls	r1, r2, #28
 801778a:	bf44      	itt	mi
 801778c:	232b      	movmi	r3, #43	@ 0x2b
 801778e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017792:	f89a 3000 	ldrb.w	r3, [sl]
 8017796:	2b2a      	cmp	r3, #42	@ 0x2a
 8017798:	d015      	beq.n	80177c6 <_svfiprintf_r+0xfa>
 801779a:	9a07      	ldr	r2, [sp, #28]
 801779c:	4654      	mov	r4, sl
 801779e:	2000      	movs	r0, #0
 80177a0:	f04f 0c0a 	mov.w	ip, #10
 80177a4:	4621      	mov	r1, r4
 80177a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177aa:	3b30      	subs	r3, #48	@ 0x30
 80177ac:	2b09      	cmp	r3, #9
 80177ae:	d94b      	bls.n	8017848 <_svfiprintf_r+0x17c>
 80177b0:	b1b0      	cbz	r0, 80177e0 <_svfiprintf_r+0x114>
 80177b2:	9207      	str	r2, [sp, #28]
 80177b4:	e014      	b.n	80177e0 <_svfiprintf_r+0x114>
 80177b6:	eba0 0308 	sub.w	r3, r0, r8
 80177ba:	fa09 f303 	lsl.w	r3, r9, r3
 80177be:	4313      	orrs	r3, r2
 80177c0:	9304      	str	r3, [sp, #16]
 80177c2:	46a2      	mov	sl, r4
 80177c4:	e7d2      	b.n	801776c <_svfiprintf_r+0xa0>
 80177c6:	9b03      	ldr	r3, [sp, #12]
 80177c8:	1d19      	adds	r1, r3, #4
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	9103      	str	r1, [sp, #12]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	bfbb      	ittet	lt
 80177d2:	425b      	neglt	r3, r3
 80177d4:	f042 0202 	orrlt.w	r2, r2, #2
 80177d8:	9307      	strge	r3, [sp, #28]
 80177da:	9307      	strlt	r3, [sp, #28]
 80177dc:	bfb8      	it	lt
 80177de:	9204      	strlt	r2, [sp, #16]
 80177e0:	7823      	ldrb	r3, [r4, #0]
 80177e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80177e4:	d10a      	bne.n	80177fc <_svfiprintf_r+0x130>
 80177e6:	7863      	ldrb	r3, [r4, #1]
 80177e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80177ea:	d132      	bne.n	8017852 <_svfiprintf_r+0x186>
 80177ec:	9b03      	ldr	r3, [sp, #12]
 80177ee:	1d1a      	adds	r2, r3, #4
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	9203      	str	r2, [sp, #12]
 80177f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80177f8:	3402      	adds	r4, #2
 80177fa:	9305      	str	r3, [sp, #20]
 80177fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80178c0 <_svfiprintf_r+0x1f4>
 8017800:	7821      	ldrb	r1, [r4, #0]
 8017802:	2203      	movs	r2, #3
 8017804:	4650      	mov	r0, sl
 8017806:	f7e8 fd0b 	bl	8000220 <memchr>
 801780a:	b138      	cbz	r0, 801781c <_svfiprintf_r+0x150>
 801780c:	9b04      	ldr	r3, [sp, #16]
 801780e:	eba0 000a 	sub.w	r0, r0, sl
 8017812:	2240      	movs	r2, #64	@ 0x40
 8017814:	4082      	lsls	r2, r0
 8017816:	4313      	orrs	r3, r2
 8017818:	3401      	adds	r4, #1
 801781a:	9304      	str	r3, [sp, #16]
 801781c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017820:	4824      	ldr	r0, [pc, #144]	@ (80178b4 <_svfiprintf_r+0x1e8>)
 8017822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017826:	2206      	movs	r2, #6
 8017828:	f7e8 fcfa 	bl	8000220 <memchr>
 801782c:	2800      	cmp	r0, #0
 801782e:	d036      	beq.n	801789e <_svfiprintf_r+0x1d2>
 8017830:	4b21      	ldr	r3, [pc, #132]	@ (80178b8 <_svfiprintf_r+0x1ec>)
 8017832:	bb1b      	cbnz	r3, 801787c <_svfiprintf_r+0x1b0>
 8017834:	9b03      	ldr	r3, [sp, #12]
 8017836:	3307      	adds	r3, #7
 8017838:	f023 0307 	bic.w	r3, r3, #7
 801783c:	3308      	adds	r3, #8
 801783e:	9303      	str	r3, [sp, #12]
 8017840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017842:	4433      	add	r3, r6
 8017844:	9309      	str	r3, [sp, #36]	@ 0x24
 8017846:	e76a      	b.n	801771e <_svfiprintf_r+0x52>
 8017848:	fb0c 3202 	mla	r2, ip, r2, r3
 801784c:	460c      	mov	r4, r1
 801784e:	2001      	movs	r0, #1
 8017850:	e7a8      	b.n	80177a4 <_svfiprintf_r+0xd8>
 8017852:	2300      	movs	r3, #0
 8017854:	3401      	adds	r4, #1
 8017856:	9305      	str	r3, [sp, #20]
 8017858:	4619      	mov	r1, r3
 801785a:	f04f 0c0a 	mov.w	ip, #10
 801785e:	4620      	mov	r0, r4
 8017860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017864:	3a30      	subs	r2, #48	@ 0x30
 8017866:	2a09      	cmp	r2, #9
 8017868:	d903      	bls.n	8017872 <_svfiprintf_r+0x1a6>
 801786a:	2b00      	cmp	r3, #0
 801786c:	d0c6      	beq.n	80177fc <_svfiprintf_r+0x130>
 801786e:	9105      	str	r1, [sp, #20]
 8017870:	e7c4      	b.n	80177fc <_svfiprintf_r+0x130>
 8017872:	fb0c 2101 	mla	r1, ip, r1, r2
 8017876:	4604      	mov	r4, r0
 8017878:	2301      	movs	r3, #1
 801787a:	e7f0      	b.n	801785e <_svfiprintf_r+0x192>
 801787c:	ab03      	add	r3, sp, #12
 801787e:	9300      	str	r3, [sp, #0]
 8017880:	462a      	mov	r2, r5
 8017882:	4b0e      	ldr	r3, [pc, #56]	@ (80178bc <_svfiprintf_r+0x1f0>)
 8017884:	a904      	add	r1, sp, #16
 8017886:	4638      	mov	r0, r7
 8017888:	f3af 8000 	nop.w
 801788c:	1c42      	adds	r2, r0, #1
 801788e:	4606      	mov	r6, r0
 8017890:	d1d6      	bne.n	8017840 <_svfiprintf_r+0x174>
 8017892:	89ab      	ldrh	r3, [r5, #12]
 8017894:	065b      	lsls	r3, r3, #25
 8017896:	f53f af2d 	bmi.w	80176f4 <_svfiprintf_r+0x28>
 801789a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801789c:	e72c      	b.n	80176f8 <_svfiprintf_r+0x2c>
 801789e:	ab03      	add	r3, sp, #12
 80178a0:	9300      	str	r3, [sp, #0]
 80178a2:	462a      	mov	r2, r5
 80178a4:	4b05      	ldr	r3, [pc, #20]	@ (80178bc <_svfiprintf_r+0x1f0>)
 80178a6:	a904      	add	r1, sp, #16
 80178a8:	4638      	mov	r0, r7
 80178aa:	f000 f879 	bl	80179a0 <_printf_i>
 80178ae:	e7ed      	b.n	801788c <_svfiprintf_r+0x1c0>
 80178b0:	080190e8 	.word	0x080190e8
 80178b4:	080190f2 	.word	0x080190f2
 80178b8:	00000000 	.word	0x00000000
 80178bc:	08017617 	.word	0x08017617
 80178c0:	080190ee 	.word	0x080190ee

080178c4 <_printf_common>:
 80178c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178c8:	4616      	mov	r6, r2
 80178ca:	4698      	mov	r8, r3
 80178cc:	688a      	ldr	r2, [r1, #8]
 80178ce:	690b      	ldr	r3, [r1, #16]
 80178d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80178d4:	4293      	cmp	r3, r2
 80178d6:	bfb8      	it	lt
 80178d8:	4613      	movlt	r3, r2
 80178da:	6033      	str	r3, [r6, #0]
 80178dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80178e0:	4607      	mov	r7, r0
 80178e2:	460c      	mov	r4, r1
 80178e4:	b10a      	cbz	r2, 80178ea <_printf_common+0x26>
 80178e6:	3301      	adds	r3, #1
 80178e8:	6033      	str	r3, [r6, #0]
 80178ea:	6823      	ldr	r3, [r4, #0]
 80178ec:	0699      	lsls	r1, r3, #26
 80178ee:	bf42      	ittt	mi
 80178f0:	6833      	ldrmi	r3, [r6, #0]
 80178f2:	3302      	addmi	r3, #2
 80178f4:	6033      	strmi	r3, [r6, #0]
 80178f6:	6825      	ldr	r5, [r4, #0]
 80178f8:	f015 0506 	ands.w	r5, r5, #6
 80178fc:	d106      	bne.n	801790c <_printf_common+0x48>
 80178fe:	f104 0a19 	add.w	sl, r4, #25
 8017902:	68e3      	ldr	r3, [r4, #12]
 8017904:	6832      	ldr	r2, [r6, #0]
 8017906:	1a9b      	subs	r3, r3, r2
 8017908:	42ab      	cmp	r3, r5
 801790a:	dc26      	bgt.n	801795a <_printf_common+0x96>
 801790c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8017910:	6822      	ldr	r2, [r4, #0]
 8017912:	3b00      	subs	r3, #0
 8017914:	bf18      	it	ne
 8017916:	2301      	movne	r3, #1
 8017918:	0692      	lsls	r2, r2, #26
 801791a:	d42b      	bmi.n	8017974 <_printf_common+0xb0>
 801791c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8017920:	4641      	mov	r1, r8
 8017922:	4638      	mov	r0, r7
 8017924:	47c8      	blx	r9
 8017926:	3001      	adds	r0, #1
 8017928:	d01e      	beq.n	8017968 <_printf_common+0xa4>
 801792a:	6823      	ldr	r3, [r4, #0]
 801792c:	6922      	ldr	r2, [r4, #16]
 801792e:	f003 0306 	and.w	r3, r3, #6
 8017932:	2b04      	cmp	r3, #4
 8017934:	bf02      	ittt	eq
 8017936:	68e5      	ldreq	r5, [r4, #12]
 8017938:	6833      	ldreq	r3, [r6, #0]
 801793a:	1aed      	subeq	r5, r5, r3
 801793c:	68a3      	ldr	r3, [r4, #8]
 801793e:	bf0c      	ite	eq
 8017940:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017944:	2500      	movne	r5, #0
 8017946:	4293      	cmp	r3, r2
 8017948:	bfc4      	itt	gt
 801794a:	1a9b      	subgt	r3, r3, r2
 801794c:	18ed      	addgt	r5, r5, r3
 801794e:	2600      	movs	r6, #0
 8017950:	341a      	adds	r4, #26
 8017952:	42b5      	cmp	r5, r6
 8017954:	d11a      	bne.n	801798c <_printf_common+0xc8>
 8017956:	2000      	movs	r0, #0
 8017958:	e008      	b.n	801796c <_printf_common+0xa8>
 801795a:	2301      	movs	r3, #1
 801795c:	4652      	mov	r2, sl
 801795e:	4641      	mov	r1, r8
 8017960:	4638      	mov	r0, r7
 8017962:	47c8      	blx	r9
 8017964:	3001      	adds	r0, #1
 8017966:	d103      	bne.n	8017970 <_printf_common+0xac>
 8017968:	f04f 30ff 	mov.w	r0, #4294967295
 801796c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017970:	3501      	adds	r5, #1
 8017972:	e7c6      	b.n	8017902 <_printf_common+0x3e>
 8017974:	18e1      	adds	r1, r4, r3
 8017976:	1c5a      	adds	r2, r3, #1
 8017978:	2030      	movs	r0, #48	@ 0x30
 801797a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801797e:	4422      	add	r2, r4
 8017980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017988:	3302      	adds	r3, #2
 801798a:	e7c7      	b.n	801791c <_printf_common+0x58>
 801798c:	2301      	movs	r3, #1
 801798e:	4622      	mov	r2, r4
 8017990:	4641      	mov	r1, r8
 8017992:	4638      	mov	r0, r7
 8017994:	47c8      	blx	r9
 8017996:	3001      	adds	r0, #1
 8017998:	d0e6      	beq.n	8017968 <_printf_common+0xa4>
 801799a:	3601      	adds	r6, #1
 801799c:	e7d9      	b.n	8017952 <_printf_common+0x8e>
	...

080179a0 <_printf_i>:
 80179a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179a4:	7e0f      	ldrb	r7, [r1, #24]
 80179a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80179a8:	2f78      	cmp	r7, #120	@ 0x78
 80179aa:	4691      	mov	r9, r2
 80179ac:	4680      	mov	r8, r0
 80179ae:	460c      	mov	r4, r1
 80179b0:	469a      	mov	sl, r3
 80179b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80179b6:	d807      	bhi.n	80179c8 <_printf_i+0x28>
 80179b8:	2f62      	cmp	r7, #98	@ 0x62
 80179ba:	d80a      	bhi.n	80179d2 <_printf_i+0x32>
 80179bc:	2f00      	cmp	r7, #0
 80179be:	f000 80d2 	beq.w	8017b66 <_printf_i+0x1c6>
 80179c2:	2f58      	cmp	r7, #88	@ 0x58
 80179c4:	f000 80b9 	beq.w	8017b3a <_printf_i+0x19a>
 80179c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80179cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80179d0:	e03a      	b.n	8017a48 <_printf_i+0xa8>
 80179d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80179d6:	2b15      	cmp	r3, #21
 80179d8:	d8f6      	bhi.n	80179c8 <_printf_i+0x28>
 80179da:	a101      	add	r1, pc, #4	@ (adr r1, 80179e0 <_printf_i+0x40>)
 80179dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80179e0:	08017a39 	.word	0x08017a39
 80179e4:	08017a4d 	.word	0x08017a4d
 80179e8:	080179c9 	.word	0x080179c9
 80179ec:	080179c9 	.word	0x080179c9
 80179f0:	080179c9 	.word	0x080179c9
 80179f4:	080179c9 	.word	0x080179c9
 80179f8:	08017a4d 	.word	0x08017a4d
 80179fc:	080179c9 	.word	0x080179c9
 8017a00:	080179c9 	.word	0x080179c9
 8017a04:	080179c9 	.word	0x080179c9
 8017a08:	080179c9 	.word	0x080179c9
 8017a0c:	08017b4d 	.word	0x08017b4d
 8017a10:	08017a77 	.word	0x08017a77
 8017a14:	08017b07 	.word	0x08017b07
 8017a18:	080179c9 	.word	0x080179c9
 8017a1c:	080179c9 	.word	0x080179c9
 8017a20:	08017b6f 	.word	0x08017b6f
 8017a24:	080179c9 	.word	0x080179c9
 8017a28:	08017a77 	.word	0x08017a77
 8017a2c:	080179c9 	.word	0x080179c9
 8017a30:	080179c9 	.word	0x080179c9
 8017a34:	08017b0f 	.word	0x08017b0f
 8017a38:	6833      	ldr	r3, [r6, #0]
 8017a3a:	1d1a      	adds	r2, r3, #4
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	6032      	str	r2, [r6, #0]
 8017a40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017a44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017a48:	2301      	movs	r3, #1
 8017a4a:	e09d      	b.n	8017b88 <_printf_i+0x1e8>
 8017a4c:	6833      	ldr	r3, [r6, #0]
 8017a4e:	6820      	ldr	r0, [r4, #0]
 8017a50:	1d19      	adds	r1, r3, #4
 8017a52:	6031      	str	r1, [r6, #0]
 8017a54:	0606      	lsls	r6, r0, #24
 8017a56:	d501      	bpl.n	8017a5c <_printf_i+0xbc>
 8017a58:	681d      	ldr	r5, [r3, #0]
 8017a5a:	e003      	b.n	8017a64 <_printf_i+0xc4>
 8017a5c:	0645      	lsls	r5, r0, #25
 8017a5e:	d5fb      	bpl.n	8017a58 <_printf_i+0xb8>
 8017a60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017a64:	2d00      	cmp	r5, #0
 8017a66:	da03      	bge.n	8017a70 <_printf_i+0xd0>
 8017a68:	232d      	movs	r3, #45	@ 0x2d
 8017a6a:	426d      	negs	r5, r5
 8017a6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a70:	4859      	ldr	r0, [pc, #356]	@ (8017bd8 <_printf_i+0x238>)
 8017a72:	230a      	movs	r3, #10
 8017a74:	e011      	b.n	8017a9a <_printf_i+0xfa>
 8017a76:	6821      	ldr	r1, [r4, #0]
 8017a78:	6833      	ldr	r3, [r6, #0]
 8017a7a:	0608      	lsls	r0, r1, #24
 8017a7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017a80:	d402      	bmi.n	8017a88 <_printf_i+0xe8>
 8017a82:	0649      	lsls	r1, r1, #25
 8017a84:	bf48      	it	mi
 8017a86:	b2ad      	uxthmi	r5, r5
 8017a88:	2f6f      	cmp	r7, #111	@ 0x6f
 8017a8a:	4853      	ldr	r0, [pc, #332]	@ (8017bd8 <_printf_i+0x238>)
 8017a8c:	6033      	str	r3, [r6, #0]
 8017a8e:	bf14      	ite	ne
 8017a90:	230a      	movne	r3, #10
 8017a92:	2308      	moveq	r3, #8
 8017a94:	2100      	movs	r1, #0
 8017a96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017a9a:	6866      	ldr	r6, [r4, #4]
 8017a9c:	60a6      	str	r6, [r4, #8]
 8017a9e:	2e00      	cmp	r6, #0
 8017aa0:	bfa2      	ittt	ge
 8017aa2:	6821      	ldrge	r1, [r4, #0]
 8017aa4:	f021 0104 	bicge.w	r1, r1, #4
 8017aa8:	6021      	strge	r1, [r4, #0]
 8017aaa:	b90d      	cbnz	r5, 8017ab0 <_printf_i+0x110>
 8017aac:	2e00      	cmp	r6, #0
 8017aae:	d04b      	beq.n	8017b48 <_printf_i+0x1a8>
 8017ab0:	4616      	mov	r6, r2
 8017ab2:	fbb5 f1f3 	udiv	r1, r5, r3
 8017ab6:	fb03 5711 	mls	r7, r3, r1, r5
 8017aba:	5dc7      	ldrb	r7, [r0, r7]
 8017abc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017ac0:	462f      	mov	r7, r5
 8017ac2:	42bb      	cmp	r3, r7
 8017ac4:	460d      	mov	r5, r1
 8017ac6:	d9f4      	bls.n	8017ab2 <_printf_i+0x112>
 8017ac8:	2b08      	cmp	r3, #8
 8017aca:	d10b      	bne.n	8017ae4 <_printf_i+0x144>
 8017acc:	6823      	ldr	r3, [r4, #0]
 8017ace:	07df      	lsls	r7, r3, #31
 8017ad0:	d508      	bpl.n	8017ae4 <_printf_i+0x144>
 8017ad2:	6923      	ldr	r3, [r4, #16]
 8017ad4:	6861      	ldr	r1, [r4, #4]
 8017ad6:	4299      	cmp	r1, r3
 8017ad8:	bfde      	ittt	le
 8017ada:	2330      	movle	r3, #48	@ 0x30
 8017adc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017ae0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017ae4:	1b92      	subs	r2, r2, r6
 8017ae6:	6122      	str	r2, [r4, #16]
 8017ae8:	f8cd a000 	str.w	sl, [sp]
 8017aec:	464b      	mov	r3, r9
 8017aee:	aa03      	add	r2, sp, #12
 8017af0:	4621      	mov	r1, r4
 8017af2:	4640      	mov	r0, r8
 8017af4:	f7ff fee6 	bl	80178c4 <_printf_common>
 8017af8:	3001      	adds	r0, #1
 8017afa:	d14a      	bne.n	8017b92 <_printf_i+0x1f2>
 8017afc:	f04f 30ff 	mov.w	r0, #4294967295
 8017b00:	b004      	add	sp, #16
 8017b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	f043 0320 	orr.w	r3, r3, #32
 8017b0c:	6023      	str	r3, [r4, #0]
 8017b0e:	4833      	ldr	r0, [pc, #204]	@ (8017bdc <_printf_i+0x23c>)
 8017b10:	2778      	movs	r7, #120	@ 0x78
 8017b12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017b16:	6823      	ldr	r3, [r4, #0]
 8017b18:	6831      	ldr	r1, [r6, #0]
 8017b1a:	061f      	lsls	r7, r3, #24
 8017b1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8017b20:	d402      	bmi.n	8017b28 <_printf_i+0x188>
 8017b22:	065f      	lsls	r7, r3, #25
 8017b24:	bf48      	it	mi
 8017b26:	b2ad      	uxthmi	r5, r5
 8017b28:	6031      	str	r1, [r6, #0]
 8017b2a:	07d9      	lsls	r1, r3, #31
 8017b2c:	bf44      	itt	mi
 8017b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8017b32:	6023      	strmi	r3, [r4, #0]
 8017b34:	b11d      	cbz	r5, 8017b3e <_printf_i+0x19e>
 8017b36:	2310      	movs	r3, #16
 8017b38:	e7ac      	b.n	8017a94 <_printf_i+0xf4>
 8017b3a:	4827      	ldr	r0, [pc, #156]	@ (8017bd8 <_printf_i+0x238>)
 8017b3c:	e7e9      	b.n	8017b12 <_printf_i+0x172>
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	f023 0320 	bic.w	r3, r3, #32
 8017b44:	6023      	str	r3, [r4, #0]
 8017b46:	e7f6      	b.n	8017b36 <_printf_i+0x196>
 8017b48:	4616      	mov	r6, r2
 8017b4a:	e7bd      	b.n	8017ac8 <_printf_i+0x128>
 8017b4c:	6833      	ldr	r3, [r6, #0]
 8017b4e:	6825      	ldr	r5, [r4, #0]
 8017b50:	6961      	ldr	r1, [r4, #20]
 8017b52:	1d18      	adds	r0, r3, #4
 8017b54:	6030      	str	r0, [r6, #0]
 8017b56:	062e      	lsls	r6, r5, #24
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	d501      	bpl.n	8017b60 <_printf_i+0x1c0>
 8017b5c:	6019      	str	r1, [r3, #0]
 8017b5e:	e002      	b.n	8017b66 <_printf_i+0x1c6>
 8017b60:	0668      	lsls	r0, r5, #25
 8017b62:	d5fb      	bpl.n	8017b5c <_printf_i+0x1bc>
 8017b64:	8019      	strh	r1, [r3, #0]
 8017b66:	2300      	movs	r3, #0
 8017b68:	6123      	str	r3, [r4, #16]
 8017b6a:	4616      	mov	r6, r2
 8017b6c:	e7bc      	b.n	8017ae8 <_printf_i+0x148>
 8017b6e:	6833      	ldr	r3, [r6, #0]
 8017b70:	1d1a      	adds	r2, r3, #4
 8017b72:	6032      	str	r2, [r6, #0]
 8017b74:	681e      	ldr	r6, [r3, #0]
 8017b76:	6862      	ldr	r2, [r4, #4]
 8017b78:	2100      	movs	r1, #0
 8017b7a:	4630      	mov	r0, r6
 8017b7c:	f7e8 fb50 	bl	8000220 <memchr>
 8017b80:	b108      	cbz	r0, 8017b86 <_printf_i+0x1e6>
 8017b82:	1b80      	subs	r0, r0, r6
 8017b84:	6060      	str	r0, [r4, #4]
 8017b86:	6863      	ldr	r3, [r4, #4]
 8017b88:	6123      	str	r3, [r4, #16]
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017b90:	e7aa      	b.n	8017ae8 <_printf_i+0x148>
 8017b92:	6923      	ldr	r3, [r4, #16]
 8017b94:	4632      	mov	r2, r6
 8017b96:	4649      	mov	r1, r9
 8017b98:	4640      	mov	r0, r8
 8017b9a:	47d0      	blx	sl
 8017b9c:	3001      	adds	r0, #1
 8017b9e:	d0ad      	beq.n	8017afc <_printf_i+0x15c>
 8017ba0:	6823      	ldr	r3, [r4, #0]
 8017ba2:	079b      	lsls	r3, r3, #30
 8017ba4:	d413      	bmi.n	8017bce <_printf_i+0x22e>
 8017ba6:	68e0      	ldr	r0, [r4, #12]
 8017ba8:	9b03      	ldr	r3, [sp, #12]
 8017baa:	4298      	cmp	r0, r3
 8017bac:	bfb8      	it	lt
 8017bae:	4618      	movlt	r0, r3
 8017bb0:	e7a6      	b.n	8017b00 <_printf_i+0x160>
 8017bb2:	2301      	movs	r3, #1
 8017bb4:	4632      	mov	r2, r6
 8017bb6:	4649      	mov	r1, r9
 8017bb8:	4640      	mov	r0, r8
 8017bba:	47d0      	blx	sl
 8017bbc:	3001      	adds	r0, #1
 8017bbe:	d09d      	beq.n	8017afc <_printf_i+0x15c>
 8017bc0:	3501      	adds	r5, #1
 8017bc2:	68e3      	ldr	r3, [r4, #12]
 8017bc4:	9903      	ldr	r1, [sp, #12]
 8017bc6:	1a5b      	subs	r3, r3, r1
 8017bc8:	42ab      	cmp	r3, r5
 8017bca:	dcf2      	bgt.n	8017bb2 <_printf_i+0x212>
 8017bcc:	e7eb      	b.n	8017ba6 <_printf_i+0x206>
 8017bce:	2500      	movs	r5, #0
 8017bd0:	f104 0619 	add.w	r6, r4, #25
 8017bd4:	e7f5      	b.n	8017bc2 <_printf_i+0x222>
 8017bd6:	bf00      	nop
 8017bd8:	080190f9 	.word	0x080190f9
 8017bdc:	0801910a 	.word	0x0801910a

08017be0 <__sflush_r>:
 8017be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017be8:	0716      	lsls	r6, r2, #28
 8017bea:	4605      	mov	r5, r0
 8017bec:	460c      	mov	r4, r1
 8017bee:	d454      	bmi.n	8017c9a <__sflush_r+0xba>
 8017bf0:	684b      	ldr	r3, [r1, #4]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	dc02      	bgt.n	8017bfc <__sflush_r+0x1c>
 8017bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	dd48      	ble.n	8017c8e <__sflush_r+0xae>
 8017bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017bfe:	2e00      	cmp	r6, #0
 8017c00:	d045      	beq.n	8017c8e <__sflush_r+0xae>
 8017c02:	2300      	movs	r3, #0
 8017c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017c08:	682f      	ldr	r7, [r5, #0]
 8017c0a:	6a21      	ldr	r1, [r4, #32]
 8017c0c:	602b      	str	r3, [r5, #0]
 8017c0e:	d030      	beq.n	8017c72 <__sflush_r+0x92>
 8017c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017c12:	89a3      	ldrh	r3, [r4, #12]
 8017c14:	0759      	lsls	r1, r3, #29
 8017c16:	d505      	bpl.n	8017c24 <__sflush_r+0x44>
 8017c18:	6863      	ldr	r3, [r4, #4]
 8017c1a:	1ad2      	subs	r2, r2, r3
 8017c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017c1e:	b10b      	cbz	r3, 8017c24 <__sflush_r+0x44>
 8017c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017c22:	1ad2      	subs	r2, r2, r3
 8017c24:	2300      	movs	r3, #0
 8017c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017c28:	6a21      	ldr	r1, [r4, #32]
 8017c2a:	4628      	mov	r0, r5
 8017c2c:	47b0      	blx	r6
 8017c2e:	1c43      	adds	r3, r0, #1
 8017c30:	89a3      	ldrh	r3, [r4, #12]
 8017c32:	d106      	bne.n	8017c42 <__sflush_r+0x62>
 8017c34:	6829      	ldr	r1, [r5, #0]
 8017c36:	291d      	cmp	r1, #29
 8017c38:	d82b      	bhi.n	8017c92 <__sflush_r+0xb2>
 8017c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8017ce4 <__sflush_r+0x104>)
 8017c3c:	410a      	asrs	r2, r1
 8017c3e:	07d6      	lsls	r6, r2, #31
 8017c40:	d427      	bmi.n	8017c92 <__sflush_r+0xb2>
 8017c42:	2200      	movs	r2, #0
 8017c44:	6062      	str	r2, [r4, #4]
 8017c46:	04d9      	lsls	r1, r3, #19
 8017c48:	6922      	ldr	r2, [r4, #16]
 8017c4a:	6022      	str	r2, [r4, #0]
 8017c4c:	d504      	bpl.n	8017c58 <__sflush_r+0x78>
 8017c4e:	1c42      	adds	r2, r0, #1
 8017c50:	d101      	bne.n	8017c56 <__sflush_r+0x76>
 8017c52:	682b      	ldr	r3, [r5, #0]
 8017c54:	b903      	cbnz	r3, 8017c58 <__sflush_r+0x78>
 8017c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8017c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c5a:	602f      	str	r7, [r5, #0]
 8017c5c:	b1b9      	cbz	r1, 8017c8e <__sflush_r+0xae>
 8017c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017c62:	4299      	cmp	r1, r3
 8017c64:	d002      	beq.n	8017c6c <__sflush_r+0x8c>
 8017c66:	4628      	mov	r0, r5
 8017c68:	f7fe fbd2 	bl	8016410 <_free_r>
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017c70:	e00d      	b.n	8017c8e <__sflush_r+0xae>
 8017c72:	2301      	movs	r3, #1
 8017c74:	4628      	mov	r0, r5
 8017c76:	47b0      	blx	r6
 8017c78:	4602      	mov	r2, r0
 8017c7a:	1c50      	adds	r0, r2, #1
 8017c7c:	d1c9      	bne.n	8017c12 <__sflush_r+0x32>
 8017c7e:	682b      	ldr	r3, [r5, #0]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d0c6      	beq.n	8017c12 <__sflush_r+0x32>
 8017c84:	2b1d      	cmp	r3, #29
 8017c86:	d001      	beq.n	8017c8c <__sflush_r+0xac>
 8017c88:	2b16      	cmp	r3, #22
 8017c8a:	d11e      	bne.n	8017cca <__sflush_r+0xea>
 8017c8c:	602f      	str	r7, [r5, #0]
 8017c8e:	2000      	movs	r0, #0
 8017c90:	e022      	b.n	8017cd8 <__sflush_r+0xf8>
 8017c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c96:	b21b      	sxth	r3, r3
 8017c98:	e01b      	b.n	8017cd2 <__sflush_r+0xf2>
 8017c9a:	690f      	ldr	r7, [r1, #16]
 8017c9c:	2f00      	cmp	r7, #0
 8017c9e:	d0f6      	beq.n	8017c8e <__sflush_r+0xae>
 8017ca0:	0793      	lsls	r3, r2, #30
 8017ca2:	680e      	ldr	r6, [r1, #0]
 8017ca4:	bf08      	it	eq
 8017ca6:	694b      	ldreq	r3, [r1, #20]
 8017ca8:	600f      	str	r7, [r1, #0]
 8017caa:	bf18      	it	ne
 8017cac:	2300      	movne	r3, #0
 8017cae:	eba6 0807 	sub.w	r8, r6, r7
 8017cb2:	608b      	str	r3, [r1, #8]
 8017cb4:	f1b8 0f00 	cmp.w	r8, #0
 8017cb8:	dde9      	ble.n	8017c8e <__sflush_r+0xae>
 8017cba:	6a21      	ldr	r1, [r4, #32]
 8017cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017cbe:	4643      	mov	r3, r8
 8017cc0:	463a      	mov	r2, r7
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	47b0      	blx	r6
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	dc08      	bgt.n	8017cdc <__sflush_r+0xfc>
 8017cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017cd2:	81a3      	strh	r3, [r4, #12]
 8017cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017cdc:	4407      	add	r7, r0
 8017cde:	eba8 0800 	sub.w	r8, r8, r0
 8017ce2:	e7e7      	b.n	8017cb4 <__sflush_r+0xd4>
 8017ce4:	dfbffffe 	.word	0xdfbffffe

08017ce8 <_fflush_r>:
 8017ce8:	b538      	push	{r3, r4, r5, lr}
 8017cea:	690b      	ldr	r3, [r1, #16]
 8017cec:	4605      	mov	r5, r0
 8017cee:	460c      	mov	r4, r1
 8017cf0:	b913      	cbnz	r3, 8017cf8 <_fflush_r+0x10>
 8017cf2:	2500      	movs	r5, #0
 8017cf4:	4628      	mov	r0, r5
 8017cf6:	bd38      	pop	{r3, r4, r5, pc}
 8017cf8:	b118      	cbz	r0, 8017d02 <_fflush_r+0x1a>
 8017cfa:	6a03      	ldr	r3, [r0, #32]
 8017cfc:	b90b      	cbnz	r3, 8017d02 <_fflush_r+0x1a>
 8017cfe:	f7fe f9cb 	bl	8016098 <__sinit>
 8017d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d0f3      	beq.n	8017cf2 <_fflush_r+0xa>
 8017d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017d0c:	07d0      	lsls	r0, r2, #31
 8017d0e:	d404      	bmi.n	8017d1a <_fflush_r+0x32>
 8017d10:	0599      	lsls	r1, r3, #22
 8017d12:	d402      	bmi.n	8017d1a <_fflush_r+0x32>
 8017d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d16:	f7fe fb58 	bl	80163ca <__retarget_lock_acquire_recursive>
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	f7ff ff5f 	bl	8017be0 <__sflush_r>
 8017d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017d24:	07da      	lsls	r2, r3, #31
 8017d26:	4605      	mov	r5, r0
 8017d28:	d4e4      	bmi.n	8017cf4 <_fflush_r+0xc>
 8017d2a:	89a3      	ldrh	r3, [r4, #12]
 8017d2c:	059b      	lsls	r3, r3, #22
 8017d2e:	d4e1      	bmi.n	8017cf4 <_fflush_r+0xc>
 8017d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017d32:	f7fe fb4b 	bl	80163cc <__retarget_lock_release_recursive>
 8017d36:	e7dd      	b.n	8017cf4 <_fflush_r+0xc>

08017d38 <_sbrk_r>:
 8017d38:	b538      	push	{r3, r4, r5, lr}
 8017d3a:	4d06      	ldr	r5, [pc, #24]	@ (8017d54 <_sbrk_r+0x1c>)
 8017d3c:	2300      	movs	r3, #0
 8017d3e:	4604      	mov	r4, r0
 8017d40:	4608      	mov	r0, r1
 8017d42:	602b      	str	r3, [r5, #0]
 8017d44:	f7ef f80c 	bl	8006d60 <_sbrk>
 8017d48:	1c43      	adds	r3, r0, #1
 8017d4a:	d102      	bne.n	8017d52 <_sbrk_r+0x1a>
 8017d4c:	682b      	ldr	r3, [r5, #0]
 8017d4e:	b103      	cbz	r3, 8017d52 <_sbrk_r+0x1a>
 8017d50:	6023      	str	r3, [r4, #0]
 8017d52:	bd38      	pop	{r3, r4, r5, pc}
 8017d54:	2000e6b4 	.word	0x2000e6b4

08017d58 <__assert_func>:
 8017d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d5a:	4614      	mov	r4, r2
 8017d5c:	461a      	mov	r2, r3
 8017d5e:	4b09      	ldr	r3, [pc, #36]	@ (8017d84 <__assert_func+0x2c>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	4605      	mov	r5, r0
 8017d64:	68d8      	ldr	r0, [r3, #12]
 8017d66:	b954      	cbnz	r4, 8017d7e <__assert_func+0x26>
 8017d68:	4b07      	ldr	r3, [pc, #28]	@ (8017d88 <__assert_func+0x30>)
 8017d6a:	461c      	mov	r4, r3
 8017d6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d70:	9100      	str	r1, [sp, #0]
 8017d72:	462b      	mov	r3, r5
 8017d74:	4905      	ldr	r1, [pc, #20]	@ (8017d8c <__assert_func+0x34>)
 8017d76:	f000 f857 	bl	8017e28 <fiprintf>
 8017d7a:	f000 f867 	bl	8017e4c <abort>
 8017d7e:	4b04      	ldr	r3, [pc, #16]	@ (8017d90 <__assert_func+0x38>)
 8017d80:	e7f4      	b.n	8017d6c <__assert_func+0x14>
 8017d82:	bf00      	nop
 8017d84:	200001f4 	.word	0x200001f4
 8017d88:	08019156 	.word	0x08019156
 8017d8c:	08019128 	.word	0x08019128
 8017d90:	0801911b 	.word	0x0801911b

08017d94 <_calloc_r>:
 8017d94:	b570      	push	{r4, r5, r6, lr}
 8017d96:	fba1 5402 	umull	r5, r4, r1, r2
 8017d9a:	b93c      	cbnz	r4, 8017dac <_calloc_r+0x18>
 8017d9c:	4629      	mov	r1, r5
 8017d9e:	f7fe fedd 	bl	8016b5c <_malloc_r>
 8017da2:	4606      	mov	r6, r0
 8017da4:	b928      	cbnz	r0, 8017db2 <_calloc_r+0x1e>
 8017da6:	2600      	movs	r6, #0
 8017da8:	4630      	mov	r0, r6
 8017daa:	bd70      	pop	{r4, r5, r6, pc}
 8017dac:	220c      	movs	r2, #12
 8017dae:	6002      	str	r2, [r0, #0]
 8017db0:	e7f9      	b.n	8017da6 <_calloc_r+0x12>
 8017db2:	462a      	mov	r2, r5
 8017db4:	4621      	mov	r1, r4
 8017db6:	f7fe fa36 	bl	8016226 <memset>
 8017dba:	e7f5      	b.n	8017da8 <_calloc_r+0x14>

08017dbc <malloc>:
 8017dbc:	4b02      	ldr	r3, [pc, #8]	@ (8017dc8 <malloc+0xc>)
 8017dbe:	4601      	mov	r1, r0
 8017dc0:	6818      	ldr	r0, [r3, #0]
 8017dc2:	f7fe becb 	b.w	8016b5c <_malloc_r>
 8017dc6:	bf00      	nop
 8017dc8:	200001f4 	.word	0x200001f4

08017dcc <_realloc_r>:
 8017dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dd0:	4680      	mov	r8, r0
 8017dd2:	4615      	mov	r5, r2
 8017dd4:	460c      	mov	r4, r1
 8017dd6:	b921      	cbnz	r1, 8017de2 <_realloc_r+0x16>
 8017dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ddc:	4611      	mov	r1, r2
 8017dde:	f7fe bebd 	b.w	8016b5c <_malloc_r>
 8017de2:	b92a      	cbnz	r2, 8017df0 <_realloc_r+0x24>
 8017de4:	f7fe fb14 	bl	8016410 <_free_r>
 8017de8:	2400      	movs	r4, #0
 8017dea:	4620      	mov	r0, r4
 8017dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df0:	f000 f833 	bl	8017e5a <_malloc_usable_size_r>
 8017df4:	4285      	cmp	r5, r0
 8017df6:	4606      	mov	r6, r0
 8017df8:	d802      	bhi.n	8017e00 <_realloc_r+0x34>
 8017dfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017dfe:	d8f4      	bhi.n	8017dea <_realloc_r+0x1e>
 8017e00:	4629      	mov	r1, r5
 8017e02:	4640      	mov	r0, r8
 8017e04:	f7fe feaa 	bl	8016b5c <_malloc_r>
 8017e08:	4607      	mov	r7, r0
 8017e0a:	2800      	cmp	r0, #0
 8017e0c:	d0ec      	beq.n	8017de8 <_realloc_r+0x1c>
 8017e0e:	42b5      	cmp	r5, r6
 8017e10:	462a      	mov	r2, r5
 8017e12:	4621      	mov	r1, r4
 8017e14:	bf28      	it	cs
 8017e16:	4632      	movcs	r2, r6
 8017e18:	f7fe fae1 	bl	80163de <memcpy>
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	4640      	mov	r0, r8
 8017e20:	f7fe faf6 	bl	8016410 <_free_r>
 8017e24:	463c      	mov	r4, r7
 8017e26:	e7e0      	b.n	8017dea <_realloc_r+0x1e>

08017e28 <fiprintf>:
 8017e28:	b40e      	push	{r1, r2, r3}
 8017e2a:	b503      	push	{r0, r1, lr}
 8017e2c:	4601      	mov	r1, r0
 8017e2e:	ab03      	add	r3, sp, #12
 8017e30:	4805      	ldr	r0, [pc, #20]	@ (8017e48 <fiprintf+0x20>)
 8017e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e36:	6800      	ldr	r0, [r0, #0]
 8017e38:	9301      	str	r3, [sp, #4]
 8017e3a:	f000 f83f 	bl	8017ebc <_vfiprintf_r>
 8017e3e:	b002      	add	sp, #8
 8017e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e44:	b003      	add	sp, #12
 8017e46:	4770      	bx	lr
 8017e48:	200001f4 	.word	0x200001f4

08017e4c <abort>:
 8017e4c:	b508      	push	{r3, lr}
 8017e4e:	2006      	movs	r0, #6
 8017e50:	f000 fa08 	bl	8018264 <raise>
 8017e54:	2001      	movs	r0, #1
 8017e56:	f7ee ff0b 	bl	8006c70 <_exit>

08017e5a <_malloc_usable_size_r>:
 8017e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e5e:	1f18      	subs	r0, r3, #4
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	bfbc      	itt	lt
 8017e64:	580b      	ldrlt	r3, [r1, r0]
 8017e66:	18c0      	addlt	r0, r0, r3
 8017e68:	4770      	bx	lr

08017e6a <__sfputc_r>:
 8017e6a:	6893      	ldr	r3, [r2, #8]
 8017e6c:	3b01      	subs	r3, #1
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	b410      	push	{r4}
 8017e72:	6093      	str	r3, [r2, #8]
 8017e74:	da08      	bge.n	8017e88 <__sfputc_r+0x1e>
 8017e76:	6994      	ldr	r4, [r2, #24]
 8017e78:	42a3      	cmp	r3, r4
 8017e7a:	db01      	blt.n	8017e80 <__sfputc_r+0x16>
 8017e7c:	290a      	cmp	r1, #10
 8017e7e:	d103      	bne.n	8017e88 <__sfputc_r+0x1e>
 8017e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e84:	f000 b932 	b.w	80180ec <__swbuf_r>
 8017e88:	6813      	ldr	r3, [r2, #0]
 8017e8a:	1c58      	adds	r0, r3, #1
 8017e8c:	6010      	str	r0, [r2, #0]
 8017e8e:	7019      	strb	r1, [r3, #0]
 8017e90:	4608      	mov	r0, r1
 8017e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017e96:	4770      	bx	lr

08017e98 <__sfputs_r>:
 8017e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e9a:	4606      	mov	r6, r0
 8017e9c:	460f      	mov	r7, r1
 8017e9e:	4614      	mov	r4, r2
 8017ea0:	18d5      	adds	r5, r2, r3
 8017ea2:	42ac      	cmp	r4, r5
 8017ea4:	d101      	bne.n	8017eaa <__sfputs_r+0x12>
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	e007      	b.n	8017eba <__sfputs_r+0x22>
 8017eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017eae:	463a      	mov	r2, r7
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f7ff ffda 	bl	8017e6a <__sfputc_r>
 8017eb6:	1c43      	adds	r3, r0, #1
 8017eb8:	d1f3      	bne.n	8017ea2 <__sfputs_r+0xa>
 8017eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017ebc <_vfiprintf_r>:
 8017ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec0:	460d      	mov	r5, r1
 8017ec2:	b09d      	sub	sp, #116	@ 0x74
 8017ec4:	4614      	mov	r4, r2
 8017ec6:	4698      	mov	r8, r3
 8017ec8:	4606      	mov	r6, r0
 8017eca:	b118      	cbz	r0, 8017ed4 <_vfiprintf_r+0x18>
 8017ecc:	6a03      	ldr	r3, [r0, #32]
 8017ece:	b90b      	cbnz	r3, 8017ed4 <_vfiprintf_r+0x18>
 8017ed0:	f7fe f8e2 	bl	8016098 <__sinit>
 8017ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ed6:	07d9      	lsls	r1, r3, #31
 8017ed8:	d405      	bmi.n	8017ee6 <_vfiprintf_r+0x2a>
 8017eda:	89ab      	ldrh	r3, [r5, #12]
 8017edc:	059a      	lsls	r2, r3, #22
 8017ede:	d402      	bmi.n	8017ee6 <_vfiprintf_r+0x2a>
 8017ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017ee2:	f7fe fa72 	bl	80163ca <__retarget_lock_acquire_recursive>
 8017ee6:	89ab      	ldrh	r3, [r5, #12]
 8017ee8:	071b      	lsls	r3, r3, #28
 8017eea:	d501      	bpl.n	8017ef0 <_vfiprintf_r+0x34>
 8017eec:	692b      	ldr	r3, [r5, #16]
 8017eee:	b99b      	cbnz	r3, 8017f18 <_vfiprintf_r+0x5c>
 8017ef0:	4629      	mov	r1, r5
 8017ef2:	4630      	mov	r0, r6
 8017ef4:	f000 f938 	bl	8018168 <__swsetup_r>
 8017ef8:	b170      	cbz	r0, 8017f18 <_vfiprintf_r+0x5c>
 8017efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017efc:	07dc      	lsls	r4, r3, #31
 8017efe:	d504      	bpl.n	8017f0a <_vfiprintf_r+0x4e>
 8017f00:	f04f 30ff 	mov.w	r0, #4294967295
 8017f04:	b01d      	add	sp, #116	@ 0x74
 8017f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0a:	89ab      	ldrh	r3, [r5, #12]
 8017f0c:	0598      	lsls	r0, r3, #22
 8017f0e:	d4f7      	bmi.n	8017f00 <_vfiprintf_r+0x44>
 8017f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017f12:	f7fe fa5b 	bl	80163cc <__retarget_lock_release_recursive>
 8017f16:	e7f3      	b.n	8017f00 <_vfiprintf_r+0x44>
 8017f18:	2300      	movs	r3, #0
 8017f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f1c:	2320      	movs	r3, #32
 8017f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f26:	2330      	movs	r3, #48	@ 0x30
 8017f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80180d8 <_vfiprintf_r+0x21c>
 8017f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f30:	f04f 0901 	mov.w	r9, #1
 8017f34:	4623      	mov	r3, r4
 8017f36:	469a      	mov	sl, r3
 8017f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f3c:	b10a      	cbz	r2, 8017f42 <_vfiprintf_r+0x86>
 8017f3e:	2a25      	cmp	r2, #37	@ 0x25
 8017f40:	d1f9      	bne.n	8017f36 <_vfiprintf_r+0x7a>
 8017f42:	ebba 0b04 	subs.w	fp, sl, r4
 8017f46:	d00b      	beq.n	8017f60 <_vfiprintf_r+0xa4>
 8017f48:	465b      	mov	r3, fp
 8017f4a:	4622      	mov	r2, r4
 8017f4c:	4629      	mov	r1, r5
 8017f4e:	4630      	mov	r0, r6
 8017f50:	f7ff ffa2 	bl	8017e98 <__sfputs_r>
 8017f54:	3001      	adds	r0, #1
 8017f56:	f000 80a7 	beq.w	80180a8 <_vfiprintf_r+0x1ec>
 8017f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f5c:	445a      	add	r2, fp
 8017f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f60:	f89a 3000 	ldrb.w	r3, [sl]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	f000 809f 	beq.w	80180a8 <_vfiprintf_r+0x1ec>
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8017f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f74:	f10a 0a01 	add.w	sl, sl, #1
 8017f78:	9304      	str	r3, [sp, #16]
 8017f7a:	9307      	str	r3, [sp, #28]
 8017f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f82:	4654      	mov	r4, sl
 8017f84:	2205      	movs	r2, #5
 8017f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f8a:	4853      	ldr	r0, [pc, #332]	@ (80180d8 <_vfiprintf_r+0x21c>)
 8017f8c:	f7e8 f948 	bl	8000220 <memchr>
 8017f90:	9a04      	ldr	r2, [sp, #16]
 8017f92:	b9d8      	cbnz	r0, 8017fcc <_vfiprintf_r+0x110>
 8017f94:	06d1      	lsls	r1, r2, #27
 8017f96:	bf44      	itt	mi
 8017f98:	2320      	movmi	r3, #32
 8017f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f9e:	0713      	lsls	r3, r2, #28
 8017fa0:	bf44      	itt	mi
 8017fa2:	232b      	movmi	r3, #43	@ 0x2b
 8017fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8017fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fae:	d015      	beq.n	8017fdc <_vfiprintf_r+0x120>
 8017fb0:	9a07      	ldr	r2, [sp, #28]
 8017fb2:	4654      	mov	r4, sl
 8017fb4:	2000      	movs	r0, #0
 8017fb6:	f04f 0c0a 	mov.w	ip, #10
 8017fba:	4621      	mov	r1, r4
 8017fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fc0:	3b30      	subs	r3, #48	@ 0x30
 8017fc2:	2b09      	cmp	r3, #9
 8017fc4:	d94b      	bls.n	801805e <_vfiprintf_r+0x1a2>
 8017fc6:	b1b0      	cbz	r0, 8017ff6 <_vfiprintf_r+0x13a>
 8017fc8:	9207      	str	r2, [sp, #28]
 8017fca:	e014      	b.n	8017ff6 <_vfiprintf_r+0x13a>
 8017fcc:	eba0 0308 	sub.w	r3, r0, r8
 8017fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8017fd4:	4313      	orrs	r3, r2
 8017fd6:	9304      	str	r3, [sp, #16]
 8017fd8:	46a2      	mov	sl, r4
 8017fda:	e7d2      	b.n	8017f82 <_vfiprintf_r+0xc6>
 8017fdc:	9b03      	ldr	r3, [sp, #12]
 8017fde:	1d19      	adds	r1, r3, #4
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	9103      	str	r1, [sp, #12]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	bfbb      	ittet	lt
 8017fe8:	425b      	neglt	r3, r3
 8017fea:	f042 0202 	orrlt.w	r2, r2, #2
 8017fee:	9307      	strge	r3, [sp, #28]
 8017ff0:	9307      	strlt	r3, [sp, #28]
 8017ff2:	bfb8      	it	lt
 8017ff4:	9204      	strlt	r2, [sp, #16]
 8017ff6:	7823      	ldrb	r3, [r4, #0]
 8017ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8017ffa:	d10a      	bne.n	8018012 <_vfiprintf_r+0x156>
 8017ffc:	7863      	ldrb	r3, [r4, #1]
 8017ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8018000:	d132      	bne.n	8018068 <_vfiprintf_r+0x1ac>
 8018002:	9b03      	ldr	r3, [sp, #12]
 8018004:	1d1a      	adds	r2, r3, #4
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	9203      	str	r2, [sp, #12]
 801800a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801800e:	3402      	adds	r4, #2
 8018010:	9305      	str	r3, [sp, #20]
 8018012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80180e8 <_vfiprintf_r+0x22c>
 8018016:	7821      	ldrb	r1, [r4, #0]
 8018018:	2203      	movs	r2, #3
 801801a:	4650      	mov	r0, sl
 801801c:	f7e8 f900 	bl	8000220 <memchr>
 8018020:	b138      	cbz	r0, 8018032 <_vfiprintf_r+0x176>
 8018022:	9b04      	ldr	r3, [sp, #16]
 8018024:	eba0 000a 	sub.w	r0, r0, sl
 8018028:	2240      	movs	r2, #64	@ 0x40
 801802a:	4082      	lsls	r2, r0
 801802c:	4313      	orrs	r3, r2
 801802e:	3401      	adds	r4, #1
 8018030:	9304      	str	r3, [sp, #16]
 8018032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018036:	4829      	ldr	r0, [pc, #164]	@ (80180dc <_vfiprintf_r+0x220>)
 8018038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801803c:	2206      	movs	r2, #6
 801803e:	f7e8 f8ef 	bl	8000220 <memchr>
 8018042:	2800      	cmp	r0, #0
 8018044:	d03f      	beq.n	80180c6 <_vfiprintf_r+0x20a>
 8018046:	4b26      	ldr	r3, [pc, #152]	@ (80180e0 <_vfiprintf_r+0x224>)
 8018048:	bb1b      	cbnz	r3, 8018092 <_vfiprintf_r+0x1d6>
 801804a:	9b03      	ldr	r3, [sp, #12]
 801804c:	3307      	adds	r3, #7
 801804e:	f023 0307 	bic.w	r3, r3, #7
 8018052:	3308      	adds	r3, #8
 8018054:	9303      	str	r3, [sp, #12]
 8018056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018058:	443b      	add	r3, r7
 801805a:	9309      	str	r3, [sp, #36]	@ 0x24
 801805c:	e76a      	b.n	8017f34 <_vfiprintf_r+0x78>
 801805e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018062:	460c      	mov	r4, r1
 8018064:	2001      	movs	r0, #1
 8018066:	e7a8      	b.n	8017fba <_vfiprintf_r+0xfe>
 8018068:	2300      	movs	r3, #0
 801806a:	3401      	adds	r4, #1
 801806c:	9305      	str	r3, [sp, #20]
 801806e:	4619      	mov	r1, r3
 8018070:	f04f 0c0a 	mov.w	ip, #10
 8018074:	4620      	mov	r0, r4
 8018076:	f810 2b01 	ldrb.w	r2, [r0], #1
 801807a:	3a30      	subs	r2, #48	@ 0x30
 801807c:	2a09      	cmp	r2, #9
 801807e:	d903      	bls.n	8018088 <_vfiprintf_r+0x1cc>
 8018080:	2b00      	cmp	r3, #0
 8018082:	d0c6      	beq.n	8018012 <_vfiprintf_r+0x156>
 8018084:	9105      	str	r1, [sp, #20]
 8018086:	e7c4      	b.n	8018012 <_vfiprintf_r+0x156>
 8018088:	fb0c 2101 	mla	r1, ip, r1, r2
 801808c:	4604      	mov	r4, r0
 801808e:	2301      	movs	r3, #1
 8018090:	e7f0      	b.n	8018074 <_vfiprintf_r+0x1b8>
 8018092:	ab03      	add	r3, sp, #12
 8018094:	9300      	str	r3, [sp, #0]
 8018096:	462a      	mov	r2, r5
 8018098:	4b12      	ldr	r3, [pc, #72]	@ (80180e4 <_vfiprintf_r+0x228>)
 801809a:	a904      	add	r1, sp, #16
 801809c:	4630      	mov	r0, r6
 801809e:	f3af 8000 	nop.w
 80180a2:	4607      	mov	r7, r0
 80180a4:	1c78      	adds	r0, r7, #1
 80180a6:	d1d6      	bne.n	8018056 <_vfiprintf_r+0x19a>
 80180a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80180aa:	07d9      	lsls	r1, r3, #31
 80180ac:	d405      	bmi.n	80180ba <_vfiprintf_r+0x1fe>
 80180ae:	89ab      	ldrh	r3, [r5, #12]
 80180b0:	059a      	lsls	r2, r3, #22
 80180b2:	d402      	bmi.n	80180ba <_vfiprintf_r+0x1fe>
 80180b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80180b6:	f7fe f989 	bl	80163cc <__retarget_lock_release_recursive>
 80180ba:	89ab      	ldrh	r3, [r5, #12]
 80180bc:	065b      	lsls	r3, r3, #25
 80180be:	f53f af1f 	bmi.w	8017f00 <_vfiprintf_r+0x44>
 80180c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180c4:	e71e      	b.n	8017f04 <_vfiprintf_r+0x48>
 80180c6:	ab03      	add	r3, sp, #12
 80180c8:	9300      	str	r3, [sp, #0]
 80180ca:	462a      	mov	r2, r5
 80180cc:	4b05      	ldr	r3, [pc, #20]	@ (80180e4 <_vfiprintf_r+0x228>)
 80180ce:	a904      	add	r1, sp, #16
 80180d0:	4630      	mov	r0, r6
 80180d2:	f7ff fc65 	bl	80179a0 <_printf_i>
 80180d6:	e7e4      	b.n	80180a2 <_vfiprintf_r+0x1e6>
 80180d8:	080190e8 	.word	0x080190e8
 80180dc:	080190f2 	.word	0x080190f2
 80180e0:	00000000 	.word	0x00000000
 80180e4:	08017e99 	.word	0x08017e99
 80180e8:	080190ee 	.word	0x080190ee

080180ec <__swbuf_r>:
 80180ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180ee:	460e      	mov	r6, r1
 80180f0:	4614      	mov	r4, r2
 80180f2:	4605      	mov	r5, r0
 80180f4:	b118      	cbz	r0, 80180fe <__swbuf_r+0x12>
 80180f6:	6a03      	ldr	r3, [r0, #32]
 80180f8:	b90b      	cbnz	r3, 80180fe <__swbuf_r+0x12>
 80180fa:	f7fd ffcd 	bl	8016098 <__sinit>
 80180fe:	69a3      	ldr	r3, [r4, #24]
 8018100:	60a3      	str	r3, [r4, #8]
 8018102:	89a3      	ldrh	r3, [r4, #12]
 8018104:	071a      	lsls	r2, r3, #28
 8018106:	d501      	bpl.n	801810c <__swbuf_r+0x20>
 8018108:	6923      	ldr	r3, [r4, #16]
 801810a:	b943      	cbnz	r3, 801811e <__swbuf_r+0x32>
 801810c:	4621      	mov	r1, r4
 801810e:	4628      	mov	r0, r5
 8018110:	f000 f82a 	bl	8018168 <__swsetup_r>
 8018114:	b118      	cbz	r0, 801811e <__swbuf_r+0x32>
 8018116:	f04f 37ff 	mov.w	r7, #4294967295
 801811a:	4638      	mov	r0, r7
 801811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801811e:	6823      	ldr	r3, [r4, #0]
 8018120:	6922      	ldr	r2, [r4, #16]
 8018122:	1a98      	subs	r0, r3, r2
 8018124:	6963      	ldr	r3, [r4, #20]
 8018126:	b2f6      	uxtb	r6, r6
 8018128:	4283      	cmp	r3, r0
 801812a:	4637      	mov	r7, r6
 801812c:	dc05      	bgt.n	801813a <__swbuf_r+0x4e>
 801812e:	4621      	mov	r1, r4
 8018130:	4628      	mov	r0, r5
 8018132:	f7ff fdd9 	bl	8017ce8 <_fflush_r>
 8018136:	2800      	cmp	r0, #0
 8018138:	d1ed      	bne.n	8018116 <__swbuf_r+0x2a>
 801813a:	68a3      	ldr	r3, [r4, #8]
 801813c:	3b01      	subs	r3, #1
 801813e:	60a3      	str	r3, [r4, #8]
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	1c5a      	adds	r2, r3, #1
 8018144:	6022      	str	r2, [r4, #0]
 8018146:	701e      	strb	r6, [r3, #0]
 8018148:	6962      	ldr	r2, [r4, #20]
 801814a:	1c43      	adds	r3, r0, #1
 801814c:	429a      	cmp	r2, r3
 801814e:	d004      	beq.n	801815a <__swbuf_r+0x6e>
 8018150:	89a3      	ldrh	r3, [r4, #12]
 8018152:	07db      	lsls	r3, r3, #31
 8018154:	d5e1      	bpl.n	801811a <__swbuf_r+0x2e>
 8018156:	2e0a      	cmp	r6, #10
 8018158:	d1df      	bne.n	801811a <__swbuf_r+0x2e>
 801815a:	4621      	mov	r1, r4
 801815c:	4628      	mov	r0, r5
 801815e:	f7ff fdc3 	bl	8017ce8 <_fflush_r>
 8018162:	2800      	cmp	r0, #0
 8018164:	d0d9      	beq.n	801811a <__swbuf_r+0x2e>
 8018166:	e7d6      	b.n	8018116 <__swbuf_r+0x2a>

08018168 <__swsetup_r>:
 8018168:	b538      	push	{r3, r4, r5, lr}
 801816a:	4b29      	ldr	r3, [pc, #164]	@ (8018210 <__swsetup_r+0xa8>)
 801816c:	4605      	mov	r5, r0
 801816e:	6818      	ldr	r0, [r3, #0]
 8018170:	460c      	mov	r4, r1
 8018172:	b118      	cbz	r0, 801817c <__swsetup_r+0x14>
 8018174:	6a03      	ldr	r3, [r0, #32]
 8018176:	b90b      	cbnz	r3, 801817c <__swsetup_r+0x14>
 8018178:	f7fd ff8e 	bl	8016098 <__sinit>
 801817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018180:	0719      	lsls	r1, r3, #28
 8018182:	d422      	bmi.n	80181ca <__swsetup_r+0x62>
 8018184:	06da      	lsls	r2, r3, #27
 8018186:	d407      	bmi.n	8018198 <__swsetup_r+0x30>
 8018188:	2209      	movs	r2, #9
 801818a:	602a      	str	r2, [r5, #0]
 801818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018190:	81a3      	strh	r3, [r4, #12]
 8018192:	f04f 30ff 	mov.w	r0, #4294967295
 8018196:	e033      	b.n	8018200 <__swsetup_r+0x98>
 8018198:	0758      	lsls	r0, r3, #29
 801819a:	d512      	bpl.n	80181c2 <__swsetup_r+0x5a>
 801819c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801819e:	b141      	cbz	r1, 80181b2 <__swsetup_r+0x4a>
 80181a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80181a4:	4299      	cmp	r1, r3
 80181a6:	d002      	beq.n	80181ae <__swsetup_r+0x46>
 80181a8:	4628      	mov	r0, r5
 80181aa:	f7fe f931 	bl	8016410 <_free_r>
 80181ae:	2300      	movs	r3, #0
 80181b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80181b2:	89a3      	ldrh	r3, [r4, #12]
 80181b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80181b8:	81a3      	strh	r3, [r4, #12]
 80181ba:	2300      	movs	r3, #0
 80181bc:	6063      	str	r3, [r4, #4]
 80181be:	6923      	ldr	r3, [r4, #16]
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	89a3      	ldrh	r3, [r4, #12]
 80181c4:	f043 0308 	orr.w	r3, r3, #8
 80181c8:	81a3      	strh	r3, [r4, #12]
 80181ca:	6923      	ldr	r3, [r4, #16]
 80181cc:	b94b      	cbnz	r3, 80181e2 <__swsetup_r+0x7a>
 80181ce:	89a3      	ldrh	r3, [r4, #12]
 80181d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80181d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80181d8:	d003      	beq.n	80181e2 <__swsetup_r+0x7a>
 80181da:	4621      	mov	r1, r4
 80181dc:	4628      	mov	r0, r5
 80181de:	f000 f883 	bl	80182e8 <__smakebuf_r>
 80181e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181e6:	f013 0201 	ands.w	r2, r3, #1
 80181ea:	d00a      	beq.n	8018202 <__swsetup_r+0x9a>
 80181ec:	2200      	movs	r2, #0
 80181ee:	60a2      	str	r2, [r4, #8]
 80181f0:	6962      	ldr	r2, [r4, #20]
 80181f2:	4252      	negs	r2, r2
 80181f4:	61a2      	str	r2, [r4, #24]
 80181f6:	6922      	ldr	r2, [r4, #16]
 80181f8:	b942      	cbnz	r2, 801820c <__swsetup_r+0xa4>
 80181fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80181fe:	d1c5      	bne.n	801818c <__swsetup_r+0x24>
 8018200:	bd38      	pop	{r3, r4, r5, pc}
 8018202:	0799      	lsls	r1, r3, #30
 8018204:	bf58      	it	pl
 8018206:	6962      	ldrpl	r2, [r4, #20]
 8018208:	60a2      	str	r2, [r4, #8]
 801820a:	e7f4      	b.n	80181f6 <__swsetup_r+0x8e>
 801820c:	2000      	movs	r0, #0
 801820e:	e7f7      	b.n	8018200 <__swsetup_r+0x98>
 8018210:	200001f4 	.word	0x200001f4

08018214 <_raise_r>:
 8018214:	291f      	cmp	r1, #31
 8018216:	b538      	push	{r3, r4, r5, lr}
 8018218:	4605      	mov	r5, r0
 801821a:	460c      	mov	r4, r1
 801821c:	d904      	bls.n	8018228 <_raise_r+0x14>
 801821e:	2316      	movs	r3, #22
 8018220:	6003      	str	r3, [r0, #0]
 8018222:	f04f 30ff 	mov.w	r0, #4294967295
 8018226:	bd38      	pop	{r3, r4, r5, pc}
 8018228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801822a:	b112      	cbz	r2, 8018232 <_raise_r+0x1e>
 801822c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018230:	b94b      	cbnz	r3, 8018246 <_raise_r+0x32>
 8018232:	4628      	mov	r0, r5
 8018234:	f000 f830 	bl	8018298 <_getpid_r>
 8018238:	4622      	mov	r2, r4
 801823a:	4601      	mov	r1, r0
 801823c:	4628      	mov	r0, r5
 801823e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018242:	f000 b817 	b.w	8018274 <_kill_r>
 8018246:	2b01      	cmp	r3, #1
 8018248:	d00a      	beq.n	8018260 <_raise_r+0x4c>
 801824a:	1c59      	adds	r1, r3, #1
 801824c:	d103      	bne.n	8018256 <_raise_r+0x42>
 801824e:	2316      	movs	r3, #22
 8018250:	6003      	str	r3, [r0, #0]
 8018252:	2001      	movs	r0, #1
 8018254:	e7e7      	b.n	8018226 <_raise_r+0x12>
 8018256:	2100      	movs	r1, #0
 8018258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801825c:	4620      	mov	r0, r4
 801825e:	4798      	blx	r3
 8018260:	2000      	movs	r0, #0
 8018262:	e7e0      	b.n	8018226 <_raise_r+0x12>

08018264 <raise>:
 8018264:	4b02      	ldr	r3, [pc, #8]	@ (8018270 <raise+0xc>)
 8018266:	4601      	mov	r1, r0
 8018268:	6818      	ldr	r0, [r3, #0]
 801826a:	f7ff bfd3 	b.w	8018214 <_raise_r>
 801826e:	bf00      	nop
 8018270:	200001f4 	.word	0x200001f4

08018274 <_kill_r>:
 8018274:	b538      	push	{r3, r4, r5, lr}
 8018276:	4d07      	ldr	r5, [pc, #28]	@ (8018294 <_kill_r+0x20>)
 8018278:	2300      	movs	r3, #0
 801827a:	4604      	mov	r4, r0
 801827c:	4608      	mov	r0, r1
 801827e:	4611      	mov	r1, r2
 8018280:	602b      	str	r3, [r5, #0]
 8018282:	f7ee fce5 	bl	8006c50 <_kill>
 8018286:	1c43      	adds	r3, r0, #1
 8018288:	d102      	bne.n	8018290 <_kill_r+0x1c>
 801828a:	682b      	ldr	r3, [r5, #0]
 801828c:	b103      	cbz	r3, 8018290 <_kill_r+0x1c>
 801828e:	6023      	str	r3, [r4, #0]
 8018290:	bd38      	pop	{r3, r4, r5, pc}
 8018292:	bf00      	nop
 8018294:	2000e6b4 	.word	0x2000e6b4

08018298 <_getpid_r>:
 8018298:	f7ee bcd2 	b.w	8006c40 <_getpid>

0801829c <__swhatbuf_r>:
 801829c:	b570      	push	{r4, r5, r6, lr}
 801829e:	460c      	mov	r4, r1
 80182a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80182a4:	2900      	cmp	r1, #0
 80182a6:	b096      	sub	sp, #88	@ 0x58
 80182a8:	4615      	mov	r5, r2
 80182aa:	461e      	mov	r6, r3
 80182ac:	da0d      	bge.n	80182ca <__swhatbuf_r+0x2e>
 80182ae:	89a3      	ldrh	r3, [r4, #12]
 80182b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80182b4:	f04f 0100 	mov.w	r1, #0
 80182b8:	bf14      	ite	ne
 80182ba:	2340      	movne	r3, #64	@ 0x40
 80182bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80182c0:	2000      	movs	r0, #0
 80182c2:	6031      	str	r1, [r6, #0]
 80182c4:	602b      	str	r3, [r5, #0]
 80182c6:	b016      	add	sp, #88	@ 0x58
 80182c8:	bd70      	pop	{r4, r5, r6, pc}
 80182ca:	466a      	mov	r2, sp
 80182cc:	f000 f848 	bl	8018360 <_fstat_r>
 80182d0:	2800      	cmp	r0, #0
 80182d2:	dbec      	blt.n	80182ae <__swhatbuf_r+0x12>
 80182d4:	9901      	ldr	r1, [sp, #4]
 80182d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80182da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80182de:	4259      	negs	r1, r3
 80182e0:	4159      	adcs	r1, r3
 80182e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80182e6:	e7eb      	b.n	80182c0 <__swhatbuf_r+0x24>

080182e8 <__smakebuf_r>:
 80182e8:	898b      	ldrh	r3, [r1, #12]
 80182ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80182ec:	079d      	lsls	r5, r3, #30
 80182ee:	4606      	mov	r6, r0
 80182f0:	460c      	mov	r4, r1
 80182f2:	d507      	bpl.n	8018304 <__smakebuf_r+0x1c>
 80182f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80182f8:	6023      	str	r3, [r4, #0]
 80182fa:	6123      	str	r3, [r4, #16]
 80182fc:	2301      	movs	r3, #1
 80182fe:	6163      	str	r3, [r4, #20]
 8018300:	b003      	add	sp, #12
 8018302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018304:	ab01      	add	r3, sp, #4
 8018306:	466a      	mov	r2, sp
 8018308:	f7ff ffc8 	bl	801829c <__swhatbuf_r>
 801830c:	9f00      	ldr	r7, [sp, #0]
 801830e:	4605      	mov	r5, r0
 8018310:	4639      	mov	r1, r7
 8018312:	4630      	mov	r0, r6
 8018314:	f7fe fc22 	bl	8016b5c <_malloc_r>
 8018318:	b948      	cbnz	r0, 801832e <__smakebuf_r+0x46>
 801831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801831e:	059a      	lsls	r2, r3, #22
 8018320:	d4ee      	bmi.n	8018300 <__smakebuf_r+0x18>
 8018322:	f023 0303 	bic.w	r3, r3, #3
 8018326:	f043 0302 	orr.w	r3, r3, #2
 801832a:	81a3      	strh	r3, [r4, #12]
 801832c:	e7e2      	b.n	80182f4 <__smakebuf_r+0xc>
 801832e:	89a3      	ldrh	r3, [r4, #12]
 8018330:	6020      	str	r0, [r4, #0]
 8018332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8018336:	81a3      	strh	r3, [r4, #12]
 8018338:	9b01      	ldr	r3, [sp, #4]
 801833a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801833e:	b15b      	cbz	r3, 8018358 <__smakebuf_r+0x70>
 8018340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018344:	4630      	mov	r0, r6
 8018346:	f000 f81d 	bl	8018384 <_isatty_r>
 801834a:	b128      	cbz	r0, 8018358 <__smakebuf_r+0x70>
 801834c:	89a3      	ldrh	r3, [r4, #12]
 801834e:	f023 0303 	bic.w	r3, r3, #3
 8018352:	f043 0301 	orr.w	r3, r3, #1
 8018356:	81a3      	strh	r3, [r4, #12]
 8018358:	89a3      	ldrh	r3, [r4, #12]
 801835a:	431d      	orrs	r5, r3
 801835c:	81a5      	strh	r5, [r4, #12]
 801835e:	e7cf      	b.n	8018300 <__smakebuf_r+0x18>

08018360 <_fstat_r>:
 8018360:	b538      	push	{r3, r4, r5, lr}
 8018362:	4d07      	ldr	r5, [pc, #28]	@ (8018380 <_fstat_r+0x20>)
 8018364:	2300      	movs	r3, #0
 8018366:	4604      	mov	r4, r0
 8018368:	4608      	mov	r0, r1
 801836a:	4611      	mov	r1, r2
 801836c:	602b      	str	r3, [r5, #0]
 801836e:	f7ee fccf 	bl	8006d10 <_fstat>
 8018372:	1c43      	adds	r3, r0, #1
 8018374:	d102      	bne.n	801837c <_fstat_r+0x1c>
 8018376:	682b      	ldr	r3, [r5, #0]
 8018378:	b103      	cbz	r3, 801837c <_fstat_r+0x1c>
 801837a:	6023      	str	r3, [r4, #0]
 801837c:	bd38      	pop	{r3, r4, r5, pc}
 801837e:	bf00      	nop
 8018380:	2000e6b4 	.word	0x2000e6b4

08018384 <_isatty_r>:
 8018384:	b538      	push	{r3, r4, r5, lr}
 8018386:	4d06      	ldr	r5, [pc, #24]	@ (80183a0 <_isatty_r+0x1c>)
 8018388:	2300      	movs	r3, #0
 801838a:	4604      	mov	r4, r0
 801838c:	4608      	mov	r0, r1
 801838e:	602b      	str	r3, [r5, #0]
 8018390:	f7ee fcce 	bl	8006d30 <_isatty>
 8018394:	1c43      	adds	r3, r0, #1
 8018396:	d102      	bne.n	801839e <_isatty_r+0x1a>
 8018398:	682b      	ldr	r3, [r5, #0]
 801839a:	b103      	cbz	r3, 801839e <_isatty_r+0x1a>
 801839c:	6023      	str	r3, [r4, #0]
 801839e:	bd38      	pop	{r3, r4, r5, pc}
 80183a0:	2000e6b4 	.word	0x2000e6b4

080183a4 <fmaxf>:
 80183a4:	b508      	push	{r3, lr}
 80183a6:	ed2d 8b02 	vpush	{d8}
 80183aa:	eeb0 8a40 	vmov.f32	s16, s0
 80183ae:	eef0 8a60 	vmov.f32	s17, s1
 80183b2:	f000 f831 	bl	8018418 <__fpclassifyf>
 80183b6:	b930      	cbnz	r0, 80183c6 <fmaxf+0x22>
 80183b8:	eeb0 8a68 	vmov.f32	s16, s17
 80183bc:	eeb0 0a48 	vmov.f32	s0, s16
 80183c0:	ecbd 8b02 	vpop	{d8}
 80183c4:	bd08      	pop	{r3, pc}
 80183c6:	eeb0 0a68 	vmov.f32	s0, s17
 80183ca:	f000 f825 	bl	8018418 <__fpclassifyf>
 80183ce:	2800      	cmp	r0, #0
 80183d0:	d0f4      	beq.n	80183bc <fmaxf+0x18>
 80183d2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80183d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183da:	dded      	ble.n	80183b8 <fmaxf+0x14>
 80183dc:	e7ee      	b.n	80183bc <fmaxf+0x18>

080183de <fminf>:
 80183de:	b508      	push	{r3, lr}
 80183e0:	ed2d 8b02 	vpush	{d8}
 80183e4:	eeb0 8a40 	vmov.f32	s16, s0
 80183e8:	eef0 8a60 	vmov.f32	s17, s1
 80183ec:	f000 f814 	bl	8018418 <__fpclassifyf>
 80183f0:	b930      	cbnz	r0, 8018400 <fminf+0x22>
 80183f2:	eeb0 8a68 	vmov.f32	s16, s17
 80183f6:	eeb0 0a48 	vmov.f32	s0, s16
 80183fa:	ecbd 8b02 	vpop	{d8}
 80183fe:	bd08      	pop	{r3, pc}
 8018400:	eeb0 0a68 	vmov.f32	s0, s17
 8018404:	f000 f808 	bl	8018418 <__fpclassifyf>
 8018408:	2800      	cmp	r0, #0
 801840a:	d0f4      	beq.n	80183f6 <fminf+0x18>
 801840c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018414:	d5ed      	bpl.n	80183f2 <fminf+0x14>
 8018416:	e7ee      	b.n	80183f6 <fminf+0x18>

08018418 <__fpclassifyf>:
 8018418:	ee10 3a10 	vmov	r3, s0
 801841c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8018420:	d00d      	beq.n	801843e <__fpclassifyf+0x26>
 8018422:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8018426:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801842a:	d30a      	bcc.n	8018442 <__fpclassifyf+0x2a>
 801842c:	4b07      	ldr	r3, [pc, #28]	@ (801844c <__fpclassifyf+0x34>)
 801842e:	1e42      	subs	r2, r0, #1
 8018430:	429a      	cmp	r2, r3
 8018432:	d908      	bls.n	8018446 <__fpclassifyf+0x2e>
 8018434:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8018438:	4258      	negs	r0, r3
 801843a:	4158      	adcs	r0, r3
 801843c:	4770      	bx	lr
 801843e:	2002      	movs	r0, #2
 8018440:	4770      	bx	lr
 8018442:	2004      	movs	r0, #4
 8018444:	4770      	bx	lr
 8018446:	2003      	movs	r0, #3
 8018448:	4770      	bx	lr
 801844a:	bf00      	nop
 801844c:	007ffffe 	.word	0x007ffffe

08018450 <_init>:
 8018450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018452:	bf00      	nop
 8018454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018456:	bc08      	pop	{r3}
 8018458:	469e      	mov	lr, r3
 801845a:	4770      	bx	lr

0801845c <_fini>:
 801845c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801845e:	bf00      	nop
 8018460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018462:	bc08      	pop	{r3}
 8018464:	469e      	mov	lr, r3
 8018466:	4770      	bx	lr
