
Flying-Probe_tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000636c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800653c  0800653c  0000753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800663c  0800663c  000081c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800663c  0800663c  0000763c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006644  08006644  000081c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800664c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  080066d4  00008088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08006774  00008128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000008b8  200001c8  08006814  000081c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a80  08006814  00008a80  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000081c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cad3  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036b8  00000000  00000000  00024ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016b8  00000000  00000000  00028388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011a4  00000000  00000000  00029a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029281  00000000  00000000  0002abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f14f  00000000  00000000  00053e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fa50c  00000000  00000000  00072fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016d4c0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000065f8  00000000  00000000  0016d504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  00173afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001c8 	.word	0x200001c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006524 	.word	0x08006524

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001cc 	.word	0x200001cc
 800020c:	08006524 	.word	0x08006524

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__lcd_delay_us>:
 * @param[in] htim     : LCD timer handler
 * @param[in] delay_us : Delay period in microseconds
 * @return None
 */
void __lcd_delay_us(LCD_TimerType htim, uint16_t delay_us)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
  __HAL_TIM_SET_COUNTER(htim, 0);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2200      	movs	r2, #0
 80005c2:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start(htim);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f003 ff09 	bl	80043dc <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(htim) < delay_us);
 80005ca:	bf00      	nop
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3f9      	bcc.n	80005cc <__lcd_delay_us+0x1c>
  HAL_TIM_Base_Stop(htim);
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f003 ff6f 	bl	80044bc <HAL_TIM_Base_Stop>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <__lcd_i2c_write>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write(LCD_I2C_HandleTypeDef* hlcd, uint8_t rsRwBits, uint8_t data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af02      	add	r7, sp, #8
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
 80005f4:	4613      	mov	r3, r2
 80005f6:	70bb      	strb	r3, [r7, #2]
    /* most significant nibble */
    __lcd_i2c_buffer[0] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 80005f8:	78bb      	ldrb	r3, [r7, #2]
 80005fa:	f023 030f 	bic.w	r3, r3, #15
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	78fb      	ldrb	r3, [r7, #3]
 8000602:	4313      	orrs	r3, r2
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f043 030c 	orr.w	r3, r3, #12
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <__lcd_i2c_write+0xac>)
 800060e:	701a      	strb	r2, [r3, #0]
    __lcd_i2c_buffer[1] = __lcd_i2c_buffer[0];
 8000610:	4b20      	ldr	r3, [pc, #128]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b1f      	ldr	r3, [pc, #124]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000616:	705a      	strb	r2, [r3, #1]
    __lcd_i2c_buffer[2] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | (data & 0xF0);
 8000618:	78bb      	ldrb	r3, [r7, #2]
 800061a:	f023 030f 	bic.w	r3, r3, #15
 800061e:	b2da      	uxtb	r2, r3
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f043 0308 	orr.w	r3, r3, #8
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b19      	ldr	r3, [pc, #100]	@ (8000694 <__lcd_i2c_write+0xac>)
 800062e:	709a      	strb	r2, [r3, #2]

    /* least significant nibble */
    __lcd_i2c_buffer[3] = rsRwBits | LCD_I2C_BIT_E | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 8000630:	78bb      	ldrb	r3, [r7, #2]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	b2da      	uxtb	r2, r3
 8000636:	78fb      	ldrb	r3, [r7, #3]
 8000638:	4313      	orrs	r3, r2
 800063a:	b2db      	uxtb	r3, r3
 800063c:	f043 030c 	orr.w	r3, r3, #12
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000644:	70da      	strb	r2, [r3, #3]
    __lcd_i2c_buffer[4] = __lcd_i2c_buffer[3];
 8000646:	4b13      	ldr	r3, [pc, #76]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000648:	78da      	ldrb	r2, [r3, #3]
 800064a:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <__lcd_i2c_write+0xac>)
 800064c:	711a      	strb	r2, [r3, #4]
    __lcd_i2c_buffer[5] = rsRwBits | LCD_I2C_BIT_BACKIGHT_ON | ((data << 4) & 0xF0);
 800064e:	78bb      	ldrb	r3, [r7, #2]
 8000650:	011b      	lsls	r3, r3, #4
 8000652:	b2da      	uxtb	r2, r3
 8000654:	78fb      	ldrb	r3, [r7, #3]
 8000656:	4313      	orrs	r3, r2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f043 0308 	orr.w	r3, r3, #8
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <__lcd_i2c_write+0xac>)
 8000662:	715a      	strb	r2, [r3, #5]

    HAL_I2C_Master_Transmit(hlcd->I2C, (hlcd->Address << 1), (uint8_t*)__lcd_i2c_buffer, 6, hlcd->Timeout);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6818      	ldr	r0, [r3, #0]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	b299      	uxth	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	9300      	str	r3, [sp, #0]
 8000676:	2306      	movs	r3, #6
 8000678:	4a06      	ldr	r2, [pc, #24]	@ (8000694 <__lcd_i2c_write+0xac>)
 800067a:	f002 f839 	bl	80026f0 <HAL_I2C_Master_Transmit>

    __lcd_delay(hlcd->Timer, 0.05);  // > 41 us
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	68db      	ldr	r3, [r3, #12]
 8000682:	2132      	movs	r1, #50	@ 0x32
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff ff93 	bl	80005b0 <__lcd_delay_us>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200001e4 	.word	0x200001e4

08000698 <__lcd_i2c_write_command>:
 * @param[in] hlcd    : LCD handler with I2C interface
 * @param[in] command : Display command @see lcd.h/Define
 * @return None
 */
void __lcd_i2c_write_command(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
 80006a0:	460b      	mov	r3, r1
 80006a2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_COMMAND_REG, data);
 80006a4:	78fb      	ldrb	r3, [r7, #3]
 80006a6:	461a      	mov	r2, r3
 80006a8:	2100      	movs	r1, #0
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f7ff ff9c 	bl	80005e8 <__lcd_i2c_write>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <__lcd_i2c_write_data>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] data : Display data byte
 * @return None
 */
void __lcd_i2c_write_data(LCD_I2C_HandleTypeDef* hlcd, uint8_t data)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  __lcd_i2c_write(hlcd, LCD_DATA_REG, data);
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2101      	movs	r1, #1
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ff8c 	bl	80005e8 <__lcd_i2c_write>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}

080006d8 <LCD_I2C_Init>:
 * @note Cursor off, Cursor increment on, No blink @see HD44780 technical note.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Init(LCD_I2C_HandleTypeDef* hlcd)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
    // Step 1: Initial delay after power-on
    __lcd_delay(hlcd->Timer, 50); // Wait at least 40 ms after power-on
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff61 	bl	80005b0 <__lcd_delay_us>

    // Step 2: Force LCD into 4-bit mode
    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 80006ee:	2103      	movs	r1, #3
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ffd1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 5);          // Wait > 4.1 ms
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff56 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 8000704:	2103      	movs	r1, #3
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f7ff ffc6 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Wait > 100 µs
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff4b 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x03);  // Function set: 8-bit mode
 800071a:	2103      	movs	r1, #3
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ffbb 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <__lcd_delay_us>

    __lcd_i2c_write_command(hlcd, 0x02);  // Function set: 4-bit mode
 8000730:	2102      	movs	r1, #2
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffb0 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 1);          // Short delay
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	68db      	ldr	r3, [r3, #12]
 800073c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff35 	bl	80005b0 <__lcd_delay_us>

    // Step 3: Configure display
    __lcd_i2c_write_command(hlcd, LCD_FUNCTION_SET | LCD_OPT_N);        // Function set: 4-bit, 2-line, 5x8 dots
 8000746:	2128      	movs	r1, #40	@ 0x28
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f7ff ffa5 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_DISPLAY_ON_OFF_CONTROL | LCD_OPT_D); // Display on, cursor off, blink off
 800074e:	210c      	movs	r1, #12
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f7ff ffa1 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);                   // Clear display
 8000756:	2101      	movs	r1, #1
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff9d 	bl	8000698 <__lcd_i2c_write_command>
    __lcd_delay(hlcd->Timer, 2);                                        // Wait > 1.52 ms
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff ff22 	bl	80005b0 <__lcd_delay_us>
    __lcd_i2c_write_command(hlcd, LCD_ENTRY_MODE_SET | LCD_OPT_INC);    // Entry mode: increment cursor, no shift
 800076c:	2106      	movs	r1, #6
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f7ff ff92 	bl	8000698 <__lcd_i2c_write_command>

    // Mark as initialized
    hlcd->IsInitialized = 1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	741a      	strb	r2, [r3, #16]
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <LCD_I2C_printCustomChar>:
 * @param[in] hlcd   : LCD custom character handler with I2C interface
 * @return None
 */


void LCD_I2C_printCustomChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  // Assuming __lcd_i2c_write_data allows sending custom character code directly
  __lcd_i2c_write_data(hlcd, code);
 800078e:	78fb      	ldrb	r3, [r7, #3]
 8000790:	4619      	mov	r1, r3
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff ff90 	bl	80006b8 <__lcd_i2c_write_data>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <LCD_I2C_printStr>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] str  : Null-terminated string
 * @return None
 */
void LCD_I2C_printStr(LCD_I2C_HandleTypeDef* hlcd, char* str)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  for(uint8_t i = 0; i < strlen(str); i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	e00a      	b.n	80007c6 <LCD_I2C_printStr+0x26>
    __lcd_i2c_write_data(hlcd, str[i]);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	683a      	ldr	r2, [r7, #0]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	4619      	mov	r1, r3
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff7c 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i = 0; i < strlen(str); i++)
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	3301      	adds	r3, #1
 80007c4:	73fb      	strb	r3, [r7, #15]
 80007c6:	7bfc      	ldrb	r4, [r7, #15]
 80007c8:	6838      	ldr	r0, [r7, #0]
 80007ca:	f7ff fd21 	bl	8000210 <strlen>
 80007ce:	4603      	mov	r3, r0
 80007d0:	429c      	cmp	r4, r3
 80007d2:	d3ed      	bcc.n	80007b0 <LCD_I2C_printStr+0x10>
}
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
	...

080007e0 <LCD_I2C_SetCursor>:
 * @param[in] row  : Display row (line): 0 to N
 * @param[in] col  : Display column: 0 to 15 (16 character display) or 19 (20 character display)
 * @return None
 */
void LCD_I2C_SetCursor(LCD_I2C_HandleTypeDef* hlcd, uint8_t row, uint8_t col)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
 80007ec:	4613      	mov	r3, r2
 80007ee:	70bb      	strb	r3, [r7, #2]
  #ifdef LCD20xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_20[row] + col);
  #endif

  #ifdef LCD16xN
  __lcd_i2c_write_command(hlcd, LCD_SET_DDRAM_ADDR + LCD_ROW_16[row] + col);
 80007f0:	78fb      	ldrb	r3, [r7, #3]
 80007f2:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <LCD_I2C_SetCursor+0x30>)
 80007f4:	5cd2      	ldrb	r2, [r2, r3]
 80007f6:	78bb      	ldrb	r3, [r7, #2]
 80007f8:	4413      	add	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	3b80      	subs	r3, #128	@ 0x80
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	4619      	mov	r1, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff ff48 	bl	8000698 <__lcd_i2c_write_command>
  #endif
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	080065ec 	.word	0x080065ec

08000814 <LCD_I2C_Clear>:
 * @brief Clear the screen.
 * @param[in] hlcd : LCD handler with I2C interface
 * @return None
 */
void LCD_I2C_Clear(LCD_I2C_HandleTypeDef * hlcd)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  __lcd_i2c_write_command(hlcd, LCD_CLEAR_DISPLAY);
 800081c:	2101      	movs	r1, #1
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f7ff ff3a 	bl	8000698 <__lcd_i2c_write_command>
}
 8000824:	bf00      	nop
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <LCD_I2C_DefineChar>:
 * @param[in] code   : Defined character code in display memory @see HD44780 technical note.
 * @param[in] bitmap : Defined character array @see HD44780 technical note.
 * @return None
 */
void LCD_I2C_DefineChar(LCD_I2C_HandleTypeDef* hlcd, uint8_t code, uint8_t bitmap[])
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	460b      	mov	r3, r1
 8000836:	607a      	str	r2, [r7, #4]
 8000838:	72fb      	strb	r3, [r7, #11]
  __lcd_i2c_write_command(hlcd, LCD_SETCGRAM_ADDR + (code << 3));
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	b2db      	uxtb	r3, r3
 8000840:	3340      	adds	r3, #64	@ 0x40
 8000842:	b2db      	uxtb	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f7ff ff26 	bl	8000698 <__lcd_i2c_write_command>

  for(uint8_t i=0; i < 8; ++i)
 800084c:	2300      	movs	r3, #0
 800084e:	75fb      	strb	r3, [r7, #23]
 8000850:	e00a      	b.n	8000868 <LCD_I2C_DefineChar+0x3c>
    __lcd_i2c_write_data(hlcd, bitmap[i]);
 8000852:	7dfb      	ldrb	r3, [r7, #23]
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	4413      	add	r3, r2
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff ff2b 	bl	80006b8 <__lcd_i2c_write_data>
  for(uint8_t i=0; i < 8; ++i)
 8000862:	7dfb      	ldrb	r3, [r7, #23]
 8000864:	3301      	adds	r3, #1
 8000866:	75fb      	strb	r3, [r7, #23]
 8000868:	7dfb      	ldrb	r3, [r7, #23]
 800086a:	2b07      	cmp	r3, #7
 800086c:	d9f1      	bls.n	8000852 <LCD_I2C_DefineChar+0x26>
}
 800086e:	bf00      	nop
 8000870:	bf00      	nop
 8000872:	3718      	adds	r7, #24
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <LCD_I2C_DisplaySequentialGlossyText>:
 * @param[in] hlcd : LCD handler with I2C interface
 * @param[in] row  : Row number to display the text
 * @return None
 */
void LCD_I2C_DisplaySequentialGlossyText(LCD_I2C_HandleTypeDef* hlcd, uint8_t row)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b088      	sub	sp, #32
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	460b      	mov	r3, r1
 8000882:	70fb      	strb	r3, [r7, #3]
    // Ensure row is valid (0 or 1 for a 2x16 LCD)


    const char* text = "BONGO BONG";
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <LCD_I2C_DisplaySequentialGlossyText+0x9c>)
 8000886:	61bb      	str	r3, [r7, #24]
    uint8_t len = strlen(text);
 8000888:	69b8      	ldr	r0, [r7, #24]
 800088a:	f7ff fcc1 	bl	8000210 <strlen>
 800088e:	4603      	mov	r3, r0
 8000890:	75fb      	strb	r3, [r7, #23]

    // Create a highlight custom character
    uint8_t highlight_char[8] = {
 8000892:	4a21      	ldr	r2, [pc, #132]	@ (8000918 <LCD_I2C_DisplaySequentialGlossyText+0xa0>)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800089c:	e883 0003 	stmia.w	r3, {r0, r1}
        0b11111,
        0b11111
    };

    // Define the custom character in CGRAM
    LCD_I2C_DefineChar(hlcd, 0, highlight_char);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	461a      	mov	r2, r3
 80008a6:	2100      	movs	r1, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ffbf 	bl	800082c <LCD_I2C_DefineChar>

    // Start from the first character
    for (uint8_t i = 0; i < len; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	77fb      	strb	r3, [r7, #31]
 80008b2:	e025      	b.n	8000900 <LCD_I2C_DisplaySequentialGlossyText+0x88>
        // Highlight the current character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008b4:	7ffb      	ldrb	r3, [r7, #31]
 80008b6:	3303      	adds	r3, #3
 80008b8:	b2da      	uxtb	r2, r3
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	4619      	mov	r1, r3
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff8e 	bl	80007e0 <LCD_I2C_SetCursor>
        LCD_I2C_printCustomChar(hlcd, 0);
 80008c4:	2100      	movs	r1, #0
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f7ff ff5b 	bl	8000782 <LCD_I2C_printCustomChar>

        // Wait to create the glossy effect
        __lcd_delay(hlcd->Timer, 200); // Adjust delay for visual preference
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fe6b 	bl	80005b0 <__lcd_delay_us>

        // Replace the highlighted character with the original character
        LCD_I2C_SetCursor(hlcd, row, i+3);
 80008da:	7ffb      	ldrb	r3, [r7, #31]
 80008dc:	3303      	adds	r3, #3
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	4619      	mov	r1, r3
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff7b 	bl	80007e0 <LCD_I2C_SetCursor>
        __lcd_i2c_write_data(hlcd, text[i]);
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
 80008ec:	69ba      	ldr	r2, [r7, #24]
 80008ee:	4413      	add	r3, r2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	4619      	mov	r1, r3
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f7ff fedf 	bl	80006b8 <__lcd_i2c_write_data>
    for (uint8_t i = 0; i < len; i++) {
 80008fa:	7ffb      	ldrb	r3, [r7, #31]
 80008fc:	3301      	adds	r3, #1
 80008fe:	77fb      	strb	r3, [r7, #31]
 8000900:	7ffa      	ldrb	r2, [r7, #31]
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	429a      	cmp	r2, r3
 8000906:	d3d5      	bcc.n	80008b4 <LCD_I2C_DisplaySequentialGlossyText+0x3c>
    }
}
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	08006548 	.word	0x08006548
 8000918:	08006554 	.word	0x08006554

0800091c <LCD_I2C_HandleMenuSelection>:
        // Delay for smooth animation
        __lcd_delay(hlcd->Timer, 100); // Adjust delay as needed
    }
}
void LCD_I2C_HandleMenuSelection(uint8_t selectedOption, LCD_I2C_HandleTypeDef* hlcd)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	71fb      	strb	r3, [r7, #7]
    // Clear the screen before rendering the option
    LCD_I2C_Clear(hlcd);
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f7ff ff73 	bl	8000814 <LCD_I2C_Clear>

    switch (selectedOption) {
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d002      	beq.n	800093a <LCD_I2C_HandleMenuSelection+0x1e>
 8000934:	2b02      	cmp	r3, #2
 8000936:	d017      	beq.n	8000968 <LCD_I2C_HandleMenuSelection+0x4c>
 8000938:	e02d      	b.n	8000996 <LCD_I2C_HandleMenuSelection+0x7a>
        case 1:
            // Logic for "Test from SD Card"
        	LCD_I2C_SetCursor(hlcd, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	6838      	ldr	r0, [r7, #0]
 8000940:	f7ff ff4e 	bl	80007e0 <LCD_I2C_SetCursor>
        	LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 8000944:	491d      	ldr	r1, [pc, #116]	@ (80009bc <LCD_I2C_HandleMenuSelection+0xa0>)
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff ff2a 	bl	80007a0 <LCD_I2C_printStr>
        	LCD_I2C_SetCursor(hlcd, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	6838      	ldr	r0, [r7, #0]
 8000952:	f7ff ff45 	bl	80007e0 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Testing SD...");
 8000956:	491a      	ldr	r1, [pc, #104]	@ (80009c0 <LCD_I2C_HandleMenuSelection+0xa4>)
 8000958:	6838      	ldr	r0, [r7, #0]
 800095a:	f7ff ff21 	bl	80007a0 <LCD_I2C_printStr>
            HAL_Delay(2000); // Placeholder for actual SD card testing logic
 800095e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000962:	f000 ffa3 	bl	80018ac <HAL_Delay>
            break;
 8000966:	e024      	b.n	80009b2 <LCD_I2C_HandleMenuSelection+0x96>

        case 2:
            // Logic for "Prepare the Machine"
        	LCD_I2C_SetCursor(hlcd, 0, 0);
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	6838      	ldr	r0, [r7, #0]
 800096e:	f7ff ff37 	bl	80007e0 <LCD_I2C_SetCursor>
        	LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 8000972:	4912      	ldr	r1, [pc, #72]	@ (80009bc <LCD_I2C_HandleMenuSelection+0xa0>)
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f7ff ff13 	bl	80007a0 <LCD_I2C_printStr>
            LCD_I2C_SetCursor(hlcd, 0, 0);  // Set the cursor position for the first line
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	6838      	ldr	r0, [r7, #0]
 8000980:	f7ff ff2e 	bl	80007e0 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Preparing...");  // Ensure it's <= 16 characters for a 16x2 LCD
 8000984:	490f      	ldr	r1, [pc, #60]	@ (80009c4 <LCD_I2C_HandleMenuSelection+0xa8>)
 8000986:	6838      	ldr	r0, [r7, #0]
 8000988:	f7ff ff0a 	bl	80007a0 <LCD_I2C_printStr>
            HAL_Delay(2000); // Placeholder for machine preparation logic
 800098c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000990:	f000 ff8c 	bl	80018ac <HAL_Delay>
            break;
 8000994:	e00d      	b.n	80009b2 <LCD_I2C_HandleMenuSelection+0x96>

        default:
            // Handle invalid cases (should not occur in normal use)
            LCD_I2C_SetCursor(hlcd, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	6838      	ldr	r0, [r7, #0]
 800099c:	f7ff ff20 	bl	80007e0 <LCD_I2C_SetCursor>
            LCD_I2C_printStr(hlcd, "Invalid Option");
 80009a0:	4909      	ldr	r1, [pc, #36]	@ (80009c8 <LCD_I2C_HandleMenuSelection+0xac>)
 80009a2:	6838      	ldr	r0, [r7, #0]
 80009a4:	f7ff fefc 	bl	80007a0 <LCD_I2C_printStr>
            HAL_Delay(2000);
 80009a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ac:	f000 ff7e 	bl	80018ac <HAL_Delay>
            break;
 80009b0:	bf00      	nop
    }
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	0800655c 	.word	0x0800655c
 80009c0:	08006574 	.word	0x08006574
 80009c4:	08006584 	.word	0x08006584
 80009c8:	08006594 	.word	0x08006594

080009cc <LCD_I2C_MainMenu_Encoder>:
        // Add a small delay for debounce
        HAL_Delay(200);
    }
}

uint8_t LCD_I2C_MainMenu_Encoder(LCD_I2C_HandleTypeDef* hlcd, ENC_Handle_TypeDef* henc) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    const char* menuItems[] = {"Test from SD", "Prepare Machine"}; // Menu options
 80009d6:	4a4c      	ldr	r2, [pc, #304]	@ (8000b08 <LCD_I2C_MainMenu_Encoder+0x13c>)
 80009d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80009dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t totalOptions = sizeof(menuItems) / sizeof(menuItems[0]);
 80009e4:	2302      	movs	r3, #2
 80009e6:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
    uint8_t selectedOption = 0; // Current selected menu item
 80009ea:	2300      	movs	r3, #0
 80009ec:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    uint8_t previousOption = 255; // Invalid to ensure the first update
 80009f0:	23ff      	movs	r3, #255	@ 0xff
 80009f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    while (1) {
        // Get the current encoder step count using your ENC_GetCounter function
        uint32_t encoderStep = ENC_GetCounter(henc);
 80009f6:	6838      	ldr	r0, [r7, #0]
 80009f8:	f000 f8ac 	bl	8000b54 <ENC_GetCounter>
 80009fc:	64b8      	str	r0, [r7, #72]	@ 0x48

        // Normalize encoder steps to menu options
        selectedOption = encoderStep % totalOptions;
 80009fe:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8000a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000a08:	fb01 f202 	mul.w	r2, r1, r2
 8000a0c:	1a9b      	subs	r3, r3, r2
 8000a0e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        if (selectedOption < 0) {
            selectedOption += totalOptions;
        }

        // Update the menu display only if the selection has changed
        if (selectedOption != previousOption) {
 8000a12:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8000a16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d051      	beq.n	8000ac2 <LCD_I2C_MainMenu_Encoder+0xf6>
            previousOption = selectedOption;
 8000a1e:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000a22:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

            // Update menu display
            for (uint8_t i = 0; i < totalOptions; i++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000a2c:	e043      	b.n	8000ab6 <LCD_I2C_MainMenu_Encoder+0xea>
                // Clear the line and set cursor position
                LCD_I2C_SetCursor(hlcd, i, 0);
 8000a2e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff fed2 	bl	80007e0 <LCD_I2C_SetCursor>
                LCD_I2C_printStr(hlcd, "                    "); // Clear line (20 spaces)
 8000a3c:	4933      	ldr	r1, [pc, #204]	@ (8000b0c <LCD_I2C_MainMenu_Encoder+0x140>)
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff feae 	bl	80007a0 <LCD_I2C_printStr>
                LCD_I2C_SetCursor(hlcd, i, 0);
 8000a44:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fec7 	bl	80007e0 <LCD_I2C_SetCursor>

                // Highlight the selected item
                if (i == selectedOption) {
 8000a52:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8000a56:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d113      	bne.n	8000a86 <LCD_I2C_MainMenu_Encoder+0xba>
                    char formattedLine[21];
                    snprintf(formattedLine, 21, ">%-19s", menuItems[i]);
 8000a5e:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	3350      	adds	r3, #80	@ 0x50
 8000a66:	443b      	add	r3, r7
 8000a68:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000a6c:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000a70:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <LCD_I2C_MainMenu_Encoder+0x144>)
 8000a72:	2115      	movs	r1, #21
 8000a74:	f005 f8a2 	bl	8005bbc <sniprintf>
                    LCD_I2C_printStr(hlcd, formattedLine);
 8000a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff fe8e 	bl	80007a0 <LCD_I2C_printStr>
 8000a84:	e012      	b.n	8000aac <LCD_I2C_MainMenu_Encoder+0xe0>
                } else {
                    char formattedLine[21];
                    snprintf(formattedLine, 21, " %-19s", menuItems[i]);
 8000a86:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000a8a:	009b      	lsls	r3, r3, #2
 8000a8c:	3350      	adds	r3, #80	@ 0x50
 8000a8e:	443b      	add	r3, r7
 8000a90:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000a94:	f107 000c 	add.w	r0, r7, #12
 8000a98:	4a1e      	ldr	r2, [pc, #120]	@ (8000b14 <LCD_I2C_MainMenu_Encoder+0x148>)
 8000a9a:	2115      	movs	r1, #21
 8000a9c:	f005 f88e 	bl	8005bbc <sniprintf>
                    LCD_I2C_printStr(hlcd, formattedLine);
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff fe7a 	bl	80007a0 <LCD_I2C_printStr>
            for (uint8_t i = 0; i < totalOptions; i++) {
 8000aac:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8000ab6:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8000aba:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3b5      	bcc.n	8000a2e <LCD_I2C_MainMenu_Encoder+0x62>
                }
            }
        }

        // Check for selection button
        bool buttonInput = read_buttons();
 8000ac2:	f000 f829 	bl	8000b18 <read_buttons>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (buttonInput==0) { // Replace with your actual button logic
 8000acc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d00e      	beq.n	8000af8 <LCD_I2C_MainMenu_Encoder+0x12c>
            HAL_Delay(200); // Debounce delay
 8000ada:	20c8      	movs	r0, #200	@ 0xc8
 8000adc:	f000 fee6 	bl	80018ac <HAL_Delay>
            if (buttonInput==0) {
 8000ae0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ae4:	f083 0301 	eor.w	r3, r3, #1
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d004      	beq.n	8000af8 <LCD_I2C_MainMenu_Encoder+0x12c>
                return selectedOption + 1;
 8000aee:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	e003      	b.n	8000b00 <LCD_I2C_MainMenu_Encoder+0x134>
            }
        }

        // Add a delay for smoother updates
        HAL_Delay(100);
 8000af8:	2064      	movs	r0, #100	@ 0x64
 8000afa:	f000 fed7 	bl	80018ac <HAL_Delay>
    while (1) {
 8000afe:	e77a      	b.n	80009f6 <LCD_I2C_MainMenu_Encoder+0x2a>
    }
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3750      	adds	r7, #80	@ 0x50
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	080065d4 	.word	0x080065d4
 8000b0c:	0800655c 	.word	0x0800655c
 8000b10:	080065dc 	.word	0x080065dc
 8000b14:	080065e4 	.word	0x080065e4

08000b18 <read_buttons>:



bool read_buttons(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0

    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_SET) return 1; // Down
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <read_buttons+0x1c>)
 8000b20:	f001 fcf4 	bl	800250c <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <read_buttons+0x16>
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e000      	b.n	8000b30 <read_buttons+0x18>
    else return 0;
 8000b2e:	2300      	movs	r3, #0

}
 8000b30:	4618      	mov	r0, r3
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40020400 	.word	0x40020400

08000b38 <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] henc : Encoder handler
 * @return None
 */
void ENC_Init(ENC_Handle_TypeDef* henc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL); // Start Timer 4 in encoder mode with interrupts enabled
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	213c      	movs	r1, #60	@ 0x3c
 8000b46:	4618      	mov	r0, r3
 8000b48:	f003 fd86 	bl	8004658 <HAL_TIM_Encoder_Start>
}
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] henc : Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_Handle_TypeDef* henc)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	bf34      	ite	cc
 8000b78:	2301      	movcc	r3, #1
 8000b7a:	2300      	movcs	r3, #0
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	bf8c      	ite	hi
 8000b8c:	2301      	movhi	r3, #1
 8000b8e:	2300      	movls	r3, #0
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	745a      	strb	r2, [r3, #17]
  return henc->Counter / henc->TicksPerStep;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fe1c 	bl	80017f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f835 	bl	8000c28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 fa19 	bl	8000ff4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000bc2:	f000 f89f 	bl	8000d04 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000bc6:	f000 f9b7 	bl	8000f38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000bca:	f000 f9e5 	bl	8000f98 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000bce:	f000 f97d 	bl	8000ecc <MX_TIM7_Init>
  MX_I2C1_Init();
 8000bd2:	f000 f8e5 	bl	8000da0 <MX_I2C1_Init>
  MX_TIM4_Init();
 8000bd6:	f000 f923 	bl	8000e20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
   ENC_Init(&henc1);
 8000bda:	4811      	ldr	r0, [pc, #68]	@ (8000c20 <main+0x70>)
 8000bdc:	f7ff ffac 	bl	8000b38 <ENC_Init>
   //HAL_TIM_Encoder_Start_IT(&htim4,TIM_CHANNEL_ALL);




   LCD_I2C_Clear(&hlcd3);
 8000be0:	4810      	ldr	r0, [pc, #64]	@ (8000c24 <main+0x74>)
 8000be2:	f7ff fe17 	bl	8000814 <LCD_I2C_Clear>
   LCD_I2C_Init(&hlcd3);
 8000be6:	480f      	ldr	r0, [pc, #60]	@ (8000c24 <main+0x74>)
 8000be8:	f7ff fd76 	bl	80006d8 <LCD_I2C_Init>
   LCD_I2C_SetCursor(&hlcd3, 3, 3);
 8000bec:	2203      	movs	r2, #3
 8000bee:	2103      	movs	r1, #3
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <main+0x74>)
 8000bf2:	f7ff fdf5 	bl	80007e0 <LCD_I2C_SetCursor>
   LCD_I2C_DisplaySequentialGlossyText(&hlcd3,1);
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <main+0x74>)
 8000bfa:	f7ff fe3d 	bl	8000878 <LCD_I2C_DisplaySequentialGlossyText>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){

	  uint32_t encode = ENC_GetCounter(&henc1);
 8000bfe:	4808      	ldr	r0, [pc, #32]	@ (8000c20 <main+0x70>)
 8000c00:	f7ff ffa8 	bl	8000b54 <ENC_GetCounter>
 8000c04:	6078      	str	r0, [r7, #4]
          // Show the menu and get the user's choice
          uint8_t choice = LCD_I2C_MainMenu_Encoder(&hlcd3, &henc1);
 8000c06:	4906      	ldr	r1, [pc, #24]	@ (8000c20 <main+0x70>)
 8000c08:	4806      	ldr	r0, [pc, #24]	@ (8000c24 <main+0x74>)
 8000c0a:	f7ff fedf 	bl	80009cc <LCD_I2C_MainMenu_Encoder>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	70fb      	strb	r3, [r7, #3]

//
//          // Handle the selected option using the encapsulated function
          LCD_I2C_HandleMenuSelection(choice, &hlcd3);
 8000c12:	78fb      	ldrb	r3, [r7, #3]
 8000c14:	4903      	ldr	r1, [pc, #12]	@ (8000c24 <main+0x74>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff fe80 	bl	800091c <LCD_I2C_HandleMenuSelection>
  while (1){
 8000c1c:	bf00      	nop
 8000c1e:	e7ee      	b.n	8000bfe <main+0x4e>
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000018 	.word	0x20000018

08000c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b094      	sub	sp, #80	@ 0x50
 8000c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2e:	f107 0320 	add.w	r3, r7, #32
 8000c32:	2230      	movs	r2, #48	@ 0x30
 8000c34:	2100      	movs	r1, #0
 8000c36:	4618      	mov	r0, r3
 8000c38:	f004 fff4 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]
 8000c4a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c4c:	f002 fa54 	bl	80030f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c50:	4b2a      	ldr	r3, [pc, #168]	@ (8000cfc <SystemClock_Config+0xd4>)
 8000c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c54:	4a29      	ldr	r2, [pc, #164]	@ (8000cfc <SystemClock_Config+0xd4>)
 8000c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c5c:	4b27      	ldr	r3, [pc, #156]	@ (8000cfc <SystemClock_Config+0xd4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c68:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <SystemClock_Config+0xd8>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a24      	ldr	r2, [pc, #144]	@ (8000d00 <SystemClock_Config+0xd8>)
 8000c6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <SystemClock_Config+0xd8>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c84:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c94:	2304      	movs	r3, #4
 8000c96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c98:	23d8      	movs	r3, #216	@ 0xd8
 8000c9a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ca0:	2309      	movs	r3, #9
 8000ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 fa85 	bl	80031b8 <HAL_RCC_OscConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000cb4:	f000 fa62 	bl	800117c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cb8:	f002 fa2e 	bl	8003118 <HAL_PWREx_EnableOverDrive>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000cc2:	f000 fa5b 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2107      	movs	r1, #7
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 fd0b 	bl	8003700 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000cf0:	f000 fa44 	bl	800117c <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3750      	adds	r7, #80	@ 0x50
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40007000 	.word	0x40007000

08000d04 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d0a:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <MX_ETH_Init+0x88>)
 8000d0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d0e:	4b20      	ldr	r3, [pc, #128]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d16:	2280      	movs	r2, #128	@ 0x80
 8000d18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d1c:	22e1      	movs	r2, #225	@ 0xe1
 8000d1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d34:	4a16      	ldr	r2, [pc, #88]	@ (8000d90 <MX_ETH_Init+0x8c>)
 8000d36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000d3e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d42:	4a14      	ldr	r2, [pc, #80]	@ (8000d94 <MX_ETH_Init+0x90>)
 8000d44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d48:	4a13      	ldr	r2, [pc, #76]	@ (8000d98 <MX_ETH_Init+0x94>)
 8000d4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d4e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <MX_ETH_Init+0x84>)
 8000d56:	f000 fedf 	bl	8001b18 <HAL_ETH_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000d60:	f000 fa0c 	bl	800117c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d64:	2238      	movs	r2, #56	@ 0x38
 8000d66:	2100      	movs	r1, #0
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <MX_ETH_Init+0x98>)
 8000d6a:	f004 ff5b 	bl	8005c24 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <MX_ETH_Init+0x98>)
 8000d70:	2221      	movs	r2, #33	@ 0x21
 8000d72:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d74:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <MX_ETH_Init+0x98>)
 8000d76:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000d7a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d7c:	4b07      	ldr	r3, [pc, #28]	@ (8000d9c <MX_ETH_Init+0x98>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000224 	.word	0x20000224
 8000d8c:	40028000 	.word	0x40028000
 8000d90:	20000928 	.word	0x20000928
 8000d94:	20000128 	.word	0x20000128
 8000d98:	20000088 	.word	0x20000088
 8000d9c:	200001ec 	.word	0x200001ec

08000da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000da6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e18 <MX_I2C1_Init+0x78>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000daa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dac:	4a1b      	ldr	r2, [pc, #108]	@ (8000e1c <MX_I2C1_Init+0x7c>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000db0:	4b18      	ldr	r3, [pc, #96]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db6:	4b17      	ldr	r3, [pc, #92]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc2:	4b14      	ldr	r3, [pc, #80]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dda:	480e      	ldr	r0, [pc, #56]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000ddc:	f001 fbec 	bl	80025b8 <HAL_I2C_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de6:	f000 f9c9 	bl	800117c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dea:	2100      	movs	r1, #0
 8000dec:	4809      	ldr	r0, [pc, #36]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000dee:	f001 ffb1 	bl	8002d54 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df8:	f000 f9c0 	bl	800117c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4805      	ldr	r0, [pc, #20]	@ (8000e14 <MX_I2C1_Init+0x74>)
 8000e00:	f001 fff3 	bl	8002dea <HAL_I2CEx_ConfigDigitalFilter>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 f9b7 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200002d4 	.word	0x200002d4
 8000e18:	40005400 	.word	0x40005400
 8000e1c:	6000030d 	.word	0x6000030d

08000e20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	@ 0x30
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2224      	movs	r2, #36	@ 0x24
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f004 fef8 	bl	8005c24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e34:	463b      	mov	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	@ (8000ec8 <MX_TIM4_Init+0xa8>)
 8000e42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e52:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000e56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e64:	2303      	movs	r3, #3
 8000e66:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8000e74:	230f      	movs	r3, #15
 8000e76:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8000e84:	230f      	movs	r3, #15
 8000e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	480d      	ldr	r0, [pc, #52]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000e90:	f003 fb3c 	bl	800450c <HAL_TIM_Encoder_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000e9a:	f000 f96f 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	@ (8000ec4 <MX_TIM4_Init+0xa4>)
 8000eac:	f003 fe6e 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000eb6:	f000 f961 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	3730      	adds	r7, #48	@ 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000328 	.word	0x20000328
 8000ec8:	40000800 	.word	0x40000800

08000ecc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000ede:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <MX_TIM7_Init+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 215;
 8000ee2:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000ee4:	22d7      	movs	r2, #215	@ 0xd7
 8000ee6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000ef0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ef4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000efe:	f003 fa15 	bl	800432c <HAL_TIM_Base_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f08:	f000 f938 	bl	800117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_TIM7_Init+0x64>)
 8000f1a:	f003 fe37 	bl	8004b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 f92a 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000374 	.word	0x20000374
 8000f34:	40001400 	.word	0x40001400

08000f38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f3c:	4b14      	ldr	r3, [pc, #80]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <MX_USART3_UART_Init+0x5c>)
 8000f40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f50:	4b0f      	ldr	r3, [pc, #60]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f5e:	220c      	movs	r2, #12
 8000f60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f62:	4b0b      	ldr	r3, [pc, #44]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f6e:	4b08      	ldr	r3, [pc, #32]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f7a:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_USART3_UART_Init+0x58>)
 8000f7c:	f003 feb2 	bl	8004ce4 <HAL_UART_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f86:	f000 f8f9 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200003c0 	.word	0x200003c0
 8000f94:	40004800 	.word	0x40004800

08000f98 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fa2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2206      	movs	r2, #6
 8000fa8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000faa:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	2202      	movs	r2, #2
 8000fba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fd4:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fda:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fdc:	f001 ff51 	bl	8002e82 <HAL_PCD_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fe6:	f000 f8c9 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000448 	.word	0x20000448

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08c      	sub	sp, #48	@ 0x30
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100a:	4b57      	ldr	r3, [pc, #348]	@ (8001168 <MX_GPIO_Init+0x174>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a56      	ldr	r2, [pc, #344]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b54      	ldr	r3, [pc, #336]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a50      	ldr	r2, [pc, #320]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b4e      	ldr	r3, [pc, #312]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b4b      	ldr	r3, [pc, #300]	@ (8001168 <MX_GPIO_Init+0x174>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b48      	ldr	r3, [pc, #288]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	4b45      	ldr	r3, [pc, #276]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a44      	ldr	r2, [pc, #272]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b42      	ldr	r3, [pc, #264]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800106a:	4b3f      	ldr	r3, [pc, #252]	@ (8001168 <MX_GPIO_Init+0x174>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a3e      	ldr	r2, [pc, #248]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001070:	f043 0308 	orr.w	r3, r3, #8
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b3c      	ldr	r3, [pc, #240]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0308 	and.w	r3, r3, #8
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001082:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a38      	ldr	r2, [pc, #224]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <MX_GPIO_Init+0x174>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f244 0191 	movw	r1, #16529	@ 0x4091
 80010a0:	4832      	ldr	r0, [pc, #200]	@ (800116c <MX_GPIO_Init+0x178>)
 80010a2:	f001 fa4b 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2140      	movs	r1, #64	@ 0x40
 80010aa:	4831      	ldr	r0, [pc, #196]	@ (8001170 <MX_GPIO_Init+0x17c>)
 80010ac:	f001 fa46 	bl	800253c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	482b      	ldr	r0, [pc, #172]	@ (8001174 <MX_GPIO_Init+0x180>)
 80010c8:	f001 f874 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010cc:	2308      	movs	r3, #8
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d4:	2301      	movs	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	4826      	ldr	r0, [pc, #152]	@ (8001178 <MX_GPIO_Init+0x184>)
 80010e0:	f001 f868 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB4 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_4|LD2_Pin;
 80010e4:	f244 0391 	movw	r3, #16529	@ 0x4091
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 031c 	add.w	r3, r7, #28
 80010fa:	4619      	mov	r1, r3
 80010fc:	481b      	ldr	r0, [pc, #108]	@ (800116c <MX_GPIO_Init+0x178>)
 80010fe:	f001 f859 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001102:	230e      	movs	r3, #14
 8001104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001106:	2300      	movs	r3, #0
 8001108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4815      	ldr	r0, [pc, #84]	@ (800116c <MX_GPIO_Init+0x178>)
 8001116:	f001 f84d 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800111a:	2340      	movs	r3, #64	@ 0x40
 800111c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	2301      	movs	r3, #1
 8001120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	2300      	movs	r3, #0
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	4619      	mov	r1, r3
 8001130:	480f      	ldr	r0, [pc, #60]	@ (8001170 <MX_GPIO_Init+0x17c>)
 8001132:	f001 f83f 	bl	80021b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	4619      	mov	r1, r3
 8001148:	4809      	ldr	r0, [pc, #36]	@ (8001170 <MX_GPIO_Init+0x17c>)
 800114a:	f001 f833 	bl	80021b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2028      	movs	r0, #40	@ 0x28
 8001154:	f000 fca9 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001158:	2028      	movs	r0, #40	@ 0x28
 800115a:	f000 fcc2 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800115e:	bf00      	nop
 8001160:	3730      	adds	r7, #48	@ 0x30
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400
 8001170:	40021800 	.word	0x40021800
 8001174:	40020800 	.word	0x40020800
 8001178:	40020000 	.word	0x40020000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <HAL_MspInit+0x44>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a0e      	ldr	r2, [pc, #56]	@ (80011cc <HAL_MspInit+0x44>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <HAL_MspInit+0x44>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x44>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x44>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x44>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	@ 0x38
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001328 <HAL_ETH_MspInit+0x158>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	f040 8096 	bne.w	8001320 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80011f4:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 80011fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001200:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001204:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	4b47      	ldr	r3, [pc, #284]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800120e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001210:	4a46      	ldr	r2, [pc, #280]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001212:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001216:	6313      	str	r3, [r2, #48]	@ 0x30
 8001218:	4b44      	ldr	r3, [pc, #272]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	4b41      	ldr	r3, [pc, #260]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a40      	ldr	r2, [pc, #256]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800122a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	4b3b      	ldr	r3, [pc, #236]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800123e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001240:	4a3a      	ldr	r2, [pc, #232]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	6313      	str	r3, [r2, #48]	@ 0x30
 8001248:	4b38      	ldr	r3, [pc, #224]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124c:	f003 0304 	and.w	r3, r3, #4
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b35      	ldr	r3, [pc, #212]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a34      	ldr	r2, [pc, #208]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b32      	ldr	r3, [pc, #200]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800126e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001270:	4a2e      	ldr	r2, [pc, #184]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001272:	f043 0302 	orr.w	r3, r3, #2
 8001276:	6313      	str	r3, [r2, #48]	@ 0x30
 8001278:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4a28      	ldr	r2, [pc, #160]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 800128a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800128e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001290:	4b26      	ldr	r3, [pc, #152]	@ (800132c <HAL_ETH_MspInit+0x15c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800129c:	2332      	movs	r3, #50	@ 0x32
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a8:	2303      	movs	r3, #3
 80012aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ac:	230b      	movs	r3, #11
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012b4:	4619      	mov	r1, r3
 80012b6:	481e      	ldr	r0, [pc, #120]	@ (8001330 <HAL_ETH_MspInit+0x160>)
 80012b8:	f000 ff7c 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012bc:	2386      	movs	r3, #134	@ 0x86
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c8:	2303      	movs	r3, #3
 80012ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012cc:	230b      	movs	r3, #11
 80012ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012d4:	4619      	mov	r1, r3
 80012d6:	4817      	ldr	r0, [pc, #92]	@ (8001334 <HAL_ETH_MspInit+0x164>)
 80012d8:	f000 ff6c 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ee:	230b      	movs	r3, #11
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	480f      	ldr	r0, [pc, #60]	@ (8001338 <HAL_ETH_MspInit+0x168>)
 80012fa:	f000 ff5b 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012fe:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130c:	2303      	movs	r3, #3
 800130e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001310:	230b      	movs	r3, #11
 8001312:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001318:	4619      	mov	r1, r3
 800131a:	4808      	ldr	r0, [pc, #32]	@ (800133c <HAL_ETH_MspInit+0x16c>)
 800131c:	f000 ff4a 	bl	80021b4 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001320:	bf00      	nop
 8001322:	3738      	adds	r7, #56	@ 0x38
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	40028000 	.word	0x40028000
 800132c:	40023800 	.word	0x40023800
 8001330:	40020800 	.word	0x40020800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40021800 	.word	0x40021800

08001340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b0aa      	sub	sp, #168	@ 0xa8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2284      	movs	r2, #132	@ 0x84
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 fc5f 	bl	8005c24 <memset>
  if(hi2c->Instance==I2C1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a22      	ldr	r2, [pc, #136]	@ (80013f4 <HAL_I2C_MspInit+0xb4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d13c      	bne.n	80013ea <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001370:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001374:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001376:	2300      	movs	r3, #0
 8001378:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800137a:	f107 0310 	add.w	r3, r7, #16
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fbe4 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800138a:	f7ff fef7 	bl	800117c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a19      	ldr	r2, [pc, #100]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b17      	ldr	r3, [pc, #92]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ae:	2312      	movs	r3, #18
 80013b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013c0:	2304      	movs	r3, #4
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013ca:	4619      	mov	r1, r3
 80013cc:	480b      	ldr	r0, [pc, #44]	@ (80013fc <HAL_I2C_MspInit+0xbc>)
 80013ce:	f000 fef1 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	4a08      	ldr	r2, [pc, #32]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 80013d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013de:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_I2C_MspInit+0xb8>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013ea:	bf00      	nop
 80013ec:	37a8      	adds	r7, #168	@ 0xa8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40005400 	.word	0x40005400
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020400 	.word	0x40020400

08001400 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <HAL_TIM_Encoder_MspInit+0x8c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d130      	bne.n	8001484 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001422:	4b1b      	ldr	r3, [pc, #108]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001426:	4a1a      	ldr	r2, [pc, #104]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001440:	f043 0308 	orr.w	r3, r3, #8
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_TIM_Encoder_MspInit+0x90>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0308 	and.w	r3, r3, #8
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC_DT_Pin|ENC_CLK_Pin;
 8001452:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001464:	2302      	movs	r3, #2
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	4619      	mov	r1, r3
 800146e:	4809      	ldr	r0, [pc, #36]	@ (8001494 <HAL_TIM_Encoder_MspInit+0x94>)
 8001470:	f000 fea0 	bl	80021b4 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	201e      	movs	r0, #30
 800147a:	f000 fb16 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800147e:	201e      	movs	r0, #30
 8001480:	f000 fb2f 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001484:	bf00      	nop
 8001486:	3728      	adds	r7, #40	@ 0x28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40000800 	.word	0x40000800
 8001490:	40023800 	.word	0x40023800
 8001494:	40020c00 	.word	0x40020c00

08001498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_TIM_Base_MspInit+0x38>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10b      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	4a09      	ldr	r2, [pc, #36]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014b0:	f043 0320 	orr.w	r3, r3, #32
 80014b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <HAL_TIM_Base_MspInit+0x3c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM7_MspInit 1 */

  }

}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40001400 	.word	0x40001400
 80014d4:	40023800 	.word	0x40023800

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0aa      	sub	sp, #168	@ 0xa8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0310 	add.w	r3, r7, #16
 80014f4:	2284      	movs	r2, #132	@ 0x84
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f004 fb93 	bl	8005c24 <memset>
  if(huart->Instance==USART3)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_UART_MspInit+0xb4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d13c      	bne.n	8001582 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800150c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800150e:	2300      	movs	r3, #0
 8001510:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001512:	f107 0310 	add.w	r3, r7, #16
 8001516:	4618      	mov	r0, r3
 8001518:	f002 fb18 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001522:	f7ff fe2b 	bl	800117c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001526:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 800152c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	4a13      	ldr	r2, [pc, #76]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	6313      	str	r3, [r2, #48]	@ 0x30
 800154a:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <HAL_UART_MspInit+0xb8>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001556:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800155a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001564:	2301      	movs	r3, #1
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156a:	2303      	movs	r3, #3
 800156c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001570:	2307      	movs	r3, #7
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001576:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <HAL_UART_MspInit+0xbc>)
 800157e:	f000 fe19 	bl	80021b4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001582:	bf00      	nop
 8001584:	37a8      	adds	r7, #168	@ 0xa8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40004800 	.word	0x40004800
 8001590:	40023800 	.word	0x40023800
 8001594:	40020c00 	.word	0x40020c00

08001598 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0ac      	sub	sp, #176	@ 0xb0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	2284      	movs	r2, #132	@ 0x84
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f004 fb33 	bl	8005c24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015c6:	d159      	bne.n	800167c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015c8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80015cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d4:	f107 0318 	add.w	r3, r7, #24
 80015d8:	4618      	mov	r0, r3
 80015da:	f002 fab7 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80015e4:	f7ff fdca 	bl	800117c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b26      	ldr	r3, [pc, #152]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ec:	4a25      	ldr	r2, [pc, #148]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001600:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001604:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800161a:	230a      	movs	r3, #10
 800161c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001624:	4619      	mov	r1, r3
 8001626:	4818      	ldr	r0, [pc, #96]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001628:	f000 fdc4 	bl	80021b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800162c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001630:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001640:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001644:	4619      	mov	r1, r3
 8001646:	4810      	ldr	r0, [pc, #64]	@ (8001688 <HAL_PCD_MspInit+0xf0>)
 8001648:	f000 fdb4 	bl	80021b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 800164e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001650:	4a0c      	ldr	r2, [pc, #48]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 8001652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001656:	6353      	str	r3, [r2, #52]	@ 0x34
 8001658:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 800165a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800165c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001660:	613b      	str	r3, [r7, #16]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4b07      	ldr	r3, [pc, #28]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 8001666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001668:	4a06      	ldr	r2, [pc, #24]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 800166a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800166e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <HAL_PCD_MspInit+0xec>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800167c:	bf00      	nop
 800167e:	37b0      	adds	r7, #176	@ 0xb0
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <NMI_Handler+0x4>

08001694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <HardFault_Handler+0x4>

0800169c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <MemManage_Handler+0x4>

080016a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <BusFault_Handler+0x4>

080016ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <UsageFault_Handler+0x4>

080016b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e2:	f000 f8c3 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016f0:	4802      	ldr	r0, [pc, #8]	@ (80016fc <TIM4_IRQHandler+0x10>)
 80016f2:	f003 f83f 	bl	8004774 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000328 	.word	0x20000328

08001700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001704:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001708:	f000 ff32 	bl	8002570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f004 fa78 	bl	8005c34 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20050000 	.word	0x20050000
 8001770:	00000400 	.word	0x00000400
 8001774:	20000930 	.word	0x20000930
 8001778:	20000a80 	.word	0x20000a80

0800177c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017a4:	f7ff ffea 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480c      	ldr	r0, [pc, #48]	@ (80017dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017aa:	490d      	ldr	r1, [pc, #52]	@ (80017e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017ac:	4a0d      	ldr	r2, [pc, #52]	@ (80017e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0a      	ldr	r2, [pc, #40]	@ (80017e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c0:	4c0a      	ldr	r4, [pc, #40]	@ (80017ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ce:	f004 fa37 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d2:	f7ff f9ed 	bl	8000bb0 <main>
  bx  lr    
 80017d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80017e4:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 80017e8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80017ec:	20000a80 	.word	0x20000a80

080017f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC_IRQHandler>

080017f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f6:	2003      	movs	r0, #3
 80017f8:	f000 f94c 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f000 f805 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001802:	f7ff fcc1 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f967 	bl	8001afe <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f92f 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	@ (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000002c 	.word	0x2000002c
 8001864:	20000034 	.word	0x20000034
 8001868:	20000030 	.word	0x20000030

0800186c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_IncTick+0x20>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x24>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a04      	ldr	r2, [pc, #16]	@ (8001890 <HAL_IncTick+0x24>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	20000034 	.word	0x20000034
 8001890:	20000934 	.word	0x20000934

08001894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return uwTick;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_GetTick+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000934 	.word	0x20000934

080018ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b4:	f7ff ffee 	bl	8001894 <HAL_GetTick>
 80018b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d005      	beq.n	80018d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018c6:	4b0a      	ldr	r3, [pc, #40]	@ (80018f0 <HAL_Delay+0x44>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	461a      	mov	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4413      	add	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d2:	bf00      	nop
 80018d4:	f7ff ffde 	bl	8001894 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d8f7      	bhi.n	80018d4 <HAL_Delay+0x28>
  {
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000034 	.word	0x20000034

080018f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190a:	68ba      	ldr	r2, [r7, #8]
 800190c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001910:	4013      	ands	r3, r2
 8001912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <__NVIC_SetPriorityGrouping+0x44>)
 800191e:	4313      	orrs	r3, r2
 8001920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001922:	4a04      	ldr	r2, [pc, #16]	@ (8001934 <__NVIC_SetPriorityGrouping+0x40>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	60d3      	str	r3, [r2, #12]
}
 8001928:	bf00      	nop
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	e000ed00 	.word	0xe000ed00
 8001938:	05fa0000 	.word	0x05fa0000

0800193c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <__NVIC_GetPriorityGrouping+0x18>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	f003 0307 	and.w	r3, r3, #7
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001966:	2b00      	cmp	r3, #0
 8001968:	db0b      	blt.n	8001982 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	f003 021f 	and.w	r2, r3, #31
 8001970:	4907      	ldr	r1, [pc, #28]	@ (8001990 <__NVIC_EnableIRQ+0x38>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	2001      	movs	r0, #1
 800197a:	fa00 f202 	lsl.w	r2, r0, r2
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000e100 	.word	0xe000e100

08001994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	db0a      	blt.n	80019be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <__NVIC_SetPriority+0x4c>)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	0112      	lsls	r2, r2, #4
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	440b      	add	r3, r1
 80019b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019bc:	e00a      	b.n	80019d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4908      	ldr	r1, [pc, #32]	@ (80019e4 <__NVIC_SetPriority+0x50>)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 030f 	and.w	r3, r3, #15
 80019ca:	3b04      	subs	r3, #4
 80019cc:	0112      	lsls	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	440b      	add	r3, r1
 80019d2:	761a      	strb	r2, [r3, #24]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b089      	sub	sp, #36	@ 0x24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	bf28      	it	cs
 8001a06:	2304      	movcs	r3, #4
 8001a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d902      	bls.n	8001a18 <NVIC_EncodePriority+0x30>
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b03      	subs	r3, #3
 8001a16:	e000      	b.n	8001a1a <NVIC_EncodePriority+0x32>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43da      	mvns	r2, r3
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a30:	f04f 31ff 	mov.w	r1, #4294967295
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	43d9      	mvns	r1, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a40:	4313      	orrs	r3, r2
         );
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3724      	adds	r7, #36	@ 0x24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff8e 	bl	8001994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff29 	bl	80018f4 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff3e 	bl	800193c <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff8e 	bl	80019e8 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5d 	bl	8001994 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff31 	bl	8001958 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e086      	b.n	8001c38 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d106      	bne.n	8001b42 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2223      	movs	r2, #35	@ 0x23
 8001b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f7ff fb47 	bl	80011d0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b3f      	ldr	r3, [pc, #252]	@ (8001c40 <HAL_ETH_Init+0x128>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a3e      	ldr	r2, [pc, #248]	@ (8001c40 <HAL_ETH_Init+0x128>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c40 <HAL_ETH_Init+0x128>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b5a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <HAL_ETH_Init+0x12c>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a39      	ldr	r2, [pc, #228]	@ (8001c44 <HAL_ETH_Init+0x12c>)
 8001b60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b64:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b66:	4b37      	ldr	r3, [pc, #220]	@ (8001c44 <HAL_ETH_Init+0x12c>)
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	4935      	ldr	r1, [pc, #212]	@ (8001c44 <HAL_ETH_Init+0x12c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b74:	4b33      	ldr	r3, [pc, #204]	@ (8001c44 <HAL_ETH_Init+0x12c>)
 8001b76:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b8e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b90:	f7ff fe80 	bl	8001894 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b96:	e011      	b.n	8001bbc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b98:	f7ff fe7c 	bl	8001894 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ba6:	d909      	bls.n	8001bbc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2204      	movs	r2, #4
 8001bac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	22e0      	movs	r2, #224	@ 0xe0
 8001bb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e03d      	b.n	8001c38 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1e4      	bne.n	8001b98 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f97a 	bl	8001ec8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 fa25 	bl	8002024 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 fa7b 	bl	80020d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	461a      	mov	r2, r3
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 f9e3 	bl	8001fb4 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001bfc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_ETH_Init+0x130>)
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001c22:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2210      	movs	r2, #16
 8001c32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40013800 	.word	0x40013800
 8001c48:	00020060 	.word	0x00020060

08001c4c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	4b53      	ldr	r3, [pc, #332]	@ (8001db0 <ETH_SetMACConfig+0x164>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	7b9b      	ldrb	r3, [r3, #14]
 8001c6a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	7c12      	ldrb	r2, [r2, #16]
 8001c70:	2a00      	cmp	r2, #0
 8001c72:	d102      	bne.n	8001c7a <ETH_SetMACConfig+0x2e>
 8001c74:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c78:	e000      	b.n	8001c7c <ETH_SetMACConfig+0x30>
 8001c7a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001c7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	7c52      	ldrb	r2, [r2, #17]
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d102      	bne.n	8001c8c <ETH_SetMACConfig+0x40>
 8001c86:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001c8a:	e000      	b.n	8001c8e <ETH_SetMACConfig+0x42>
 8001c8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c8e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c94:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	7fdb      	ldrb	r3, [r3, #31]
 8001c9a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c9c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ca2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	7f92      	ldrb	r2, [r2, #30]
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d102      	bne.n	8001cb2 <ETH_SetMACConfig+0x66>
 8001cac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cb0:	e000      	b.n	8001cb4 <ETH_SetMACConfig+0x68>
 8001cb2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7f1b      	ldrb	r3, [r3, #28]
 8001cba:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cbc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	791b      	ldrb	r3, [r3, #4]
 8001cc8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d102      	bne.n	8001cdc <ETH_SetMACConfig+0x90>
 8001cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cda:	e000      	b.n	8001cde <ETH_SetMACConfig+0x92>
 8001cdc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cde:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	7bdb      	ldrb	r3, [r3, #15]
 8001ce4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001ce6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cf4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fdcc 	bl	80018ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d32:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d101      	bne.n	8001d42 <ETH_SetMACConfig+0xf6>
 8001d3e:	2280      	movs	r2, #128	@ 0x80
 8001d40:	e000      	b.n	8001d44 <ETH_SetMACConfig+0xf8>
 8001d42:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d44:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d4a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d52:	2a01      	cmp	r2, #1
 8001d54:	d101      	bne.n	8001d5a <ETH_SetMACConfig+0x10e>
 8001d56:	2208      	movs	r2, #8
 8001d58:	e000      	b.n	8001d5c <ETH_SetMACConfig+0x110>
 8001d5a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d5c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d64:	2a01      	cmp	r2, #1
 8001d66:	d101      	bne.n	8001d6c <ETH_SetMACConfig+0x120>
 8001d68:	2204      	movs	r2, #4
 8001d6a:	e000      	b.n	8001d6e <ETH_SetMACConfig+0x122>
 8001d6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d6e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d76:	2a01      	cmp	r2, #1
 8001d78:	d101      	bne.n	8001d7e <ETH_SetMACConfig+0x132>
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	e000      	b.n	8001d80 <ETH_SetMACConfig+0x134>
 8001d7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d80:	4313      	orrs	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68fa      	ldr	r2, [r7, #12]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fd87 	bl	80018ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	fd20810f 	.word	0xfd20810f

08001db4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ec4 <ETH_SetDMAConfig+0x110>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	7b1b      	ldrb	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <ETH_SetDMAConfig+0x2c>
 8001dda:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dde:	e000      	b.n	8001de2 <ETH_SetDMAConfig+0x2e>
 8001de0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	7b5b      	ldrb	r3, [r3, #13]
 8001de6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001de8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	7f52      	ldrb	r2, [r2, #29]
 8001dee:	2a00      	cmp	r2, #0
 8001df0:	d102      	bne.n	8001df8 <ETH_SetDMAConfig+0x44>
 8001df2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001df6:	e000      	b.n	8001dfa <ETH_SetDMAConfig+0x46>
 8001df8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dfa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e02:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e08:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7f1b      	ldrb	r3, [r3, #28]
 8001e0e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e10:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	7f9b      	ldrb	r3, [r3, #30]
 8001e16:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e18:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e1e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e26:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e38:	461a      	mov	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f7ff fd2e 	bl	80018ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e68:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e6e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e74:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e7c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e7e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e84:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e86:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e8c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e9a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f7ff fcff 	bl	80018ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f8de3f23 	.word	0xf8de3f23

08001ec8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b0a6      	sub	sp, #152	@ 0x98
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f30:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f34:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f46:	4619      	mov	r1, r3
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fe7f 	bl	8001c4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f84:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f88:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f8e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff05 	bl	8001db4 <ETH_SetDMAConfig>
}
 8001faa:	bf00      	nop
 8001fac:	3798      	adds	r7, #152	@ 0x98
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3305      	adds	r3, #5
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	021b      	lsls	r3, r3, #8
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	3204      	adds	r2, #4
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	4b11      	ldr	r3, [pc, #68]	@ (800201c <ETH_MACAddressConfig+0x68>)
 8001fd6:	4413      	add	r3, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	061a      	lsls	r2, r3, #24
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3302      	adds	r3, #2
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	4b06      	ldr	r3, [pc, #24]	@ (8002020 <ETH_MACAddressConfig+0x6c>)
 8002006:	4413      	add	r3, r2
 8002008:	461a      	mov	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	6013      	str	r3, [r2, #0]
}
 800200e:	bf00      	nop
 8002010:	371c      	adds	r7, #28
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40028040 	.word	0x40028040
 8002020:	40028044 	.word	0x40028044

08002024 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e03e      	b.n	80020b0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800205c:	68b9      	ldr	r1, [r7, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	3206      	adds	r2, #6
 8002064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d80c      	bhi.n	8002094 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	461a      	mov	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	e004      	b.n	800209e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	461a      	mov	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3301      	adds	r3, #1
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b03      	cmp	r3, #3
 80020b4:	d9bd      	bls.n	8002032 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c8:	611a      	str	r2, [r3, #16]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b085      	sub	sp, #20
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020de:	2300      	movs	r3, #0
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	e048      	b.n	8002176 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	440b      	add	r3, r1
 80020f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002120:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	3212      	adds	r2, #18
 8002142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d80c      	bhi.n	8002166 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6919      	ldr	r1, [r3, #16]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	461a      	mov	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60da      	str	r2, [r3, #12]
 8002164:	e004      	b.n	8002170 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	461a      	mov	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3301      	adds	r3, #1
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d9b3      	bls.n	80020e4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80021a6:	60da      	str	r2, [r3, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	e175      	b.n	80024c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021d4:	2201      	movs	r2, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	f040 8164 	bne.w	80024ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 0303 	and.w	r3, r3, #3
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d005      	beq.n	800220a <HAL_GPIO_Init+0x56>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d130      	bne.n	800226c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d017      	beq.n	80022a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d123      	bne.n	80022fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	08da      	lsrs	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3208      	adds	r2, #8
 80022bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	220f      	movs	r2, #15
 80022cc:	fa02 f303 	lsl.w	r3, r2, r3
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	2203      	movs	r2, #3
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 0203 	and.w	r2, r3, #3
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4313      	orrs	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80be 	beq.w	80024ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233e:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 8002344:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b63      	ldr	r3, [pc, #396]	@ (80024d8 <HAL_GPIO_Init+0x324>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002356:	4a61      	ldr	r2, [pc, #388]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	3302      	adds	r3, #2
 800235e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	220f      	movs	r2, #15
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4013      	ands	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a58      	ldr	r2, [pc, #352]	@ (80024e0 <HAL_GPIO_Init+0x32c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d037      	beq.n	80023f2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a57      	ldr	r2, [pc, #348]	@ (80024e4 <HAL_GPIO_Init+0x330>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d031      	beq.n	80023ee <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a56      	ldr	r2, [pc, #344]	@ (80024e8 <HAL_GPIO_Init+0x334>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a55      	ldr	r2, [pc, #340]	@ (80024ec <HAL_GPIO_Init+0x338>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d025      	beq.n	80023e6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a54      	ldr	r2, [pc, #336]	@ (80024f0 <HAL_GPIO_Init+0x33c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d01f      	beq.n	80023e2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a53      	ldr	r2, [pc, #332]	@ (80024f4 <HAL_GPIO_Init+0x340>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x22a>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a52      	ldr	r2, [pc, #328]	@ (80024f8 <HAL_GPIO_Init+0x344>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x226>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a51      	ldr	r2, [pc, #324]	@ (80024fc <HAL_GPIO_Init+0x348>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x222>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <HAL_GPIO_Init+0x34c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x21e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002504 <HAL_GPIO_Init+0x350>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x21a>
 80023ca:	2309      	movs	r3, #9
 80023cc:	e012      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ce:	230a      	movs	r3, #10
 80023d0:	e010      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d2:	2308      	movs	r3, #8
 80023d4:	e00e      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023d6:	2307      	movs	r3, #7
 80023d8:	e00c      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023da:	2306      	movs	r3, #6
 80023dc:	e00a      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023de:	2305      	movs	r3, #5
 80023e0:	e008      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e006      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023e6:	2303      	movs	r3, #3
 80023e8:	e004      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ea:	2302      	movs	r3, #2
 80023ec:	e002      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x240>
 80023f2:	2300      	movs	r3, #0
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f002 0203 	and.w	r2, r2, #3
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	4093      	lsls	r3, r2
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002404:	4935      	ldr	r1, [pc, #212]	@ (80024dc <HAL_GPIO_Init+0x328>)
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	43db      	mvns	r3, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4013      	ands	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002436:	4a34      	ldr	r2, [pc, #208]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	43db      	mvns	r3, r3
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	4013      	ands	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002460:	4a29      	ldr	r2, [pc, #164]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002466:	4b28      	ldr	r3, [pc, #160]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800248a:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_GPIO_Init+0x354>)
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002490:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_GPIO_Init+0x354>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d003      	beq.n	80024b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024b4:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <HAL_GPIO_Init+0x354>)
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	2b0f      	cmp	r3, #15
 80024c4:	f67f ae86 	bls.w	80021d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3724      	adds	r7, #36	@ 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40013800 	.word	0x40013800
 80024e0:	40020000 	.word	0x40020000
 80024e4:	40020400 	.word	0x40020400
 80024e8:	40020800 	.word	0x40020800
 80024ec:	40020c00 	.word	0x40020c00
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40021400 	.word	0x40021400
 80024f8:	40021800 	.word	0x40021800
 80024fc:	40021c00 	.word	0x40021c00
 8002500:	40022000 	.word	0x40022000
 8002504:	40022400 	.word	0x40022400
 8002508:	40013c00 	.word	0x40013c00

0800250c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	460b      	mov	r3, r1
 8002516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691a      	ldr	r2, [r3, #16]
 800251c:	887b      	ldrh	r3, [r7, #2]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002524:	2301      	movs	r3, #1
 8002526:	73fb      	strb	r3, [r7, #15]
 8002528:	e001      	b.n	800252e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	807b      	strh	r3, [r7, #2]
 8002548:	4613      	mov	r3, r2
 800254a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800254c:	787b      	ldrb	r3, [r7, #1]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002552:	887a      	ldrh	r2, [r7, #2]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002558:	e003      	b.n	8002562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800255a:	887b      	ldrh	r3, [r7, #2]
 800255c:	041a      	lsls	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	619a      	str	r2, [r3, #24]
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
	...

08002570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800257a:	4b08      	ldr	r3, [pc, #32]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	4013      	ands	r3, r2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002588:	88fb      	ldrh	r3, [r7, #6]
 800258a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f806 	bl	80025a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013c00 	.word	0x40013c00

080025a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
	...

080025b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e08b      	b.n	80026e2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7fe feae 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2224      	movs	r2, #36	@ 0x24
 80025e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002608:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002618:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d107      	bne.n	8002632 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	e006      	b.n	8002640 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800263e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d108      	bne.n	800265a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	e007      	b.n	800266a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6859      	ldr	r1, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <HAL_I2C_Init+0x134>)
 8002676:	430b      	orrs	r3, r1
 8002678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69d9      	ldr	r1, [r3, #28]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	02008000 	.word	0x02008000

080026f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
 8002700:	4613      	mov	r3, r2
 8002702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b20      	cmp	r3, #32
 800270e:	f040 80fd 	bne.w	800290c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_I2C_Master_Transmit+0x30>
 800271c:	2302      	movs	r3, #2
 800271e:	e0f6      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002728:	f7ff f8b4 	bl	8001894 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2319      	movs	r3, #25
 8002734:	2201      	movs	r2, #1
 8002736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f914 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e0e1      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2221      	movs	r2, #33	@ 0x21
 800274e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2210      	movs	r2, #16
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2bff      	cmp	r3, #255	@ 0xff
 800277a:	d906      	bls.n	800278a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	22ff      	movs	r2, #255	@ 0xff
 8002780:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002782:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	e007      	b.n	800279a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002794:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002798:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d024      	beq.n	80027ec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	781a      	ldrb	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b01      	subs	r3, #1
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	4b4e      	ldr	r3, [pc, #312]	@ (8002918 <HAL_I2C_Master_Transmit+0x228>)
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 fa83 	bl	8002cf0 <I2C_TransferConfig>
 80027ea:	e066      	b.n	80028ba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	8979      	ldrh	r1, [r7, #10]
 80027f4:	4b48      	ldr	r3, [pc, #288]	@ (8002918 <HAL_I2C_Master_Transmit+0x228>)
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 fa78 	bl	8002cf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002800:	e05b      	b.n	80028ba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	6a39      	ldr	r1, [r7, #32]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f907 	bl	8002a1a <I2C_WaitOnTXISFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e07b      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d034      	beq.n	80028ba <HAL_I2C_Master_Transmit+0x1ca>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d130      	bne.n	80028ba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2200      	movs	r2, #0
 8002860:	2180      	movs	r1, #128	@ 0x80
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f880 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e04d      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	2bff      	cmp	r3, #255	@ 0xff
 800287a:	d90e      	bls.n	800289a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002886:	b2da      	uxtb	r2, r3
 8002888:	8979      	ldrh	r1, [r7, #10]
 800288a:	2300      	movs	r3, #0
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 fa2c 	bl	8002cf0 <I2C_TransferConfig>
 8002898:	e00f      	b.n	80028ba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	2300      	movs	r3, #0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa1b 	bl	8002cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d19e      	bne.n	8002802 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	6a39      	ldr	r1, [r7, #32]
 80028c8:	68f8      	ldr	r0, [r7, #12]
 80028ca:	f000 f8ed 	bl	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e01a      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2220      	movs	r2, #32
 80028de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6859      	ldr	r1, [r3, #4]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <HAL_I2C_Master_Transmit+0x22c>)
 80028ec:	400b      	ands	r3, r1
 80028ee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	80002000 	.word	0x80002000
 800291c:	fe00e800 	.word	0xfe00e800

08002920 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b02      	cmp	r3, #2
 8002934:	d103      	bne.n	800293e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2200      	movs	r2, #0
 800293c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d007      	beq.n	800295c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	619a      	str	r2, [r3, #24]
  }
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002978:	e03b      	b.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f8d6 	bl	8002b30 <I2C_IsErrorOccurred>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e041      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002994:	d02d      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002996:	f7fe ff7d 	bl	8001894 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d302      	bcc.n	80029ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d122      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4013      	ands	r3, r2
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	bf0c      	ite	eq
 80029bc:	2301      	moveq	r3, #1
 80029be:	2300      	movne	r3, #0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d113      	bne.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00f      	b.n	8002a12 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	699a      	ldr	r2, [r3, #24]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4013      	ands	r3, r2
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	bf0c      	ite	eq
 8002a02:	2301      	moveq	r3, #1
 8002a04:	2300      	movne	r3, #0
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d0b4      	beq.n	800297a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a26:	e033      	b.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	68b9      	ldr	r1, [r7, #8]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f87f 	bl	8002b30 <I2C_IsErrorOccurred>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e031      	b.n	8002aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a42:	d025      	beq.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a44:	f7fe ff26 	bl	8001894 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d302      	bcc.n	8002a5a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d11a      	bne.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d013      	beq.n	8002a90 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2220      	movs	r2, #32
 8002a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e007      	b.n	8002aa0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d1c4      	bne.n	8002a28 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab4:	e02f      	b.n	8002b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f838 	bl	8002b30 <I2C_IsErrorOccurred>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e02d      	b.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7fe fee3 	bl	8001894 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11a      	bne.n	8002b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d013      	beq.n	8002b16 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e007      	b.n	8002b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d1c8      	bne.n	8002ab6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b08a      	sub	sp, #40	@ 0x28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f003 0310 	and.w	r3, r3, #16
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d068      	beq.n	8002c2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2210      	movs	r2, #16
 8002b62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b64:	e049      	b.n	8002bfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d045      	beq.n	8002bfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fe91 	bl	8001894 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <I2C_IsErrorOccurred+0x54>
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d13a      	bne.n	8002bfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ba6:	d121      	bne.n	8002bec <I2C_IsErrorOccurred+0xbc>
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bae:	d01d      	beq.n	8002bec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d01a      	beq.n	8002bec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bc6:	f7fe fe65 	bl	8001894 <HAL_GetTick>
 8002bca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bcc:	e00e      	b.n	8002bec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bce:	f7fe fe61 	bl	8001894 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b19      	cmp	r3, #25
 8002bda:	d907      	bls.n	8002bec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bdc:	6a3b      	ldr	r3, [r7, #32]
 8002bde:	f043 0320 	orr.w	r3, r3, #32
 8002be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002bea:	e006      	b.n	8002bfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0320 	and.w	r3, r3, #32
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d1e9      	bne.n	8002bce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d003      	beq.n	8002c10 <I2C_IsErrorOccurred+0xe0>
 8002c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0aa      	beq.n	8002b66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d103      	bne.n	8002c20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00b      	beq.n	8002c58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f043 0308 	orr.w	r3, r3, #8
 8002c68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f043 0302 	orr.w	r3, r3, #2
 8002c8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d01c      	beq.n	8002cde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fe3b 	bl	8002920 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <I2C_IsErrorOccurred+0x1bc>)
 8002cb6:	400b      	ands	r3, r1
 8002cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3728      	adds	r7, #40	@ 0x28
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	0d5b      	lsrs	r3, r3, #21
 8002d2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d2e:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <I2C_TransferConfig+0x60>)
 8002d30:	430b      	orrs	r3, r1
 8002d32:	43db      	mvns	r3, r3
 8002d34:	ea02 0103 	and.w	r1, r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	03ff63ff 	.word	0x03ff63ff

08002d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d138      	bne.n	8002ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e032      	b.n	8002dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	@ 0x24
 8002d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d139      	bne.n	8002e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d101      	bne.n	8002e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e033      	b.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2224      	movs	r2, #36	@ 0x24
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e000      	b.n	8002e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e74:	2302      	movs	r3, #2
  }
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b086      	sub	sp, #24
 8002e86:	af02      	add	r7, sp, #8
 8002e88:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e108      	b.n	80030a6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7fe fb72 	bl	8001598 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ec2:	d102      	bne.n	8002eca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fbde 	bl	8005690 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7c1a      	ldrb	r2, [r3, #16]
 8002edc:	f88d 2000 	strb.w	r2, [sp]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ee4:	f002 fb7a 	bl	80055dc <USB_CoreInit>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d005      	beq.n	8002efa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e0d5      	b.n	80030a6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 fbd6 	bl	80056b2 <USB_SetCurrentMode>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0c6      	b.n	80030a6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e04a      	b.n	8002fb4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f1e:	7bfa      	ldrb	r2, [r7, #15]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3315      	adds	r3, #21
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	3314      	adds	r3, #20
 8002f42:	7bfa      	ldrb	r2, [r7, #15]
 8002f44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	b298      	uxth	r0, r3
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	332e      	adds	r3, #46	@ 0x2e
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	331c      	adds	r3, #28
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3320      	adds	r3, #32
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f9a:	7bfa      	ldrb	r2, [r7, #15]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3324      	adds	r3, #36	@ 0x24
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	73fb      	strb	r3, [r7, #15]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	791b      	ldrb	r3, [r3, #4]
 8002fb8:	7bfa      	ldrb	r2, [r7, #15]
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d3af      	bcc.n	8002f1e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
 8002fc2:	e044      	b.n	800304e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002fc4:	7bfa      	ldrb	r2, [r7, #15]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002fda:	7bfa      	ldrb	r2, [r7, #15]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002fec:	7bfa      	ldrb	r2, [r7, #15]
 8002fee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	3301      	adds	r3, #1
 800304c:	73fb      	strb	r3, [r7, #15]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	429a      	cmp	r2, r3
 8003056:	d3b5      	bcc.n	8002fc4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7c1a      	ldrb	r2, [r3, #16]
 8003060:	f88d 2000 	strb.w	r2, [sp]
 8003064:	3304      	adds	r3, #4
 8003066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003068:	f002 fb70 	bl	800574c <USB_DevInit>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d005      	beq.n	800307e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e013      	b.n	80030a6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	7b1b      	ldrb	r3, [r3, #12]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d102      	bne.n	800309a <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f80b 	bl	80030b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f002 fd2b 	bl	8005afa <USB_DevDisconnect>

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030de:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3714      	adds	r7, #20
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	10000003 	.word	0x10000003

080030f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030fc:	4b05      	ldr	r3, [pc, #20]	@ (8003114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a04      	ldr	r2, [pc, #16]	@ (8003114 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003106:	6013      	str	r3, [r2, #0]
}
 8003108:	bf00      	nop
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40007000 	.word	0x40007000

08003118 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	4b23      	ldr	r3, [pc, #140]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800312c:	6413      	str	r3, [r2, #64]	@ 0x40
 800312e:	4b20      	ldr	r3, [pc, #128]	@ (80031b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800313a:	4b1e      	ldr	r3, [pc, #120]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1d      	ldr	r2, [pc, #116]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003144:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003146:	f7fe fba5 	bl	8001894 <HAL_GetTick>
 800314a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800314c:	e009      	b.n	8003162 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800314e:	f7fe fba1 	bl	8001894 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800315c:	d901      	bls.n	8003162 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e022      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003162:	4b14      	ldr	r3, [pc, #80]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316e:	d1ee      	bne.n	800314e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003170:	4b10      	ldr	r3, [pc, #64]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a0f      	ldr	r2, [pc, #60]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800317a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f7fe fb8a 	bl	8001894 <HAL_GetTick>
 8003180:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003182:	e009      	b.n	8003198 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003184:	f7fe fb86 	bl	8001894 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003192:	d901      	bls.n	8003198 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e007      	b.n	80031a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003198:	4b06      	ldr	r3, [pc, #24]	@ (80031b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80031a4:	d1ee      	bne.n	8003184 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	40007000 	.word	0x40007000

080031b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e291      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8087 	beq.w	80032ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031dc:	4b96      	ldr	r3, [pc, #600]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 030c 	and.w	r3, r3, #12
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d00c      	beq.n	8003202 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e8:	4b93      	ldr	r3, [pc, #588]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d112      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
 80031f4:	4b90      	ldr	r3, [pc, #576]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003200:	d10b      	bne.n	800321a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003202:	4b8d      	ldr	r3, [pc, #564]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d06c      	beq.n	80032e8 <HAL_RCC_OscConfig+0x130>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d168      	bne.n	80032e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e26b      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x7a>
 8003224:	4b84      	ldr	r3, [pc, #528]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a83      	ldr	r2, [pc, #524]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800322a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e02e      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x9c>
 800323a:	4b7f      	ldr	r3, [pc, #508]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a7e      	ldr	r2, [pc, #504]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003240:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b7c      	ldr	r3, [pc, #496]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a7b      	ldr	r2, [pc, #492]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800324c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0xc0>
 800325e:	4b76      	ldr	r3, [pc, #472]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a75      	ldr	r2, [pc, #468]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b73      	ldr	r3, [pc, #460]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a72      	ldr	r2, [pc, #456]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xd8>
 8003278:	4b6f      	ldr	r3, [pc, #444]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6e      	ldr	r2, [pc, #440]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b6c      	ldr	r3, [pc, #432]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a6b      	ldr	r2, [pc, #428]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe fafc 	bl	8001894 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe faf8 	bl	8001894 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e21f      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe8>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fae8 	bl	8001894 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c8:	f7fe fae4 	bl	8001894 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e20b      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b57      	ldr	r3, [pc, #348]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x110>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d069      	beq.n	80033ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f6:	4b50      	ldr	r3, [pc, #320]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b4d      	ldr	r3, [pc, #308]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x190>
 800330e:	4b4a      	ldr	r3, [pc, #296]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b47      	ldr	r3, [pc, #284]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x17a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1df      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b41      	ldr	r3, [pc, #260]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	493d      	ldr	r1, [pc, #244]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e040      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d023      	beq.n	8003398 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b39      	ldr	r3, [pc, #228]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a38      	ldr	r2, [pc, #224]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335c:	f7fe fa9a 	bl	8001894 <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003364:	f7fe fa96 	bl	8001894 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e1bd      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b30      	ldr	r3, [pc, #192]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	4929      	ldr	r1, [pc, #164]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
 8003396:	e018      	b.n	80033ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003398:	4b27      	ldr	r3, [pc, #156]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a26      	ldr	r2, [pc, #152]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 800339e:	f023 0301 	bic.w	r3, r3, #1
 80033a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a4:	f7fe fa76 	bl	8001894 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ac:	f7fe fa72 	bl	8001894 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e199      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	4b1e      	ldr	r3, [pc, #120]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d038      	beq.n	8003448 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033de:	4b16      	ldr	r3, [pc, #88]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80033e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033e2:	4a15      	ldr	r2, [pc, #84]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe fa53 	bl	8001894 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe fa4f 	bl	8001894 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e176      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003406:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x23a>
 8003410:	e01a      	b.n	8003448 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003416:	4a08      	ldr	r2, [pc, #32]	@ (8003438 <HAL_RCC_OscConfig+0x280>)
 8003418:	f023 0301 	bic.w	r3, r3, #1
 800341c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341e:	f7fe fa39 	bl	8001894 <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	e00a      	b.n	800343c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003426:	f7fe fa35 	bl	8001894 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d903      	bls.n	800343c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e15c      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
 8003438:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800343c:	4b91      	ldr	r3, [pc, #580]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 800343e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003440:	f003 0302 	and.w	r3, r3, #2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ee      	bne.n	8003426 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80a4 	beq.w	800359e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003456:	4b8b      	ldr	r3, [pc, #556]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10d      	bne.n	800347e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003462:	4b88      	ldr	r3, [pc, #544]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	4a87      	ldr	r2, [pc, #540]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346c:	6413      	str	r3, [r2, #64]	@ 0x40
 800346e:	4b85      	ldr	r3, [pc, #532]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003476:	60bb      	str	r3, [r7, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347e:	4b82      	ldr	r3, [pc, #520]	@ (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003486:	2b00      	cmp	r3, #0
 8003488:	d118      	bne.n	80034bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800348a:	4b7f      	ldr	r3, [pc, #508]	@ (8003688 <HAL_RCC_OscConfig+0x4d0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7e      	ldr	r2, [pc, #504]	@ (8003688 <HAL_RCC_OscConfig+0x4d0>)
 8003490:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003496:	f7fe f9fd 	bl	8001894 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800349e:	f7fe f9f9 	bl	8001894 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b64      	cmp	r3, #100	@ 0x64
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e120      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	4b75      	ldr	r3, [pc, #468]	@ (8003688 <HAL_RCC_OscConfig+0x4d0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0f0      	beq.n	800349e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x31a>
 80034c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80034d0:	e02d      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x33c>
 80034da:	4b6a      	ldr	r3, [pc, #424]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034de:	4a69      	ldr	r2, [pc, #420]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	f023 0301 	bic.w	r3, r3, #1
 80034e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e6:	4b67      	ldr	r3, [pc, #412]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	4a66      	ldr	r2, [pc, #408]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	f023 0304 	bic.w	r3, r3, #4
 80034f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x35e>
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003500:	4a60      	ldr	r2, [pc, #384]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	@ 0x70
 8003508:	4b5e      	ldr	r3, [pc, #376]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800350c:	4a5d      	ldr	r2, [pc, #372]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	@ 0x70
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x376>
 8003516:	4b5b      	ldr	r3, [pc, #364]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800351a:	4a5a      	ldr	r2, [pc, #360]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	@ 0x70
 8003522:	4b58      	ldr	r3, [pc, #352]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003526:	4a57      	ldr	r2, [pc, #348]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fe f9ad 	bl	8001894 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fe f9a9 	bl	8001894 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0ce      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b4b      	ldr	r3, [pc, #300]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x386>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003562:	f7fe f997 	bl	8001894 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fe f993 	bl	8001894 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0b8      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b40      	ldr	r3, [pc, #256]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b3c      	ldr	r3, [pc, #240]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003596:	4a3b      	ldr	r2, [pc, #236]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80a4 	beq.w	80036f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	4b36      	ldr	r3, [pc, #216]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d06b      	beq.n	800368c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d149      	bne.n	8003650 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b31      	ldr	r3, [pc, #196]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a30      	ldr	r2, [pc, #192]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80035c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe f964 	bl	8001894 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035d0:	f7fe f960 	bl	8001894 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e087      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	4b28      	ldr	r3, [pc, #160]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69da      	ldr	r2, [r3, #28]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	041b      	lsls	r3, r3, #16
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	061b      	lsls	r3, r3, #24
 8003612:	4313      	orrs	r3, r2
 8003614:	4a1b      	ldr	r2, [pc, #108]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003616:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800361a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800361c:	4b19      	ldr	r3, [pc, #100]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7fe f934 	bl	8001894 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003630:	f7fe f930 	bl	8001894 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e057      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b10      	ldr	r3, [pc, #64]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x478>
 800364e:	e04f      	b.n	80036f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a0b      	ldr	r2, [pc, #44]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe f91a 	bl	8001894 <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003664:	f7fe f916 	bl	8001894 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e03d      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_RCC_OscConfig+0x4cc>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f0      	bne.n	8003664 <HAL_RCC_OscConfig+0x4ac>
 8003682:	e035      	b.n	80036f0 <HAL_RCC_OscConfig+0x538>
 8003684:	40023800 	.word	0x40023800
 8003688:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800368c:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <HAL_RCC_OscConfig+0x544>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d028      	beq.n	80036ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d121      	bne.n	80036ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036bc:	4013      	ands	r3, r2
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d111      	bne.n	80036ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d2:	085b      	lsrs	r3, r3, #1
 80036d4:	3b01      	subs	r3, #1
 80036d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	40023800 	.word	0x40023800

08003700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e0d0      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003718:	4b6a      	ldr	r3, [pc, #424]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d910      	bls.n	8003748 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b67      	ldr	r3, [pc, #412]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 020f 	bic.w	r2, r3, #15
 800372e:	4965      	ldr	r1, [pc, #404]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b63      	ldr	r3, [pc, #396]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0b8      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003760:	4b59      	ldr	r3, [pc, #356]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	4a58      	ldr	r2, [pc, #352]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003766:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800376a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003778:	4b53      	ldr	r3, [pc, #332]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a52      	ldr	r2, [pc, #328]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 800377e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003782:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003784:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	494d      	ldr	r1, [pc, #308]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d040      	beq.n	8003824 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d115      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e07f      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d107      	bne.n	80037d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d109      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e073      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d2:	4b3d      	ldr	r3, [pc, #244]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e06b      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e2:	4b39      	ldr	r3, [pc, #228]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f023 0203 	bic.w	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4936      	ldr	r1, [pc, #216]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f4:	f7fe f84e 	bl	8001894 <HAL_GetTick>
 80037f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	e00a      	b.n	8003812 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037fc:	f7fe f84a 	bl	8001894 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e053      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003812:	4b2d      	ldr	r3, [pc, #180]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 020c 	and.w	r2, r3, #12
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	429a      	cmp	r2, r3
 8003822:	d1eb      	bne.n	80037fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003824:	4b27      	ldr	r3, [pc, #156]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	429a      	cmp	r2, r3
 8003830:	d210      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003832:	4b24      	ldr	r3, [pc, #144]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f023 020f 	bic.w	r2, r3, #15
 800383a:	4922      	ldr	r1, [pc, #136]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003842:	4b20      	ldr	r3, [pc, #128]	@ (80038c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 030f 	and.w	r3, r3, #15
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e032      	b.n	80038ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003860:	4b19      	ldr	r3, [pc, #100]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	4916      	ldr	r1, [pc, #88]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800387e:	4b12      	ldr	r3, [pc, #72]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	490e      	ldr	r1, [pc, #56]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003892:	f000 f821 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 8003896:	4602      	mov	r2, r0
 8003898:	4b0b      	ldr	r3, [pc, #44]	@ (80038c8 <HAL_RCC_ClockConfig+0x1c8>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	091b      	lsrs	r3, r3, #4
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	490a      	ldr	r1, [pc, #40]	@ (80038cc <HAL_RCC_ClockConfig+0x1cc>)
 80038a4:	5ccb      	ldrb	r3, [r1, r3]
 80038a6:	fa22 f303 	lsr.w	r3, r2, r3
 80038aa:	4a09      	ldr	r2, [pc, #36]	@ (80038d0 <HAL_RCC_ClockConfig+0x1d0>)
 80038ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038ae:	4b09      	ldr	r3, [pc, #36]	@ (80038d4 <HAL_RCC_ClockConfig+0x1d4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd ffaa 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	40023c00 	.word	0x40023c00
 80038c8:	40023800 	.word	0x40023800
 80038cc:	080065f0 	.word	0x080065f0
 80038d0:	2000002c 	.word	0x2000002c
 80038d4:	20000030 	.word	0x20000030

080038d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038dc:	b094      	sub	sp, #80	@ 0x50
 80038de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e4:	2300      	movs	r3, #0
 80038e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038e8:	2300      	movs	r3, #0
 80038ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038f0:	4b79      	ldr	r3, [pc, #484]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 030c 	and.w	r3, r3, #12
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d00d      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x40>
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	f200 80e1 	bhi.w	8003ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x34>
 8003906:	2b04      	cmp	r3, #4
 8003908:	d003      	beq.n	8003912 <HAL_RCC_GetSysClockFreq+0x3a>
 800390a:	e0db      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800390c:	4b73      	ldr	r3, [pc, #460]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x204>)
 800390e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003910:	e0db      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003912:	4b73      	ldr	r3, [pc, #460]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003914:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003916:	e0d8      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003918:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003922:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d063      	beq.n	80039f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	099b      	lsrs	r3, r3, #6
 8003934:	2200      	movs	r2, #0
 8003936:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003938:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003940:	633b      	str	r3, [r7, #48]	@ 0x30
 8003942:	2300      	movs	r3, #0
 8003944:	637b      	str	r3, [r7, #52]	@ 0x34
 8003946:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	f04f 0000 	mov.w	r0, #0
 8003952:	f04f 0100 	mov.w	r1, #0
 8003956:	0159      	lsls	r1, r3, #5
 8003958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800395c:	0150      	lsls	r0, r2, #5
 800395e:	4602      	mov	r2, r0
 8003960:	460b      	mov	r3, r1
 8003962:	4621      	mov	r1, r4
 8003964:	1a51      	subs	r1, r2, r1
 8003966:	6139      	str	r1, [r7, #16]
 8003968:	4629      	mov	r1, r5
 800396a:	eb63 0301 	sbc.w	r3, r3, r1
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800397c:	4659      	mov	r1, fp
 800397e:	018b      	lsls	r3, r1, #6
 8003980:	4651      	mov	r1, sl
 8003982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003986:	4651      	mov	r1, sl
 8003988:	018a      	lsls	r2, r1, #6
 800398a:	4651      	mov	r1, sl
 800398c:	ebb2 0801 	subs.w	r8, r2, r1
 8003990:	4659      	mov	r1, fp
 8003992:	eb63 0901 	sbc.w	r9, r3, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039aa:	4690      	mov	r8, r2
 80039ac:	4699      	mov	r9, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	eb18 0303 	adds.w	r3, r8, r3
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	462b      	mov	r3, r5
 80039b8:	eb49 0303 	adc.w	r3, r9, r3
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039ca:	4629      	mov	r1, r5
 80039cc:	024b      	lsls	r3, r1, #9
 80039ce:	4621      	mov	r1, r4
 80039d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039d4:	4621      	mov	r1, r4
 80039d6:	024a      	lsls	r2, r1, #9
 80039d8:	4610      	mov	r0, r2
 80039da:	4619      	mov	r1, r3
 80039dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039de:	2200      	movs	r2, #0
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039e8:	f7fc fc6a 	bl	80002c0 <__aeabi_uldivmod>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4613      	mov	r3, r2
 80039f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039f4:	e058      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	2200      	movs	r2, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	4611      	mov	r1, r2
 8003a02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a06:	623b      	str	r3, [r7, #32]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a10:	4642      	mov	r2, r8
 8003a12:	464b      	mov	r3, r9
 8003a14:	f04f 0000 	mov.w	r0, #0
 8003a18:	f04f 0100 	mov.w	r1, #0
 8003a1c:	0159      	lsls	r1, r3, #5
 8003a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a22:	0150      	lsls	r0, r2, #5
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4641      	mov	r1, r8
 8003a2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a2e:	4649      	mov	r1, r9
 8003a30:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a48:	ebb2 040a 	subs.w	r4, r2, sl
 8003a4c:	eb63 050b 	sbc.w	r5, r3, fp
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	00eb      	lsls	r3, r5, #3
 8003a5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a5e:	00e2      	lsls	r2, r4, #3
 8003a60:	4614      	mov	r4, r2
 8003a62:	461d      	mov	r5, r3
 8003a64:	4643      	mov	r3, r8
 8003a66:	18e3      	adds	r3, r4, r3
 8003a68:	603b      	str	r3, [r7, #0]
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	eb45 0303 	adc.w	r3, r5, r3
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a7e:	4629      	mov	r1, r5
 8003a80:	028b      	lsls	r3, r1, #10
 8003a82:	4621      	mov	r1, r4
 8003a84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a88:	4621      	mov	r1, r4
 8003a8a:	028a      	lsls	r2, r1, #10
 8003a8c:	4610      	mov	r0, r2
 8003a8e:	4619      	mov	r1, r3
 8003a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a92:	2200      	movs	r2, #0
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	61fa      	str	r2, [r7, #28]
 8003a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9c:	f7fc fc10 	bl	80002c0 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	0c1b      	lsrs	r3, r3, #16
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003aba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003abc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3750      	adds	r7, #80	@ 0x50
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	007a1200 	.word	0x007a1200

08003ae4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae8:	4b03      	ldr	r3, [pc, #12]	@ (8003af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	2000002c 	.word	0x2000002c

08003afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b00:	f7ff fff0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	0a9b      	lsrs	r3, r3, #10
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	@ (8003b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40023800 	.word	0x40023800
 8003b20:	08006600 	.word	0x08006600

08003b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b28:	f7ff ffdc 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0b5b      	lsrs	r3, r3, #13
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	@ (8003b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08006600 	.word	0x08006600

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b74:	4b69      	ldr	r3, [pc, #420]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	4a68      	ldr	r2, [pc, #416]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b7e:	6093      	str	r3, [r2, #8]
 8003b80:	4b66      	ldr	r3, [pc, #408]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b88:	4964      	ldr	r1, [pc, #400]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d017      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba6:	4b5d      	ldr	r3, [pc, #372]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb4:	4959      	ldr	r1, [pc, #356]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bc4:	d101      	bne.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d017      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003be2:	4b4e      	ldr	r3, [pc, #312]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf0:	494a      	ldr	r1, [pc, #296]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c00:	d101      	bne.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f000 808b 	beq.w	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c30:	4b3a      	ldr	r3, [pc, #232]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c34:	4a39      	ldr	r2, [pc, #228]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c3c:	4b37      	ldr	r3, [pc, #220]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c48:	4b35      	ldr	r3, [pc, #212]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a34      	ldr	r2, [pc, #208]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c54:	f7fd fe1e 	bl	8001894 <HAL_GetTick>
 8003c58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c5c:	f7fd fe1a 	bl	8001894 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e357      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c7a:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d035      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d02e      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c98:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cae:	4b1b      	ldr	r3, [pc, #108]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cba:	4a18      	ldr	r2, [pc, #96]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cc0:	4b16      	ldr	r3, [pc, #88]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d114      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fd fde2 	bl	8001894 <HAL_GetTick>
 8003cd0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fd fdde 	bl	8001894 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e319      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cea:	4b0c      	ldr	r3, [pc, #48]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ee      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d02:	d111      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d04:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d10:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d12:	400b      	ands	r3, r1
 8003d14:	4901      	ldr	r1, [pc, #4]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	608b      	str	r3, [r1, #8]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	0ffffcff 	.word	0x0ffffcff
 8003d28:	4baa      	ldr	r3, [pc, #680]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	4aa9      	ldr	r2, [pc, #676]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d32:	6093      	str	r3, [r2, #8]
 8003d34:	4ba7      	ldr	r3, [pc, #668]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d40:	49a4      	ldr	r1, [pc, #656]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0310 	and.w	r3, r3, #16
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d010      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d52:	4ba0      	ldr	r3, [pc, #640]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d58:	4a9e      	ldr	r2, [pc, #632]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d62:	4b9c      	ldr	r3, [pc, #624]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d6c:	4999      	ldr	r1, [pc, #612]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d80:	4b94      	ldr	r3, [pc, #592]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d86:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d8e:	4991      	ldr	r1, [pc, #580]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00a      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003da2:	4b8c      	ldr	r3, [pc, #560]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003db0:	4988      	ldr	r1, [pc, #544]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00a      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dc4:	4b83      	ldr	r3, [pc, #524]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd2:	4980      	ldr	r1, [pc, #512]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003de6:	4b7b      	ldr	r3, [pc, #492]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df4:	4977      	ldr	r1, [pc, #476]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00a      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e08:	4b72      	ldr	r3, [pc, #456]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0e:	f023 0203 	bic.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e16:	496f      	ldr	r1, [pc, #444]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	f023 020c 	bic.w	r2, r3, #12
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e38:	4966      	ldr	r1, [pc, #408]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00a      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e5a:	495e      	ldr	r1, [pc, #376]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e6e:	4b59      	ldr	r3, [pc, #356]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e74:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e7c:	4955      	ldr	r1, [pc, #340]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00a      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e90:	4b50      	ldr	r3, [pc, #320]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	494d      	ldr	r1, [pc, #308]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00a      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eb2:	4b48      	ldr	r3, [pc, #288]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	4944      	ldr	r1, [pc, #272]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	493c      	ldr	r1, [pc, #240]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ef6:	4b37      	ldr	r3, [pc, #220]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f04:	4933      	ldr	r1, [pc, #204]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f18:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f26:	492b      	ldr	r1, [pc, #172]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d011      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f3a:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f40:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f48:	4922      	ldr	r1, [pc, #136]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f58:	d101      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7a:	4b16      	ldr	r3, [pc, #88]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f80:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f88:	4912      	ldr	r1, [pc, #72]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fac:	4909      	ldr	r1, [pc, #36]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d006      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80d9 	beq.w	800417a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc8:	4b02      	ldr	r3, [pc, #8]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a01      	ldr	r2, [pc, #4]	@ (8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fd2:	e001      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fda:	f7fd fc5b 	bl	8001894 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe2:	f7fd fc57 	bl	8001894 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b64      	cmp	r3, #100	@ 0x64
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e194      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff4:	4b6c      	ldr	r3, [pc, #432]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d021      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d11d      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004014:	4b64      	ldr	r3, [pc, #400]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800401a:	0c1b      	lsrs	r3, r3, #16
 800401c:	f003 0303 	and.w	r3, r3, #3
 8004020:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004028:	0e1b      	lsrs	r3, r3, #24
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	019a      	lsls	r2, r3, #6
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	041b      	lsls	r3, r3, #16
 800403a:	431a      	orrs	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	061b      	lsls	r3, r3, #24
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	071b      	lsls	r3, r3, #28
 8004048:	4957      	ldr	r1, [pc, #348]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800404a:	4313      	orrs	r3, r2
 800404c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800406e:	2b00      	cmp	r3, #0
 8004070:	d02e      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407a:	d129      	bne.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800407c:	4b4a      	ldr	r3, [pc, #296]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800408a:	4b47      	ldr	r3, [pc, #284]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800408c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004090:	0f1b      	lsrs	r3, r3, #28
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	019a      	lsls	r2, r3, #6
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	071b      	lsls	r3, r3, #28
 80040b0:	493d      	ldr	r1, [pc, #244]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b8:	4b3b      	ldr	r3, [pc, #236]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040be:	f023 021f 	bic.w	r2, r3, #31
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	3b01      	subs	r3, #1
 80040c8:	4937      	ldr	r1, [pc, #220]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01d      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040dc:	4b32      	ldr	r3, [pc, #200]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e2:	0e1b      	lsrs	r3, r3, #24
 80040e4:	f003 030f 	and.w	r3, r3, #15
 80040e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ea:	4b2f      	ldr	r3, [pc, #188]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040f0:	0f1b      	lsrs	r3, r3, #28
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	019a      	lsls	r2, r3, #6
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	041b      	lsls	r3, r3, #16
 8004104:	431a      	orrs	r2, r3
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	061b      	lsls	r3, r3, #24
 800410a:	431a      	orrs	r2, r3
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	4925      	ldr	r1, [pc, #148]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	019a      	lsls	r2, r3, #6
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	071b      	lsls	r3, r3, #28
 8004140:	4919      	ldr	r1, [pc, #100]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004148:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a16      	ldr	r2, [pc, #88]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004152:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004154:	f7fd fb9e 	bl	8001894 <HAL_GetTick>
 8004158:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800415a:	e008      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800415c:	f7fd fb9a 	bl	8001894 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	2b64      	cmp	r3, #100	@ 0x64
 8004168:	d901      	bls.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e0d7      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800416e:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f0      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 80cd 	bne.w	800431c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004182:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a08      	ldr	r2, [pc, #32]	@ (80041a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004188:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800418c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800418e:	f7fd fb81 	bl	8001894 <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004194:	e00a      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004196:	f7fd fb7d 	bl	8001894 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b64      	cmp	r3, #100	@ 0x64
 80041a2:	d903      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e0ba      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b8:	d0ed      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d02e      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d12a      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041e2:	4b51      	ldr	r3, [pc, #324]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e8:	0c1b      	lsrs	r3, r3, #16
 80041ea:	f003 0303 	and.w	r3, r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	0f1b      	lsrs	r3, r3, #28
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	019a      	lsls	r2, r3, #6
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	041b      	lsls	r3, r3, #16
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	061b      	lsls	r3, r3, #24
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	071b      	lsls	r3, r3, #28
 8004216:	4944      	ldr	r1, [pc, #272]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800421e:	4b42      	ldr	r3, [pc, #264]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004224:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	493d      	ldr	r1, [pc, #244]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d022      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004248:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800424c:	d11d      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800424e:	4b36      	ldr	r3, [pc, #216]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004254:	0e1b      	lsrs	r3, r3, #24
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800425c:	4b32      	ldr	r3, [pc, #200]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800425e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004262:	0f1b      	lsrs	r3, r3, #28
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	019a      	lsls	r2, r3, #6
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	041b      	lsls	r3, r3, #16
 8004276:	431a      	orrs	r2, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	061b      	lsls	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	071b      	lsls	r3, r3, #28
 8004282:	4929      	ldr	r1, [pc, #164]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d028      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004296:	4b24      	ldr	r3, [pc, #144]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429c:	0e1b      	lsrs	r3, r3, #24
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80042a4:	4b20      	ldr	r3, [pc, #128]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	019a      	lsls	r2, r3, #6
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	431a      	orrs	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	071b      	lsls	r3, r3, #28
 80042ca:	4917      	ldr	r1, [pc, #92]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	4911      	ldr	r1, [pc, #68]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a0e      	ldr	r2, [pc, #56]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd face 	bl	8001894 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042fc:	f7fd faca 	bl	8001894 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e007      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800431a:	d1ef      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3720      	adds	r7, #32
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	40023800 	.word	0x40023800

0800432c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e049      	b.n	80043d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd f8a0 	bl	8001498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	4619      	mov	r1, r3
 800436a:	4610      	mov	r0, r2
 800436c:	f000 fb3c 	bl	80049e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
	...

080043dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e04c      	b.n	800448e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a26      	ldr	r2, [pc, #152]	@ (800449c <HAL_TIM_Base_Start+0xc0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440e:	d01d      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a22      	ldr	r2, [pc, #136]	@ (80044a0 <HAL_TIM_Base_Start+0xc4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a21      	ldr	r2, [pc, #132]	@ (80044a4 <HAL_TIM_Base_Start+0xc8>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1f      	ldr	r2, [pc, #124]	@ (80044a8 <HAL_TIM_Base_Start+0xcc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <HAL_TIM_Base_Start+0xd0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a1c      	ldr	r2, [pc, #112]	@ (80044b0 <HAL_TIM_Base_Start+0xd4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIM_Base_Start+0x70>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1b      	ldr	r2, [pc, #108]	@ (80044b4 <HAL_TIM_Base_Start+0xd8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d115      	bne.n	8004478 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <HAL_TIM_Base_Start+0xdc>)
 8004454:	4013      	ands	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b06      	cmp	r3, #6
 800445c:	d015      	beq.n	800448a <HAL_TIM_Base_Start+0xae>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004464:	d011      	beq.n	800448a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004476:	e008      	b.n	800448a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e000      	b.n	800448c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800448a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000
 80044a0:	40000400 	.word	0x40000400
 80044a4:	40000800 	.word	0x40000800
 80044a8:	40000c00 	.word	0x40000c00
 80044ac:	40010400 	.word	0x40010400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40001800 	.word	0x40001800
 80044b8:	00010007 	.word	0x00010007

080044bc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044ce:	4013      	ands	r3, r2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <HAL_TIM_Base_Stop+0x38>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a1a      	ldr	r2, [r3, #32]
 80044da:	f240 4344 	movw	r3, #1092	@ 0x444
 80044de:	4013      	ands	r3, r2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_Base_Stop+0x38>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0201 	bic.w	r2, r2, #1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
	...

0800450c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b086      	sub	sp, #24
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e08f      	b.n	8004640 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d106      	bne.n	800453a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7fc ff63 	bl	8001400 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b3e      	ldr	r3, [pc, #248]	@ (8004648 <HAL_TIM_Encoder_Init+0x13c>)
 800454e:	400b      	ands	r3, r1
 8004550:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f000 fa43 	bl	80049e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	4b31      	ldr	r3, [pc, #196]	@ (800464c <HAL_TIM_Encoder_Init+0x140>)
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	4313      	orrs	r3, r2
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004650 <HAL_TIM_Encoder_Init+0x144>)
 80045a2:	4013      	ands	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004654 <HAL_TIM_Encoder_Init+0x148>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	021b      	lsls	r3, r3, #8
 80045b8:	4313      	orrs	r3, r2
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	031b      	lsls	r3, r3, #12
 80045cc:	4313      	orrs	r3, r2
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80045da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80045e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	4313      	orrs	r3, r2
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	697a      	ldr	r2, [r7, #20]
 80045fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2201      	movs	r2, #1
 800461a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	fffebff8 	.word	0xfffebff8
 800464c:	fffffcfc 	.word	0xfffffcfc
 8004650:	fffff3f3 	.word	0xfffff3f3
 8004654:	ffff0f0f 	.word	0xffff0f0f

08004658 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004668:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004670:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004678:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004680:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d110      	bne.n	80046aa <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800468e:	7b7b      	ldrb	r3, [r7, #13]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d001      	beq.n	8004698 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e069      	b.n	800476c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046a8:	e031      	b.n	800470e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b04      	cmp	r3, #4
 80046ae:	d110      	bne.n	80046d2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046b0:	7bbb      	ldrb	r3, [r7, #14]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046b6:	7b3b      	ldrb	r3, [r7, #12]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d001      	beq.n	80046c0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e055      	b.n	800476c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046d0:	e01d      	b.n	800470e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d108      	bne.n	80046ea <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d8:	7bbb      	ldrb	r3, [r7, #14]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d105      	bne.n	80046ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046de:	7b7b      	ldrb	r3, [r7, #13]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d102      	bne.n	80046ea <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e4:	7b3b      	ldrb	r3, [r7, #12]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d001      	beq.n	80046ee <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e03e      	b.n	800476c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2202      	movs	r2, #2
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_TIM_Encoder_Start+0xc4>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d008      	beq.n	800472c <HAL_TIM_Encoder_Start+0xd4>
 800471a:	e00f      	b.n	800473c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	2100      	movs	r1, #0
 8004724:	4618      	mov	r0, r3
 8004726:	f000 fa0b 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 800472a:	e016      	b.n	800475a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	2104      	movs	r1, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fa03 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 800473a:	e00e      	b.n	800475a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2201      	movs	r2, #1
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 f9fb 	bl	8004b40 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	2104      	movs	r1, #4
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f9f4 	bl	8004b40 <TIM_CCxChannelCmd>
      break;
 8004758:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0201 	orr.w	r2, r2, #1
 8004768:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d020      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01b      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0202 	mvn.w	r2, #2
 80047a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8f3 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8e5 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8f6 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d020      	beq.n	8004824 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f06f 0204 	mvn.w	r2, #4
 80047f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2202      	movs	r2, #2
 80047fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8cd 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 8004810:	e005      	b.n	800481e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f8bf 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8d0 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d020      	beq.n	8004870 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01b      	beq.n	8004870 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0208 	mvn.w	r2, #8
 8004840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2204      	movs	r2, #4
 8004846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8a7 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 800485c:	e005      	b.n	800486a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f899 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f8aa 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d020      	beq.n	80048bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01b      	beq.n	80048bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0210 	mvn.w	r2, #16
 800488c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2208      	movs	r2, #8
 8004892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f881 	bl	80049aa <HAL_TIM_IC_CaptureCallback>
 80048a8:	e005      	b.n	80048b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f873 	bl	8004996 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f884 	bl	80049be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2200      	movs	r2, #0
 80048ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d007      	beq.n	80048e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0201 	mvn.w	r2, #1
 80048d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 f851 	bl	8004982 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f9d7 	bl	8004cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00c      	beq.n	8004932 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800492a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f9cf 	bl	8004cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00c      	beq.n	8004956 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800494e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f83e 	bl	80049d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00c      	beq.n	800497a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d007      	beq.n	800497a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0220 	mvn.w	r2, #32
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f997 	bl	8004ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b085      	sub	sp, #20
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a46      	ldr	r2, [pc, #280]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a06:	d00f      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a43      	ldr	r2, [pc, #268]	@ (8004b18 <TIM_Base_SetConfig+0x130>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a42      	ldr	r2, [pc, #264]	@ (8004b1c <TIM_Base_SetConfig+0x134>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a41      	ldr	r2, [pc, #260]	@ (8004b20 <TIM_Base_SetConfig+0x138>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0x40>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a40      	ldr	r2, [pc, #256]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d108      	bne.n	8004a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a35      	ldr	r2, [pc, #212]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d02b      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a48:	d027      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a32      	ldr	r2, [pc, #200]	@ (8004b18 <TIM_Base_SetConfig+0x130>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d023      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a31      	ldr	r2, [pc, #196]	@ (8004b1c <TIM_Base_SetConfig+0x134>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d01f      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <TIM_Base_SetConfig+0x138>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01b      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d017      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b28 <TIM_Base_SetConfig+0x140>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a2d      	ldr	r2, [pc, #180]	@ (8004b2c <TIM_Base_SetConfig+0x144>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a2c      	ldr	r2, [pc, #176]	@ (8004b30 <TIM_Base_SetConfig+0x148>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2b      	ldr	r2, [pc, #172]	@ (8004b34 <TIM_Base_SetConfig+0x14c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b38 <TIM_Base_SetConfig+0x150>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a29      	ldr	r2, [pc, #164]	@ (8004b3c <TIM_Base_SetConfig+0x154>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d108      	bne.n	8004aac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689a      	ldr	r2, [r3, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <TIM_Base_SetConfig+0x12c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d003      	beq.n	8004ae0 <TIM_Base_SetConfig+0xf8>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a12      	ldr	r2, [pc, #72]	@ (8004b24 <TIM_Base_SetConfig+0x13c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d103      	bne.n	8004ae8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	f023 0201 	bic.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]
  }
}
 8004b06:	bf00      	nop
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40000400 	.word	0x40000400
 8004b1c:	40000800 	.word	0x40000800
 8004b20:	40000c00 	.word	0x40000c00
 8004b24:	40010400 	.word	0x40010400
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800
 8004b34:	40001800 	.word	0x40001800
 8004b38:	40001c00 	.word	0x40001c00
 8004b3c:	40002000 	.word	0x40002000

08004b40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	2201      	movs	r2, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1a      	ldr	r2, [r3, #32]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	401a      	ands	r2, r3
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6a1a      	ldr	r2, [r3, #32]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	fa01 f303 	lsl.w	r3, r1, r3
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
	...

08004b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d101      	bne.n	8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ba0:	2302      	movs	r3, #2
 8004ba2:	e06d      	b.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d108      	bne.n	8004bea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004bde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a20      	ldr	r2, [pc, #128]	@ (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d022      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c16:	d01d      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d018      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d013      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00e      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	@ (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a16      	ldr	r2, [pc, #88]	@ (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d004      	beq.n	8004c54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d10c      	bne.n	8004c6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2201      	movs	r2, #1
 8004c72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40010000 	.word	0x40010000
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40001800 	.word	0x40001800

08004ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b083      	sub	sp, #12
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e040      	b.n	8004d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d106      	bne.n	8004d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fc fbe6 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2224      	movs	r2, #36	@ 0x24
 8004d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f022 0201 	bic.w	r2, r2, #1
 8004d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 fa8c 	bl	8005248 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f000 f825 	bl	8004d80 <UART_SetConfig>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e01b      	b.n	8004d78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fb0b 	bl	800538c <UART_CheckIdleState>
 8004d76:	4603      	mov	r3, r0
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	4ba6      	ldr	r3, [pc, #664]	@ (8005044 <UART_SetConfig+0x2c4>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	6979      	ldr	r1, [r7, #20]
 8004db4:	430b      	orrs	r3, r1
 8004db6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a94      	ldr	r2, [pc, #592]	@ (8005048 <UART_SetConfig+0x2c8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d120      	bne.n	8004e3e <UART_SetConfig+0xbe>
 8004dfc:	4b93      	ldr	r3, [pc, #588]	@ (800504c <UART_SetConfig+0x2cc>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e02:	f003 0303 	and.w	r3, r3, #3
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d816      	bhi.n	8004e38 <UART_SetConfig+0xb8>
 8004e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e10 <UART_SetConfig+0x90>)
 8004e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e2d 	.word	0x08004e2d
 8004e18:	08004e27 	.word	0x08004e27
 8004e1c:	08004e33 	.word	0x08004e33
 8004e20:	2301      	movs	r3, #1
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e150      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e26:	2302      	movs	r3, #2
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e14d      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e14a      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e32:	2308      	movs	r3, #8
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e147      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e144      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a83      	ldr	r2, [pc, #524]	@ (8005050 <UART_SetConfig+0x2d0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d132      	bne.n	8004eae <UART_SetConfig+0x12e>
 8004e48:	4b80      	ldr	r3, [pc, #512]	@ (800504c <UART_SetConfig+0x2cc>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d828      	bhi.n	8004ea8 <UART_SetConfig+0x128>
 8004e56:	a201      	add	r2, pc, #4	@ (adr r2, 8004e5c <UART_SetConfig+0xdc>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e91 	.word	0x08004e91
 8004e60:	08004ea9 	.word	0x08004ea9
 8004e64:	08004ea9 	.word	0x08004ea9
 8004e68:	08004ea9 	.word	0x08004ea9
 8004e6c:	08004e9d 	.word	0x08004e9d
 8004e70:	08004ea9 	.word	0x08004ea9
 8004e74:	08004ea9 	.word	0x08004ea9
 8004e78:	08004ea9 	.word	0x08004ea9
 8004e7c:	08004e97 	.word	0x08004e97
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004ea9 	.word	0x08004ea9
 8004e8c:	08004ea3 	.word	0x08004ea3
 8004e90:	2300      	movs	r3, #0
 8004e92:	77fb      	strb	r3, [r7, #31]
 8004e94:	e118      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e96:	2302      	movs	r3, #2
 8004e98:	77fb      	strb	r3, [r7, #31]
 8004e9a:	e115      	b.n	80050c8 <UART_SetConfig+0x348>
 8004e9c:	2304      	movs	r3, #4
 8004e9e:	77fb      	strb	r3, [r7, #31]
 8004ea0:	e112      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ea2:	2308      	movs	r3, #8
 8004ea4:	77fb      	strb	r3, [r7, #31]
 8004ea6:	e10f      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ea8:	2310      	movs	r3, #16
 8004eaa:	77fb      	strb	r3, [r7, #31]
 8004eac:	e10c      	b.n	80050c8 <UART_SetConfig+0x348>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a68      	ldr	r2, [pc, #416]	@ (8005054 <UART_SetConfig+0x2d4>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d120      	bne.n	8004efa <UART_SetConfig+0x17a>
 8004eb8:	4b64      	ldr	r3, [pc, #400]	@ (800504c <UART_SetConfig+0x2cc>)
 8004eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ebe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ec2:	2b30      	cmp	r3, #48	@ 0x30
 8004ec4:	d013      	beq.n	8004eee <UART_SetConfig+0x16e>
 8004ec6:	2b30      	cmp	r3, #48	@ 0x30
 8004ec8:	d814      	bhi.n	8004ef4 <UART_SetConfig+0x174>
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d009      	beq.n	8004ee2 <UART_SetConfig+0x162>
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d810      	bhi.n	8004ef4 <UART_SetConfig+0x174>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d002      	beq.n	8004edc <UART_SetConfig+0x15c>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d006      	beq.n	8004ee8 <UART_SetConfig+0x168>
 8004eda:	e00b      	b.n	8004ef4 <UART_SetConfig+0x174>
 8004edc:	2300      	movs	r3, #0
 8004ede:	77fb      	strb	r3, [r7, #31]
 8004ee0:	e0f2      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	77fb      	strb	r3, [r7, #31]
 8004ee6:	e0ef      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e0ec      	b.n	80050c8 <UART_SetConfig+0x348>
 8004eee:	2308      	movs	r3, #8
 8004ef0:	77fb      	strb	r3, [r7, #31]
 8004ef2:	e0e9      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	77fb      	strb	r3, [r7, #31]
 8004ef8:	e0e6      	b.n	80050c8 <UART_SetConfig+0x348>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a56      	ldr	r2, [pc, #344]	@ (8005058 <UART_SetConfig+0x2d8>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d120      	bne.n	8004f46 <UART_SetConfig+0x1c6>
 8004f04:	4b51      	ldr	r3, [pc, #324]	@ (800504c <UART_SetConfig+0x2cc>)
 8004f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f10:	d013      	beq.n	8004f3a <UART_SetConfig+0x1ba>
 8004f12:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f14:	d814      	bhi.n	8004f40 <UART_SetConfig+0x1c0>
 8004f16:	2b80      	cmp	r3, #128	@ 0x80
 8004f18:	d009      	beq.n	8004f2e <UART_SetConfig+0x1ae>
 8004f1a:	2b80      	cmp	r3, #128	@ 0x80
 8004f1c:	d810      	bhi.n	8004f40 <UART_SetConfig+0x1c0>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x1a8>
 8004f22:	2b40      	cmp	r3, #64	@ 0x40
 8004f24:	d006      	beq.n	8004f34 <UART_SetConfig+0x1b4>
 8004f26:	e00b      	b.n	8004f40 <UART_SetConfig+0x1c0>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e0cc      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e0c9      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f34:	2304      	movs	r3, #4
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e0c6      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f3a:	2308      	movs	r3, #8
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	e0c3      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f40:	2310      	movs	r3, #16
 8004f42:	77fb      	strb	r3, [r7, #31]
 8004f44:	e0c0      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a44      	ldr	r2, [pc, #272]	@ (800505c <UART_SetConfig+0x2dc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d125      	bne.n	8004f9c <UART_SetConfig+0x21c>
 8004f50:	4b3e      	ldr	r3, [pc, #248]	@ (800504c <UART_SetConfig+0x2cc>)
 8004f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f5e:	d017      	beq.n	8004f90 <UART_SetConfig+0x210>
 8004f60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f64:	d817      	bhi.n	8004f96 <UART_SetConfig+0x216>
 8004f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f6a:	d00b      	beq.n	8004f84 <UART_SetConfig+0x204>
 8004f6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f70:	d811      	bhi.n	8004f96 <UART_SetConfig+0x216>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <UART_SetConfig+0x1fe>
 8004f76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f7a:	d006      	beq.n	8004f8a <UART_SetConfig+0x20a>
 8004f7c:	e00b      	b.n	8004f96 <UART_SetConfig+0x216>
 8004f7e:	2300      	movs	r3, #0
 8004f80:	77fb      	strb	r3, [r7, #31]
 8004f82:	e0a1      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f84:	2302      	movs	r3, #2
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e09e      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e09b      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f90:	2308      	movs	r3, #8
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e098      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f96:	2310      	movs	r3, #16
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e095      	b.n	80050c8 <UART_SetConfig+0x348>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2f      	ldr	r2, [pc, #188]	@ (8005060 <UART_SetConfig+0x2e0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d125      	bne.n	8004ff2 <UART_SetConfig+0x272>
 8004fa6:	4b29      	ldr	r3, [pc, #164]	@ (800504c <UART_SetConfig+0x2cc>)
 8004fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004fb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fb4:	d017      	beq.n	8004fe6 <UART_SetConfig+0x266>
 8004fb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004fba:	d817      	bhi.n	8004fec <UART_SetConfig+0x26c>
 8004fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc0:	d00b      	beq.n	8004fda <UART_SetConfig+0x25a>
 8004fc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc6:	d811      	bhi.n	8004fec <UART_SetConfig+0x26c>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <UART_SetConfig+0x254>
 8004fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x260>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x26c>
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e076      	b.n	80050c8 <UART_SetConfig+0x348>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e073      	b.n	80050c8 <UART_SetConfig+0x348>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e070      	b.n	80050c8 <UART_SetConfig+0x348>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e06d      	b.n	80050c8 <UART_SetConfig+0x348>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e06a      	b.n	80050c8 <UART_SetConfig+0x348>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <UART_SetConfig+0x2e4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d138      	bne.n	800506e <UART_SetConfig+0x2ee>
 8004ffc:	4b13      	ldr	r3, [pc, #76]	@ (800504c <UART_SetConfig+0x2cc>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005002:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005006:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800500a:	d017      	beq.n	800503c <UART_SetConfig+0x2bc>
 800500c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005010:	d82a      	bhi.n	8005068 <UART_SetConfig+0x2e8>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005016:	d00b      	beq.n	8005030 <UART_SetConfig+0x2b0>
 8005018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800501c:	d824      	bhi.n	8005068 <UART_SetConfig+0x2e8>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <UART_SetConfig+0x2aa>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005026:	d006      	beq.n	8005036 <UART_SetConfig+0x2b6>
 8005028:	e01e      	b.n	8005068 <UART_SetConfig+0x2e8>
 800502a:	2300      	movs	r3, #0
 800502c:	77fb      	strb	r3, [r7, #31]
 800502e:	e04b      	b.n	80050c8 <UART_SetConfig+0x348>
 8005030:	2302      	movs	r3, #2
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e048      	b.n	80050c8 <UART_SetConfig+0x348>
 8005036:	2304      	movs	r3, #4
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e045      	b.n	80050c8 <UART_SetConfig+0x348>
 800503c:	2308      	movs	r3, #8
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e042      	b.n	80050c8 <UART_SetConfig+0x348>
 8005042:	bf00      	nop
 8005044:	efff69f3 	.word	0xefff69f3
 8005048:	40011000 	.word	0x40011000
 800504c:	40023800 	.word	0x40023800
 8005050:	40004400 	.word	0x40004400
 8005054:	40004800 	.word	0x40004800
 8005058:	40004c00 	.word	0x40004c00
 800505c:	40005000 	.word	0x40005000
 8005060:	40011400 	.word	0x40011400
 8005064:	40007800 	.word	0x40007800
 8005068:	2310      	movs	r3, #16
 800506a:	77fb      	strb	r3, [r7, #31]
 800506c:	e02c      	b.n	80050c8 <UART_SetConfig+0x348>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a72      	ldr	r2, [pc, #456]	@ (800523c <UART_SetConfig+0x4bc>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d125      	bne.n	80050c4 <UART_SetConfig+0x344>
 8005078:	4b71      	ldr	r3, [pc, #452]	@ (8005240 <UART_SetConfig+0x4c0>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005082:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005086:	d017      	beq.n	80050b8 <UART_SetConfig+0x338>
 8005088:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800508c:	d817      	bhi.n	80050be <UART_SetConfig+0x33e>
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d00b      	beq.n	80050ac <UART_SetConfig+0x32c>
 8005094:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005098:	d811      	bhi.n	80050be <UART_SetConfig+0x33e>
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <UART_SetConfig+0x326>
 800509e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050a2:	d006      	beq.n	80050b2 <UART_SetConfig+0x332>
 80050a4:	e00b      	b.n	80050be <UART_SetConfig+0x33e>
 80050a6:	2300      	movs	r3, #0
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	e00d      	b.n	80050c8 <UART_SetConfig+0x348>
 80050ac:	2302      	movs	r3, #2
 80050ae:	77fb      	strb	r3, [r7, #31]
 80050b0:	e00a      	b.n	80050c8 <UART_SetConfig+0x348>
 80050b2:	2304      	movs	r3, #4
 80050b4:	77fb      	strb	r3, [r7, #31]
 80050b6:	e007      	b.n	80050c8 <UART_SetConfig+0x348>
 80050b8:	2308      	movs	r3, #8
 80050ba:	77fb      	strb	r3, [r7, #31]
 80050bc:	e004      	b.n	80050c8 <UART_SetConfig+0x348>
 80050be:	2310      	movs	r3, #16
 80050c0:	77fb      	strb	r3, [r7, #31]
 80050c2:	e001      	b.n	80050c8 <UART_SetConfig+0x348>
 80050c4:	2310      	movs	r3, #16
 80050c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050d0:	d15b      	bne.n	800518a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80050d2:	7ffb      	ldrb	r3, [r7, #31]
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d828      	bhi.n	800512a <UART_SetConfig+0x3aa>
 80050d8:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x360>)
 80050da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050de:	bf00      	nop
 80050e0:	08005105 	.word	0x08005105
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	08005115 	.word	0x08005115
 80050ec:	0800512b 	.word	0x0800512b
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	0800512b 	.word	0x0800512b
 80050f8:	0800512b 	.word	0x0800512b
 80050fc:	0800512b 	.word	0x0800512b
 8005100:	08005123 	.word	0x08005123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005104:	f7fe fcfa 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 8005108:	61b8      	str	r0, [r7, #24]
        break;
 800510a:	e013      	b.n	8005134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fd0a 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 8005110:	61b8      	str	r0, [r7, #24]
        break;
 8005112:	e00f      	b.n	8005134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005114:	4b4b      	ldr	r3, [pc, #300]	@ (8005244 <UART_SetConfig+0x4c4>)
 8005116:	61bb      	str	r3, [r7, #24]
        break;
 8005118:	e00c      	b.n	8005134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511a:	f7fe fbdd 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 800511e:	61b8      	str	r0, [r7, #24]
        break;
 8005120:	e008      	b.n	8005134 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005126:	61bb      	str	r3, [r7, #24]
        break;
 8005128:	e004      	b.n	8005134 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	77bb      	strb	r3, [r7, #30]
        break;
 8005132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d074      	beq.n	8005224 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	005a      	lsls	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	085b      	lsrs	r3, r3, #1
 8005144:	441a      	add	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	fbb2 f3f3 	udiv	r3, r2, r3
 800514e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	2b0f      	cmp	r3, #15
 8005154:	d916      	bls.n	8005184 <UART_SetConfig+0x404>
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515c:	d212      	bcs.n	8005184 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f023 030f 	bic.w	r3, r3, #15
 8005166:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	085b      	lsrs	r3, r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	b29a      	uxth	r2, r3
 8005174:	89fb      	ldrh	r3, [r7, #14]
 8005176:	4313      	orrs	r3, r2
 8005178:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	89fa      	ldrh	r2, [r7, #14]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	e04f      	b.n	8005224 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	77bb      	strb	r3, [r7, #30]
 8005188:	e04c      	b.n	8005224 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800518a:	7ffb      	ldrb	r3, [r7, #31]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d828      	bhi.n	80051e2 <UART_SetConfig+0x462>
 8005190:	a201      	add	r2, pc, #4	@ (adr r2, 8005198 <UART_SetConfig+0x418>)
 8005192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005196:	bf00      	nop
 8005198:	080051bd 	.word	0x080051bd
 800519c:	080051c5 	.word	0x080051c5
 80051a0:	080051cd 	.word	0x080051cd
 80051a4:	080051e3 	.word	0x080051e3
 80051a8:	080051d3 	.word	0x080051d3
 80051ac:	080051e3 	.word	0x080051e3
 80051b0:	080051e3 	.word	0x080051e3
 80051b4:	080051e3 	.word	0x080051e3
 80051b8:	080051db 	.word	0x080051db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051bc:	f7fe fc9e 	bl	8003afc <HAL_RCC_GetPCLK1Freq>
 80051c0:	61b8      	str	r0, [r7, #24]
        break;
 80051c2:	e013      	b.n	80051ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051c4:	f7fe fcae 	bl	8003b24 <HAL_RCC_GetPCLK2Freq>
 80051c8:	61b8      	str	r0, [r7, #24]
        break;
 80051ca:	e00f      	b.n	80051ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005244 <UART_SetConfig+0x4c4>)
 80051ce:	61bb      	str	r3, [r7, #24]
        break;
 80051d0:	e00c      	b.n	80051ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051d2:	f7fe fb81 	bl	80038d8 <HAL_RCC_GetSysClockFreq>
 80051d6:	61b8      	str	r0, [r7, #24]
        break;
 80051d8:	e008      	b.n	80051ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051de:	61bb      	str	r3, [r7, #24]
        break;
 80051e0:	e004      	b.n	80051ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	77bb      	strb	r3, [r7, #30]
        break;
 80051ea:	bf00      	nop
    }

    if (pclk != 0U)
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d018      	beq.n	8005224 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	085a      	lsrs	r2, r3, #1
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	441a      	add	r2, r3
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	2b0f      	cmp	r3, #15
 800520a:	d909      	bls.n	8005220 <UART_SetConfig+0x4a0>
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005212:	d205      	bcs.n	8005220 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	60da      	str	r2, [r3, #12]
 800521e:	e001      	b.n	8005224 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005230:	7fbb      	ldrb	r3, [r7, #30]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40007c00 	.word	0x40007c00
 8005240:	40023800 	.word	0x40023800
 8005244:	00f42400 	.word	0x00f42400

08005248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00a      	beq.n	8005272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	f003 0301 	and.w	r3, r3, #1
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00a      	beq.n	8005294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	430a      	orrs	r2, r1
 8005292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00a      	beq.n	80052b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	430a      	orrs	r2, r1
 80052b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	f003 0310 	and.w	r3, r3, #16
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00a      	beq.n	80052fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00a      	beq.n	800531c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01a      	beq.n	800535e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	430a      	orrs	r2, r1
 800533c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005346:	d10a      	bne.n	800535e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }
}
 8005380:	bf00      	nop
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08c      	sub	sp, #48	@ 0x30
 8005390:	af02      	add	r7, sp, #8
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800539c:	f7fc fa7a 	bl	8001894 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d12e      	bne.n	800540e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	2200      	movs	r2, #0
 80053ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f83b 	bl	800543a <UART_WaitOnFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d021      	beq.n	800540e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053de:	623b      	str	r3, [r7, #32]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	461a      	mov	r2, r3
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ec:	69b9      	ldr	r1, [r7, #24]
 80053ee:	69fa      	ldr	r2, [r7, #28]
 80053f0:	e841 2300 	strex	r3, r2, [r1]
 80053f4:	617b      	str	r3, [r7, #20]
   return(result);
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e6      	bne.n	80053ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e011      	b.n	8005432 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3728      	adds	r7, #40	@ 0x28
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	60b9      	str	r1, [r7, #8]
 8005444:	603b      	str	r3, [r7, #0]
 8005446:	4613      	mov	r3, r2
 8005448:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544a:	e04f      	b.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d04b      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005454:	f7fc fa1e 	bl	8001894 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	429a      	cmp	r2, r3
 8005462:	d302      	bcc.n	800546a <UART_WaitOnFlagUntilTimeout+0x30>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e04e      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0304 	and.w	r3, r3, #4
 8005478:	2b00      	cmp	r3, #0
 800547a:	d037      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2b80      	cmp	r3, #128	@ 0x80
 8005480:	d034      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	2b40      	cmp	r3, #64	@ 0x40
 8005486:	d031      	beq.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d110      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2208      	movs	r2, #8
 800549c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f838 	bl	8005514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2208      	movs	r2, #8
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e029      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c6:	d111      	bne.n	80054ec <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054d0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 f81e 	bl	8005514 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2220      	movs	r2, #32
 80054dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e00f      	b.n	800550c <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	4013      	ands	r3, r2
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	429a      	cmp	r2, r3
 8005508:	d0a0      	beq.n	800544c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005514:	b480      	push	{r7}
 8005516:	b095      	sub	sp, #84	@ 0x54
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005524:	e853 3f00 	ldrex	r3, [r3]
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800553a:	643b      	str	r3, [r7, #64]	@ 0x40
 800553c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005542:	e841 2300 	strex	r3, r2, [r1]
 8005546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1e6      	bne.n	800551c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	3308      	adds	r3, #8
 8005554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	61fb      	str	r3, [r7, #28]
   return(result);
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f023 0301 	bic.w	r3, r3, #1
 8005564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800556e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e5      	bne.n	800554e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005586:	2b01      	cmp	r3, #1
 8005588:	d118      	bne.n	80055bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	60bb      	str	r3, [r7, #8]
   return(result);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f023 0310 	bic.w	r3, r3, #16
 800559e:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6979      	ldr	r1, [r7, #20]
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	613b      	str	r3, [r7, #16]
   return(result);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055d0:	bf00      	nop
 80055d2:	3754      	adds	r7, #84	@ 0x54
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055dc:	b084      	sub	sp, #16
 80055de:	b580      	push	{r7, lr}
 80055e0:	b084      	sub	sp, #16
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	f107 001c 	add.w	r0, r7, #28
 80055ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d121      	bne.n	800563a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	4b21      	ldr	r3, [pc, #132]	@ (800568c <USB_CoreInit+0xb0>)
 8005608:	4013      	ands	r3, r2
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800561a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800561e:	2b01      	cmp	r3, #1
 8005620:	d105      	bne.n	800562e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fa92 	bl	8005b58 <USB_CoreReset>
 8005634:	4603      	mov	r3, r0
 8005636:	73fb      	strb	r3, [r7, #15]
 8005638:	e010      	b.n	800565c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 fa86 	bl	8005b58 <USB_CoreReset>
 800564c:	4603      	mov	r3, r0
 800564e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005654:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800565c:	7fbb      	ldrb	r3, [r7, #30]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10b      	bne.n	800567a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f043 0206 	orr.w	r2, r3, #6
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005686:	b004      	add	sp, #16
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	ffbdffbf 	.word	0xffbdffbf

08005690 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 0201 	bic.w	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr

080056b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b084      	sub	sp, #16
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	460b      	mov	r3, r1
 80056bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d115      	bne.n	8005700 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056e0:	200a      	movs	r0, #10
 80056e2:	f7fc f8e3 	bl	80018ac <HAL_Delay>
      ms += 10U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	330a      	adds	r3, #10
 80056ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa25 	bl	8005b3c <USB_GetMode>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d01e      	beq.n	8005736 <USB_SetCurrentMode+0x84>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80056fc:	d9f0      	bls.n	80056e0 <USB_SetCurrentMode+0x2e>
 80056fe:	e01a      	b.n	8005736 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d115      	bne.n	8005732 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005712:	200a      	movs	r0, #10
 8005714:	f7fc f8ca 	bl	80018ac <HAL_Delay>
      ms += 10U;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	330a      	adds	r3, #10
 800571c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fa0c 	bl	8005b3c <USB_GetMode>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d005      	beq.n	8005736 <USB_SetCurrentMode+0x84>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2bc7      	cmp	r3, #199	@ 0xc7
 800572e:	d9f0      	bls.n	8005712 <USB_SetCurrentMode+0x60>
 8005730:	e001      	b.n	8005736 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e005      	b.n	8005742 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2bc8      	cmp	r3, #200	@ 0xc8
 800573a:	d101      	bne.n	8005740 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800574c:	b084      	sub	sp, #16
 800574e:	b580      	push	{r7, lr}
 8005750:	b086      	sub	sp, #24
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
 8005756:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800575a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
 800576a:	e009      	b.n	8005780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	3340      	adds	r3, #64	@ 0x40
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4413      	add	r3, r2
 8005776:	2200      	movs	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3301      	adds	r3, #1
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b0e      	cmp	r3, #14
 8005784:	d9f2      	bls.n	800576c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005786:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800578a:	2b00      	cmp	r3, #0
 800578c:	d11c      	bne.n	80057c8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800579c:	f043 0302 	orr.w	r3, r3, #2
 80057a0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	e005      	b.n	80057d4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057cc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057da:	461a      	mov	r2, r3
 80057dc:	2300      	movs	r3, #0
 80057de:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057e0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d10d      	bne.n	8005804 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057f0:	2100      	movs	r1, #0
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f968 	bl	8005ac8 <USB_SetDevSpeed>
 80057f8:	e008      	b.n	800580c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057fa:	2101      	movs	r1, #1
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f963 	bl	8005ac8 <USB_SetDevSpeed>
 8005802:	e003      	b.n	800580c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005804:	2103      	movs	r1, #3
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 f95e 	bl	8005ac8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800580c:	2110      	movs	r1, #16
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f8fa 	bl	8005a08 <USB_FlushTxFifo>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f924 	bl	8005a6c <USB_FlushRxFifo>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005834:	461a      	mov	r2, r3
 8005836:	2300      	movs	r3, #0
 8005838:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005840:	461a      	mov	r2, r3
 8005842:	2300      	movs	r3, #0
 8005844:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005852:	2300      	movs	r3, #0
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	e043      	b.n	80058e0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800586a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800586e:	d118      	bne.n	80058a2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	e013      	b.n	80058b4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800589e:	6013      	str	r3, [r2, #0]
 80058a0:	e008      	b.n	80058b4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	461a      	mov	r2, r3
 80058b0:	2300      	movs	r3, #0
 80058b2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c0:	461a      	mov	r2, r3
 80058c2:	2300      	movs	r3, #0
 80058c4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058d2:	461a      	mov	r2, r3
 80058d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	3301      	adds	r3, #1
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058e4:	461a      	mov	r2, r3
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d3b5      	bcc.n	8005858 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ec:	2300      	movs	r3, #0
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	e043      	b.n	800597a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005904:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005908:	d118      	bne.n	800593c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10a      	bne.n	8005926 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005922:	6013      	str	r3, [r2, #0]
 8005924:	e013      	b.n	800594e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005938:	6013      	str	r3, [r2, #0]
 800593a:	e008      	b.n	800594e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	461a      	mov	r2, r3
 800594a:	2300      	movs	r3, #0
 800594c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	015a      	lsls	r2, r3, #5
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	4413      	add	r3, r2
 8005956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800595a:	461a      	mov	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	015a      	lsls	r2, r3, #5
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596c:	461a      	mov	r2, r3
 800596e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005972:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	3301      	adds	r3, #1
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800597e:	461a      	mov	r2, r3
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	4293      	cmp	r3, r2
 8005984:	d3b5      	bcc.n	80058f2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005998:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80059a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80059a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d105      	bne.n	80059bc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	f043 0210 	orr.w	r2, r3, #16
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <USB_DevInit+0x2b4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d005      	beq.n	80059dc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f043 0208 	orr.w	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d105      	bne.n	80059f0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <USB_DevInit+0x2b8>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059fc:	b004      	add	sp, #16
 80059fe:	4770      	bx	lr
 8005a00:	803c3800 	.word	0x803c3800
 8005a04:	40000004 	.word	0x40000004

08005a08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a22:	d901      	bls.n	8005a28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e01b      	b.n	8005a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	daf2      	bge.n	8005a16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	019b      	lsls	r3, r3, #6
 8005a38:	f043 0220 	orr.w	r2, r3, #32
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3301      	adds	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a4c:	d901      	bls.n	8005a52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e006      	b.n	8005a60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d0f0      	beq.n	8005a40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a84:	d901      	bls.n	8005a8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e018      	b.n	8005abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	daf2      	bge.n	8005a78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aa8:	d901      	bls.n	8005aae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e006      	b.n	8005abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d0f0      	beq.n	8005a9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	78fb      	ldrb	r3, [r7, #3]
 8005ae2:	68f9      	ldr	r1, [r7, #12]
 8005ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b14:	f023 0303 	bic.w	r3, r3, #3
 8005b18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b28:	f043 0302 	orr.w	r3, r3, #2
 8005b2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0301 	and.w	r3, r3, #1
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b70:	d901      	bls.n	8005b76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e01b      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	daf2      	bge.n	8005b64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3301      	adds	r3, #1
 8005b92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b9a:	d901      	bls.n	8005ba0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e006      	b.n	8005bae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d0f0      	beq.n	8005b8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <sniprintf>:
 8005bbc:	b40c      	push	{r2, r3}
 8005bbe:	b530      	push	{r4, r5, lr}
 8005bc0:	4b17      	ldr	r3, [pc, #92]	@ (8005c20 <sniprintf+0x64>)
 8005bc2:	1e0c      	subs	r4, r1, #0
 8005bc4:	681d      	ldr	r5, [r3, #0]
 8005bc6:	b09d      	sub	sp, #116	@ 0x74
 8005bc8:	da08      	bge.n	8005bdc <sniprintf+0x20>
 8005bca:	238b      	movs	r3, #139	@ 0x8b
 8005bcc:	602b      	str	r3, [r5, #0]
 8005bce:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd2:	b01d      	add	sp, #116	@ 0x74
 8005bd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bd8:	b002      	add	sp, #8
 8005bda:	4770      	bx	lr
 8005bdc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005be0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005be4:	bf14      	ite	ne
 8005be6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005bea:	4623      	moveq	r3, r4
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005bf4:	9002      	str	r0, [sp, #8]
 8005bf6:	9006      	str	r0, [sp, #24]
 8005bf8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005bfc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005bfe:	ab21      	add	r3, sp, #132	@ 0x84
 8005c00:	a902      	add	r1, sp, #8
 8005c02:	4628      	mov	r0, r5
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f000 f995 	bl	8005f34 <_svfiprintf_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	bfbc      	itt	lt
 8005c0e:	238b      	movlt	r3, #139	@ 0x8b
 8005c10:	602b      	strlt	r3, [r5, #0]
 8005c12:	2c00      	cmp	r4, #0
 8005c14:	d0dd      	beq.n	8005bd2 <sniprintf+0x16>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e7d9      	b.n	8005bd2 <sniprintf+0x16>
 8005c1e:	bf00      	nop
 8005c20:	20000038 	.word	0x20000038

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	@ (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000038 	.word	0x20000038

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	@ (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	@ (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	@ (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 fc66 	bl	8006524 <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	08006644 	.word	0x08006644
 8005c7c:	08006644 	.word	0x08006644
 8005c80:	08006644 	.word	0x08006644
 8005c84:	08006648 	.word	0x08006648

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <_free_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4605      	mov	r5, r0
 8005c90:	2900      	cmp	r1, #0
 8005c92:	d041      	beq.n	8005d18 <_free_r+0x8c>
 8005c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c98:	1f0c      	subs	r4, r1, #4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	bfb8      	it	lt
 8005c9e:	18e4      	addlt	r4, r4, r3
 8005ca0:	f000 f8e0 	bl	8005e64 <__malloc_lock>
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8005d1c <_free_r+0x90>)
 8005ca6:	6813      	ldr	r3, [r2, #0]
 8005ca8:	b933      	cbnz	r3, 8005cb8 <_free_r+0x2c>
 8005caa:	6063      	str	r3, [r4, #4]
 8005cac:	6014      	str	r4, [r2, #0]
 8005cae:	4628      	mov	r0, r5
 8005cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb4:	f000 b8dc 	b.w	8005e70 <__malloc_unlock>
 8005cb8:	42a3      	cmp	r3, r4
 8005cba:	d908      	bls.n	8005cce <_free_r+0x42>
 8005cbc:	6820      	ldr	r0, [r4, #0]
 8005cbe:	1821      	adds	r1, r4, r0
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	bf01      	itttt	eq
 8005cc4:	6819      	ldreq	r1, [r3, #0]
 8005cc6:	685b      	ldreq	r3, [r3, #4]
 8005cc8:	1809      	addeq	r1, r1, r0
 8005cca:	6021      	streq	r1, [r4, #0]
 8005ccc:	e7ed      	b.n	8005caa <_free_r+0x1e>
 8005cce:	461a      	mov	r2, r3
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	b10b      	cbz	r3, 8005cd8 <_free_r+0x4c>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d9fa      	bls.n	8005cce <_free_r+0x42>
 8005cd8:	6811      	ldr	r1, [r2, #0]
 8005cda:	1850      	adds	r0, r2, r1
 8005cdc:	42a0      	cmp	r0, r4
 8005cde:	d10b      	bne.n	8005cf8 <_free_r+0x6c>
 8005ce0:	6820      	ldr	r0, [r4, #0]
 8005ce2:	4401      	add	r1, r0
 8005ce4:	1850      	adds	r0, r2, r1
 8005ce6:	4283      	cmp	r3, r0
 8005ce8:	6011      	str	r1, [r2, #0]
 8005cea:	d1e0      	bne.n	8005cae <_free_r+0x22>
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	6053      	str	r3, [r2, #4]
 8005cf2:	4408      	add	r0, r1
 8005cf4:	6010      	str	r0, [r2, #0]
 8005cf6:	e7da      	b.n	8005cae <_free_r+0x22>
 8005cf8:	d902      	bls.n	8005d00 <_free_r+0x74>
 8005cfa:	230c      	movs	r3, #12
 8005cfc:	602b      	str	r3, [r5, #0]
 8005cfe:	e7d6      	b.n	8005cae <_free_r+0x22>
 8005d00:	6820      	ldr	r0, [r4, #0]
 8005d02:	1821      	adds	r1, r4, r0
 8005d04:	428b      	cmp	r3, r1
 8005d06:	bf04      	itt	eq
 8005d08:	6819      	ldreq	r1, [r3, #0]
 8005d0a:	685b      	ldreq	r3, [r3, #4]
 8005d0c:	6063      	str	r3, [r4, #4]
 8005d0e:	bf04      	itt	eq
 8005d10:	1809      	addeq	r1, r1, r0
 8005d12:	6021      	streq	r1, [r4, #0]
 8005d14:	6054      	str	r4, [r2, #4]
 8005d16:	e7ca      	b.n	8005cae <_free_r+0x22>
 8005d18:	bd38      	pop	{r3, r4, r5, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000a7c 	.word	0x20000a7c

08005d20 <sbrk_aligned>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4e0f      	ldr	r6, [pc, #60]	@ (8005d60 <sbrk_aligned+0x40>)
 8005d24:	460c      	mov	r4, r1
 8005d26:	6831      	ldr	r1, [r6, #0]
 8005d28:	4605      	mov	r5, r0
 8005d2a:	b911      	cbnz	r1, 8005d32 <sbrk_aligned+0x12>
 8005d2c:	f000 fba6 	bl	800647c <_sbrk_r>
 8005d30:	6030      	str	r0, [r6, #0]
 8005d32:	4621      	mov	r1, r4
 8005d34:	4628      	mov	r0, r5
 8005d36:	f000 fba1 	bl	800647c <_sbrk_r>
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	d103      	bne.n	8005d46 <sbrk_aligned+0x26>
 8005d3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005d42:	4620      	mov	r0, r4
 8005d44:	bd70      	pop	{r4, r5, r6, pc}
 8005d46:	1cc4      	adds	r4, r0, #3
 8005d48:	f024 0403 	bic.w	r4, r4, #3
 8005d4c:	42a0      	cmp	r0, r4
 8005d4e:	d0f8      	beq.n	8005d42 <sbrk_aligned+0x22>
 8005d50:	1a21      	subs	r1, r4, r0
 8005d52:	4628      	mov	r0, r5
 8005d54:	f000 fb92 	bl	800647c <_sbrk_r>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	d1f2      	bne.n	8005d42 <sbrk_aligned+0x22>
 8005d5c:	e7ef      	b.n	8005d3e <sbrk_aligned+0x1e>
 8005d5e:	bf00      	nop
 8005d60:	20000a78 	.word	0x20000a78

08005d64 <_malloc_r>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4606      	mov	r6, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d904      	bls.n	8005d8a <_malloc_r+0x26>
 8005d80:	230c      	movs	r3, #12
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	2000      	movs	r0, #0
 8005d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e60 <_malloc_r+0xfc>
 8005d8e:	f000 f869 	bl	8005e64 <__malloc_lock>
 8005d92:	f8d8 3000 	ldr.w	r3, [r8]
 8005d96:	461c      	mov	r4, r3
 8005d98:	bb44      	cbnz	r4, 8005dec <_malloc_r+0x88>
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7ff ffbf 	bl	8005d20 <sbrk_aligned>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	4604      	mov	r4, r0
 8005da6:	d158      	bne.n	8005e5a <_malloc_r+0xf6>
 8005da8:	f8d8 4000 	ldr.w	r4, [r8]
 8005dac:	4627      	mov	r7, r4
 8005dae:	2f00      	cmp	r7, #0
 8005db0:	d143      	bne.n	8005e3a <_malloc_r+0xd6>
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	d04b      	beq.n	8005e4e <_malloc_r+0xea>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	4639      	mov	r1, r7
 8005dba:	4630      	mov	r0, r6
 8005dbc:	eb04 0903 	add.w	r9, r4, r3
 8005dc0:	f000 fb5c 	bl	800647c <_sbrk_r>
 8005dc4:	4581      	cmp	r9, r0
 8005dc6:	d142      	bne.n	8005e4e <_malloc_r+0xea>
 8005dc8:	6821      	ldr	r1, [r4, #0]
 8005dca:	1a6d      	subs	r5, r5, r1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7ff ffa6 	bl	8005d20 <sbrk_aligned>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d03a      	beq.n	8005e4e <_malloc_r+0xea>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	442b      	add	r3, r5
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	f8d8 3000 	ldr.w	r3, [r8]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	bb62      	cbnz	r2, 8005e40 <_malloc_r+0xdc>
 8005de6:	f8c8 7000 	str.w	r7, [r8]
 8005dea:	e00f      	b.n	8005e0c <_malloc_r+0xa8>
 8005dec:	6822      	ldr	r2, [r4, #0]
 8005dee:	1b52      	subs	r2, r2, r5
 8005df0:	d420      	bmi.n	8005e34 <_malloc_r+0xd0>
 8005df2:	2a0b      	cmp	r2, #11
 8005df4:	d917      	bls.n	8005e26 <_malloc_r+0xc2>
 8005df6:	1961      	adds	r1, r4, r5
 8005df8:	42a3      	cmp	r3, r4
 8005dfa:	6025      	str	r5, [r4, #0]
 8005dfc:	bf18      	it	ne
 8005dfe:	6059      	strne	r1, [r3, #4]
 8005e00:	6863      	ldr	r3, [r4, #4]
 8005e02:	bf08      	it	eq
 8005e04:	f8c8 1000 	streq.w	r1, [r8]
 8005e08:	5162      	str	r2, [r4, r5]
 8005e0a:	604b      	str	r3, [r1, #4]
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 f82f 	bl	8005e70 <__malloc_unlock>
 8005e12:	f104 000b 	add.w	r0, r4, #11
 8005e16:	1d23      	adds	r3, r4, #4
 8005e18:	f020 0007 	bic.w	r0, r0, #7
 8005e1c:	1ac2      	subs	r2, r0, r3
 8005e1e:	bf1c      	itt	ne
 8005e20:	1a1b      	subne	r3, r3, r0
 8005e22:	50a3      	strne	r3, [r4, r2]
 8005e24:	e7af      	b.n	8005d86 <_malloc_r+0x22>
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	bf0c      	ite	eq
 8005e2c:	f8c8 2000 	streq.w	r2, [r8]
 8005e30:	605a      	strne	r2, [r3, #4]
 8005e32:	e7eb      	b.n	8005e0c <_malloc_r+0xa8>
 8005e34:	4623      	mov	r3, r4
 8005e36:	6864      	ldr	r4, [r4, #4]
 8005e38:	e7ae      	b.n	8005d98 <_malloc_r+0x34>
 8005e3a:	463c      	mov	r4, r7
 8005e3c:	687f      	ldr	r7, [r7, #4]
 8005e3e:	e7b6      	b.n	8005dae <_malloc_r+0x4a>
 8005e40:	461a      	mov	r2, r3
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	d1fb      	bne.n	8005e40 <_malloc_r+0xdc>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6053      	str	r3, [r2, #4]
 8005e4c:	e7de      	b.n	8005e0c <_malloc_r+0xa8>
 8005e4e:	230c      	movs	r3, #12
 8005e50:	6033      	str	r3, [r6, #0]
 8005e52:	4630      	mov	r0, r6
 8005e54:	f000 f80c 	bl	8005e70 <__malloc_unlock>
 8005e58:	e794      	b.n	8005d84 <_malloc_r+0x20>
 8005e5a:	6005      	str	r5, [r0, #0]
 8005e5c:	e7d6      	b.n	8005e0c <_malloc_r+0xa8>
 8005e5e:	bf00      	nop
 8005e60:	20000a7c 	.word	0x20000a7c

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	@ (8005e6c <__malloc_lock+0x8>)
 8005e66:	f7ff bf0f 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000a74 	.word	0x20000a74

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	@ (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f7ff bf0a 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	20000a74 	.word	0x20000a74

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	461f      	mov	r7, r3
 8005e84:	42be      	cmp	r6, r7
 8005e86:	680b      	ldr	r3, [r1, #0]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4690      	mov	r8, r2
 8005e8e:	d82d      	bhi.n	8005eec <__ssputs_r+0x70>
 8005e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e98:	d026      	beq.n	8005ee8 <__ssputs_r+0x6c>
 8005e9a:	6965      	ldr	r5, [r4, #20]
 8005e9c:	6909      	ldr	r1, [r1, #16]
 8005e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea2:	eba3 0901 	sub.w	r9, r3, r1
 8005ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eaa:	1c7b      	adds	r3, r7, #1
 8005eac:	444b      	add	r3, r9
 8005eae:	106d      	asrs	r5, r5, #1
 8005eb0:	429d      	cmp	r5, r3
 8005eb2:	bf38      	it	cc
 8005eb4:	461d      	movcc	r5, r3
 8005eb6:	0553      	lsls	r3, r2, #21
 8005eb8:	d527      	bpl.n	8005f0a <__ssputs_r+0x8e>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7ff ff52 	bl	8005d64 <_malloc_r>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	b360      	cbz	r0, 8005f1e <__ssputs_r+0xa2>
 8005ec4:	6921      	ldr	r1, [r4, #16]
 8005ec6:	464a      	mov	r2, r9
 8005ec8:	f000 fae8 	bl	800649c <memcpy>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	6126      	str	r6, [r4, #16]
 8005eda:	6165      	str	r5, [r4, #20]
 8005edc:	444e      	add	r6, r9
 8005ede:	eba5 0509 	sub.w	r5, r5, r9
 8005ee2:	6026      	str	r6, [r4, #0]
 8005ee4:	60a5      	str	r5, [r4, #8]
 8005ee6:	463e      	mov	r6, r7
 8005ee8:	42be      	cmp	r6, r7
 8005eea:	d900      	bls.n	8005eee <__ssputs_r+0x72>
 8005eec:	463e      	mov	r6, r7
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	f000 faa8 	bl	8006448 <memmove>
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	1b9b      	subs	r3, r3, r6
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	4433      	add	r3, r6
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f000 fad4 	bl	80064b8 <_realloc_r>
 8005f10:	4606      	mov	r6, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e0      	bne.n	8005ed8 <__ssputs_r+0x5c>
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7ff feb7 	bl	8005c8c <_free_r>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	f8ca 3000 	str.w	r3, [sl]
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e7e9      	b.n	8005f06 <__ssputs_r+0x8a>
	...

08005f34 <_svfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4698      	mov	r8, r3
 8005f3a:	898b      	ldrh	r3, [r1, #12]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	b09d      	sub	sp, #116	@ 0x74
 8005f40:	4607      	mov	r7, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	d510      	bpl.n	8005f6a <_svfiprintf_r+0x36>
 8005f48:	690b      	ldr	r3, [r1, #16]
 8005f4a:	b973      	cbnz	r3, 8005f6a <_svfiprintf_r+0x36>
 8005f4c:	2140      	movs	r1, #64	@ 0x40
 8005f4e:	f7ff ff09 	bl	8005d64 <_malloc_r>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	6128      	str	r0, [r5, #16]
 8005f56:	b930      	cbnz	r0, 8005f66 <_svfiprintf_r+0x32>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b01d      	add	sp, #116	@ 0x74
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	2340      	movs	r3, #64	@ 0x40
 8005f68:	616b      	str	r3, [r5, #20]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	2320      	movs	r3, #32
 8005f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f78:	2330      	movs	r3, #48	@ 0x30
 8005f7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006118 <_svfiprintf_r+0x1e4>
 8005f7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f82:	f04f 0901 	mov.w	r9, #1
 8005f86:	4623      	mov	r3, r4
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f8e:	b10a      	cbz	r2, 8005f94 <_svfiprintf_r+0x60>
 8005f90:	2a25      	cmp	r2, #37	@ 0x25
 8005f92:	d1f9      	bne.n	8005f88 <_svfiprintf_r+0x54>
 8005f94:	ebba 0b04 	subs.w	fp, sl, r4
 8005f98:	d00b      	beq.n	8005fb2 <_svfiprintf_r+0x7e>
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ff6b 	bl	8005e7c <__ssputs_r>
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f000 80a7 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fae:	445a      	add	r2, fp
 8005fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 809f 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc6:	f10a 0a01 	add.w	sl, sl, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9307      	str	r3, [sp, #28]
 8005fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd4:	4654      	mov	r4, sl
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fdc:	484e      	ldr	r0, [pc, #312]	@ (8006118 <_svfiprintf_r+0x1e4>)
 8005fde:	f7fa f91f 	bl	8000220 <memchr>
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	b9d8      	cbnz	r0, 800601e <_svfiprintf_r+0xea>
 8005fe6:	06d0      	lsls	r0, r2, #27
 8005fe8:	bf44      	itt	mi
 8005fea:	2320      	movmi	r3, #32
 8005fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff0:	0711      	lsls	r1, r2, #28
 8005ff2:	bf44      	itt	mi
 8005ff4:	232b      	movmi	r3, #43	@ 0x2b
 8005ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006000:	d015      	beq.n	800602e <_svfiprintf_r+0xfa>
 8006002:	9a07      	ldr	r2, [sp, #28]
 8006004:	4654      	mov	r4, sl
 8006006:	2000      	movs	r0, #0
 8006008:	f04f 0c0a 	mov.w	ip, #10
 800600c:	4621      	mov	r1, r4
 800600e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006012:	3b30      	subs	r3, #48	@ 0x30
 8006014:	2b09      	cmp	r3, #9
 8006016:	d94b      	bls.n	80060b0 <_svfiprintf_r+0x17c>
 8006018:	b1b0      	cbz	r0, 8006048 <_svfiprintf_r+0x114>
 800601a:	9207      	str	r2, [sp, #28]
 800601c:	e014      	b.n	8006048 <_svfiprintf_r+0x114>
 800601e:	eba0 0308 	sub.w	r3, r0, r8
 8006022:	fa09 f303 	lsl.w	r3, r9, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	46a2      	mov	sl, r4
 800602c:	e7d2      	b.n	8005fd4 <_svfiprintf_r+0xa0>
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	9103      	str	r1, [sp, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfbb      	ittet	lt
 800603a:	425b      	neglt	r3, r3
 800603c:	f042 0202 	orrlt.w	r2, r2, #2
 8006040:	9307      	strge	r3, [sp, #28]
 8006042:	9307      	strlt	r3, [sp, #28]
 8006044:	bfb8      	it	lt
 8006046:	9204      	strlt	r2, [sp, #16]
 8006048:	7823      	ldrb	r3, [r4, #0]
 800604a:	2b2e      	cmp	r3, #46	@ 0x2e
 800604c:	d10a      	bne.n	8006064 <_svfiprintf_r+0x130>
 800604e:	7863      	ldrb	r3, [r4, #1]
 8006050:	2b2a      	cmp	r3, #42	@ 0x2a
 8006052:	d132      	bne.n	80060ba <_svfiprintf_r+0x186>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006060:	3402      	adds	r4, #2
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006128 <_svfiprintf_r+0x1f4>
 8006068:	7821      	ldrb	r1, [r4, #0]
 800606a:	2203      	movs	r2, #3
 800606c:	4650      	mov	r0, sl
 800606e:	f7fa f8d7 	bl	8000220 <memchr>
 8006072:	b138      	cbz	r0, 8006084 <_svfiprintf_r+0x150>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	eba0 000a 	sub.w	r0, r0, sl
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	4082      	lsls	r2, r0
 800607e:	4313      	orrs	r3, r2
 8006080:	3401      	adds	r4, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	4824      	ldr	r0, [pc, #144]	@ (800611c <_svfiprintf_r+0x1e8>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800608e:	2206      	movs	r2, #6
 8006090:	f7fa f8c6 	bl	8000220 <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d036      	beq.n	8006106 <_svfiprintf_r+0x1d2>
 8006098:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <_svfiprintf_r+0x1ec>)
 800609a:	bb1b      	cbnz	r3, 80060e4 <_svfiprintf_r+0x1b0>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	3307      	adds	r3, #7
 80060a0:	f023 0307 	bic.w	r3, r3, #7
 80060a4:	3308      	adds	r3, #8
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060aa:	4433      	add	r3, r6
 80060ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ae:	e76a      	b.n	8005f86 <_svfiprintf_r+0x52>
 80060b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b4:	460c      	mov	r4, r1
 80060b6:	2001      	movs	r0, #1
 80060b8:	e7a8      	b.n	800600c <_svfiprintf_r+0xd8>
 80060ba:	2300      	movs	r3, #0
 80060bc:	3401      	adds	r4, #1
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4620      	mov	r0, r4
 80060c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060cc:	3a30      	subs	r2, #48	@ 0x30
 80060ce:	2a09      	cmp	r2, #9
 80060d0:	d903      	bls.n	80060da <_svfiprintf_r+0x1a6>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c6      	beq.n	8006064 <_svfiprintf_r+0x130>
 80060d6:	9105      	str	r1, [sp, #20]
 80060d8:	e7c4      	b.n	8006064 <_svfiprintf_r+0x130>
 80060da:	fb0c 2101 	mla	r1, ip, r1, r2
 80060de:	4604      	mov	r4, r0
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7f0      	b.n	80060c6 <_svfiprintf_r+0x192>
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	462a      	mov	r2, r5
 80060ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <_svfiprintf_r+0x1f0>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4638      	mov	r0, r7
 80060f0:	f3af 8000 	nop.w
 80060f4:	1c42      	adds	r2, r0, #1
 80060f6:	4606      	mov	r6, r0
 80060f8:	d1d6      	bne.n	80060a8 <_svfiprintf_r+0x174>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	065b      	lsls	r3, r3, #25
 80060fe:	f53f af2d 	bmi.w	8005f5c <_svfiprintf_r+0x28>
 8006102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006104:	e72c      	b.n	8005f60 <_svfiprintf_r+0x2c>
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	462a      	mov	r2, r5
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <_svfiprintf_r+0x1f0>)
 800610e:	a904      	add	r1, sp, #16
 8006110:	4638      	mov	r0, r7
 8006112:	f000 f879 	bl	8006208 <_printf_i>
 8006116:	e7ed      	b.n	80060f4 <_svfiprintf_r+0x1c0>
 8006118:	08006608 	.word	0x08006608
 800611c:	08006612 	.word	0x08006612
 8006120:	00000000 	.word	0x00000000
 8006124:	08005e7d 	.word	0x08005e7d
 8006128:	0800660e 	.word	0x0800660e

0800612c <_printf_common>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	4616      	mov	r6, r2
 8006132:	4698      	mov	r8, r3
 8006134:	688a      	ldr	r2, [r1, #8]
 8006136:	690b      	ldr	r3, [r1, #16]
 8006138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800613c:	4293      	cmp	r3, r2
 800613e:	bfb8      	it	lt
 8006140:	4613      	movlt	r3, r2
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006148:	4607      	mov	r7, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b10a      	cbz	r2, 8006152 <_printf_common+0x26>
 800614e:	3301      	adds	r3, #1
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	0699      	lsls	r1, r3, #26
 8006156:	bf42      	ittt	mi
 8006158:	6833      	ldrmi	r3, [r6, #0]
 800615a:	3302      	addmi	r3, #2
 800615c:	6033      	strmi	r3, [r6, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	f015 0506 	ands.w	r5, r5, #6
 8006164:	d106      	bne.n	8006174 <_printf_common+0x48>
 8006166:	f104 0a19 	add.w	sl, r4, #25
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	6832      	ldr	r2, [r6, #0]
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	42ab      	cmp	r3, r5
 8006172:	dc26      	bgt.n	80061c2 <_printf_common+0x96>
 8006174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	3b00      	subs	r3, #0
 800617c:	bf18      	it	ne
 800617e:	2301      	movne	r3, #1
 8006180:	0692      	lsls	r2, r2, #26
 8006182:	d42b      	bmi.n	80061dc <_printf_common+0xb0>
 8006184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006188:	4641      	mov	r1, r8
 800618a:	4638      	mov	r0, r7
 800618c:	47c8      	blx	r9
 800618e:	3001      	adds	r0, #1
 8006190:	d01e      	beq.n	80061d0 <_printf_common+0xa4>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	6922      	ldr	r2, [r4, #16]
 8006196:	f003 0306 	and.w	r3, r3, #6
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf02      	ittt	eq
 800619e:	68e5      	ldreq	r5, [r4, #12]
 80061a0:	6833      	ldreq	r3, [r6, #0]
 80061a2:	1aed      	subeq	r5, r5, r3
 80061a4:	68a3      	ldr	r3, [r4, #8]
 80061a6:	bf0c      	ite	eq
 80061a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ac:	2500      	movne	r5, #0
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bfc4      	itt	gt
 80061b2:	1a9b      	subgt	r3, r3, r2
 80061b4:	18ed      	addgt	r5, r5, r3
 80061b6:	2600      	movs	r6, #0
 80061b8:	341a      	adds	r4, #26
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	d11a      	bne.n	80061f4 <_printf_common+0xc8>
 80061be:	2000      	movs	r0, #0
 80061c0:	e008      	b.n	80061d4 <_printf_common+0xa8>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4641      	mov	r1, r8
 80061c8:	4638      	mov	r0, r7
 80061ca:	47c8      	blx	r9
 80061cc:	3001      	adds	r0, #1
 80061ce:	d103      	bne.n	80061d8 <_printf_common+0xac>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	3501      	adds	r5, #1
 80061da:	e7c6      	b.n	800616a <_printf_common+0x3e>
 80061dc:	18e1      	adds	r1, r4, r3
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	2030      	movs	r0, #48	@ 0x30
 80061e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061e6:	4422      	add	r2, r4
 80061e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061f0:	3302      	adds	r3, #2
 80061f2:	e7c7      	b.n	8006184 <_printf_common+0x58>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4622      	mov	r2, r4
 80061f8:	4641      	mov	r1, r8
 80061fa:	4638      	mov	r0, r7
 80061fc:	47c8      	blx	r9
 80061fe:	3001      	adds	r0, #1
 8006200:	d0e6      	beq.n	80061d0 <_printf_common+0xa4>
 8006202:	3601      	adds	r6, #1
 8006204:	e7d9      	b.n	80061ba <_printf_common+0x8e>
	...

08006208 <_printf_i>:
 8006208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	7e0f      	ldrb	r7, [r1, #24]
 800620e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006210:	2f78      	cmp	r7, #120	@ 0x78
 8006212:	4691      	mov	r9, r2
 8006214:	4680      	mov	r8, r0
 8006216:	460c      	mov	r4, r1
 8006218:	469a      	mov	sl, r3
 800621a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800621e:	d807      	bhi.n	8006230 <_printf_i+0x28>
 8006220:	2f62      	cmp	r7, #98	@ 0x62
 8006222:	d80a      	bhi.n	800623a <_printf_i+0x32>
 8006224:	2f00      	cmp	r7, #0
 8006226:	f000 80d2 	beq.w	80063ce <_printf_i+0x1c6>
 800622a:	2f58      	cmp	r7, #88	@ 0x58
 800622c:	f000 80b9 	beq.w	80063a2 <_printf_i+0x19a>
 8006230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006238:	e03a      	b.n	80062b0 <_printf_i+0xa8>
 800623a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800623e:	2b15      	cmp	r3, #21
 8006240:	d8f6      	bhi.n	8006230 <_printf_i+0x28>
 8006242:	a101      	add	r1, pc, #4	@ (adr r1, 8006248 <_printf_i+0x40>)
 8006244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062b5 	.word	0x080062b5
 8006250:	08006231 	.word	0x08006231
 8006254:	08006231 	.word	0x08006231
 8006258:	08006231 	.word	0x08006231
 800625c:	08006231 	.word	0x08006231
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006231 	.word	0x08006231
 8006268:	08006231 	.word	0x08006231
 800626c:	08006231 	.word	0x08006231
 8006270:	08006231 	.word	0x08006231
 8006274:	080063b5 	.word	0x080063b5
 8006278:	080062df 	.word	0x080062df
 800627c:	0800636f 	.word	0x0800636f
 8006280:	08006231 	.word	0x08006231
 8006284:	08006231 	.word	0x08006231
 8006288:	080063d7 	.word	0x080063d7
 800628c:	08006231 	.word	0x08006231
 8006290:	080062df 	.word	0x080062df
 8006294:	08006231 	.word	0x08006231
 8006298:	08006231 	.word	0x08006231
 800629c:	08006377 	.word	0x08006377
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6032      	str	r2, [r6, #0]
 80062a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062b0:	2301      	movs	r3, #1
 80062b2:	e09d      	b.n	80063f0 <_printf_i+0x1e8>
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	6031      	str	r1, [r6, #0]
 80062bc:	0606      	lsls	r6, r0, #24
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0xbc>
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	e003      	b.n	80062cc <_printf_i+0xc4>
 80062c4:	0645      	lsls	r5, r0, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0xb8>
 80062c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	da03      	bge.n	80062d8 <_printf_i+0xd0>
 80062d0:	232d      	movs	r3, #45	@ 0x2d
 80062d2:	426d      	negs	r5, r5
 80062d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062d8:	4859      	ldr	r0, [pc, #356]	@ (8006440 <_printf_i+0x238>)
 80062da:	230a      	movs	r3, #10
 80062dc:	e011      	b.n	8006302 <_printf_i+0xfa>
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	0608      	lsls	r0, r1, #24
 80062e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062e8:	d402      	bmi.n	80062f0 <_printf_i+0xe8>
 80062ea:	0649      	lsls	r1, r1, #25
 80062ec:	bf48      	it	mi
 80062ee:	b2ad      	uxthmi	r5, r5
 80062f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80062f2:	4853      	ldr	r0, [pc, #332]	@ (8006440 <_printf_i+0x238>)
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	bf14      	ite	ne
 80062f8:	230a      	movne	r3, #10
 80062fa:	2308      	moveq	r3, #8
 80062fc:	2100      	movs	r1, #0
 80062fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006302:	6866      	ldr	r6, [r4, #4]
 8006304:	60a6      	str	r6, [r4, #8]
 8006306:	2e00      	cmp	r6, #0
 8006308:	bfa2      	ittt	ge
 800630a:	6821      	ldrge	r1, [r4, #0]
 800630c:	f021 0104 	bicge.w	r1, r1, #4
 8006310:	6021      	strge	r1, [r4, #0]
 8006312:	b90d      	cbnz	r5, 8006318 <_printf_i+0x110>
 8006314:	2e00      	cmp	r6, #0
 8006316:	d04b      	beq.n	80063b0 <_printf_i+0x1a8>
 8006318:	4616      	mov	r6, r2
 800631a:	fbb5 f1f3 	udiv	r1, r5, r3
 800631e:	fb03 5711 	mls	r7, r3, r1, r5
 8006322:	5dc7      	ldrb	r7, [r0, r7]
 8006324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006328:	462f      	mov	r7, r5
 800632a:	42bb      	cmp	r3, r7
 800632c:	460d      	mov	r5, r1
 800632e:	d9f4      	bls.n	800631a <_printf_i+0x112>
 8006330:	2b08      	cmp	r3, #8
 8006332:	d10b      	bne.n	800634c <_printf_i+0x144>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	07df      	lsls	r7, r3, #31
 8006338:	d508      	bpl.n	800634c <_printf_i+0x144>
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	4299      	cmp	r1, r3
 8006340:	bfde      	ittt	le
 8006342:	2330      	movle	r3, #48	@ 0x30
 8006344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800634c:	1b92      	subs	r2, r2, r6
 800634e:	6122      	str	r2, [r4, #16]
 8006350:	f8cd a000 	str.w	sl, [sp]
 8006354:	464b      	mov	r3, r9
 8006356:	aa03      	add	r2, sp, #12
 8006358:	4621      	mov	r1, r4
 800635a:	4640      	mov	r0, r8
 800635c:	f7ff fee6 	bl	800612c <_printf_common>
 8006360:	3001      	adds	r0, #1
 8006362:	d14a      	bne.n	80063fa <_printf_i+0x1f2>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	b004      	add	sp, #16
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f043 0320 	orr.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	4833      	ldr	r0, [pc, #204]	@ (8006444 <_printf_i+0x23c>)
 8006378:	2778      	movs	r7, #120	@ 0x78
 800637a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	6831      	ldr	r1, [r6, #0]
 8006382:	061f      	lsls	r7, r3, #24
 8006384:	f851 5b04 	ldr.w	r5, [r1], #4
 8006388:	d402      	bmi.n	8006390 <_printf_i+0x188>
 800638a:	065f      	lsls	r7, r3, #25
 800638c:	bf48      	it	mi
 800638e:	b2ad      	uxthmi	r5, r5
 8006390:	6031      	str	r1, [r6, #0]
 8006392:	07d9      	lsls	r1, r3, #31
 8006394:	bf44      	itt	mi
 8006396:	f043 0320 	orrmi.w	r3, r3, #32
 800639a:	6023      	strmi	r3, [r4, #0]
 800639c:	b11d      	cbz	r5, 80063a6 <_printf_i+0x19e>
 800639e:	2310      	movs	r3, #16
 80063a0:	e7ac      	b.n	80062fc <_printf_i+0xf4>
 80063a2:	4827      	ldr	r0, [pc, #156]	@ (8006440 <_printf_i+0x238>)
 80063a4:	e7e9      	b.n	800637a <_printf_i+0x172>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f023 0320 	bic.w	r3, r3, #32
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	e7f6      	b.n	800639e <_printf_i+0x196>
 80063b0:	4616      	mov	r6, r2
 80063b2:	e7bd      	b.n	8006330 <_printf_i+0x128>
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	6825      	ldr	r5, [r4, #0]
 80063b8:	6961      	ldr	r1, [r4, #20]
 80063ba:	1d18      	adds	r0, r3, #4
 80063bc:	6030      	str	r0, [r6, #0]
 80063be:	062e      	lsls	r6, r5, #24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	d501      	bpl.n	80063c8 <_printf_i+0x1c0>
 80063c4:	6019      	str	r1, [r3, #0]
 80063c6:	e002      	b.n	80063ce <_printf_i+0x1c6>
 80063c8:	0668      	lsls	r0, r5, #25
 80063ca:	d5fb      	bpl.n	80063c4 <_printf_i+0x1bc>
 80063cc:	8019      	strh	r1, [r3, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	4616      	mov	r6, r2
 80063d4:	e7bc      	b.n	8006350 <_printf_i+0x148>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	6032      	str	r2, [r6, #0]
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	2100      	movs	r1, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7f9 ff1c 	bl	8000220 <memchr>
 80063e8:	b108      	cbz	r0, 80063ee <_printf_i+0x1e6>
 80063ea:	1b80      	subs	r0, r0, r6
 80063ec:	6060      	str	r0, [r4, #4]
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	2300      	movs	r3, #0
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f8:	e7aa      	b.n	8006350 <_printf_i+0x148>
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d0ad      	beq.n	8006364 <_printf_i+0x15c>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d413      	bmi.n	8006436 <_printf_i+0x22e>
 800640e:	68e0      	ldr	r0, [r4, #12]
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	4298      	cmp	r0, r3
 8006414:	bfb8      	it	lt
 8006416:	4618      	movlt	r0, r3
 8006418:	e7a6      	b.n	8006368 <_printf_i+0x160>
 800641a:	2301      	movs	r3, #1
 800641c:	4632      	mov	r2, r6
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d09d      	beq.n	8006364 <_printf_i+0x15c>
 8006428:	3501      	adds	r5, #1
 800642a:	68e3      	ldr	r3, [r4, #12]
 800642c:	9903      	ldr	r1, [sp, #12]
 800642e:	1a5b      	subs	r3, r3, r1
 8006430:	42ab      	cmp	r3, r5
 8006432:	dcf2      	bgt.n	800641a <_printf_i+0x212>
 8006434:	e7eb      	b.n	800640e <_printf_i+0x206>
 8006436:	2500      	movs	r5, #0
 8006438:	f104 0619 	add.w	r6, r4, #25
 800643c:	e7f5      	b.n	800642a <_printf_i+0x222>
 800643e:	bf00      	nop
 8006440:	08006619 	.word	0x08006619
 8006444:	0800662a 	.word	0x0800662a

08006448 <memmove>:
 8006448:	4288      	cmp	r0, r1
 800644a:	b510      	push	{r4, lr}
 800644c:	eb01 0402 	add.w	r4, r1, r2
 8006450:	d902      	bls.n	8006458 <memmove+0x10>
 8006452:	4284      	cmp	r4, r0
 8006454:	4623      	mov	r3, r4
 8006456:	d807      	bhi.n	8006468 <memmove+0x20>
 8006458:	1e43      	subs	r3, r0, #1
 800645a:	42a1      	cmp	r1, r4
 800645c:	d008      	beq.n	8006470 <memmove+0x28>
 800645e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006466:	e7f8      	b.n	800645a <memmove+0x12>
 8006468:	4402      	add	r2, r0
 800646a:	4601      	mov	r1, r0
 800646c:	428a      	cmp	r2, r1
 800646e:	d100      	bne.n	8006472 <memmove+0x2a>
 8006470:	bd10      	pop	{r4, pc}
 8006472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647a:	e7f7      	b.n	800646c <memmove+0x24>

0800647c <_sbrk_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	@ (8006498 <_sbrk_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fb f942 	bl	8001710 <_sbrk>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_sbrk_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_sbrk_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	20000a70 	.word	0x20000a70

0800649c <memcpy>:
 800649c:	440a      	add	r2, r1
 800649e:	4291      	cmp	r1, r2
 80064a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a4:	d100      	bne.n	80064a8 <memcpy+0xc>
 80064a6:	4770      	bx	lr
 80064a8:	b510      	push	{r4, lr}
 80064aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b2:	4291      	cmp	r1, r2
 80064b4:	d1f9      	bne.n	80064aa <memcpy+0xe>
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <_realloc_r>:
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	4680      	mov	r8, r0
 80064be:	4615      	mov	r5, r2
 80064c0:	460c      	mov	r4, r1
 80064c2:	b921      	cbnz	r1, 80064ce <_realloc_r+0x16>
 80064c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	4611      	mov	r1, r2
 80064ca:	f7ff bc4b 	b.w	8005d64 <_malloc_r>
 80064ce:	b92a      	cbnz	r2, 80064dc <_realloc_r+0x24>
 80064d0:	f7ff fbdc 	bl	8005c8c <_free_r>
 80064d4:	2400      	movs	r4, #0
 80064d6:	4620      	mov	r0, r4
 80064d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064dc:	f000 f81a 	bl	8006514 <_malloc_usable_size_r>
 80064e0:	4285      	cmp	r5, r0
 80064e2:	4606      	mov	r6, r0
 80064e4:	d802      	bhi.n	80064ec <_realloc_r+0x34>
 80064e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80064ea:	d8f4      	bhi.n	80064d6 <_realloc_r+0x1e>
 80064ec:	4629      	mov	r1, r5
 80064ee:	4640      	mov	r0, r8
 80064f0:	f7ff fc38 	bl	8005d64 <_malloc_r>
 80064f4:	4607      	mov	r7, r0
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d0ec      	beq.n	80064d4 <_realloc_r+0x1c>
 80064fa:	42b5      	cmp	r5, r6
 80064fc:	462a      	mov	r2, r5
 80064fe:	4621      	mov	r1, r4
 8006500:	bf28      	it	cs
 8006502:	4632      	movcs	r2, r6
 8006504:	f7ff ffca 	bl	800649c <memcpy>
 8006508:	4621      	mov	r1, r4
 800650a:	4640      	mov	r0, r8
 800650c:	f7ff fbbe 	bl	8005c8c <_free_r>
 8006510:	463c      	mov	r4, r7
 8006512:	e7e0      	b.n	80064d6 <_realloc_r+0x1e>

08006514 <_malloc_usable_size_r>:
 8006514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006518:	1f18      	subs	r0, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	bfbc      	itt	lt
 800651e:	580b      	ldrlt	r3, [r1, r0]
 8006520:	18c0      	addlt	r0, r0, r3
 8006522:	4770      	bx	lr

08006524 <_init>:
 8006524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006526:	bf00      	nop
 8006528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652a:	bc08      	pop	{r3}
 800652c:	469e      	mov	lr, r3
 800652e:	4770      	bx	lr

08006530 <_fini>:
 8006530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006532:	bf00      	nop
 8006534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006536:	bc08      	pop	{r3}
 8006538:	469e      	mov	lr, r3
 800653a:	4770      	bx	lr
